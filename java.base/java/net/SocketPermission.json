{
  "packageName": "java.net",
  "simpleName": "SocketPermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.Permission",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "implies",
      "comment": "Checks if this socket permission object \"implies\" the specified permission. More specifically, this method first ensures that all of the following are true (and returns false if any of them are not): p is an instanceof SocketPermission, p\u0027s actions are a proper subset of this object\u0027s actions, and p\u0027s port range is included in this port range. Note: port range is ignored when p only contains the action, \u0027resolve\u0027. Then implies checks each of the following, in order, and for each returns true if the stated condition is true: If this object was initialized with a single IP address and one of p\u0027s IP addresses is equal to this object\u0027s IP address. If this object is a wildcard domain (such as *.example.com), and p\u0027s canonical name (the name without any preceding *) ends with this object\u0027s canonical host name. For example, *.example.com implies *.foo.example.com. If this object was not initialized with a single IP address, and one of this object\u0027s IP addresses equals one of p\u0027s IP addresses. If this canonical name equals p\u0027s canonical name. If none of the above are true, implies returns false.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#implies(java.security.Permission)\"\u003eimplies\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the permission to check against."
        ],
        "return": [
          "true if the specified permission is implied by this object, false if not."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks two SocketPermission objects for equality.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to test for equality with this object."
        ],
        "return": [
          "true if \n\u003ci\u003eobj\u003c/i\u003e is a SocketPermission, and has the same hostname, port range, and actions as this SocketPermission object. However, port range will be ignored in the comparison if \n\u003ci\u003eobj\u003c/i\u003e only contains the action, \u0027resolve\u0027."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActions",
      "comment": "Returns the canonical string representation of the actions. Always returns present actions in the following order: connect, listen, accept, resolve.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#getActions()\"\u003egetActions\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the canonical string representation of the actions."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newPermissionCollection",
      "comment": "Returns a new PermissionCollection object for storing SocketPermission objects. SocketPermission objects must be stored in a manner that allows them to be inserted into the collection in any order, but that also enables the PermissionCollection implies method to be implemented in an efficient (and consistent) manner.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#newPermissionCollection()\"\u003enewPermissionCollection\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a new PermissionCollection object suitable for storing SocketPermissions."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new SocketPermission object with the specified actions. The host is expressed as a DNS name, or as a numerical IP address. Optionally, a port or a portrange may be supplied (separated from the DNS name or IP address by a colon). To specify the local machine, use \"localhost\" as the host. Also note: An empty host String (\"\") is equivalent to \"localhost\". The actions parameter contains a comma-separated list of the actions granted for the specified host (and port(s)). Possible actions are \"connect\", \"listen\", \"accept\", \"resolve\", or any combination of those. \"resolve\" is automatically added when any of the other three are specified. Examples of SocketPermission instantiation are the following:     nr \u003d new SocketPermission(\"www.example.com\", \"connect\");\n    nr \u003d new SocketPermission(\"www.example.com:80\", \"connect\");\n    nr \u003d new SocketPermission(\"*.example.com\", \"connect\");\n    nr \u003d new SocketPermission(\"*.edu\", \"resolve\");\n    nr \u003d new SocketPermission(\"204.160.241.0\", \"connect\");\n    nr \u003d new SocketPermission(\"localhost:1024-65535\", \"listen\");\n    nr \u003d new SocketPermission(\"204.160.241.0:1024-65535\", \"connect\");",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the hostname or IP address of the computer, optionally including a colon followed by a port or port range.",
          "\u003ccode\u003eaction\u003c/code\u003e - the action string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any parameters are null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the format of \n\u003ccode\u003ehost\u003c/code\u003e is invalid, or if the \n\u003ccode\u003eaction\u003c/code\u003e string is empty, malformed, or contains an action other than the specified possible actions"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.net.SocketPermission",
  "comment": "This class represents access to a network via sockets. A SocketPermission consists of a host specification and a set of \"actions\" specifying ways to connect to that host. The host is specified as \n\u003cpre\u003e    host \u003d (hostname | IPv4address | iPv6reference) [:portrange]\n    portrange \u003d portnumber | -portnumber | portnumber-[portnumber]\n \u003c/pre\u003e The host is expressed as a DNS name, as a numerical IP address, or as \"localhost\" (for the local machine). The wildcard \"*\" may be included once in a DNS name host specification. If it is included, it must be in the leftmost position, as in \"*.example.com\". \n\u003cp\u003e The format of the IPv6reference should follow that specified in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2732: Format for Literal IPv6 Addresses in URLs\u003c/i\u003e\u003c/a\u003e: \u003c/p\u003e\n\u003cpre\u003e    ipv6reference \u003d \"[\" IPv6address \"]\"\n\u003c/pre\u003e For example, you can construct a SocketPermission instance as the following: \n\u003cpre\u003e    String hostAddress \u003d inetaddress.getHostAddress();\n    if (inetaddress instanceof Inet6Address) {\n        sp \u003d new SocketPermission(\"[\" + hostAddress + \"]:\" + port, action);\n    } else {\n        sp \u003d new SocketPermission(hostAddress + \":\" + port, action);\n    }\n \u003c/pre\u003e or \n\u003cpre\u003e    String host \u003d url.getHost();\n    sp \u003d new SocketPermission(host + \":\" + port, action);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"Inet6Address.html#lform\"\u003efull uncompressed form\u003c/a\u003e of an IPv6 literal address is also valid. \u003c/p\u003e\n\u003cp\u003e The port or portrange is optional. A port specification of the form \"N-\", where \u003ci\u003eN\u003c/i\u003e is a port number, signifies all ports numbered \u003ci\u003eN\u003c/i\u003e and above, while a specification of the form \"-N\" indicates all ports numbered \u003ci\u003eN\u003c/i\u003e and below. The special port value \u003ccode\u003e0\u003c/code\u003e refers to the entire \u003ci\u003eephemeral\u003c/i\u003e port range. This is a fixed range of ports a system may use to allocate dynamic ports from. The actual range may be system dependent. \u003c/p\u003e\n\u003cp\u003e The possible ways to connect to the host are \u003c/p\u003e\n\u003cpre\u003e accept\n connect\n listen\n resolve\n \u003c/pre\u003e The \"listen\" action is only meaningful when used with \"localhost\" and means the ability to bind to a specified port. The \"resolve\" action is implied when any of the other actions are present. The action \"resolve\" refers to host/ip name service lookups. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The actions string is converted to lowercase before processing. \u003c/p\u003e\n\u003cp\u003eAs an example of the creation and meaning of SocketPermissions, note that if the following permission: \u003c/p\u003e\n\u003cpre\u003e   p1 \u003d new SocketPermission(\"foo.example.com:7777\", \"connect,accept\");\n \u003c/pre\u003e is granted to some code, it allows that code to connect to port 7777 on \n\u003ccode\u003efoo.example.com\u003c/code\u003e, and to accept connections on that port. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eSimilarly, if the following permission: \u003c/p\u003e\n\u003cpre\u003e   p2 \u003d new SocketPermission(\"localhost:1024-\", \"accept,connect,listen\");\n \u003c/pre\u003e is granted to some code, it allows that code to accept connections on, connect to, or listen on any port between 1024 and 65535 on the local host. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eNote: Granting code permission to accept or make connections to remote hosts may be dangerous because malevolent code can then more easily transfer and share confidential data among parties who may not otherwise have access to the data.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketPermission.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eSocketPermission\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}