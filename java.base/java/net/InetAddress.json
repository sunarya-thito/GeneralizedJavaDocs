{
  "packageName": "java.net",
  "simpleName": "InetAddress",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMulticastAddress",
      "comment": "Utility routine to check if the InetAddress is an IP multicast address.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the InetAddress is an IP multicast address"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAnyLocalAddress",
      "comment": "Utility routine to check if the InetAddress is a wildcard address.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the InetAddress is a wildcard address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLoopbackAddress",
      "comment": "Utility routine to check if the InetAddress is a loopback address.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the InetAddress is a loopback address; or false otherwise."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLinkLocalAddress",
      "comment": "Utility routine to check if the InetAddress is an link local address.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the InetAddress is a link local address; or false if address is not a link local unicast address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSiteLocalAddress",
      "comment": "Utility routine to check if the InetAddress is a site local address.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the InetAddress is a site local address; or false if address is not a site local unicast address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMCGlobal",
      "comment": "Utility routine to check if the multicast address has global scope.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMCNodeLocal",
      "comment": "Utility routine to check if the multicast address has node scope.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMCLinkLocal",
      "comment": "Utility routine to check if the multicast address has link scope.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMCSiteLocal",
      "comment": "Utility routine to check if the multicast address has site scope.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMCOrgLocal",
      "comment": "Utility routine to check if the multicast address has organization scope.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isReachable",
      "comment": "Test whether that address is reachable. Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible. A typical implementation will use ICMP ECHO REQUESTs if the privilege can be obtained, otherwise it will try to establish a TCP connection on port 7 (Echo) of the destination host. The timeout value, in milliseconds, indicates the maximum amount of time the try should take. If the operation times out before getting an answer, the host is deemed unreachable. A negative value will result in an IllegalArgumentException being thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the time, in milliseconds, before the call aborts"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a network error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etimeout\u003c/code\u003e is negative."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address is reachable."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.NetworkInterface",
            "type": "Class"
          },
          "name": "netif",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ttl",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isReachable",
      "comment": "Test whether that address is reachable. Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible. A typical implementation will use ICMP ECHO REQUESTs if the privilege can be obtained, otherwise it will try to establish a TCP connection on port 7 (Echo) of the destination host. The network interface and ttl parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through. A negative value for the ttl will result in an IllegalArgumentException being thrown. The timeout value, in milliseconds, indicates the maximum amount of time the try should take. If the operation times out before getting an answer, the host is deemed unreachable. A negative value will result in an IllegalArgumentException being thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enetif\u003c/code\u003e - the NetworkInterface through which the test will be done, or null for any interface",
          "\u003ccode\u003ettl\u003c/code\u003e - the maximum numbers of hops to try or 0 for the default",
          "\u003ccode\u003etimeout\u003c/code\u003e - the time, in milliseconds, before the call aborts"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003etimeout\u003c/code\u003e or \n\u003ccode\u003ettl\u003c/code\u003e are negative.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a network error occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating if the address is reachable."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHostName",
      "comment": "Gets the host name for this IP address. If this InetAddress was created with a host name, this host name will be remembered and returned; otherwise, a reverse name lookup will be performed and the result will be returned based on the system configured name lookup service. If a lookup of the name service is required, call getCanonicalHostName. If there is a security manager, its checkConnect method is first called with the hostname and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, it will return the textual representation of the IP address.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getCanonicalHostName()\"\u003e\u003ccode\u003egetCanonicalHostName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the host name for this IP address, or if the operation is not allowed by the security check, the textual representation of the IP address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCanonicalHostName",
      "comment": "Gets the fully qualified domain name for this IP address. Best effort method, meaning we may not be able to return the FQDN depending on the underlying system configuration. If there is a security manager, this method first calls its checkConnect method with the hostname and -1 as its arguments to see if the calling code is allowed to know the hostname for this IP address, i.e., to connect to the host. If the operation is not allowed, it will return the textual representation of the IP address.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the fully qualified domain name for this IP address, or if the operation is not allowed by the security check, the textual representation of the IP address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAddress",
      "comment": "Returns the raw IP address of this InetAddress object. The result is in network byte order: the highest order byte of the address is in getAddress()[0].",
      "annotations": [],
      "tagMap": {
        "return": [
          "the raw IP address of this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHostAddress",
      "comment": "Returns the IP address string in textual presentation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the raw IP address in a string format."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hashcode for this IP address.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this IP address."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the same for the byte arrays.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getAddress()\"\u003e\u003ccode\u003egetAddress()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare against."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Converts this IP address to a String. The string returned is of the form: hostname / literal IP address. If the host name is unresolved, no reverse name service lookup is performed. The hostname part will be represented by an empty string.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this IP address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.UnknownHostException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "host",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getByAddress",
      "comment": "Creates an InetAddress based on the provided host name and IP address. No name service is checked for the validity of the address. The host name can either be a machine name, such as \"www.example.com\", or a textual representation of its IP address. No validity checking is done on the host name either. If addr specifies an IPv4 address an instance of Inet4Address will be returned; otherwise, an instance of Inet6Address will be returned. IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the specified host",
          "\u003ccode\u003eaddr\u003c/code\u003e - the raw IP address in network byte order"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/UnknownHostException.html\" title\u003d\"class in java.net\"\u003eUnknownHostException\u003c/a\u003e\u003c/code\u003e - if IP address is of illegal length"
        ],
        "return": [
          "an InetAddress object created from the raw IP address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.UnknownHostException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "host",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getByName",
      "comment": "Determines the IP address of a host, given the host\u0027s name. The host name can either be a machine name, such as \"www.example.com\", or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked. For host specified in literal IPv6 address, either the form defined in RFC 2732 or the literal IPv6 address format defined in RFC 2373 is accepted. IPv6 scoped addresses are also supported. See here for a description of IPv6 scoped addresses. If the host is null or host.length() is equal to zero, then an InetAddress representing an address of the loopback interface is returned. See RFC 3330 section 2 and RFC 2373 section 2.5.3. If there is a security manager, and host is not null or host.length() is not equal to zero, the security manager\u0027s checkConnect method is called with the hostname and -1 as its arguments to determine if the operation is allowed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the specified host, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/UnknownHostException.html\" title\u003d\"class in java.net\"\u003eUnknownHostException\u003c/a\u003e\u003c/code\u003e - if no IP address for the \n\u003ccode\u003ehost\u003c/code\u003e could be found, or if a scope_id was specified for a global IPv6 address.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its checkConnect method doesn\u0027t allow the operation"
        ],
        "return": [
          "an IP address for the given host name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "java.net.UnknownHostException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "host",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAllByName",
      "comment": "Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system. The host name can either be a machine name, such as \"www.example.com\", or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked. For host specified in literal IPv6 address, either the form defined in RFC 2732 or the literal IPv6 address format defined in RFC 2373 is accepted. A literal IPv6 address may also be qualified by appending a scoped zone identifier or scope_id. The syntax and usage of scope_ids is described here. If the host is null or host.length() is equal to zero, then an InetAddress representing an address of the loopback interface is returned. See RFC 3330 section 2 and RFC 2373 section 2.5.3. If there is a security manager, and host is not null or host.length() is not equal to zero, the security manager\u0027s checkConnect method is called with the hostname and -1 as its arguments to determine if the operation is allowed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the name of the host, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/UnknownHostException.html\" title\u003d\"class in java.net\"\u003eUnknownHostException\u003c/a\u003e\u003c/code\u003e - if no IP address for the \n\u003ccode\u003ehost\u003c/code\u003e could be found, or if a scope_id was specified for a global IPv6 address.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "return": [
          "an array of all the IP addresses for a given host name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLoopbackAddress",
      "comment": "Returns the loopback address. The InetAddress returned will represent the IPv4 loopback address, 127.0.0.1, or the IPv6 loopback address, ::1. The IPv4 loopback address returned is only one of many in the form 127.*.*.*",
      "annotations": [],
      "tagMap": {
        "return": [
          "the InetAddress loopback instance."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.UnknownHostException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getByAddress",
      "comment": "Returns an InetAddress object given the raw IP address . The argument is in network byte order: the highest order byte of the address is in getAddress()[0]. This method doesn\u0027t block, i.e. no reverse name service lookup is performed. IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the raw IP address in network byte order"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/UnknownHostException.html\" title\u003d\"class in java.net\"\u003eUnknownHostException\u003c/a\u003e\u003c/code\u003e - if IP address is of illegal length"
        ],
        "return": [
          "an InetAddress object created from the raw IP address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.UnknownHostException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLocalHost",
      "comment": "Returns the address of the local host. This is achieved by retrieving the name of the host from the system, then resolving that name into an InetAddress. Note: The resolved address may be cached for a short period of time. If there is a security manager, its checkConnect method is called with the local host name and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, an InetAddress representing the loopback address is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getByName(java.lang.String)\"\u003e\u003ccode\u003egetByName(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/UnknownHostException.html\" title\u003d\"class in java.net\"\u003eUnknownHostException\u003c/a\u003e\u003c/code\u003e - if the local host name could not be resolved into an address."
        ],
        "return": [
          "the address of the local host."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.InetAddress",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getByAddress(byte%5B%5D)\"\u003e\u003ccode\u003egetByAddress(byte[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getByAddress(java.lang.String,byte%5B%5D)\"\u003e\u003ccode\u003egetByAddress(java.lang.String, byte[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getAllByName(java.lang.String)\"\u003e\u003ccode\u003egetAllByName(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getByName(java.lang.String)\"\u003e\u003ccode\u003egetByName(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#getLocalHost()\"\u003e\u003ccode\u003egetLocalHost()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.net.InetAddress\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}