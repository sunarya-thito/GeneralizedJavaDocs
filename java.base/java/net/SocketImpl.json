{
  "packageName": "java.net",
  "simpleName": "SocketImpl",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.io.FileDescriptor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "fd",
      "comment": "The file descriptor object for this socket.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "address",
      "comment": "The IP address of the remote end of this socket.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "port",
      "comment": "The port number on the remote host to which this socket is connected.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "localport",
      "comment": "The local port number to which this socket is connected.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "stream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "create",
      "comment": "Creates either a stream or a datagram socket.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, create a stream socket; otherwise, create a datagram socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs while creating the socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "connect",
      "comment": "Connects this socket to the specified port on the named host.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the name of the remote host.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when connecting to the remote host."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "connect",
      "comment": "Connects this socket to the specified port number on the specified host.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the IP address of the remote host.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when attempting a connection."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "connect",
      "comment": "Connects this socket to the specified port number on the specified host. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the Socket address of the remote host.",
          "\u003ccode\u003etimeout\u003c/code\u003e - the timeout value, in milliseconds, or zero for no timeout."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when attempting a connection."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "bind",
      "comment": "Binds this socket to the specified local IP address and port number.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - an IP address that belongs to a local interface.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when binding this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "backlog"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "listen",
      "comment": "Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument. If a connection indication arrives when the queue is full, the connection is refused.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebacklog\u003c/code\u003e - the maximum length of the queue."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the queue."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketImpl",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "accept",
      "comment": "Accepts a connection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the accepted connection."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when accepting the connection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getInputStream",
      "comment": "Returns an input stream for this socket.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the input stream."
        ],
        "return": [
          "a stream for reading from this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getOutputStream",
      "comment": "Returns an output stream for this socket.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the output stream."
        ],
        "return": [
          "an output stream for writing to this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "available",
      "comment": "Returns the number of bytes that can be read from this socket without blocking.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when determining the number of bytes available."
        ],
        "return": [
          "the number of bytes that can be read from this socket without blocking."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "close",
      "comment": "Closes this socket.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when closing this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shutdownInput",
      "comment": "Places the input stream for this socket at \"end of stream\". Any data sent to this socket is acknowledged and then silently discarded. If you read from a socket input stream after invoking this method on the socket, the stream\u0027s available method will return 0, and its read methods will return -1 (end of stream).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownOutput()\"\u003e\u003ccode\u003eSocket.shutdownOutput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#close()\"\u003e\u003ccode\u003eSocket.close()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSoLinger(boolean,int)\"\u003e\u003ccode\u003eSocket.setSoLinger(boolean, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when shutting down this socket."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shutdownOutput",
      "comment": "Disables the output stream for this socket. For a TCP socket, any previously written data will be sent followed by TCP\u0027s normal connection termination sequence. If you write to a socket output stream after invoking shutdownOutput() on the socket, the stream will throw an IOException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownInput()\"\u003e\u003ccode\u003eSocket.shutdownInput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#close()\"\u003e\u003ccode\u003eSocket.close()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSoLinger(boolean,int)\"\u003e\u003ccode\u003eSocket.setSoLinger(boolean, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when shutting down this socket."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.FileDescriptor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getFileDescriptor",
      "comment": "Returns the value of this socket\u0027s fd field.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html#fd\"\u003e\u003ccode\u003efd\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of this socket\u0027s \n\u003ccode\u003efd\u003c/code\u003e field."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getInetAddress",
      "comment": "Returns the value of this socket\u0027s address field.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html#address\"\u003e\u003ccode\u003eaddress\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of this socket\u0027s \n\u003ccode\u003eaddress\u003c/code\u003e field."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getPort",
      "comment": "Returns the value of this socket\u0027s port field.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html#port\"\u003e\u003ccode\u003eport\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of this socket\u0027s \n\u003ccode\u003eport\u003c/code\u003e field."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "supportsUrgentData",
      "comment": "Returns whether or not this SocketImpl supports sending urgent data. By default, false is returned unless the method is overridden in a sub-class",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html#address\"\u003e\u003ccode\u003eaddress\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if urgent data supported"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "sendUrgentData",
      "comment": "Send one byte of urgent data on the socket. The byte to be sent is the low eight bits of the parameter",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - The byte of data to send"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an error sending the data."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLocalPort",
      "comment": "Returns the value of this socket\u0027s localport field.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html#localport\"\u003e\u003ccode\u003elocalport\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of this socket\u0027s \n\u003ccode\u003elocalport\u003c/code\u003e field."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the address and port of this socket as a String.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "connectionTime"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "latency"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bandwidth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setPerformancePreferences",
      "comment": "Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). By default, this method does nothing, unless it is overridden in a sub-class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econnectionTime\u003c/code\u003e - An \n\u003ccode\u003eint\u003c/code\u003e expressing the relative importance of a short connection time",
          "\u003ccode\u003elatency\u003c/code\u003e - An \n\u003ccode\u003eint\u003c/code\u003e expressing the relative importance of low latency",
          "\u003ccode\u003ebandwidth\u003c/code\u003e - An \n\u003ccode\u003eint\u003c/code\u003e expressing the relative importance of high bandwidth"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setOption",
      "comment": "Called to set a socket option.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "implSpec": [
          "The default implementation of this method first checks that the given socket option \n\u003ccode\u003ename\u003c/code\u003e is not null, then throws \n\u003ccode\u003e UnsupportedOperationException\u003c/code\u003e. Subclasses should override this method with an appropriate implementation."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option",
          "\u003ccode\u003evalue\u003c/code\u003e - The value of the socket option. A value of \n\u003ccode\u003enull\u003c/code\u003e may be valid for some options."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the SocketImpl does not support the option",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is not valid for the option",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getOption",
      "comment": "Called to get a socket option.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "implSpec": [
          "The default implementation of this method first checks that the given socket option \n\u003ccode\u003ename\u003c/code\u003e is not null, then throws \n\u003ccode\u003e UnsupportedOperationException\u003c/code\u003e. Subclasses should override this method with an appropriate implementation."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the SocketImpl does not support the option",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value of the named option"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "supportedOptions",
      "comment": "Returns a set of SocketOptions supported by this impl and by this impl\u0027s socket (Socket or ServerSocket)",
      "tagMap": {
        "implSpec": [
          "The default implementation of this method returns an empty set. Subclasses should override this method with an appropriate implementation."
        ],
        "return": [
          "a Set of SocketOptions"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initialize a new instance of this class",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.net.SocketImpl",
  "comment": "The abstract class \n\u003ccode\u003eSocketImpl\u003c/code\u003e is a common superclass of all classes that actually implement sockets. It is used to create both client and server sockets.",
  "tagMap": {
    "implNote": [
      "Client and server sockets created with the \n\u003ccode\u003eSocket\u003c/code\u003e and \n\u003ccode\u003eSocketServer\u003c/code\u003e public constructors create a system-default \n\u003ccode\u003eSocketImpl\u003c/code\u003e. The JDK historically used a \n\u003ccode\u003eSocketImpl\u003c/code\u003e implementation type named \"PlainSocketImpl\" that has since been replaced by a newer implementation. The JDK continues to ship with the older implementation to allow code to run that depends on unspecified behavior that differs between the old and new implementations. The old implementation will be used if the Java virtual machine is started with the system property \n\u003ccode\u003e\u003cspan id\u003d\"jdk.net.usePlainSocketImpl\" class\u003d\"search-tag-result\"\u003ejdk.net.usePlainSocketImpl\u003c/span\u003e\u003c/code\u003e set to use the old implementation. It may also be set in the JDK\u0027s network configuration file, located in \n\u003ccode\u003e ${java.home}/conf/net.properties\u003c/code\u003e. The value of the property is the string representation of a boolean. If set without a value then it defaults to \n\u003ccode\u003e true\u003c/code\u003e, hence running with \n\u003ccode\u003e-Djdk.net.usePlainSocketImpl\u003c/code\u003e or \n\u003ccode\u003e -Djdk.net.usePlainSocketImpl\u003dtrue\u003c/code\u003e will configure the Java virtual machine to use the old implementation. The property and old implementation will be removed in a future version."
    ],
    "since": [
      "1.0"
    ]
  }
}