{
  "packageName": "java.net",
  "simpleName": "MulticastSocket",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.net.DatagramSocket",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "ttl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTTL",
      "comment": "Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. The ttl is an unsigned 8-bit quantity, and so must be in the range 0 \u003c\u003d ttl \u003c\u003d 0xFF .",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#getTTL()\"\u003e\u003ccode\u003egetTTL()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ettl\u003c/code\u003e - the time-to-live"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while setting the default time-to-live value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ttl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeToLive",
      "comment": "Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. The ttl must be in the range 0 \u003c\u003d ttl \u003c\u003d 255 or an IllegalArgumentException will be thrown. Multicast packets sent with a TTL of 0 are not transmitted on the network but may be delivered locally.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#getTimeToLive()\"\u003e\u003ccode\u003egetTimeToLive()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ettl\u003c/code\u003e - the time-to-live"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while setting the default time-to-live value"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTTL",
      "comment": "Get the default time-to-live for multicast packets sent out on the socket.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setTTL(byte)\"\u003e\u003ccode\u003esetTTL(byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while getting the default time-to-live value"
        ],
        "return": [
          "the default time-to-live value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeToLive",
      "comment": "Get the default time-to-live for multicast packets sent out on the socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setTimeToLive(int)\"\u003e\u003ccode\u003esetTimeToLive(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while getting the default time-to-live value"
        ],
        "return": [
          "the default time-to-live value"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "mcastaddr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "joinGroup",
      "comment": "Joins a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkMulticast(java.net.InetAddress)\"\u003e\u003ccode\u003eSecurityManager.checkMulticast(InetAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emcastaddr\u003c/code\u003e - is the multicast address to join"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an error joining, or when the address is not a multicast address, or the platform does not support multicasting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckMulticast\u003c/code\u003e method doesn\u0027t allow the join."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "mcastaddr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "leaveGroup",
      "comment": "Leave a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkMulticast(java.net.InetAddress)\"\u003e\u003ccode\u003eSecurityManager.checkMulticast(InetAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emcastaddr\u003c/code\u003e - is the multicast address to leave"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an error leaving or when the address is not a multicast address.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckMulticast\u003c/code\u003e method doesn\u0027t allow the operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "mcastaddr"
          }
        },
        {
          "type": {
            "name": "java.net.NetworkInterface",
            "type": "Class"
          },
          "field": {
            "name": "netIf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "joinGroup",
      "comment": "Joins the specified multicast group at the specified interface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkMulticast(java.net.InetAddress)\"\u003e\u003ccode\u003eSecurityManager.checkMulticast(InetAddress)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/MulticastChannel.html#join(java.net.InetAddress,java.net.NetworkInterface)\"\u003e\u003ccode\u003eMulticastChannel.join(InetAddress, NetworkInterface)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emcastaddr\u003c/code\u003e - is the multicast address to join",
          "\u003ccode\u003enetIf\u003c/code\u003e - specifies the local interface to receive multicast datagram packets, or \n\u003ccode\u003enull\u003c/code\u003e to defer to the interface set by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setInterface(java.net.InetAddress)\"\u003e\u003ccode\u003esetInterface(InetAddress)\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setNetworkInterface(java.net.NetworkInterface)\"\u003e\u003ccode\u003esetNetworkInterface(NetworkInterface)\u003c/code\u003e\u003c/a\u003e. If \n\u003ccode\u003enull\u003c/code\u003e, and no interface has been set, the behaviour is unspecified: any interface may be selected or the operation may fail with a \n\u003ccode\u003eSocketException\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an error joining, or when the address is not a multicast address, or the platform does not support multicasting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckMulticast\u003c/code\u003e method doesn\u0027t allow the join.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if mcastaddr is \n\u003ccode\u003enull\u003c/code\u003e or is a SocketAddress subclass not supported by this socket"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "mcastaddr"
          }
        },
        {
          "type": {
            "name": "java.net.NetworkInterface",
            "type": "Class"
          },
          "field": {
            "name": "netIf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "leaveGroup",
      "comment": "Leave a multicast group on a specified local interface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkMulticast(java.net.InetAddress)\"\u003e\u003ccode\u003eSecurityManager.checkMulticast(InetAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emcastaddr\u003c/code\u003e - is the multicast address to leave",
          "\u003ccode\u003enetIf\u003c/code\u003e - specifies the local interface or \n\u003ccode\u003enull\u003c/code\u003e to defer to the interface set by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setInterface(java.net.InetAddress)\"\u003e\u003ccode\u003esetInterface(InetAddress)\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setNetworkInterface(java.net.NetworkInterface)\"\u003e\u003ccode\u003esetNetworkInterface(NetworkInterface)\u003c/code\u003e\u003c/a\u003e. If \n\u003ccode\u003enull\u003c/code\u003e, and no interface has been set, the behaviour is unspecified: any interface may be selected or the operation may fail with a \n\u003ccode\u003eSocketException\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an error leaving or when the address is not a multicast address.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckMulticast\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if mcastaddr is \n\u003ccode\u003enull\u003c/code\u003e or is a SocketAddress subclass not supported by this socket."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "inf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInterface",
      "comment": "Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface. Useful for multihomed hosts.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#getInterface()\"\u003e\u003ccode\u003egetInterface()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einf\u003c/code\u003e - the InetAddress"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInterface",
      "comment": "Retrieve the address of the network interface used for multicast packets.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setInterface(java.net.InetAddress)\"\u003e\u003ccode\u003esetInterface(java.net.InetAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "An \n\u003ccode\u003eInetAddress\u003c/code\u003e representing the address of the network interface used for multicast packets, or if no interface has been set, an \n\u003ccode\u003eInetAddress\u003c/code\u003e representing any local address."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.NetworkInterface",
            "type": "Class"
          },
          "field": {
            "name": "netIf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNetworkInterface",
      "comment": "Specify the network interface for outgoing multicast datagrams sent on this socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#getNetworkInterface()\"\u003e\u003ccode\u003egetNetworkInterface()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enetIf\u003c/code\u003e - the interface"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.NetworkInterface",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNetworkInterface",
      "comment": "Get the multicast network interface set.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setNetworkInterface(java.net.NetworkInterface)\"\u003e\u003ccode\u003esetNetworkInterface(NetworkInterface)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "The multicast \n\u003ccode\u003eNetworkInterface\u003c/code\u003e currently set. A placeholder NetworkInterface is returned when there is no interface set; it has a single InetAddress to represent any local address."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "disable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLoopbackMode",
      "comment": "Disable/Enable local loopback of multicast datagrams. The option is used by the platform\u0027s networking code as a hint for setting whether multicast data will be looped back to the local socket. Because this option is a hint, applications that want to verify what loopback mode is set to should call getLoopbackMode()",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#getLoopbackMode()\"\u003e\u003ccode\u003egetLoopbackMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edisable\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to disable the LoopbackMode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if an error occurs while setting the value"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLoopbackMode",
      "comment": "Get the setting for local loopback of multicast datagrams.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MulticastSocket.html#setLoopbackMode(boolean)\"\u003e\u003ccode\u003esetLoopbackMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if an error occurs while getting the value"
        ],
        "return": [
          "true if the LoopbackMode has been disabled"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.DatagramPacket",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "ttl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "send",
      "comment": "Sends a datagram packet to the destination, with a TTL (time-to-live) other than the default for the socket. This method need only be used in instances where a particular TTL is desired; otherwise it is preferable to set a TTL once on the socket, and use that default TTL for all packets. This method does not alter the default TTL for the socket. Its behavior may be affected by setInterface. If there is a security manager, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager\u0027s checkMulticast method with p.getAddress() and ttl as its arguments. If the evaluation of that expression is false, this method instead calls the security manager\u0027s checkConnect method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#send(java.net.DatagramPacket)\"\u003e\u003ccode\u003eDatagramSocket.send(java.net.DatagramPacket)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#receive(java.net.DatagramPacket)\"\u003e\u003ccode\u003eDatagramSocket.receive(java.net.DatagramPacket)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkMulticast(java.net.InetAddress,byte)\"\u003e\u003ccode\u003eSecurityManager.checkMulticast(java.net.InetAddress, byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - is the packet to be sent. The packet should contain the destination multicast ip address and the data to be sent. One does not need to be the member of the group to send packets to a destination multicast address.",
          "\u003ccode\u003ettl\u003c/code\u003e - optional time to live for multicast packet. default ttl is 1."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - is raised if an error occurs i.e error while setting ttl.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckMulticast\u003c/code\u003e or \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the send.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the socket is connected, and connected address and packet address differ, or if the socket is not connected and the packet address is not set or if its port is out of range."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a multicast socket and binds it to any available port on the local host machine. The socket will be bound to the wildcard address. If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the DatagramSocket.setReuseAddress(boolean) method is called to enable the SO_REUSEADDR socket option.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setReuseAddress(boolean)\"\u003e\u003ccode\u003eDatagramSocket.setReuseAddress(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocketImpl.html#setOption(java.net.SocketOption,T)\"\u003e\u003ccode\u003eDatagramSocketImpl.setOption(SocketOption, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while creating the MulticastSocket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a multicast socket and binds it to the specified port on the local host machine. The socket will be bound to the wildcard address. If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the DatagramSocket.setReuseAddress(boolean) method is called to enable the SO_REUSEADDR socket option.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setReuseAddress(boolean)\"\u003e\u003ccode\u003eDatagramSocket.setReuseAddress(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eport\u003c/code\u003e - port to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while creating the MulticastSocket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if port is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#PortRange\"\u003e out of range.\u003c/a\u003e"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "bindaddr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a multicast socket, bound to the specified local socket address. If the address is null an unbound socket will be created. If there is a security manager, its checkListen method is first called with the SocketAddress port as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the DatagramSocket.setReuseAddress(boolean) method is called to enable the SO_REUSEADDR socket option.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setReuseAddress(boolean)\"\u003e\u003ccode\u003eDatagramSocket.setReuseAddress(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebindaddr\u003c/code\u003e - Socket address to bind to, or \n\u003ccode\u003enull\u003c/code\u003e for an unbound socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while creating the MulticastSocket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.MulticastSocket",
  "comment": "The multicast datagram socket class is useful for sending and receiving IP multicast packets. A MulticastSocket is a (UDP) DatagramSocket, with additional capabilities for joining \"groups\" of other multicast hosts on the internet. \n\u003cp\u003e A multicast group is specified by a class D IP address and by a standard UDP port number. Class D IP addresses are in the range \u003ccode\u003e224.0.0.0\u003c/code\u003e to \u003ccode\u003e239.255.255.255\u003c/code\u003e, inclusive. The address 224.0.0.0 is reserved and should not be used. \u003c/p\u003e\n\u003cp\u003e One would join a multicast group by first creating a MulticastSocket with the desired port, then invoking the \u003ccode\u003ejoinGroup(InetAddress groupAddr)\u003c/code\u003e method: \u003c/p\u003e\n\u003cpre\u003e // join a Multicast group and send the group salutations\n ...\n String msg \u003d \"Hello\";\n InetAddress mcastaddr \u003d InetAddress.getByName(\"228.5.6.7\");\n InetSocketAddress group \u003d new InetSocketAddress(mcastaddr, port);\n NetworkInterface netIf \u003d NetworkInterface.getByName(\"bge0\");\n MulticastSocket s \u003d new MulticastSocket(6789);\n\n s.joinGroup(group, netIf);\n byte[] msgBytes \u003d msg.getBytes(StandardCharsets.UTF_8);\n DatagramPacket hi \u003d new DatagramPacket(msgBytes, msgBytes.length,\n                                        group, 6789);\n s.send(hi);\n // get their responses!\n byte[] buf \u003d new byte[1000];\n DatagramPacket recv \u003d new DatagramPacket(buf, buf.length);\n s.receive(recv);\n ...\n // OK, I\u0027m done talking - leave the group...\n s.leaveGroup(group, netIf);\n \u003c/pre\u003e When one sends a message to a multicast group, \n\u003cb\u003eall\u003c/b\u003e subscribing recipients to that host and port receive the message (within the time-to-live range of the packet, see below). The socket needn\u0027t be a member of the multicast group to send messages to it. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e When a socket subscribes to a multicast group/port, it receives datagrams sent by other hosts to the group/port, as do all other members of the group and port. A socket relinquishes membership in a group by the leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) method. \u003cb\u003eMultiple MulticastSockets\u003c/b\u003e may subscribe to a multicast group and port concurrently, and they will all receive group datagrams. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eDatagramSocket\u003c/code\u003e and \u003ccode\u003eMulticastSocket\u003c/code\u003e classes define convenience methods to set and get several socket options. Like \u003ccode\u003eDatagramSocket\u003c/code\u003e this class also supports the \u003ca href\u003d\"DatagramSocket.html#setOption(java.net.SocketOption,T)\"\u003e\u003ccode\u003esetOption\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"DatagramSocket.html#getOption(java.net.SocketOption)\"\u003e\u003ccode\u003egetOption\u003c/code\u003e\u003c/a\u003e methods to set and query socket options. In addition to the socket options supported by \u003ca href\u003d\"DatagramSocket.html#SocketOptions\"\u003e\u003ccode\u003eDatagramSocket\u003c/code\u003e\u003c/a\u003e, a \u003ccode\u003eMulticastSocket\u003c/code\u003e supports the following socket options: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003ca id\u003d\"MulticastOptions\"\u003e\u003c/a\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption style\u003d\"display:none\"\u003e\n   Socket options\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\"\u003eOption Name\u003c/th\u003e \n    \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e \n   \u003c/tr\u003e \n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#IP_MULTICAST_IF\"\u003e\u003ccode\u003eIP_MULTICAST_IF\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The network interface for Internet Protocol (IP) multicast datagrams \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#IP_MULTICAST_TTL\"\u003e\u003ccode\u003eIP_MULTICAST_TTL\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The \u003cem\u003etime-to-live\u003c/em\u003e for Internet Protocol (IP) multicast datagrams \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#IP_MULTICAST_LOOP\"\u003e\u003ccode\u003eIP_MULTICAST_LOOP\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Loopback for Internet Protocol (IP) multicast datagrams \u003c/td\u003e \n   \u003c/tr\u003e \n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e Additional (implementation specific) options may also be supported.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "apiNote": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/DatagramChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eDatagramChannel\u003c/code\u003e\u003c/a\u003e implements the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/MulticastChannel.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eMulticastChannel\u003c/code\u003e\u003c/a\u003e interface and provides an alternative API for sending and receiving multicast datagrams. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/MulticastChannel.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eMulticastChannel\u003c/code\u003e\u003c/a\u003e API supports both \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/MulticastChannel.html#join(java.net.InetAddress,java.net.NetworkInterface)\"\u003eany-source\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/MulticastChannel.html#join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)\"\u003esource-specific\u003c/a\u003e multicast."
    ],
    "since": [
      "1.1"
    ]
  }
}