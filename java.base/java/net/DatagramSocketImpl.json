{
  "packageName": "java.net",
  "simpleName": "DatagramSocketImpl",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "localPort",
      "comment": "The local port number.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.io.FileDescriptor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "fd",
      "comment": "The file descriptor object.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "create",
      "comment": "Creates a datagram socket.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "lport",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "laddr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "bind",
      "comment": "Binds a datagram socket to a local port and address.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elport\u003c/code\u003e - the local port",
          "\u003ccode\u003eladdr\u003c/code\u003e - the local address"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramPacket",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "send",
      "comment": "Sends a datagram packet. The packet contains the data and the destination address to send the packet to.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the packet to be sent."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while sending the datagram packet.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "connect",
      "comment": "Connects a datagram socket to a remote destination. This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination. This may be overridden to call a native system connect. If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the remote InetAddress to connect to",
          "\u003ccode\u003eport\u003c/code\u003e - the remote port number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket cannot be connected to the remote destination"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "disconnect",
      "comment": "Disconnects a datagram socket from its remote destination.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "peek",
      "comment": "Peek at the packet to see who it is from. Updates the specified InetAddress to the address which the packet came from.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - an InetAddress object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."
        ],
        "return": [
          "the port number which the packet came from."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramPacket",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "peekData",
      "comment": "Peek at the packet to see who it is from. The data is copied into the specified DatagramPacket. The data is returned, but not consumed, so that a subsequent peekData/receive operation will see the same data.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the Packet Received."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."
        ],
        "return": [
          "the port number which the packet came from."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramPacket",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "receive",
      "comment": "Receive the datagram packet.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the Packet Received."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while receiving the datagram packet.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "name": "ttl",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "setTTL",
      "comment": "Set the TTL (time-to-live) option.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocketImpl.html#getTTL()\"\u003e\u003ccode\u003egetTTL()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ettl\u003c/code\u003e - a byte specifying the TTL value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while setting the time-to-live option."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getTTL",
      "comment": "Retrieve the TTL (time-to-live) option.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocketImpl.html#setTTL(byte)\"\u003e\u003ccode\u003esetTTL(byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while retrieving the time-to-live option"
        ],
        "return": [
          "a byte representing the TTL value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ttl",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "setTimeToLive",
      "comment": "Set the TTL (time-to-live) option.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocketImpl.html#getTimeToLive()\"\u003e\u003ccode\u003egetTimeToLive()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ettl\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e specifying the time-to-live value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while setting the time-to-live option."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getTimeToLive",
      "comment": "Retrieve the TTL (time-to-live) option.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocketImpl.html#setTimeToLive(int)\"\u003e\u003ccode\u003esetTimeToLive(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while retrieving the time-to-live option"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e representing the time-to-live value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "inetaddr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "join",
      "comment": "Join the multicast group.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einetaddr\u003c/code\u003e - multicast address to join."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while joining the multicast group."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "inetaddr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "leave",
      "comment": "Leave the multicast group.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einetaddr\u003c/code\u003e - multicast address to leave."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while leaving the multicast group."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "mcastaddr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.NetworkInterface",
            "type": "Class"
          },
          "name": "netIf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "joinGroup",
      "comment": "Join the multicast group.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emcastaddr\u003c/code\u003e - address to join.",
          "\u003ccode\u003enetIf\u003c/code\u003e - specifies the local interface to receive multicast datagram packets"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while joining the multicast group"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "mcastaddr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.NetworkInterface",
            "type": "Class"
          },
          "name": "netIf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "leaveGroup",
      "comment": "Leave the multicast group.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emcastaddr\u003c/code\u003e - address to leave.",
          "\u003ccode\u003enetIf\u003c/code\u003e - specified the local interface to leave the group at"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs while leaving the multicast group"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "close",
      "comment": "Close the socket.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLocalPort",
      "comment": "Gets the local port.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e representing the local port value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.FileDescriptor",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getFileDescriptor",
      "comment": "Gets the datagram socket file descriptor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eFileDescriptor\u003c/code\u003e object representing the datagram socket file descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setOption",
      "comment": "Called to set a socket option.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "implSpec": [
          "The default implementation of this method first checks that the given socket option \n\u003ccode\u003ename\u003c/code\u003e is not null, then throws \n\u003ccode\u003e UnsupportedOperationException\u003c/code\u003e. Subclasses should override this method with an appropriate implementation."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option",
          "\u003ccode\u003evalue\u003c/code\u003e - The value of the socket option. A value of \n\u003ccode\u003enull\u003c/code\u003e may be valid for some options."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the DatagramSocketImpl does not support the option",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is not valid for the option",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getOption",
      "comment": "Called to get a socket option.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "implSpec": [
          "The default implementation of this method first checks that the given socket option \n\u003ccode\u003ename\u003c/code\u003e is not null, then throws \n\u003ccode\u003e UnsupportedOperationException\u003c/code\u003e. Subclasses should override this method with an appropriate implementation."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the DatagramSocketImpl does not support the option",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the socket option"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "supportedOptions",
      "comment": "Returns a set of SocketOptions supported by this impl and by this impl\u0027s socket (DatagramSocket or MulticastSocket)",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation of this method returns an empty set. Subclasses should override this method with an appropriate implementation."
        ],
        "return": [
          "a Set of SocketOptions"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.net.DatagramSocketImpl",
  "annotations": [],
  "tagMap": {
    "implNote": [
      "Sockets created with the \n\u003ccode\u003eDatagramSocket\u003c/code\u003e and \n\u003ccode\u003e MulticastSocket\u003c/code\u003e public constructors historically delegated all socket operations to a \n\u003ccode\u003eDatagramSocketImpl\u003c/code\u003e implementation named \"PlainDatagramSocketImpl\". \n\u003ccode\u003eDatagramSocket\u003c/code\u003e and \n\u003ccode\u003eMulticastSocket\u003c/code\u003e have since been changed to a new implementation based on \n\u003ccode\u003eDatagramChannel\u003c/code\u003e. The JDK continues to ship with the older implementation to allow code to run that depends on unspecified behavior that differs between the old and new implementations. The old implementation will be used if the Java virtual machine is started with the system property \n\u003ccode\u003e\u003cspan id\u003d\"jdk.net.usePlainDatagramSocketImpl\" class\u003d\"search-tag-result\"\u003ejdk.net.usePlainDatagramSocketImpl\u003c/span\u003e\u003c/code\u003e set to use the old implementation. It may also be set in the JDK\u0027s network configuration file, located in \n\u003ccode\u003e ${java.home}/conf/net.properties\u003c/code\u003e. The value of the property is the string representation of a boolean. If set without a value then it defaults to \n\u003ccode\u003e true\u003c/code\u003e, hence running with \n\u003ccode\u003e-Djdk.net.usePlainDatagramSocketImpl\u003c/code\u003e or \n\u003ccode\u003e-Djdk.net.usePlainDatagramSocketImpl\u003dtrue\u003c/code\u003e will configure the Java virtual machine to use the old implementation. The property and old implementation will be removed in a future version."
    ],
    "since": [
      "1.1"
    ]
  }
}