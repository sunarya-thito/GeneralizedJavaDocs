{
  "packageName": "java.net",
  "simpleName": "NetPermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.BasicPermission",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new NetPermission with the specified name. The name is the symbolic name of the NetPermission, such as \"setDefaultAuthenticator\", etc. An asterisk may appear at the end of the name, following a \".\", or by itself, to signify a wildcard match.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the NetPermission."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new NetPermission object with the specified name. The name is the symbolic name of the NetPermission, and the actions String is currently unused and should be null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the NetPermission.",
          "\u003ccode\u003eactions\u003c/code\u003e - should be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.net.NetPermission",
  "comment": "This class is for various network permissions. A NetPermission contains a name (also referred to as a \"target name\") but no actions list; you either have the named permission or you don\u0027t. \n\u003cp\u003e The target name is the name of the network permission (see below). The naming convention follows the hierarchical property naming convention. Also, an asterisk may appear at the end of the name, following a \".\", or by itself, to signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard match, while \"*foo\" and \"a*b\" do not. \u003c/p\u003e\n\u003cp\u003e The following table lists the standard NetPermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Permission target name, what the permission allows, and associated risks\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003ePermission Target Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eWhat the Permission Allows\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eRisks of Allowing this Permission\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eallowHttpTrace\u003c/th\u003e \n   \u003ctd\u003eThe ability to use the HTTP TRACE method in HttpURLConnection.\u003c/td\u003e \n   \u003ctd\u003eMalicious code using HTTP TRACE could get access to security sensitive information in the HTTP headers (such as cookies) that it might not otherwise have access to.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessUnixDomainSocket\u003c/th\u003e \n   \u003ctd\u003eThe ability to accept, bind, connect or get the local address of a \u003ci\u003eUnix Domain\u003c/i\u003e socket. \u003c/td\u003e \n   \u003ctd\u003eMalicious code could connect to local processes using Unix domain sockets or impersonate local processes, by binding to the same pathnames (assuming they have the required Operating System permissions.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetCookieHandler\u003c/th\u003e \n   \u003ctd\u003eThe ability to get the cookie handler that processes highly security sensitive cookie information for an Http session.\u003c/td\u003e \n   \u003ctd\u003eMalicious code can get a cookie handler to obtain access to highly security sensitive cookie information. Some web servers use cookies to save user private information such as access control information, or to track user browsing habit.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetNetworkInformation\u003c/th\u003e \n   \u003ctd\u003eThe ability to retrieve all information about local network interfaces.\u003c/td\u003e \n   \u003ctd\u003eMalicious code can read information about network hardware such as MAC addresses, which could be used to construct local IPv6 addresses.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetProxySelector\u003c/th\u003e \n   \u003ctd\u003eThe ability to get the proxy selector used to make decisions on which proxies to use when making network connections.\u003c/td\u003e \n   \u003ctd\u003eMalicious code can get a ProxySelector to discover proxy hosts and ports on internal networks, which could then become targets for attack.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetResponseCache\u003c/th\u003e \n   \u003ctd\u003eThe ability to get the response cache that provides access to a local response cache.\u003c/td\u003e \n   \u003ctd\u003eMalicious code getting access to the local response cache could access security sensitive information.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003erequestPasswordAuthentication\u003c/th\u003e \n   \u003ctd\u003eThe ability to ask the authenticator registered with the system for a password\u003c/td\u003e \n   \u003ctd\u003eMalicious code may steal this password.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetCookieHandler\u003c/th\u003e \n   \u003ctd\u003eThe ability to set the cookie handler that processes highly security sensitive cookie information for an Http session.\u003c/td\u003e \n   \u003ctd\u003eMalicious code can set a cookie handler to obtain access to highly security sensitive cookie information. Some web servers use cookies to save user private information such as access control information, or to track user browsing habit.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetDefaultAuthenticator\u003c/th\u003e \n   \u003ctd\u003eThe ability to set the way authentication information is retrieved when a proxy or HTTP server asks for authentication\u003c/td\u003e \n   \u003ctd\u003eMalicious code can set an authenticator that monitors and steals user authentication input as it retrieves the input from the user.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetProxySelector\u003c/th\u003e \n   \u003ctd\u003eThe ability to set the proxy selector used to make decisions on which proxies to use when making network connections.\u003c/td\u003e \n   \u003ctd\u003eMalicious code can set a ProxySelector that directs network traffic to an arbitrary network host.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetResponseCache\u003c/th\u003e \n   \u003ctd\u003eThe ability to set the response cache that provides access to a local response cache.\u003c/td\u003e \n   \u003ctd\u003eMalicious code getting access to the local response cache could access security sensitive information, or create false entries in the response cache.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetSocketImpl\u003c/th\u003e \n   \u003ctd\u003eThe ability to create a sub-class of Socket or ServerSocket with a user specified SocketImpl.\u003c/td\u003e \n   \u003ctd\u003eMalicious user-defined SocketImpls can change the behavior of Socket and ServerSocket in surprising ways, by virtue of their ability to access the protected fields of SocketImpl.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003especifyStreamHandler\u003c/th\u003e \n   \u003ctd\u003eThe ability to specify a stream handler when constructing a URL\u003c/td\u003e \n   \u003ctd\u003eMalicious code may create a URL with resources that it would normally not have access to (like file:/foo/fum/), specifying a stream handler that gets the actual bytes from someplace it does have access to. Thus it might be able to trick the system into creating a ProtectionDomain/CodeSource for a class even though that class really didn\u0027t come from that location.\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/BasicPermission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eBasicPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissionCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.net.NetPermission\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "implNote": [
      "Implementations may define additional target names, but should use naming conventions such as reverse domain name notation to avoid name clashes."
    ],
    "since": [
      "1.2"
    ]
  }
}