{
  "packageName": "java.net",
  "simpleName": "URLDecoder",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decode",
      "comment": "Decodes a x-www-form-urlencoded string. The platform\u0027s default encoding is used to determine what characters are represented by any consecutive sequences of the form \"%xy\".",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode"
        ],
        "return": [
          "the newly decoded \n\u003ccode\u003eString\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "enc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decode",
      "comment": "Decodes an application/x-www-form-urlencoded string using a specific encoding scheme. This method behaves the same as decode(java.lang.String,java.nio.charset.Charset) except that it will look up the charset using the given encoding name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLEncoder.html#encode(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eURLEncoder.encode(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode",
          "\u003ccode\u003eenc\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/package-summary.html#charenc\"\u003echaracter encoding\u003c/a\u003e."
        ],
        "implNote": [
          "This implementation will throw an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e when illegal strings are encountered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If character encoding needs to be consulted, but named character encoding is not supported"
        ],
        "return": [
          "the newly decoded \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decode",
      "comment": "Decodes an application/x-www-form-urlencoded string using a specific Charset. The supplied charset is used to determine what characters are represented by any consecutive sequences of the form \"%xy\". Note: The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilities.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLEncoder.html#encode(java.lang.String,java.nio.charset.Charset)\"\u003e\u003ccode\u003eURLEncoder.encode(java.lang.String, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode",
          "\u003ccode\u003echarset\u003c/code\u003e - the given charset"
        ],
        "implNote": [
          "This implementation will throw an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e when illegal strings are encountered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e or \n\u003ccode\u003echarset\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the implementation encounters illegal characters"
        ],
        "return": [
          "the newly decoded \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Do not call.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.URLDecoder",
  "comment": "Utility class for HTML form decoding. This class contains static methods for decoding a String from the \n\u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e MIME format. \n\u003cp\u003e The conversion process is the reverse of that used by the URLEncoder class. It is assumed that all characters in the encoded string are one of the following: \"\u003ccode\u003ea\u003c/code\u003e\" through \"\u003ccode\u003ez\u003c/code\u003e\", \"\u003ccode\u003eA\u003c/code\u003e\" through \"\u003ccode\u003eZ\u003c/code\u003e\", \"\u003ccode\u003e0\u003c/code\u003e\" through \"\u003ccode\u003e9\u003c/code\u003e\", and \"\u003ccode\u003e-\u003c/code\u003e\", \"\u003ccode\u003e_\u003c/code\u003e\", \"\u003ccode\u003e.\u003c/code\u003e\", and \"\u003ccode\u003e*\u003c/code\u003e\". The character \"\u003ccode\u003e%\u003c/code\u003e\" is allowed but is interpreted as the start of a special escaped sequence. \u003c/p\u003e\n\u003cp\u003e The following rules are applied in the conversion: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe alphanumeric characters \"\u003ccode\u003ea\u003c/code\u003e\" through \"\u003ccode\u003ez\u003c/code\u003e\", \"\u003ccode\u003eA\u003c/code\u003e\" through \"\u003ccode\u003eZ\u003c/code\u003e\" and \"\u003ccode\u003e0\u003c/code\u003e\" through \"\u003ccode\u003e9\u003c/code\u003e\" remain the same. \u003c/li\u003e\n \u003cli\u003eThe special characters \"\u003ccode\u003e.\u003c/code\u003e\", \"\u003ccode\u003e-\u003c/code\u003e\", \"\u003ccode\u003e*\u003c/code\u003e\", and \"\u003ccode\u003e_\u003c/code\u003e\" remain the same. \u003c/li\u003e\n \u003cli\u003eThe plus sign \"\u003ccode\u003e+\u003c/code\u003e\" is converted into a space character \" \u0026nbsp; \" . \u003c/li\u003e\n \u003cli\u003eA sequence of the form \"\u003ci\u003e\u003ccode\u003e%xy\u003c/code\u003e\u003c/i\u003e\" will be treated as representing a byte where \u003ci\u003exy\u003c/i\u003e is the two-digit hexadecimal representation of the 8 bits. Then, all substrings that contain one or more of these byte sequences consecutively will be replaced by the character(s) whose encoding would result in those consecutive bytes. The encoding scheme used to decode these characters may be specified, or if unspecified, the default encoding of the platform will be used. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e There are two possible ways in which this decoder could deal with illegal strings. It could either leave illegal characters alone or it could throw an \u003ca href\u003d\"../lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e. Which approach the decoder takes is left to the implementation.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}