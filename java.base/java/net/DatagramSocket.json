{
  "packageName": "java.net",
  "simpleName": "DatagramSocket",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bind",
      "comment": "Binds this DatagramSocket to a specific address and port. If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - The address and port to bind to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if any error happens during the bind, or if the socket is already bound.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if addr is a SocketAddress subclass not supported by this socket."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "connect",
      "comment": "Connects the socket to a remote address for this socket. When a socket is connected to a remote address, packets may only be sent to or received from that address. By default a datagram socket is not connected. If the socket is already closed, then this method has no effect. If this socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if invoking the bind method with a parameter of null. If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown. If a security manager has been installed then it is invoked to check access to the remote address. Specifically, if the given address is a multicast address, the security manager\u0027s checkMulticast method is invoked with the given address. Otherwise, the security manager\u0027s checkConnect and checkAccept methods are invoked, with the given address and port, to verify that datagrams are permitted to be sent and received respectively. Care should be taken to ensure that a connected datagram socket is not shared with untrusted code. When a socket is connected, receive and send will not perform any security checks on incoming and outgoing packets, other than matching the packet\u0027s and the socket\u0027s address and port. On a send operation, if the packet\u0027s address is set and the packet\u0027s address and the socket\u0027s address do not match, an IllegalArgumentException will be thrown. A socket connected to a multicast address may only be used to send packets. Datagrams in the socket\u0027s socket receive buffer, which have not been received before invoking this method, may be discarded.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#disconnect()\"\u003e\u003ccode\u003edisconnect()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the remote address for the socket",
          "\u003ccode\u003eport\u003c/code\u003e - the remote port for the socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the address is null, or the port is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#PortRange\"\u003e out of range.\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager has been installed and it does not permit access to the given remote address",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UncheckedIOException.html\" title\u003d\"class in java.io\"\u003eUncheckedIOException\u003c/a\u003e\u003c/code\u003e - may be thrown if connect fails, for example, if the destination address is non-routable"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "connect",
      "comment": "Connects this socket to a remote socket address (IP address + port number). If given an InetSocketAddress, this method behaves as if invoking connect(InetAddress,int) with the given socket addresses IP address and port number, except that the SocketException that may be raised is not wrapped in an UncheckedIOException. Datagrams in the socket\u0027s socket receive buffer, which have not been received before invoking this method, may be discarded.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - The remote address."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the connect fails",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaddr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or \n\u003ccode\u003eaddr\u003c/code\u003e is a SocketAddress subclass not supported by this socket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager has been installed and it does not permit access to the given remote address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "disconnect",
      "comment": "Disconnects the socket. If the socket is closed or not connected, then this method has no effect.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#connect(java.net.InetAddress,int)\"\u003e\u003ccode\u003econnect(java.net.InetAddress, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "If this method throws an UncheckedIOException, the socket may be left in an unspecified state. It is strongly recommended that the socket be closed when disconnect fails."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UncheckedIOException.html\" title\u003d\"class in java.io\"\u003eUncheckedIOException\u003c/a\u003e\u003c/code\u003e - may be thrown if disconnect fails to dissolve the association and restore the socket to a consistent state."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBound",
      "comment": "Returns the binding state of the socket. If the socket was bound prior to being closed, then this method will continue to return true after the socket is closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the socket successfully bound to an address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isConnected",
      "comment": "Returns the connection state of the socket. If the socket was connected prior to being closed, then this method will continue to return true after the socket is closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the socket successfully connected to a server"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInetAddress",
      "comment": "Returns the address to which this socket is connected. Returns null if the socket is not connected. If the socket was connected prior to being closed, then this method will continue to return the connected address after the socket is closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the address to which this socket is connected."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPort",
      "comment": "Returns the port number to which this socket is connected. Returns -1 if the socket is not connected. If the socket was connected prior to being closed, then this method will continue to return the connected port number after the socket is closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the port number to which this socket is connected."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.SocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRemoteSocketAddress",
      "comment": "Returns the address of the endpoint this socket is connected to, or null if it is unconnected. If the socket was connected prior to being closed, then this method will continue to return the connected address after the socket is closed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getInetAddress()\"\u003e\u003ccode\u003egetInetAddress()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getPort()\"\u003e\u003ccode\u003egetPort()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#connect(java.net.SocketAddress)\"\u003e\u003ccode\u003econnect(SocketAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSocketAddress\u003c/code\u003e representing the remote endpoint of this socket, or \n\u003ccode\u003enull\u003c/code\u003e if it is not connected yet."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.SocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalSocketAddress",
      "comment": "Returns the address of the endpoint this socket is bound to.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getLocalAddress()\"\u003e\u003ccode\u003egetLocalAddress()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getLocalPort()\"\u003e\u003ccode\u003egetLocalPort()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#bind(java.net.SocketAddress)\"\u003e\u003ccode\u003ebind(SocketAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSocketAddress\u003c/code\u003e representing the local endpoint of this socket, or \n\u003ccode\u003enull\u003c/code\u003e if it is closed or not bound yet."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramPacket",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "send",
      "comment": "Sends a datagram packet from this socket. The DatagramPacket includes information indicating the data to be sent, its length, the IP address of the remote host, and the port number on the remote host. If there is a security manager, and the socket is not currently connected to a remote address, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager\u0027s checkMulticast method with p.getAddress() as its argument. If the evaluation of that expression is false, this method instead calls the security manager\u0027s checkConnect method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eDatagramPacket\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkMulticast(java.net.InetAddress)\"\u003e\u003ccode\u003eSecurityManager.checkMulticast(InetAddress)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the \n\u003ccode\u003eDatagramPacket\u003c/code\u003e to be sent."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckMulticast\u003c/code\u003e or \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the send.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/IllegalBlockingModeException.html\" title\u003d\"class in java.nio.channels\"\u003eIllegalBlockingModeException\u003c/a\u003e\u003c/code\u003e - if this socket has an associated channel, and the channel is in non-blocking mode.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the socket is connected, and connected address and packet address differ, or if the socket is not connected and the packet address is not set or if its port is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#PortRange\"\u003eout of range.\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramPacket",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "receive",
      "comment": "Receives a datagram packet from this socket. When this method returns, the DatagramPacket\u0027s buffer is filled with the data received. The datagram packet also contains the sender\u0027s IP address, and the port number on the sender\u0027s machine. This method blocks until a datagram is received. The length field of the datagram packet object contains the length of the received message. If the message is longer than the packet\u0027s length, the message is truncated. If there is a security manager, and the socket is not currently connected to a remote address, a packet cannot be received if the security manager\u0027s checkAccept method does not allow it. Datagrams that are not permitted by the security manager are silently discarded.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eDatagramPacket\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eDatagramSocket\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the \n\u003ccode\u003eDatagramPacket\u003c/code\u003e into which to place the incoming data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketTimeoutException.html\" title\u003d\"class in java.net\"\u003eSocketTimeoutException\u003c/a\u003e\u003c/code\u003e - if setSoTimeout was previously called and the timeout has expired.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/PortUnreachableException.html\" title\u003d\"class in java.net\"\u003ePortUnreachableException\u003c/a\u003e\u003c/code\u003e - may be thrown if the socket is connected to a currently unreachable destination. Note, there is no guarantee that the exception will be thrown.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/IllegalBlockingModeException.html\" title\u003d\"class in java.nio.channels\"\u003eIllegalBlockingModeException\u003c/a\u003e\u003c/code\u003e - if this socket has an associated channel, and the channel is in non-blocking mode."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalAddress",
      "comment": "Gets the local address to which the socket is bound. If there is a security manager, its checkConnect method is first called with the host address and -1 as its arguments to see if the operation is allowed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the local address to which the socket is bound, \n\u003ccode\u003enull\u003c/code\u003e if the socket is closed, or an \n\u003ccode\u003eInetAddress\u003c/code\u003e representing \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html#isAnyLocalAddress()\"\u003e\u003ccode\u003ewildcard\u003c/code\u003e\u003c/a\u003e address if either the socket is not bound, or the security manager \n\u003ccode\u003echeckConnect\u003c/code\u003e method does not allow the operation"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalPort",
      "comment": "Returns the port number on the local host to which this socket is bound.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the port number on the local host to which this socket is bound, \n\u003ccode\u003e-1\u003c/code\u003e if the socket is closed, or \n\u003ccode\u003e0\u003c/code\u003e if it is not bound yet."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSoTimeout",
      "comment": "Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds. With this option set to a positive timeout value, a call to receive() for this DatagramSocket will block for only this amount of time. If the timeout expires, a java.net.SocketTimeoutException is raised, though the DatagramSocket is still valid. A timeout of zero is interpreted as an infinite timeout. The option must be enabled prior to entering the blocking operation to have effect.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getSoTimeout()\"\u003e\u003ccode\u003egetSoTimeout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the specified timeout in milliseconds."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etimeout\u003c/code\u003e is negative"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSoTimeout",
      "comment": "Retrieve setting for SO_TIMEOUT. 0 returns implies that the option is disabled (i.e., timeout of infinity).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setSoTimeout(int)\"\u003e\u003ccode\u003esetSoTimeout(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error."
        ],
        "return": [
          "the setting for SO_TIMEOUT"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSendBufferSize",
      "comment": "Sets the SO_SNDBUF option to the specified value for this DatagramSocket. The SO_SNDBUF option is used by the network implementation as a hint to size the underlying network I/O buffers. The SO_SNDBUF setting may also be used by the network implementation to determine the maximum size of the packet that can be sent on this socket. As SO_SNDBUF is a hint, applications that want to verify what size the buffer is should call getSendBufferSize(). Increasing the buffer size may allow multiple outgoing packets to be queued by the network implementation when the send rate is high. Note: If send(DatagramPacket) is used to send a DatagramPacket that is larger than the setting of SO_SNDBUF then it is implementation specific if the packet is sent or discarded.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getSendBufferSize()\"\u003e\u003ccode\u003egetSendBufferSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - the size to which to set the send buffer size. This value must be greater than 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is 0 or is negative."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSendBufferSize",
      "comment": "Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setSendBufferSize(int)\"\u003e\u003ccode\u003esetSendBufferSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error."
        ],
        "return": [
          "the value of the SO_SNDBUF option for this \n\u003ccode\u003eDatagramSocket\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReceiveBufferSize",
      "comment": "Sets the SO_RCVBUF option to the specified value for this DatagramSocket. The SO_RCVBUF option is used by the network implementation as a hint to size the underlying network I/O buffers. The SO_RCVBUF setting may also be used by the network implementation to determine the maximum size of the packet that can be received on this socket. Because SO_RCVBUF is a hint, applications that want to verify what size the buffers were set to should call getReceiveBufferSize(). Increasing SO_RCVBUF may allow the network implementation to buffer multiple packets when packets arrive faster than are being received using receive(DatagramPacket). Note: It is implementation specific if a packet larger than SO_RCVBUF can be received.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getReceiveBufferSize()\"\u003e\u003ccode\u003egetReceiveBufferSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - the size to which to set the receive buffer size. This value must be greater than 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is 0 or is negative."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReceiveBufferSize",
      "comment": "Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setReceiveBufferSize(int)\"\u003e\u003ccode\u003esetReceiveBufferSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error."
        ],
        "return": [
          "the value of the SO_RCVBUF option for this \n\u003ccode\u003eDatagramSocket\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "on",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReuseAddress",
      "comment": "Enable/disable the SO_REUSEADDR socket option. For UDP sockets it may be necessary to bind more than one socket to the same socket address. This is typically for the purpose of receiving multicast packets (See MulticastSocket). The SO_REUSEADDR socket option allows multiple sockets to be bound to the same socket address if the SO_REUSEADDR socket option is enabled prior to binding the socket using bind(SocketAddress). Note: This functionality is not supported by all existing platforms, so it is implementation specific whether this option will be ignored or not. However, if it is not supported then getReuseAddress() will always return false. When a DatagramSocket is created the initial setting of SO_REUSEADDR is disabled. The behaviour when SO_REUSEADDR is enabled or disabled after a socket is bound (See isBound()) is not defined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getReuseAddress()\"\u003e\u003ccode\u003egetReuseAddress()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#bind(java.net.SocketAddress)\"\u003e\u003ccode\u003ebind(SocketAddress)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#isBound()\"\u003e\u003ccode\u003eisBound()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#isClosed()\"\u003e\u003ccode\u003eisClosed()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - whether to enable or disable the"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if an error occurs enabling or disabling the \n\u003ccode\u003eSO_REUSEADDR\u003c/code\u003e socket option, or the socket is closed."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReuseAddress",
      "comment": "Tests if SO_REUSEADDR is enabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setReuseAddress(boolean)\"\u003e\u003ccode\u003esetReuseAddress(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether or not SO_REUSEADDR is enabled."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "on",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBroadcast",
      "comment": "Enable/disable SO_BROADCAST. Some operating systems may require that the Java virtual machine be started with implementation specific privileges to enable this option or send broadcast datagrams.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getBroadcast()\"\u003e\u003ccode\u003egetBroadcast()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - whether or not to have broadcast turned on."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBroadcast",
      "comment": "Tests if SO_BROADCAST is enabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setBroadcast(boolean)\"\u003e\u003ccode\u003esetBroadcast(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as an UDP error."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether or not SO_BROADCAST is enabled."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTrafficClass",
      "comment": "Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket. As the underlying network implementation may ignore this value applications should consider it a hint. The tc must be in the range 0 \u003c\u003d tc \u003c\u003d 255 or an IllegalArgumentException will be thrown. Notes: For Internet Protocol v4 the value consists of an integer, the least significant 8 bits of which represent the value of the TOS octet in IP packets sent by the socket. RFC 1349 defines the TOS values as follows: IPTOS_LOWCOST (0x02) IPTOS_RELIABILITY (0x04) IPTOS_THROUGHPUT (0x08) IPTOS_LOWDELAY (0x10) The last low order bit is always ignored as this corresponds to the MBZ (must be zero) bit. Setting bits in the precedence field may result in a SocketException indicating that the operation is not permitted. for Internet Protocol v6 tc is the value that would be placed into the sin6_flowinfo field of the IP header.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#getTrafficClass()\"\u003e\u003ccode\u003egetTrafficClass()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e value for the bitset."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error setting the traffic class or type-of-service"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTrafficClass",
      "comment": "Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket. As the underlying network implementation may ignore the traffic class or type-of-service set using setTrafficClass(int) this method may return a different value than was previously set using the setTrafficClass(int) method on this DatagramSocket.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#setTrafficClass(int)\"\u003e\u003ccode\u003esetTrafficClass(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error obtaining the traffic class or type-of-service value."
        ],
        "return": [
          "the traffic class or type-of-service already set"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Closes this datagram socket. Any thread currently blocked in receive(java.net.DatagramPacket) upon this socket will throw a SocketException. If this socket has an associated channel then the channel is closed as well.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isClosed",
      "comment": "Returns whether the socket is closed or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the socket has been closed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.DatagramChannel",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChannel",
      "comment": "Returns the unique DatagramChannel object associated with this datagram socket, if any. A datagram socket will have a channel if, and only if, the channel itself was created via the DatagramChannel.open method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the datagram channel associated with this datagram socket, or \n\u003ccode\u003enull\u003c/code\u003e if this socket was not created for a channel"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramSocketImplFactory",
            "type": "Class"
          },
          "name": "fac",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDatagramSocketImplFactory",
      "comment": "Sets the datagram socket implementation factory for the application. The factory can be specified only once. When an application creates a new datagram socket, the socket implementation factory\u0027s createDatagramSocketImpl method is called to create the actual datagram socket implementation. Passing null to the method is a no-op unless the factory was already set. If there is a security manager, this method first calls the security manager\u0027s checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocketImplFactory.html#createDatagramSocketImpl()\"\u003e\u003ccode\u003eDatagramSocketImplFactory.createDatagramSocketImpl()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkSetFactory()\"\u003e\u003ccode\u003eSecurityManager.checkSetFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efac\u003c/code\u003e - the desired factory."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when setting the datagram socket factory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the factory is already defined.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckSetFactory\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.DatagramSocket",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOption",
      "comment": "Sets the value of a socket option.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option",
          "\u003ccode\u003evalue\u003c/code\u003e - The value of the socket option. A value of \n\u003ccode\u003enull\u003c/code\u003e may be valid for some options."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the datagram socket does not support the option.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is not valid for the option.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is set and if the socket option requires a security permission and if the caller does not have the required permission. \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/StandardSocketOptions.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eStandardSocketOptions\u003c/code\u003e\u003c/a\u003e do not require any security permission.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this DatagramSocket"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOption",
      "comment": "Returns the value of a socket option.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the datagram socket does not support the option.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is set and if the socket option requires a security permission and if the caller does not have the required permission. \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/StandardSocketOptions.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eStandardSocketOptions\u003c/code\u003e\u003c/a\u003e do not require any security permission."
        ],
        "return": [
          "The value of the socket option."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "supportedOptions",
      "comment": "Returns a set of the socket options supported by this socket. This method will continue to return the set of options even after the socket has been closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A set of the socket options supported by this socket. This set may be empty if the socket\u0027s DatagramSocketImpl cannot be created."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a datagram socket and binds it to any available port on the local host machine. The socket will be bound to the wildcard address. If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the socket could not be opened, or the socket could not be bound.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.DatagramSocketImpl",
            "type": "Class"
          },
          "name": "impl",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates an unbound datagram socket with the specified DatagramSocketImpl.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimpl\u003c/code\u003e - an instance of a \n\u003cb\u003eDatagramSocketImpl\u003c/b\u003e the subclass wishes to use on the DatagramSocket."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "bindaddr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a datagram socket, bound to the specified local socket address. If the address is null an unbound socket will be created. If there is a security manager, its checkListen method is first called with the port from the socket address as its argument to ensure the operation is allowed. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebindaddr\u003c/code\u003e - local socket address to bind, or \n\u003ccode\u003enull\u003c/code\u003e for an unbound socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the socket could not be opened, or the socket could not bind to the specified local port.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if bindaddr is a SocketAddress subclass not supported by this socket."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a datagram socket and binds it to the specified port on the local host machine. The socket will be bound to the wildcard address. If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eport\u003c/code\u003e - local port to use in the bind operation."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the socket could not be opened, or the socket could not bind to the specified local port.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if port is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#PortRange\"\u003e out of range.\u003c/a\u003e"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "laddr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a datagram socket, bound to the specified local address. The local port must be between 0 and 65535 inclusive. A port number of zero will let the system pick up an ephemeral port in a bind operation. If the IP address is a wildcard address, or is null, the socket will be bound to the wildcard address. If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eport\u003c/code\u003e - local port to use in the bind operation.",
          "\u003ccode\u003eladdr\u003c/code\u003e - local address to bind (can be \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the socket could not be opened, or the socket could not bind to the specified local port.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if port is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramSocket.html#PortRange\"\u003e out of range.\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.DatagramSocket",
  "comment": "This class represents a socket for sending and receiving datagram packets. \n\u003cp\u003eA datagram socket is the sending or receiving point for a packet delivery service. Each packet sent or received on a datagram socket is individually addressed and routed. Multiple packets sent from one machine to another may be routed differently, and may arrive in any order. \u003c/p\u003e\n\u003cp\u003e Where possible, a newly constructed \u003ccode\u003eDatagramSocket\u003c/code\u003e has the \u003ca href\u003d\"StandardSocketOptions.html#SO_BROADCAST\"\u003e\u003ccode\u003eSO_BROADCAST\u003c/code\u003e\u003c/a\u003e socket option enabled so as to allow the transmission of broadcast datagrams. In order to receive broadcast packets a DatagramSocket should be bound to the wildcard address. In some implementations, broadcast packets may also be received when a DatagramSocket is bound to a more specific address. \u003c/p\u003e\n\u003cp\u003e Example: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n              DatagramSocket s \u003d new DatagramSocket(null);\n              s.bind(new InetSocketAddress(8888));\n \u003c/code\u003e\u003c/pre\u003e Which is equivalent to: \n\u003cpre\u003e\u003ccode\u003e\n              DatagramSocket s \u003d new DatagramSocket(8888);\n \u003c/code\u003e\u003c/pre\u003e Both cases will create a DatagramSocket able to receive broadcasts on UDP port 8888. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eDatagramSocket\u003c/code\u003e class defines convenience methods to set and get several socket options. This class also defines the \u003ca href\u003d\"#setOption(java.net.SocketOption,T)\"\u003e\u003ccode\u003esetOption\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getOption(java.net.SocketOption)\"\u003e\u003ccode\u003egetOption\u003c/code\u003e\u003c/a\u003e methods to set and query socket options. A \u003ccode\u003eDatagramSocket\u003c/code\u003e supports the following socket options: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003ca id\u003d\"SocketOptions\"\u003e\u003c/a\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption style\u003d\"display:none\"\u003e\n   Socket options\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\"\u003eOption Name\u003c/th\u003e \n    \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e \n   \u003c/tr\u003e \n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_SNDBUF\"\u003e\u003ccode\u003eSO_SNDBUF\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The size of the socket send buffer \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_RCVBUF\"\u003e\u003ccode\u003eSO_RCVBUF\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The size of the socket receive buffer \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_REUSEADDR\"\u003e\u003ccode\u003eSO_REUSEADDR\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Re-use address \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_BROADCAST\"\u003e\u003ccode\u003eSO_BROADCAST\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Allow transmission of broadcast datagrams \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#IP_TOS\"\u003e\u003ccode\u003eIP_TOS\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The Type of Service (ToS) octet in the Internet Protocol (IP) header \u003c/td\u003e \n   \u003c/tr\u003e \n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e An implementation may also support additional options. In particular an implementation may support \n\u003ca href\u003d\"MulticastSocket.html#MulticastOptions\"\u003emulticast options\u003c/a\u003e which can be useful when using a plain \n\u003ccode\u003eDatagramSocket\u003c/code\u003e to send datagrams to a multicast group.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eDatagramPacket\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/DatagramChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eDatagramChannel\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}