{
  "packageName": "java.net",
  "simpleName": "URLPermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.Permission",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActions",
      "comment": "Returns the normalized method list and request header list, in the form:       \"method-names : header-names\"\n where method-names is the list of methods separated by commas and header-names is the list of permitted headers separated by commas. There is no white space in the returned String. If header-names is empty then the colon separator may not be present.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#getActions()\"\u003egetActions\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the actions of this Permission."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "implies",
      "comment": "Checks if this URLPermission implies the given permission. Specifically, the following checks are done as if in the following sequence: if \u0027p\u0027 is not an instance of URLPermission return false if any of p\u0027s methods are not in this\u0027s method list, and if this\u0027s method list is not equal to \"*\", then return false. if any of p\u0027s headers are not in this\u0027s request header list, and if this\u0027s request header list is not equal to \"*\", then return false. if this\u0027s url scheme is not equal to p\u0027s url scheme return false if the scheme specific part of this\u0027s url is \u0027*\u0027 return true if the set of hosts defined by p\u0027s url hostrange is not a subset of this\u0027s url hostrange then return false. For example, \"*.foo.example.com\" is a subset of \"*.example.com\". \"foo.bar.example.com\" is not a subset of \"*.foo.example.com\" if the portrange defined by p\u0027s url is not a subset of the portrange defined by this\u0027s url then return false. if the path or paths specified by p\u0027s url are contained in the set of paths specified by this\u0027s url, then return true otherwise, return false Some examples of how paths are matched are shown below: Examples of Path Matching this\u0027s path p\u0027s path match /a/b /a/b yes /a/b/* /a/b/c yes /a/b/c/d no /a/b/c/- no /a/b/- /a/b/c/d yes /a/b/c/d/e yes /a/b/c/* yes",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#implies(java.security.Permission)\"\u003eimplies\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the permission to check against."
        ],
        "return": [
          "true if the specified permission is implied by this object, false if not."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if, this.getActions().equals(p.getActions()) and p\u0027s url equals this\u0027s url. Returns false otherwise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the object we are testing for equality with this object."
        ],
        "return": [
          "true if both Permission objects are equivalent."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hashcode calculated from the hashcode of the actions String and the url string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new URLPermission from a url string and which permits the given request methods and user-settable request headers. The name of the permission is the url string it was created with. Only the scheme, authority and path components of the url are used internally. Any fragment or query components are ignored. The permissions action string is as specified above.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the url string",
          "\u003ccode\u003eactions\u003c/code\u003e - the actions string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if url is invalid or if actions contains white-space."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URLPermission with the given url string and unrestricted methods and request headers by invoking the two argument constructor as follows: URLPermission(url, \"*:*\")",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the url string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if url does not result in a valid \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.net.URLPermission",
  "comment": "Represents permission to access a resource or set of resources defined by a given url, and for a given set of user-settable request methods and request headers. The \n\u003ci\u003ename\u003c/i\u003e of the permission is the url string. The \n\u003ci\u003eactions\u003c/i\u003e string is a concatenation of the request methods and headers. The range of method and header names is not restricted by this class. \n\u003cp\u003e\u003cb\u003eThe url\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003e The url string has the following expected structure. \u003c/p\u003e\n\u003cpre\u003e     scheme : // authority [ / path ] [ ignored-query-or-fragment ]\n \u003c/pre\u003e \n\u003ci\u003escheme\u003c/i\u003e will typically be http or https, but is not restricted by this class. \n\u003ci\u003eauthority\u003c/i\u003e is specified as: \n\u003cpre\u003e     authority \u003d [ userinfo @ ] hostrange [ : portrange ]\n     portrange \u003d portnumber | -portnumber | portnumber-[portnumber] | *\n     hostrange \u003d ([*.] dnsname) | IPv4address | IPv6address\n \u003c/pre\u003e \n\u003ci\u003ednsname\u003c/i\u003e is a standard DNS host or domain name, i.e. one or more labels separated by \".\". \n\u003ci\u003eIPv4address\u003c/i\u003e is a standard literal IPv4 address and \n\u003ci\u003eIPv6address\u003c/i\u003e is as defined in \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e RFC 2732\u003c/a\u003e. Literal IPv6 addresses must however, be enclosed in \u0027[]\u0027 characters. The \n\u003ci\u003ednsname\u003c/i\u003e specification can be preceded by \"*.\" which means the name will match any hostname whose right-most domain labels are the same as this name. For example, \"*.example.com\" matches \"foo.bar.example.com\" \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ci\u003eportrange\u003c/i\u003e is used to specify a port number, or a bounded or unbounded range of ports that this permission applies to. If portrange is absent or invalid, then a default port number is assumed if the scheme is \u003ccode\u003ehttp\u003c/code\u003e (default 80) or \u003ccode\u003ehttps\u003c/code\u003e (default 443). No default is assumed for other schemes. A wildcard may be specified which means all ports. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003euserinfo\u003c/i\u003e is optional. A userinfo component if present, is ignored when creating a URLPermission, and has no effect on any other methods defined by this class. \u003c/p\u003e\n\u003cp\u003e The \u003ci\u003epath\u003c/i\u003e component comprises a sequence of path segments, separated by \u0027/\u0027 characters. \u003ci\u003epath\u003c/i\u003e may also be empty. The path is specified in a similar way to the path in \u003ca href\u003d\"../io/FilePermission.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eFilePermission\u003c/code\u003e\u003c/a\u003e. There are three different ways as the following examples show: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  URL Examples\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eExample url\u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"white-space:nowrap;\"\u003ehttp://www.example.com/a/b/c.html\u003c/th\u003e \n   \u003ctd\u003eA url which identifies a specific (single) resource\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ehttp://www.example.com/a/b/*\u003c/th\u003e \n   \u003ctd\u003eThe \u0027*\u0027 character refers to all resources in the same \"directory\" - in other words all resources with the same number of path components, and which only differ in the final path component, represented by the \u0027*\u0027. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ehttp://www.example.com/a/b/-\u003c/th\u003e \n   \u003ctd\u003eThe \u0027-\u0027 character refers to all resources recursively below the preceding path (e.g. http://www.example.com/a/b/c/d/e.html matches this example). \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u0027*\u0027 and \u0027-\u0027 may only be specified in the final segment of a path and must be the only character in that segment. Any query or fragment components of the url are ignored when constructing URLPermissions. \u003c/p\u003e\n\u003cp\u003e As a special case, urls of the form, \"scheme:*\" are accepted to mean any url of the given scheme. \u003c/p\u003e\n\u003cp\u003e The \u003ci\u003escheme\u003c/i\u003e and \u003ci\u003eauthority\u003c/i\u003e components of the url string are handled without regard to case. This means \u003ca href\u003d\"#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#hashCode()\"\u003e\u003ccode\u003ehashCode()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#implies(java.security.Permission)\"\u003e\u003ccode\u003eimplies(Permission)\u003c/code\u003e\u003c/a\u003e are case insensitive with respect to these components. If the \u003ci\u003eauthority\u003c/i\u003e contains a literal IP address, then the address is normalized for comparison. The path component is case sensitive. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003eignored-query-or-fragment\u003c/i\u003e refers to any query or fragment which appears after the path component, and which is ignored by the constructors of this class. It is defined as: \u003c/p\u003e\n\u003cpre\u003e     ignored-query-or-fragment \u003d [ ? query ] [ # fragment ]\n \u003c/pre\u003e where \n\u003ci\u003equery\u003c/i\u003e and \n\u003ci\u003efragment\u003c/i\u003e are as defined in \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2296.txt\"\u003eRFC2396\u003c/a\u003e. \n\u003ca href\u003d\"../security/Permission.html#getName()\"\u003e\u003ccode\u003egetName()\u003c/code\u003e\u003c/a\u003e therefore returns only the \n\u003ci\u003escheme\u003c/i\u003e, \n\u003ci\u003eauthority\u003c/i\u003e and \n\u003ci\u003epath\u003c/i\u003e components of the url string that the permission was created with. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eThe actions string\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003e The actions string of a URLPermission is a concatenation of the \u003ci\u003emethod list\u003c/i\u003e and the \u003ci\u003erequest headers list\u003c/i\u003e. These are lists of the permitted request methods and permitted request headers of the permission (respectively). The two lists are separated by a colon \u0027:\u0027 character and elements of each list are comma separated. Some examples are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\"POST,GET,DELETE\" \u003c/li\u003e\n \u003cli\u003e\"GET:X-Foo-Request,X-Bar-Request\" \u003c/li\u003e\n \u003cli\u003e\"POST,GET:Header1,Header2\" \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The first example specifies the methods: POST, GET and DELETE, but no request headers. The second example specifies one request method and two headers. The third example specifies two request methods, and two headers. \u003c/p\u003e\n\u003cp\u003e The colon separator need not be present if the request headers list is empty. No white-space is permitted in the actions string. The action strings supplied to the URLPermission constructors are case-insensitive and are normalized by converting method names to upper-case and header names to the form defines in RFC2616 (lower case with initial letter of each word capitalized). Either list can contain a wild-card \u0027*\u0027 character which signifies all request methods or headers respectively. \u003c/p\u003e\n\u003cp\u003e Note. Depending on the context of use, some request methods and headers may be permitted at all times, and others may not be permitted at any time. For example, the HTTP protocol handler might disallow certain headers such as Content-Length from being set by application code, regardless of whether the security policy in force, permits it.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.net.URLPermission\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}