{
  "packageName": "java.net",
  "simpleName": "URLEncoder",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "encode",
      "comment": "Translates a string into x-www-form-urlencoded format. This method uses the platform\u0027s default encoding as the encoding scheme to obtain the bytes for unsafe characters.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - \n\u003ccode\u003eString\u003c/code\u003e to be translated."
        ],
        "return": [
          "the translated \n\u003ccode\u003eString\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "enc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "encode",
      "comment": "Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme. This method behaves the same as encode(java.lang.String,java.nio.charset.Charset) except that it will look up the charset using the given encoding name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLDecoder.html#decode(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eURLDecoder.decode(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - \n\u003ccode\u003eString\u003c/code\u003e to be translated.",
          "\u003ccode\u003eenc\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/package-summary.html#charenc\"\u003echaracter encoding\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named encoding is not supported"
        ],
        "return": [
          "the translated \n\u003ccode\u003eString\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "encode",
      "comment": "Translates a string into application/x-www-form-urlencoded format using a specific Charset. This method uses the supplied charset to obtain the bytes for unsafe characters. Note: The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilities.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLDecoder.html#decode(java.lang.String,java.nio.charset.Charset)\"\u003e\u003ccode\u003eURLDecoder.decode(java.lang.String, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - \n\u003ccode\u003eString\u003c/code\u003e to be translated.",
          "\u003ccode\u003echarset\u003c/code\u003e - the given charset"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e or \n\u003ccode\u003echarset\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the translated \n\u003ccode\u003eString\u003c/code\u003e."
        ],
        "since": [
          "10"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.URLEncoder",
  "comment": "Utility class for HTML form encoding. This class contains static methods for converting a String to the \n\u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e MIME format. For more information about HTML form encoding, consult the HTML \n\u003ca href\u003d\"http://www.w3.org/TR/html4/\"\u003especification\u003c/a\u003e. \n\u003cp\u003e When encoding a String, the following rules apply: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe alphanumeric characters \"\u003ccode\u003ea\u003c/code\u003e\" through \"\u003ccode\u003ez\u003c/code\u003e\", \"\u003ccode\u003eA\u003c/code\u003e\" through \"\u003ccode\u003eZ\u003c/code\u003e\" and \"\u003ccode\u003e0\u003c/code\u003e\" through \"\u003ccode\u003e9\u003c/code\u003e\" remain the same. \u003c/li\u003e\n \u003cli\u003eThe special characters \"\u003ccode\u003e.\u003c/code\u003e\", \"\u003ccode\u003e-\u003c/code\u003e\", \"\u003ccode\u003e*\u003c/code\u003e\", and \"\u003ccode\u003e_\u003c/code\u003e\" remain the same. \u003c/li\u003e\n \u003cli\u003eThe space character \" \u0026nbsp; \" is converted into a plus sign \"\u003ccode\u003e+\u003c/code\u003e\". \u003c/li\u003e\n \u003cli\u003eAll other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string \"\u003ci\u003e\u003ccode\u003e%xy\u003c/code\u003e\u003c/i\u003e\", where \u003ci\u003exy\u003c/i\u003e is the two-digit hexadecimal representation of the byte. The recommended encoding scheme to use is UTF-8. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For example using UTF-8 as the encoding scheme the string \"The string ü@foo-bar\" would get converted to \"The+string+%C3%BC%40foo-bar\" because in UTF-8 the character ü is encoded as two bytes C3 (hex) and BC (hex), and the character @ is encoded as one byte 40 (hex).\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.0"
    ]
  }
}