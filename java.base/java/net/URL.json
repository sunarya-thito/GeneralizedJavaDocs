{
  "packageName": "java.net",
  "simpleName": "URL",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQuery",
      "comment": "Gets the query part of this URL.",
      "tagMap": {
        "return": [
          "the query part of this \n\u003ccode\u003eURL\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if one does not exist"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPath",
      "comment": "Gets the path part of this URL.",
      "tagMap": {
        "return": [
          "the path part of this \n\u003ccode\u003eURL\u003c/code\u003e, or an empty string if one does not exist"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUserInfo",
      "comment": "Gets the userInfo part of this URL.",
      "tagMap": {
        "return": [
          "the userInfo part of this \n\u003ccode\u003eURL\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if one does not exist"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAuthority",
      "comment": "Gets the authority part of this URL.",
      "tagMap": {
        "return": [
          "the authority part of this \n\u003ccode\u003eURL\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPort",
      "comment": "Gets the port number of this URL.",
      "tagMap": {
        "return": [
          "the port number, or -1 if the port is not set"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultPort",
      "comment": "Gets the default port number of the protocol associated with this URL. If the URL scheme or the URLStreamHandler for the URL do not define a default port number, then -1 is returned.",
      "tagMap": {
        "return": [
          "the port number"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProtocol",
      "comment": "Gets the protocol name of this URL.",
      "tagMap": {
        "return": [
          "the protocol of this \n\u003ccode\u003eURL\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHost",
      "comment": "Gets the host name of this URL, if applicable. The format of the host conforms to RFC 2732, i.e. for a literal IPv6 address, this method will return the IPv6 address enclosed in square brackets (\u0027[\u0027 and \u0027]\u0027).",
      "tagMap": {
        "return": [
          "the host name of this \n\u003ccode\u003eURL\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFile",
      "comment": "Gets the file name of this URL. The returned file portion will be the same as getPath(), plus the concatenation of the value of getQuery(), if any. If there is no query portion, this method and getPath() will return identical results.",
      "tagMap": {
        "return": [
          "the file name of this \n\u003ccode\u003eURL\u003c/code\u003e, or an empty string if one does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRef",
      "comment": "Gets the anchor (also known as the \"reference\") of this URL.",
      "tagMap": {
        "return": [
          "the anchor (also known as the \"reference\") of this \n\u003ccode\u003eURL\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if one does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this URL for equality with another object. If the given object is not a URL then this method immediately returns false. Two URL objects are equal if they have the same protocol, reference equivalent hosts, have the same port number on the host, and the same file and fragment of the file. Two hosts are considered equivalent if both host names can be resolved into the same IP addresses; else if either host name can\u0027t be resolved, the host names must be equal without regard to case; or both host names equal to null. Since hosts comparison requires name resolution, this operation is a blocking operation. Note: The defined behavior for equals is known to be inconsistent with virtual hosting in HTTP.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the URL to compare against."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Creates an integer suitable for hash table indexing. The hash code is based upon all the URL components relevant for URL comparison. As such, this operation is a blocking operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code for this \n\u003ccode\u003eURL\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sameFile",
      "comment": "Compares two URLs, excluding the fragment component. Returns true if this URL and the other argument are equal without taking the fragment component into consideration.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the \n\u003ccode\u003eURL\u003c/code\u003e to compare against."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if they reference the same remote object; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Constructs a string representation of this URL. The string is created by calling the toExternalForm method of the stream protocol handler for this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html#toExternalForm(java.net.URL)\"\u003e\u003ccode\u003eURLStreamHandler.toExternalForm(java.net.URL)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toExternalForm",
      "comment": "Constructs a string representation of this URL. The string is created by calling the toExternalForm method of the stream protocol handler for this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html#toExternalForm(java.net.URL)\"\u003e\u003ccode\u003eURLStreamHandler.toExternalForm(java.net.URL)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a string representation of this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URI",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.URISyntaxException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toURI",
      "comment": "Returns a URI equivalent to this URL. This method functions in the same way as new URI (this.toString()). Note, any URL instance that complies with RFC 2396 can be converted to a URI. However, some URLs that are not strictly in compliance can not be converted to a URI.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URISyntaxException.html\" title\u003d\"class in java.net\"\u003eURISyntaxException\u003c/a\u003e\u003c/code\u003e - if this URL is not formatted strictly according to RFC2396 and cannot be converted to a URI."
        ],
        "return": [
          "a URI instance equivalent to this URL."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URLConnection",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "openConnection",
      "comment": "Returns a URLConnection instance that represents a connection to the remote object referred to by the URL. A new instance of URLConnection is created every time when invoking the URLStreamHandler.openConnection(URL) method of the protocol handler for this URL. It should be noted that a URLConnection instance does not establish the actual network connection on creation. This will happen only when calling URLConnection.connect(). If for the URL\u0027s protocol (such as HTTP or JAR), there exists a public, specialized URLConnection subclass belonging to one of the following packages or one of their subpackages: java.lang, java.io, java.util, java.net, the connection returned will be of that subclass. For example, for HTTP an HttpURLConnection will be returned, and for JAR a JarURLConnection will be returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs."
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLConnection\u003c/code\u003e\u003c/a\u003e linking to the URL."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URLConnection",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.Proxy",
            "type": "Class"
          },
          "field": {
            "name": "proxy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "openConnection",
      "comment": "Same as openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection. Invoking this method preempts the system\u0027s default ProxySelector settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLConnection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html#openConnection(java.net.URL,java.net.Proxy)\"\u003e\u003ccode\u003eURLStreamHandler.openConnection(java.net.URL, java.net.Proxy)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eproxy\u003c/code\u003e - the Proxy through which this connection will be made. If direct connection is desired, Proxy.NO_PROXY should be specified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present and the caller doesn\u0027t have permission to connect to the proxy.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - will be thrown if proxy is null, or proxy has the wrong type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the subclass that implements the protocol handler doesn\u0027t support this method."
        ],
        "return": [
          "a \n\u003ccode\u003eURLConnection\u003c/code\u003e to the URL."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "openStream",
      "comment": "Opens a connection to this URL and returns an InputStream for reading from that connection. This method is a shorthand for:      openConnection().getInputStream()",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#openConnection()\"\u003e\u003ccode\u003eopenConnection()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html#getInputStream()\"\u003e\u003ccode\u003eURLConnection.getInputStream()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs."
        ],
        "return": [
          "an input stream for reading from the URL connection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getContent",
      "comment": "Gets the contents of this URL. This method is a shorthand for:      openConnection().getContent()",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html#getContent()\"\u003e\u003ccode\u003eURLConnection.getContent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs."
        ],
        "return": [
          "the contents of this URL."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "classes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getContent",
      "comment": "Gets the contents of this URL. This method is a shorthand for:      openConnection().getContent(classes)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html#getContent(java.lang.Class%5B%5D)\"\u003e\u003ccode\u003eURLConnection.getContent(Class[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eclasses\u003c/code\u003e - an array of Java types"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs."
        ],
        "return": [
          "the content object of this URL that is the first match of the types specified in the classes array. null if none of the requested types are supported."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URLStreamHandlerFactory",
            "type": "Class"
          },
          "field": {
            "name": "fac"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setURLStreamHandlerFactory",
      "comment": "Sets an application\u0027s URLStreamHandlerFactory. This method can be called at most once in a given Java Virtual Machine. The URLStreamHandlerFactory instance is used to construct a stream protocol handler from a protocol name. If there is a security manager, this method first calls the security manager\u0027s checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandlerFactory.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eURLStreamHandlerFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkSetFactory()\"\u003e\u003ccode\u003eSecurityManager.checkSetFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efac\u003c/code\u003e - the desired factory."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Error.html\" title\u003d\"class in java.lang\"\u003eError\u003c/a\u003e\u003c/code\u003e - if the application has already set a factory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckSetFactory\u003c/code\u003e method doesn\u0027t allow the operation."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "protocol"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URL object from the specified protocol, host, port number, and file. host can be expressed as a host name or a literal IP address. If IPv6 literal address is used, it should be enclosed in square brackets (\u0027[\u0027 and \u0027]\u0027), as specified by RFC 2732; However, the literal IPv6 address format defined in RFC 2373: IP Version 6 Addressing Architecture is also accepted. Specifying a port number of -1 indicates that the URL should use the default port for the protocol. If this is the first URL object being created with the specified protocol, a stream protocol handler object, an instance of class URLStreamHandler, is created for that protocol: If the application has previously set up an instance of URLStreamHandlerFactory as the stream handler factory, then the createURLStreamHandler method of that instance is called with the protocol string as an argument to create the stream protocol handler. If no URLStreamHandlerFactory has yet been set up, or if the factory\u0027s createURLStreamHandler method returns null, then the ServiceLoader mechanism is used to locate URLStreamHandlerProvider implementations using the system class loader. The order that providers are located is implementation specific, and an implementation is free to cache the located providers. A ServiceConfigurationError, Error or RuntimeException thrown from the createURLStreamHandler, if encountered, will be propagated to the calling thread. The createURLStreamHandler method of each provider, if instantiated, is invoked, with the protocol string, until a provider returns non-null, or all providers have been exhausted. If the previous step fails to find a protocol handler, the constructor reads the value of the system property: java.protocol.handler.pkgs If the value of that system property is not null, it is interpreted as a list of packages separated by a vertical slash character \u0027|\u0027. The constructor tries to load the class named: \u003cpackage\u003e.\u003cprotocol\u003e.Handler where \u003cpackage\u003e is replaced by the name of the package and \u003cprotocol\u003e is replaced by the name of the protocol. If this class does not exist, or if the class exists but it is not a subclass of URLStreamHandler, then the next package in the list is tried. If the previous step fails to find a protocol handler, then the constructor tries to load a built-in protocol handler. If this class does not exist, or if the class exists but it is not a subclass of URLStreamHandler, then a MalformedURLException is thrown. Protocol handlers for the following protocols are guaranteed to exist on the search path: http https file jar Protocol handlers for additional protocols may also be available. Some protocol handlers, for example those used for loading platform classes or classes on the class path, may not be overridden. The details of such restrictions, and when those restrictions apply (during initialization of the runtime for example), are implementation specific and therefore not specified No validation of the inputs is performed by this constructor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)\"\u003e\u003ccode\u003esetURLStreamHandlerFactory( java.net.URLStreamHandlerFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLStreamHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandlerFactory.html#createURLStreamHandler(java.lang.String)\"\u003e\u003ccode\u003eURLStreamHandlerFactory.createURLStreamHandler( java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprotocol\u003c/code\u003e - the name of the protocol to use.",
          "\u003ccode\u003ehost\u003c/code\u003e - the name of the host.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number on the host.",
          "\u003ccode\u003efile\u003c/code\u003e - the file on the host"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if an unknown protocol or the port is a negative number other than -1"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "protocol"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URL from the specified protocol name, host name, and file name. The default port for the specified protocol is used. This constructor is equivalent to the four-argument constructor with the only difference of using the default port for the specified protocol. No validation of the inputs is performed by this constructor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprotocol\u003c/code\u003e - the name of the protocol to use.",
          "\u003ccode\u003ehost\u003c/code\u003e - the name of the host.",
          "\u003ccode\u003efile\u003c/code\u003e - the file on the host."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if an unknown protocol is specified."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "protocol"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "java.net.URLStreamHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URL object from the specified protocol, host, port number, file, and handler. Specifying a port number of -1 indicates that the URL should use the default port for the protocol. Specifying a handler of null indicates that the URL should use a default stream handler for the protocol, as outlined for: URL(java.lang.String, java.lang.String, int, java.lang.String) If the handler is not null and there is a security manager, the security manager\u0027s checkPermission method is called with a NetPermission(\"specifyStreamHandler\") permission. This may result in a SecurityException. No validation of the inputs is performed by this constructor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)\"\u003e\u003ccode\u003esetURLStreamHandlerFactory( java.net.URLStreamHandlerFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLStreamHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandlerFactory.html#createURLStreamHandler(java.lang.String)\"\u003e\u003ccode\u003eURLStreamHandlerFactory.createURLStreamHandler( java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/NetPermission.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eNetPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprotocol\u003c/code\u003e - the name of the protocol to use.",
          "\u003ccode\u003ehost\u003c/code\u003e - the name of the host.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number on the host.",
          "\u003ccode\u003efile\u003c/code\u003e - the file on the host",
          "\u003ccode\u003ehandler\u003c/code\u003e - the stream handler for the URL."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if an unknown protocol or the port is a negative number other than -1",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow specifying a stream handler explicitly."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "spec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URL object from the String representation. This constructor is equivalent to a call to the two-argument constructor with a null first argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.net.URL,java.lang.String)\"\u003e\u003ccode\u003eURL(java.net.URL, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003espec\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to parse as a URL."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if no protocol is specified, or an unknown protocol is found, or \n\u003ccode\u003espec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the parsed URL fails to comply with the specific syntax of the associated protocol."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "spec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URL by parsing the given spec within a specified context. The new URL is created from the given context URL and the spec argument as described in RFC2396 \"Uniform Resource Identifiers : Generic * Syntax\" :           \u003cscheme\u003e://\u003cauthority\u003e\u003cpath\u003e?\u003cquery\u003e#\u003cfragment\u003e\n The reference is parsed into the scheme, authority, path, query and fragment parts. If the path component is empty and the scheme, authority, and query components are undefined, then the new URL is a reference to the current document. Otherwise, the fragment and query parts present in the spec are used in the new URL. If the scheme component is defined in the given spec and does not match the scheme of the context, then the new URL is created as an absolute URL based on the spec alone. Otherwise the scheme component is inherited from the context URL. If the authority component is present in the spec then the spec is treated as absolute and the spec authority and path will replace the context authority and path. If the authority component is absent in the spec then the authority of the new URL will be inherited from the context. If the spec\u0027s path component begins with a slash character \"/\" then the path is treated as absolute and the spec path replaces the context path. Otherwise, the path is treated as a relative path and is appended to the context path, as described in RFC2396. Also, in this case, the path is canonicalized through the removal of directory changes made by occurrences of \"..\" and \".\". For a more detailed description of URL parsing, refer to RFC2396.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLStreamHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html#parseURL(java.net.URL,java.lang.String,int,int)\"\u003e\u003ccode\u003eURLStreamHandler.parseURL(java.net.URL, java.lang.String, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - the context in which to parse the specification.",
          "\u003ccode\u003espec\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to parse as a URL."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if no protocol is specified, or an unknown protocol is found, or \n\u003ccode\u003espec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the parsed URL fails to comply with the specific syntax of the associated protocol."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "spec"
          }
        },
        {
          "type": {
            "name": "java.net.URLStreamHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a URL by parsing the given spec with the specified handler within a specified context. If the handler is null, the parsing occurs as with the two argument constructor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,int,java.lang.String)\"\u003e\u003ccode\u003eURL(java.lang.String, java.lang.String, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLStreamHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLStreamHandler.html#parseURL(java.net.URL,java.lang.String,int,int)\"\u003e\u003ccode\u003eURLStreamHandler.parseURL(java.net.URL, java.lang.String, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - the context in which to parse the specification.",
          "\u003ccode\u003espec\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to parse as a URL.",
          "\u003ccode\u003ehandler\u003c/code\u003e - the stream handler for the URL."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if no protocol is specified, or an unknown protocol is found, or \n\u003ccode\u003espec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the parsed URL fails to comply with the specific syntax of the associated protocol.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow specifying a stream handler."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.net.URL",
  "comment": "Class \n\u003ccode\u003eURL\u003c/code\u003e represents a Uniform Resource Locator, a pointer to a \"resource\" on the World Wide Web. A resource can be something as simple as a file or a directory, or it can be a reference to a more complicated object, such as a query to a database or to a search engine. More information on the types of URLs and their formats can be found at: \n\u003ca href\u003d\"http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html\"\u003e \u003ci\u003eTypes of URL\u003c/i\u003e\u003c/a\u003e \n\u003cp\u003e In general, a URL can be broken into several parts. Consider the following example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     http://www.example.com/docs/resource1.html\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The URL above indicates that the protocol to use is \u003ccode\u003ehttp\u003c/code\u003e (HyperText Transfer Protocol) and that the information resides on a host machine named \u003ccode\u003ewww.example.com\u003c/code\u003e. The information on that host machine is named \u003ccode\u003e/docs/resource1.html\u003c/code\u003e. The exact meaning of this name on the host machine is both protocol dependent and host dependent. The information normally resides in a file, but it could be generated on the fly. This component of the URL is called the \u003ci\u003epath\u003c/i\u003e component. \u003c/p\u003e\n\u003cp\u003e A URL can optionally specify a \"port\", which is the port number to which the TCP connection is made on the remote host machine. If the port is not specified, the default port for the protocol is used instead. For example, the default port for \u003ccode\u003ehttp\u003c/code\u003e is \u003ccode\u003e80\u003c/code\u003e. An alternative port could be specified as: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     http://www.example.com:1080/docs/resource1.html\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The syntax of \u003ccode\u003eURL\u003c/code\u003e is defined by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2396.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2396: Uniform Resource Identifiers (URI): Generic Syntax\u003c/i\u003e\u003c/a\u003e, amended by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2732.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2732: Format for Literal IPv6 Addresses in URLs\u003c/i\u003e\u003c/a\u003e. The Literal IPv6 address format also supports scope_ids. The syntax and usage of scope_ids is described \u003ca href\u003d\"Inet6Address.html#scoped\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e A URL may have appended to it a \"fragment\", also known as a \"ref\" or a \"reference\". The fragment is indicated by the sharp sign character \"#\" followed by more characters. For example, \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     http://www.example.com/index.html#chapter1\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This fragment is not technically part of the URL. Rather, it indicates that after the specified resource is retrieved, the application is specifically interested in that part of the document that has the tag \u003ccode\u003echapter1\u003c/code\u003e attached to it. The meaning of a tag is resource specific. \u003c/p\u003e\n\u003cp\u003e An application can also specify a \"relative URL\", which contains only enough information to reach the resource relative to another URL. Relative URLs are frequently used within HTML pages. For example, if the contents of the URL: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     http://www.example.com/index.html\n \u003c/pre\u003e\n\u003c/blockquote\u003e contained within it the relative URL: \n\u003cblockquote\u003e\n \u003cpre\u003e     FAQ.html\n \u003c/pre\u003e\n\u003c/blockquote\u003e it would be a shorthand for: \n\u003cblockquote\u003e\n \u003cpre\u003e     http://www.example.com/FAQ.html\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The relative URL need not specify all the components of a URL. If the protocol, host name, or port number is missing, the value is inherited from the fully specified URL. The file component must be specified. The optional fragment is not inherited. \u003c/p\u003e\n\u003cp\u003e The URL class does not itself encode or decode any URL components according to the escaping mechanism defined in RFC2396. It is the responsibility of the caller to encode any fields, which need to be escaped prior to calling URL, and also to decode any escaped fields, that are returned from URL. Furthermore, because URL has no knowledge of URL escaping, it does not recognise equivalence between the encoded or decoded form of the same URL. For example, the two URLs:\u003cbr\u003e \u003c/p\u003e\n\u003cpre\u003e    http://foo.com/hello world/ and http://foo.com/hello%20world\u003c/pre\u003e would be considered not equal to each other. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Note, the \u003ca href\u003d\"URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e class does perform escaping of its component fields in certain circumstances. The recommended way to manage the encoding and decoding of URLs is to use \u003ca href\u003d\"URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e, and to convert between these two classes using \u003ca href\u003d\"#toURI()\"\u003e\u003ccode\u003etoURI()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"URI.html#toURL()\"\u003e\u003ccode\u003eURI.toURL()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"URLEncoder.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLEncoder\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"URLDecoder.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLDecoder\u003c/code\u003e\u003c/a\u003e classes can also be used, but only for HTML form encoding, which is not the same as the encoding scheme defined in RFC2396.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.net.URL\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "apiNote": [
      "Applications working with file paths and file URIs should take great care to use the appropriate methods to convert between the two. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#of(java.net.URI)\"\u003e\u003ccode\u003ePath.of(URI)\u003c/code\u003e\u003c/a\u003e factory method and the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#%3Cinit%3E(java.net.URI)\"\u003e\u003ccode\u003eFile(URI)\u003c/code\u003e\u003c/a\u003e constructor can be used to create \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eFile\u003c/code\u003e\u003c/a\u003e objects from a file URI. \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#toUri()\"\u003e\u003ccode\u003ePath.toUri()\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#toURI()\"\u003e\u003ccode\u003eFile.toURI()\u003c/code\u003e\u003c/a\u003e can be used to create a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e from a file path, which can be converted to URL using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html#toURL()\"\u003e\u003ccode\u003eURI.toURL()\u003c/code\u003e\u003c/a\u003e. Applications should never try to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String)\"\u003econstruct\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html#%3Cinit%3E(java.lang.String)\"\u003eparse\u003c/a\u003e a \n\u003ccode\u003eURL\u003c/code\u003e from the direct string representation of a \n\u003ccode\u003eFile\u003c/code\u003e or \n\u003ccode\u003ePath\u003c/code\u003e instance. \n\u003cp\u003e Some components of a URL or URI, such as \u003ci\u003euserinfo\u003c/i\u003e, may be abused to construct misleading URLs or URIs. Applications that deal with URLs or URIs should take into account the recommendations advised in \u003ca href\u003d\"https://tools.ietf.org/html/rfc3986#section-7\"\u003eRFC3986, Section 7, Security Considerations\u003c/a\u003e.\u003c/p\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}