{
  "packageName": "java.net",
  "simpleName": "Socket",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "endpoint"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "connect",
      "comment": "Connects this socket to the server.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eendpoint\u003c/code\u003e - the \n\u003ccode\u003eSocketAddress\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an error occurs during the connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/IllegalBlockingModeException.html\" title\u003d\"class in java.nio.channels\"\u003eIllegalBlockingModeException\u003c/a\u003e\u003c/code\u003e - if this socket has an associated channel, and the channel is in non-blocking mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if endpoint is null or is a SocketAddress subclass not supported by this socket"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "endpoint"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "connect",
      "comment": "Connects this socket to the server with a specified timeout value. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eendpoint\u003c/code\u003e - the \n\u003ccode\u003eSocketAddress\u003c/code\u003e",
          "\u003ccode\u003etimeout\u003c/code\u003e - the timeout value to be used in milliseconds."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an error occurs during the connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketTimeoutException.html\" title\u003d\"class in java.net\"\u003eSocketTimeoutException\u003c/a\u003e\u003c/code\u003e - if timeout expires before connecting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/IllegalBlockingModeException.html\" title\u003d\"class in java.nio.channels\"\u003eIllegalBlockingModeException\u003c/a\u003e\u003c/code\u003e - if this socket has an associated channel, and the channel is in non-blocking mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if endpoint is null or is a SocketAddress subclass not supported by this socket, or if \n\u003ccode\u003etimeout\u003c/code\u003e is negative"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "bindpoint"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bind",
      "comment": "Binds the socket to a local address. If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#isBound()\"\u003e\u003ccode\u003eisBound()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebindpoint\u003c/code\u003e - the \n\u003ccode\u003eSocketAddress\u003c/code\u003e to bind to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the bind operation fails, or if the socket is already bound.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if bindpoint is a SocketAddress subclass not supported by this socket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the bind to the local port."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInetAddress",
      "comment": "Returns the address to which the socket is connected. If the socket was connected prior to being closed, then this method will continue to return the connected address after the socket is closed.",
      "tagMap": {
        "return": [
          "the remote IP address to which this socket is connected, or \n\u003ccode\u003enull\u003c/code\u003e if the socket is not connected."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalAddress",
      "comment": "Gets the local address to which the socket is bound. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, the loopback address is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the local address to which the socket is bound, the loopback address if denied by the security manager, or the wildcard address if the socket is closed or not bound yet."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPort",
      "comment": "Returns the remote port number to which this socket is connected. If the socket was connected prior to being closed, then this method will continue to return the connected port number after the socket is closed.",
      "tagMap": {
        "return": [
          "the remote port number to which this socket is connected, or 0 if the socket is not connected yet."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalPort",
      "comment": "Returns the local port number to which this socket is bound. If the socket was bound prior to being closed, then this method will continue to return the local port number after the socket is closed.",
      "tagMap": {
        "return": [
          "the local port number to which this socket is bound or -1 if the socket is not bound yet."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.SocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRemoteSocketAddress",
      "comment": "Returns the address of the endpoint this socket is connected to, or null if it is unconnected. If the socket was connected prior to being closed, then this method will continue to return the connected address after the socket is closed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getInetAddress()\"\u003e\u003ccode\u003egetInetAddress()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getPort()\"\u003e\u003ccode\u003egetPort()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#connect(java.net.SocketAddress,int)\"\u003e\u003ccode\u003econnect(SocketAddress, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#connect(java.net.SocketAddress)\"\u003e\u003ccode\u003econnect(SocketAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSocketAddress\u003c/code\u003e representing the remote endpoint of this socket, or \n\u003ccode\u003enull\u003c/code\u003e if it is not connected yet."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.SocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalSocketAddress",
      "comment": "Returns the address of the endpoint this socket is bound to. If a socket bound to an endpoint represented by an InetSocketAddress is closed, then this method will continue to return an InetSocketAddress after the socket is closed. In that case the returned InetSocketAddress\u0027s address is the wildcard address and its port is the local port that it was bound to. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the loopback address and the local port to which this socket is bound is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getLocalAddress()\"\u003e\u003ccode\u003egetLocalAddress()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getLocalPort()\"\u003e\u003ccode\u003egetLocalPort()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#bind(java.net.SocketAddress)\"\u003e\u003ccode\u003ebind(SocketAddress)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSocketAddress\u003c/code\u003e representing the local endpoint of this socket, or a \n\u003ccode\u003eSocketAddress\u003c/code\u003e representing the loopback address if denied by the security manager, or \n\u003ccode\u003enull\u003c/code\u003e if the socket is not bound yet."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.SocketChannel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChannel",
      "comment": "Returns the unique SocketChannel object associated with this socket, if any. A socket will have a channel if, and only if, the channel itself was created via the SocketChannel.open or ServerSocketChannel.accept methods.",
      "tagMap": {
        "return": [
          "the socket channel associated with this socket, or \n\u003ccode\u003enull\u003c/code\u003e if this socket was not created for a channel"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputStream",
      "comment": "Returns an input stream for this socket. If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel. If the channel is in non-blocking mode then the input stream\u0027s read operations will throw an IllegalBlockingModeException. Under abnormal conditions the underlying connection may be broken by the remote host or the network software (for example a connection reset in the case of TCP connections). When a broken connection is detected by the network software the following applies to the returned input stream :- The network software may discard bytes that are buffered by the socket. Bytes that aren\u0027t discarded by the network software can be read using read. If there are no bytes buffered on the socket, or all buffered bytes have been consumed by read, then all subsequent calls to read will throw an IOException. If there are no bytes buffered on the socket, and the socket has not been closed using close, then available will return 0. Closing the returned InputStream will close the associated socket.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the input stream, the socket is closed, the socket is not connected, or the socket input has been shutdown using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownInput()\"\u003e\u003ccode\u003eshutdownInput()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an input stream for reading bytes from this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOutputStream",
      "comment": "Returns an output stream for this socket. If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel. If the channel is in non-blocking mode then the output stream\u0027s write operations will throw an IllegalBlockingModeException. Closing the returned OutputStream will close the associated socket.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the output stream or if the socket is not connected."
        ],
        "return": [
          "an output stream for writing bytes to this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTcpNoDelay",
      "comment": "Enable/disable TCP_NODELAY (disable/enable Nagle\u0027s algorithm).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getTcpNoDelay()\"\u003e\u003ccode\u003egetTcpNoDelay()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable TCP_NODELAY, \n\u003ccode\u003efalse\u003c/code\u003e to disable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTcpNoDelay",
      "comment": "Tests if TCP_NODELAY is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setTcpNoDelay(boolean)\"\u003e\u003ccode\u003esetTcpNoDelay(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether or not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#TCP_NODELAY\"\u003e\u003ccode\u003eTCP_NODELAY\u003c/code\u003e\u003c/a\u003e is enabled."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "linger"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSoLinger",
      "comment": "Enable/disable SO_LINGER with the specified linger time in seconds. The maximum timeout value is platform specific. The setting only affects socket close.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getSoLinger()\"\u003e\u003ccode\u003egetSoLinger()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - whether or not to linger on.",
          "\u003ccode\u003elinger\u003c/code\u003e - how long to linger for, if on is true."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the linger value is negative."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSoLinger",
      "comment": "Returns setting for SO_LINGER. -1 returns implies that the option is disabled. The setting only affects socket close.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSoLinger(boolean,int)\"\u003e\u003ccode\u003esetSoLinger(boolean, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "the setting for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_LINGER\"\u003e\u003ccode\u003eSO_LINGER\u003c/code\u003e\u003c/a\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sendUrgentData",
      "comment": "Send one byte of urgent data on the socket. The byte to be sent is the lowest eight bits of the data parameter. The urgent byte is sent after any preceding writes to the socket OutputStream and before any future writes to the OutputStream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - The byte of data to send"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an error sending the data."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOOBInline",
      "comment": "Enable/disable SO_OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded. If the user wishes to receive urgent data, then this option must be enabled. When enabled, urgent data is received inline with normal data. Note, only limited support is provided for handling incoming urgent data. In particular, no notification of incoming urgent data is provided and there is no capability to distinguish between normal data and urgent data unless provided by a higher level protocol.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getOOBInline()\"\u003e\u003ccode\u003egetOOBInline()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_OOBINLINE\"\u003e\u003ccode\u003eSO_OOBINLINE\u003c/code\u003e\u003c/a\u003e, \n\u003ccode\u003efalse\u003c/code\u003e to disable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOOBInline",
      "comment": "Tests if SO_OOBINLINE is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setOOBInline(boolean)\"\u003e\u003ccode\u003esetOOBInline(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether or not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_OOBINLINE\"\u003e\u003ccode\u003eSO_OOBINLINE\u003c/code\u003e\u003c/a\u003e is enabled."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSoTimeout",
      "comment": "Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds. With this option set to a positive timeout value, a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires, a java.net.SocketTimeoutException is raised, though the Socket is still valid. A timeout of zero is interpreted as an infinite timeout. The option must be enabled prior to entering the blocking operation to have effect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getSoTimeout()\"\u003e\u003ccode\u003egetSoTimeout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the specified timeout, in milliseconds."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etimeout\u003c/code\u003e is negative"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSoTimeout",
      "comment": "Returns setting for SO_TIMEOUT. 0 returns implies that the option is disabled (i.e., timeout of infinity).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSoTimeout(int)\"\u003e\u003ccode\u003esetSoTimeout(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "the setting for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_TIMEOUT\"\u003e\u003ccode\u003eSO_TIMEOUT\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSendBufferSize",
      "comment": "Sets the SO_SNDBUF option to the specified value for this Socket. The SO_SNDBUF option is used by the platform\u0027s networking code as a hint for the size to set the underlying network I/O buffers. Because SO_SNDBUF is a hint, applications that want to verify what size the buffers were set to should call getSendBufferSize().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getSendBufferSize()\"\u003e\u003ccode\u003egetSendBufferSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - the size to which to set the send buffer size. This value must be greater than 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is 0 or is negative."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSendBufferSize",
      "comment": "Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSendBufferSize(int)\"\u003e\u003ccode\u003esetSendBufferSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "the value of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_SNDBUF\"\u003e\u003ccode\u003eSO_SNDBUF\u003c/code\u003e\u003c/a\u003e option for this \n\u003ccode\u003eSocket\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReceiveBufferSize",
      "comment": "Sets the SO_RCVBUF option to the specified value for this Socket. The SO_RCVBUF option is used by the platform\u0027s networking code as a hint for the size to set the underlying network I/O buffers. Increasing the receive buffer size can increase the performance of network I/O for high-volume connection, while decreasing it can help reduce the backlog of incoming data. Because SO_RCVBUF is a hint, applications that want to verify what size the buffers were set to should call getReceiveBufferSize(). The value of SO_RCVBUF is also used to set the TCP receive window that is advertised to the remote peer. Generally, the window size can be modified at any time when a socket is connected. However, if a receive window larger than 64K is required then this must be requested before the socket is connected to the remote peer. There are two cases to be aware of: For sockets accepted from a ServerSocket, this must be done by calling ServerSocket.setReceiveBufferSize(int) before the ServerSocket is bound to a local address. For client sockets, setReceiveBufferSize() must be called before connecting the socket to its remote peer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getReceiveBufferSize()\"\u003e\u003ccode\u003egetReceiveBufferSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/ServerSocket.html#setReceiveBufferSize(int)\"\u003e\u003ccode\u003eServerSocket.setReceiveBufferSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - the size to which to set the receive buffer size. This value must be greater than 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is 0 or is negative.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReceiveBufferSize",
      "comment": "Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setReceiveBufferSize(int)\"\u003e\u003ccode\u003esetReceiveBufferSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "the value of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_RCVBUF\"\u003e\u003ccode\u003eSO_RCVBUF\u003c/code\u003e\u003c/a\u003e option for this \n\u003ccode\u003eSocket\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setKeepAlive",
      "comment": "Enable/disable SO_KEEPALIVE.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getKeepAlive()\"\u003e\u003ccode\u003egetKeepAlive()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - whether or not to have socket keep alive turned on."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeepAlive",
      "comment": "Tests if SO_KEEPALIVE is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setKeepAlive(boolean)\"\u003e\u003ccode\u003esetKeepAlive(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether or not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_KEEPALIVE\"\u003e\u003ccode\u003eSO_KEEPALIVE\u003c/code\u003e\u003c/a\u003e is enabled."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "tc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTrafficClass",
      "comment": "Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket. As the underlying network implementation may ignore this value applications should consider it a hint. The tc must be in the range 0 \u003c\u003d tc \u003c\u003d 255 or an IllegalArgumentException will be thrown. Notes: For Internet Protocol v4 the value consists of an integer, the least significant 8 bits of which represent the value of the TOS octet in IP packets sent by the socket. RFC 1349 defines the TOS values as follows: IPTOS_LOWCOST (0x02) IPTOS_RELIABILITY (0x04) IPTOS_THROUGHPUT (0x08) IPTOS_LOWDELAY (0x10) The last low order bit is always ignored as this corresponds to the MBZ (must be zero) bit. Setting bits in the precedence field may result in a SocketException indicating that the operation is not permitted. As RFC 1122 section 4.2.4.2 indicates, a compliant TCP implementation should, but is not required to, let application change the TOS field during the lifetime of a connection. So whether the type-of-service field can be changed after the TCP connection has been established depends on the implementation in the underlying platform. Applications should not assume that they can change the TOS field after the connection. For Internet Protocol v6 tc is the value that would be placed into the sin6_flowinfo field of the IP header.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getTrafficClass()\"\u003e\u003ccode\u003egetTrafficClass()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#IP_TOS\"\u003e\u003ccode\u003eSocketOptions.IP_TOS\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e value for the bitset."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error setting the traffic class or type-of-service"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTrafficClass",
      "comment": "Gets traffic class or type-of-service in the IP header for packets sent from this Socket As the underlying network implementation may ignore the traffic class or type-of-service set using setTrafficClass(int) this method may return a different value than was previously set using the setTrafficClass(int) method on this Socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setTrafficClass(int)\"\u003e\u003ccode\u003esetTrafficClass(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#IP_TOS\"\u003e\u003ccode\u003eSocketOptions.IP_TOS\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error obtaining the traffic class or type-of-service value."
        ],
        "return": [
          "the traffic class or type-of-service already set"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReuseAddress",
      "comment": "Enable/disable the SO_REUSEADDR socket option. When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the TIME_WAIT state or 2MSL wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required SocketAddress if there is a connection in the timeout state involving the socket address or port. Enabling SO_REUSEADDR prior to binding the socket using bind(SocketAddress) allows the socket to be bound even though a previous connection is in a timeout state. When a Socket is created the initial setting of SO_REUSEADDR is disabled. The behaviour when SO_REUSEADDR is enabled or disabled after a socket is bound (See isBound()) is not defined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#getReuseAddress()\"\u003e\u003ccode\u003egetReuseAddress()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#bind(java.net.SocketAddress)\"\u003e\u003ccode\u003ebind(SocketAddress)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#isClosed()\"\u003e\u003ccode\u003eisClosed()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#isBound()\"\u003e\u003ccode\u003eisBound()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - whether to enable or disable the socket option"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if an error occurs enabling or disabling the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_REUSEADDR\"\u003e\u003ccode\u003eSO_REUSEADDR\u003c/code\u003e\u003c/a\u003e socket option, or the socket is closed."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReuseAddress",
      "comment": "Tests if SO_REUSEADDR is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setReuseAddress(boolean)\"\u003e\u003ccode\u003esetReuseAddress(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error."
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether or not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketOptions.html#SO_REUSEADDR\"\u003e\u003ccode\u003eSO_REUSEADDR\u003c/code\u003e\u003c/a\u003e is enabled."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Closes this socket. Any thread currently blocked in an I/O operation upon this socket will throw a SocketException. Once a socket has been closed, it is not available for further networking use (i.e. can\u0027t be reconnected or rebound). A new socket needs to be created. Closing this socket will also close the socket\u0027s InputStream and OutputStream. If this socket has an associated channel then the channel is closed as well.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#isClosed()\"\u003e\u003ccode\u003eisClosed()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when closing this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdownInput",
      "comment": "Places the input stream for this socket at \"end of stream\". Any data sent to the input stream side of the socket is acknowledged and then silently discarded. If you read from a socket input stream after invoking this method on the socket, the stream\u0027s available method will return 0, and its read methods will return -1 (end of stream).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownOutput()\"\u003e\u003ccode\u003eshutdownOutput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSoLinger(boolean,int)\"\u003e\u003ccode\u003esetSoLinger(boolean, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#isInputShutdown()\"\u003e\u003ccode\u003eisInputShutdown()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when shutting down this socket."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdownOutput",
      "comment": "Disables the output stream for this socket. For a TCP socket, any previously written data will be sent followed by TCP\u0027s normal connection termination sequence. If you write to a socket output stream after invoking shutdownOutput() on the socket, the stream will throw an IOException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownInput()\"\u003e\u003ccode\u003eshutdownInput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSoLinger(boolean,int)\"\u003e\u003ccode\u003esetSoLinger(boolean, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#isOutputShutdown()\"\u003e\u003ccode\u003eisOutputShutdown()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when shutting down this socket."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Converts this socket to a String.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this socket."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isConnected",
      "comment": "Returns the connection state of the socket. Note: Closing a socket doesn\u0027t clear its connection state, which means this method will return true for a closed socket (see isClosed()) if it was successfully connected prior to being closed.",
      "tagMap": {
        "return": [
          "true if the socket was successfully connected to a server"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBound",
      "comment": "Returns the binding state of the socket. Note: Closing a socket doesn\u0027t clear its binding state, which means this method will return true for a closed socket (see isClosed()) if it was successfully bound prior to being closed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#bind(java.net.SocketAddress)\"\u003e\u003ccode\u003ebind(java.net.SocketAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the socket was successfully bound to an address"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isClosed",
      "comment": "Returns the closed state of the socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the socket has been closed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInputShutdown",
      "comment": "Returns whether the read-half of the socket connection is closed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownInput()\"\u003e\u003ccode\u003eshutdownInput()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the input of the socket has been shutdown"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOutputShutdown",
      "comment": "Returns whether the write-half of the socket connection is closed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#shutdownOutput()\"\u003e\u003ccode\u003eshutdownOutput()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the output of the socket has been shutdown"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketImplFactory",
            "type": "Class"
          },
          "field": {
            "name": "fac"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setSocketImplFactory",
      "comment": "Sets the client socket implementation factory for the application. The factory can be specified only once. When an application creates a new client socket, the socket implementation factory\u0027s createSocketImpl method is called to create the actual socket implementation. Passing null to the method is a no-op unless the factory was already set. If there is a security manager, this method first calls the security manager\u0027s checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImplFactory.html#createSocketImpl()\"\u003e\u003ccode\u003eSocketImplFactory.createSocketImpl()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkSetFactory()\"\u003e\u003ccode\u003eSecurityManager.checkSetFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efac\u003c/code\u003e - the desired factory."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when setting the socket factory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if the factory is already defined.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckSetFactory\u003c/code\u003e method doesn\u0027t allow the operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "connectionTime"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "latency"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bandwidth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPerformancePreferences",
      "comment": "Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). Invoking this method after this socket has been connected will have no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econnectionTime\u003c/code\u003e - An \n\u003ccode\u003eint\u003c/code\u003e expressing the relative importance of a short connection time",
          "\u003ccode\u003elatency\u003c/code\u003e - An \n\u003ccode\u003eint\u003c/code\u003e expressing the relative importance of low latency",
          "\u003ccode\u003ebandwidth\u003c/code\u003e - An \n\u003ccode\u003eint\u003c/code\u003e expressing the relative importance of high bandwidth"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.Socket",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOption",
      "comment": "Sets the value of a socket option.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option",
          "\u003ccode\u003evalue\u003c/code\u003e - The value of the socket option. A value of \n\u003ccode\u003enull\u003c/code\u003e may be valid for some options."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the socket does not support the option.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is not valid for the option.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is set and if the socket option requires a security permission and if the caller does not have the required permission. \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/StandardSocketOptions.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eStandardSocketOptions\u003c/code\u003e\u003c/a\u003e do not require any security permission."
        ],
        "return": [
          "this Socket"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOption",
      "comment": "Returns the value of a socket option.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the socket option value"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The socket option"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the socket does not support the option.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs, or if the socket is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is set and if the socket option requires a security permission and if the caller does not have the required permission. \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/StandardSocketOptions.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eStandardSocketOptions\u003c/code\u003e\u003c/a\u003e do not require any security permission."
        ],
        "return": [
          "The value of the socket option."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.net.SocketOption",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "supportedOptions",
      "comment": "Returns a set of the socket options supported by this socket. This method will continue to return the set of options even after the socket has been closed.",
      "tagMap": {
        "return": [
          "A set of the socket options supported by this socket. This set may be empty if the socket\u0027s SocketImpl cannot be created."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an unconnected Socket. If the application has specified a client socket implementation factory, that factory\u0027s createSocketImpl method is called to create the actual socket implementation. Otherwise a system-default socket implementation is created.",
      "tagMap": {
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.Proxy",
            "type": "Class"
          },
          "field": {
            "name": "proxy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an unconnected socket, specifying the type of proxy, if any, that should be used regardless of any other settings. If there is a security manager, its checkConnect method is called with the proxy host address and port number as its arguments. This could result in a SecurityException. Examples: Socket s \u003d new Socket(Proxy.NO_PROXY); will create a plain socket ignoring any other proxy configuration. Socket s \u003d new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(\"socks.mydom.com\", 1080))); will create a socket connecting through the specified SOCKS proxy server.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/ProxySelector.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eProxySelector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Proxy.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eProxy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eproxy\u003c/code\u003e - a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Proxy.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eProxy\u003c/code\u003e\u003c/a\u003e object specifying what kind of proxying should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the proxy is of an invalid type or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present and permission to connect to the proxy is denied."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.SocketException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketImpl",
            "type": "Class"
          },
          "field": {
            "name": "impl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates an unconnected Socket with a user-specified SocketImpl.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eimpl\u003c/code\u003e - an instance of a \n\u003cb\u003eSocketImpl\u003c/b\u003e the subclass wishes to use on the Socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketException.html\" title\u003d\"class in java.net\"\u003eSocketException\u003c/a\u003e\u003c/code\u003e - if there is an error in the underlying protocol, such as a TCP error.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eimpl\u003c/code\u003e is non-null and a security manager is set and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow \n\u003ccode\u003eNetPermission(\"setSocketImpl\")\u003c/code\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.UnknownHostException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a stream socket and connects it to the specified port number on the named host. If the specified host is null it is the equivalent of specifying the address as InetAddress.getByName(null). In other words, it is equivalent to specifying an address of the loopback interface. If the application has specified a client socket implementation factory, that factory\u0027s createSocketImpl method is called to create the actual socket implementation. Otherwise a system-default socket implementation is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSocketImplFactory(java.net.SocketImplFactory)\"\u003e\u003ccode\u003esetSocketImplFactory(java.net.SocketImplFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eSocketImpl\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImplFactory.html#createSocketImpl()\"\u003e\u003ccode\u003eSocketImplFactory.createSocketImpl()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the host name, or \n\u003ccode\u003enull\u003c/code\u003e for the loopback address.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/UnknownHostException.html\" title\u003d\"class in java.net\"\u003eUnknownHostException\u003c/a\u003e\u003c/code\u003e - if the IP address of the host could not be determined.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a stream socket and connects it to the specified port number at the specified IP address. If the application has specified a client socket implementation factory, that factory\u0027s createSocketImpl method is called to create the actual socket implementation. Otherwise a system-default socket implementation is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSocketImplFactory(java.net.SocketImplFactory)\"\u003e\u003ccode\u003esetSocketImplFactory(java.net.SocketImplFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eSocketImpl\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImplFactory.html#createSocketImpl()\"\u003e\u003ccode\u003eSocketImplFactory.createSocketImpl()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the IP address.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaddress\u003c/code\u003e is null."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "localAddr"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "localPort"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a socket and connects it to the specified remote host on the specified remote port. The Socket will also bind() to the local address and port supplied. If the specified host is null it is the equivalent of specifying the address as InetAddress.getByName(null). In other words, it is equivalent to specifying an address of the loopback interface. A local port number of zero will let the system pick up a free port in the bind operation. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the name of the remote host, or \n\u003ccode\u003enull\u003c/code\u003e for the loopback address.",
          "\u003ccode\u003eport\u003c/code\u003e - the remote port",
          "\u003ccode\u003elocalAddr\u003c/code\u003e - the local address the socket is bound to, or \n\u003ccode\u003enull\u003c/code\u003e for the \n\u003ccode\u003eanyLocal\u003c/code\u003e address.",
          "\u003ccode\u003elocalPort\u003c/code\u003e - the local port the socket is bound to, or \n\u003ccode\u003ezero\u003c/code\u003e for a system selected free port."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the connection to the destination, or if its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the bind to the local port.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "localAddr"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "localPort"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a socket and connects it to the specified remote address on the specified remote port. The Socket will also bind() to the local address and port supplied. If the specified local address is null it is the equivalent of specifying the address as the AnyLocal address (see InetAddress.isAnyLocalAddress()). A local port number of zero will let the system pick up a free port in the bind operation. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the remote address",
          "\u003ccode\u003eport\u003c/code\u003e - the remote port",
          "\u003ccode\u003elocalAddr\u003c/code\u003e - the local address the socket is bound to, or \n\u003ccode\u003enull\u003c/code\u003e for the \n\u003ccode\u003eanyLocal\u003c/code\u003e address.",
          "\u003ccode\u003elocalPort\u003c/code\u003e - the local port the socket is bound to or \n\u003ccode\u003ezero\u003c/code\u003e for a system selected free port."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the connection to the destination, or if its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the bind to the local port.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaddress\u003c/code\u003e is null."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "stream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a stream socket and connects it to the specified port number on the named host. If the specified host is null it is the equivalent of specifying the address as InetAddress.getByName(null). In other words, it is equivalent to specifying an address of the loopback interface. If the stream argument is true, this creates a stream socket. If the stream argument is false, it creates a datagram socket. If the application has specified a client socket implementation factory, that factory\u0027s createSocketImpl method is called to create the actual socket implementation. Otherwise a system-default socket implementation is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. If a UDP socket is used, TCP/IP related socket options will not apply.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSocketImplFactory(java.net.SocketImplFactory)\"\u003e\u003ccode\u003esetSocketImplFactory(java.net.SocketImplFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eSocketImpl\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImplFactory.html#createSocketImpl()\"\u003e\u003ccode\u003eSocketImplFactory.createSocketImpl()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the host name, or \n\u003ccode\u003enull\u003c/code\u003e for the loopback address.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number.",
          "\u003ccode\u003estream\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e indicating whether this is a stream socket or a datagram socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "stream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a socket and connects it to the specified port number at the specified IP address. If the stream argument is true, this creates a stream socket. If the stream argument is false, it creates a datagram socket. If the application has specified a client socket implementation factory, that factory\u0027s createSocketImpl method is called to create the actual socket implementation. Otherwise a system-default socket implementation is created. If there is a security manager, its checkConnect method is called with host.getHostAddress() and port as its arguments. This could result in a SecurityException. If UDP socket is used, TCP/IP related socket options will not apply.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSocketImplFactory(java.net.SocketImplFactory)\"\u003e\u003ccode\u003esetSocketImplFactory(java.net.SocketImplFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eSocketImpl\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImplFactory.html#createSocketImpl()\"\u003e\u003ccode\u003eSocketImplFactory.createSocketImpl()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkConnect(java.lang.String,int)\"\u003e\u003ccode\u003eSecurityManager.checkConnect(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the IP address.",
          "\u003ccode\u003eport\u003c/code\u003e - the port number.",
          "\u003ccode\u003estream\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, create a stream socket; otherwise, create a datagram socket."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckConnect\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ehost\u003c/code\u003e is null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.Socket",
  "comment": "This class implements client sockets (also called just \"sockets\"). A socket is an endpoint for communication between two machines. \n\u003cp\u003e The actual work of the socket is performed by an instance of the \u003ccode\u003eSocketImpl\u003c/code\u003e class. An application, by changing the socket factory that creates the socket implementation, can configure itself to create sockets appropriate to the local firewall. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eSocket\u003c/code\u003e class defines convenience methods to set and get several socket options. This class also defines the \u003ca href\u003d\"#setOption(java.net.SocketOption,T)\"\u003e\u003ccode\u003esetOption\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getOption(java.net.SocketOption)\"\u003e\u003ccode\u003egetOption\u003c/code\u003e\u003c/a\u003e methods to set and query socket options. A \u003ccode\u003eSocket\u003c/code\u003e support the following options: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption style\u003d\"display:none\"\u003e\n   Socket options\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\"\u003eOption Name\u003c/th\u003e \n    \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e \n   \u003c/tr\u003e \n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_SNDBUF\"\u003e\u003ccode\u003eSO_SNDBUF\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The size of the socket send buffer \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_RCVBUF\"\u003e\u003ccode\u003eSO_RCVBUF\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e The size of the socket receive buffer \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_KEEPALIVE\"\u003e\u003ccode\u003eSO_KEEPALIVE\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Keep connection alive \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_REUSEADDR\"\u003e\u003ccode\u003eSO_REUSEADDR\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Re-use address \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#SO_LINGER\"\u003e\u003ccode\u003eSO_LINGER\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Linger on close if data is present (when configured in blocking mode only) \u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e \u003ca href\u003d\"StandardSocketOptions.html#TCP_NODELAY\"\u003e\u003ccode\u003eTCP_NODELAY\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e \n    \u003ctd\u003e Disable the Nagle algorithm \u003c/td\u003e \n   \u003c/tr\u003e \n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e Additional (implementation specific) options may also be supported.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/Socket.html#setSocketImplFactory(java.net.SocketImplFactory)\"\u003e\u003ccode\u003esetSocketImplFactory(java.net.SocketImplFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/SocketImpl.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eSocketImpl\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/SocketChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eSocketChannel\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}