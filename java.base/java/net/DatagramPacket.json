{
  "packageName": "java.net",
  "simpleName": "DatagramPacket",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAddress",
      "comment": "Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received, or null if not set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetAddress\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#setAddress(java.net.InetAddress)\"\u003e\u003ccode\u003esetAddress(java.net.InetAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the IP address of the machine to which this datagram is being sent or from which the datagram was received."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPort",
      "comment": "Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received, or 0 if not set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#setPort(int)\"\u003e\u003ccode\u003esetPort(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the port number on the remote host to which this datagram is being sent or from which the datagram was received."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getData",
      "comment": "Returns the data buffer. The data received or the data to be sent starts from the offset in the buffer, and runs for length long.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#setData(byte%5B%5D,int,int)\"\u003e\u003ccode\u003esetData(byte[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the buffer used to receive or send data"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffset",
      "comment": "Returns the offset of the data to be sent or the offset of the data received.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the offset of the data to be sent or the offset of the data received."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLength",
      "comment": "Returns the length of the data to be sent or the length of the data received.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#setLength(int)\"\u003e\u003ccode\u003esetLength(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the length of the data to be sent or the length of the data received."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setData",
      "comment": "Set the data buffer for this packet. This sets the data, length and offset of the packet.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getData()\"\u003e\u003ccode\u003egetData()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getOffset()\"\u003e\u003ccode\u003egetOffset()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - the buffer to set for this packet",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the data",
          "\u003ccode\u003elength\u003c/code\u003e - the length of the data and/or the length of the buffer used to receive data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the length or offset is negative, or if the length plus the offset is greater than the length of the packet\u0027s given buffer."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "iaddr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAddress",
      "comment": "Sets the IP address of the machine to which this datagram is being sent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getAddress()\"\u003e\u003ccode\u003egetAddress()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiaddr\u003c/code\u003e - the \n\u003ccode\u003eInetAddress\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "iport",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPort",
      "comment": "Sets the port number on the remote host to which this datagram is being sent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getPort()\"\u003e\u003ccode\u003egetPort()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiport\u003c/code\u003e - the port number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port is out of range"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSocketAddress",
      "comment": "Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getSocketAddress()\"\u003e\u003ccode\u003egetSocketAddress()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the \n\u003ccode\u003eSocketAddress\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if address is null or is a SocketAddress subclass not supported."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.SocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSocketAddress",
      "comment": "Returns the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#setSocketAddress(java.net.SocketAddress)\"\u003e\u003ccode\u003esetSocketAddress(java.net.SocketAddress)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eSocketAddress\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setData",
      "comment": "Set the data buffer for this packet. With the offset of this DatagramPacket set to 0, and the length set to the length of buf.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getData()\"\u003e\u003ccode\u003egetData()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - the buffer to set for this packet."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLength",
      "comment": "Set the length for this packet. The length of the packet is the number of bytes from the packet\u0027s data buffer that will be sent, or the number of bytes of the packet\u0027s data buffer that will be used for receiving data. The length must be lesser or equal to the offset plus the length of the packet\u0027s buffer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/DatagramPacket.html#setData(byte%5B%5D,int,int)\"\u003e\u003ccode\u003esetData(byte[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elength\u003c/code\u003e - the length to set for this packet."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the length is negative, or if the length plus the offset is greater than the length of the packet\u0027s data buffer."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DatagramPacket for receiving packets of length length, specifying an offset into the buffer. The length argument must be less than or equal to buf.length.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - buffer for holding the incoming datagram.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset for the buffer",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes to read."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the length or offset is negative, or if the length plus the offset is greater than the length of the packet\u0027s given buffer."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DatagramPacket for receiving packets of length length. The length argument must be less than or equal to buf.length.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - buffer for holding the incoming datagram.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes to read."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the length is negative or if the length is greater than the length of the packet\u0027s given buffer."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a datagram packet for sending packets of length length with offset offset to the specified port number on the specified host. The length argument must be less than or equal to buf.length.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetAddress\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - the packet data.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the packet data offset.",
          "\u003ccode\u003elength\u003c/code\u003e - the packet data length.",
          "\u003ccode\u003eaddress\u003c/code\u003e - the destination address, or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eport\u003c/code\u003e - the destination port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the length or offset is negative, or if the length plus the offset is greater than the length of the packet\u0027s given buffer, or if the port is out of range."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a datagram packet for sending packets of length length with offset offset to the specified port number on the specified host. The length argument must be less than or equal to buf.length.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetAddress\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - the packet data.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the packet data offset.",
          "\u003ccode\u003elength\u003c/code\u003e - the packet data length.",
          "\u003ccode\u003eaddress\u003c/code\u003e - the destination socket address."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if address is null or its type is not supported, or if the length or offset is negative, or if the length plus the offset is greater than the length of the packet\u0027s given buffer."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a datagram packet for sending packets of length length to the specified port number on the specified host. The length argument must be less than or equal to buf.length.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetAddress\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - the packet data.",
          "\u003ccode\u003elength\u003c/code\u003e - the packet length.",
          "\u003ccode\u003eaddress\u003c/code\u003e - the destination address, or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eport\u003c/code\u003e - the destination port number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the length is negative, or if the length is greater than the length of the packet\u0027s given buffer, or if the port is out of range."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "buf",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a datagram packet for sending packets of length length to the specified port number on the specified host. The length argument must be less than or equal to buf.length.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetAddress\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - the packet data.",
          "\u003ccode\u003elength\u003c/code\u003e - the packet length.",
          "\u003ccode\u003eaddress\u003c/code\u003e - the destination address."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if address is null or its type is not supported, or if the length is negative, or if the length is greater than the length of the packet\u0027s given buffer, or if the port is out of range."
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.net.DatagramPacket",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.0"
    ]
  }
}