{
  "packageName": "java.net",
  "simpleName": "HttpCookie",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.net.HttpCookie",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Constructs cookies from set-cookie or set-cookie2 header string. RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line may contain more than one cookie definitions, so this is a static utility method instead of another constructor.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheader\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the set-cookie header. The header should start with \"set-cookie\", or \"set-cookie2\" token; or it should have no leading token at all."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if header string violates the cookie specification\u0027s syntax or the cookie name contains illegal characters.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the header string is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a List of cookie parsed from header line string"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasExpired",
      "comment": "Reports whether this HTTP cookie has expired or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e to indicate this HTTP cookie has expired; otherwise, \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setComment",
      "comment": "Specifies a comment that describes a cookie\u0027s purpose. The comment is useful if the browser presents the cookie to the user. Comments are not supported by Netscape Version 0 cookies.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getComment()\"\u003e\u003ccode\u003egetComment()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epurpose\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the comment to display to the user"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComment",
      "comment": "Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setComment(java.lang.String)\"\u003e\u003ccode\u003esetComment(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the comment, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCommentURL",
      "comment": "Specifies a comment URL that describes a cookie\u0027s purpose. The comment URL is useful if the browser presents the cookie to the user. Comment URL is RFC 2965 only.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getCommentURL()\"\u003e\u003ccode\u003egetCommentURL()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epurpose\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the comment URL to display to the user"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCommentURL",
      "comment": "Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setCommentURL(java.lang.String)\"\u003e\u003ccode\u003esetCommentURL(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the comment URL, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDiscard",
      "comment": "Specify whether user agent should discard the cookie unconditionally. This is RFC 2965 only attribute.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getDiscard()\"\u003e\u003ccode\u003egetDiscard()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ediscard\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e indicates to discard cookie unconditionally"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDiscard",
      "comment": "Returns the discard attribute of the cookie",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setDiscard(boolean)\"\u003e\u003ccode\u003esetDiscard(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eboolean\u003c/code\u003e to represent this cookie\u0027s discard attribute"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPortlist",
      "comment": "Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getPortlist()\"\u003e\u003ccode\u003egetPortlist()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eports\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specify the port list, which is comma separated series of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPortlist",
      "comment": "Returns the port list attribute of the cookie",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setPortlist(java.lang.String)\"\u003e\u003ccode\u003esetPortlist(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e contains the port list or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDomain",
      "comment": "Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getDomain()\"\u003e\u003ccode\u003egetDomain()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the domain name within which this cookie is visible; form is according to RFC 2965"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDomain",
      "comment": "Returns the domain name set for this cookie. The form of the domain name is set by RFC 2965.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setDomain(java.lang.String)\"\u003e\u003ccode\u003esetDomain(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the domain name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaxAge",
      "comment": "Sets the maximum age of the cookie in seconds. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie\u0027s current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getMaxAge()\"\u003e\u003ccode\u003egetMaxAge()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexpiry\u003c/code\u003e - an integer specifying the maximum age of the cookie in seconds; if zero, the cookie should be discarded immediately; otherwise, the cookie\u0027s max age is unspecified."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxAge",
      "comment": "Returns the maximum age of the cookie, specified in seconds. By default, -1 indicating the cookie will persist until browser shutdown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setMaxAge(long)\"\u003e\u003ccode\u003esetMaxAge(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an integer specifying the maximum age of the cookie in seconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPath",
      "comment": "Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory\u0027s subdirectories. A cookie\u0027s path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getPath()\"\u003e\u003ccode\u003egetPath()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying a path"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPath",
      "comment": "Returns the path on the server to which the browser returns this cookie. The cookie is visible to all subpaths on the server.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setPath(java.lang.String)\"\u003e\u003ccode\u003esetPath(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e specifying a path that contains a servlet name, for example, \n\u003ci\u003e/catalog\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSecure",
      "comment": "Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL. The default value is false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getSecure()\"\u003e\u003ccode\u003egetSecure()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, the cookie can only be sent over a secure protocol like HTTPS. If \n\u003ccode\u003efalse\u003c/code\u003e, it can be sent over any protocol."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSecure",
      "comment": "Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setSecure(boolean)\"\u003e\u003ccode\u003esetSecure(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the cookie can be sent over any standard protocol; otherwise, \n\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of the cookie. The name cannot be changed after creation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e specifying the cookie\u0027s name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValue",
      "comment": "Assigns a new value to a cookie after the cookie is created. If you use a binary value, you may want to use BASE64 encoding. With Version 0 cookies, values should not contain white space, brackets, parentheses, equals signs, commas, double quotes, slashes, question marks, at signs, colons, and semicolons. Empty values may not behave the same way on all browsers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getValue()\"\u003e\u003ccode\u003egetValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Returns the value of the cookie.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setValue(java.lang.String)\"\u003e\u003ccode\u003esetValue(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the cookie\u0027s present value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVersion",
      "comment": "Returns the version of the protocol this cookie complies with. Version 1 complies with RFC 2965/2109, and version 0 complies with the original cookie specification drafted by Netscape. Cookies provided by a browser use and identify the browser\u0027s cookie version.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setVersion(int)\"\u003e\u003ccode\u003esetVersion(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "0 if the cookie complies with the original Netscape specification; 1 if the cookie complies with RFC 2965/2109"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVersion",
      "comment": "Sets the version of the cookie protocol this cookie complies with. Version 0 complies with the original Netscape cookie specification. Version 1 complies with RFC 2965/2109.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#getVersion()\"\u003e\u003ccode\u003egetVersion()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - 0 if the cookie should comply with the original Netscape specification; 1 if the cookie should comply with RFC 2965/2109"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ev\u003c/code\u003e is neither 0 nor 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHttpOnly",
      "comment": "Returns true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setHttpOnly(boolean)\"\u003e\u003ccode\u003esetHttpOnly(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this cookie should be considered HTTPOnly"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHttpOnly",
      "comment": "Indicates whether the cookie should be considered HTTP Only. If set to true it means the cookie should not be accessible to scripting engines like javascript.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#isHttpOnly()\"\u003e\u003ccode\u003eisHttpOnly()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehttpOnly\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e make the cookie HTTP only, i.e. only visible as part of an HTTP request."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "domainMatches",
      "comment": "The utility method to check whether a host name is in a domain or not. This concept is described in the cookie specification. To understand the concept, some terminologies need to be defined first: effective host name \u003d hostname if host name contains dot or \u003d hostname.local if not Host A\u0027s name domain-matches host B\u0027s if: their host name strings string-compare equal; or A is a HDN string and has the form NB, where N is a non-empty name string, B has the form .B\u0027, and B\u0027 is a HDN string. (So, x.y.com domain-matches .Y.com but not Y.com.) A host isn\u0027t in a domain (RFC 2965 sec. 3.3.2) if: The value for the Domain attribute contains no embedded dots, and the value is not .local. The effective host name that derives from the request-host does not domain-match the Domain attribute. The request-host is a HDN (not IP address) and has the form HD, where D is the value of the Domain attribute, and H is a string that contains one or more dots. Examples: A Set-Cookie2 from request-host y.x.foo.com for Domain\u003d.foo.com would be rejected, because H is y.x and contains a dot. A Set-Cookie2 from request-host x.foo.com for Domain\u003d.foo.com would be accepted. A Set-Cookie2 with Domain\u003d.com or Domain\u003d.com., will always be rejected, because there is no embedded dot. A Set-Cookie2 from request-host example for Domain\u003d.local will be accepted, because the effective host name for the request- host is example.local, and example.local domain-matches .local.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - the domain name to check host name with",
          "\u003ccode\u003ehost\u003c/code\u003e - the host name in question"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if they domain-matches; \n\u003ccode\u003efalse\u003c/code\u003e if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading \"Cookie:\" token.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string form of the cookie. The string has the defined format"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Test the equality of two HTTP cookies. The result is true only if two cookies come from same domain (case-insensitive), have same name (case-insensitive), and have same path (case-sensitive).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if two HTTP cookies equal to each other; otherwise, \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code of this HTTP cookie. The result is the sum of hash code value of three significant components of this cookie: name, domain, and path. That is, the hash code is the value of the expression: getName().toLowerCase().hashCode() + getDomain().toLowerCase().hashCode() + getPath().hashCode()",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this HTTP cookie\u0027s hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Create and return a copy of this object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this HTTP cookie"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a $ character. The cookie\u0027s name cannot be changed after creation. The value can be anything the server chooses to send. Its value is probably of interest only to the server. The cookie\u0027s value can be changed after creation with the setValue method. By default, cookies are created according to the RFC 2965 cookie specification. The version can be changed with the setVersion method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setValue(java.lang.String)\"\u003e\u003ccode\u003esetValue(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/HttpCookie.html#setVersion(int)\"\u003e\u003ccode\u003esetVersion(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the name of the cookie",
          "\u003ccode\u003evalue\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the value of the cookie"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the cookie name contains illegal characters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.net.HttpCookie",
  "comment": "An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent. Cookie is widely adopted to create stateful sessions. \n\u003cp\u003e There are 3 HTTP cookie specifications: \u003c/p\u003e\n\u003cblockquote\u003e\n  Netscape draft\n \u003cbr\u003e RFC 2109 - \n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2109.txt\"\u003e \u003ci\u003ehttp://www.ietf.org/rfc/rfc2109.txt\u003c/i\u003e\u003c/a\u003e\n \u003cbr\u003e RFC 2965 - \n \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2965.txt\"\u003e \u003ci\u003ehttp://www.ietf.org/rfc/rfc2965.txt\u003c/i\u003e\u003c/a\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e HttpCookie class can accept all these 3 forms of syntax.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}