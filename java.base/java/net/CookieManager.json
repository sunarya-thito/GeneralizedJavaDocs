{
  "packageName": "java.net",
  "simpleName": "CookieManager",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.net.CookieHandler",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.CookiePolicy",
            "type": "Class"
          },
          "field": {
            "name": "cookiePolicy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCookiePolicy",
      "comment": "To set the cookie policy of this cookie manager. A instance of CookieManager will have cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always can call this method to set another cookie policy.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecookiePolicy\u003c/code\u003e - the cookie policy. Can be \n\u003ccode\u003enull\u003c/code\u003e, which has no effects on current cookie policy."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.CookieStore",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCookieStore",
      "comment": "To retrieve current cookie store.",
      "tagMap": {
        "return": [
          "the cookie store currently used by cookie manager."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.util.List",
                "parameters": [
                  {
                    "name": "java.lang.String",
                    "type": "Class"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "requestHeaders"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Description copied from class: CookieHandler",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookieHandler.html#put(java.net.URI,java.util.Map)\"\u003e\u003ccode\u003eCookieHandler.put(URI, Map)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookieHandler.html#get(java.net.URI,java.util.Map)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookieHandler.html\" title\u003d\"class in java.net\"\u003eCookieHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - a \n\u003ccode\u003eURI\u003c/code\u003e representing the intended use for the cookies",
          "\u003ccode\u003erequestHeaders\u003c/code\u003e - - a Map from request header field names to lists of field values representing the current request headers"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "an immutable map from state management headers, with field names \"Cookie\" or \"Cookie2\" to a list of cookies containing state information"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.util.List",
                "parameters": [
                  {
                    "name": "java.lang.String",
                    "type": "Class"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "responseHeaders"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Description copied from class: CookieHandler",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookieHandler.html#get(java.net.URI,java.util.Map)\"\u003e\u003ccode\u003eCookieHandler.get(URI, Map)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookieHandler.html#put(java.net.URI,java.util.Map)\"\u003eput\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookieHandler.html\" title\u003d\"class in java.net\"\u003eCookieHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - a \n\u003ccode\u003eURI\u003c/code\u003e where the cookies come from",
          "\u003ccode\u003eresponseHeaders\u003c/code\u003e - an immutable map from field names to lists of field values representing the response header fields returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new cookie manager. This constructor will create new cookie manager with default cookie store and accept policy. The effect is same as CookieManager(null, null).",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.CookieStore",
            "type": "Class"
          },
          "field": {
            "name": "store"
          }
        },
        {
          "type": {
            "name": "java.net.CookiePolicy",
            "type": "Class"
          },
          "field": {
            "name": "cookiePolicy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new cookie manager with specified cookie store and cookie policy.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estore\u003c/code\u003e - a \n\u003ccode\u003eCookieStore\u003c/code\u003e to be used by cookie manager. if \n\u003ccode\u003enull\u003c/code\u003e, cookie manager will use a default one, which is an in-memory CookieStore implementation.",
          "\u003ccode\u003ecookiePolicy\u003c/code\u003e - a \n\u003ccode\u003eCookiePolicy\u003c/code\u003e instance to be used by cookie manager as policy callback. if \n\u003ccode\u003enull\u003c/code\u003e, ACCEPT_ORIGINAL_SERVER will be used."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.net.CookieManager",
  "comment": "CookieManager provides a concrete implementation of \n\u003ca href\u003d\"CookieHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eCookieHandler\u003c/code\u003e\u003c/a\u003e, which separates the storage of cookies from the policy surrounding accepting and rejecting cookies. A CookieManager is initialized with a \n\u003ca href\u003d\"CookieStore.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eCookieStore\u003c/code\u003e\u003c/a\u003e which manages storage, and a \n\u003ca href\u003d\"CookiePolicy.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eCookiePolicy\u003c/code\u003e\u003c/a\u003e object, which makes policy decisions on cookie acceptance/rejection. \n\u003cp\u003e The HTTP cookie management in java.net package looks like: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n                  use\n CookieHandler \u0026lt;------- HttpURLConnection\n       ^\n       | impl\n       |         use\n CookieManager -------\u0026gt; CookiePolicy\n             |   use\n             |--------\u0026gt; HttpCookie\n             |              ^\n             |              | use\n             |   use        |\n             |--------\u0026gt; CookieStore\n                            ^\n                            | impl\n                            |\n                  Internal in-memory implementation\n \u003c/code\u003e\u003c/pre\u003e \n \u003cul\u003e \n  \u003cli\u003e CookieHandler is at the core of cookie management. User can call CookieHandler.setDefault to set a concrete CookieHandler implementation to be used. \u003c/li\u003e \n  \u003cli\u003e CookiePolicy.shouldAccept will be called by CookieManager.put to see whether or not one cookie should be accepted and put into cookie store. User can use any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation and tell CookieManager to use it. \u003c/li\u003e \n  \u003cli\u003e CookieStore is the place where any accepted HTTP cookie is stored in. If not specified when created, a CookieManager instance will use an internal in-memory implementation. Or user can implements one and tell CookieManager to use it. \u003c/li\u003e \n  \u003cli\u003e Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI) are used by CookieManager. Others are for completeness and might be needed by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieStore. \u003c/li\u003e \n \u003c/ul\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThere\u0027re various ways user can hook up his own HTTP cookie management behavior, e.g. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cul\u003e \n  \u003cli\u003eUse CookieHandler.setDefault to set a brand new \u003ca href\u003d\"CookieHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eCookieHandler\u003c/code\u003e\u003c/a\u003e implementation \u003c/li\u003e\n  \u003cli\u003eLet CookieManager be the default \u003ca href\u003d\"CookieHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eCookieHandler\u003c/code\u003e\u003c/a\u003e implementation, but implement user\u0027s own \u003ca href\u003d\"CookieStore.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eCookieStore\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"CookiePolicy.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eCookiePolicy\u003c/code\u003e\u003c/a\u003e and tell default CookieManager to use them: \n   \u003cblockquote\u003e\n    \u003cpre\u003e       // this should be done at the beginning of an HTTP session\n       CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));\n     \u003c/pre\u003e\n   \u003c/blockquote\u003e \u003c/li\u003e\n  \u003cli\u003eLet CookieManager be the default \u003ca href\u003d\"CookieHandler.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eCookieHandler\u003c/code\u003e\u003c/a\u003e implementation, but use customized \u003ca href\u003d\"CookiePolicy.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eCookiePolicy\u003c/code\u003e\u003c/a\u003e: \n   \u003cblockquote\u003e\n    \u003cpre\u003e       // this should be done at the beginning of an HTTP session\n       CookieHandler.setDefault(new CookieManager());\n       // this can be done at any point of an HTTP session\n       ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());\n     \u003c/pre\u003e\n   \u003c/blockquote\u003e \u003c/li\u003e\n \u003c/ul\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe implementation conforms to \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2965.txt\"\u003eRFC 2965\u003c/a\u003e, section 3.3.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/CookiePolicy.html\" title\u003d\"interface in java.net\"\u003e\u003ccode\u003eCookiePolicy\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}