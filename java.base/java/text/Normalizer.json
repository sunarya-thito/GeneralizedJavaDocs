{
  "packageName": "java.text",
  "simpleName": "Normalizer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "java.text.Normalizer$Form",
            "type": "Class"
          },
          "field": {
            "name": "form"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "normalize",
      "comment": "Normalize a sequence of char values. The sequence will be normalized according to the specified normalization from.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The sequence of char values to normalize.",
          "\u003ccode\u003eform\u003c/code\u003e - The normalization form; one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFC\"\u003e\u003ccode\u003eNormalizer.Form.NFC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFD\"\u003e\u003ccode\u003eNormalizer.Form.NFD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFKC\"\u003e\u003ccode\u003eNormalizer.Form.NFKC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFKD\"\u003e\u003ccode\u003eNormalizer.Form.NFKD\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003esrc\u003c/code\u003e or \n\u003ccode\u003eform\u003c/code\u003e is null."
        ],
        "return": [
          "The normalized String"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "java.text.Normalizer$Form",
            "type": "Class"
          },
          "field": {
            "name": "form"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isNormalized",
      "comment": "Determines if the given sequence of char values is normalized.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The sequence of char values to be checked.",
          "\u003ccode\u003eform\u003c/code\u003e - The normalization form; one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFC\"\u003e\u003ccode\u003eNormalizer.Form.NFC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFD\"\u003e\u003ccode\u003eNormalizer.Form.NFD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFKC\"\u003e\u003ccode\u003eNormalizer.Form.NFKC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Normalizer.Form.html#NFKD\"\u003e\u003ccode\u003eNormalizer.Form.NFKD\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003esrc\u003c/code\u003e or \n\u003ccode\u003eform\u003c/code\u003e is null."
        ],
        "return": [
          "true if the sequence of char values is normalized; false otherwise."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.text.Normalizer$Form"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.text.Normalizer",
  "comment": "This class provides the method \n\u003ccode\u003enormalize\u003c/code\u003e which transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text. The \n\u003ccode\u003enormalize\u003c/code\u003e method supports the standard normalization forms described in \n\u003ca href\u003d\"http://www.unicode.org/unicode/reports/tr15/tr15-23.html\"\u003e Unicode Standard Annex #15 â€” Unicode Normalization Forms\u003c/a\u003e. \n\u003cp\u003e Characters with accents or other adornments can be encoded in several different ways in Unicode. For example, take the character A-acute. In Unicode, this can be encoded as a single character (the \"composed\" form): \u003c/p\u003e\n\u003cpre\u003e      U+00C1    LATIN CAPITAL LETTER A WITH ACUTE\u003c/pre\u003e or as two separate characters (the \"decomposed\" form): \n\u003cpre\u003e      U+0041    LATIN CAPITAL LETTER A\n      U+0301    COMBINING ACUTE ACCENT\u003c/pre\u003e To a user of your program, however, both of these sequences should be treated as the same \"user-level\" character \"A with acute accent\". When you are searching or comparing text, you must ensure that these two sequences are treated as equivalent. In addition, you must handle characters with more than one accent. Sometimes the order of a character\u0027s combining accents is significant, while in other cases accent sequences in different orders are really equivalent. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Similarly, the string \"ffi\" can be encoded as three separate letters: \u003c/p\u003e\n\u003cpre\u003e      U+0066    LATIN SMALL LETTER F\n      U+0066    LATIN SMALL LETTER F\n      U+0069    LATIN SMALL LETTER I\u003c/pre\u003e or as the single character \n\u003cpre\u003e      U+FB03    LATIN SMALL LIGATURE FFI\u003c/pre\u003e The ffi ligature is not a distinct semantic character, and strictly speaking it shouldn\u0027t be in Unicode at all, but it was included for compatibility with existing character sets that already provided it. The Unicode standard identifies such characters by giving them \"compatibility\" decompositions into the corresponding semantic characters. When sorting and searching, you will often want to use these mappings. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003enormalize\u003c/code\u003e method helps solve these problems by transforming text into the canonical composed and decomposed forms as shown in the first example above. In addition, you can have it perform compatibility decompositions so that you can treat compatibility characters the same as their equivalents. Finally, the \u003ccode\u003enormalize\u003c/code\u003e method rearranges accents into the proper canonical order, so that you do not have to worry about accent rearrangement on your own. \u003c/p\u003e\n\u003cp\u003e The W3C generally recommends to exchange texts in NFC. Note also that most legacy character encodings use only precomposed forms and often do not encode any combining marks by themselves. For conversion to such character encodings the Unicode text needs to be normalized to NFC. For more usage examples, see the Unicode Standard Annex.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}