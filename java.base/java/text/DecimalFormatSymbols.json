{
  "packageName": "java.text",
  "simpleName": "DecimalFormatSymbols",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all locales for which the getInstance methods of this class can return localized instances. The returned array represents the union of locales supported by the Java runtime and by installed DecimalFormatSymbolsProvider implementations. It must contain at least a Locale instance equal to Locale.US.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of locales for which localized \n\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e instances are available."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DecimalFormatSymbols",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Gets the DecimalFormatSymbols instance for the default locale. This method provides access to DecimalFormatSymbols instances for locales supported by the Java runtime itself as well as for those supported by installed DecimalFormatSymbolsProvider implementations. This is equivalent to calling getInstance(Locale.getDefault(Locale.Category.FORMAT)).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e instance."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DecimalFormatSymbols",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Gets the DecimalFormatSymbols instance for the specified locale. This method provides access to DecimalFormatSymbols instances for locales supported by the Java runtime itself as well as for those supported by installed DecimalFormatSymbolsProvider implementations. If the specified locale contains the Locale.UNICODE_LOCALE_EXTENSION for the numbering system, the instance is initialized with the specified numbering system if the JRE implementation supports it. For example,  NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))\n This may return a NumberFormat instance with the Thai numbering system, instead of the Latin numbering system.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "a \n\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e instance."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getZeroDigit",
      "comment": "Gets the character used for zero. Different for Arabic, etc.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the character used for zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "zeroDigit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setZeroDigit",
      "comment": "Sets the character used for zero. Different for Arabic, etc.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezeroDigit\u003c/code\u003e - the character used for zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGroupingSeparator",
      "comment": "Gets the character used for grouping separator. Different for French, etc.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the grouping separator"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "groupingSeparator",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGroupingSeparator",
      "comment": "Sets the character used for grouping separator. Different for French, etc.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003egroupingSeparator\u003c/code\u003e - the grouping separator"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDecimalSeparator",
      "comment": "Gets the character used for decimal sign. Different for French, etc.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the character used for decimal sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "decimalSeparator",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDecimalSeparator",
      "comment": "Sets the character used for decimal sign. Different for French, etc.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edecimalSeparator\u003c/code\u003e - the character used for decimal sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPerMill",
      "comment": "Gets the character used for per mille sign. Different for Arabic, etc.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the character used for per mille sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "perMill",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPerMill",
      "comment": "Sets the character used for per mille sign. Different for Arabic, etc.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eperMill\u003c/code\u003e - the character used for per mille sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPercent",
      "comment": "Gets the character used for percent sign. Different for Arabic, etc.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the character used for percent sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "percent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPercent",
      "comment": "Sets the character used for percent sign. Different for Arabic, etc.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epercent\u003c/code\u003e - the character used for percent sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDigit",
      "comment": "Gets the character used for a digit in a pattern.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the character used for a digit in a pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "digit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDigit",
      "comment": "Sets the character used for a digit in a pattern.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edigit\u003c/code\u003e - the character used for a digit in a pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPatternSeparator",
      "comment": "Gets the character used to separate positive and negative subpatterns in a pattern.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the pattern separator"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "patternSeparator",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPatternSeparator",
      "comment": "Sets the character used to separate positive and negative subpatterns in a pattern.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epatternSeparator\u003c/code\u003e - the pattern separator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInfinity",
      "comment": "Gets the string used to represent infinity. Almost always left unchanged.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the string representing infinity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "infinity",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInfinity",
      "comment": "Sets the string used to represent infinity. Almost always left unchanged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einfinity\u003c/code\u003e - the string representing infinity"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNaN",
      "comment": "Gets the string used to represent \"not a number\". Almost always left unchanged.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the string representing \"not a number\""
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "NaN",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNaN",
      "comment": "Sets the string used to represent \"not a number\". Almost always left unchanged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eNaN\u003c/code\u003e - the string representing \"not a number\""
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinusSign",
      "comment": "Gets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the character representing minus sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "minusSign",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinusSign",
      "comment": "Sets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eminusSign\u003c/code\u003e - the character representing minus sign"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrencySymbol",
      "comment": "Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the currency symbol"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "currency",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurrencySymbol",
      "comment": "Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecurrency\u003c/code\u003e - the currency symbol"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInternationalCurrencySymbol",
      "comment": "Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the currency code"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "currencyCode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInternationalCurrencySymbol",
      "comment": "Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols. If the currency code is valid (as defined by Currency.getInstance), this also sets the currency attribute to the corresponding Currency instance and the currency symbol attribute to the currency\u0027s symbol in the DecimalFormatSymbols\u0027 locale. If the currency code is not valid, then the currency attribute is set to null and the currency symbol attribute is not modified.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setCurrency(java.util.Currency)\"\u003e\u003ccode\u003esetCurrency(java.util.Currency)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setCurrencySymbol(java.lang.String)\"\u003e\u003ccode\u003esetCurrencySymbol(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecurrencyCode\u003c/code\u003e - the currency code"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Currency",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrency",
      "comment": "Gets the currency of these DecimalFormatSymbols. May be null if the currency symbol attribute was previously set to a value that\u0027s not a valid ISO 4217 currency code.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the currency used, or null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Currency",
            "type": "Class"
          },
          "name": "currency",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurrency",
      "comment": "Sets the currency of these DecimalFormatSymbols. This also sets the currency symbol attribute to the currency\u0027s symbol in the DecimalFormatSymbols\u0027 locale, and the international currency symbol attribute to the currency\u0027s ISO 4217 currency code.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setCurrencySymbol(java.lang.String)\"\u003e\u003ccode\u003esetCurrencySymbol(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setInternationalCurrencySymbol(java.lang.String)\"\u003e\u003ccode\u003esetInternationalCurrencySymbol(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecurrency\u003c/code\u003e - the new currency to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecurrency\u003c/code\u003e is null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonetaryDecimalSeparator",
      "comment": "Returns the monetary decimal separator.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the monetary decimal separator"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "sep",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMonetaryDecimalSeparator",
      "comment": "Sets the monetary decimal separator.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esep\u003c/code\u003e - the monetary decimal separator"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExponentSeparator",
      "comment": "Returns the string used to separate the mantissa from the exponent. Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setExponentSeparator(java.lang.String)\"\u003e\u003ccode\u003esetExponentSeparator(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the exponent separator string"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "exp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExponentSeparator",
      "comment": "Sets the string used to separate the mantissa from the exponent. Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#getExponentSeparator()\"\u003e\u003ccode\u003egetExponentSeparator()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexp\u003c/code\u003e - the exponent separator string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eexp\u003c/code\u003e is null"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonetaryGroupingSeparator",
      "comment": "Gets the character used for grouping separator for currencies. May be different from grouping separator in some locales, e.g, German in Austria.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the monetary grouping separator"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "monetaryGroupingSeparator",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMonetaryGroupingSeparator",
      "comment": "Sets the character used for grouping separator for currencies. Invocation of this method will not affect the normal grouping separator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setGroupingSeparator(char)\"\u003e\u003ccode\u003esetGroupingSeparator(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emonetaryGroupingSeparator\u003c/code\u003e - the monetary grouping separator"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Standard override.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Override equals.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Override hashCode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a DecimalFormatSymbols object for the default FORMAT locale. This constructor can only construct instances for the locales supported by the Java runtime environment, not for those supported by installed DecimalFormatSymbolsProvider implementations. For full locale coverage, use the getInstance method. This is equivalent to calling DecimalFormatSymbols(Locale.getDefault(Locale.Category.FORMAT)).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a DecimalFormatSymbols object for the given locale. This constructor can only construct instances for the locales supported by the Java runtime environment, not for those supported by installed DecimalFormatSymbolsProvider implementations. For full locale coverage, use the getInstance method. If the specified locale contains the Locale.UNICODE_LOCALE_EXTENSION for the numbering system, the instance is initialized with the specified numbering system if the JRE implementation supports it. For example,  NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))\n This may return a NumberFormat instance with the Thai numbering system, instead of the Latin numbering system.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.text.DecimalFormatSymbols",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.text.DecimalFormatSymbols\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}