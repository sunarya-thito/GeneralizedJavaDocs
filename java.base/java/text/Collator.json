{
  "packageName": "java.text",
  "simpleName": "Collator",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PRIMARY",
      "comment": "Collator strength value. When set, only PRIMARY differences are considered significant during comparison. The assignment of strengths to language features is locale dependent. A common example is for different base letters (\"a\" vs \"b\") to be considered a PRIMARY difference.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setStrength(int)\"\u003e\u003ccode\u003esetStrength(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getStrength()\"\u003e\u003ccode\u003egetStrength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.PRIMARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SECONDARY",
      "comment": "Collator strength value. When set, only SECONDARY and above differences are considered significant during comparison. The assignment of strengths to language features is locale dependent. A common example is for different accented forms of the same base letter (\"a\" vs \"Ã¤\") to be considered a SECONDARY difference.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setStrength(int)\"\u003e\u003ccode\u003esetStrength(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getStrength()\"\u003e\u003ccode\u003egetStrength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.SECONDARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TERTIARY",
      "comment": "Collator strength value. When set, only TERTIARY and above differences are considered significant during comparison. The assignment of strengths to language features is locale dependent. A common example is for case differences (\"a\" vs \"A\") to be considered a TERTIARY difference.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setStrength(int)\"\u003e\u003ccode\u003esetStrength(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getStrength()\"\u003e\u003ccode\u003egetStrength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.TERTIARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IDENTICAL",
      "comment": "Collator strength value. When set, all differences are considered significant during comparison. The assignment of strengths to language features is locale dependent. A common example is for control characters (\"\\u0001\" vs \"\\u0002\") to be considered equal at the PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL level. Additionally, differences between pre-composed accents such as \"\\u00C0\" (A-grave) and combining accents such as \"A\\u0300\" (A, combining-grave) will be considered significant at the IDENTICAL level if decomposition is set to NO_DECOMPOSITION.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.IDENTICAL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NO_DECOMPOSITION",
      "comment": "Decomposition mode value. With NO_DECOMPOSITION set, accented characters will not be decomposed for collation. This is the default setting and provides the fastest collation but will only produce correct results for languages that do not use accents.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getDecomposition()\"\u003e\u003ccode\u003egetDecomposition()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setDecomposition(int)\"\u003e\u003ccode\u003esetDecomposition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.NO_DECOMPOSITION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CANONICAL_DECOMPOSITION",
      "comment": "Decomposition mode value. With CANONICAL_DECOMPOSITION set, characters that are canonical variants according to Unicode standard will be decomposed for collation. This should be used to get correct collation of accented characters. CANONICAL_DECOMPOSITION corresponds to Normalization Form D as described in Unicode Technical Report #15.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getDecomposition()\"\u003e\u003ccode\u003egetDecomposition()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setDecomposition(int)\"\u003e\u003ccode\u003esetDecomposition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.CANONICAL_DECOMPOSITION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FULL_DECOMPOSITION",
      "comment": "Decomposition mode value. With FULL_DECOMPOSITION set, both Unicode canonical variants and Unicode compatibility variants will be decomposed for collation. This causes not only accented characters to be collated, but also characters that have special formats to be collated with their norminal form. For example, the half-width and full-width ASCII and Katakana characters are then collated together. FULL_DECOMPOSITION is the most complete and therefore the slowest decomposition mode. FULL_DECOMPOSITION corresponds to Normalization Form KD as described in Unicode Technical Report #15.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getDecomposition()\"\u003e\u003ccode\u003egetDecomposition()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setDecomposition(int)\"\u003e\u003ccode\u003esetDecomposition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Collator.FULL_DECOMPOSITION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.Collator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Gets the Collator for the current default locale. The default locale is determined by java.util.Locale.getDefault.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault()\"\u003e\u003ccode\u003eLocale.getDefault()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the Collator for the default locale.(for example, en_US)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.Collator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Gets the Collator for the desired locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edesiredLocale\u003c/code\u003e - the desired locale."
        ],
        "return": [
          "the Collator for the desired locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compare",
      "comment": "Compares the source string to the target string according to the collation rules for this Collator. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target string. See the Collator class description for an example of use. For a one time comparison, this method has the best performance. If a given String will be involved in multiple comparisons, CollationKey.compareTo has the best performance. See the Collator class description for an example using CollationKeys.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationKey.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getCollationKey(java.lang.String)\"\u003e\u003ccode\u003egetCollationKey(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source string.",
          "\u003ccode\u003etarget\u003c/code\u003e - the target string."
        ],
        "return": [
          "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compare",
      "comment": "Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. This implementation merely returns compare((String)o1, (String)o2) .",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#compare(T,T)\"\u003ecompare\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003eComparator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo1\u003c/code\u003e - the first object to be compared.",
          "\u003ccode\u003eo2\u003c/code\u003e - the second object to be compared."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - the arguments cannot be cast to Strings."
        ],
        "return": [
          "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.CollationKey",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCollationKey",
      "comment": "Transforms the String into a series of bits that can be compared bitwise to other CollationKeys. CollationKeys provide better performance than Collator.compare when Strings are involved in multiple comparisons. See the Collator class description for an example using CollationKeys.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationKey.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#compare(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003ecompare(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the string to be transformed into a collation key."
        ],
        "return": [
          "the CollationKey for the given String based on this Collator\u0027s collation rules. If the source String is null, a null CollationKey is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Convenience method for comparing the equality of two strings based on this Collator\u0027s collation rules.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#compare(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003ecompare(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source string to be compared with.",
          "\u003ccode\u003etarget\u003c/code\u003e - the target string to be compared with."
        ],
        "return": [
          "true if the strings are equal according to the collation rules. false, otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStrength",
      "comment": "Returns this Collator\u0027s strength property. The strength property determines the minimum level of difference considered significant during comparison. See the Collator class description for an example of use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setStrength(int)\"\u003e\u003ccode\u003esetStrength(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#PRIMARY\"\u003e\u003ccode\u003ePRIMARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#SECONDARY\"\u003e\u003ccode\u003eSECONDARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#TERTIARY\"\u003e\u003ccode\u003eTERTIARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#IDENTICAL\"\u003e\u003ccode\u003eIDENTICAL\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this Collator\u0027s current strength property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStrength",
      "comment": "Sets this Collator\u0027s strength property. The strength property determines the minimum level of difference considered significant during comparison. See the Collator class description for an example of use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getStrength()\"\u003e\u003ccode\u003egetStrength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#PRIMARY\"\u003e\u003ccode\u003ePRIMARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#SECONDARY\"\u003e\u003ccode\u003eSECONDARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#TERTIARY\"\u003e\u003ccode\u003eTERTIARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#IDENTICAL\"\u003e\u003ccode\u003eIDENTICAL\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewStrength\u003c/code\u003e - the new strength value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the new strength value is not one of PRIMARY, SECONDARY, TERTIARY or IDENTICAL."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDecomposition",
      "comment": "Get the decomposition mode of this Collator. Decomposition mode determines how Unicode composed characters are handled. Adjusting decomposition mode allows the user to select between faster and more complete collation behavior. The three values for decomposition mode are: NO_DECOMPOSITION, CANONICAL_DECOMPOSITION FULL_DECOMPOSITION. See the documentation for these three constants for a description of their meaning.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#setDecomposition(int)\"\u003e\u003ccode\u003esetDecomposition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#NO_DECOMPOSITION\"\u003e\u003ccode\u003eNO_DECOMPOSITION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#CANONICAL_DECOMPOSITION\"\u003e\u003ccode\u003eCANONICAL_DECOMPOSITION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#FULL_DECOMPOSITION\"\u003e\u003ccode\u003eFULL_DECOMPOSITION\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the decomposition mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDecomposition",
      "comment": "Set the decomposition mode of this Collator. See getDecomposition for a description of decomposition mode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getDecomposition()\"\u003e\u003ccode\u003egetDecomposition()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#NO_DECOMPOSITION\"\u003e\u003ccode\u003eNO_DECOMPOSITION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#CANONICAL_DECOMPOSITION\"\u003e\u003ccode\u003eCANONICAL_DECOMPOSITION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#FULL_DECOMPOSITION\"\u003e\u003ccode\u003eFULL_DECOMPOSITION\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edecompositionMode\u003c/code\u003e - the new decomposition mode."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the given value is not a valid decomposition mode."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all locales for which the getInstance methods of this class can return localized instances. The returned array represents the union of locales supported by the Java runtime and by installed CollatorProvider implementations. It must contain at least a Locale instance equal to Locale.US.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of locales for which localized \n\u003ccode\u003eCollator\u003c/code\u003e instances are available."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Overrides Cloneable",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the equality of two Collators.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003eComparator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - the Collator to be compared with this."
        ],
        "return": [
          "true if this Collator is the same as that Collator; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "hashCode",
      "comment": "Generates the hash code for this Collator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Default constructor. This constructor is protected so subclasses can get access to it. Users typically create a Collator sub-class by calling the factory method getInstance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getInstance()\"\u003e\u003ccode\u003egetInstance()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.text.Collator",
  "comment": "The \n\u003ccode\u003eCollator\u003c/code\u003e class performs locale-sensitive \n\u003ccode\u003eString\u003c/code\u003e comparison. You use this class to build searching and sorting routines for natural language text. \n\u003cp\u003e \u003ccode\u003eCollator\u003c/code\u003e is an abstract base class. Subclasses implement specific collation strategies. One subclass, \u003ccode\u003eRuleBasedCollator\u003c/code\u003e, is currently provided with the Java Platform and is applicable to a wide set of languages. Other subclasses may be created to handle more specialized needs. \u003c/p\u003e\n\u003cp\u003e Like other locale-sensitive classes, you can use the static factory method, \u003ccode\u003egetInstance\u003c/code\u003e, to obtain the appropriate \u003ccode\u003eCollator\u003c/code\u003e object for a given locale. You will only need to look at the subclasses of \u003ccode\u003eCollator\u003c/code\u003e if you need to understand the details of a particular collation strategy or if you need to modify that strategy. \u003c/p\u003e\n\u003cp\u003e The following example shows how to compare two strings using the \u003ccode\u003eCollator\u003c/code\u003e for the default locale. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n // Compare two strings in the default locale\n Collator myCollator \u003d Collator.getInstance();\n if( myCollator.compare(\"abc\", \"ABC\") \u0026lt; 0 )\n     System.out.println(\"abc is less than ABC\");\n else\n     System.out.println(\"abc is greater than or equal to ABC\");\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e You can set a \u003ccode\u003eCollator\u003c/code\u003e\u0027s \u003cem\u003estrength\u003c/em\u003e property to determine the level of difference considered significant in comparisons. Four strengths are provided: \u003ccode\u003ePRIMARY\u003c/code\u003e, \u003ccode\u003eSECONDARY\u003c/code\u003e, \u003ccode\u003eTERTIARY\u003c/code\u003e, and \u003ccode\u003eIDENTICAL\u003c/code\u003e. The exact assignment of strengths to language features is locale dependent. For example, in Czech, \"e\" and \"f\" are considered primary differences, while \"e\" and \"Ä\" are secondary differences, \"e\" and \"E\" are tertiary differences and \"e\" and \"e\" are identical. The following shows how both case and accents could be ignored for US English. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e //Get the Collator for US English and set its strength to PRIMARY\n Collator usCollator \u003d Collator.getInstance(Locale.US);\n usCollator.setStrength(Collator.PRIMARY);\n if( usCollator.compare(\"abc\", \"ABC\") \u003d\u003d 0 ) {\n     System.out.println(\"Strings are equivalent\");\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For comparing \u003ccode\u003eString\u003c/code\u003es exactly once, the \u003ccode\u003ecompare\u003c/code\u003e method provides the best performance. When sorting a list of \u003ccode\u003eString\u003c/code\u003es however, it is generally necessary to compare each \u003ccode\u003eString\u003c/code\u003e multiple times. In this case, \u003ccode\u003eCollationKey\u003c/code\u003es provide better performance. The \u003ccode\u003eCollationKey\u003c/code\u003e class converts a \u003ccode\u003eString\u003c/code\u003e to a series of bits that can be compared bitwise against other \u003ccode\u003eCollationKey\u003c/code\u003es. A \u003ccode\u003eCollationKey\u003c/code\u003e is created by a \u003ccode\u003eCollator\u003c/code\u003e object for a given \u003ccode\u003eString\u003c/code\u003e. \u003cbr\u003e \u003cstrong\u003eNote:\u003c/strong\u003e \u003ccode\u003eCollationKey\u003c/code\u003es from different \u003ccode\u003eCollator\u003c/code\u003es can not be compared. See the class description for \u003ca href\u003d\"CollationKey.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationKey\u003c/code\u003e\u003c/a\u003e for an example using \u003ccode\u003eCollationKey\u003c/code\u003es.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/RuleBasedCollator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eRuleBasedCollator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationKey.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationElementIterator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationElementIterator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}