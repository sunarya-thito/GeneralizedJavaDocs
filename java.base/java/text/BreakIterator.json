{
  "packageName": "java.text",
  "simpleName": "BreakIterator",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DONE",
      "comment": "DONE is returned by previous(), next(), next(int), preceding(int) and following(int) when either the first or last text boundary has been reached.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.BreakIterator.DONE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Create a copy of this iterator",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A copy of this"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "first",
      "comment": "Returns the first boundary. The iterator\u0027s current position is set to the first text boundary.",
      "tagMap": {
        "return": [
          "The character index of the first text boundary."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "last",
      "comment": "Returns the last boundary. The iterator\u0027s current position is set to the last text boundary.",
      "tagMap": {
        "return": [
          "The character index of the last text boundary."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "next",
      "comment": "Returns the nth boundary from the current boundary. If either the first or last text boundary has been reached, it returns BreakIterator.DONE and the current position is set to either the first or last text boundary depending on which one is reached. Otherwise, the iterator\u0027s current position is set to the new boundary. For example, if the iterator\u0027s current position is the mth text boundary and three more boundaries exist from the current boundary to the last text boundary, the next(2) call will return m + 2. The new text position is set to the (m + 2)th text boundary. A next(4) call would return BreakIterator.DONE and the last text boundary would become the new text position.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - which boundary to return. A value of 0 does nothing. Negative values move to previous boundaries and positive values move to later boundaries."
        ],
        "return": [
          "The character index of the nth boundary from the current position or \n\u003ccode\u003eBreakIterator.DONE\u003c/code\u003e if either first or last text boundary has been reached."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "next",
      "comment": "Returns the boundary following the current boundary. If the current boundary is the last text boundary, it returns BreakIterator.DONE and the iterator\u0027s current position is unchanged. Otherwise, the iterator\u0027s current position is set to the boundary following the current boundary.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#next(int)\"\u003e\u003ccode\u003enext(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The character index of the next text boundary or \n\u003ccode\u003eBreakIterator.DONE\u003c/code\u003e if the current boundary is the last text boundary. Equivalent to next(1)."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "previous",
      "comment": "Returns the boundary preceding the current boundary. If the current boundary is the first text boundary, it returns BreakIterator.DONE and the iterator\u0027s current position is unchanged. Otherwise, the iterator\u0027s current position is set to the boundary preceding the current boundary.",
      "tagMap": {
        "return": [
          "The character index of the previous text boundary or \n\u003ccode\u003eBreakIterator.DONE\u003c/code\u003e if the current boundary is the first text boundary."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "following",
      "comment": "Returns the first boundary following the specified character offset. If the specified offset is equal to the last text boundary, it returns BreakIterator.DONE and the iterator\u0027s current position is unchanged. Otherwise, the iterator\u0027s current position is set to the returned boundary. The value returned is always greater than the offset or the value BreakIterator.DONE.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the character offset to begin scanning."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified offset is less than the first text boundary or greater than the last text boundary."
        ],
        "return": [
          "The first boundary after the specified offset or \n\u003ccode\u003eBreakIterator.DONE\u003c/code\u003e if the last text boundary is passed in as the offset."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preceding",
      "comment": "Returns the last boundary preceding the specified character offset. If the specified offset is equal to the first text boundary, it returns BreakIterator.DONE and the iterator\u0027s current position is unchanged. Otherwise, the iterator\u0027s current position is set to the returned boundary. The value returned is always less than the offset or the value BreakIterator.DONE.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the character offset to begin scanning."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified offset is less than the first text boundary or greater than the last text boundary."
        ],
        "return": [
          "The last boundary before the specified offset or \n\u003ccode\u003eBreakIterator.DONE\u003c/code\u003e if the first text boundary is passed in as the offset."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBoundary",
      "comment": "Returns true if the specified character offset is a text boundary.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the character offset to check."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified offset is less than the first text boundary or greater than the last text boundary."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \"offset\" is a boundary position, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "current",
      "comment": "Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int). If any of these methods returns BreakIterator.DONE because either first or last text boundary has been reached, it returns the first or last text boundary depending on which one is reached.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#next(int)\"\u003e\u003ccode\u003enext(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#previous()\"\u003e\u003ccode\u003eprevious()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#first()\"\u003e\u003ccode\u003efirst()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#last()\"\u003e\u003ccode\u003elast()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#following(int)\"\u003e\u003ccode\u003efollowing(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html#preceding(int)\"\u003e\u003ccode\u003epreceding(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The text boundary returned from the above methods, first or last text boundary."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.CharacterIterator",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getText",
      "comment": "Get the text being scanned",
      "tagMap": {
        "return": [
          "the text being scanned"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "newText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Set a new text string to be scanned. The current scan position is reset to first().",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewText\u003c/code\u003e - new text to scan."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "newText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setText",
      "comment": "Set a new text for scanning. The current scan position is reset to first().",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewText\u003c/code\u003e - new text to scan."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getWordInstance",
      "comment": "Returns a new BreakIterator instance for word breaks for the default locale.",
      "tagMap": {
        "return": [
          "A break iterator for word breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getWordInstance",
      "comment": "Returns a new BreakIterator instance for word breaks for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "A break iterator for word breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLineInstance",
      "comment": "Returns a new BreakIterator instance for line breaks for the default locale.",
      "tagMap": {
        "return": [
          "A break iterator for line breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLineInstance",
      "comment": "Returns a new BreakIterator instance for line breaks for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "A break iterator for line breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCharacterInstance",
      "comment": "Returns a new BreakIterator instance for character breaks for the default locale.",
      "tagMap": {
        "return": [
          "A break iterator for character breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCharacterInstance",
      "comment": "Returns a new BreakIterator instance for character breaks for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "A break iterator for character breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSentenceInstance",
      "comment": "Returns a new BreakIterator instance for sentence breaks for the default locale.",
      "tagMap": {
        "return": [
          "A break iterator for sentence breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.BreakIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSentenceInstance",
      "comment": "Returns a new BreakIterator instance for sentence breaks for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "A break iterator for sentence breaks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances. The returned array represents the union of locales supported by the Java runtime and by installed BreakIteratorProvider implementations. It must contain at least a Locale instance equal to Locale.US.",
      "tagMap": {
        "return": [
          "An array of locales for which localized \n\u003ccode\u003eBreakIterator\u003c/code\u003e instances are available."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor. BreakIterator is stateless and has no default behavior.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.text.BreakIterator",
  "comment": "The \n\u003ccode\u003eBreakIterator\u003c/code\u003e class implements methods for finding the location of boundaries in text. Instances of \n\u003ccode\u003eBreakIterator\u003c/code\u003e maintain a current position and scan over text returning the index of characters where boundaries occur. Internally, \n\u003ccode\u003eBreakIterator\u003c/code\u003e scans text using a \n\u003ccode\u003eCharacterIterator\u003c/code\u003e, and is thus able to scan text held by any object implementing that protocol. A \n\u003ccode\u003eStringCharacterIterator\u003c/code\u003e is used to scan \n\u003ccode\u003eString\u003c/code\u003e objects passed to \n\u003ccode\u003esetText\u003c/code\u003e. \n\u003cp\u003e You use the factory methods provided by this class to create instances of various types of break iterators. In particular, use \u003ccode\u003egetWordInstance\u003c/code\u003e, \u003ccode\u003egetLineInstance\u003c/code\u003e, \u003ccode\u003egetSentenceInstance\u003c/code\u003e, and \u003ccode\u003egetCharacterInstance\u003c/code\u003e to create \u003ccode\u003eBreakIterator\u003c/code\u003es that perform word, line, sentence, and character boundary analysis respectively. A single \u003ccode\u003eBreakIterator\u003c/code\u003e can work only on one unit (word, line, sentence, and so on). You must use a different iterator for each unit boundary analysis you wish to perform. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"line\"\u003e\u003c/a\u003e Line boundary analysis determines where a text string can be broken when line-wrapping. The mechanism correctly handles punctuation and hyphenated words. Actual line breaking needs to also consider the available line width and is handled by higher-level software. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"sentence\"\u003e\u003c/a\u003e Sentence boundary analysis allows selection with correct interpretation of periods within numbers and abbreviations, and trailing punctuation marks such as quotation marks and parentheses. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"word\"\u003e\u003c/a\u003e Word boundary analysis is used by search and replace functions, as well as within text editing applications that allow the user to select words with a double click. Word selection provides correct interpretation of punctuation marks within and following words. Characters that are not part of a word, such as symbols or punctuation marks, have word-breaks on both sides. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"character\"\u003e\u003c/a\u003e Character boundary analysis allows users to interact with characters as they expect to, for example, when moving the cursor through a text string. Character boundary analysis provides correct navigation through character strings, regardless of how the character is stored. The boundaries returned may be those of supplementary characters, combining character sequences, or ligature clusters. For example, an accented character might be stored as a base character and a diacritical mark. What users consider to be a character can differ between languages. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eBreakIterator\u003c/code\u003e instances returned by the factory methods of this class are intended for use with natural languages only, not for programming language text. It is however possible to define subclasses that tokenize a programming language. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eExamples\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003e Creating and using text boundaries: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e public static void main(String args[]) {\n      if (args.length \u003d\u003d 1) {\n          String stringToExamine \u003d args[0];\n          //print each word in order\n          BreakIterator boundary \u003d BreakIterator.getWordInstance();\n          boundary.setText(stringToExamine);\n          printEachForward(boundary, stringToExamine);\n          //print each sentence in reverse order\n          boundary \u003d BreakIterator.getSentenceInstance(Locale.US);\n          boundary.setText(stringToExamine);\n          printEachBackward(boundary, stringToExamine);\n          printFirst(boundary, stringToExamine);\n          printLast(boundary, stringToExamine);\n      }\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Print each element in order: \n\u003cblockquote\u003e \n \u003cpre\u003e public static void printEachForward(BreakIterator boundary, String source) {\n     int start \u003d boundary.first();\n     for (int end \u003d boundary.next();\n          end !\u003d BreakIterator.DONE;\n          start \u003d end, end \u003d boundary.next()) {\n          System.out.println(source.substring(start,end));\n     }\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Print each element in reverse order: \n\u003cblockquote\u003e \n \u003cpre\u003e public static void printEachBackward(BreakIterator boundary, String source) {\n     int end \u003d boundary.last();\n     for (int start \u003d boundary.previous();\n          start !\u003d BreakIterator.DONE;\n          end \u003d start, start \u003d boundary.previous()) {\n         System.out.println(source.substring(start,end));\n     }\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Print first element: \n\u003cblockquote\u003e \n \u003cpre\u003e public static void printFirst(BreakIterator boundary, String source) {\n     int start \u003d boundary.first();\n     int end \u003d boundary.next();\n     System.out.println(source.substring(start,end));\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Print last element: \n\u003cblockquote\u003e \n \u003cpre\u003e public static void printLast(BreakIterator boundary, String source) {\n     int end \u003d boundary.last();\n     int start \u003d boundary.previous();\n     System.out.println(source.substring(start,end));\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Print the element at a specified position: \n\u003cblockquote\u003e \n \u003cpre\u003e public static void printAt(BreakIterator boundary, int pos, String source) {\n     int end \u003d boundary.following(pos);\n     int start \u003d boundary.previous();\n     System.out.println(source.substring(start,end));\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Find the next word: \n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n public static int nextWordStartAfter(int pos, String text) {\n     BreakIterator wb \u003d BreakIterator.getWordInstance();\n     wb.setText(text);\n     int last \u003d wb.following(pos);\n     int current \u003d wb.next();\n     while (current !\u003d BreakIterator.DONE) {\n         for (int p \u003d last; p \u0026lt; current; p++) {\n             if (Character.isLetter(text.codePointAt(p)))\n                 return last;\n         }\n         last \u003d current;\n         current \u003d wb.next();\n     }\n     return BreakIterator.DONE;\n }\n \u003c/code\u003e\u003c/pre\u003e (The iterator returned by BreakIterator.getWordInstance() is unique in that the break positions it returns don\u0027t represent both the start and end of the thing being iterated over. That is, a sentence-break iterator returns breaks that each represent the end of one sentence and the beginning of the next. With the word-break iterator, the characters between two boundaries might be a word, or they might be the punctuation or whitespace between two words. The above code uses a simple heuristic to determine which boundary is the beginning of a word: If the characters between this boundary and the next boundary include at least one letter (this can be an alphabetical letter, a CJK ideograph, a Hangul syllable, a Kana character, etc.), then the text between this boundary and the next is a word; otherwise, it\u0027s the material between words.) \n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CharacterIterator.html\" title\u003d\"interface in java.text\"\u003e\u003ccode\u003eCharacterIterator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}