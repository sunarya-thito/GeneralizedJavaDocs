{
  "packageName": "java.text",
  "simpleName": "RuleBasedCollator",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.Collator",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRules",
      "comment": "Gets the table-based rules for the collation object.",
      "tagMap": {
        "return": [
          "returns the collation rules that the table collation object was created from."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.CollationElementIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCollationElementIterator",
      "comment": "Returns a CollationElementIterator for the given String.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationElementIterator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationElementIterator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the string to be collated"
        ],
        "return": [
          "a \n\u003ccode\u003eCollationElementIterator\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.CollationElementIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCollationElementIterator",
      "comment": "Returns a CollationElementIterator for the given CharacterIterator.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationElementIterator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationElementIterator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the character iterator to be collated"
        ],
        "return": [
          "a \n\u003ccode\u003eCollationElementIterator\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compare",
      "comment": "Compares the character data stored in two different strings based on the collation rules. Returns information about whether a string is less than, greater than or equal to another string in a language. This can be overridden in a subclass.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationKey.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getCollationKey(java.lang.String)\"\u003e\u003ccode\u003eCollator.getCollationKey(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#compare(java.lang.String,java.lang.String)\"\u003ecompare\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003eCollator\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source string.",
          "\u003ccode\u003etarget\u003c/code\u003e - the target string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e or \n\u003ccode\u003etarget\u003c/code\u003e is null."
        ],
        "return": [
          "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.CollationKey",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCollationKey",
      "comment": "Transforms the string into a series of characters that can be compared with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey. It can be overridden in a subclass.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationKey.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#compare(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eCollator.compare(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#getCollationKey(java.lang.String)\"\u003egetCollationKey\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003eCollator\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the string to be transformed into a collation key."
        ],
        "return": [
          "the CollationKey for the given String based on this Collator\u0027s collation rules. If the source String is null, a null CollationKey is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Standard override; no change in semantics.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003eCollator\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the equality of two collation objects.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003eCollator\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003eComparator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the table-based collation object to be compared with this."
        ],
        "return": [
          "true if the current table-based collation object is the same as the table-based collation object obj; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Generates the hash code for the table-based collation object",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003eCollator\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "rules"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "RuleBasedCollator constructor. This takes the table rules and builds a collation table out of them. Please see RuleBasedCollator class description for more details on the collation rule syntax.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erules\u003c/code\u003e - the collation rules to build the collation table from."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - A format exception will be thrown if the build process of the rules fails. For example, build rule \"a \u0026lt; ? \u0026lt; d\" will cause the constructor to throw the ParseException because the \u0027?\u0027 is not quoted."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.text.RuleBasedCollator",
  "comment": "The \n\u003ccode\u003eRuleBasedCollator\u003c/code\u003e class is a concrete subclass of \n\u003ccode\u003eCollator\u003c/code\u003e that provides a simple, data-driven, table collator. With this class you can create a customized table-based \n\u003ccode\u003eCollator\u003c/code\u003e. \n\u003ccode\u003eRuleBasedCollator\u003c/code\u003e maps characters to sort keys. \n\u003cp\u003e \u003ccode\u003eRuleBasedCollator\u003c/code\u003e has the following restrictions for efficiency (other subclasses may be used for more complex languages) : \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eIf a special collation rule controlled by a \u0026lt;modifier\u0026gt; is specified it applies to the whole collator object. \u003c/li\u003e\n \u003cli\u003eAll non-mentioned characters are at the end of the collation order. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The collation table is composed of a list of collation rules, where each rule is of one of three forms: \u003c/p\u003e\n\u003cpre\u003e    \u0026lt;modifier\u0026gt;\n    \u0026lt;relation\u0026gt; \u0026lt;text-argument\u0026gt;\n    \u0026lt;reset\u0026gt; \u0026lt;text-argument\u0026gt;\n \u003c/pre\u003e The definitions of the rule elements is as follows: \n\u003cul\u003e \n \u003cli\u003e\u003cstrong\u003eText-Argument\u003c/strong\u003e: A text-argument is any sequence of characters, excluding special characters (that is, common whitespace characters [0009-000D, 0020] and rule syntax characters [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those characters are desired, you can put them in single quotes (e.g. ampersand \u003d\u0026gt; \u0027\u0026amp;\u0027). Note that unquoted white space characters are ignored; e.g. \u003ccode\u003eb c\u003c/code\u003e is treated as \u003ccode\u003ebc\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e\u003cstrong\u003eModifier\u003c/strong\u003e: There are currently two modifiers that turn on special collation rules. \n  \u003cul\u003e \n   \u003cli\u003e\u0027@\u0027 : Turns on backwards sorting of accents (secondary differences), as in French. \u003c/li\u003e\n   \u003cli\u003e\u0027!\u0027 : Turns on Thai/Lao vowel-consonant swapping. If this rule is in force when a Thai vowel of the range \\U0E40-\\U0E44 precedes a Thai consonant of the range \\U0E01-\\U0E2E OR a Lao vowel of the range \\U0EC0-\\U0EC4 precedes a Lao consonant of the range \\U0E81-\\U0EAE then the vowel is placed after the consonant for collation purposes. \u003c/li\u003e\n  \u003c/ul\u003e \u003cp\u003e\u0027@\u0027 : Indicates that accents are sorted backwards, as in French. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cstrong\u003eRelation\u003c/strong\u003e: The relations are the following: \n  \u003cul\u003e \n   \u003cli\u003e\u0027\u0026lt;\u0027 : Greater, as a letter difference (primary) \u003c/li\u003e\n   \u003cli\u003e\u0027;\u0027 : Greater, as an accent difference (secondary) \u003c/li\u003e\n   \u003cli\u003e\u0027,\u0027 : Greater, as a case difference (tertiary) \u003c/li\u003e\n   \u003cli\u003e\u0027\u003d\u0027 : Equal \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003e\u003cstrong\u003eReset\u003c/strong\u003e: There is a single reset which is used primarily for contractions and expansions, but which can also be used to add a modification at the end of a set of rules. \u003cp\u003e\u0027\u0026amp;\u0027 : Indicates that the next rule follows the position to where the reset text-argument would be sorted. \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This sounds more complicated than it is in practice. For example, the following are equivalent ways of expressing the same thing: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e a \u0026lt; b \u0026lt; c\n a \u0026lt; b \u0026amp; b \u0026lt; c\n a \u0026lt; c \u0026amp; a \u0026lt; b\n \u003c/pre\u003e \n\u003c/blockquote\u003e Notice that the order is important, as the subsequent item goes immediately after the text-argument. The following are not equivalent: \n\u003cblockquote\u003e \n \u003cpre\u003e a \u0026lt; b \u0026amp; a \u0026lt; c\n a \u0026lt; c \u0026amp; a \u0026lt; b\n \u003c/pre\u003e \n\u003c/blockquote\u003e Either the text-argument must already be present in the sequence, or some initial substring of the text-argument must be present. (e.g. \"a \u0026lt; b \u0026amp; ae \u0026lt; e\" is valid since \"a\" is present in the sequence before \"ae\" is reset). In this latter case, \"ae\" is not entered and treated as a single character; instead, \"e\" is sorted as if it were expanded to two characters: \"a\" followed by an \"e\". This difference appears in natural languages: in traditional Spanish \"ch\" is treated as though it contracts to a single character (expressed as \"c \u0026lt; ch \u0026lt; d\"), while in traditional German a-umlaut is treated as though it expanded to two characters (expressed as \"a,A \u0026lt; b,B ... \u0026amp;ae;\\u00e3\u0026amp;AE;\\u00c3\"). [\\u00e3 and \\u00c3 are, of course, the escape sequences for a-umlaut.] \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eIgnorable Characters\u003c/strong\u003e \u003c/p\u003e\n\u003cp\u003e For ignorable characters, the first rule must start with a relation (the examples we have used above are really fragments; \"a \u0026lt; b\" really should be \"\u0026lt; a \u0026lt; b\"). If, however, the first relation is not \"\u0026lt;\", then all the all text-arguments up to the first \"\u0026lt;\" are ignorable. For example, \", - \u0026lt; a \u0026lt; b\" makes \"-\" an ignorable character, as we saw earlier in the word \"black-birds\". In the samples for different languages, you see that most accents are ignorable. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNormalization and Accents\u003c/strong\u003e \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eRuleBasedCollator\u003c/code\u003e automatically processes its rule table to include both pre-composed and combining-character versions of accented characters. Even if the provided rule string contains only base characters and separate combining accent characters, the pre-composed accented characters matching all canonical combinations of characters from the rule string will be entered in the table. \u003c/p\u003e\n\u003cp\u003e This allows you to use a RuleBasedCollator to compare accented strings even when the collator is set to NO_DECOMPOSITION. There are two caveats, however. First, if the strings to be collated contain combining sequences that may not be in canonical order, you should set the collator to CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of combining sequences. Second, if the strings contain characters with compatibility decompositions (such as full-width and half-width forms), you must use FULL_DECOMPOSITION, since the rule tables only include canonical mappings. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eErrors\u003c/strong\u003e \u003c/p\u003e\n\u003cp\u003e The following are errors: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eA text-argument contains unquoted punctuation symbols (e.g. \"a \u0026lt; b-c \u0026lt; d\"). \u003c/li\u003e\n \u003cli\u003eA relation or reset character not followed by a text-argument (e.g. \"a \u0026lt; ,b\"). \u003c/li\u003e\n \u003cli\u003eA reset where the text-argument (or an initial substring of the text-argument) is not already in the sequence. (e.g. \"a \u0026lt; b \u0026amp; e \u0026lt; f\") \u003c/li\u003e\n\u003c/ul\u003e If you produce one of these errors, a \n\u003ccode\u003eRuleBasedCollator\u003c/code\u003e throws a \n\u003ccode\u003eParseException\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExamples\u003c/strong\u003e \u003c/p\u003e\n\u003cp\u003eSimple: \"\u0026lt; a \u0026lt; b \u0026lt; c \u0026lt; d\" \u003c/p\u003e\n\u003cp\u003eNorwegian: \"\u0026lt; a, A \u0026lt; b, B \u0026lt; c, C \u0026lt; d, D \u0026lt; e, E \u0026lt; f, F \u0026lt; g, G \u0026lt; h, H \u0026lt; i, I \u0026lt; j, J \u0026lt; k, K \u0026lt; l, L \u0026lt; m, M \u0026lt; n, N \u0026lt; o, O \u0026lt; p, P \u0026lt; q, Q \u0026lt; r, R \u0026lt; s, S \u0026lt; t, T \u0026lt; u, U \u0026lt; v, V \u0026lt; w, W \u0026lt; x, X \u0026lt; y, Y \u0026lt; z, Z \u0026lt; \\u00E6, \\u00C6 \u0026lt; \\u00F8, \\u00D8 \u0026lt; \\u00E5 \u003d a\\u030A, \\u00C5 \u003d A\\u030A; aa, AA\" \u003c/p\u003e\n\u003cp\u003e To create a \u003ccode\u003eRuleBasedCollator\u003c/code\u003e object with specialized rules tailored to your needs, you construct the \u003ccode\u003eRuleBasedCollator\u003c/code\u003e with the rules contained in a \u003ccode\u003eString\u003c/code\u003e object. For example: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e String simple \u003d \"\u0026lt; a\u0026lt; b\u0026lt; c\u0026lt; d\";\n RuleBasedCollator mySimple \u003d new RuleBasedCollator(simple);\n \u003c/pre\u003e \n\u003c/blockquote\u003e Or: \n\u003cblockquote\u003e \n \u003cpre\u003e String Norwegian \u003d \"\u0026lt; a, A \u0026lt; b, B \u0026lt; c, C \u0026lt; d, D \u0026lt; e, E \u0026lt; f, F \u0026lt; g, G \u0026lt; h, H \u0026lt; i, I\" +\n                    \"\u0026lt; j, J \u0026lt; k, K \u0026lt; l, L \u0026lt; m, M \u0026lt; n, N \u0026lt; o, O \u0026lt; p, P \u0026lt; q, Q \u0026lt; r, R\" +\n                    \"\u0026lt; s, S \u0026lt; t, T \u0026lt; u, U \u0026lt; v, V \u0026lt; w, W \u0026lt; x, X \u0026lt; y, Y \u0026lt; z, Z\" +\n                    \"\u0026lt; \\u00E6, \\u00C6\" +     // Latin letter ae \u0026amp; AE\n                    \"\u0026lt; \\u00F8, \\u00D8\" +     // Latin letter o \u0026amp; O with stroke\n                    \"\u0026lt; \\u00E5 \u003d a\\u030A,\" +  // Latin letter a with ring above\n                    \"  \\u00C5 \u003d A\\u030A;\" +  // Latin letter A with ring above\n                    \"  aa, AA\";\n RuleBasedCollator myNorwegian \u003d new RuleBasedCollator(Norwegian);\n \u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A new collation rules string can be created by concatenating rules strings. For example, the rules returned by \u003ca href\u003d\"#getRules()\"\u003e\u003ccode\u003egetRules()\u003c/code\u003e\u003c/a\u003e could be concatenated to combine multiple \u003ccode\u003eRuleBasedCollator\u003c/code\u003es. \u003c/p\u003e\n\u003cp\u003e The following example demonstrates how to change the order of non-spacing accents, \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e // old rule\n String oldRules \u003d \"\u003d\\u0301;\\u0300;\\u0302;\\u0308\"    // main accents\n                 + \";\\u0327;\\u0303;\\u0304;\\u0305\"    // main accents\n                 + \";\\u0306;\\u0307;\\u0309;\\u030A\"    // main accents\n                 + \";\\u030B;\\u030C;\\u030D;\\u030E\"    // main accents\n                 + \";\\u030F;\\u0310;\\u0311;\\u0312\"    // main accents\n                 + \"\u0026lt; a , A ; ae, AE ; \\u00e6 , \\u00c6\"\n                 + \"\u0026lt; b , B \u0026lt; c, C \u0026lt; e, E \u0026amp; C \u0026lt; d, D\";\n // change the order of accent characters\n String addOn \u003d \"\u0026amp; \\u0300 ; \\u0308 ; \\u0302\";\n RuleBasedCollator myCollator \u003d new RuleBasedCollator(oldRules + addOn);\n \u003c/pre\u003e \n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CollationElementIterator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollationElementIterator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}