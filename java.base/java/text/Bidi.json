{
  "packageName": "java.text",
  "simpleName": "Bidi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTION_LEFT_TO_RIGHT",
      "comment": "Constant indicating base direction is left-to-right.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Bidi.DIRECTION_LEFT_TO_RIGHT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTION_RIGHT_TO_LEFT",
      "comment": "Constant indicating base direction is right-to-left.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Bidi.DIRECTION_RIGHT_TO_LEFT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTION_DEFAULT_LEFT_TO_RIGHT",
      "comment": "Constant indicating that the base direction depends on the first strong directional character in the text according to the Unicode Bidirectional Algorithm. If no strong directional character is present, the base direction is left-to-right.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTION_DEFAULT_RIGHT_TO_LEFT",
      "comment": "Constant indicating that the base direction depends on the first strong directional character in the text according to the Unicode Bidirectional Algorithm. If no strong directional character is present, the base direction is right-to-left.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.Bidi",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createLineBidi",
      "comment": "Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi. This call is not required if the entire paragraph fits on one line.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elineStart\u003c/code\u003e - the offset from the start of the paragraph to the start of the line.",
          "\u003ccode\u003elineLimit\u003c/code\u003e - the offset from the start of the paragraph to the limit of the line."
        ],
        "return": [
          "a \n\u003ccode\u003eBidi\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMixed",
      "comment": "Return true if the line is not left-to-right or right-to-left. This means it either has mixed runs of left-to-right and right-to-left text, or the base direction differs from the direction of the only run of text.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the line is not left-to-right or right-to-left."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeftToRight",
      "comment": "Return true if the line is all left-to-right text and the base direction is left-to-right.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the line is all left-to-right text and the base direction is left-to-right"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRightToLeft",
      "comment": "Return true if the line is all right-to-left text, and the base direction is right-to-left.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the line is all right-to-left text, and the base direction is right-to-left"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLength",
      "comment": "Return the length of text in the line.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the length of text in the line"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "baseIsLeftToRight",
      "comment": "Return true if the base direction is left-to-right.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the base direction is left-to-right"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseLevel",
      "comment": "Return the base level (0 if left-to-right, 1 if right-to-left).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the base level"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLevelAt",
      "comment": "Return the resolved level of the character at offset. If offset is \u003c 0 or â‰¥ the length of the line, return the base direction level.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of the character for which to return the level"
        ],
        "return": [
          "the resolved level of the character at offset"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRunCount",
      "comment": "Return the number of level runs.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of level runs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRunLevel",
      "comment": "Return the level of the nth logical run in this line.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erun\u003c/code\u003e - the index of the run, between 0 and \n\u003ccode\u003egetRunCount()\u003c/code\u003e"
        ],
        "return": [
          "the level of the run"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRunStart",
      "comment": "Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erun\u003c/code\u003e - the index of the run, between 0 and \n\u003ccode\u003egetRunCount()\u003c/code\u003e"
        ],
        "return": [
          "the start of the run"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRunLimit",
      "comment": "Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line. For example, this will return the length of the line for the last run on the line.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erun\u003c/code\u003e - the index of the run, between 0 and \n\u003ccode\u003egetRunCount()\u003c/code\u003e"
        ],
        "return": [
          "limit the limit of the run"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "requiresBidi",
      "comment": "Return true if the specified text requires bidi analysis. If this returns false, the text will display left-to-right. Clients can then avoid constructing a Bidi object. Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped and ordered for display, and so will not cause this function to return true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text containing the characters to test",
          "\u003ccode\u003estart\u003c/code\u003e - the start of the range of characters to test",
          "\u003ccode\u003elimit\u003c/code\u003e - the limit of the range of characters to test"
        ],
        "return": [
          "true if the range of characters requires bidi analysis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reorderVisually",
      "comment": "Reorder the objects in the array into visual order based on their levels. This is a utility function to use when you have a collection of objects representing runs of text in logical order, each run containing text at a single level. The elements at index from objectStart up to objectStart + count in the objects array will be reordered into visual order assuming each run of text has the level indicated by the corresponding element in the levels array (at index - objectStart + levelStart).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevels\u003c/code\u003e - an array representing the bidi level of each object",
          "\u003ccode\u003elevelStart\u003c/code\u003e - the start position in the levels array",
          "\u003ccode\u003eobjects\u003c/code\u003e - the array of objects to be reordered into visual order",
          "\u003ccode\u003eobjectStart\u003c/code\u003e - the start position in the objects array",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of objects to reorder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Display the bidi internal state, used in debugging.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "paragraph",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create Bidi from the given paragraph of text and base direction.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparagraph\u003c/code\u003e - a paragraph of text",
          "\u003ccode\u003eflags\u003c/code\u003e - a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "paragraph",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create Bidi from the given paragraph of text. The RUN_DIRECTION attribute in the text, if present, determines the base direction (left-to-right or right-to-left). If not present, the base direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right if there are no strong directional characters in the text. This attribute, if present, must be applied to all the text in the paragraph. The BIDI_EMBEDDING attribute in the text, if present, represents embedding level information. Negative values from -1 to -62 indicate overrides at the absolute value of the level. Positive values from 1 to 62 indicate embeddings. Where values are zero or not defined, the base embedding level as determined by the base direction is assumed. The NUMERIC_SHAPING attribute in the text, if present, converts European digits to other decimal digits before running the bidi algorithm. This attribute, if present, must be applied to all the text in the paragraph.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#BIDI_EMBEDDING\"\u003e\u003ccode\u003eTextAttribute.BIDI_EMBEDDING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#NUMERIC_SHAPING\"\u003e\u003ccode\u003eTextAttribute.NUMERIC_SHAPING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#RUN_DIRECTION\"\u003e\u003ccode\u003eTextAttribute.RUN_DIRECTION\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparagraph\u003c/code\u003e - a paragraph of text with optional character and paragraph attribute information"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "textStart",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "embeddings",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "embStart",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "paragraphLength",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create Bidi from the given text, embedding, and direction information. The embeddings array may be null. If present, the values represent embedding level information. Negative values from -1 to -61 indicate overrides at the absolute value of the level. Positive values from 1 to 61 indicate embeddings. Where values are zero, the base embedding level as determined by the base direction is assumed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - an array containing the paragraph of text to process.",
          "\u003ccode\u003etextStart\u003c/code\u003e - the index into the text array of the start of the paragraph.",
          "\u003ccode\u003eembeddings\u003c/code\u003e - an array containing embedding values for each character in the paragraph. This can be null, in which case it is assumed that there is no external embedding information.",
          "\u003ccode\u003eembStart\u003c/code\u003e - the index into the embedding array of the start of the paragraph.",
          "\u003ccode\u003eparagraphLength\u003c/code\u003e - the length of the paragraph in the text and embeddings arrays.",
          "\u003ccode\u003eflags\u003c/code\u003e - a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.text.Bidi",
  "comment": "This class implements the Unicode Bidirectional Algorithm. \n\u003cp\u003e A Bidi object provides information on the bidirectional reordering of the text used to create it. This is required, for example, to properly display Arabic or Hebrew text. These languages are inherently mixed directional, as they order numbers from left-to-right while ordering most other text from right-to-left. \u003c/p\u003e\n\u003cp\u003e Once created, a Bidi object can be queried to see if the text it represents is all left-to-right or all right-to-left. Such objects are very lightweight and this text is relatively easy to process. \u003c/p\u003e\n\u003cp\u003e If there are multiple runs of text, information about the runs can be accessed by indexing to get the start, limit, and level of a run. The level represents both the direction and the \u0027nesting level\u0027 of a directional run. Odd levels are right-to-left, while even levels are left-to-right. So for example level 0 represents left-to-right text, while level 1 represents right-to-left text, and level 2 represents left-to-right text embedded in a right-to-left run.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}