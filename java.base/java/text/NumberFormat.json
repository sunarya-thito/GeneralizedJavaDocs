{
  "packageName": "java.text",
  "simpleName": "NumberFormat",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.Format",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INTEGER_FIELD",
      "comment": "Field constant used to construct a FieldPosition object. Signifies that the position of the integer part of a formatted number should be returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.NumberFormat.INTEGER_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FRACTION_FIELD",
      "comment": "Field constant used to construct a FieldPosition object. Signifies that the position of the fraction part of a formatted number should be returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.NumberFormat.FRACTION_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "number"
          }
        },
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "toAppendTo"
          }
        },
        {
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of Number. This implementation extracts the number\u0027s value using Number.longValue() for all integral type values that can be converted to long without loss of information, including BigInteger values with a bit length of less than 64, and Number.doubleValue() for all other types. It then calls format(long,java.lang.StringBuffer,java.text.FieldPosition) or format(double,java.lang.StringBuffer,java.text.FieldPosition). This may result in loss of magnitude information and precision for BigInteger and BigDecimal values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the number to format",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - the \n\u003ccode\u003eStringBuffer\u003c/code\u003e to which the formatted text is to be appended",
          "\u003ccode\u003epos\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e1234567.89\u003c/code\u003e in \n\u003ccode\u003eLocale.US\u003c/code\u003e locale, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eINTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 9, respectively for the output string \n\u003ccode\u003e1,234,567.89\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumber\u003c/code\u003e is null or not an instance of \n\u003ccode\u003eNumber\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoAppendTo\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "the value passed in as \n\u003ccode\u003etoAppendTo\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "parseObject",
      "comment": "Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the parse(String, ParsePosition) method for more information on number parsing.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#parseObject(java.lang.String,java.text.ParsePosition)\"\u003eparseObject\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - A \n\u003ccode\u003eString\u003c/code\u003e, part of which should be parsed.",
          "\u003ccode\u003epos\u003c/code\u003e - A \n\u003ccode\u003eParsePosition\u003c/code\u003e object with index and error index information as described above."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null."
        ],
        "return": [
          "A \n\u003ccode\u003eNumber\u003c/code\u003e parsed from the string. In case of error, returns null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "number"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "format",
      "comment": "Specialization of format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#format(java.lang.Object)\"\u003e\u003ccode\u003eFormat.format(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the double number to format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "the formatted String"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "number"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "format",
      "comment": "Specialization of format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#format(java.lang.Object)\"\u003e\u003ccode\u003eFormat.format(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the long number to format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "the formatted String"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "number"
          }
        },
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "toAppendTo"
          }
        },
        {
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "format",
      "comment": "Specialization of format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#format(java.lang.Object)\"\u003e\u003ccode\u003eFormat.format(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the double number to format",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - the StringBuffer to which the formatted text is to be appended",
          "\u003ccode\u003epos\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e1234567.89\u003c/code\u003e in \n\u003ccode\u003eLocale.US\u003c/code\u003e locale, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eINTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 9, respectively for the output string \n\u003ccode\u003e1,234,567.89\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "the formatted StringBuffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "number"
          }
        },
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "toAppendTo"
          }
        },
        {
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "format",
      "comment": "Specialization of format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#format(java.lang.Object)\"\u003e\u003ccode\u003eFormat.format(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the long number to format",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - the StringBuffer to which the formatted text is to be appended",
          "\u003ccode\u003epos\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e123456789\u003c/code\u003e in \n\u003ccode\u003eLocale.US\u003c/code\u003e locale, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eINTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 11, respectively for the output string \n\u003ccode\u003e123,456,789\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "the formatted StringBuffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "field": {
            "name": "parsePosition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "parse",
      "comment": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged!",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isParseIntegerOnly()\"\u003e\u003ccode\u003eisParseIntegerOnly()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#parseObject(java.lang.String,java.text.ParsePosition)\"\u003e\u003ccode\u003eFormat.parseObject(java.lang.String, java.text.ParsePosition)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the String to parse",
          "\u003ccode\u003eparsePosition\u003c/code\u003e - the parse position"
        ],
        "return": [
          "the parsed value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parses text from the beginning of the given string to produce a number. The method may not use the entire text of the given string. See the parse(String, ParsePosition) method for more information on number parsing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - A \n\u003ccode\u003eString\u003c/code\u003e whose beginning should be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if the beginning of the specified string cannot be parsed."
        ],
        "return": [
          "A \n\u003ccode\u003eNumber\u003c/code\u003e parsed from the string."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isParseIntegerOnly",
      "comment": "Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string \"1234.\" would be parsed as the integer value 1234 and parsing would stop at the \".\" character. Of course, the exact format accepted by the parse operation is locale dependent and determined by sub-classes of NumberFormat.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if numbers should be parsed as integers only; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParseIntegerOnly",
      "comment": "Sets whether or not numbers should be parsed as integers only.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isParseIntegerOnly()\"\u003e\u003ccode\u003eisParseIntegerOnly()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if numbers should be parsed as integers only; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns a general-purpose number format for the current default FORMAT locale. This is the same as calling getNumberInstance().",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for general-purpose number formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "inLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a general-purpose number format for the specified locale. This is the same as calling getNumberInstance(inLocale).",
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - the desired locale"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for general-purpose number formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getNumberInstance",
      "comment": "Returns a general-purpose number format for the current default FORMAT locale. This is equivalent to calling getNumberInstance(Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for general-purpose number formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "inLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getNumberInstance",
      "comment": "Returns a general-purpose number format for the specified locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - the desired locale"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for general-purpose number formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getIntegerInstance",
      "comment": "Returns an integer number format for the current default FORMAT locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting, and to parse only the integer part of an input string (see isParseIntegerOnly). This is equivalent to calling getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getRoundingMode()\"\u003e\u003ccode\u003egetRoundingMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a number format for integer values"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "inLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIntegerInstance",
      "comment": "Returns an integer number format for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting, and to parse only the integer part of an input string (see isParseIntegerOnly).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getRoundingMode()\"\u003e\u003ccode\u003egetRoundingMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - the desired locale"
        ],
        "return": [
          "a number format for integer values"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getCurrencyInstance",
      "comment": "Returns a currency format for the current default FORMAT locale. This is equivalent to calling getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for currency formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "inLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCurrencyInstance",
      "comment": "Returns a currency format for the specified locale. If the specified locale contains the \"cf\" ( currency format style) Unicode extension, the returned currency format uses the style if it is available. Otherwise, the style uses the default \"standard\" currency format. For example, if the style designates \"account\", negative currency amounts use a pair of parentheses in some locales.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - the desired locale"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for currency formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getPercentInstance",
      "comment": "Returns a percentage format for the current default FORMAT locale. This is equivalent to calling getPercentInstance(Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for percentage formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "inLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPercentInstance",
      "comment": "Returns a percentage format for the specified locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - the desired locale"
        ],
        "return": [
          "the \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for percentage formatting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCompactNumberInstance",
      "comment": "Returns a compact number format for the default FORMAT locale with \"SHORT\" format style.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCompactNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Style.html\" title\u003d\"enum class in java.text\"\u003e\u003ccode\u003eNumberFormat.Style\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "A \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for compact number formatting"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        },
        {
          "type": {
            "name": "java.text.NumberFormat$Style",
            "type": "Class"
          },
          "field": {
            "name": "formatStyle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCompactNumberInstance",
      "comment": "Returns a compact number format for the specified locale and formatStyle.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCompactNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Style.html\" title\u003d\"enum class in java.text\"\u003e\u003ccode\u003eNumberFormat.Style\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale",
          "\u003ccode\u003eformatStyle\u003c/code\u003e - the style for formatting a number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e or \n\u003ccode\u003eformatStyle\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A \n\u003ccode\u003eNumberFormat\u003c/code\u003e instance for compact number formatting"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances. The returned array represents the union of locales supported by the Java runtime and by installed NumberFormatProvider implementations. It must contain at least a Locale instance equal to Locale.US.",
      "tagMap": {
        "return": [
          "An array of locales for which localized \n\u003ccode\u003eNumberFormat\u003c/code\u003e instances are available."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Overrides hashCode.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Overrides equals.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Overrides Cloneable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isGroupingUsed",
      "comment": "Returns true if grouping is used in this format. For example, in the English locale, with grouping on, the number 1234567 might be formatted as \"1,234,567\". The grouping separator as well as the size of each group is locale dependent and is determined by sub-classes of NumberFormat.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setGroupingUsed(boolean)\"\u003e\u003ccode\u003esetGroupingUsed(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if grouping is used; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGroupingUsed",
      "comment": "Set whether or not grouping will be used in this format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isGroupingUsed()\"\u003e\u003ccode\u003eisGroupingUsed()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if grouping is used; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumIntegerDigits",
      "comment": "Returns the maximum number of digits allowed in the integer portion of a number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumIntegerDigits(int)\"\u003e\u003ccode\u003esetMaximumIntegerDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the maximum number of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumIntegerDigits",
      "comment": "Sets the maximum number of digits allowed in the integer portion of a number. maximumIntegerDigits must be ≥ minimumIntegerDigits. If the new value for maximumIntegerDigits is less than the current value of minimumIntegerDigits, then minimumIntegerDigits will also be set to the new value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMaximumIntegerDigits()\"\u003e\u003ccode\u003egetMaximumIntegerDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the maximum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumIntegerDigits",
      "comment": "Returns the minimum number of digits allowed in the integer portion of a number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumIntegerDigits(int)\"\u003e\u003ccode\u003esetMinimumIntegerDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the minimum number of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumIntegerDigits",
      "comment": "Sets the minimum number of digits allowed in the integer portion of a number. minimumIntegerDigits must be ≤ maximumIntegerDigits. If the new value for minimumIntegerDigits exceeds the current value of maximumIntegerDigits, then maximumIntegerDigits will also be set to the new value",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMinimumIntegerDigits()\"\u003e\u003ccode\u003egetMinimumIntegerDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the minimum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumFractionDigits",
      "comment": "Returns the maximum number of digits allowed in the fraction portion of a number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumFractionDigits(int)\"\u003e\u003ccode\u003esetMaximumFractionDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the maximum number of digits."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumFractionDigits",
      "comment": "Sets the maximum number of digits allowed in the fraction portion of a number. maximumFractionDigits must be ≥ minimumFractionDigits. If the new value for maximumFractionDigits is less than the current value of minimumFractionDigits, then minimumFractionDigits will also be set to the new value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMaximumFractionDigits()\"\u003e\u003ccode\u003egetMaximumFractionDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the maximum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumFractionDigits",
      "comment": "Returns the minimum number of digits allowed in the fraction portion of a number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumFractionDigits(int)\"\u003e\u003ccode\u003esetMinimumFractionDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the minimum number of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumFractionDigits",
      "comment": "Sets the minimum number of digits allowed in the fraction portion of a number. minimumFractionDigits must be ≤ maximumFractionDigits. If the new value for minimumFractionDigits exceeds the current value of maximumFractionDigits, then maximumFractionDigits will also be set to the new value",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMinimumFractionDigits()\"\u003e\u003ccode\u003egetMinimumFractionDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the minimum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Currency",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrency",
      "comment": "Gets the currency used by this number format when formatting currency values. The initial value is derived in a locale dependent way. The returned value may be null if no valid currency could be determined and no currency has been set using setCurrency. The default implementation throws UnsupportedOperationException.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the number format class doesn\u0027t implement currency formatting"
        ],
        "return": [
          "the currency used by this number format, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Currency",
            "type": "Class"
          },
          "field": {
            "name": "currency"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurrency",
      "comment": "Sets the currency used by this number format when formatting currency values. This does not update the minimum or maximum number of fraction digits used by the number format. The default implementation throws UnsupportedOperationException.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecurrency\u003c/code\u003e - the new currency to be used by this number format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the number format class doesn\u0027t implement currency formatting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecurrency\u003c/code\u003e is null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.RoundingMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoundingMode",
      "comment": "Gets the RoundingMode used in this NumberFormat. The default implementation of this method in NumberFormat always throws UnsupportedOperationException. Subclasses which handle different rounding modes should override this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setRoundingMode(java.math.RoundingMode)\"\u003e\u003ccode\u003esetRoundingMode(RoundingMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - The default implementation always throws this exception"
        ],
        "return": [
          "The \n\u003ccode\u003eRoundingMode\u003c/code\u003e used for this NumberFormat."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.RoundingMode",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRoundingMode",
      "comment": "Sets the RoundingMode used in this NumberFormat. The default implementation of this method in NumberFormat always throws UnsupportedOperationException. Subclasses which handle different rounding modes should override this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getRoundingMode()\"\u003e\u003ccode\u003egetRoundingMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroundingMode\u003c/code\u003e - The \n\u003ccode\u003eRoundingMode\u003c/code\u003e to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - The default implementation always throws this exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003c/code\u003e is null"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.text.NumberFormat$Style",
    "java.text.NumberFormat$Field"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.text.NumberFormat",
  "comment": "\u003ccode\u003eNumberFormat\u003c/code\u003e is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. \n\u003ccode\u003eNumberFormat\u003c/code\u003e also provides methods for determining which locales have number formats, and what their names are. \n\u003cp\u003e \u003ccode\u003eNumberFormat\u003c/code\u003e helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. \u003c/p\u003e\n\u003cp\u003e To format a number for the current Locale, use one of the factory class methods: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n myString \u003d NumberFormat.getInstance().format(myNumber);\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn\u0027t have to fetch the information about the local language and country conventions multiple times. \n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n NumberFormat nf \u003d NumberFormat.getInstance();\n for (int i \u003d 0; i \u0026lt; myNumber.length; ++i) {\n     output.println(nf.format(myNumber[i]) + \"; \");\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e To format a number for a different Locale, specify it in the call to \n\u003ccode\u003egetInstance\u003c/code\u003e. \n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n NumberFormat nf \u003d NumberFormat.getInstance(Locale.FRENCH);\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf the locale contains \"nu\" (numbers) and/or \"rg\" (region override) \u003ca href\u003d\"../util/Locale.html#def_locale_extension\"\u003eUnicode extensions\u003c/a\u003e, the decimal digits, and/or the country used for formatting are overridden. If both \"nu\" and \"rg\" are specified, the decimal digits from the \"nu\" extension supersedes the implicit one from the \"rg\" extension. \u003c/p\u003e\n\u003cp\u003eYou can also use a \u003ccode\u003eNumberFormat\u003c/code\u003e to parse numbers: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n myNumber \u003d nf.parse(myString);\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e Use \n\u003ccode\u003egetInstance\u003c/code\u003e or \n\u003ccode\u003egetNumberInstance\u003c/code\u003e to get the normal number format. Use \n\u003ccode\u003egetIntegerInstance\u003c/code\u003e to get an integer number format. Use \n\u003ccode\u003egetCurrencyInstance\u003c/code\u003e to get the currency number format. Use \n\u003ccode\u003egetCompactNumberInstance\u003c/code\u003e to get the compact number format to format a number in shorter form. For example, \n\u003ccode\u003e2000\u003c/code\u003e can be formatted as \n\u003ccode\u003e\"2K\"\u003c/code\u003e in \n\u003ca href\u003d\"../util/Locale.html#US\"\u003e\u003ccode\u003eUS locale\u003c/code\u003e\u003c/a\u003e. Use \n\u003ccode\u003egetPercentInstance\u003c/code\u003e to get a format for displaying percentages. With this format, a fraction like 0.53 is displayed as 53%. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e You can also control the display of numbers with such methods as \u003ccode\u003esetMinimumFractionDigits\u003c/code\u003e. If you want even more control over the format or parsing, or want to give your users more control, you can try casting the \u003ccode\u003eNumberFormat\u003c/code\u003e you get from the factory methods to a \u003ccode\u003eDecimalFormat\u003c/code\u003e or \u003ccode\u003eCompactNumberFormat\u003c/code\u003e depending on the factory method used. This will work for the vast majority of locales; just remember to put it in a \u003ccode\u003etry\u003c/code\u003e block in case you encounter an unusual one. \u003c/p\u003e\n\u003cp\u003e NumberFormat and DecimalFormat are designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these control methods, \u003c/p\u003e\n\u003cp\u003e setParseIntegerOnly : only affects parsing, e.g. if true, \"3456.78\" → 3456 (and leaves the parse position just after index 6) if false, \"3456.78\" → 3456.78 (and leaves the parse position just after index 8) This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use setDecimalSeparatorAlwaysShown. \u003c/p\u003e\n\u003cp\u003e setDecimalSeparatorAlwaysShown : only affects formatting, and only where there might be no digits after the decimal point, such as with a pattern like \"#,##0.##\", e.g., if true, 3456.00 → \"3,456.\" if false, 3456.00 → \"3456\" This is independent of parsing. If you want parsing to stop at the decimal point, use setParseIntegerOnly. \u003c/p\u003e\n\u003cp\u003e You can also use forms of the \u003ccode\u003eparse\u003c/code\u003e and \u003ccode\u003eformat\u003c/code\u003e methods with \u003ccode\u003eParsePosition\u003c/code\u003e and \u003ccode\u003eFieldPosition\u003c/code\u003e to allow you to: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e progressively parse through pieces of a string \u003c/li\u003e\n \u003cli\u003e align the decimal point and other areas \u003c/li\u003e\n\u003c/ul\u003e For example, you can align numbers in two ways: \n\u003col\u003e \n \u003cli\u003e If you are using a monospaced font with spacing for alignment, you can pass the \u003ccode\u003eFieldPosition\u003c/code\u003e in your format call, with \u003ccode\u003efield\u003c/code\u003e \u003d \u003ccode\u003eINTEGER_FIELD\u003c/code\u003e. On output, \u003ccode\u003egetEndIndex\u003c/code\u003e will be set to the offset between the last character of the integer and the decimal. Add (desiredSpaceCount - getEndIndex) spaces at the front of the string. \u003c/li\u003e\n \u003cli\u003e If you are using proportional fonts, instead of padding with spaces, measure the width of the string in pixels from the start to \u003ccode\u003egetEndIndex\u003c/code\u003e. Then move the pen by (desiredPixelWidth - widthToAlignmentPoint) before drawing the text. It also works where there is no decimal, but possibly additional characters at the end, e.g., with parentheses in negative numbers: \"(12)\" for -12. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"synchronization\"\u003eSynchronization\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e Number formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(double,java.lang.StringBuffer,java.text.FieldPosition)\"\u003e\u003ccode\u003eformat(double, StringBuffer, FieldPosition)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(long,java.lang.StringBuffer,java.text.FieldPosition)\"\u003e\u003ccode\u003eformat(long, StringBuffer, FieldPosition)\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#parse(java.lang.String,java.text.ParsePosition)\"\u003e\u003ccode\u003eparse(String, ParsePosition)\u003c/code\u003e\u003c/a\u003e methods may throw \n\u003ccode\u003eNullPointerException\u003c/code\u003e, if any of their parameter is \n\u003ccode\u003enull\u003c/code\u003e. The subclass may provide its own implementation and specification about \n\u003ccode\u003eNullPointerException\u003c/code\u003e. \n\u003cp\u003e The default implementation provides rounding modes defined in \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/RoundingMode.html\" title\u003d\"enum class in java.math\"\u003e\u003ccode\u003eRoundingMode\u003c/code\u003e\u003c/a\u003e for formatting numbers. It uses the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/RoundingMode.html#HALF_EVEN\"\u003eround half-even algorithm\u003c/a\u003e. To change the rounding mode use \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setRoundingMode(java.math.RoundingMode)\"\u003e\u003ccode\u003esetRoundingMode\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003eNumberFormat\u003c/code\u003e returned by the static factory methods is configured to round floating point numbers using half-even rounding (see \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/RoundingMode.html#HALF_EVEN\"\u003e\u003ccode\u003eRoundingMode.HALF_EVEN\u003c/code\u003e\u003c/a\u003e) for formatting.\u003c/p\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ChoiceFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eChoiceFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCompactNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.text.NumberFormat\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}