{
  "packageName": "java.text",
  "simpleName": "SimpleDateFormat",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.DateFormat",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "startDate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "set2DigitYearStart",
      "comment": "Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/SimpleDateFormat.html#get2DigitYearStart()\"\u003e\u003ccode\u003eget2DigitYearStart()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estartDate\u003c/code\u003e - During parsing, two digit years will be placed in the range \n\u003ccode\u003estartDate\u003c/code\u003e to \n\u003ccode\u003estartDate + 100 years\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estartDate\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get2DigitYearStart",
      "comment": "Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/SimpleDateFormat.html#set2DigitYearStart(java.util.Date)\"\u003e\u003ccode\u003eset2DigitYearStart(java.util.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the start of the 100-year period into which two digit years are parsed"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        },
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "toAppendTo"
          }
        },
        {
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats the given Date into a date/time string and appends the result to the given StringBuffer.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003eDateFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the date-time value to be formatted into a date-time string.",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - where the new date-time text is to be appended.",
          "\u003ccode\u003epos\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, given a date-time text \n\u003ccode\u003e\"1996.07.10 AD at 15:08:56 PDT\"\u003c/code\u003e, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#YEAR_FIELD\"\u003e\u003ccode\u003eDateFormat.YEAR_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 4, respectively. Notice that if the same date-time field appears more than once in a pattern, the \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set for the first occurrence of that date-time field. For instance, formatting a \n\u003ccode\u003eDate\u003c/code\u003e to the date-time string \n\u003ccode\u003e\"1 PM PDT (Pacific Daylight Time)\"\u003c/code\u003e using the pattern \n\u003ccode\u003e\"h a z (zzzz)\"\u003c/code\u003e and the alignment field \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#TIMEZONE_FIELD\"\u003e\u003ccode\u003eDateFormat.TIMEZONE_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character \n\u003ccode\u003e\u0027z\u0027\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the parameters is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the formatted date-time string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.AttributedCharacterIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "formatToCharacterIterator",
      "comment": "Formats an Object producing an AttributedCharacterIterator. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String. Each attribute key of the AttributedCharacterIterator will be of type DateFormat.Field, with the corresponding attribute value being the same as the attribute key.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#formatToCharacterIterator(java.lang.Object)\"\u003eformatToCharacterIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if obj is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the Format cannot format the given object, or if the Format\u0027s pattern string is invalid."
        ],
        "return": [
          "AttributedCharacterIterator describing the formatted value."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. This parsing operation uses the calendar to produce a Date. All of the calendar\u0027s date-time fields are cleared before parsing, and the calendar\u0027s default values of the date-time fields are used for any missing date-time information. For example, the year value of the parsed Date is 1970 with GregorianCalendar if no year value is given from the parsing operation. The TimeZone value may be overwritten, depending on the given pattern and the time zone value in text. Any TimeZone value that has previously been set by a call to setTimeZone may need to be restored for further operations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#parse(java.lang.String,java.text.ParsePosition)\"\u003eparse\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003eDateFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - A \n\u003ccode\u003eString\u003c/code\u003e, part of which should be parsed.",
          "\u003ccode\u003epos\u003c/code\u003e - A \n\u003ccode\u003eParsePosition\u003c/code\u003e object with index and error index information as described above."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etext\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null."
        ],
        "return": [
          "A \n\u003ccode\u003eDate\u003c/code\u003e parsed from the string. In case of error, returns null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toPattern",
      "comment": "Returns a pattern string describing this date format.",
      "tagMap": {
        "return": [
          "a pattern string describing this date format."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocalizedPattern",
      "comment": "Returns a localized pattern string describing this date format.",
      "tagMap": {
        "return": [
          "a localized pattern string describing this date format."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "applyPattern",
      "comment": "Applies the given pattern string to this date format.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the new date and time pattern for this date format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given pattern is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "applyLocalizedPattern",
      "comment": "Applies the given localized pattern string to this date format.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - a String to be mapped to the new date and time format pattern for this format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given pattern is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormatSymbols",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDateFormatSymbols",
      "comment": "Gets a copy of the date and time format symbols of this date format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/SimpleDateFormat.html#setDateFormatSymbols(java.text.DateFormatSymbols)\"\u003e\u003ccode\u003esetDateFormatSymbols(java.text.DateFormatSymbols)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the date and time format symbols of this date format"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.DateFormatSymbols",
            "type": "Class"
          },
          "field": {
            "name": "newFormatSymbols"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDateFormatSymbols",
      "comment": "Sets the date and time format symbols of this date format.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/SimpleDateFormat.html#getDateFormatSymbols()\"\u003e\u003ccode\u003egetDateFormatSymbols()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewFormatSymbols\u003c/code\u003e - the new date and time format symbols"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given newFormatSymbols is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of this SimpleDateFormat. This also clones the format\u0027s date format symbols.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003eDateFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this \n\u003ccode\u003eSimpleDateFormat\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this SimpleDateFormat object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003eDateFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this \n\u003ccode\u003eSimpleDateFormat\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the given object with this SimpleDateFormat for equality.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003eDateFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "true if the given object is equal to this \n\u003ccode\u003eSimpleDateFormat\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SimpleDateFormat using the default pattern and date format symbols for the default FORMAT locale. Note: This constructor may not support all locales. For full coverage, use the factory methods in the DateFormat class.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the default FORMAT locale. Note: This constructor may not support all locales. For full coverage, use the factory methods in the DateFormat class. This is equivalent to calling SimpleDateFormat(pattern, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the pattern describing the date and time format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given pattern is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the given locale. Note: This constructor may not support all locales. For full coverage, use the factory methods in the DateFormat class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the pattern describing the date and time format",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale whose date format symbols should be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given pattern or locale is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        },
        {
          "type": {
            "name": "java.text.DateFormatSymbols",
            "type": "Class"
          },
          "field": {
            "name": "formatSymbols"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SimpleDateFormat using the given pattern and date format symbols.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the pattern describing the date and time format",
          "\u003ccode\u003eformatSymbols\u003c/code\u003e - the date format symbols to be used for formatting"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given pattern or formatSymbols is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.text.SimpleDateFormat",
  "comment": "\u003ccode\u003eSimpleDateFormat\u003c/code\u003e is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting (date → text), parsing (text → date), and normalization. \n\u003cp\u003e \u003ccode\u003eSimpleDateFormat\u003c/code\u003e allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either \u003ccode\u003egetTimeInstance\u003c/code\u003e, \u003ccode\u003egetDateInstance\u003c/code\u003e, or \u003ccode\u003egetDateTimeInstance\u003c/code\u003e in \u003ccode\u003eDateFormat\u003c/code\u003e. Each of these class methods can return a date/time formatter initialized with a default format pattern. You may modify the format pattern using the \u003ccode\u003eapplyPattern\u003c/code\u003e methods as desired. For more information on using these methods, see \u003ca href\u003d\"DateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDateFormat\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003ch2\u003eDate and Time Patterns\u003c/h2\u003e \n\u003cp\u003e Date and time formats are specified by \u003cem\u003edate and time pattern\u003c/em\u003e strings. Within date and time pattern strings, unquoted letters from \u003ccode\u003e\u0027A\u0027\u003c/code\u003e to \u003ccode\u003e\u0027Z\u0027\u003c/code\u003e and from \u003ccode\u003e\u0027a\u0027\u003c/code\u003e to \u003ccode\u003e\u0027z\u0027\u003c/code\u003e are interpreted as pattern letters representing the components of a date or time string. Text can be quoted using single quotes (\u003ccode\u003e\u0027\u003c/code\u003e) to avoid interpretation. \u003ccode\u003e\"\u0027\u0027\"\u003c/code\u003e represents a single quote. All other characters are not interpreted; they\u0027re simply copied into the output string during formatting or matched against the input string during parsing. \u003c/p\u003e\n\u003cp\u003e The following pattern letters are defined (all other characters from \u003ccode\u003e\u0027A\u0027\u003c/code\u003e to \u003ccode\u003e\u0027Z\u0027\u003c/code\u003e and from \u003ccode\u003e\u0027a\u0027\u003c/code\u003e to \u003ccode\u003e\u0027z\u0027\u003c/code\u003e are reserved): \u003c/p\u003e\n\u003cblockquote\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption style\u003d\"display:none\"\u003e\n   Chart shows pattern letters, date/time component, presentation, and examples.\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eLetter \u003c/th\u003e\n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eDate or Time Component \u003c/th\u003e\n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003ePresentation \u003c/th\u003e\n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eExamples \u003c/th\u003e\n   \u003c/tr\u003e\n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eG\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eEra designator \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#text\"\u003eText\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eAD\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003ey\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eYear \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#year\"\u003eYear\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e1996\u003c/code\u003e; \u003ccode\u003e96\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eY\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eWeek year \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#year\"\u003eYear\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e2009\u003c/code\u003e; \u003ccode\u003e09\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eM\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eMonth in year (context sensitive) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#month\"\u003eMonth\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eJuly\u003c/code\u003e; \u003ccode\u003eJul\u003c/code\u003e; \u003ccode\u003e07\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eL\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eMonth in year (standalone form) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#month\"\u003eMonth\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eJuly\u003c/code\u003e; \u003ccode\u003eJul\u003c/code\u003e; \u003ccode\u003e07\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003ew\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eWeek in year \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e27\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eW\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eWeek in month \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eD\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eDay in year \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e189\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003ed\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eDay in month \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e10\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eF\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eDay of week in month \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eE\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eDay name in week \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#text\"\u003eText\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eTuesday\u003c/code\u003e; \u003ccode\u003eTue\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eu\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eDay number of week (1 \u003d Monday, ..., 7 \u003d Sunday) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003ea\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eAm/pm marker \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#text\"\u003eText\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003ePM\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eH\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eHour in day (0-23) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003ek\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eHour in day (1-24) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e24\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eK\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eHour in am/pm (0-11) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eh\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eHour in am/pm (1-12) \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e12\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003em\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eMinute in hour \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e30\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003es\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eSecond in minute \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e55\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eS\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eMillisecond \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#number\"\u003eNumber\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e978\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003ez\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eTime zone \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#timezone\"\u003eGeneral time zone\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003ePacific Standard Time\u003c/code\u003e; \u003ccode\u003ePST\u003c/code\u003e; \u003ccode\u003eGMT-08:00\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eZ\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eTime zone \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#rfc822timezone\"\u003eRFC 822 time zone\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e-0800\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eX\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003eTime zone \u003c/td\u003e\n    \u003ctd\u003e\u003ca href\u003d\"#iso8601timezone\"\u003eISO 8601 time zone\u003c/a\u003e \u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e-08\u003c/code\u003e; \u003ccode\u003e-0800\u003c/code\u003e; \u003ccode\u003e-08:00\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e Pattern letters are usually repeated, as their number determines the exact presentation: \n\u003cul\u003e \n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"text\"\u003eText:\u003c/a\u003e\u003c/strong\u003e For formatting, if the number of pattern letters is 4 or more, the full form is used; otherwise a short or abbreviated form is used if available. For parsing, both forms are accepted, independent of the number of pattern letters.\u003cbr\u003e\u003cbr\u003e\u003c/li\u003e \n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"number\"\u003eNumber:\u003c/a\u003e\u003c/strong\u003e For formatting, the number of pattern letters is the minimum number of digits, and shorter numbers are zero-padded to this amount. For parsing, the number of pattern letters is ignored unless it\u0027s needed to separate two adjacent fields.\u003cbr\u003e\u003cbr\u003e\u003c/li\u003e \n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"year\"\u003eYear:\u003c/a\u003e\u003c/strong\u003e If the formatter\u0027s \u003ca href\u003d\"DateFormat.html#getCalendar()\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e is the Gregorian calendar, the following rules are applied.\u003cbr\u003e \n  \u003cul\u003e \n   \u003cli\u003eFor formatting, if the number of pattern letters is 2, the year is truncated to 2 digits; otherwise it is interpreted as a \u003ca href\u003d\"#number\"\u003enumber\u003c/a\u003e. \u003c/li\u003e\n   \u003cli\u003eFor parsing, if the number of pattern letters is more than 2, the year is interpreted literally, regardless of the number of digits. So using the pattern \"MM/dd/yyyy\", \"01/11/12\" parses to Jan 11, 12 A.D. \u003c/li\u003e\n   \u003cli\u003eFor parsing with the abbreviated year pattern (\"y\" or \"yy\"), \u003ccode\u003eSimpleDateFormat\u003c/code\u003e must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the \u003ccode\u003eSimpleDateFormat\u003c/code\u003e instance is created. For example, using a pattern of \"MM/dd/yy\" and a \u003ccode\u003eSimpleDateFormat\u003c/code\u003e instance created on Jan 1, 1997, the string \"01/11/12\" would be interpreted as Jan 11, 2012 while the string \"05/04/64\" would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by \u003ca href\u003d\"../lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eCharacter.isDigit(char)\u003c/code\u003e\u003c/a\u003e, will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn\u0027t all digits (for example, \"-1\"), is interpreted literally. So \"01/02/3\" or \"01/02/003\" are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, \"01/02/-3\" is parsed as Jan 2, 4 BC. \u003c/li\u003e\n  \u003c/ul\u003e Otherwise, calendar system specific forms are applied. For both formatting and parsing, if the number of pattern letters is 4 or more, a calendar specific \u003ca href\u003d\"../util/Calendar.html#LONG\"\u003elong form\u003c/a\u003e is used. Otherwise, a calendar specific \u003ca href\u003d\"../util/Calendar.html#SHORT\"\u003eshort or abbreviated form\u003c/a\u003e is used.\u003cbr\u003e \u003cbr\u003e If week year \u003ccode\u003e\u0027Y\u0027\u003c/code\u003e is specified and the \u003ca href\u003d\"DateFormat.html#getCalendar()\"\u003ecalendar\u003c/a\u003e doesn\u0027t support any \u003ca href\u003d\"../util/GregorianCalendar.html#week_year\"\u003e week years\u003c/a\u003e, the calendar year (\u003ccode\u003e\u0027y\u0027\u003c/code\u003e) is used instead. The support of week years can be tested with a call to \u003ca href\u003d\"DateFormat.html#getCalendar()\"\u003e\u003ccode\u003egetCalendar()\u003c/code\u003e\u003c/a\u003e.\u003ca href\u003d\"../util/Calendar.html#isWeekDateSupported()\"\u003e\u003ccode\u003eisWeekDateSupported()\u003c/code\u003e\u003c/a\u003e.\u003cbr\u003e\u003cbr\u003e\u003c/li\u003e \n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"month\"\u003eMonth:\u003c/a\u003e\u003c/strong\u003e If the number of pattern letters is 3 or more, the month is interpreted as \u003ca href\u003d\"#text\"\u003etext\u003c/a\u003e; otherwise, it is interpreted as a \u003ca href\u003d\"#number\"\u003enumber\u003c/a\u003e.\u003cbr\u003e \n  \u003cul\u003e \n   \u003cli\u003eLetter \u003cem\u003eM\u003c/em\u003e produces context-sensitive month names, such as the embedded form of names. Letter \u003cem\u003eM\u003c/em\u003e is context-sensitive in the sense that when it is used in the standalone pattern, for example, \"MMMM\", it gives the standalone form of a month name and when it is used in the pattern containing other field(s), for example, \"d MMMM\", it gives the format form of a month name. For example, January in the Catalan language is \"de gener\" in the format form while it is \"gener\" in the standalone form. In this case, \"MMMM\" will produce \"gener\" and the month part of the \"d MMMM\" will produce \"de gener\". If a \u003ccode\u003eDateFormatSymbols\u003c/code\u003e has been set explicitly with constructor \u003ca href\u003d\"#%3Cinit%3E(java.lang.String,java.text.DateFormatSymbols)\"\u003e\u003ccode\u003eSimpleDateFormat(String,DateFormatSymbols)\u003c/code\u003e\u003c/a\u003e or method \u003ca href\u003d\"#setDateFormatSymbols(java.text.DateFormatSymbols)\"\u003e\u003ccode\u003esetDateFormatSymbols(DateFormatSymbols)\u003c/code\u003e\u003c/a\u003e, the month names given by the \u003ccode\u003eDateFormatSymbols\u003c/code\u003e are used.\u003c/li\u003e \n   \u003cli\u003eLetter \u003cem\u003eL\u003c/em\u003e produces the standalone form of month names.\u003c/li\u003e \n  \u003c/ul\u003e \u003cbr\u003e\u003c/li\u003e \n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"timezone\"\u003eGeneral time zone:\u003c/a\u003e\u003c/strong\u003e Time zones are interpreted as \u003ca href\u003d\"#text\"\u003etext\u003c/a\u003e if they have names. For time zones representing a GMT offset value, the following syntax is used: \u003cpre\u003e     \u003ca id\u003d\"GMTOffsetTimeZone\"\u003e\u003ci\u003eGMTOffsetTimeZone:\u003c/i\u003e\u003c/a\u003e\n             \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e \u003ccode\u003e:\u003c/code\u003e \u003ci\u003eMinutes\u003c/i\u003e\n     \u003ci\u003eSign:\u003c/i\u003e one of\n             \u003ccode\u003e+ -\u003c/code\u003e\n     \u003ci\u003eHours:\u003c/i\u003e\n             \u003ci\u003eDigit\u003c/i\u003e\n             \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n     \u003ci\u003eMinutes:\u003c/i\u003e\n             \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n     \u003ci\u003eDigit:\u003c/i\u003e one of\n             \u003ccode\u003e0 1 2 3 4 5 6 7 8 9\u003c/code\u003e\u003c/pre\u003e \u003ci\u003eHours\u003c/i\u003e must be between 0 and 23, and \u003ci\u003eMinutes\u003c/i\u003e must be between 00 and 59. The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard. \u003cp\u003eFor parsing, \u003ca href\u003d\"#rfc822timezone\"\u003eRFC 822 time zones\u003c/a\u003e are also accepted.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"rfc822timezone\"\u003eRFC 822 time zone:\u003c/a\u003e\u003c/strong\u003e For formatting, the RFC 822 4-digit time zone format is used: \u003cpre\u003e     \u003ci\u003eRFC822TimeZone:\u003c/i\u003e\n             \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e \u003ci\u003eMinutes\u003c/i\u003e\n     \u003ci\u003eTwoDigitHours:\u003c/i\u003e\n             \u003ci\u003eDigit Digit\u003c/i\u003e\u003c/pre\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e must be between 00 and 23. Other definitions are as for \u003ca href\u003d\"#timezone\"\u003egeneral time zones\u003c/a\u003e. \u003cp\u003eFor parsing, \u003ca href\u003d\"#timezone\"\u003egeneral time zones\u003c/a\u003e are also accepted. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cstrong\u003e\u003ca id\u003d\"iso8601timezone\"\u003eISO 8601 Time zone:\u003c/a\u003e\u003c/strong\u003e The number of pattern letters designates the format for both formatting and parsing as follows: \u003cpre\u003e     \u003ci\u003eISO8601TimeZone:\u003c/i\u003e\n             \u003ci\u003eOneLetterISO8601TimeZone\u003c/i\u003e\n             \u003ci\u003eTwoLetterISO8601TimeZone\u003c/i\u003e\n             \u003ci\u003eThreeLetterISO8601TimeZone\u003c/i\u003e\n     \u003ci\u003eOneLetterISO8601TimeZone:\u003c/i\u003e\n             \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e\n             \u003ccode\u003eZ\u003c/code\u003e\n     \u003ci\u003eTwoLetterISO8601TimeZone:\u003c/i\u003e\n             \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e \u003ci\u003eMinutes\u003c/i\u003e\n             \u003ccode\u003eZ\u003c/code\u003e\n     \u003ci\u003eThreeLetterISO8601TimeZone:\u003c/i\u003e\n             \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e \u003ccode\u003e:\u003c/code\u003e \u003ci\u003eMinutes\u003c/i\u003e\n             \u003ccode\u003eZ\u003c/code\u003e\u003c/pre\u003e Other definitions are as for \u003ca href\u003d\"#timezone\"\u003egeneral time zones\u003c/a\u003e or \u003ca href\u003d\"#rfc822timezone\"\u003eRFC 822 time zones\u003c/a\u003e. \u003cp\u003eFor formatting, if the offset value from GMT is 0, \u003ccode\u003e\"Z\"\u003c/code\u003e is produced. If the number of pattern letters is 1, any fraction of an hour is ignored. For example, if the pattern is \u003ccode\u003e\"X\"\u003c/code\u003e and the time zone is \u003ccode\u003e\"GMT+05:30\"\u003c/code\u003e, \u003ccode\u003e\"+05\"\u003c/code\u003e is produced. \u003c/p\u003e\u003cp\u003eFor parsing, \u003ccode\u003e\"Z\"\u003c/code\u003e is parsed as the UTC time zone designator. \u003ca href\u003d\"#timezone\"\u003eGeneral time zones\u003c/a\u003e are \u003cem\u003enot\u003c/em\u003e accepted. \u003c/p\u003e\u003cp\u003eIf the number of pattern letters is 4 or more, \u003ca href\u003d\"../lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e is thrown when constructing a \u003ccode\u003e SimpleDateFormat\u003c/code\u003e or \u003ca href\u003d\"#applyPattern(java.lang.String)\"\u003eapplying a pattern\u003c/a\u003e. \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003ccode\u003eSimpleDateFormat\u003c/code\u003e also supports \n\u003cem\u003elocalized date and time pattern\u003c/em\u003e strings. In these strings, the pattern letters described above may be replaced with other, locale dependent, pattern letters. \n\u003ccode\u003eSimpleDateFormat\u003c/code\u003e does not deal with the localization of text other than the pattern letters; that\u0027s up to the client of the class. \n\u003cp\u003e\u003c/p\u003e\n\u003ch3\u003eExamples\u003c/h3\u003e The following examples show how date and time patterns are interpreted in the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time in the U.S. Pacific Time time zone. \n\u003cblockquote\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption style\u003d\"display:none\"\u003e\n   Examples of date and time patterns interpreted in the U.S. locale\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eDate and Time Pattern \u003c/th\u003e\n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eResult \u003c/th\u003e\n   \u003c/tr\u003e\n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"yyyy.MM.dd G \u0027at\u0027 HH:mm:ss z\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e2001.07.04 AD at 12:08:56 PDT\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"EEE, MMM d, \u0027\u0027yy\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003eWed, Jul 4, \u002701\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"h:mm a\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e12:08 PM\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"hh \u0027o\u0027\u0027clock\u0027 a, zzzz\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e12 o\u0027clock PM, Pacific Daylight Time\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"K:mm a, z\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e0:08 PM, PDT\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"yyyyy.MMMMM.dd GGG hh:mm aaa\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e02001.July.04 AD 12:08 PM\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"EEE, d MMM yyyy HH:mm:ss Z\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003eWed, 4 Jul 2001 12:08:56 -0700\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"yyMMddHHmmssZ\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e010704120856-0700\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e2001-07-04T12:08:56.235-0700\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSXXX\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e2001-07-04T12:08:56.235-07:00\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\"YYYY-\u0027W\u0027ww-u\"\u003c/code\u003e \u003c/th\u003e\n    \u003ctd\u003e\u003ccode\u003e2001-W27-3\u003c/code\u003e \u003c/td\u003e\n   \u003c/tr\u003e\n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e \n\u003ch3\u003e\u003ca id\u003d\"synchronization\"\u003eSynchronization\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"http://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html\"\u003eJava Tutorial\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTimeZone\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDateFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDateFormatSymbols\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.text.SimpleDateFormat\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}