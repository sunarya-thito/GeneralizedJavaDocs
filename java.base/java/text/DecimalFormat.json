{
  "packageName": "java.text",
  "simpleName": "DecimalFormat",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.NumberFormat",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "number",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "name": "toAppendTo",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "format",
      "comment": "Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of Number. This implementation uses the maximum precision permitted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the number to format",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - the \n\u003ccode\u003eStringBuffer\u003c/code\u003e to which the formatted text is to be appended",
          "\u003ccode\u003epos\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e1234567.89\u003c/code\u003e in \n\u003ccode\u003eLocale.US\u003c/code\u003e locale, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eNumberFormat.INTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 9, respectively for the output string \n\u003ccode\u003e1,234,567.89\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumber\u003c/code\u003e is null or not an instance of \n\u003ccode\u003eNumber\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoAppendTo\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "the value passed in as \n\u003ccode\u003etoAppendTo\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "number",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "name": "result",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "name": "fieldPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats a double to produce a string.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(double,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - The double to format",
          "\u003ccode\u003eresult\u003c/code\u003e - where the text is to be appended",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e1234567.89\u003c/code\u003e in \n\u003ccode\u003eLocale.US\u003c/code\u003e locale, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eNumberFormat.INTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 9, respectively for the output string \n\u003ccode\u003e1,234,567.89\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eresult\u003c/code\u003e or \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "The formatted number string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "number",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "name": "result",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "name": "fieldPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Format a long to produce a string.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(long,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - The long to format",
          "\u003ccode\u003eresult\u003c/code\u003e - where the text is to be appended",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e123456789\u003c/code\u003e in \n\u003ccode\u003eLocale.US\u003c/code\u003e locale, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eNumberFormat.INTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 11, respectively for the output string \n\u003ccode\u003e123,456,789\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eresult\u003c/code\u003e or \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "The formatted number string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.AttributedCharacterIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "formatToCharacterIterator",
      "comment": "Formats an Object producing an AttributedCharacterIterator. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String. Each attribute key of the AttributedCharacterIterator will be of type NumberFormat.Field, with the attribute value being the same as the attribute key.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#formatToCharacterIterator(java.lang.Object)\"\u003eformatToCharacterIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if obj is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - when the Format cannot format the given object.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"
        ],
        "return": [
          "AttributedCharacterIterator describing the formatted value."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. The subclass returned depends on the value of isParseBigDecimal() as well as on the string being parsed. If isParseBigDecimal() is false (the default), most integer values are returned as Long objects, no matter how they are written: \"17\" and \"17.000\" both parse to Long(17). Values that cannot fit into a Long are returned as Doubles. This includes values with a fractional part, infinite values, NaN, and the value -0.0. DecimalFormat does not decide whether to return a Double or a Long based on the presence of a decimal separator in the source string. Doing so would prevent integers that overflow the mantissa of a double, such as \"-9,223,372,036,854,775,808.00\", from being parsed accurately. Callers may use the Number methods doubleValue, longValue, etc., to obtain the type they want. If isParseBigDecimal() is true, values are returned as BigDecimal objects. The values are the ones constructed by BigDecimal(String) for corresponding strings in locale-independent format. The special cases negative and positive infinity and NaN are returned as Double instances holding the values of the corresponding Double constants. DecimalFormat parses all Unicode characters that represent decimal digits, as defined by Character.digit(). In addition, DecimalFormat also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the DecimalFormatSymbols object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isParseIntegerOnly()\"\u003e\u003ccode\u003eNumberFormat.isParseIntegerOnly()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#parseObject(java.lang.String,java.text.ParsePosition)\"\u003e\u003ccode\u003eFormat.parseObject(java.lang.String, java.text.ParsePosition)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#parse(java.lang.String,java.text.ParsePosition)\"\u003eparse\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the string to be parsed",
          "\u003ccode\u003epos\u003c/code\u003e - A \n\u003ccode\u003eParsePosition\u003c/code\u003e object with index and error index information as described above."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etext\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null."
        ],
        "return": [
          "the parsed value, or \n\u003ccode\u003enull\u003c/code\u003e if the parse fails"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DecimalFormatSymbols",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDecimalFormatSymbols",
      "comment": "Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a copy of the desired DecimalFormatSymbols"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.DecimalFormatSymbols",
            "type": "Class"
          },
          "name": "newSymbols",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDecimalFormatSymbols",
      "comment": "Sets the decimal format symbols, which is generally not changed by the programmer or user.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewSymbols\u003c/code\u003e - desired DecimalFormatSymbols"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPositivePrefix",
      "comment": "Get the positive prefix. Examples: +123, $123, sFr123",
      "annotations": [],
      "tagMap": {
        "return": [
          "the positive prefix"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPositivePrefix",
      "comment": "Set the positive prefix. Examples: +123, $123, sFr123",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new positive prefix"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNegativePrefix",
      "comment": "Get the negative prefix. Examples: -123, ($123) (with negative suffix), sFr-123",
      "annotations": [],
      "tagMap": {
        "return": [
          "the negative prefix"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNegativePrefix",
      "comment": "Set the negative prefix. Examples: -123, ($123) (with negative suffix), sFr-123",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new negative prefix"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPositiveSuffix",
      "comment": "Get the positive suffix. Example: 123%",
      "annotations": [],
      "tagMap": {
        "return": [
          "the positive suffix"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPositiveSuffix",
      "comment": "Set the positive suffix. Example: 123%",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new positive suffix"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNegativeSuffix",
      "comment": "Get the negative suffix. Examples: -123%, ($123) (with positive suffixes)",
      "annotations": [],
      "tagMap": {
        "return": [
          "the negative suffix"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNegativeSuffix",
      "comment": "Set the negative suffix. Examples: 123%",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new negative suffix"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMultiplier",
      "comment": "Gets the multiplier for use in percent, per mille, and similar formats.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setMultiplier(int)\"\u003e\u003ccode\u003esetMultiplier(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the multiplier"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMultiplier",
      "comment": "Sets the multiplier for use in percent, per mille, and similar formats. For a percent format, set the multiplier to 100 and the suffixes to have \u0027%\u0027 (for Arabic, use the Arabic percent sign). For a per mille format, set the multiplier to 1000 and the suffixes to have \u0027\\u2030\u0027. Example: with multiplier 100, 1.23 is formatted as \"123\", and \"123\" is parsed into 1.23.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#getMultiplier()\"\u003e\u003ccode\u003egetMultiplier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new multiplier"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGroupingSize",
      "comment": "Return the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the number \"123,456.78\", the grouping size is 3. Grouping size of zero designates that grouping is not used, which provides the same formatting as if calling setGroupingUsed(false).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setGroupingSize(int)\"\u003e\u003ccode\u003esetGroupingSize(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isGroupingUsed()\"\u003e\u003ccode\u003eNumberFormat.isGroupingUsed()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#getGroupingSeparator()\"\u003e\u003ccode\u003eDecimalFormatSymbols.getGroupingSeparator()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the grouping size"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGroupingSize",
      "comment": "Set the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the number \"123,456.78\", the grouping size is 3. Grouping size of zero designates that grouping is not used, which provides the same formatting as if calling setGroupingUsed(false). The value passed in is converted to a byte, which may lose information. Values that are negative or greater than Byte.MAX_VALUE, will throw an IllegalArgumentException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#getGroupingSize()\"\u003e\u003ccode\u003egetGroupingSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setGroupingUsed(boolean)\"\u003e\u003ccode\u003eNumberFormat.setGroupingUsed(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setGroupingSeparator(char)\"\u003e\u003ccode\u003eDecimalFormatSymbols.setGroupingSeparator(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new grouping size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewValue\u003c/code\u003e is negative or greater than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html#MAX_VALUE\"\u003e\u003ccode\u003eByte.MAX_VALUE\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDecimalSeparatorAlwaysShown",
      "comment": "Allows you to get the behavior of the decimal separator with integers. (The decimal separator will always appear with decimals.) Example: Decimal ON: 12345 → 12345.; OFF: 12345 → 12345",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the decimal separator is always shown; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDecimalSeparatorAlwaysShown",
      "comment": "Allows you to set the behavior of the decimal separator with integers. (The decimal separator will always appear with decimals.) Example: Decimal ON: 12345 → 12345.; OFF: 12345 → 12345",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the decimal separator is always shown; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isParseBigDecimal",
      "comment": "Returns whether the parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal. The default value is false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setParseBigDecimal(boolean)\"\u003e\u003ccode\u003esetParseBigDecimal(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the parse method returns BigDecimal; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParseBigDecimal",
      "comment": "Sets whether the parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#isParseBigDecimal()\"\u003e\u003ccode\u003eisParseBigDecimal()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the parse method returns BigDecimal; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Standard override; no change in semantics.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Overrides equals",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Overrides hashCode",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toPattern",
      "comment": "Synthesizes a pattern string that represents the current state of this Format object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#applyPattern(java.lang.String)\"\u003e\u003ccode\u003eapplyPattern(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a pattern string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocalizedPattern",
      "comment": "Synthesizes a localized pattern string that represents the current state of this Format object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#applyPattern(java.lang.String)\"\u003e\u003ccode\u003eapplyPattern(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a localized pattern string"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pattern",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "applyPattern",
      "comment": "Apply the given pattern to this Format object. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon Example \"#,#00.0#\" → 1,234.56 This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. Example: \"#,#00.0#;(#,#00.0#)\" for negatives in parentheses. In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - a new pattern"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epattern\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pattern",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "applyLocalizedPattern",
      "comment": "Apply the given pattern to this Format object. The pattern is assumed to be in a localized notation. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon Example \"#,#00.0#\" → 1,234.56 This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. Example: \"#,#00.0#;(#,#00.0#)\" for negatives in parentheses. In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - a new pattern"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epattern\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumIntegerDigits",
      "comment": "Sets the maximum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 309 is used. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumIntegerDigits(int)\"\u003e\u003ccode\u003eNumberFormat.setMaximumIntegerDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumIntegerDigits(int)\"\u003esetMaximumIntegerDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the maximum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumIntegerDigits",
      "comment": "Sets the minimum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 309 is used. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumIntegerDigits(int)\"\u003e\u003ccode\u003eNumberFormat.setMinimumIntegerDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumIntegerDigits(int)\"\u003esetMinimumIntegerDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the minimum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumFractionDigits",
      "comment": "Sets the maximum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 340 is used. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumFractionDigits(int)\"\u003e\u003ccode\u003eNumberFormat.setMaximumFractionDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumFractionDigits(int)\"\u003esetMaximumFractionDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the maximum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumFractionDigits",
      "comment": "Sets the minimum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 340 is used. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumFractionDigits(int)\"\u003e\u003ccode\u003eNumberFormat.setMinimumFractionDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumFractionDigits(int)\"\u003esetMinimumFractionDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the minimum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumIntegerDigits",
      "comment": "Gets the maximum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 309 is used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setMaximumIntegerDigits(int)\"\u003e\u003ccode\u003esetMaximumIntegerDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMaximumIntegerDigits()\"\u003egetMaximumIntegerDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the maximum number of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumIntegerDigits",
      "comment": "Gets the minimum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 309 is used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setMinimumIntegerDigits(int)\"\u003e\u003ccode\u003esetMinimumIntegerDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMinimumIntegerDigits()\"\u003egetMinimumIntegerDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the minimum number of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumFractionDigits",
      "comment": "Gets the maximum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 340 is used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setMaximumFractionDigits(int)\"\u003e\u003ccode\u003esetMaximumFractionDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMaximumFractionDigits()\"\u003egetMaximumFractionDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the maximum number of digits."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumFractionDigits",
      "comment": "Gets the minimum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 340 is used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setMinimumFractionDigits(int)\"\u003e\u003ccode\u003esetMinimumFractionDigits(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMinimumFractionDigits()\"\u003egetMinimumFractionDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the minimum number of digits"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Currency",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrency",
      "comment": "Gets the currency used by this decimal format when formatting currency values. The currency is obtained by calling DecimalFormatSymbols.getCurrency on this number format\u0027s symbols.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getCurrency()\"\u003egetCurrency\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the currency used by this decimal format, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Currency",
            "type": "Class"
          },
          "name": "currency",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurrency",
      "comment": "Sets the currency used by this number format when formatting currency values. This does not update the minimum or maximum number of fraction digits used by the number format. The currency is set by calling DecimalFormatSymbols.setCurrency on this number format\u0027s symbols.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setCurrency(java.util.Currency)\"\u003esetCurrency\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecurrency\u003c/code\u003e - the new currency to be used by this decimal format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecurrency\u003c/code\u003e is null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.RoundingMode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoundingMode",
      "comment": "Gets the RoundingMode used in this DecimalFormat.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#setRoundingMode(java.math.RoundingMode)\"\u003e\u003ccode\u003esetRoundingMode(RoundingMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getRoundingMode()\"\u003egetRoundingMode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The \n\u003ccode\u003eRoundingMode\u003c/code\u003e used for this DecimalFormat."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.RoundingMode",
            "type": "Class"
          },
          "name": "roundingMode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRoundingMode",
      "comment": "Sets the RoundingMode used in this DecimalFormat.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#getRoundingMode()\"\u003e\u003ccode\u003egetRoundingMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setRoundingMode(java.math.RoundingMode)\"\u003esetRoundingMode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eroundingMode\u003c/code\u003e - The \n\u003ccode\u003eRoundingMode\u003c/code\u003e to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003c/code\u003e is null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DecimalFormat using the default pattern and symbols for the default FORMAT locale. This is a convenient way to obtain a DecimalFormat when internationalization is not the main concern. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getNumberInstance. These factories will return the most appropriate sub-class of NumberFormat for a given locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getInstance()\"\u003e\u003ccode\u003eNumberFormat.getInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getNumberInstance()\"\u003e\u003ccode\u003eNumberFormat.getNumberInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getCurrencyInstance()\"\u003e\u003ccode\u003eNumberFormat.getCurrencyInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getPercentInstance()\"\u003e\u003ccode\u003eNumberFormat.getPercentInstance()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pattern",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DecimalFormat using the given pattern and the symbols for the default FORMAT locale. This is a convenient way to obtain a DecimalFormat when internationalization is not the main concern. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getNumberInstance. These factories will return the most appropriate sub-class of NumberFormat for a given locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getInstance()\"\u003e\u003ccode\u003eNumberFormat.getInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getNumberInstance()\"\u003e\u003ccode\u003eNumberFormat.getNumberInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getCurrencyInstance()\"\u003e\u003ccode\u003eNumberFormat.getCurrencyInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getPercentInstance()\"\u003e\u003ccode\u003eNumberFormat.getPercentInstance()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - a non-localized pattern string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epattern\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pattern",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.DecimalFormatSymbols",
            "type": "Class"
          },
          "name": "symbols",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DecimalFormat using the given pattern and symbols. Use this constructor when you need to completely customize the behavior of the format. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getInstance or getCurrencyInstance. If you need only minor adjustments to a standard format, you can modify the format returned by a NumberFormat factory method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getInstance()\"\u003e\u003ccode\u003eNumberFormat.getInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getNumberInstance()\"\u003e\u003ccode\u003eNumberFormat.getNumberInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getCurrencyInstance()\"\u003e\u003ccode\u003eNumberFormat.getCurrencyInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getPercentInstance()\"\u003e\u003ccode\u003eNumberFormat.getPercentInstance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - a non-localized pattern string",
          "\u003ccode\u003esymbols\u003c/code\u003e - the set of symbols to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the given arguments is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given pattern is invalid"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.text.DecimalFormat",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"http://docs.oracle.com/javase/tutorial/i18n/format/decimalFormat.html\"\u003eJava Tutorial\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParsePosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eParsePosition\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.text.DecimalFormat\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}