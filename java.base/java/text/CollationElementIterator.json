{
  "packageName": "java.text",
  "simpleName": "CollationElementIterator",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NULLORDER",
      "comment": "Null order which indicates the end of string is reached by the cursor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.CollationElementIterator.NULLORDER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Resets the cursor to the beginning of the string. The next call to next() will return the first collation element in the string.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "next",
      "comment": "Get the next collation element in the string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn\u0027t necessarily a one-to-one mapping from characters to collation elements, this doesn\u0027t mean the same thing as \"return the collation element [or ordering priority] of the next character in the string\". This function returns the collation element that the iterator is currently pointing to and then updates the internal pointer to point to the next element. previous() updates the pointer first and then returns the element. This means that when you change direction while iterating (i.e., call next() and then call previous(), or call previous() and then call next()), you\u0027ll get back the same element twice.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the next collation element"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "previous",
      "comment": "Get the previous collation element in the string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn\u0027t necessarily a one-to-one mapping from characters to collation elements, this doesn\u0027t mean the same thing as \"return the collation element [or ordering priority] of the previous character in the string\". This function updates the iterator\u0027s internal pointer to point to the collation element preceding the one it\u0027s currently pointing to and then returns that element, while next() returns the current element and then updates the pointer. This means that when you change direction while iterating (i.e., call next() and then call previous(), or call previous() and then call next()), you\u0027ll get back the same element twice.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the previous collation element"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "order",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "primaryOrder",
      "comment": "Return the primary component of a collation element.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eorder\u003c/code\u003e - the collation element"
        ],
        "return": [
          "the element\u0027s primary component"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "order",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "secondaryOrder",
      "comment": "Return the secondary component of a collation element.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eorder\u003c/code\u003e - the collation element"
        ],
        "return": [
          "the element\u0027s secondary component"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "order",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "tertiaryOrder",
      "comment": "Return the tertiary component of a collation element.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eorder\u003c/code\u003e - the collation element"
        ],
        "return": [
          "the element\u0027s tertiary component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newOffset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOffset",
      "comment": "Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements). The value returned by the next call to next() will be the collation element corresponding to the specified position in the text. If that position is in the middle of a contracting character sequence, the result of the next call to next() is the collation element for that sequence. This means that getOffset() is not guaranteed to return the same value as was passed to a preceding call to setOffset().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewOffset\u003c/code\u003e - The new character offset into the original text."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffset",
      "comment": "Returns the character offset in the original text corresponding to the next collation element. (That is, getOffset() returns the position in the text corresponding to the collation element that will be returned by the next call to next().) This value will always be the index of the FIRST character corresponding to the collation element (a contracting character sequence is when two or more characters all correspond to the same collation element). This means if you do setOffset(x) followed immediately by getOffset(), getOffset() won\u0027t necessarily return x.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The character offset in the original text corresponding to the collation element that will be returned by the next call to next()."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "order",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxExpansion",
      "comment": "Return the maximum length of any expansion sequences that end with the specified comparison order.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eorder\u003c/code\u003e - a collation order returned by previous or next."
        ],
        "return": [
          "the maximum length of any expansion sequences ending with the specified order."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Set a new string over which to iterate.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the new source text"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Set a new string over which to iterate.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the new source text."
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.text.CollationElementIterator",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/RuleBasedCollator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eRuleBasedCollator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}