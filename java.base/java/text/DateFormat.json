{
  "packageName": "java.text",
  "simpleName": "DateFormat",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.Format",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "calendar",
      "comment": "The Calendar instance used for calculating the date-time fields and the instant of time. This field is used for both formatting and parsing. Subclasses should initialize this field to a Calendar appropriate for the Locale associated with this DateFormat.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "numberFormat",
      "comment": "The number formatter that DateFormat uses to format numbers in dates and times. Subclasses should initialize this to a number format appropriate for the locale associated with this DateFormat.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ERA_FIELD",
      "comment": "Useful constant for ERA field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.ERA_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "YEAR_FIELD",
      "comment": "Useful constant for YEAR field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.YEAR_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MONTH_FIELD",
      "comment": "Useful constant for MONTH field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.MONTH_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DATE_FIELD",
      "comment": "Useful constant for DATE field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.DATE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HOUR_OF_DAY1_FIELD",
      "comment": "Useful constant for one-based HOUR_OF_DAY field alignment. Used in FieldPosition of date/time formatting. HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock. For example, 23:59 + 01:00 results in 24:59.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.HOUR_OF_DAY1_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HOUR_OF_DAY0_FIELD",
      "comment": "Useful constant for zero-based HOUR_OF_DAY field alignment. Used in FieldPosition of date/time formatting. HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock. For example, 23:59 + 01:00 results in 00:59.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.HOUR_OF_DAY0_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MINUTE_FIELD",
      "comment": "Useful constant for MINUTE field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.MINUTE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SECOND_FIELD",
      "comment": "Useful constant for SECOND field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.SECOND_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MILLISECOND_FIELD",
      "comment": "Useful constant for MILLISECOND field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.MILLISECOND_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_WEEK_FIELD",
      "comment": "Useful constant for DAY_OF_WEEK field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.DAY_OF_WEEK_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_YEAR_FIELD",
      "comment": "Useful constant for DAY_OF_YEAR field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.DAY_OF_YEAR_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_WEEK_IN_MONTH_FIELD",
      "comment": "Useful constant for DAY_OF_WEEK_IN_MONTH field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEEK_OF_YEAR_FIELD",
      "comment": "Useful constant for WEEK_OF_YEAR field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.WEEK_OF_YEAR_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEEK_OF_MONTH_FIELD",
      "comment": "Useful constant for WEEK_OF_MONTH field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.WEEK_OF_MONTH_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AM_PM_FIELD",
      "comment": "Useful constant for AM_PM field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.AM_PM_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HOUR1_FIELD",
      "comment": "Useful constant for one-based HOUR field alignment. Used in FieldPosition of date/time formatting. HOUR1_FIELD is used for the one-based 12-hour clock. For example, 11:30 PM + 1 hour results in 12:30 AM.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.HOUR1_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HOUR0_FIELD",
      "comment": "Useful constant for zero-based HOUR field alignment. Used in FieldPosition of date/time formatting. HOUR0_FIELD is used for the zero-based 12-hour clock. For example, 11:30 PM + 1 hour results in 00:30 AM.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.HOUR0_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TIMEZONE_FIELD",
      "comment": "Useful constant for TIMEZONE field alignment. Used in FieldPosition of date/time formatting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.TIMEZONE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FULL",
      "comment": "Constant for full style pattern.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.FULL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LONG",
      "comment": "Constant for long style pattern.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.LONG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MEDIUM",
      "comment": "Constant for medium style pattern.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.MEDIUM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SHORT",
      "comment": "Constant for short style pattern.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.SHORT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT",
      "comment": "Constant for default style pattern. Its value is MEDIUM.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.text.DateFormat.DEFAULT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "toAppendTo"
          }
        },
        {
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "field": {
            "name": "fieldPosition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "format",
      "comment": "Formats the given Object into a date-time string. The formatted string is appended to the given StringBuffer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFormat\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - Must be a \n\u003ccode\u003eDate\u003c/code\u003e or a \n\u003ccode\u003eNumber\u003c/code\u003e representing a millisecond offset from the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#Epoch\"\u003eEpoch\u003c/a\u003e.",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - The string buffer for the returning date-time string.",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, given a date-time text \n\u003ccode\u003e\"1996.07.10 AD at 15:08:56 PDT\"\u003c/code\u003e, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#YEAR_FIELD\"\u003e\u003ccode\u003eYEAR_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 4, respectively. Notice that if the same date-time field appears more than once in a pattern, the \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set for the first occurrence of that date-time field. For instance, formatting a \n\u003ccode\u003eDate\u003c/code\u003e to the date-time string \n\u003ccode\u003e\"1 PM PDT (Pacific Daylight Time)\"\u003c/code\u003e using the pattern \n\u003ccode\u003e\"h a z (zzzz)\"\u003c/code\u003e and the alignment field \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#TIMEZONE_FIELD\"\u003e\u003ccode\u003eTIMEZONE_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character \n\u003ccode\u003e\u0027z\u0027\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eFormat\u003c/code\u003e cannot format the given \n\u003ccode\u003eobj\u003c/code\u003e."
        ],
        "return": [
          "the string buffer passed in as \n\u003ccode\u003etoAppendTo\u003c/code\u003e, with formatted text appended."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        },
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "toAppendTo"
          }
        },
        {
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "field": {
            "name": "fieldPosition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "format",
      "comment": "Formats a Date into a date-time string. The formatted string is appended to the given StringBuffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - a Date to be formatted into a date-time string.",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - the string buffer for the returning date-time string.",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, given a date-time text \n\u003ccode\u003e\"1996.07.10 AD at 15:08:56 PDT\"\u003c/code\u003e, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#YEAR_FIELD\"\u003e\u003ccode\u003eYEAR_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 4, respectively. Notice that if the same date-time field appears more than once in a pattern, the \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set for the first occurrence of that date-time field. For instance, formatting a \n\u003ccode\u003eDate\u003c/code\u003e to the date-time string \n\u003ccode\u003e\"1 PM PDT (Pacific Daylight Time)\"\u003c/code\u003e using the pattern \n\u003ccode\u003e\"h a z (zzzz)\"\u003c/code\u003e and the alignment field \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#TIMEZONE_FIELD\"\u003e\u003ccode\u003eTIMEZONE_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character \n\u003ccode\u003e\u0027z\u0027\u003c/code\u003e."
        ],
        "return": [
          "the string buffer passed in as \n\u003ccode\u003etoAppendTo\u003c/code\u003e, with formatted text appended."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "format",
      "comment": "Formats a Date into a date-time string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the time value to be formatted into a date-time string."
        ],
        "return": [
          "the formatted date-time string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parses text from the beginning of the given string to produce a date. The method may not use the entire text of the given string. See the parse(String, ParsePosition) method for more information on date parsing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - A \n\u003ccode\u003eString\u003c/code\u003e whose beginning should be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if the beginning of the specified string cannot be parsed."
        ],
        "return": [
          "A \n\u003ccode\u003eDate\u003c/code\u003e parsed from the string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "parse",
      "comment": "Parse a date/time string according to the given parse position. For example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date that is equivalent to Date(837039900000L). By default, parsing is lenient: If the input is not in the form used by this object\u0027s format method but can still be parsed as a date, then the parse succeeds. Clients may insist on strict adherence to the format by calling setLenient(false). This parsing operation uses the calendar to produce a Date. As a result, the calendar\u0027s date-time fields and the TimeZone value may have been overwritten, depending on subclass implementations. Any TimeZone value that has previously been set by a call to setTimeZone may need to be restored for further operations.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The date/time string to be parsed",
          "\u003ccode\u003epos\u003c/code\u003e - On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed."
        ],
        "return": [
          "A \n\u003ccode\u003eDate\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if the input could not be parsed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parseObject",
      "comment": "Parses text from a string to produce a Date. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the parse(String, ParsePosition) method for more information on date parsing.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#parseObject(java.lang.String,java.text.ParsePosition)\"\u003eparseObject\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - A \n\u003ccode\u003eString\u003c/code\u003e, part of which should be parsed.",
          "\u003ccode\u003epos\u003c/code\u003e - A \n\u003ccode\u003eParsePosition\u003c/code\u003e object with index and error index information as described above."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null."
        ],
        "return": [
          "A \n\u003ccode\u003eDate\u003c/code\u003e parsed from the string. In case of error, returns null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTimeInstance",
      "comment": "Gets the time formatter with the default formatting style for the default FORMAT locale. This is equivalent to calling getTimeInstance(DEFAULT, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTimeInstance",
      "comment": "Gets the time formatter with the given formatting style for the default FORMAT locale. This is equivalent to calling getTimeInstance(style, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the given formatting style. For example, SHORT for \"h:mm a\" in the US locale."
        ],
        "return": [
          "a time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "aLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTimeInstance",
      "comment": "Gets the time formatter with the given formatting style for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the given formatting style. For example, SHORT for \"h:mm a\" in the US locale.",
          "\u003ccode\u003eaLocale\u003c/code\u003e - the given locale."
        ],
        "return": [
          "a time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDateInstance",
      "comment": "Gets the date formatter with the default formatting style for the default FORMAT locale. This is equivalent to calling getDateInstance(DEFAULT, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a date formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDateInstance",
      "comment": "Gets the date formatter with the given formatting style for the default FORMAT locale. This is equivalent to calling getDateInstance(style, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale."
        ],
        "return": [
          "a date formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "aLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDateInstance",
      "comment": "Gets the date formatter with the given formatting style for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the given formatting style. For example, SHORT for \"M/d/yy\" in the US locale.",
          "\u003ccode\u003eaLocale\u003c/code\u003e - the given locale."
        ],
        "return": [
          "a date formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDateTimeInstance",
      "comment": "Gets the date/time formatter with the default formatting style for the default FORMAT locale. This is equivalent to calling getDateTimeInstance(DEFAULT, DEFAULT, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a date/time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dateStyle"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "timeStyle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDateTimeInstance",
      "comment": "Gets the date/time formatter with the given date and time formatting styles for the default FORMAT locale. This is equivalent to calling getDateTimeInstance(dateStyle, timeStyle, Locale.getDefault(Locale.Category.FORMAT)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(java.util.Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#FORMAT\"\u003e\u003ccode\u003eLocale.Category.FORMAT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edateStyle\u003c/code\u003e - the given date formatting style. For example, SHORT for \"M/d/yy\" in the US locale.",
          "\u003ccode\u003etimeStyle\u003c/code\u003e - the given time formatting style. For example, SHORT for \"h:mm a\" in the US locale."
        ],
        "return": [
          "a date/time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dateStyle"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "timeStyle"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "aLocale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDateTimeInstance",
      "comment": "Gets the date/time formatter with the given formatting styles for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edateStyle\u003c/code\u003e - the given date formatting style.",
          "\u003ccode\u003etimeStyle\u003c/code\u003e - the given time formatting style.",
          "\u003ccode\u003eaLocale\u003c/code\u003e - the given locale."
        ],
        "return": [
          "a date/time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.DateFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Get a default date/time formatter that uses the SHORT style for both the date and the time.",
      "tagMap": {
        "return": [
          "a date/time formatter"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances. The returned array represents the union of locales supported by the Java runtime and by installed DateFormatProvider implementations. It must contain at least a Locale instance equal to Locale.US.",
      "tagMap": {
        "return": [
          "An array of locales for which localized \n\u003ccode\u003eDateFormat\u003c/code\u003e instances are available."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "newCalendar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCalendar",
      "comment": "Set the calendar to be used by this date format. Initially, the default calendar for the specified or default locale is used. Any TimeZone and leniency values that have previously been set are overwritten by newCalendar\u0027s values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewCalendar\u003c/code\u003e - the new \n\u003ccode\u003eCalendar\u003c/code\u003e to be used by the date format"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCalendar",
      "comment": "Gets the calendar associated with this date/time formatter.",
      "tagMap": {
        "return": [
          "the calendar associated with this date/time formatter."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.NumberFormat",
            "type": "Class"
          },
          "field": {
            "name": "newNumberFormat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNumberFormat",
      "comment": "Allows you to set the number formatter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewNumberFormat\u003c/code\u003e - the given new NumberFormat."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.NumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNumberFormat",
      "comment": "Gets the number formatter which this date/time formatter uses to format and parse a time.",
      "tagMap": {
        "return": [
          "the number formatter which this date/time formatter uses."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeZone",
      "comment": "Sets the time zone for the calendar of this DateFormat object. This method is equivalent to the following call. \n getCalendar().setTimeZone(zone)\n The TimeZone set by this method is overwritten by a setCalendar call. The TimeZone set by this method may be overwritten as a result of a call to the parse method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the given new time zone."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.TimeZone",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeZone",
      "comment": "Gets the time zone. This method is equivalent to the following call. \n getCalendar().getTimeZone()",
      "tagMap": {
        "return": [
          "the time zone associated with the calendar of DateFormat."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "lenient"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLenient",
      "comment": "Specify whether or not date/time parsing is to be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object\u0027s format. With strict parsing, inputs must match this object\u0027s format. This method is equivalent to the following call. \n getCalendar().setLenient(lenient)\n This leniency value is overwritten by a call to setCalendar().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setLenient(boolean)\"\u003e\u003ccode\u003eCalendar.setLenient(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elenient\u003c/code\u003e - when \n\u003ccode\u003etrue\u003c/code\u003e, parsing is lenient"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLenient",
      "comment": "Tell whether date/time parsing is to be lenient. This method is equivalent to the following call. \n getCalendar().isLenient()",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isLenient()\"\u003e\u003ccode\u003eCalendar.isLenient()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#calendar\"\u003e\u003ccode\u003ecalendar\u003c/code\u003e\u003c/a\u003e is lenient; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Overrides hashCode",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Overrides equals",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Overrides Cloneable",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Create a new date format.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.text.DateFormat$Field"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.text.DateFormat",
  "comment": "\u003ccode\u003eDateFormat\u003c/code\u003e is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, such as \n\u003ca href\u003d\"SimpleDateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eSimpleDateFormat\u003c/code\u003e\u003c/a\u003e, allows for formatting (i.e., date → text), parsing (text → date), and normalization. The date is represented as a \n\u003ccode\u003eDate\u003c/code\u003e object or as the milliseconds since January 1, 1970, 00:00:00 GMT. \n\u003cp\u003e\u003ccode\u003eDateFormat\u003c/code\u003e provides many class methods for obtaining default date/time formatters based on the default or a given locale and a number of formatting styles. The formatting styles include \u003ca href\u003d\"#FULL\"\u003e\u003ccode\u003eFULL\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#MEDIUM\"\u003e\u003ccode\u003eMEDIUM\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e. More detail and examples of using these styles are provided in the method descriptions. \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eDateFormat\u003c/code\u003e helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar format: lunar vs. solar. \u003c/p\u003e\n\u003cp\u003eTo format a date for the current Locale, use one of the static factory methods: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n myString \u003d DateFormat.getDateInstance().format(myDate);\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf you are formatting multiple dates, it is more efficient to get the format and use it multiple times so that the system doesn\u0027t have to fetch the information about the local language and country conventions multiple times. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n DateFormat df \u003d DateFormat.getDateInstance();\n for (int i \u003d 0; i \u0026lt; myDate.length; ++i) {\n     output.println(df.format(myDate[i]) + \"; \");\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eTo format a date for a different Locale, specify it in the call to \u003ca href\u003d\"#getDateInstance(int,java.util.Locale)\"\u003e\u003ccode\u003egetDateInstance()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n DateFormat df \u003d DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf the specified locale contains \"ca\" (calendar), \"rg\" (region override), and/or \"tz\" (timezone) \u003ca href\u003d\"../util/Locale.html#def_locale_extension\"\u003eUnicode extensions\u003c/a\u003e, the calendar, the country and/or the time zone for formatting are overridden. If both \"ca\" and \"rg\" are specified, the calendar from the \"ca\" extension supersedes the implicit one from the \"rg\" extension. \u003c/p\u003e\n\u003cp\u003eYou can use a DateFormat to parse also. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n myDate \u003d df.parse(myString);\n \u003c/code\u003e\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003egetDateInstance\u003c/code\u003e to get the normal date format for that country. There are other static factory methods available. Use \u003ccode\u003egetTimeInstance\u003c/code\u003e to get the time format for that country. Use \u003ccode\u003egetDateTimeInstance\u003c/code\u003e to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from \u003ca href\u003d\"#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e to \u003ca href\u003d\"#MEDIUM\"\u003e\u003ccode\u003eMEDIUM\u003c/code\u003e\u003c/a\u003e to \u003ca href\u003d\"#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e to \u003ca href\u003d\"#FULL\"\u003e\u003ccode\u003eFULL\u003c/code\u003e\u003c/a\u003e. The exact result depends on the locale, but generally: \u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ca href\u003d\"#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e is completely numeric, such as \u003ccode\u003e12.13.52\u003c/code\u003e or \u003ccode\u003e3:30pm\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#MEDIUM\"\u003e\u003ccode\u003eMEDIUM\u003c/code\u003e\u003c/a\u003e is longer, such as \u003ccode\u003eJan 12, 1952\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e is longer, such as \u003ccode\u003eJanuary 12, 1952\u003c/code\u003e or \u003ccode\u003e3:30:32pm\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#FULL\"\u003e\u003ccode\u003eFULL\u003c/code\u003e\u003c/a\u003e is pretty completely specified, such as \u003ccode\u003eTuesday, April 12, 1952 AD or 3:30:42pm PST\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eYou can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting the \u003ccode\u003eDateFormat\u003c/code\u003e you get from the factory methods to a \u003ca href\u003d\"SimpleDateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eSimpleDateFormat\u003c/code\u003e\u003c/a\u003e. This will work for the majority of countries; just remember to put it in a \u003ccode\u003etry\u003c/code\u003e block in case you encounter an unusual one. \u003c/p\u003e\n\u003cp\u003eYou can also use forms of the parse and format methods with \u003ca href\u003d\"ParsePosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eParsePosition\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e to allow you to \u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003eprogressively parse through pieces of a string. \u003c/li\u003e\n \u003cli\u003ealign any particular field, or find out where it is for selection on the screen. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"synchronization\"\u003eSynchronization\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "\u003cul\u003e\n \u003cli\u003eThe \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)\"\u003e\u003ccode\u003eformat(Date, StringBuffer, FieldPosition)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#parse(java.lang.String,java.text.ParsePosition)\"\u003e\u003ccode\u003eparse(String, ParsePosition)\u003c/code\u003e\u003c/a\u003e methods may throw \u003ccode\u003eNullPointerException\u003c/code\u003e, if any of their parameter is \u003ccode\u003enull\u003c/code\u003e. The subclass may provide its own implementation and specification about \u003ccode\u003eNullPointerException\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003eThe \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#setCalendar(java.util.Calendar)\"\u003e\u003ccode\u003esetCalendar(Calendar)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#setNumberFormat(java.text.NumberFormat)\"\u003e\u003ccode\u003esetNumberFormat(NumberFormat)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#setTimeZone(java.util.TimeZone)\"\u003e\u003ccode\u003esetTimeZone(TimeZone)\u003c/code\u003e\u003c/a\u003e methods do not throw \u003ccode\u003eNullPointerException\u003c/code\u003e when their parameter is \u003ccode\u003enull\u003c/code\u003e, but any subsequent operations on the same instance may throw \u003ccode\u003eNullPointerException\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003eThe \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#getCalendar()\"\u003e\u003ccode\u003egetCalendar()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#getNumberFormat()\"\u003e\u003ccode\u003egetNumberFormat()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#getTimeZone()\"\u003e\u003ccode\u003egetTimeZone()\u003c/code\u003e\u003c/a\u003e methods may return \u003ccode\u003enull\u003c/code\u003e, if the respective values of this instance is set to \u003ccode\u003enull\u003c/code\u003e through the corresponding setter methods. For Example: \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#getTimeZone()\"\u003e\u003ccode\u003egetTimeZone()\u003c/code\u003e\u003c/a\u003e may return \u003ccode\u003enull\u003c/code\u003e, if the \u003ccode\u003eTimeZone\u003c/code\u003e value of this instance is set as \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#setTimeZone(java.util.TimeZone)\"\u003e\u003ccode\u003esetTimeZone(null)\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e \n\u003c/ul\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/SimpleDateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eSimpleDateFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/GregorianCalendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eGregorianCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTimeZone\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.text.DateFormat\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}