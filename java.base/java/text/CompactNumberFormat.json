{
  "packageName": "java.text",
  "simpleName": "CompactNumberFormat",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.NumberFormat",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "number",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "name": "toAppendTo",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "name": "fieldPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "format",
      "comment": "Formats a number to produce a string representing its compact form. The number can be of any subclass of Number.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the number to format",
          "\u003ccode\u003etoAppendTo\u003c/code\u003e - the \n\u003ccode\u003eStringBuffer\u003c/code\u003e to which the formatted text is to be appended",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, for formatting a number \n\u003ccode\u003e123456789\u003c/code\u003e in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#US\"\u003e\u003ccode\u003eUS locale\u003c/code\u003e\u003c/a\u003e, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eNumberFormat.INTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 3, respectively for the output string \n\u003ccode\u003e123M\u003c/code\u003e. Similarly, positions of the prefix and the suffix fields can be obtained using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Field.html#PREFIX\"\u003e\u003ccode\u003eNumberFormat.Field.PREFIX\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Field.html#SUFFIX\"\u003e\u003ccode\u003eNumberFormat.Field.SUFFIX\u003c/code\u003e\u003c/a\u003e respectively."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumber\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or not an instance of \n\u003ccode\u003eNumber\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoAppendTo\u003c/code\u003e or \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to \n\u003ccode\u003eRoundingMode.UNNECESSARY\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eStringBuffer\u003c/code\u003e passed in as \n\u003ccode\u003etoAppendTo\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "number",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "name": "result",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "name": "fieldPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats a double to produce a string representing its compact form.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(double,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the double number to format",
          "\u003ccode\u003eresult\u003c/code\u003e - where the text is to be appended",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, to format a number \n\u003ccode\u003e1234567.89\u003c/code\u003e in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#US\"\u003e\u003ccode\u003eUS locale\u003c/code\u003e\u003c/a\u003e if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eNumberFormat.INTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 1, respectively for the output string \n\u003ccode\u003e1M\u003c/code\u003e. Similarly, positions of the prefix and the suffix fields can be obtained using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Field.html#PREFIX\"\u003e\u003ccode\u003eNumberFormat.Field.PREFIX\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Field.html#SUFFIX\"\u003e\u003ccode\u003eNumberFormat.Field.SUFFIX\u003c/code\u003e\u003c/a\u003e respectively."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eresult\u003c/code\u003e or \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to \n\u003ccode\u003eRoundingMode.UNNECESSARY\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eStringBuffer\u003c/code\u003e passed in as \n\u003ccode\u003eresult\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "number",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "name": "result",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.FieldPosition",
            "type": "Class"
          },
          "name": "fieldPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats a long to produce a string representing its compact form.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/FieldPosition.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFieldPosition\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#format(long,java.lang.StringBuffer,java.text.FieldPosition)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumber\u003c/code\u003e - the long number to format",
          "\u003ccode\u003eresult\u003c/code\u003e - where the text is to be appended",
          "\u003ccode\u003efieldPosition\u003c/code\u003e - keeps track on the position of the field within the returned string. For example, to format a number \n\u003ccode\u003e123456789\u003c/code\u003e in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#US\"\u003e\u003ccode\u003eUS locale\u003c/code\u003e\u003c/a\u003e, if the given \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#INTEGER_FIELD\"\u003e\u003ccode\u003eNumberFormat.INTEGER_FIELD\u003c/code\u003e\u003c/a\u003e, the begin index and end index of \n\u003ccode\u003efieldPosition\u003c/code\u003e will be set to 0 and 3, respectively for the output string \n\u003ccode\u003e123M\u003c/code\u003e. Similarly, positions of the prefix and the suffix fields can be obtained using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Field.html#PREFIX\"\u003e\u003ccode\u003eNumberFormat.Field.PREFIX\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Field.html#SUFFIX\"\u003e\u003ccode\u003eNumberFormat.Field.SUFFIX\u003c/code\u003e\u003c/a\u003e respectively."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eresult\u003c/code\u003e or \n\u003ccode\u003efieldPosition\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to \n\u003ccode\u003eRoundingMode.UNNECESSARY\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eStringBuffer\u003c/code\u003e passed in as \n\u003ccode\u003eresult\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.AttributedCharacterIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "formatToCharacterIterator",
      "comment": "Formats an Object producing an AttributedCharacterIterator. The returned AttributedCharacterIterator can be used to build the resulting string, as well as to determine information about the resulting string. Each attribute key of the AttributedCharacterIterator will be of type NumberFormat.Field, with the attribute value being the same as the attribute key. The prefix and the suffix parts of the returned iterator (if present) are represented by the attributes NumberFormat.Field.PREFIX and NumberFormat.Field.SUFFIX respectively.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#formatToCharacterIterator(java.lang.Object)\"\u003eformatToCharacterIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003eFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to format"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if obj is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - when the Format cannot format the given object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if rounding is needed with rounding mode being set to \n\u003ccode\u003eRoundingMode.UNNECESSARY\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e describing the formatted value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.ParsePosition",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parses a compact number from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. The value is the numeric part in the given text multiplied by the numeric equivalent of the affix attached (For example, \"K\" \u003d 1000 in US locale). The subclass returned depends on the value of isParseBigDecimal(). If isParseBigDecimal() is false (the default), most integer values are returned as Long objects, no matter how they are written: \"17K\" and \"17.000K\" both parse to Long.valueOf(17000). If the value cannot fit into Long, then the result is returned as Double. This includes values with a fractional part, infinite values, NaN, and the value -0.0. Callers may use the Number methods doubleValue, longValue, etc., to obtain the type they want. If isParseBigDecimal() is true, values are returned as BigDecimal objects. The special cases negative and positive infinity and NaN are returned as Double instances holding the values of the corresponding Double constants. CompactNumberFormat parses all Unicode characters that represent decimal digits, as defined by Character.digit(). In addition, CompactNumberFormat also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the DecimalFormatSymbols object. CompactNumberFormat parse does not allow parsing scientific notations. For example, parsing a string \"1.05E4K\" in US locale breaks at character \u0027E\u0027 and returns 1.05.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isParseIntegerOnly()\"\u003e\u003ccode\u003eNumberFormat.isParseIntegerOnly()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html#parseObject(java.lang.String,java.text.ParsePosition)\"\u003e\u003ccode\u003eFormat.parseObject(java.lang.String, java.text.ParsePosition)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#parse(java.lang.String,java.text.ParsePosition)\"\u003eparse\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the string to be parsed",
          "\u003ccode\u003epos\u003c/code\u003e - a \n\u003ccode\u003eParsePosition\u003c/code\u003e object with index and error index information as described above"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etext\u003c/code\u003e or \n\u003ccode\u003epos\u003c/code\u003e is null"
        ],
        "return": [
          "the parsed value, or \n\u003ccode\u003enull\u003c/code\u003e if the parse fails"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumIntegerDigits",
      "comment": "Sets the maximum number of digits allowed in the integer portion of a number. The maximum allowed integer range is 309, if the newValue \u003e 309, then the maximum integer digits count is set to 309. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMaximumIntegerDigits()\"\u003e\u003ccode\u003eNumberFormat.getMaximumIntegerDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumIntegerDigits(int)\"\u003esetMaximumIntegerDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the maximum number of integer digits to be shown"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumIntegerDigits",
      "comment": "Sets the minimum number of digits allowed in the integer portion of a number. The maximum allowed integer range is 309, if the newValue \u003e 309, then the minimum integer digits count is set to 309. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMinimumIntegerDigits()\"\u003e\u003ccode\u003eNumberFormat.getMinimumIntegerDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumIntegerDigits(int)\"\u003esetMinimumIntegerDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the minimum number of integer digits to be shown"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumFractionDigits",
      "comment": "Sets the minimum number of digits allowed in the fraction portion of a number. The maximum allowed fraction range is 340, if the newValue \u003e 340, then the minimum fraction digits count is set to 340. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMinimumFractionDigits()\"\u003e\u003ccode\u003eNumberFormat.getMinimumFractionDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMinimumFractionDigits(int)\"\u003esetMinimumFractionDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the minimum number of fraction digits to be shown"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumFractionDigits",
      "comment": "Sets the maximum number of digits allowed in the fraction portion of a number. The maximum allowed fraction range is 340, if the newValue \u003e 340, then the maximum fraction digits count is set to 340. Negative input values are replaced with 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getMaximumFractionDigits()\"\u003e\u003ccode\u003eNumberFormat.getMaximumFractionDigits()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setMaximumFractionDigits(int)\"\u003esetMaximumFractionDigits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the maximum number of fraction digits to be shown"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.RoundingMode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoundingMode",
      "comment": "Gets the RoundingMode used in this CompactNumberFormat.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#setRoundingMode(java.math.RoundingMode)\"\u003e\u003ccode\u003esetRoundingMode(RoundingMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#getRoundingMode()\"\u003egetRoundingMode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eRoundingMode\u003c/code\u003e used for this \n\u003ccode\u003eCompactNumberFormat\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.RoundingMode",
            "type": "Class"
          },
          "name": "roundingMode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRoundingMode",
      "comment": "Sets the RoundingMode used in this CompactNumberFormat.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#getRoundingMode()\"\u003e\u003ccode\u003egetRoundingMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setRoundingMode(java.math.RoundingMode)\"\u003esetRoundingMode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eroundingMode\u003c/code\u003e - the \n\u003ccode\u003eRoundingMode\u003c/code\u003e to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGroupingSize",
      "comment": "Returns the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the compact number \"12,347 trillion\" for the US locale, the grouping size is 3.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#setGroupingSize(int)\"\u003e\u003ccode\u003esetGroupingSize(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isGroupingUsed()\"\u003e\u003ccode\u003eNumberFormat.isGroupingUsed()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#getGroupingSeparator()\"\u003e\u003ccode\u003eDecimalFormatSymbols.getGroupingSeparator()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the grouping size"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGroupingSize",
      "comment": "Sets the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the compact number \"12,347 trillion\" for the US locale, the grouping size is 3. The grouping size must be greater than or equal to zero and less than or equal to 127.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#getGroupingSize()\"\u003e\u003ccode\u003egetGroupingSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setGroupingUsed(boolean)\"\u003e\u003ccode\u003eNumberFormat.setGroupingUsed(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html#setGroupingSeparator(char)\"\u003e\u003ccode\u003eDecimalFormatSymbols.setGroupingSeparator(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new grouping size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewValue\u003c/code\u003e is negative or larger than 127"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isGroupingUsed",
      "comment": "Returns true if grouping is used in this format. For example, with grouping on and grouping size set to 3, the number 12346567890987654 can be formatted as \"12,347 trillion\" in the US locale. The grouping separator is locale dependent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#setGroupingUsed(boolean)\"\u003e\u003ccode\u003esetGroupingUsed(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isGroupingUsed()\"\u003eisGroupingUsed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if grouping is used; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGroupingUsed",
      "comment": "Sets whether or not grouping will be used in this format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#isGroupingUsed()\"\u003e\u003ccode\u003eisGroupingUsed()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setGroupingUsed(boolean)\"\u003esetGroupingUsed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if grouping is used; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isParseIntegerOnly",
      "comment": "Returns true if this format parses only an integer from the number component of a compact number. Parsing an integer means that only an integer is considered from the number component, prefix/suffix is still considered to compute the resulting output. For example, in the US locale, if this method returns true, the string \"1234.78 thousand\" would be parsed as the value 1234000 (1234 (integer part) * 1000 (thousand)) and the fractional part would be skipped. The exact format accepted by the parse operation is locale dependent.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#isParseIntegerOnly()\"\u003eisParseIntegerOnly\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if compact numbers should be parsed as integers only; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParseIntegerOnly",
      "comment": "Sets whether or not this format parses only an integer from the number component of a compact number.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#isParseIntegerOnly()\"\u003e\u003ccode\u003eisParseIntegerOnly()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#setParseIntegerOnly(boolean)\"\u003esetParseIntegerOnly\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if compact numbers should be parsed as integers only; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isParseBigDecimal",
      "comment": "Returns whether the parse(String, ParsePosition) method returns BigDecimal. The default value is false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#setParseBigDecimal(boolean)\"\u003e\u003ccode\u003esetParseBigDecimal(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the parse method returns BigDecimal; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParseBigDecimal",
      "comment": "Sets whether the parse(String, ParsePosition) method returns BigDecimal.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#isParseBigDecimal()\"\u003e\u003ccode\u003eisParseBigDecimal()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the parse method returns BigDecimal; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this CompactNumberFormat is equal to the specified obj. The objects of type CompactNumberFormat are compared, other types return false; obeys the general contract of Object.equals.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with"
        ],
        "return": [
          "true if this is equal to the other \n\u003ccode\u003eCompactNumberFormat\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code for this CompactNumberFormat instance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "hash code for this \n\u003ccode\u003eCompactNumberFormat\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.CompactNumberFormat",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates and returns a copy of this CompactNumberFormat instance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003eNumberFormat\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "decimalPattern",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.DecimalFormatSymbols",
            "type": "Class"
          },
          "name": "symbols",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "compactPatterns",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a CompactNumberFormat using the given decimal pattern, decimal format symbols and compact patterns. To obtain the instance of CompactNumberFormat with the standard compact patterns for a Locale and Style, it is recommended to use the factory methods given by NumberFormat for compact number formatting. For example, NumberFormat.getCompactNumberInstance(Locale, Style).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#%3Cinit%3E(java.lang.String,java.text.DecimalFormatSymbols)\"\u003e\u003ccode\u003eDecimalFormat(java.lang.String, DecimalFormatSymbols)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edecimalPattern\u003c/code\u003e - a decimal pattern for general number formatting",
          "\u003ccode\u003esymbols\u003c/code\u003e - the set of symbols to be used",
          "\u003ccode\u003ecompactPatterns\u003c/code\u003e - an array of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#compact_number_patterns\"\u003e compact number patterns\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the given arguments is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003edecimalPattern\u003c/code\u003e or the \n\u003ccode\u003ecompactPatterns\u003c/code\u003e array contains an invalid pattern or if a \n\u003ccode\u003enull\u003c/code\u003e appears in the array of compact patterns"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "decimalPattern",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.DecimalFormatSymbols",
            "type": "Class"
          },
          "name": "symbols",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "compactPatterns",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pluralRules",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a CompactNumberFormat using the given decimal pattern, decimal format symbols, compact patterns, and plural rules. To obtain the instance of CompactNumberFormat with the standard compact patterns for a Locale, Style, and pluralRules, it is recommended to use the factory methods given by NumberFormat for compact number formatting. For example, NumberFormat.getCompactNumberInstance(Locale, Style).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html#%3Cinit%3E(java.lang.String,java.text.DecimalFormatSymbols)\"\u003e\u003ccode\u003eDecimalFormat(java.lang.String, DecimalFormatSymbols)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormatSymbols.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edecimalPattern\u003c/code\u003e - a decimal pattern for general number formatting",
          "\u003ccode\u003esymbols\u003c/code\u003e - the set of symbols to be used",
          "\u003ccode\u003ecompactPatterns\u003c/code\u003e - an array of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CompactNumberFormat.html#compact_number_patterns\"\u003e compact number patterns\u003c/a\u003e",
          "\u003ccode\u003epluralRules\u003c/code\u003e - a String designating plural rules which associate the \n\u003ccode\u003eCount\u003c/code\u003e keyword, such as \"\n\u003ccode\u003eone\u003c/code\u003e\", and the actual integer number. Its syntax is defined in Unicode Consortium\u0027s \n\u003ca href\u003d\"http://unicode.org/reports/tr35/tr35-numbers.html#Plural_rules_syntax\"\u003e Plural rules syntax\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the given arguments is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003edecimalPattern\u003c/code\u003e, the \n\u003ccode\u003ecompactPatterns\u003c/code\u003e array contains an invalid pattern, a \n\u003ccode\u003enull\u003c/code\u003e appears in the array of compact patterns, or if the given \n\u003ccode\u003epluralRules\u003c/code\u003e contains an invalid syntax"
        ],
        "since": [
          "14"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.text.CompactNumberFormat",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.Style.html\" title\u003d\"enum class in java.text\"\u003e\u003ccode\u003eNumberFormat.Style\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDecimalFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.text.CompactNumberFormat\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "12"
    ]
  }
}