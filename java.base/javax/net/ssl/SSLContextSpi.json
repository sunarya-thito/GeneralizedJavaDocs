{
  "packageName": "javax.net.ssl",
  "simpleName": "SSLContextSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyManagementException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.net.ssl.KeyManager",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "km"
          }
        },
        {
          "type": {
            "name": "javax.net.ssl.TrustManager",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "tm"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandom",
            "type": "Class"
          },
          "field": {
            "name": "sr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineInit",
      "comment": "Initializes this context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#init(javax.net.ssl.KeyManager%5B%5D,javax.net.ssl.TrustManager%5B%5D,java.security.SecureRandom)\"\u003e\u003ccode\u003eSSLContext.init(KeyManager [], TrustManager [], SecureRandom)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekm\u003c/code\u003e - the sources of authentication keys",
          "\u003ccode\u003etm\u003c/code\u003e - the sources of peer authentication trust decisions",
          "\u003ccode\u003esr\u003c/code\u003e - the source of randomness"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyManagementException.html\" title\u003d\"class in java.security\"\u003eKeyManagementException\u003c/a\u003e\u003c/code\u003e - if this operation fails"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLSocketFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGetSocketFactory",
      "comment": "Returns a SocketFactory object for this context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#getSocketFactory()\"\u003e\u003ccode\u003eSSLContext.getSocketFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the underlying provider does not implement the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the SSLContextImpl requires initialization and the \n\u003ccode\u003eengineInit()\u003c/code\u003e has not been called"
        ],
        "return": [
          "the \n\u003ccode\u003eSocketFactory\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLServerSocketFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGetServerSocketFactory",
      "comment": "Returns a ServerSocketFactory object for this context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#getServerSocketFactory()\"\u003e\u003ccode\u003eSSLContext.getServerSocketFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the underlying provider does not implement the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the SSLContextImpl requires initialization and the \n\u003ccode\u003eengineInit()\u003c/code\u003e has not been called"
        ],
        "return": [
          "the \n\u003ccode\u003eServerSocketFactory\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLEngine",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineCreateSSLEngine",
      "comment": "Creates a new SSLEngine using this context. Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, engineCreateSSLEngine(String, int) should be used instead. Some cipher suites (such as Kerberos) require remote hostname information, in which case this factory method should not be used.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#createSSLEngine()\"\u003e\u003ccode\u003eSSLContext.createSSLEngine()\u003c/code\u003e\u003c/a\u003e"
        ],
        "implNote": [
          "It is provider-specific if the returned SSLEngine uses client or server mode by default for the (D)TLS connection. The JDK SunJSSE provider implementation uses server mode by default. However, it is recommended to always set the desired mode explicitly by calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLEngine.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003eSSLEngine.setUseClientMode()\u003c/code\u003e\u003c/a\u003e before invoking other methods of the SSLEngine."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the SSLContextImpl requires initialization and the \n\u003ccode\u003eengineInit()\u003c/code\u003e has not been called"
        ],
        "return": [
          "the \n\u003ccode\u003eSSLEngine\u003c/code\u003e Object"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLEngine",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "host"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineCreateSSLEngine",
      "comment": "Creates a SSLEngine using this context. Applications using this factory method are providing hints for an internal session reuse strategy. Some cipher suites (such as Kerberos) require remote hostname information, in which case peerHost needs to be specified.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#createSSLEngine(java.lang.String,int)\"\u003e\u003ccode\u003eSSLContext.createSSLEngine(String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the non-authoritative name of the host",
          "\u003ccode\u003eport\u003c/code\u003e - the non-authoritative port"
        ],
        "implNote": [
          "It is provider-specific if the returned SSLEngine uses client or server mode by default for the (D)TLS connection. The JDK SunJSSE provider implementation uses server mode by default. However, it is recommended to always set the desired mode explicitly by calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLEngine.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003eSSLEngine.setUseClientMode()\u003c/code\u003e\u003c/a\u003e before invoking other methods of the SSLEngine."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the SSLContextImpl requires initialization and the \n\u003ccode\u003eengineInit()\u003c/code\u003e has not been called"
        ],
        "return": [
          "the \n\u003ccode\u003eSSLEngine\u003c/code\u003e Object"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLSessionContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGetServerSessionContext",
      "comment": "Returns a server SSLSessionContext object for this context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#getServerSessionContext()\"\u003e\u003ccode\u003eSSLContext.getServerSessionContext()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eSSLSessionContext\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLSessionContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGetClientSessionContext",
      "comment": "Returns a client SSLSessionContext object for this context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#getClientSessionContext()\"\u003e\u003ccode\u003eSSLContext.getClientSessionContext()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eSSLSessionContext\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLParameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineGetDefaultSSLParameters",
      "comment": "Returns a copy of the SSLParameters indicating the default settings for this SSL context. The parameters will always have the ciphersuite and protocols arrays set to non-null values. The default implementation obtains the parameters from an SSLSocket created by calling the SocketFactory.createSocket() method of this context\u0027s SocketFactory.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the default SSL parameters could not be obtained."
        ],
        "return": [
          "a copy of the SSLParameters object with the default settings"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLParameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineGetSupportedSSLParameters",
      "comment": "Returns a copy of the SSLParameters indicating the maximum supported settings for this SSL context. The parameters will always have the ciphersuite and protocols arrays set to non-null values. The default implementation obtains the parameters from an SSLSocket created by calling the SocketFactory.createSocket() method of this context\u0027s SocketFactory.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the supported SSL parameters could not be obtained."
        ],
        "return": [
          "a copy of the SSLParameters object with the maximum supported settings"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.net.ssl.SSLContextSpi",
  "comment": "This class defines the \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ccode\u003eSSLContext\u003c/code\u003e class. \n\u003cp\u003e All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular SSL context.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSSLContext\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}