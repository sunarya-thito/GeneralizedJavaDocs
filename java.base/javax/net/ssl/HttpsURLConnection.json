{
  "packageName": "javax.net.ssl",
  "simpleName": "HttpsURLConnection",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.net.HttpURLConnection",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.net.ssl.HostnameVerifier",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "hostnameVerifier",
      "comment": "The hostnameVerifier for this object.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCipherSuite",
      "comment": "Returns the cipher suite in use on this connection.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this method is called before the connection has been established."
        ],
        "return": [
          "the cipher suite"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLocalCertificates",
      "comment": "Returns the certificate(s) that were sent to the server during handshaking. Note: This method is useful only when using certificate-based cipher suites. When multiple certificates are available for use in a handshake, the implementation chooses what it considers the \"best\" certificate chain available, and transmits that to the other side. This method allows the caller to know which certificate chain was actually sent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getLocalPrincipal()\"\u003e\u003ccode\u003egetLocalPrincipal()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this method is called before the connection has been established."
        ],
        "return": [
          "an ordered array of certificates, with the client\u0027s own certificate first followed by any certificate authorities. If no certificates were sent, then null is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "javax.net.ssl.SSLPeerUnverifiedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getServerCertificates",
      "comment": "Returns the server\u0027s certificate chain which was established as part of defining the session. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException. Note: The returned value may not be a valid certificate chain and should not be relied on for trust decisions.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getPeerPrincipal()\"\u003e\u003ccode\u003egetPeerPrincipal()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLPeerUnverifiedException.html\" title\u003d\"class in javax.net.ssl\"\u003eSSLPeerUnverifiedException\u003c/a\u003e\u003c/code\u003e - if the peer is not verified.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this method is called before the connection has been established."
        ],
        "return": [
          "an ordered array of server certificates, with the peer\u0027s own certificate first followed by any certificate authorities."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Principal",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.net.ssl.SSLPeerUnverifiedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPeerPrincipal",
      "comment": "Returns the server\u0027s principal which was established as part of defining the session. Note: Subclasses should override this method. If not overridden, it will default to returning the X500Principal of the server\u0027s end-entity certificate for certificate-based ciphersuites, or throw an SSLPeerUnverifiedException for non-certificate based ciphersuites, such as Kerberos.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getServerCertificates()\"\u003e\u003ccode\u003egetServerCertificates()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getLocalPrincipal()\"\u003e\u003ccode\u003egetLocalPrincipal()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLPeerUnverifiedException.html\" title\u003d\"class in javax.net.ssl\"\u003eSSLPeerUnverifiedException\u003c/a\u003e\u003c/code\u003e - if the peer was not verified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this method is called before the connection has been established."
        ],
        "return": [
          "the server\u0027s principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalPrincipal",
      "comment": "Returns the principal that was sent to the server during handshaking. Note: Subclasses should override this method. If not overridden, it will default to returning the X500Principal of the end-entity certificate that was sent to the server for certificate-based ciphersuites or, return null for non-certificate based ciphersuites, such as Kerberos.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getLocalCertificates()\"\u003e\u003ccode\u003egetLocalCertificates()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getPeerPrincipal()\"\u003e\u003ccode\u003egetPeerPrincipal()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this method is called before the connection has been established."
        ],
        "return": [
          "the principal sent to the server. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.net.ssl.HostnameVerifier",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefaultHostnameVerifier",
      "comment": "Sets the default HostnameVerifier inherited by a new instance of this class. If this method is not called, the default HostnameVerifier assumes the connection should not be permitted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getDefaultHostnameVerifier()\"\u003e\u003ccode\u003egetDefaultHostnameVerifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the default host name verifier"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eHostnameVerifier\u003c/code\u003e parameter is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method does not allow \n\u003ccode\u003eSSLPermission(\"setHostnameVerifier\")\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.HostnameVerifier",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultHostnameVerifier",
      "comment": "Gets the default HostnameVerifier that is inherited by new instances of this class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)\"\u003e\u003ccode\u003esetDefaultHostnameVerifier(HostnameVerifier)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default host name verifier"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.net.ssl.HostnameVerifier",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHostnameVerifier",
      "comment": "Sets the HostnameVerifier for this instance. New instances of this class inherit the default static hostname verifier set by setDefaultHostnameVerifier. Calls to this method replace this object\u0027s HostnameVerifier.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getHostnameVerifier()\"\u003e\u003ccode\u003egetHostnameVerifier()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)\"\u003e\u003ccode\u003esetDefaultHostnameVerifier(HostnameVerifier)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the host name verifier"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eHostnameVerifier\u003c/code\u003e parameter is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.HostnameVerifier",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHostnameVerifier",
      "comment": "Gets the HostnameVerifier in place on this instance.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#setHostnameVerifier(javax.net.ssl.HostnameVerifier)\"\u003e\u003ccode\u003esetHostnameVerifier(HostnameVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)\"\u003e\u003ccode\u003esetDefaultHostnameVerifier(HostnameVerifier)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the host name verifier"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.net.ssl.SSLSocketFactory",
            "type": "Class"
          },
          "field": {
            "name": "sf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefaultSSLSocketFactory",
      "comment": "Sets the default SSLSocketFactory inherited by new instances of this class. The socket factories are used when creating sockets for secure https URL connections.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getDefaultSSLSocketFactory()\"\u003e\u003ccode\u003egetDefaultSSLSocketFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esf\u003c/code\u003e - the default SSL socket factory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the SSLSocketFactory parameter is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckSetFactory\u003c/code\u003e method does not allow a socket factory to be specified."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLSocketFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultSSLSocketFactory",
      "comment": "Gets the default static SSLSocketFactory that is inherited by new instances of this class. The socket factories are used when creating sockets for secure https URL connections.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)\"\u003e\u003ccode\u003esetDefaultSSLSocketFactory(SSLSocketFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default \n\u003ccode\u003eSSLSocketFactory\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.net.ssl.SSLSocketFactory",
            "type": "Class"
          },
          "field": {
            "name": "sf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSSLSocketFactory",
      "comment": "Sets the SSLSocketFactory to be used when this instance creates sockets for secure https URL connections. New instances of this class inherit the default static SSLSocketFactory set by setDefaultSSLSocketFactory. Calls to this method replace this object\u0027s SSLSocketFactory.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#getSSLSocketFactory()\"\u003e\u003ccode\u003egetSSLSocketFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esf\u003c/code\u003e - the SSL socket factory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSSLSocketFactory\u003c/code\u003e parameter is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckSetFactory\u003c/code\u003e method does not allow a socket factory to be specified."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLSocketFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSSLSocketFactory",
      "comment": "Gets the SSL socket factory to be used when creating sockets for secure https URL connections.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/HttpsURLConnection.html#setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)\"\u003e\u003ccode\u003esetSSLSocketFactory(SSLSocketFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eSSLSocketFactory\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "javax.net.ssl.SSLSession",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSSLSession",
      "comment": "Returns an Optional containing the SSLSession in use on this connection. Returns an empty Optional if the underlying implementation does not support this method.",
      "tagMap": {
        "implSpec": [
          "For compatibility, the default implementation of this method returns an empty \n\u003ccode\u003eOptional\u003c/code\u003e. Subclasses should override this method with an appropriate implementation since an application may need to access additional parameters associated with the SSL session."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLSession.html\" title\u003d\"interface in javax.net.ssl\"\u003e\u003ccode\u003eSSLSession\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this method is called before the connection has been established"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e containing the \n\u003ccode\u003eSSLSession\u003c/code\u003e in use on this connection."
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates an HttpsURLConnection using the URL specified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.net.ssl.HttpsURLConnection",
  "comment": "\u003ccode\u003eHttpsURLConnection\u003c/code\u003e extends \n\u003ccode\u003eHttpURLConnection\u003c/code\u003e with support for https-specific features. \n\u003cp\u003e See \u003ca href\u003d\"http://www.w3.org/pub/WWW/Protocols/\"\u003e http://www.w3.org/pub/WWW/Protocols/\u003c/a\u003e and \u003ca href\u003d\"http://www.ietf.org/\"\u003e RFC 2818 \u003c/a\u003e for more details on the https specification. \u003c/p\u003e\n\u003cp\u003e This class uses \u003ccode\u003eHostnameVerifier\u003c/code\u003e and \u003ccode\u003eSSLSocketFactory\u003c/code\u003e. There are default implementations defined for both classes. However, the implementations can be replaced on a per-class (static) or per-instance basis. All new \u003ccode\u003eHttpsURLConnection\u003c/code\u003es instances will be assigned the \"default\" static values at instance creation, but they can be overridden by calling the appropriate per-instance set method(s) before \u003ccode\u003econnect\u003c/code\u003eing.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}