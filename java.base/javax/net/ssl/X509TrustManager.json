{
  "packageName": "javax.net.ssl",
  "simpleName": "X509TrustManager",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.net.ssl.TrustManager",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.cert.X509Certificate",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "chain"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "authType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "checkClientTrusted",
      "comment": "Given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for client SSL authentication based on the authentication type. The authentication type is determined by the actual certificate used. For instance, if RSAPublicKey is used, the authType should be \"RSA\". Checking is case-sensitive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echain\u003c/code\u003e - the peer certificate chain",
          "\u003ccode\u003eauthType\u003c/code\u003e - the authentication type based on the client certificate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null or zero-length chain is passed in for the chain parameter or if null or zero-length string is passed in for the authType parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if the certificate chain is not trusted by this TrustManager."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.cert.X509Certificate",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "chain"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "authType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "checkServerTrusted",
      "comment": "Given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for server SSL authentication based on the authentication type. The authentication type is the key exchange algorithm portion of the cipher suites represented as a String, such as \"RSA\", \"DHE_DSS\". Note: for some exportable cipher suites, the key exchange algorithm is determined at run time during the handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5, the authType should be RSA_EXPORT when an ephemeral RSA key is used for the key exchange, and RSA when the key from the server certificate is used. Checking is case-sensitive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echain\u003c/code\u003e - the peer certificate chain",
          "\u003ccode\u003eauthType\u003c/code\u003e - the key exchange algorithm used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null or zero-length chain is passed in for the chain parameter or if null or zero-length string is passed in for the authType parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if the certificate chain is not trusted by this TrustManager."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.X509Certificate",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAcceptedIssuers",
      "comment": "Return an array of certificate authority certificates which are trusted for authenticating peers.",
      "tagMap": {
        "return": [
          "a non-null (possibly empty) array of acceptable CA issuer certificates."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.net.ssl.X509TrustManager",
  "comment": "Instance of this interface manage which X509 certificates may be used to authenticate the remote side of a secure socket. Decisions may be based on trusted certificate authorities, certificate revocation lists, online status checking or other means.",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}