{
  "packageName": "javax.net.ssl",
  "simpleName": "SSLServerSocket",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.net.ServerSocket",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getEnabledCipherSuites",
      "comment": "Returns the list of cipher suites which are currently enabled for use by newly accepted connections. If this list has not been explicitly modified, a system-provided default guarantees a minimum quality of service in all enabled cipher suites. Note that even if a suite is enabled, it may never be used. This can occur if the peer does not support it, or its use is restricted, or the requisite certificates (and private keys) for the suite are not available, or an anonymous suite is enabled but authentication is required. The returned array includes cipher suites from the list of standard cipher suite names in the JSSE Cipher Suite Names section of the Java Cryptography Architecture Standard Algorithm Name Documentation, and may also include other cipher suites that the provider supports.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getSupportedCipherSuites()\"\u003e\u003ccode\u003egetSupportedCipherSuites()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setEnabledCipherSuites(java.lang.String%5B%5D)\"\u003e\u003ccode\u003esetEnabledCipherSuites(String [])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of cipher suites enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "suites"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setEnabledCipherSuites",
      "comment": "Sets the cipher suites enabled for use by accepted connections. The cipher suites must have been listed by getSupportedCipherSuites() as being supported. Following a successful call to this method, only suites listed in the suites parameter are enabled for use. Suites that require authentication information which is not available in this ServerSocket\u0027s authentication context will not be used in any case, even if they are enabled. Note that the standard list of cipher suite names may be found in the JSSE Cipher Suite Names section of the Java Cryptography Architecture Standard Algorithm Name Documentation. Providers may support cipher suite names not found in this list or might not use the recommended name for a certain cipher suite. SSLSockets returned from accept() inherit this setting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getSupportedCipherSuites()\"\u003e\u003ccode\u003egetSupportedCipherSuites()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getEnabledCipherSuites()\"\u003e\u003ccode\u003egetEnabledCipherSuites()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esuites\u003c/code\u003e - Names of all the cipher suites to enable"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - when one or more of ciphers named by the parameter is not supported, or when the parameter is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSupportedCipherSuites",
      "comment": "Returns the names of the cipher suites which could be enabled for use on an SSL connection. Normally, only a subset of these will actually be enabled by default, since this list may include cipher suites which do not meet quality of service requirements for those defaults. Such cipher suites are useful in specialized applications. The returned array includes cipher suites from the list of standard cipher suite names in the JSSE Cipher Suite Names section of the Java Cryptography Architecture Standard Algorithm Name Documentation, and may also include other cipher suites that the provider supports.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getEnabledCipherSuites()\"\u003e\u003ccode\u003egetEnabledCipherSuites()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setEnabledCipherSuites(java.lang.String%5B%5D)\"\u003e\u003ccode\u003esetEnabledCipherSuites(String [])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of cipher suite names"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSupportedProtocols",
      "comment": "Returns the names of the protocols which could be enabled for use.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getEnabledProtocols()\"\u003e\u003ccode\u003egetEnabledProtocols()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setEnabledProtocols(java.lang.String%5B%5D)\"\u003e\u003ccode\u003esetEnabledProtocols(String [])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of protocol names supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getEnabledProtocols",
      "comment": "Returns the names of the protocols which are currently enabled for use by the newly accepted connections. Note that even if a protocol is enabled, it may never be used. This can occur if the peer does not support the protocol, or its use is restricted, or there are no enabled cipher suites supported by the protocol.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getSupportedProtocols()\"\u003e\u003ccode\u003egetSupportedProtocols()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setEnabledProtocols(java.lang.String%5B%5D)\"\u003e\u003ccode\u003esetEnabledProtocols(String [])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of protocol names"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "protocols"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setEnabledProtocols",
      "comment": "Controls which particular protocols are enabled for use by accepted connections. The protocols must have been listed by getSupportedProtocols() as being supported. Following a successful call to this method, only protocols listed in the protocols parameter are enabled for use. SSLSockets returned from accept() inherit this setting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getEnabledProtocols()\"\u003e\u003ccode\u003egetEnabledProtocols()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getSupportedProtocols()\"\u003e\u003ccode\u003egetSupportedProtocols()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprotocols\u003c/code\u003e - Names of all the protocols to enable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - when one or more of the protocols named by the parameter is not supported or when the protocols parameter is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "need"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setNeedClientAuth",
      "comment": "Controls whether accepted server-mode SSLSockets will be initially configured to require client authentication. A socket\u0027s client authentication setting is one of the following: client authentication required client authentication requested no client authentication desired Unlike setWantClientAuth(boolean), if the accepted socket\u0027s option is set and the client chooses not to provide authentication information about itself, the negotiations will stop and the connection will be dropped. Calling this method overrides any previous setting made by this method or setWantClientAuth(boolean). The initial inherited setting may be overridden by calling SSLSocket.setNeedClientAuth(boolean) or SSLSocket.setWantClientAuth(boolean).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getNeedClientAuth()\"\u003e\u003ccode\u003egetNeedClientAuth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setWantClientAuth(boolean)\"\u003e\u003ccode\u003esetWantClientAuth(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getWantClientAuth()\"\u003e\u003ccode\u003egetWantClientAuth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003esetUseClientMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eneed\u003c/code\u003e - set to true if client authentication is required, or false if no client authentication is desired."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNeedClientAuth",
      "comment": "Returns true if client authentication will be required on newly accepted server-mode SSLSockets. The initial inherited setting may be overridden by calling SSLSocket.setNeedClientAuth(boolean) or SSLSocket.setWantClientAuth(boolean).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setNeedClientAuth(boolean)\"\u003e\u003ccode\u003esetNeedClientAuth(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setWantClientAuth(boolean)\"\u003e\u003ccode\u003esetWantClientAuth(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getWantClientAuth()\"\u003e\u003ccode\u003egetWantClientAuth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003esetUseClientMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if client authentication is required, or false if no client authentication is desired."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "want"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setWantClientAuth",
      "comment": "Controls whether accepted server-mode SSLSockets will be initially configured to request client authentication. A socket\u0027s client authentication setting is one of the following: client authentication required client authentication requested no client authentication desired Unlike setNeedClientAuth(boolean), if the accepted socket\u0027s option is set and the client chooses not to provide authentication information about itself, the negotiations will continue. Calling this method overrides any previous setting made by this method or setNeedClientAuth(boolean). The initial inherited setting may be overridden by calling SSLSocket.setNeedClientAuth(boolean) or SSLSocket.setWantClientAuth(boolean).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getWantClientAuth()\"\u003e\u003ccode\u003egetWantClientAuth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setNeedClientAuth(boolean)\"\u003e\u003ccode\u003esetNeedClientAuth(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getNeedClientAuth()\"\u003e\u003ccode\u003egetNeedClientAuth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003esetUseClientMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewant\u003c/code\u003e - set to true if client authentication is requested, or false if no client authentication is desired."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getWantClientAuth",
      "comment": "Returns true if client authentication will be requested on newly accepted server-mode connections. The initial inherited setting may be overridden by calling SSLSocket.setNeedClientAuth(boolean) or SSLSocket.setWantClientAuth(boolean).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setWantClientAuth(boolean)\"\u003e\u003ccode\u003esetWantClientAuth(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setNeedClientAuth(boolean)\"\u003e\u003ccode\u003esetNeedClientAuth(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getNeedClientAuth()\"\u003e\u003ccode\u003egetNeedClientAuth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003esetUseClientMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if client authentication is requested, or false if no client authentication is desired."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "mode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setUseClientMode",
      "comment": "Controls whether accepted connections are in the (default) SSL server mode, or the SSL client mode. Servers normally authenticate themselves, and clients are not required to do so. In rare cases, TCP servers need to act in the SSL client mode on newly accepted connections. For example, FTP clients acquire server sockets and listen there for reverse connections from the server. An FTP client would use an SSLServerSocket in \"client\" mode to accept the reverse connection while the FTP server uses an SSLSocket with \"client\" mode disabled to initiate the connection. During the resulting handshake, existing SSL sessions may be reused. SSLSockets returned from accept() inherit this setting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getUseClientMode()\"\u003e\u003ccode\u003egetUseClientMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emode\u003c/code\u003e - true if newly accepted connections should use SSL client mode."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getUseClientMode",
      "comment": "Returns true if accepted connections will be in SSL client mode.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setUseClientMode(boolean)\"\u003e\u003ccode\u003esetUseClientMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the connection should use SSL client mode."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setEnableSessionCreation",
      "comment": "Controls whether new SSL sessions may be established by the sockets which are created from this server socket. SSLSockets returned from accept() inherit this setting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getEnableSessionCreation()\"\u003e\u003ccode\u003egetEnableSessionCreation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getEnableSessionCreation",
      "comment": "Returns true if new SSL sessions may be established by the sockets which are created from this server socket.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setEnableSessionCreation(boolean)\"\u003e\u003ccode\u003esetEnableSessionCreation(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLParameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSSLParameters",
      "comment": "Returns the SSLParameters in effect for newly accepted connections. The ciphersuites and protocols of the returned SSLParameters are always non-null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#setSSLParameters(javax.net.ssl.SSLParameters)\"\u003e\u003ccode\u003esetSSLParameters(SSLParameters)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the SSLParameters in effect for newly accepted connections"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.net.ssl.SSLParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSSLParameters",
      "comment": "Applies SSLParameters to newly accepted connections. This means: If params.getCipherSuites() is non-null, setEnabledCipherSuites() is called with that value. If params.getProtocols() is non-null, setEnabledProtocols() is called with that value. If params.getNeedClientAuth() or params.getWantClientAuth() return true, setNeedClientAuth(true) and setWantClientAuth(true) are called, respectively; otherwise setWantClientAuth(false) is called. If params.getServerNames() is non-null, the socket will configure its server names with that value. If params.getSNIMatchers() is non-null, the socket will configure its SNI matchers with that value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLServerSocket.html#getSSLParameters()\"\u003e\u003ccode\u003egetSSLParameters()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the setEnabledCipherSuites() or the setEnabledProtocols() call fails"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Used only by subclasses. Create an unbound TCP server socket using the default authentication context.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context. The connection backlog defaults to fifty connections queued up before the system starts to reject new connection requests. A port number of 0 creates a socket on any free port. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eport\u003c/code\u003e - the port on which to listen"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "backlog"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context and a specified backlog of connections. A port number of 0 creates a socket on any free port. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eport\u003c/code\u003e - the port on which to listen",
          "\u003ccode\u003ebacklog\u003c/code\u003e - requested maximum length of the queue of incoming connections."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "port"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "backlog"
          }
        },
        {
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context and a specified backlog of connections as well as a particular specified network interface. This constructor is used on multihomed hosts, such as those used for firewalls or as routers, to control through which interface a network service is provided. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. A port number of 0 creates a socket on any free port. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used. If address is null, it will default accepting connections on any/all local addresses.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkListen(int)\"\u003e\u003ccode\u003eSecurityManager.checkListen(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eport\u003c/code\u003e - the port on which to listen",
          "\u003ccode\u003ebacklog\u003c/code\u003e - requested maximum length of the queue of incoming connections.",
          "\u003ccode\u003eaddress\u003c/code\u003e - the address of the network interface through which connections will be accepted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when creating the socket",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckListen\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.net.ssl.SSLServerSocket",
  "comment": "This class extends \n\u003ccode\u003eServerSocket\u003c/code\u003e and provides secure server sockets using protocols such as the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols. \n\u003cp\u003e Instances of this class are generally created using an \u003ccode\u003eSSLServerSocketFactory\u003c/code\u003e. The primary function of an \u003ccode\u003eSSLServerSocket\u003c/code\u003e is to create \u003ccode\u003eSSLSocket\u003c/code\u003es by \u003ccode\u003eaccept\u003c/code\u003eing connections. \u003c/p\u003e\n\u003cp\u003e An \u003ccode\u003eSSLServerSocket\u003c/code\u003e contains several pieces of state data which are inherited by the \u003ccode\u003eSSLSocket\u003c/code\u003e at socket creation. These include the enabled cipher suites and protocols, whether client authentication is necessary, and whether created sockets should begin handshaking in client or server mode. The state inherited by the created \u003ccode\u003eSSLSocket\u003c/code\u003e can be overridden by calling the appropriate methods.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/ServerSocket.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eServerSocket\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLSocket.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSSLSocket\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}