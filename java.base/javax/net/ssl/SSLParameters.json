{
  "packageName": "javax.net.ssl",
  "simpleName": "SSLParameters",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCipherSuites",
      "comment": "Returns a copy of the array of ciphersuites or null if none have been set. The returned array includes cipher suites from the list of standard cipher suite names in the JSSE Cipher Suite Names section of the Java Cryptography Architecture Standard Algorithm Name Documentation, and may also include other cipher suites that the provider supports.",
      "tagMap": {
        "return": [
          "a copy of the array of ciphersuites or null if none have been set."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "cipherSuites"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCipherSuites",
      "comment": "Sets the array of ciphersuites.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecipherSuites\u003c/code\u003e - the array of ciphersuites (or null). Note that the standard list of cipher suite names may be found in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#jsse-cipher-suite-names\"\u003e JSSE Cipher Suite Names\u003c/a\u003e section of the Java Cryptography Architecture Standard Algorithm Name Documentation. Providers may support cipher suite names not found in this list or might not use the recommended name for a certain cipher suite."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProtocols",
      "comment": "Returns a copy of the array of protocols or null if none have been set.",
      "tagMap": {
        "return": [
          "a copy of the array of protocols or null if none have been set."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "protocols"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setProtocols",
      "comment": "Sets the array of protocols.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprotocols\u003c/code\u003e - the array of protocols (or null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWantClientAuth",
      "comment": "Returns whether client authentication should be requested.",
      "tagMap": {
        "return": [
          "whether client authentication should be requested."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "wantClientAuth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWantClientAuth",
      "comment": "Sets whether client authentication should be requested. Calling this method clears the needClientAuth flag.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewantClientAuth\u003c/code\u003e - whether client authentication should be requested"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNeedClientAuth",
      "comment": "Returns whether client authentication should be required.",
      "tagMap": {
        "return": [
          "whether client authentication should be required."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "needClientAuth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNeedClientAuth",
      "comment": "Sets whether client authentication should be required. Calling this method clears the wantClientAuth flag.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eneedClientAuth\u003c/code\u003e - whether client authentication should be required"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.AlgorithmConstraints",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlgorithmConstraints",
      "comment": "Returns the cryptographic algorithm constraints.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setAlgorithmConstraints(java.security.AlgorithmConstraints)\"\u003e\u003ccode\u003esetAlgorithmConstraints(AlgorithmConstraints)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the cryptographic algorithm constraints, or null if the constraints have not been set"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.AlgorithmConstraints",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAlgorithmConstraints",
      "comment": "Sets the cryptographic algorithm constraints, which will be used in addition to any configured by the runtime environment. If the constraints parameter is non-null, every cryptographic algorithm, key and algorithm parameters used in the SSL/TLS/DTLS handshake must be permitted by the constraints.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econstraints\u003c/code\u003e - the algorithm constraints (or null)"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEndpointIdentificationAlgorithm",
      "comment": "Gets the endpoint identification algorithm.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/X509ExtendedTrustManager.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eX509ExtendedTrustManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setEndpointIdentificationAlgorithm(java.lang.String)\"\u003e\u003ccode\u003esetEndpointIdentificationAlgorithm(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the endpoint identification algorithm, or null if none has been set."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEndpointIdentificationAlgorithm",
      "comment": "Sets the endpoint identification algorithm. If the algorithm parameter is non-null or non-empty, the endpoint identification/verification procedures must be handled during SSL/TLS/DTLS handshaking. This is to prevent man-in-the-middle attacks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/X509ExtendedTrustManager.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eX509ExtendedTrustManager\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - The standard string name of the endpoint identification algorithm (or null). See the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html\"\u003e Java Security Standard Algorithm Names\u003c/a\u003e document for information about standard algorithm names."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "javax.net.ssl.SNIServerName",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "serverNames"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setServerNames",
      "comment": "Sets the desired SNIServerNames of the Server Name Indication (SNI) parameter. This method is only useful to SSLSockets or SSLEngines operating in client mode. Note that the serverNames list is cloned to protect against subsequent modification.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIServerName.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIServerName\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#getServerNames()\"\u003e\u003ccode\u003egetServerNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eserverNames\u003c/code\u003e - the list of desired \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIServerName.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIServerName\u003c/code\u003e\u003c/a\u003es (or null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eserverNames\u003c/code\u003e contains \n\u003ccode\u003enull\u003c/code\u003e element",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eserverNames\u003c/code\u003e contains more than one name of the same name type"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.net.ssl.SNIServerName",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getServerNames",
      "comment": "Returns a List containing all SNIServerNames of the Server Name Indication (SNI) parameter, or null if none has been set. This method is only useful to SSLSockets or SSLEngines operating in client mode. For SSL/TLS/DTLS connections, the underlying SSL/TLS/DTLS provider may specify a default value for a certain server name type. In client mode, it is recommended that, by default, providers should include the server name indication whenever the server can be located by a supported server name type. It is recommended that providers initialize default Server Name Indications when creating SSLSocket/SSLEngines. In the following examples, the server name could be represented by an instance of SNIHostName which has been initialized with the hostname \"www.example.com\" and type StandardConstants.SNI_HOST_NAME.      Socket socket \u003d\n         sslSocketFactory.createSocket(\"www.example.com\", 443);\n or      SSLEngine engine \u003d\n         sslContext.createSSLEngine(\"www.example.com\", 443);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setServerNames(java.util.List)\"\u003e\u003ccode\u003esetServerNames(List)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "null or an immutable list of non-null \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIServerName.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIServerName\u003c/code\u003e\u003c/a\u003es"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "javax.net.ssl.SNIMatcher",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "matchers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setSNIMatchers",
      "comment": "Sets the SNIMatchers of the Server Name Indication (SNI) parameter. This method is only useful to SSLSockets or SSLEngines operating in server mode. Note that the matchers collection is cloned to protect against subsequent modification.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIMatcher.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIMatcher\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#getSNIMatchers()\"\u003e\u003ccode\u003egetSNIMatchers()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ematchers\u003c/code\u003e - the collection of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIMatcher.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIMatcher\u003c/code\u003e\u003c/a\u003es (or null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ematchers\u003c/code\u003e contains \n\u003ccode\u003enull\u003c/code\u003e element",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ematchers\u003c/code\u003e contains more than one name of the same name type"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "javax.net.ssl.SNIMatcher",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getSNIMatchers",
      "comment": "Returns a Collection containing all SNIMatchers of the Server Name Indication (SNI) parameter, or null if none has been set. This method is only useful to SSLSockets or SSLEngines operating in server mode. For better interoperability, providers generally will not define default matchers so that by default servers will ignore the SNI extension and continue the handshake.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIMatcher.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIMatcher\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setSNIMatchers(java.util.Collection)\"\u003e\u003ccode\u003esetSNIMatchers(Collection)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "null or an immutable collection of non-null \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SNIMatcher.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSNIMatcher\u003c/code\u003e\u003c/a\u003es"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "honorOrder"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setUseCipherSuitesOrder",
      "comment": "Sets whether the local cipher suites preference should be honored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#getUseCipherSuitesOrder()\"\u003e\u003ccode\u003egetUseCipherSuitesOrder()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehonorOrder\u003c/code\u003e - whether local cipher suites order in \n\u003ccode\u003e#getCipherSuites\u003c/code\u003e should be honored during SSL/TLS/DTLS handshaking."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getUseCipherSuitesOrder",
      "comment": "Returns whether the local cipher suites preference should be honored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setUseCipherSuitesOrder(boolean)\"\u003e\u003ccode\u003esetUseCipherSuitesOrder(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether local cipher suites order in \n\u003ccode\u003e#getCipherSuites\u003c/code\u003e should be honored during SSL/TLS/DTLS handshaking."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "enableRetransmissions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEnableRetransmissions",
      "comment": "Sets whether DTLS handshake retransmissions should be enabled. This method only applies to DTLS.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#getEnableRetransmissions()\"\u003e\u003ccode\u003egetEnableRetransmissions()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eenableRetransmissions\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e indicates that DTLS handshake retransmissions should be enabled; \n\u003ccode\u003efalse\u003c/code\u003e indicates that DTLS handshake retransmissions should be disabled"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnableRetransmissions",
      "comment": "Returns whether DTLS handshake retransmissions should be enabled. This method only applies to DTLS.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setEnableRetransmissions(boolean)\"\u003e\u003ccode\u003esetEnableRetransmissions(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true, if DTLS handshake retransmissions should be enabled"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximumPacketSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumPacketSize",
      "comment": "Sets the maximum expected network packet size in bytes for SSL/TLS/DTLS records.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#getMaximumPacketSize()\"\u003e\u003ccode\u003egetMaximumPacketSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "It is recommended that if possible, the maximum packet size should not be less than 256 bytes so that small handshake messages, such as HelloVerifyRequests, are not fragmented."
        ],
        "param": [
          "\u003ccode\u003emaximumPacketSize\u003c/code\u003e - the maximum expected network packet size in bytes, or \n\u003ccode\u003e0\u003c/code\u003e to use the implicit size that is automatically specified by the underlying implementation."
        ],
        "implNote": [
          "If the maximum packet size is too small to hold a minimal record, an implementation may attempt to generate as minimal records as possible. However, this may cause a generated packet to be larger than the maximum packet size."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emaximumPacketSize\u003c/code\u003e is negative."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumPacketSize",
      "comment": "Returns the maximum expected network packet size in bytes for SSL/TLS/DTLS records.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setMaximumPacketSize(int)\"\u003e\u003ccode\u003esetMaximumPacketSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "The implicit size may not be a fixed value, especially for a DTLS protocols implementation."
        ],
        "implNote": [
          "For SSL/TLS/DTLS connections, the underlying provider should calculate and specify the implicit value of the maximum expected network packet size if it is not configured explicitly. For any connection populated object, this method should never return \n\u003ccode\u003e0\u003c/code\u003e so that applications can retrieve the actual implicit size of the underlying implementation. \n\u003cp\u003e An implementation should attempt to comply with the maximum packet size configuration. However, if the maximum packet size is too small to hold a minimal record, an implementation may try to generate as minimal records as possible. This may cause a generated packet to be larger than the maximum packet size.\u003c/p\u003e"
        ],
        "return": [
          "the maximum expected network packet size, or \n\u003ccode\u003e0\u003c/code\u003e if use the implicit size that is automatically specified by the underlying implementation and this object has not been populated by any connection."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getApplicationProtocols",
      "comment": "Returns a prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS/DTLS protocols. The array could be empty (zero-length), in which case protocol indications will not be used. This method will return a new array each time it is invoked.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#setApplicationProtocols(java.lang.String%5B%5D)\"\u003e\u003ccode\u003esetApplicationProtocols(java.lang.String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a non-null, possibly zero-length array of application protocol \n\u003ccode\u003eString\u003c/code\u003es. The array is ordered based on protocol preference, with \n\u003ccode\u003eprotocols[0]\u003c/code\u003e being the most preferred."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "protocols"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setApplicationProtocols",
      "comment": "Sets the prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS/DTLS protocols. If application-layer protocols are supported by the underlying SSL/TLS implementation, this method configures which values can be negotiated by protocols such as RFC 7301 , the Application Layer Protocol Negotiation (ALPN). If this end of the connection is expected to offer application protocol values, all protocols configured by this method will be sent to the peer. If this end of the connection is expected to select the application protocol value, the protocols configured by this method are compared with those sent by the peer. The first matched value becomes the negotiated value. If none of the protocols were actually requested by the peer, the underlying protocol will determine what action to take. (For example, ALPN will send a \"no_application_protocol\" alert and terminate the connection.) The String values must be presented using the network byte representation expected by the peer. For example, if an ALPN String should be exchanged using UTF-8, the String should be converted to its byte[] representation and stored as a byte-oriented String before calling this method.      // MEETEI MAYEK LETTERS HUK UN I (Unicode 0xabcd-\u003e0xabcf): 2 bytes\n     byte[] bytes \u003d \"\\uabcd\\uabce\\uabcf\"\n             .getBytes(StandardCharsets.UTF_8);\n     String HUK_UN_I \u003d new String(bytes, StandardCharsets.ISO_8859_1);\n\n     // 0x00-0xFF:  1 byte\n     String rfc7301Grease8F \u003d \"\\008F\\008F\";\n\n     SSLParameters p \u003d sslSocket.getSSLParameters();\n     p.setApplicationProtocols(new String[] {\n             \"h2\", \"http/1.1\", rfc7301Grease8F, HUK_UN_I});\n     sslSocket.setSSLParameters(p);",
      "tagMap": {
        "implSpec": [
          "This method will make a copy of the \n\u003ccode\u003eprotocols\u003c/code\u003e array."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html#getApplicationProtocols()\"\u003e\u003ccode\u003egetApplicationProtocols()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprotocols\u003c/code\u003e - an ordered array of application protocols, with \n\u003ccode\u003eprotocols[0]\u003c/code\u003e being the most preferred. If the array is empty (zero-length), protocol indications will not be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if protocols is null, or if any element in a non-empty array is null or an empty (zero-length) string"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs SSLParameters. The values of cipherSuites, protocols, cryptographic algorithm constraints, endpoint identification algorithm, server names and server name matchers are set to null; useCipherSuitesOrder, wantClientAuth and needClientAuth are set to false; enableRetransmissions is set to true; maximum network packet size is set to 0.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "cipherSuites"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs SSLParameters from the specified array of ciphersuites. Calling this constructor is equivalent to calling the no-args constructor followed by setCipherSuites(cipherSuites);. Note that the standard list of cipher suite names may be found in the JSSE Cipher Suite Names section of the Java Cryptography Architecture Standard Algorithm Name Documentation. Providers may support cipher suite names not found in this list.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecipherSuites\u003c/code\u003e - the array of ciphersuites (or null)"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "cipherSuites"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "protocols"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs SSLParameters from the specified array of ciphersuites and protocols. Calling this constructor is equivalent to calling the no-args constructor followed by setCipherSuites(cipherSuites); setProtocols(protocols);. Note that the standard list of cipher suite names may be found in the JSSE Cipher Suite Names section of the Java Cryptography Architecture Standard Algorithm Name Documentation. Providers may support cipher suite names not found in this list.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecipherSuites\u003c/code\u003e - the array of ciphersuites (or null)",
          "\u003ccode\u003eprotocols\u003c/code\u003e - the array of protocols (or null)"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.net.ssl.SSLParameters",
  "comment": "Encapsulates parameters for an SSL/TLS/DTLS connection. The parameters are the list of ciphersuites to be accepted in an SSL/TLS/DTLS handshake, the list of protocols to be allowed, the endpoint identification algorithm during SSL/TLS/DTLS handshaking, the Server Name Indication (SNI), the maximum network packet size, the algorithm constraints and whether SSL/TLS/DTLS servers should request or require client authentication, etc. \n\u003cp\u003e SSLParameters can be created via the constructors in this class. Objects can also be obtained using the \u003ccode\u003egetSSLParameters()\u003c/code\u003e methods in \u003ca href\u003d\"SSLSocket.html#getSSLParameters()\"\u003e\u003ccode\u003eSSLSocket\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SSLServerSocket.html#getSSLParameters()\"\u003e\u003ccode\u003eSSLServerSocket\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SSLEngine.html#getSSLParameters()\"\u003e\u003ccode\u003eSSLEngine\u003c/code\u003e\u003c/a\u003e or the \u003ca href\u003d\"SSLContext.html#getDefaultSSLParameters()\"\u003e\u003ccode\u003egetDefaultSSLParameters()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SSLContext.html#getSupportedSSLParameters()\"\u003e\u003ccode\u003egetSupportedSSLParameters()\u003c/code\u003e\u003c/a\u003e methods in \u003ccode\u003eSSLContext\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e SSLParameters can be applied to a connection via the methods \u003ca href\u003d\"SSLSocket.html#setSSLParameters(javax.net.ssl.SSLParameters)\"\u003e\u003ccode\u003eSSLSocket.setSSLParameters()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SSLServerSocket.html#setSSLParameters(javax.net.ssl.SSLParameters)\"\u003e\u003ccode\u003eSSLServerSocket.setSSLParameters()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SSLEngine.html#setSSLParameters(javax.net.ssl.SSLParameters)\"\u003e\u003ccode\u003eSSLEngine.setSSLParameters()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e For example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     SSLParameters p \u003d sslSocket.getSSLParameters();\n     p.setProtocols(new String[] { \"TLSv1.2\" });\n     p.setCipherSuites(\n         new String[] { \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\", ... });\n     p.setApplicationProtocols(new String[] {\"h2\", \"http/1.1\"});\n     sslSocket.setSSLParameters(p);\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLSocket.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSSLSocket\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLEngine.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSSLEngine\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSSLContext\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}