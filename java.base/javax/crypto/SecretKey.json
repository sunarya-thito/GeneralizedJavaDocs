{
  "packageName": "javax.crypto",
  "simpleName": "SecretKey",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.security.Key",
      "type": "Class"
    },
    {
      "name": "javax.security.auth.Destroyable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "serialVersionUID",
      "comment": "The class fingerprint that is set to indicate serialization compatibility since J2SE 1.4.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.crypto.SecretKey.serialVersionUID\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.crypto.SecretKey",
  "comment": "A secret (symmetric) key. The purpose of this interface is to group (and provide type safety for) all secret key interfaces. \n\u003cp\u003e Provider implementations of this interface must overwrite the \u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e methods inherited from \u003ca href\u003d\"../../java/lang/Object.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/a\u003e, so that secret keys are compared based on their underlying key material and not based on reference. Implementations should override the default \u003ccode\u003edestroy\u003c/code\u003e and \u003ccode\u003eisDestroyed\u003c/code\u003e methods from the \u003ca href\u003d\"../security/auth/Destroyable.html\" title\u003d\"interface in javax.security.auth\"\u003e\u003ccode\u003eDestroyable\u003c/code\u003e\u003c/a\u003e interface to enable sensitive key information to be destroyed, cleared, or in the case where such information is immutable, unreferenced. Finally, since \u003ccode\u003eSecretKey\u003c/code\u003e is \u003ccode\u003eSerializable\u003c/code\u003e, implementations should also override \u003ca href\u003d\"../../java/io/ObjectOutputStream.html#writeObject(java.lang.Object)\"\u003e\u003ccode\u003eObjectOutputStream.writeObject(java.lang.Object)\u003c/code\u003e\u003c/a\u003e to prevent keys that have been destroyed from being serialized. \u003c/p\u003e\n\u003cp\u003eKeys that implement this interface return the string \u003ccode\u003eRAW\u003c/code\u003e as their encoding format (see \u003ccode\u003egetFormat\u003c/code\u003e), and return the raw key bytes as the result of a \u003ccode\u003egetEncoded\u003c/code\u003e method call. (The \u003ccode\u003egetFormat\u003c/code\u003e and \u003ccode\u003egetEncoded\u003c/code\u003e methods are inherited from the \u003ca href\u003d\"../../java/security/Key.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eKey\u003c/code\u003e\u003c/a\u003e parent interface.)\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/SecretKeyFactory.html\" title\u003d\"class in javax.crypto\"\u003e\u003ccode\u003eSecretKeyFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/Cipher.html\" title\u003d\"class in javax.crypto\"\u003e\u003ccode\u003eCipher\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}