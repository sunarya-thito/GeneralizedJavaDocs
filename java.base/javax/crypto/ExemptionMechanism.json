{
  "packageName": "javax.crypto",
  "simpleName": "ExemptionMechanism",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getName",
      "comment": "Returns the exemption mechanism name of this ExemptionMechanism object. This is the same name that was specified in one of the getInstance calls that created this ExemptionMechanism object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the exemption mechanism name of this \n\u003ccode\u003eExemptionMechanism\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.crypto.ExemptionMechanism",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#exemption-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard exemption mechanism names."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports an \n\u003ccode\u003eExemptionMechanismSpi\u003c/code\u003e implementation for the specified algorithm",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eExemptionMechanism\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.crypto.ExemptionMechanism",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#exemption-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard exemption mechanism names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eprovider\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if an \n\u003ccode\u003eExemptionMechanismSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eExemptionMechanism\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.crypto.ExemptionMechanism",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#exemption-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard exemption mechanism names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eprovider\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if an \n\u003ccode\u003eExemptionMechanismSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified \n\u003ccode\u003eProvider object\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eExemptionMechanism\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this ExemptionMechanism object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the provider of this \n\u003ccode\u003eExemptionMechanism\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isCryptoAllowed",
      "comment": "Returns whether the result blob has been generated successfully by this exemption mechanism. The method also makes sure that the key passed in is the same as the one this exemption mechanism used in initializing and generating phases.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key the crypto is going to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered while determining whether the result blob has been generated successfully by this exemption mechanism object."
        ],
        "return": [
          "whether the result blob of the same key has been generated successfully by this exemption mechanism; false if \n\u003ccode\u003ekey\u003c/code\u003e is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getOutputSize",
      "comment": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next genExemptionBlob operation, given the input length inputLen (in bytes). The actual output length of the next genExemptionBlob call may be smaller than the length returned by this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einputLen\u003c/code\u003e - the input length (in bytes)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this exemption mechanism is in a wrong state (e.g., has not yet been initialized)"
        ],
        "return": [
          "the required output buffer size (in bytes)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "init",
      "comment": "Initializes this exemption mechanism with a key. If this exemption mechanism requires any algorithm parameters that cannot be derived from the given key, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidKeyException is raised.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for this exemption mechanism"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - if the given key is inappropriate for this exemption mechanism.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered in the process of initializing."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "init",
      "comment": "Initializes this exemption mechanism with a key and a set of algorithm parameters. If this exemption mechanism requires any algorithm parameters and params is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidAlgorithmParameterException is raised.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for this exemption mechanism",
          "\u003ccode\u003eparams\u003c/code\u003e - the algorithm parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - if the given key is inappropriate for this exemption mechanism.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the given algorithm parameters are inappropriate for this exemption mechanism.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered in the process of initializing."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "init",
      "comment": "Initializes this exemption mechanism with a key and a set of algorithm parameters. If this exemption mechanism requires any algorithm parameters and params is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidAlgorithmParameterException is raised.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for this exemption mechanism",
          "\u003ccode\u003eparams\u003c/code\u003e - the algorithm parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - if the given key is inappropriate for this exemption mechanism.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the given algorithm parameters are inappropriate for this exemption mechanism.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered in the process of initializing."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "genExemptionBlob",
      "comment": "Generates the exemption mechanism key blob.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this exemption mechanism is in a wrong state (e.g., has not been initialized).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered in the process of generating."
        ],
        "return": [
          "the new buffer with the result key blob."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "genExemptionBlob",
      "comment": "Generates the exemption mechanism key blob, and stores the result in the output buffer. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use getOutputSize to determine how big the output buffer should be.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoutput\u003c/code\u003e - the buffer for the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this exemption mechanism is in a wrong state (e.g., has not been initialized).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ShortBufferException.html\" title\u003d\"class in javax.crypto\"\u003eShortBufferException\u003c/a\u003e\u003c/code\u003e - if the given output buffer is too small to hold the result.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered in the process of generating."
        ],
        "return": [
          "the number of bytes stored in \n\u003ccode\u003eoutput\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "genExemptionBlob",
      "comment": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use getOutputSize to determine how big the output buffer should be.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoutput\u003c/code\u003e - the buffer for the result",
          "\u003ccode\u003eoutputOffset\u003c/code\u003e - the offset in \n\u003ccode\u003eoutput\u003c/code\u003e where the result is stored"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this exemption mechanism is in a wrong state (e.g., has not been initialized).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ShortBufferException.html\" title\u003d\"class in javax.crypto\"\u003eShortBufferException\u003c/a\u003e\u003c/code\u003e - if the given output buffer is too small to hold the result.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/ExemptionMechanismException.html\" title\u003d\"class in javax.crypto\"\u003eExemptionMechanismException\u003c/a\u003e\u003c/code\u003e - if problem(s) encountered in the process of generating."
        ],
        "return": [
          "the number of bytes stored in \n\u003ccode\u003eoutput\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.crypto.ExemptionMechanismSpi",
            "type": "Class"
          },
          "name": "exmechSpi",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "mechanism",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a ExemptionMechanism object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexmechSpi\u003c/code\u003e - the delegate",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider",
          "\u003ccode\u003emechanism\u003c/code\u003e - the exemption mechanism"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.crypto.ExemptionMechanism",
  "comment": "This class provides the functionality of an exemption mechanism, examples of which are \n\u003ci\u003ekey recovery\u003c/i\u003e, \n\u003ci\u003ekey weakening\u003c/i\u003e, and \n\u003ci\u003ekey escrow\u003c/i\u003e. \n\u003cp\u003eApplications or applets that use an exemption mechanism may be granted stronger encryption capabilities than those which don\u0027t.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}