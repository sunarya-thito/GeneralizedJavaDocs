{
  "packageName": "javax.security.cert",
  "simpleName": "X509Certificate",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "javax.security.cert.Certificate",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.security.cert.X509Certificate",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Instantiates an X509Certificate object, and initializes it with the data read from the input stream inStream. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the cert.provider.x509v1 security property. Note: Only one DER-encoded certificate is expected to be in the input stream. Also, all X509Certificate subclasses must provide a constructor of the form: \n public \u003csubClass\u003e(InputStream inStream) ...",
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - an input stream with the data to be read to initialize the certificate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/CertificateException.html\" title\u003d\"class in javax.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if a class initialization or certificate parsing error occurs."
        ],
        "return": [
          "an X509Certificate object initialized with the data from the input stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.cert.X509Certificate",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "certData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Instantiates an X509Certificate object, and initializes it with the specified byte array. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the cert.provider.x509v1 security property. Note: All X509Certificate subclasses must provide a constructor of the form: \n public \u003csubClass\u003e(InputStream inStream) ...",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecertData\u003c/code\u003e - a byte array containing the DER-encoded certificate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/CertificateException.html\" title\u003d\"class in javax.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if a class initialization or certificate parsing error occurs."
        ],
        "return": [
          "an X509Certificate object initialized with the data from \n\u003ccode\u003ecertData\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.cert.CertificateExpiredException",
          "type": "Class"
        },
        {
          "name": "javax.security.cert.CertificateNotYetValidException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "checkValidity",
      "comment": "Checks that the certificate is currently valid. It is if the current date and time are within the validity period given in the certificate. The validity period consists of two date/time values: the first and last dates (and times) on which the certificate is valid. It is defined in ASN.1 as:  validity             Validity\n\n Validity ::\u003d SEQUENCE {\n     notBefore      CertificateValidityDate,\n     notAfter       CertificateValidityDate }\n\n CertificateValidityDate ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/CertificateExpiredException.html\" title\u003d\"class in javax.security.cert\"\u003eCertificateExpiredException\u003c/a\u003e\u003c/code\u003e - if the certificate has expired.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/CertificateNotYetValidException.html\" title\u003d\"class in javax.security.cert\"\u003eCertificateNotYetValidException\u003c/a\u003e\u003c/code\u003e - if the certificate is not yet valid."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.cert.CertificateExpiredException",
          "type": "Class"
        },
        {
          "name": "javax.security.cert.CertificateNotYetValidException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "checkValidity",
      "comment": "Checks that the specified date is within the certificate\u0027s validity period. In other words, this determines whether the certificate would be valid at the specified date/time.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/X509Certificate.html#checkValidity()\"\u003e\u003ccode\u003echeckValidity()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the Date to check against to see if this certificate is valid at that date/time."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/CertificateExpiredException.html\" title\u003d\"class in javax.security.cert\"\u003eCertificateExpiredException\u003c/a\u003e\u003c/code\u003e - if the certificate has expired with respect to the \n\u003ccode\u003edate\u003c/code\u003e supplied.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/CertificateNotYetValidException.html\" title\u003d\"class in javax.security.cert\"\u003eCertificateNotYetValidException\u003c/a\u003e\u003c/code\u003e - if the certificate is not yet valid with respect to the \n\u003ccode\u003edate\u003c/code\u003e supplied."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVersion",
      "comment": "Gets the version (version number) value from the certificate. The ASN.1 definition for this is:  version         [0]  EXPLICIT Version DEFAULT v1\n\n Version  ::\u003d  INTEGER  {  v1(0), v2(1), v3(2)  }",
      "tagMap": {
        "return": [
          "the version number from the ASN.1 encoding, i.e. 0, 1 or 2."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSerialNumber",
      "comment": "Gets the serialNumber value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is:  serialNumber     CertificateSerialNumber\n\n CertificateSerialNumber  ::\u003d  INTEGER",
      "tagMap": {
        "return": [
          "the serial number."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getIssuerDN",
      "comment": "Gets the issuer (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is:  issuer    Name\n\n Name ::\u003d CHOICE { RDNSequence }\n RDNSequence ::\u003d SEQUENCE OF RelativeDistinguishedName\n RelativeDistinguishedName ::\u003d\n     SET OF AttributeValueAssertion\n\n AttributeValueAssertion ::\u003d SEQUENCE {\n                               AttributeType,\n                               AttributeValue }\n AttributeType ::\u003d OBJECT IDENTIFIER\n AttributeValue ::\u003d ANY\n The Name describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the AttributeValue component is determined by the AttributeType; in general it will be a directoryString. A directoryString is usually one of PrintableString, TeletexString or UniversalString.",
      "tagMap": {
        "return": [
          "a Principal whose name is the issuer distinguished name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSubjectDN",
      "comment": "Gets the subject (subject distinguished name) value from the certificate. The ASN.1 definition for this is:  subject    Name\n See getIssuerDN for Name and other relevant definitions.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/X509Certificate.html#getIssuerDN()\"\u003e\u003ccode\u003egetIssuerDN()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a Principal whose name is the subject name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNotBefore",
      "comment": "Gets the notBefore date from the validity period of the certificate. The relevant ASN.1 definitions are:  validity             Validity\n\n Validity ::\u003d SEQUENCE {\n     notBefore      CertificateValidityDate,\n     notAfter       CertificateValidityDate }\n\n CertificateValidityDate ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/X509Certificate.html#checkValidity()\"\u003e\u003ccode\u003echeckValidity()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the start date of the validity period."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNotAfter",
      "comment": "Gets the notAfter date from the validity period of the certificate. See getNotBefore for relevant ASN.1 definitions.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/X509Certificate.html#checkValidity()\"\u003e\u003ccode\u003echeckValidity()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the end date of the validity period."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSigAlgName",
      "comment": "Gets the signature algorithm name for the certificate signature algorithm. An example is the string \"SHA-1/DSA\". The ASN.1 definition for this is:  signatureAlgorithm   AlgorithmIdentifier\n\n AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                             -- contains a value of the type\n                             -- registered for use with the\n                             -- algorithm object identifier value\n The algorithm name is determined from the algorithm OID string.",
      "tagMap": {
        "return": [
          "the signature algorithm name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSigAlgOID",
      "comment": "Gets the signature algorithm OID string from the certificate. An OID is represented by a set of positive whole numbers separated by periods. For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1 with DSA signature algorithm, as per the PKIX part I. See getSigAlgName for relevant ASN.1 definitions.",
      "tagMap": {
        "return": [
          "the signature algorithm OID string."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSigAlgParams",
      "comment": "Gets the DER-encoded signature algorithm parameters from this certificate\u0027s signature algorithm. In most cases, the signature algorithm parameters are null; the parameters are usually supplied with the certificate\u0027s public key. See getSigAlgName for relevant ASN.1 definitions.",
      "tagMap": {
        "return": [
          "the DER-encoded signature algorithm parameters, or null if no parameters are present."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.security.cert.X509Certificate",
  "comment": "Abstract class for X.509 v1 certificates. This provides a standard way to access all the version 1 attributes of an X.509 certificate. Attributes that are specific to X.509 v2 or v3 are not available through this interface. Future API evolution will provide full access to complete X.509 v3 attributes. \n\u003cp\u003e The basic X.509 format was defined by ISO/IEC and ANSI X9 and is described below in ASN.1: \u003c/p\u003e\n\u003cpre\u003e Certificate  ::\u003d  SEQUENCE  {\n     tbsCertificate       TBSCertificate,\n     signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING  }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). \u003c/p\u003e\n\u003cp\u003e These certificates are managed and vouched for by \u003cem\u003eCertificate Authorities\u003c/em\u003e (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a \"root\" CA. \u003c/p\u003e\n\u003cp\u003e The ASN.1 definition of \u003ccode\u003etbsCertificate\u003c/code\u003e is: \u003c/p\u003e\n\u003cpre\u003e TBSCertificate  ::\u003d  SEQUENCE  {\n     version         [0]  EXPLICIT Version DEFAULT v1,\n     serialNumber         CertificateSerialNumber,\n     signature            AlgorithmIdentifier,\n     issuer               Name,\n     validity             Validity,\n     subject              Name,\n     subjectPublicKeyInfo SubjectPublicKeyInfo,\n     }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Here is sample code to instantiate an X.509 certificate: \u003c/p\u003e\n\u003cpre\u003e InputStream inStream \u003d new FileInputStream(\"fileName-of-cert\");\n X509Certificate cert \u003d X509Certificate.getInstance(inStream);\n inStream.close();\n \u003c/pre\u003e OR \n\u003cpre\u003e byte[] certData \u003d \u0026lt;certificate read from a file, say\u0026gt;\n X509Certificate cert \u003d X509Certificate.getInstance(certData);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e In either case, the code that instantiates an X.509 certificate consults the value of the \u003ccode\u003ecert.provider.x509v1\u003c/code\u003e security property to locate the actual implementation or instantiates a default implementation. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003ecert.provider.x509v1\u003c/code\u003e property is set to a default implementation for X.509 such as: \u003c/p\u003e\n\u003cpre\u003e cert.provider.x509v1\u003dcom.sun.security.cert.internal.x509.X509V1CertImpl\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The value of this \u003ccode\u003ecert.provider.x509v1\u003c/code\u003e property has to be changed to instantiate another implementation. If this security property is not set, a default implementation will be used. Currently, due to possible security restrictions on access to Security properties, this value is looked up and cached at class initialization time and will fallback on a default implementation if the Security property is not accessible. \u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote: The classes in the package \u003ccode\u003ejavax.security.cert\u003c/code\u003e exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in \u003ccode\u003ejava.security.cert\u003c/code\u003e.\u003c/em\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/cert/Certificate.html\" title\u003d\"class in javax.security.cert\"\u003e\u003ccode\u003eCertificate\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Extension.html\" title\u003d\"interface in java.security.cert\"\u003e\u003ccode\u003eX509Extension\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003esecurity properties\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}