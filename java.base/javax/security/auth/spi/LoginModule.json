{
  "packageName": "javax.security.auth.spi",
  "simpleName": "LoginModule",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.Subject",
            "type": "Class"
          },
          "name": "subject",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.callback.CallbackHandler",
            "type": "Class"
          },
          "name": "callbackHandler",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "sharedState",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "options",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initialize",
      "comment": "Initialize this LoginModule. This method is called by the LoginContext after this LoginModule has been instantiated. The purpose of this method is to initialize this LoginModule with the relevant information. If this LoginModule does not understand any of the data stored in sharedState or options parameters, they can be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to be authenticated.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - a \n\u003ccode\u003eCallbackHandler\u003c/code\u003e for communicating with the end user (prompting for usernames and passwords, for example).",
          "\u003ccode\u003esharedState\u003c/code\u003e - state shared with other configured LoginModules.",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specified in the login \n\u003ccode\u003eConfiguration\u003c/code\u003e for this particular \n\u003ccode\u003eLoginModule\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "login",
      "comment": "Method to authenticate a Subject (phase 1). The implementation of this method authenticates a Subject. For example, it may prompt for Subject information such as a username and password and then attempt to verify the password. This method saves the result of the authentication attempt as private state within the LoginModule.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the authentication fails"
        ],
        "return": [
          "true if the authentication succeeded, or false if this \n\u003ccode\u003eLoginModule\u003c/code\u003e should be ignored."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "commit",
      "comment": "Method to commit the authentication process (phase 2). This method is called if the LoginContext\u0027s overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login method), then this method associates relevant Principals and Credentials with the Subject located in the LoginModule. If this LoginModule\u0027s own authentication attempted failed, then this method removes/destroys any state that was originally saved.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the commit fails"
        ],
        "return": [
          "true if this method succeeded, or false if this \n\u003ccode\u003eLoginModule\u003c/code\u003e should be ignored."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "abort",
      "comment": "Method to abort the authentication process (phase 2). This method is called if the LoginContext\u0027s overall authentication failed. (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login method), then this method cleans up any state that was originally saved.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the abort fails"
        ],
        "return": [
          "true if this method succeeded, or false if this \n\u003ccode\u003eLoginModule\u003c/code\u003e should be ignored."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "logout",
      "comment": "Method which logs out a Subject. An implementation of this method might remove/destroy a Subject\u0027s Principals and Credentials.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the logout fails"
        ],
        "return": [
          "true if this method succeeded, or false if this \n\u003ccode\u003eLoginModule\u003c/code\u003e should be ignored."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.security.auth.spi.LoginModule",
  "comment": "\u003cp\u003e Service-provider interface for authentication technology providers. LoginModules are plugged in under applications to provide a particular type of authentication. \u003c/p\u003e\n\u003cp\u003e While applications write to the \u003ccode\u003eLoginContext\u003c/code\u003e API, authentication technology providers implement the \u003ccode\u003eLoginModule\u003c/code\u003e interface. A \u003ccode\u003eConfiguration\u003c/code\u003e specifies the LoginModule(s) to be used with a particular login application. Therefore different LoginModules can be plugged in under the application without requiring any modifications to the application itself. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eLoginContext\u003c/code\u003e is responsible for reading the \u003ccode\u003eConfiguration\u003c/code\u003e and instantiating the appropriate LoginModules. Each \u003ccode\u003eLoginModule\u003c/code\u003e is initialized with a \u003ccode\u003eSubject\u003c/code\u003e, a \u003ccode\u003eCallbackHandler\u003c/code\u003e, shared \u003ccode\u003eLoginModule\u003c/code\u003e state, and LoginModule-specific options. The \u003ccode\u003eSubject\u003c/code\u003e represents the \u003ccode\u003eSubject\u003c/code\u003e currently being authenticated and is updated with relevant Credentials if authentication succeeds. LoginModules use the \u003ccode\u003eCallbackHandler\u003c/code\u003e to communicate with users. The \u003ccode\u003eCallbackHandler\u003c/code\u003e may be used to prompt for usernames and passwords, for example. Note that the \u003ccode\u003eCallbackHandler\u003c/code\u003e may be null. LoginModules which absolutely require a \u003ccode\u003eCallbackHandler\u003c/code\u003e to authenticate the \u003ccode\u003eSubject\u003c/code\u003e may throw a \u003ccode\u003eLoginException\u003c/code\u003e. LoginModules optionally use the shared state to share information or data among themselves. \u003c/p\u003e\n\u003cp\u003e The LoginModule-specific options represent the options configured for this \u003ccode\u003eLoginModule\u003c/code\u003e by an administrator or user in the login \u003ccode\u003eConfiguration\u003c/code\u003e. The options are defined by the \u003ccode\u003eLoginModule\u003c/code\u003e itself and control the behavior within it. For example, a \u003ccode\u003eLoginModule\u003c/code\u003e may define options to support debugging/testing capabilities. Options are defined using a key-value syntax, such as \u003ci\u003edebug\u003dtrue\u003c/i\u003e. The \u003ccode\u003eLoginModule\u003c/code\u003e stores the options as a \u003ccode\u003eMap\u003c/code\u003e so that the values may be retrieved using the key. Note that there is no limit to the number of options a \u003ccode\u003eLoginModule\u003c/code\u003e chooses to define. \u003c/p\u003e\n\u003cp\u003e The calling application sees the authentication process as a single operation. However, the authentication process within the \u003ccode\u003eLoginModule\u003c/code\u003e proceeds in two distinct phases. In the first phase, the LoginModule\u0027s \u003ccode\u003elogin\u003c/code\u003e method gets invoked by the LoginContext\u0027s \u003ccode\u003elogin\u003c/code\u003e method. The \u003ccode\u003elogin\u003c/code\u003e method for the \u003ccode\u003eLoginModule\u003c/code\u003e then performs the actual authentication (prompt for and verify a password for example) and saves its authentication status as private state information. Once finished, the LoginModule\u0027s \u003ccode\u003elogin\u003c/code\u003e method either returns \u003ccode\u003etrue\u003c/code\u003e (if it succeeded) or \u003ccode\u003efalse\u003c/code\u003e (if it should be ignored), or throws a \u003ccode\u003eLoginException\u003c/code\u003e to specify a failure. In the failure case, the \u003ccode\u003eLoginModule\u003c/code\u003e must not retry the authentication or introduce delays. The responsibility of such tasks belongs to the application. If the application attempts to retry the authentication, the LoginModule\u0027s \u003ccode\u003elogin\u003c/code\u003e method will be called again. \u003c/p\u003e\n\u003cp\u003e In the second phase, if the LoginContext\u0027s overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded), then the \u003ccode\u003ecommit\u003c/code\u003e method for the \u003ccode\u003eLoginModule\u003c/code\u003e gets invoked. The \u003ccode\u003ecommit\u003c/code\u003e method for a \u003ccode\u003eLoginModule\u003c/code\u003e checks its privately saved state to see if its own authentication succeeded. If the overall \u003ccode\u003eLoginContext\u003c/code\u003e authentication succeeded and the LoginModule\u0027s own authentication succeeded, then the \u003ccode\u003ecommit\u003c/code\u003e method associates the relevant Principals (authenticated identities) and Credentials (authentication data such as cryptographic keys) with the \u003ccode\u003eSubject\u003c/code\u003e located within the \u003ccode\u003eLoginModule\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e If the LoginContext\u0027s overall authentication failed (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed), then the \u003ccode\u003eabort\u003c/code\u003e method for each \u003ccode\u003eLoginModule\u003c/code\u003e gets invoked. In this case, the \u003ccode\u003eLoginModule\u003c/code\u003e removes/destroys any authentication state originally saved. \u003c/p\u003e\n\u003cp\u003e Logging out a \u003ccode\u003eSubject\u003c/code\u003e involves only one phase. The \u003ccode\u003eLoginContext\u003c/code\u003e invokes the LoginModule\u0027s \u003ccode\u003elogout\u003c/code\u003e method. The \u003ccode\u003elogout\u003c/code\u003e method for the \u003ccode\u003eLoginModule\u003c/code\u003e then performs the logout procedures, such as removing Principals or Credentials from the \u003ccode\u003eSubject\u003c/code\u003e or logging session information. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eLoginModule\u003c/code\u003e implementation must have a constructor with no arguments. This allows classes which load the \u003ccode\u003eLoginModule\u003c/code\u003e to instantiate it.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginContext.html\" title\u003d\"class in javax.security.auth.login\"\u003e\u003ccode\u003eLoginContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/Configuration.html\" title\u003d\"class in javax.security.auth.login\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}