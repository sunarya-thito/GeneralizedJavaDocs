{
  "packageName": "javax.security.auth.login",
  "simpleName": "Configuration",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.security.auth.login.Configuration",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getConfiguration",
      "comment": "Get the installed login Configuration.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/Configuration.html#setConfiguration(javax.security.auth.login.Configuration)\"\u003e\u003ccode\u003esetConfiguration(javax.security.auth.login.Configuration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to retrieve the Configuration."
        ],
        "return": [
          "the login Configuration. If a Configuration object was set via the \n\u003ccode\u003eConfiguration.setConfiguration\u003c/code\u003e method, then that object is returned. Otherwise, a default Configuration object is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.login.Configuration",
            "type": "Class"
          },
          "name": "configuration",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setConfiguration",
      "comment": "Set the login Configuration.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/Configuration.html#getConfiguration()\"\u003e\u003ccode\u003egetConfiguration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econfiguration\u003c/code\u003e - the new \n\u003ccode\u003eConfiguration\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread does not have Permission to set the \n\u003ccode\u003eConfiguration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.login.Configuration",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.login.Configuration$Parameters",
            "type": "Class"
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a Configuration object of the specified type. This method traverses the list of registered security providers, starting with the most preferred Provider. A new Configuration object encapsulating the ConfigurationSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the specified Configuration type. See the Configuration section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#configuration-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Configuration types.",
          "\u003ccode\u003eparams\u003c/code\u003e - parameters for the Configuration, which may be null."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified parameters are not understood by the \n\u003ccode\u003eConfigurationSpi\u003c/code\u003e implementation from the selected \n\u003ccode\u003eProvider\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eConfigurationSpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to get a \n\u003ccode\u003eConfiguration\u003c/code\u003e instance for the specified type"
        ],
        "return": [
          "the new \n\u003ccode\u003eConfiguration\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.login.Configuration",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.login.Configuration$Parameters",
            "type": "Class"
          },
          "name": "params",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a Configuration object of the specified type. A new Configuration object encapsulating the ConfigurationSpi implementation from the specified provider is returned. The specified provider must be registered in the provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the specified Configuration type. See the Configuration section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#configuration-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Configuration types.",
          "\u003ccode\u003eparams\u003c/code\u003e - parameters for the Configuration, which may be null.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider is \n\u003ccode\u003enull\u003c/code\u003e or empty, or if the specified parameters are not understood by the \n\u003ccode\u003eConfigurationSpi\u003c/code\u003e implementation from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the specified provider does not support a \n\u003ccode\u003eConfigurationSpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to get a \n\u003ccode\u003eConfiguration\u003c/code\u003e instance for the specified type"
        ],
        "return": [
          "the new \n\u003ccode\u003eConfiguration\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.login.Configuration",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.login.Configuration$Parameters",
            "type": "Class"
          },
          "name": "params",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a Configuration object of the specified type. A new Configuration object encapsulating the ConfigurationSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the specified Configuration type. See the Configuration section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#configuration-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Configuration types.",
          "\u003ccode\u003eparams\u003c/code\u003e - parameters for the Configuration, which may be null.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the Provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eProvider\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if the specified parameters are not understood by the \n\u003ccode\u003eConfigurationSpi\u003c/code\u003e implementation from the specified Provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eProvider\u003c/code\u003e does not support a \n\u003ccode\u003eConfigurationSpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to get a \n\u003ccode\u003eConfiguration\u003c/code\u003e instance for the specified type"
        ],
        "return": [
          "the new \n\u003ccode\u003eConfiguration\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProvider",
      "comment": "Return the Provider of this Configuration. This Configuration instance will only have a Provider if it was obtained via a call to Configuration.getInstance. Otherwise this method returns null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the Provider of this Configuration, or null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Return the type of this Configuration. This Configuration instance will only have a type if it was obtained via a call to Configuration.getInstance. Otherwise this method returns null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the type of this Configuration, or null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.login.Configuration$Parameters",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameters",
      "comment": "Return Configuration parameters. This Configuration instance will only have parameters if it was obtained via a call to Configuration.getInstance. Otherwise this method returns null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Configuration parameters, or null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.login.AppConfigurationEntry",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAppConfigurationEntry",
      "comment": "Retrieve the AppConfigurationEntries for the specified name from this Configuration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used to index the Configuration."
        ],
        "return": [
          "an array of AppConfigurationEntries for the specified \n\u003ccode\u003ename\u003c/code\u003e from this Configuration, or null if there are no entries for the specified \n\u003ccode\u003ename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "refresh",
      "comment": "Refresh and reload the Configuration. This method causes this Configuration object to refresh/reload its contents in an implementation-dependent manner. For example, if this Configuration object stores its entries in a file, calling refresh may cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the implementation.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to refresh its Configuration."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.security.auth.login.Configuration$Parameters"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.security.auth.login.Configuration",
  "comment": "A Configuration object is responsible for specifying which LoginModules should be used for a particular application, and in what order the LoginModules should be invoked. \n\u003cp\u003e A login configuration contains the following information. Note that this example only represents the default syntax for the \u003ccode\u003eConfiguration\u003c/code\u003e. Subclass implementations of this class may implement alternative syntaxes and may retrieve the \u003ccode\u003eConfiguration\u003c/code\u003e from any source such as files, databases, or servers. \u003c/p\u003e\n\u003cpre\u003e      Name {\n            ModuleClass  Flag    ModuleOptions;\n            ModuleClass  Flag    ModuleOptions;\n            ModuleClass  Flag    ModuleOptions;\n      };\n      Name {\n            ModuleClass  Flag    ModuleOptions;\n            ModuleClass  Flag    ModuleOptions;\n      };\n      other {\n            ModuleClass  Flag    ModuleOptions;\n            ModuleClass  Flag    ModuleOptions;\n      };\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Each entry in the \u003ccode\u003eConfiguration\u003c/code\u003e is indexed via an application name, \u003ci\u003eName\u003c/i\u003e, and contains a list of LoginModules configured for that application. Each \u003ccode\u003eLoginModule\u003c/code\u003e is specified via its fully qualified class name. Authentication proceeds down the module list in the exact order specified. If an application does not have a specific entry, it defaults to the specific entry for \"\u003ci\u003eother\u003c/i\u003e\". \u003c/p\u003e\n\u003cp\u003e The \u003ci\u003eFlag\u003c/i\u003e value controls the overall behavior as authentication proceeds down the stack. The following represents a description of the valid values for \u003ci\u003eFlag\u003c/i\u003e and their respective semantics: \u003c/p\u003e\n\u003cpre\u003e      1) Required     - The \u003ccode\u003eLoginModule\u003c/code\u003e is required to succeed.\n                      If it succeeds or fails, authentication still continues\n                      to proceed down the \u003ccode\u003eLoginModule\u003c/code\u003e list.\n\n      2) Requisite    - The \u003ccode\u003eLoginModule\u003c/code\u003e is required to succeed.\n                      If it succeeds, authentication continues down the\n                      \u003ccode\u003eLoginModule\u003c/code\u003e list.  If it fails,\n                      control immediately returns to the application\n                      (authentication does not proceed down the\n                      \u003ccode\u003eLoginModule\u003c/code\u003e list).\n\n      3) Sufficient   - The \u003ccode\u003eLoginModule\u003c/code\u003e is not required to\n                      succeed.  If it does succeed, control immediately\n                      returns to the application (authentication does not\n                      proceed down the \u003ccode\u003eLoginModule\u003c/code\u003e list).\n                      If it fails, authentication continues down the\n                      \u003ccode\u003eLoginModule\u003c/code\u003e list.\n\n      4) Optional     - The \u003ccode\u003eLoginModule\u003c/code\u003e is not required to\n                      succeed.  If it succeeds or fails,\n                      authentication still continues to proceed down the\n                      \u003ccode\u003eLoginModule\u003c/code\u003e list.\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The overall authentication succeeds only if all \u003ci\u003eRequired\u003c/i\u003e and \u003ci\u003eRequisite\u003c/i\u003e LoginModules succeed. If a \u003ci\u003eSufficient\u003c/i\u003e \u003ccode\u003eLoginModule\u003c/code\u003e is configured and succeeds, then only the \u003ci\u003eRequired\u003c/i\u003e and \u003ci\u003eRequisite\u003c/i\u003e LoginModules prior to that \u003ci\u003eSufficient\u003c/i\u003e \u003ccode\u003eLoginModule\u003c/code\u003e need to have succeeded for the overall authentication to succeed. If no \u003ci\u003eRequired\u003c/i\u003e or \u003ci\u003eRequisite\u003c/i\u003e LoginModules are configured for an application, then at least one \u003ci\u003eSufficient\u003c/i\u003e or \u003ci\u003eOptional\u003c/i\u003e \u003ccode\u003eLoginModule\u003c/code\u003e must succeed. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003eModuleOptions\u003c/i\u003e is a space separated list of \u003ccode\u003eLoginModule\u003c/code\u003e-specific values which are passed directly to the underlying LoginModules. Options are defined by the \u003ccode\u003eLoginModule\u003c/code\u003e itself, and control the behavior within it. For example, a \u003ccode\u003eLoginModule\u003c/code\u003e may define options to support debugging/testing capabilities. The correct way to specify options in the \u003ccode\u003eConfiguration\u003c/code\u003e is by using the following key-value pairing: \u003ci\u003edebug\u003d\"true\"\u003c/i\u003e. The key and value should be separated by an \u0027equals\u0027 symbol, and the value should be surrounded by double quotes. If a String in the form, ${system.property}, occurs in the value, it will be expanded to the value of the system property. Note that there is no limit to the number of options a \u003ccode\u003eLoginModule\u003c/code\u003e may define. \u003c/p\u003e\n\u003cp\u003e The following represents an example \u003ccode\u003eConfiguration\u003c/code\u003e entry based on the syntax above: \u003c/p\u003e\n\u003cpre\u003e Login {\n   com.sun.security.auth.module.UnixLoginModule required;\n   com.sun.security.auth.module.Krb5LoginModule optional\n                   useTicketCache\u003d\"true\"\n                   ticketCache\u003d\"${user.home}${/}tickets\";\n };\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This \u003ccode\u003eConfiguration\u003c/code\u003e specifies that an application named, \"Login\", requires users to first authenticate to the \u003ci\u003ecom.sun.security.auth.module.UnixLoginModule\u003c/i\u003e, which is required to succeed. Even if the \u003ci\u003eUnixLoginModule\u003c/i\u003e authentication fails, the \u003ci\u003ecom.sun.security.auth.module.Krb5LoginModule\u003c/i\u003e still gets invoked. This helps hide the source of failure. Since the \u003ci\u003eKrb5LoginModule\u003c/i\u003e is \u003ci\u003eOptional\u003c/i\u003e, the overall authentication succeeds only if the \u003ci\u003eUnixLoginModule\u003c/i\u003e (\u003ci\u003eRequired\u003c/i\u003e) succeeds. \u003c/p\u003e\n\u003cp\u003e Also note that the LoginModule-specific options, \u003ci\u003euseTicketCache\u003d\"true\"\u003c/i\u003e and \u003ci\u003eticketCache\u003d${user.home}${/}tickets\"\u003c/i\u003e, are passed to the \u003ci\u003eKrb5LoginModule\u003c/i\u003e. These options instruct the \u003ci\u003eKrb5LoginModule\u003c/i\u003e to use the ticket cache at the specified location. The system properties, \u003ci\u003euser.home\u003c/i\u003e and \u003ci\u003e/\u003c/i\u003e (file.separator), are expanded to their respective values. \u003c/p\u003e\n\u003cp\u003e There is only one Configuration object installed in the runtime at any given time. A Configuration object can be installed by calling the \u003ccode\u003esetConfiguration\u003c/code\u003e method. The installed Configuration object can be obtained by calling the \u003ccode\u003egetConfiguration\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e If no Configuration object has been installed in the runtime, a call to \u003ccode\u003egetConfiguration\u003c/code\u003e installs an instance of the default Configuration implementation (a default subclass implementation of this abstract class). The default Configuration implementation can be changed by setting the value of the \u003ccode\u003elogin.configuration.provider\u003c/code\u003e security property to the fully qualified name of the desired Configuration subclass implementation. \u003c/p\u003e\n\u003cp\u003e Application code can directly subclass Configuration to provide a custom implementation. In addition, an instance of a Configuration object can be constructed by invoking one of the \u003ccode\u003egetInstance\u003c/code\u003e factory methods with a standard type. The default policy type is \"JavaLoginConfig\". See the Configuration section in the \u003ca href\u003d\"../../../../../../specs/security/standard-names.html#configuration-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Configuration types.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginContext.html\" title\u003d\"class in javax.security.auth.login\"\u003e\u003ccode\u003eLoginContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003esecurity properties\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}