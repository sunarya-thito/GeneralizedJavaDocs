{
  "packageName": "javax.security.auth.login",
  "simpleName": "LoginContext",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "login",
      "comment": "Perform the authentication. This method invokes the login method for each LoginModule configured for the name specified to the LoginContext constructor, as determined by the login Configuration. Each LoginModule then performs its respective type of authentication (username/password, smart card pin verification, etc.). This method completes a 2-phase authentication process by calling each configured LoginModule\u0027s commit method if the overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT, and OPTIONAL LoginModules succeeded), or by calling each configured LoginModule\u0027s abort method if the overall authentication failed. If authentication succeeded, each successful LoginModule\u0027s commit method associates the relevant Principals and Credentials with the Subject. If authentication failed, each LoginModule\u0027s abort method removes/destroys any previously stored state. If the commit phase of the authentication process fails, then the overall authentication fails and this method invokes the abort method for each configured LoginModule. If the abort phase fails for any reason, then this method propagates the original exception thrown either during the login phase or the commit phase. In either case, the overall authentication fails. In the case where multiple LoginModules fail, this method propagates the exception raised by the first LoginModule which failed. Note that if this method enters the abort phase (either the login or commit phase failed), this method invokes all LoginModules configured for the application regardless of their respective Configuration flag parameters. Essentially this means that Requisite and Sufficient semantics are ignored during the abort phase. This guarantees that proper cleanup and state restoration can take place.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the authentication fails."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logout",
      "comment": "Logout the Subject. This method invokes the logout method for each LoginModule configured for this LoginContext. Each LoginModule performs its respective logout procedure which may include removing/destroying Principal and Credential information from the Subject and state cleanup. Note that this method invokes all LoginModules configured for the application regardless of their respective Configuration flag parameters. Essentially this means that Requisite and Sufficient semantics are ignored for this method. This guarantees that proper cleanup and state restoration can take place.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the logout fails."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.Subject",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubject",
      "comment": "Return the authenticated Subject.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the authenticated Subject. If the caller specified a Subject to this LoginContext\u0027s constructor, this method returns the caller-specified Subject. If a Subject was not specified and authentication succeeds, this method returns the Subject instantiated and used for authentication by this LoginContext. If a Subject was not specified, and authentication fails or has not been attempted, this method returns null."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Instantiate a new LoginContext object with a name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used as the index into the \n\u003ccode\u003eConfiguration\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the caller-specified \n\u003ccode\u003ename\u003c/code\u003e does not appear in the \n\u003ccode\u003eConfiguration\u003c/code\u003e and there is no \n\u003ccode\u003eConfiguration\u003c/code\u003e entry for \"\n\u003ccode\u003eother\u003c/code\u003e\", or if the \n\u003ccode\u003eauth.login.defaultCallbackHandler\u003c/code\u003e security property was set, but the implementation class could not be loaded.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a SecurityManager is set and the caller does not have AuthPermission(\"createLoginContext.\n\u003ci\u003ename\u003c/i\u003e\"), or if a configuration entry for \n\u003ccode\u003ename\u003c/code\u003e does not exist and the caller does not additionally have AuthPermission(\"createLoginContext.other\")"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.Subject",
            "type": "Class"
          },
          "name": "subject",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Instantiate a new LoginContext object with a name and a Subject object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used as the index into the \n\u003ccode\u003eConfiguration\u003c/code\u003e.",
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to authenticate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the caller-specified \n\u003ccode\u003ename\u003c/code\u003e does not appear in the \n\u003ccode\u003eConfiguration\u003c/code\u003e and there is no \n\u003ccode\u003eConfiguration\u003c/code\u003e entry for \"\n\u003ci\u003eother\u003c/i\u003e\", if the caller-specified \n\u003ccode\u003esubject\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if the \n\u003ci\u003eauth.login.defaultCallbackHandler\u003c/i\u003e security property was set, but the implementation class could not be loaded.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a SecurityManager is set and the caller does not have AuthPermission(\"createLoginContext.\n\u003ci\u003ename\u003c/i\u003e\"), or if a configuration entry for \n\u003ci\u003ename\u003c/i\u003e does not exist and the caller does not additionally have AuthPermission(\"createLoginContext.other\")"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.callback.CallbackHandler",
            "type": "Class"
          },
          "name": "callbackHandler",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Instantiate a new LoginContext object with a name and a CallbackHandler object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used as the index into the \n\u003ccode\u003eConfiguration\u003c/code\u003e.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - the \n\u003ccode\u003eCallbackHandler\u003c/code\u003e object used by LoginModules to communicate with the user."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the caller-specified \n\u003ccode\u003ename\u003c/code\u003e does not appear in the \n\u003ccode\u003eConfiguration\u003c/code\u003e and there is no \n\u003ccode\u003eConfiguration\u003c/code\u003e entry for \"\n\u003ccode\u003eother\u003c/code\u003e\", or if the caller-specified \n\u003ccode\u003ecallbackHandler\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a SecurityManager is set and the caller does not have AuthPermission(\"createLoginContext.\n\u003ci\u003ename\u003c/i\u003e\"), or if a configuration entry for \n\u003ci\u003ename\u003c/i\u003e does not exist and the caller does not additionally have AuthPermission(\"createLoginContext.other\")"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.Subject",
            "type": "Class"
          },
          "name": "subject",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.callback.CallbackHandler",
            "type": "Class"
          },
          "name": "callbackHandler",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Instantiate a new LoginContext object with a name, a Subject to be authenticated, and a CallbackHandler object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used as the index into the \n\u003ccode\u003eConfiguration\u003c/code\u003e.",
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to authenticate.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - the \n\u003ccode\u003eCallbackHandler\u003c/code\u003e object used by LoginModules to communicate with the user."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the caller-specified \n\u003ccode\u003ename\u003c/code\u003e does not appear in the \n\u003ccode\u003eConfiguration\u003c/code\u003e and there is no \n\u003ccode\u003eConfiguration\u003c/code\u003e entry for \"\n\u003ci\u003eother\u003c/i\u003e\", or if the caller-specified \n\u003ccode\u003esubject\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if the caller-specified \n\u003ccode\u003ecallbackHandler\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a SecurityManager is set and the caller does not have AuthPermission(\"createLoginContext.\n\u003ci\u003ename\u003c/i\u003e\"), or if a configuration entry for \n\u003ci\u003ename\u003c/i\u003e does not exist and the caller does not additionally have AuthPermission(\"createLoginContext.other\")"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.Subject",
            "type": "Class"
          },
          "name": "subject",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.callback.CallbackHandler",
            "type": "Class"
          },
          "name": "callbackHandler",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.login.Configuration",
            "type": "Class"
          },
          "name": "config",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Instantiate a new LoginContext object with a name, a Subject to be authenticated, a CallbackHandler object, and a login Configuration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used as the index into the caller-specified \n\u003ccode\u003eConfiguration\u003c/code\u003e.",
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to authenticate, or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - the \n\u003ccode\u003eCallbackHandler\u003c/code\u003e object used by LoginModules to communicate with the user, or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003econfig\u003c/code\u003e - the \n\u003ccode\u003eConfiguration\u003c/code\u003e that lists the login modules to be called to perform the authentication, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the caller-specified \n\u003ccode\u003ename\u003c/code\u003e does not appear in the \n\u003ccode\u003eConfiguration\u003c/code\u003e and there is no \n\u003ccode\u003eConfiguration\u003c/code\u003e entry for \"\n\u003ci\u003eother\u003c/i\u003e\".",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a SecurityManager is set, \n\u003ci\u003econfig\u003c/i\u003e is \n\u003ccode\u003enull\u003c/code\u003e, and either the caller does not have AuthPermission(\"createLoginContext.\n\u003ci\u003ename\u003c/i\u003e\"), or if a configuration entry for \n\u003ci\u003ename\u003c/i\u003e does not exist and the caller does not additionally have AuthPermission(\"createLoginContext.other\")"
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.security.auth.login.LoginContext",
  "comment": "\u003cp\u003e The \u003ccode\u003eLoginContext\u003c/code\u003e class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A \u003ccode\u003eConfiguration\u003c/code\u003e specifies the authentication technology, or \u003ccode\u003eLoginModule\u003c/code\u003e, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself. \u003c/p\u003e\n\u003cp\u003e In addition to supporting \u003ci\u003epluggable\u003c/i\u003e authentication, this class also supports the notion of \u003ci\u003estacked\u003c/i\u003e authentication. Applications may be configured to use more than one LoginModule. For example, one could configure both a Kerberos LoginModule and a smart card LoginModule under an application. \u003c/p\u003e\n\u003cp\u003e A typical caller instantiates a LoginContext with a \u003ci\u003ename\u003c/i\u003e and a \u003ccode\u003eCallbackHandler\u003c/code\u003e. LoginContext uses the \u003ci\u003ename\u003c/i\u003e as the index into a Configuration to determine which LoginModules should be used, and which ones must succeed in order for the overall authentication to succeed. The \u003ccode\u003eCallbackHandler\u003c/code\u003e is passed to the underlying LoginModules so they may communicate and interact with users (prompting for a username and password via a graphical user interface, for example). \u003c/p\u003e\n\u003cp\u003e Once the caller has instantiated a LoginContext, it invokes the \u003ccode\u003elogin\u003c/code\u003e method to authenticate a \u003ccode\u003eSubject\u003c/code\u003e. The \u003ccode\u003elogin\u003c/code\u003e method invokes the configured modules to perform their respective types of authentication (username/password, smart card pin verification, etc.). Note that the LoginModules will not attempt authentication retries nor introduce delays if the authentication fails. Such tasks belong to the LoginContext caller. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003elogin\u003c/code\u003e method returns without throwing an exception, then the overall authentication succeeded. The caller can then retrieve the newly authenticated Subject by invoking the \u003ccode\u003egetSubject\u003c/code\u003e method. Principals and Credentials associated with the Subject may be retrieved by invoking the Subject\u0027s respective \u003ccode\u003egetPrincipals\u003c/code\u003e, \u003ccode\u003egetPublicCredentials\u003c/code\u003e, and \u003ccode\u003egetPrivateCredentials\u003c/code\u003e methods. \u003c/p\u003e\n\u003cp\u003e To logout the Subject, the caller calls the \u003ccode\u003elogout\u003c/code\u003e method. As with the \u003ccode\u003elogin\u003c/code\u003e method, this \u003ccode\u003elogout\u003c/code\u003e method invokes the \u003ccode\u003elogout\u003c/code\u003e method for the configured modules. \u003c/p\u003e\n\u003cp\u003e A LoginContext should not be used to authenticate more than one Subject. A separate LoginContext should be used to authenticate each different Subject. \u003c/p\u003e\n\u003cp\u003e The following documentation applies to all LoginContext constructors: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e \u003ccode\u003eSubject\u003c/code\u003e \n  \u003cul\u003e \n   \u003cli\u003e If the constructor has a Subject input parameter, the LoginContext uses the caller-specified Subject object. \u003c/li\u003e\n   \u003cli\u003e If the caller specifies a \u003ccode\u003enull\u003c/code\u003e Subject and a \u003ccode\u003enull\u003c/code\u003e value is permitted, the LoginContext instantiates a new Subject. \u003c/li\u003e\n   \u003cli\u003e If the constructor does \u003cb\u003enot\u003c/b\u003e have a Subject input parameter, the LoginContext instantiates a new Subject. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eConfiguration\u003c/code\u003e \n  \u003cul\u003e \n   \u003cli\u003e If the constructor has a Configuration input parameter and the caller specifies a non-null Configuration, the LoginContext uses the caller-specified Configuration. \u003cp\u003e If the constructor does \u003cb\u003enot\u003c/b\u003e have a Configuration input parameter, or if the caller specifies a \u003ccode\u003enull\u003c/code\u003e Configuration object, the constructor uses the following call to get the installed Configuration: \u003c/p\u003e\u003cpre\u003e      config \u003d Configuration.getConfiguration();\n \u003c/pre\u003e For both cases, the \u003ci\u003ename\u003c/i\u003e argument given to the constructor is passed to the \u003ccode\u003eConfiguration.getAppConfigurationEntry\u003c/code\u003e method. If the Configuration has no entries for the specified \u003ci\u003ename\u003c/i\u003e, then the \u003ccode\u003eLoginContext\u003c/code\u003e calls \u003ccode\u003egetAppConfigurationEntry\u003c/code\u003e with the name, \"\u003ci\u003eother\u003c/i\u003e\" (the default entry name). If there is no entry for \"\u003ci\u003eother\u003c/i\u003e\", then a \u003ccode\u003eLoginException\u003c/code\u003e is thrown. \u003c/li\u003e\n   \u003cli\u003e When LoginContext uses the installed Configuration, the caller requires the createLoginContext.\u003cem\u003ename\u003c/em\u003e and possibly createLoginContext.other AuthPermissions. Furthermore, the LoginContext will invoke configured modules from within an \u003ccode\u003eAccessController.doPrivileged\u003c/code\u003e call so that modules that perform security-sensitive tasks (such as connecting to remote hosts, and updating the Subject) will require the respective permissions, but the callers of the LoginContext will not require those permissions. \u003c/li\u003e\n   \u003cli\u003e When LoginContext uses a caller-specified Configuration, the caller does not require any createLoginContext AuthPermission. The LoginContext saves the \u003ccode\u003eAccessControlContext\u003c/code\u003e for the caller, and invokes the configured modules from within an \u003ccode\u003eAccessController.doPrivileged\u003c/code\u003e call constrained by that context. This means the caller context (stored when the LoginContext was created) must have sufficient permissions to perform any security-sensitive tasks that the modules may perform. \u003c/li\u003e\n   \u003cp\u003e\u003c/p\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003eCallbackHandler\u003c/code\u003e \n  \u003cul\u003e \n   \u003cli\u003e If the constructor has a CallbackHandler input parameter, the LoginContext uses the caller-specified CallbackHandler object. \u003c/li\u003e\n   \u003cli\u003e If the constructor does \u003cb\u003enot\u003c/b\u003e have a CallbackHandler input parameter, or if the caller specifies a \u003ccode\u003enull\u003c/code\u003e CallbackHandler object (and a \u003ccode\u003enull\u003c/code\u003e value is permitted), the LoginContext queries the \u003ccode\u003eauth.login.defaultCallbackHandler\u003c/code\u003e security property for the fully qualified class name of a default handler implementation. If the security property is not set, then the underlying modules will not have a CallbackHandler for use in communicating with users. The caller thus assumes that the configured modules have alternative means for authenticating the user. \u003c/li\u003e\n   \u003cli\u003e When the LoginContext uses the installed Configuration (instead of a caller-specified Configuration, see above), then this LoginContext must wrap any caller-specified or default CallbackHandler implementation in a new CallbackHandler implementation whose \u003ccode\u003ehandle\u003c/code\u003e method implementation invokes the specified CallbackHandler\u0027s \u003ccode\u003ehandle\u003c/code\u003e method in a \u003ccode\u003ejava.security.AccessController.doPrivileged\u003c/code\u003e call constrained by the caller\u0027s current \u003ccode\u003eAccessControlContext\u003c/code\u003e. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/AuthPermission.html\" title\u003d\"class in javax.security.auth\"\u003e\u003ccode\u003eAuthPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/Subject.html\" title\u003d\"class in javax.security.auth\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/callback/CallbackHandler.html\" title\u003d\"interface in javax.security.auth.callback\"\u003e\u003ccode\u003eCallbackHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/Configuration.html\" title\u003d\"class in javax.security.auth.login\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003e\u003ccode\u003eLoginModule\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003esecurity properties\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}