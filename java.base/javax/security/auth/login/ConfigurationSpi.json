{
  "packageName": "javax.security.auth.login",
  "simpleName": "ConfigurationSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.security.auth.login.AppConfigurationEntry",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGetAppConfigurationEntry",
      "comment": "Retrieve the AppConfigurationEntries for the specified name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name used to index the Configuration."
        ],
        "return": [
          "an array of AppConfigurationEntries for the specified \n\u003ccode\u003ename\u003c/code\u003e, or null if there are no entries."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineRefresh",
      "comment": "Refresh and reload the Configuration. This method causes this Configuration object to refresh/reload its contents in an implementation-dependent manner. For example, if this Configuration object stores its entries in a file, calling refresh may cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the implementation.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to refresh its Configuration."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.security.auth.login.ConfigurationSpi",
  "comment": "This class defines the \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ccode\u003eConfiguration\u003c/code\u003e class. All the abstract methods in this class must be implemented by each service provider who wishes to supply a Configuration implementation. \n\u003cp\u003e Subclass implementations of this abstract class must provide a public constructor that takes a \u003ccode\u003eConfiguration.Parameters\u003c/code\u003e object as an input parameter. This constructor also must throw an IllegalArgumentException if it does not understand the \u003ccode\u003eConfiguration.Parameters\u003c/code\u003e input.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}