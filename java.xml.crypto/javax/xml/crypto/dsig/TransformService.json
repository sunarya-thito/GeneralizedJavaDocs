{
  "packageName": "javax.xml.crypto.dsig",
  "simpleName": "TransformService",
  "moduleName": "java.xml.crypto",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.xml.crypto.dsig.TransformService",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mechanismType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a TransformService that supports the specified algorithm URI (ex: Transform.XPATH2) and mechanism type (ex: DOM). This method uses the standard JCA provider lookup mechanism to locate and instantiate a TransformService implementation of the desired algorithm and MechanismType service attribute. It traverses the list of registered security Providers, starting with the most preferred Provider. A new TransformService object from the first Provider that supports the specified algorithm and mechanism type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the URI of the algorithm. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#xml-signature-transform-transformservice-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard transform algorithms.",
          "\u003ccode\u003emechanismType\u003c/code\u003e - the type of the XML processing mechanism and representation. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#xml-signature-xmlsignaturefactorykeyinfofactorytransformservice-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard mechanism types."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e or \n\u003ccode\u003emechanismType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eTransformService\u003c/code\u003e implementation for the specified algorithm and mechanism type"
        ],
        "return": [
          "a new \n\u003ccode\u003eTransformService\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.crypto.dsig.TransformService",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mechanismType"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a TransformService that supports the specified algorithm URI (ex: Transform.XPATH2) and mechanism type (ex: DOM) as supplied by the specified provider. Note that the specified Provider object does not have to be registered in the provider list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the URI of the algorithm. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#xml-signature-transform-transformservice-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard transform algorithms.",
          "\u003ccode\u003emechanismType\u003c/code\u003e - the type of the XML processing mechanism and representation. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#xml-signature-xmlsignaturefactorykeyinfofactorytransformservice-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard mechanism types.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the \n\u003ccode\u003eProvider\u003c/code\u003e object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eprovider\u003c/code\u003e, \n\u003ccode\u003ealgorithm\u003c/code\u003e, or \n\u003ccode\u003emechanismType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eTransformService\u003c/code\u003e implementation for the specified algorithm and mechanism type is not available from the specified \n\u003ccode\u003eProvider\u003c/code\u003e object"
        ],
        "return": [
          "a new \n\u003ccode\u003eTransformService\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.crypto.dsig.TransformService",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mechanismType"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a TransformService that supports the specified algorithm URI (ex: Transform.XPATH2) and mechanism type (ex: DOM) as supplied by the specified provider. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the URI of the algorithm. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#xml-signature-transform-transformservice-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard transform algorithms.",
          "\u003ccode\u003emechanismType\u003c/code\u003e - the type of the XML processing mechanism and representation. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#xml-signature-xmlsignaturefactorykeyinfofactorytransformservice-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard mechanism types.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the string name of the provider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eprovider\u003c/code\u003e, \n\u003ccode\u003emechanismType\u003c/code\u003e, or \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eTransformService\u003c/code\u003e implementation for the specified algorithm and mechanism type is not available from the specified provider"
        ],
        "return": [
          "a new \n\u003ccode\u003eTransformService\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMechanismType",
      "comment": "Returns the mechanism type supported by this TransformService.",
      "tagMap": {
        "return": [
          "the mechanism type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAlgorithm",
      "comment": "Returns the URI of the algorithm supported by this TransformService.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml.crypto/javax/xml/crypto/AlgorithmMethod.html#getAlgorithm()\"\u003egetAlgorithm\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml.crypto/javax/xml/crypto/AlgorithmMethod.html\" title\u003d\"interface in javax.xml.crypto\"\u003eAlgorithmMethod\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the algorithm URI"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this TransformService.",
      "tagMap": {
        "return": [
          "the provider"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidAlgorithmParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.crypto.dsig.spec.TransformParameterSpec",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "init",
      "comment": "Initializes this TransformService with the specified parameters. If the parameters exist in XML form, the init(XMLStructure, XMLCryptoContext) method should be used to initialize the TransformService.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the algorithm parameters (may be \n\u003ccode\u003enull\u003c/code\u003e if not required or optional)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the specified parameters are invalid for this algorithm"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.crypto.MarshalException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.crypto.XMLStructure",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "javax.xml.crypto.XMLCryptoContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "marshalParams",
      "comment": "Marshals the algorithm-specific parameters. If there are no parameters to be marshalled, this method returns without throwing an exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a mechanism-specific structure containing the parent node that the marshalled parameters should be appended to",
          "\u003ccode\u003econtext\u003c/code\u003e - the \n\u003ccode\u003eXMLCryptoContext\u003c/code\u003e containing additional context (may be \n\u003ccode\u003enull\u003c/code\u003e if not applicable)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of \n\u003ccode\u003eparent\u003c/code\u003e or \n\u003ccode\u003econtext\u003c/code\u003e is not compatible with this \n\u003ccode\u003eTransformService\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml.crypto/javax/xml/crypto/MarshalException.html\" title\u003d\"class in javax.xml.crypto\"\u003eMarshalException\u003c/a\u003e\u003c/code\u003e - if the parameters cannot be marshalled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidAlgorithmParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.crypto.XMLStructure",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "javax.xml.crypto.XMLCryptoContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "init",
      "comment": "Initializes this TransformService with the specified parameters and document context.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a mechanism-specific structure containing the parent structure",
          "\u003ccode\u003econtext\u003c/code\u003e - the \n\u003ccode\u003eXMLCryptoContext\u003c/code\u003e containing additional context (may be \n\u003ccode\u003enull\u003c/code\u003e if not applicable)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of \n\u003ccode\u003eparent\u003c/code\u003e or \n\u003ccode\u003econtext\u003c/code\u003e is not compatible with this \n\u003ccode\u003eTransformService\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the specified parameters are invalid for this algorithm"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Default constructor, for invocation by subclasses.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.xml.crypto.dsig.TransformService",
  "comment": "A Service Provider Interface for transform and canonicalization algorithms. \n\u003cp\u003eEach instance of \u003ccode\u003eTransformService\u003c/code\u003e supports a specific transform or canonicalization algorithm and XML mechanism type. To create a \u003ccode\u003eTransformService\u003c/code\u003e, call one of the static \u003ca href\u003d\"#getInstance(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003egetInstance\u003c/code\u003e\u003c/a\u003e methods, passing in the algorithm URI and XML mechanism type desired, for example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003ccode\u003e TransformService ts \u003d TransformService.getInstance(Transform.XPATH2, \"DOM\"); \u003c/code\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTransformService\u003c/code\u003e implementations are registered and loaded using the \u003ca href\u003d\"../../../../../java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e mechanism. Each \u003ccode\u003eTransformService\u003c/code\u003e service provider implementation should include a \u003ccode\u003eMechanismType\u003c/code\u003e service attribute that identifies the XML mechanism type that it supports. If the attribute is not specified, \"DOM\" is assumed. For example, a service provider that supports the XPath Filter 2 Transform and DOM mechanism would be specified in the \u003ccode\u003eProvider\u003c/code\u003e subclass as: \u003c/p\u003e\n\u003cpre\u003e     put(\"TransformService.\" + Transform.XPATH2,\n         \"org.example.XPath2TransformService\");\n     put(\"TransformService.\" + Transform.XPATH2 + \" MechanismType\", \"DOM\");\n \u003c/pre\u003e \n\u003ccode\u003eTransformService\u003c/code\u003e implementations that support the DOM mechanism type must abide by the DOM interoperability requirements defined in the \n\u003ca href\u003d\"package-summary.html#dom_req\"\u003eDOM Mechanism Requirements\u003c/a\u003e. See the \n\u003ccode\u003eTransformService\u003c/code\u003e section in the \n\u003ca href\u003d\"../../../../../../specs/security/standard-names.html#xml-signature-xmlsignaturefactorykeyinfofactorytransformservice-mechanisms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard algorithm URIs and mechanism types. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Once a \u003ccode\u003eTransformService\u003c/code\u003e has been created, it can be used to process \u003ccode\u003eTransform\u003c/code\u003e or \u003ccode\u003eCanonicalizationMethod\u003c/code\u003e objects. If the \u003ccode\u003eTransform\u003c/code\u003e or \u003ccode\u003eCanonicalizationMethod\u003c/code\u003e exists in XML form (for example, when validating an existing \u003ccode\u003eXMLSignature\u003c/code\u003e), the \u003ca href\u003d\"#init(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)\"\u003e\u003ccode\u003einit(XMLStructure, XMLCryptoContext)\u003c/code\u003e\u003c/a\u003e method must be first called to initialize the transform and provide document context (even if there are no parameters). Alternatively, if the \u003ccode\u003eTransform\u003c/code\u003e or \u003ccode\u003eCanonicalizationMethod\u003c/code\u003e is being created from scratch, the \u003ca href\u003d\"#init(javax.xml.crypto.dsig.spec.TransformParameterSpec)\"\u003e\u003ccode\u003einit(TransformParameterSpec)\u003c/code\u003e\u003c/a\u003e method is called to initialize the transform with parameters and the \u003ca href\u003d\"#marshalParams(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)\"\u003e\u003ccode\u003emarshalParams\u003c/code\u003e\u003c/a\u003e method is called to marshal the parameters to XML and provide the transform with document context. Finally, the \u003ca href\u003d\"Transform.html#transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext)\"\u003e\u003ccode\u003etransform\u003c/code\u003e\u003c/a\u003e method is called to perform the transformation. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eConcurrent Access\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003eThe static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. \u003c/p\u003e\n\u003cp\u003eHowever, this is not true for the non-static methods defined by this class. Unless otherwise documented by a specific provider, threads that need to access a single \u003ccode\u003eTransformService\u003c/code\u003e instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different \u003ccode\u003eTransformService\u003c/code\u003e instance need not synchronize.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}