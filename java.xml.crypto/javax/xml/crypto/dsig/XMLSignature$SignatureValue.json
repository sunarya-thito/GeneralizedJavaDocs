{
  "packageName": "javax.xml.crypto.dsig",
  "simpleName": "SignatureValue",
  "moduleName": "java.xml.crypto",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.xml.crypto.XMLStructure",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getId",
      "comment": "Returns the optional Id attribute of this SignatureValue, which permits this element to be referenced from elsewhere.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eId\u003c/code\u003e attribute (may be \n\u003ccode\u003enull\u003c/code\u003e if not specified)"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getValue",
      "comment": "Returns the signature value of this SignatureValue.",
      "tagMap": {
        "return": [
          "the signature value (may be \n\u003ccode\u003enull\u003c/code\u003e if the \n\u003ccode\u003eXMLSignature\u003c/code\u003e has not been signed yet). Each invocation of this method returns a new clone of the array to prevent subsequent modification."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.crypto.dsig.XMLSignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.crypto.dsig.XMLValidateContext",
            "type": "Class"
          },
          "field": {
            "name": "validateContext"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "validate",
      "comment": "Validates the signature value. This method performs a cryptographic validation of the signature calculated over the SignedInfo of the XMLSignature. This method only validates the signature the first time it is invoked. On subsequent invocations, it returns a cached result.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalidateContext\u003c/code\u003e - the validating context"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evalidateContext\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml.crypto/javax/xml/crypto/dsig/XMLSignatureException.html\" title\u003d\"class in javax.xml.crypto.dsig\"\u003eXMLSignatureException\u003c/a\u003e\u003c/code\u003e - if an unexpected exception occurs while validating the signature"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the signature was validated successfully; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "javax.xml.crypto.dsig.XMLSignature$SignatureValue",
  "comment": "A representation of the XML \n\u003ccode\u003eSignatureValue\u003c/code\u003e element as defined in the \n\u003ca href\u003d\"http://www.w3.org/TR/xmldsig-core/\"\u003e W3C Recommendation for XML-Signature Syntax and Processing\u003c/a\u003e. The XML Schema Definition is defined as: \n\u003cpre\u003e   \u0026lt;element name\u003d\"SignatureValue\" type\u003d\"ds:SignatureValueType\"/\u0026gt;\n     \u0026lt;complexType name\u003d\"SignatureValueType\"\u0026gt;\n       \u0026lt;simpleContent\u0026gt;\n         \u0026lt;extension base\u003d\"base64Binary\"\u0026gt;\n           \u0026lt;attribute name\u003d\"Id\" type\u003d\"ID\" use\u003d\"optional\"/\u0026gt;\n         \u0026lt;/extension\u0026gt;\n       \u0026lt;/simpleContent\u0026gt;\n     \u0026lt;/complexType\u0026gt;\n \u003c/pre\u003e",
  "tagMap": {}
}