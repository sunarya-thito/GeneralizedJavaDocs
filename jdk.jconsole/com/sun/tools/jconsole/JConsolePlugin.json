{
  "packageName": "com.sun.tools.jconsole",
  "simpleName": "JConsolePlugin",
  "moduleName": "jdk.jconsole",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.tools.jconsole.JConsoleContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setContext",
      "comment": "Sets the JConsoleContext object representing the connection to an application. This method will be called only once after the plugin is created and before the getTabs() is called. The given context can be in any connection state when this method is called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - a \n\u003ccode\u003eJConsoleContext\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.tools.jconsole.JConsoleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getContext",
      "comment": "Returns the JConsoleContext object representing the connection to an application. This method may return null if it is called before the context is initialized.",
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jconsole/com/sun/tools/jconsole/JConsoleContext.html\" title\u003d\"interface in com.sun.tools.jconsole\"\u003e\u003ccode\u003eJConsoleContext\u003c/code\u003e\u003c/a\u003e object representing the connection to an application."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "javax.swing.JPanel",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTabs",
      "comment": "Returns the tabs to be added in JConsole window. The returned map contains one entry for each tab to be added in the tabbed pane in a JConsole window with the tab name as the key and the JPanel object as the value. This method returns an empty map if no tab is added by this plugin. This method will be called from the Event Dispatch Thread once at the new connection time.",
      "tagMap": {
        "return": [
          "a map of a tab name and a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JPanel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJPanel\u003c/code\u003e\u003c/a\u003e object representing the tabs to be added in the JConsole window; or an empty map."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.SwingWorker",
        "parameters": [
          {
            "type": "Wildcard"
          },
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newSwingWorker",
      "comment": "Returns a SwingWorker to perform the GUI update for this plugin at the same interval as JConsole updates the GUI. JConsole schedules the GUI update at an interval specified for a connection. This method will be called at every update to obtain a SwingWorker for each plugin. JConsole will invoke the execute() method to schedule the returned SwingWorker for execution if: the SwingWorker object has not been executed (i.e. the SwingWorker.getState() method returns PENDING state); and the SwingWorker object returned in the previous update has completed the task if it was not null (i.e. the SwingWorker.isDone method returns true). Otherwise, SwingWorker object will not be scheduled to work. A plugin can schedule its own GUI update and this method will return null.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eSwingWorker\u003c/code\u003e to perform the GUI update; or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dispose",
      "comment": "Dispose this plugin. This method is called by JConsole to inform that this plugin will be discarded and that it should free any resources that it has allocated. The JConsoleContext can be in any connection state when this method is called.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "addContextPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the JConsoleContext object for this plugin. This method is a convenient method for this plugin to register a listener when the JConsoleContext object may or may not be available. For example, a plugin constructor can call this method to register a listener to listen to the connectionState property changes and the listener will be added to the JConsoleContext object when it is available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e to be added"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistener\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "removeContextPropertyChangeListener",
      "comment": "Removes a PropertyChangeListener from the listener list of the JConsoleContext object for this plugin. If listener was never added, no exception is thrown and no action is taken.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistener\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.tools.jconsole.JConsolePlugin",
  "comment": "A JConsole plugin class. JConsole uses the \n\u003ca href\u003d\"../../../../../java.base/java/util/ServiceLoader.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eservice provider\u003c/code\u003e\u003c/a\u003e mechanism to search the JConsole plugins. Users can provide their JConsole plugins in a jar file containing a file named \n\u003cblockquote\u003e\n \u003cpre\u003e META-INF/services/com.sun.tools.jconsole.JConsolePlugin\u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e This file contains one line for each plugin, for example, \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e com.sun.example.JTop\u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e which is the fully qualified class name of the class implementing \u003ccode\u003eJConsolePlugin\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e To load the JConsole plugins in JConsole, run: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e jconsole -pluginpath \u0026lt;plugin-path\u0026gt; \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e where \u003ccode\u003e\u0026lt;plugin-path\u0026gt;\u003c/code\u003e specifies the paths of JConsole plugins to look up which can be a directory or a jar file. Multiple paths are separated by the path separator character of the platform. \u003c/p\u003e\n\u003cp\u003e When a new JConsole window is created for a connection, an instance of each \u003ccode\u003eJConsolePlugin\u003c/code\u003e will be created. The \u003ccode\u003eJConsoleContext\u003c/code\u003e object is not available at its construction time. JConsole will set the \u003ca href\u003d\"JConsoleContext.html\" title\u003d\"interface in com.sun.tools.jconsole\"\u003e\u003ccode\u003eJConsoleContext\u003c/code\u003e\u003c/a\u003e object for a plugin after the plugin object is created. It will then call its \u003ca href\u003d\"#getTabs()\"\u003e\u003ccode\u003egetTabs\u003c/code\u003e\u003c/a\u003e method and add the returned tabs to the JConsole window.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceLoader.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eServiceLoader\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}