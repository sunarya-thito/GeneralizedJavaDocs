{
  "packageName": "com.sun.net.httpserver",
  "simpleName": "HttpsParameters",
  "moduleName": "jdk.httpserver",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpsConfigurator",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getHttpsConfigurator",
      "comment": "Returns the HttpsConfigurator for this HttpsParameters.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003eHttpsConfigurator\u003c/code\u003e for this instance of \n\u003ccode\u003eHttpsParameters\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetSocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getClientAddress",
      "comment": "Returns the address of the remote client initiating the connection.",
      "annotations": [],
      "tagMap": {
        "return": [
          "address of the remote client initiating the connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.net.ssl.SSLParameters",
            "type": "Class"
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setSSLParameters",
      "comment": "Sets the SSLParameters to use for this HttpsParameters. The parameters must be supported by the SSLContext contained by the HttpsConfigurator associated with this HttpsParameters. If no parameters are set, then the default behavior is to use the default parameters from the associated SSLContext.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the \n\u003ccode\u003eSSLParameters\u003c/code\u003e to set. If \n\u003ccode\u003enull\u003c/code\u003e then the existing parameters (if any) remain unchanged"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the parameters are invalid or unsupported"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCipherSuites",
      "comment": "Returns a copy of the array of ciphersuites or null if none have been set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a copy of the array of ciphersuites or \n\u003ccode\u003enull\u003c/code\u003e if none have been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "cipherSuites",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCipherSuites",
      "comment": "Sets the array of ciphersuites.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecipherSuites\u003c/code\u003e - the array of ciphersuites (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProtocols",
      "comment": "Returns a copy of the array of protocols or null if none have been set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a copy of the array of protocols or \n\u003ccode\u003enull\u003c/code\u003e if none have been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "protocols",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setProtocols",
      "comment": "Sets the array of protocols.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprotocols\u003c/code\u003e - the array of protocols (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWantClientAuth",
      "comment": "Returns whether client authentication should be requested.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether client authentication should be requested"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "wantClientAuth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWantClientAuth",
      "comment": "Sets whether client authentication should be requested. Calling this method clears the needClientAuth flag.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewantClientAuth\u003c/code\u003e - whether client authentication should be requested"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNeedClientAuth",
      "comment": "Returns whether client authentication should be required.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether client authentication should be required"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "needClientAuth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNeedClientAuth",
      "comment": "Sets whether client authentication should be required. Calling this method clears the wantClientAuth flag.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eneedClientAuth\u003c/code\u003e - whether client authentication should be required"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.net.httpserver.HttpsParameters",
  "comment": "Represents the set of parameters for each https connection negotiated with clients. One of these is created and passed to \n\u003ca href\u003d\"HttpsConfigurator.html#configure(com.sun.net.httpserver.HttpsParameters)\"\u003e\u003ccode\u003eHttpsConfigurator.configure(HttpsParameters)\u003c/code\u003e\u003c/a\u003e for every incoming https connection, in order to determine the parameters to use. \n\u003cp\u003e The underlying SSL parameters may be established either via the set/get methods of this class, or else via a \u003ca href\u003d\"../../../../../java.base/javax/net/ssl/SSLParameters.html\" title\u003d\"class in javax.net.ssl\"\u003e\u003ccode\u003eSSLParameters\u003c/code\u003e\u003c/a\u003e object. \u003ccode\u003eSSLParameters\u003c/code\u003e is the preferred method, because in the future, additional configuration capabilities may be added to that class, and it is easier to determine the set of supported parameters and their default values with SSLParameters. Also, if an \u003ccode\u003eSSLParameters\u003c/code\u003e object is provided via \u003ca href\u003d\"#setSSLParameters(javax.net.ssl.SSLParameters)\"\u003e\u003ccode\u003esetSSLParameters(SSLParameters)\u003c/code\u003e\u003c/a\u003e then those parameter settings are used, and any settings made in this object are ignored.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}