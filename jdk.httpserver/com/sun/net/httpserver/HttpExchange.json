{
  "packageName": "com.sun.net.httpserver",
  "simpleName": "HttpExchange",
  "moduleName": "jdk.httpserver",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.net.httpserver.Headers",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRequestHeaders",
      "comment": "Returns an immutable Map containing the HTTP headers that were included with this request. The keys in this Map will be the header names, while the values will be a List of Strings containing each value that was included (either for a header that was listed several times, or one that accepts a comma-delimited list of values on a single line). In either of these cases, the values for the header name will be presented in the order that they were included in the request. The keys in Map are case-insensitive.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a read-only \n\u003ccode\u003eMap\u003c/code\u003e which can be used to access request headers"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.net.httpserver.Headers",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getResponseHeaders",
      "comment": "Returns a mutable Map into which the HTTP response headers can be stored and which will be transmitted as part of this response. The keys in the Map will be the header names, while the values must be a List of Strings containing each value that should be included multiple times (in the order that they should be included). The keys in Map are case-insensitive.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a writable \n\u003ccode\u003eMap\u003c/code\u003e which can be used to set response headers."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URI",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRequestURI",
      "comment": "Get the request URI.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the request \n\u003ccode\u003eURI\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRequestMethod",
      "comment": "Get the request method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the request method"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpContext",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getHttpContext",
      "comment": "Get the HttpContext for this exchange.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eHttpContext\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "close",
      "comment": "Ends this exchange by doing the following in sequence: close the request InputStream, if not already closed. close the response OutputStream, if not already closed.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRequestBody",
      "comment": "Returns a stream from which the request body can be read. Multiple calls to this method will return the same stream. It is recommended that applications should consume (read) all of the data from this stream before closing it. If a stream is closed before all data has been read, then the InputStream.close() call will read and discard remaining data (up to an implementation specific number of bytes).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the stream from which the request body can be read"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getResponseBody",
      "comment": "Returns a stream to which the response body must be written. sendResponseHeaders(int,long)) must be called prior to calling this method. Multiple calls to this method (for the same exchange) will return the same stream. In order to correctly terminate each exchange, the output stream must be closed, even if no response body is being sent. Closing this stream implicitly closes the InputStream returned from getRequestBody() (if it is not already closed). If the call to sendResponseHeaders(int, long) specified a fixed response body length, then the exact number of bytes specified in that call must be written to this stream. If too many bytes are written, then the write method of OutputStream will throw an IOException. If too few bytes are written then the stream OutputStream.close() will throw an IOException. In both cases, the exchange is aborted and the underlying TCP connection closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the stream to which the response body is written"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rCode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "responseLength",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sendResponseHeaders",
      "comment": "Starts sending the response back to the client using the current set of response headers and the numeric response code as specified in this method. The response body length is also specified as follows. If the response length parameter is greater than zero, this specifies an exact number of bytes to send and the application must send that exact amount of data. If the response length parameter is zero, then chunked transfer encoding is used and an arbitrary amount of data may be sent. The application terminates the response body by closing the OutputStream. If response length has the value -1 then no response body is being sent. If the content-length response header has not already been set then this is set to the appropriate value depending on the response length parameter. This method must be called prior to calling getResponseBody().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpExchange.html#getResponseBody()\"\u003e\u003ccode\u003egetResponseBody()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erCode\u003c/code\u003e - the response code to send",
          "\u003ccode\u003eresponseLength\u003c/code\u003e - if \u0026gt; 0, specifies a fixed response body length and that exact number of bytes must be written to the stream acquired from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpExchange.html#getResponseCode()\"\u003e\u003ccode\u003egetResponseCode()\u003c/code\u003e\u003c/a\u003e If \u003d\u003d 0, then chunked encoding is used, and an arbitrary number of bytes may be written. If \u0026lt;\u003d -1, then no response body length is specified and no response body may be written."
        ],
        "implNote": [
          "This implementation allows the caller to instruct the server to force a connection close after the exchange terminates, by supplying a \n\u003ccode\u003eConnection: close\u003c/code\u003e header to the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpExchange.html#getResponseHeaders()\"\u003eresponse headers\u003c/a\u003e before \n\u003ccode\u003esendResponseHeaders\u003c/code\u003e is called."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the response headers have already been sent or an I/O error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetSocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRemoteAddress",
      "comment": "Returns the address of the remote entity invoking this request.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetSocketAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetSocketAddress\u003c/code\u003e\u003c/a\u003e of the caller"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getResponseCode",
      "comment": "Returns the response code, if it has already been set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the response code, if available. \n\u003ccode\u003e-1\u003c/code\u003e if not available yet."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetSocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLocalAddress",
      "comment": "Returns the local address on which the request was received.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/InetSocketAddress.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eInetSocketAddress\u003c/code\u003e\u003c/a\u003e of the local interface"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getProtocol",
      "comment": "Returns the protocol string from the request in the form protocol/majorVersion.minorVersion. For example, \"HTTP/1.1\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "the protocol string from the request"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAttribute",
      "comment": "Filter modules may store arbitrary objects with HttpExchange instances as an out-of-band communication mechanism. Other filters or the exchange handler may then access these objects. Each Filter class will document the attributes which they make available.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the attribute to retrieve"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the attribute object, or \n\u003ccode\u003enull\u003c/code\u003e if it does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setAttribute",
      "comment": "Filter modules may store arbitrary objects with HttpExchange instances as an out-of-band communication mechanism. Other filters or the exchange handler may then access these objects. Each Filter class will document the attributes which they make available.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to associate with the attribute value",
          "\u003ccode\u003evalue\u003c/code\u003e - the object to store as the attribute value. \n\u003ccode\u003enull\u003c/code\u003e value is permitted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setStreams",
      "comment": "Used by Filters to wrap either (or both) of this exchange\u0027s InputStream and OutputStream, with the given filtered streams so that subsequent calls to getRequestBody() will return the given InputStream, and calls to getResponseBody() will return the given OutputStream. The streams provided to this call must wrap the original streams, and may be (but are not required to be) sub-classes of FilterInputStream and FilterOutputStream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the filtered input stream to set as this object\u0027s \n\u003ccode\u003eInputstream\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if no change",
          "\u003ccode\u003eo\u003c/code\u003e - the filtered output stream to set as this object\u0027s \n\u003ccode\u003eOutputstream\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if no change"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpPrincipal",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPrincipal",
      "comment": "If an authenticator is set on the HttpContext that owns this exchange, then this method will return the HttpPrincipal that represents the authenticated user for this HttpExchange.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eHttpPrincipal\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if no authenticator is set"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.net.httpserver.HttpExchange",
  "comment": "This class encapsulates a HTTP request received and a response to be generated in one exchange. It provides methods for examining the request from the client, and for building and sending the response. \n\u003cp\u003e The typical life-cycle of a \u003ccode\u003eHttpExchange\u003c/code\u003e is shown in the sequence below: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e\u003ca href\u003d\"#getRequestMethod()\"\u003e\u003ccode\u003egetRequestMethod()\u003c/code\u003e\u003c/a\u003e to determine the command. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getRequestHeaders()\"\u003e\u003ccode\u003egetRequestHeaders()\u003c/code\u003e\u003c/a\u003e to examine the request headers (if needed). \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getRequestBody()\"\u003e\u003ccode\u003egetRequestBody()\u003c/code\u003e\u003c/a\u003e returns an \u003ca href\u003d\"../../../../../java.base/java/io/InputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInputStream\u003c/code\u003e\u003c/a\u003e for reading the request body. After reading the request body, the stream should be closed. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getResponseHeaders()\"\u003e\u003ccode\u003egetResponseHeaders()\u003c/code\u003e\u003c/a\u003e to set any response headers, except content-length. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#sendResponseHeaders(int,long)\"\u003e\u003ccode\u003esendResponseHeaders(int,long)\u003c/code\u003e\u003c/a\u003e to send the response headers. Must be called before next step. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getResponseBody()\"\u003e\u003ccode\u003egetResponseBody()\u003c/code\u003e\u003c/a\u003e to get a \u003ca href\u003d\"../../../../../java.base/java/io/OutputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eOutputStream\u003c/code\u003e\u003c/a\u003e to send the response body. When the response body has been written, the stream must be closed to terminate the exchange. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cb\u003eTerminating exchanges\u003c/b\u003e \n\u003cbr\u003eExchanges are terminated when both the request \n\u003ccode\u003eInputStream\u003c/code\u003e and response \n\u003ccode\u003eOutputStream\u003c/code\u003e are closed. Closing the \n\u003ccode\u003eOutputStream\u003c/code\u003e, implicitly closes the \n\u003ccode\u003eInputStream\u003c/code\u003e (if it is not already closed). However, it is recommended to consume all the data from the \n\u003ccode\u003eInputStream\u003c/code\u003e before closing it. The convenience method \n\u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e does all of these tasks. Closing an exchange without consuming all of the request body is not an error but may make the underlying TCP connection unusable for following exchanges. The effect of failing to terminate an exchange is undefined, but will typically result in resources failing to be freed/reused.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}