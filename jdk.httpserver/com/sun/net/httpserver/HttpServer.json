{
  "packageName": "com.sun.net.httpserver",
  "simpleName": "HttpServer",
  "moduleName": "jdk.httpserver",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpServer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "Creates a HttpServer instance which is initially not bound to any local address/port. The HttpServer is acquired from the currently installed HttpServerProvider. The server must be bound using bind(InetSocketAddress,int) before it can be used.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eHttpServer\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpServer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetSocketAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "backlog",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "Create a HttpServer instance which will bind to the specified InetSocketAddress (IP address and port number). A maximum backlog can also be specified. This is the maximum number of queued incoming connections to allow on the listening socket. Queued TCP connections exceeding this limit may be rejected by the TCP implementation. The HttpServer is acquired from the currently installed HttpServerProvider",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address to listen on, if \n\u003ccode\u003enull\u003c/code\u003e then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.httpserver/com/sun/net/httpserver/HttpServer.html#bind(java.net.InetSocketAddress,int)\"\u003e\u003ccode\u003ebind(InetSocketAddress, int)\u003c/code\u003e\u003c/a\u003e must be called to set the address",
          "\u003ccode\u003ebacklog\u003c/code\u003e - the socket backlog. If this value is less than or equal to zero, then a system default value is used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/BindException.html\" title\u003d\"class in java.net\"\u003eBindException\u003c/a\u003e\u003c/code\u003e - if the server cannot bind to the requested address, or if the server is already bound"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eHttpServer\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.InetSocketAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "backlog",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "bind",
      "comment": "Binds a currently unbound HttpServer to the given address and port number. A maximum backlog can also be specified. This is the maximum number of queued incoming connections to allow on the listening socket. Queued TCP connections exceeding this limit may be rejected by the TCP implementation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address to listen on",
          "\u003ccode\u003ebacklog\u003c/code\u003e - the socket backlog. If this value is less than or equal to zero, then a system default value is used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/BindException.html\" title\u003d\"class in java.net\"\u003eBindException\u003c/a\u003e\u003c/code\u003e - if the server cannot bind to the requested address or if the server is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if addr is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "start",
      "comment": "Starts this server in a new background thread. The background thread inherits the priority, thread group and context class loader of the caller.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setExecutor",
      "comment": "Sets this server\u0027s Executor object. An Executor must be established before start() is called. All HTTP requests are handled in tasks given to the executor. If this method is not called (before start()) or if it is called with a null Executor, then a default implementation is used, which uses the thread which was created by the start() method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - the \n\u003ccode\u003eExecutor\u003c/code\u003e to set, or \n\u003ccode\u003enull\u003c/code\u003e for default implementation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the server is already started"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Executor",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getExecutor",
      "comment": "Returns this server\u0027s Executor object if one was specified with setExecutor(Executor), or null if none was specified.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eExecutor\u003c/code\u003e established for this server or \n\u003ccode\u003enull\u003c/code\u003e if not set."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "delay",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "stop",
      "comment": "Stops this server by closing the listening socket and disallowing any new exchanges from being processed. The method will then block until all current exchange handlers have completed or else when approximately delay seconds have elapsed (whichever happens sooner). Then, all open TCP connections are closed, the background thread created by start() exits, and the method returns. Once stopped, a HttpServer cannot be re-used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - the maximum time in seconds to wait until exchanges have finished"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if delay is less than zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpContext",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "com.sun.net.httpserver.HttpHandler",
            "type": "Class"
          },
          "name": "handler",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createContext",
      "comment": "Creates a HttpContext. A HttpContext represents a mapping from a URI path to a exchange handler on this HttpServer. Once created, all requests received by the server for the path will be handled by calling the given handler object. The context is identified by the path, and can later be removed from the server using this with the removeContext(String) method. The path specifies the root URI path for this context. The first character of path must be \u0027/\u0027. The class overview describes how incoming request URIs are mapped to HttpContext instances.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "The path should generally, but is not required to, end with \u0027/\u0027. If the path does not end with \u0027/\u0027, eg such as with \n\u003ccode\u003e\"/foo\"\u003c/code\u003e then this would match requests with a path of \n\u003ccode\u003e\"/foobar\"\u003c/code\u003e or \n\u003ccode\u003e\"/foo/bar\"\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the root URI path to associate the context with",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler to invoke for incoming requests"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if path is invalid, or if a context already exists for this path",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either path, or handler are \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eHttpContext\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.net.httpserver.HttpContext",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createContext",
      "comment": "Creates a HttpContext without initially specifying a handler. The handler must later be specified using HttpContext.setHandler(HttpHandler). A HttpContext represents a mapping from a URI path to an exchange handler on this HttpServer. Once created, and when the handler has been set, all requests received by the server for the path will be handled by calling the handler object. The context is identified by the path, and can later be removed from the server using this with the removeContext(String) method. The path specifies the root URI path for this context. The first character of path must be \u0027/\u0027. The class overview describes how incoming request URIs are mapped to HttpContext instances.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "The path should generally, but is not required to, end with \u0027/\u0027. If the path does not end with \u0027/\u0027, eg such as with \n\u003ccode\u003e\"/foo\"\u003c/code\u003e then this would match requests with a path of \n\u003ccode\u003e\"/foobar\"\u003c/code\u003e or \n\u003ccode\u003e\"/foo/bar\"\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the root URI path to associate the context with"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if path is invalid, or if a context already exists for this path",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if path is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eHttpContext\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "removeContext",
      "comment": "Removes the context identified by the given path from the server. Removing a context does not affect exchanges currently being processed but prevents new ones from being accepted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path of the handler to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no handler corresponding to this path exists.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if path is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "com.sun.net.httpserver.HttpContext",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "removeContext",
      "comment": "Removes the given context from the server. Removing a context does not affect exchanges currently being processed but prevents new ones from being accepted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - the context to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if context is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetSocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAddress",
      "comment": "Returns the address this server is listening on",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eInetSocketAddress\u003c/code\u003e the server is listening on"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.net.httpserver.HttpServer",
  "comment": "This class implements a simple HTTP server. A \n\u003ccode\u003eHttpServer\u003c/code\u003e is bound to an IP address and port number and listens for incoming TCP connections from clients on this address. The sub-class \n\u003ca href\u003d\"HttpsServer.html\" title\u003d\"class in com.sun.net.httpserver\"\u003e\u003ccode\u003eHttpsServer\u003c/code\u003e\u003c/a\u003e implements a server which handles HTTPS requests. \n\u003cp\u003eOne or more \u003ca href\u003d\"HttpHandler.html\" title\u003d\"interface in com.sun.net.httpserver\"\u003e\u003ccode\u003eHttpHandler\u003c/code\u003e\u003c/a\u003e objects must be associated with a server in order to process requests. Each such \u003ccode\u003eHttpHandler\u003c/code\u003e is registered with a root URI path which represents the location of the application or service on this server. The mapping of a handler to a \u003ccode\u003eHttpServer\u003c/code\u003e is encapsulated by a \u003ca href\u003d\"HttpContext.html\" title\u003d\"class in com.sun.net.httpserver\"\u003e\u003ccode\u003eHttpContext\u003c/code\u003e\u003c/a\u003e object. HttpContexts are created by calling \u003ca href\u003d\"#createContext(java.lang.String,com.sun.net.httpserver.HttpHandler)\"\u003e\u003ccode\u003ecreateContext(String,HttpHandler)\u003c/code\u003e\u003c/a\u003e. Any request for which no handler can be found is rejected with a 404 response. Management of threads can be done external to this object by providing a \u003ca href\u003d\"../../../../../java.base/java/util/concurrent/Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutor\u003c/code\u003e\u003c/a\u003e object. If none is provided a default implementation is used. \u003c/p\u003e\n\u003cp\u003e \u003ca id\u003d\"mapping_description\"\u003e\u003c/a\u003e \u003cb\u003eMapping request URIs to HttpContext paths\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003eWhen a HTTP request is received, the appropriate \u003ccode\u003eHttpContext\u003c/code\u003e (and handler) is located by finding the context whose path is the longest matching prefix of the request URI\u0027s path. Paths are matched literally, which means that the strings are compared case sensitively, and with no conversion to or from any encoded forms. For example, given a \u003ccode\u003eHttpServer\u003c/code\u003e with the following HttpContexts configured: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e\n \u003ccaption style\u003d\"display:none\"\u003e\n  description\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003e\u003ci\u003eContext\u003c/i\u003e\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003e\u003ci\u003eContext path\u003c/i\u003e\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ectx1\u003c/th\u003e\n   \u003ctd\u003e\"/\"\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ectx2\u003c/th\u003e\n   \u003ctd\u003e\"/apps/\"\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ectx3\u003c/th\u003e\n   \u003ctd\u003e\"/apps/foo/\"\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe following table shows some request URIs and which, if any context they would match with: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e\n \u003ccaption style\u003d\"display:none\"\u003e\n  description\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003e\u003ci\u003eRequest URI\u003c/i\u003e\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003e\u003ci\u003eMatches context\u003c/i\u003e\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\"http://foo.com/apps/foo/bar\"\u003c/th\u003e\n   \u003ctd\u003ectx3\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\"http://foo.com/apps/Foo/bar\"\u003c/th\u003e\n   \u003ctd\u003eno match, wrong case\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\"http://foo.com/apps/app1\"\u003c/th\u003e\n   \u003ctd\u003ectx2\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\"http://foo.com/foo\"\u003c/th\u003e\n   \u003ctd\u003ectx1\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote about socket backlogs\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003eWhen binding to an address and port number, the application can also specify an integer \u003ci\u003ebacklog\u003c/i\u003e parameter. This represents the maximum number of incoming TCP connections which the system will queue internally. Connections are queued while they are waiting to be accepted by the \u003ccode\u003eHttpServer\u003c/code\u003e. When the limit is reached, further connections may be rejected (or possibly ignored) by the underlying TCP implementation. Setting the right backlog value is a compromise between efficient resource usage in the TCP layer (not setting it too high) and allowing adequate throughput of incoming requests (not setting it too low).\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}