{
  "packageName": "com.sun.net.httpserver",
  "simpleName": "Filter",
  "moduleName": "jdk.httpserver",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "com.sun.net.httpserver.HttpExchange",
            "type": "Class"
          },
          "name": "exchange",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "com.sun.net.httpserver.Filter$Chain",
            "type": "Class"
          },
          "name": "chain",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "doFilter",
      "comment": "Asks this filter to pre/post-process the given exchange. The filter can: Examine or modify the request headers. Filter the request body or the response body, by creating suitable filter streams and calling HttpExchange.setStreams(InputStream, OutputStream). Set attribute objects in the exchange, which other filters or the exchange handler can access. Decide to either: Invoke the next filter in the chain, by calling Filter.Chain.doFilter(HttpExchange). Terminate the chain of invocation, by not calling Filter.Chain.doFilter(HttpExchange). If option 1. above is taken, then when doFilter() returns all subsequent filters in the Chain have been called, and the response headers can be examined or modified. If option 2. above is taken, then this Filter must use the HttpExchange to send back an appropriate response.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexchange\u003c/code\u003e - the \n\u003ccode\u003eHttpExchange\u003c/code\u003e to be filtered",
          "\u003ccode\u003echain\u003c/code\u003e - the \n\u003ccode\u003eChain\u003c/code\u003e which allows the next filter to be invoked"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - may be thrown by any filter module, and if caught, must be rethrown again",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either exchange or chain are \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "description",
      "comment": "Returns a short description of this Filter.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e describing the \n\u003ccode\u003eFilter\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "com.sun.net.httpserver.Filter$Chain"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.net.httpserver.Filter",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}