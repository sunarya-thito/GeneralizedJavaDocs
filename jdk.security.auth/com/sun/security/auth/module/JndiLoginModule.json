{
  "packageName": "com.sun.security.auth.module",
  "simpleName": "JndiLoginModule",
  "moduleName": "jdk.security.auth",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 17,
      "name": "USER_PROVIDER",
      "comment": "JNDI Provider",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#com.sun.security.auth.module.JndiLoginModule.USER_PROVIDER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 17,
      "name": "GROUP_PROVIDER",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#com.sun.security.auth.module.JndiLoginModule.GROUP_PROVIDER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.security.auth.Subject",
            "type": "Class"
          },
          "field": {
            "name": "subject"
          }
        },
        {
          "type": {
            "name": "javax.security.auth.callback.CallbackHandler",
            "type": "Class"
          },
          "field": {
            "name": "callbackHandler"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "sharedState"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "options"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initialize this LoginModule.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to be authenticated.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - a \n\u003ccode\u003eCallbackHandler\u003c/code\u003e for communicating with the end user (prompting for usernames and passwords, for example).",
          "\u003ccode\u003esharedState\u003c/code\u003e - shared \n\u003ccode\u003eLoginModule\u003c/code\u003e state.",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specified in the login \n\u003ccode\u003eConfiguration\u003c/code\u003e for this particular \n\u003ccode\u003eLoginModule\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "login",
      "comment": "Prompt for username and password. Verify the password against the relevant name service.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#login()\"\u003elogin\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/FailedLoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eFailedLoginException\u003c/a\u003e\u003c/code\u003e - if the authentication fails.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eLoginModule\u003c/code\u003e is unable to perform the authentication."
        ],
        "return": [
          "true always, since this \n\u003ccode\u003eLoginModule\u003c/code\u003e should not be ignored."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "commit",
      "comment": "Abstract method to commit the authentication process (phase 2). This method is called if the LoginContext\u0027s overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login method), then this method associates a UnixPrincipal with the Subject located in the LoginModule. If this LoginModule\u0027s own authentication attempted failed, then this method removes any state that was originally saved.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#commit()\"\u003ecommit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the commit fails"
        ],
        "return": [
          "true if this LoginModule\u0027s own login and commit attempts succeeded, or false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abort",
      "comment": "This method is called if the LoginContext\u0027s overall authentication failed. (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login and commit methods), then this method cleans up any state that was originally saved.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#abort()\"\u003eabort\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the abort fails."
        ],
        "return": [
          "false if this LoginModule\u0027s own login and/or commit attempts failed, and true otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logout",
      "comment": "Logout a user. This method removes the Principals that were added by the commit method.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#logout()\"\u003elogout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the logout fails."
        ],
        "return": [
          "true in all cases since this \n\u003ccode\u003eLoginModule\u003c/code\u003e should not be ignored."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JndiLoginModule.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.sun.security.auth.module.JndiLoginModule",
  "comment": "The module prompts for a username and password and then verifies the password against the password stored in a directory service configured under JNDI. \n\u003cp\u003e This \u003ccode\u003eLoginModule\u003c/code\u003e interoperates with any conformant JNDI service provider. To direct this \u003ccode\u003eLoginModule\u003c/code\u003e to use a specific JNDI service provider, two options must be specified in the login \u003ccode\u003eConfiguration\u003c/code\u003e for this \u003ccode\u003eLoginModule\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e      user.provider.url\u003d\u003cb\u003ename_service_url\u003c/b\u003e\n      group.provider.url\u003d\u003cb\u003ename_service_url\u003c/b\u003e\n \u003c/pre\u003e \n\u003cb\u003ename_service_url\u003c/b\u003e specifies the directory service and path where this \n\u003ccode\u003eLoginModule\u003c/code\u003e can access the relevant user and group information. Because this \n\u003ccode\u003eLoginModule\u003c/code\u003e only performs one-level searches to find the relevant user information, the \n\u003ccode\u003eURL\u003c/code\u003e must point to a directory one level above where the user and group information is stored in the directory service. For example, to instruct this \n\u003ccode\u003eLoginModule\u003c/code\u003e to contact a NIS server, the following URLs must be specified: \n\u003cpre\u003e    user.provider.url\u003d\"nis://\u003cb\u003eNISServerHostName\u003c/b\u003e/\u003cb\u003eNISDomain\u003c/b\u003e/user\"\n    group.provider.url\u003d\"nis://\u003cb\u003eNISServerHostName\u003c/b\u003e/\u003cb\u003eNISDomain\u003c/b\u003e/system/group\"\n \u003c/pre\u003e \n\u003cb\u003eNISServerHostName\u003c/b\u003e specifies the server host name of the NIS server (for example, \n\u003ci\u003enis.sun.com\u003c/i\u003e, and \n\u003cb\u003eNISDomain\u003c/b\u003e specifies the domain for that NIS server (for example, \n\u003ci\u003ejaas.sun.com\u003c/i\u003e. To contact an LDAP server, the following URLs must be specified: \n\u003cpre\u003e    user.provider.url\u003d\"ldap://\u003cb\u003eLDAPServerHostName\u003c/b\u003e/\u003cb\u003eLDAPName\u003c/b\u003e\"\n    group.provider.url\u003d\"ldap://\u003cb\u003eLDAPServerHostName\u003c/b\u003e/\u003cb\u003eLDAPName\u003c/b\u003e\"\n \u003c/pre\u003e \n\u003cb\u003eLDAPServerHostName\u003c/b\u003e specifies the server host name of the LDAP server, which may include a port number (for example, \n\u003ci\u003eldap.sun.com:389\u003c/i\u003e), and \n\u003cb\u003eLDAPName\u003c/b\u003e specifies the entry name in the LDAP directory (for example, \n\u003ci\u003eou\u003dPeople,o\u003dSun,c\u003dUS\u003c/i\u003e and \n\u003ci\u003eou\u003dGroups,o\u003dSun,c\u003dUS\u003c/i\u003e for user and group information, respectively). \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The format in which the user\u0027s information must be stored in the directory service is specified in RFC 2307. Specifically, this \u003ccode\u003eLoginModule\u003c/code\u003e will search for the user\u0027s entry in the directory service using the user\u0027s \u003ci\u003euid\u003c/i\u003e attribute, where \u003ci\u003euid\u003d\u003cb\u003eusername\u003c/b\u003e\u003c/i\u003e. If the search succeeds, this \u003ccode\u003eLoginModule\u003c/code\u003e will then obtain the user\u0027s encrypted password from the retrieved entry using the \u003ci\u003euserPassword\u003c/i\u003e attribute. This \u003ccode\u003eLoginModule\u003c/code\u003e assumes that the password is stored as a byte array, which when converted to a \u003ccode\u003eString\u003c/code\u003e, has the following format: \u003c/p\u003e\n\u003cpre\u003e      \"{crypt}\u003cb\u003eencrypted_password\u003c/b\u003e\"\n \u003c/pre\u003e The LDAP directory server must be configured to permit read access to the userPassword attribute. If the user entered a valid username and password, this \n\u003ccode\u003eLoginModule\u003c/code\u003e associates a \n\u003ccode\u003eUnixPrincipal\u003c/code\u003e, \n\u003ccode\u003eUnixNumericUserPrincipal\u003c/code\u003e, and the relevant UnixNumericGroupPrincipals with the \n\u003ccode\u003eSubject\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This LoginModule also recognizes the following \u003ccode\u003eConfiguration\u003c/code\u003e options: \u003c/p\u003e\n\u003cpre\u003e    debug          if, true, debug messages are output to System.out.\n\n    useFirstPass   if, true, this LoginModule retrieves the\n                   username and password from the module\u0027s shared state,\n                   using \"javax.security.auth.login.name\" and\n                   \"javax.security.auth.login.password\" as the respective\n                   keys.  The retrieved values are used for authentication.\n                   If authentication fails, no attempt for a retry is made,\n                   and the failure is reported back to the calling\n                   application.\n\n    tryFirstPass   if, true, this LoginModule retrieves the\n                   the username and password from the module\u0027s shared state,\n                   using \"javax.security.auth.login.name\" and\n                   \"javax.security.auth.login.password\" as the respective\n                   keys.  The retrieved values are used for authentication.\n                   If authentication fails, the module uses the\n                   CallbackHandler to retrieve a new username and password,\n                   and another attempt to authenticate is made.\n                   If the authentication fails, the failure is reported\n                   back to the calling application.\n\n    storePass      if, true, this LoginModule stores the username and password\n                   obtained from the CallbackHandler in the module\u0027s\n                   shared state, using \"javax.security.auth.login.name\" and\n                   \"javax.security.auth.login.password\" as the respective\n                   keys.  This is not performed if existing values already\n                   exist for the username and password in the shared state,\n                   or if authentication fails.\n\n    clearPass     if, true, this \u003ccode\u003eLoginModule\u003c/code\u003e clears the\n                  username and password stored in the module\u0027s shared state\n                  after both phases of authentication (login and commit)\n                  have completed.\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}