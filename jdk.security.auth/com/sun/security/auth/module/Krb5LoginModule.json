{
  "packageName": "com.sun.security.auth.module",
  "simpleName": "Krb5LoginModule",
  "moduleName": "jdk.security.auth",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.Subject",
            "type": "Class"
          },
          "name": "subject",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.security.auth.callback.CallbackHandler",
            "type": "Class"
          },
          "name": "callbackHandler",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "sharedState",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "options",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initialize this LoginModule.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to be authenticated.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - a \n\u003ccode\u003eCallbackHandler\u003c/code\u003e for communication with the end user (prompting for usernames and passwords, for example).",
          "\u003ccode\u003esharedState\u003c/code\u003e - shared \n\u003ccode\u003eLoginModule\u003c/code\u003e state.",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specified in the login \n\u003ccode\u003eConfiguration\u003c/code\u003e for this particular \n\u003ccode\u003eLoginModule\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "login",
      "comment": "Authenticate the user",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#login()\"\u003elogin\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/FailedLoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eFailedLoginException\u003c/a\u003e\u003c/code\u003e - if the authentication fails.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eLoginModule\u003c/code\u003e is unable to perform the authentication."
        ],
        "return": [
          "true in all cases since this \n\u003ccode\u003eLoginModule\u003c/code\u003e should not be ignored."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "commit",
      "comment": "This method is called if the LoginContext\u0027s overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login method), then this method associates a Krb5Principal with the Subject located in the LoginModule. It adds Kerberos Credentials to the the Subject\u0027s private credentials set. If this LoginModule\u0027s own authentication attempted failed, then this method removes any state that was originally saved.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#commit()\"\u003ecommit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the commit fails."
        ],
        "return": [
          "true if this LoginModule\u0027s own login and commit attempts succeeded, or false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abort",
      "comment": "This method is called if the LoginContext\u0027s overall authentication failed. (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login and commit methods), then this method cleans up any state that was originally saved.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#abort()\"\u003eabort\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the abort fails."
        ],
        "return": [
          "false if this LoginModule\u0027s own login and/or commit attempts failed, and true otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.security.auth.login.LoginException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logout",
      "comment": "Logout the user. This method removes the Krb5Principal that was added by the commit method.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#logout()\"\u003elogout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the logout fails."
        ],
        "return": [
          "true in all cases since this \n\u003ccode\u003eLoginModule\u003c/code\u003e should not be ignored."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a Krb5LoginModule.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.sun.security.auth.module.Krb5LoginModule",
  "comment": "This \n\u003ccode\u003eLoginModule\u003c/code\u003e authenticates users using Kerberos protocols. \n\u003cp\u003e The configuration entry for \u003ccode\u003eKrb5LoginModule\u003c/code\u003e has several options that control the authentication process and additions to the \u003ccode\u003eSubject\u003c/code\u003e\u0027s private credential set. Irrespective of these options, the \u003ccode\u003eSubject\u003c/code\u003e\u0027s principal set and private credentials set are updated only when \u003ccode\u003ecommit\u003c/code\u003e is called. When \u003ccode\u003ecommit\u003c/code\u003e is called, the \u003ccode\u003eKerberosPrincipal\u003c/code\u003e is added to the \u003ccode\u003eSubject\u003c/code\u003e\u0027s principal set (unless the \u003ccode\u003eprincipal\u003c/code\u003e is specified as \"*\"). If \u003ccode\u003eisInitiator\u003c/code\u003e is true, the \u003ccode\u003eKerberosTicket\u003c/code\u003e is added to the \u003ccode\u003eSubject\u003c/code\u003e\u0027s private credentials. \u003c/p\u003e\n\u003cp\u003e If the configuration entry for \u003ccode\u003eKerberosLoginModule\u003c/code\u003e has the option \u003ccode\u003estoreKey\u003c/code\u003e set to true, then \u003ccode\u003eKerberosKey\u003c/code\u003e or \u003ccode\u003eKeyTab\u003c/code\u003e will also be added to the subject\u0027s private credentials. \u003ccode\u003eKerberosKey\u003c/code\u003e, the principal\u0027s key(s) will be derived from user\u0027s password, and \u003ccode\u003eKeyTab\u003c/code\u003e is the keytab used when \u003ccode\u003euseKeyTab\u003c/code\u003e is set to true. The \u003ccode\u003eKeyTab\u003c/code\u003e object is restricted to be used by the specified principal unless the principal value is \"*\". \u003c/p\u003e\n\u003cp\u003e This \u003ccode\u003eLoginModule\u003c/code\u003e recognizes the \u003ccode\u003edoNotPrompt\u003c/code\u003e option. If set to true the user will not be prompted for the password. \u003c/p\u003e\n\u003cp\u003e The user can specify the location of the ticket cache by using the option \u003ccode\u003eticketCache\u003c/code\u003e in the configuration entry. \u003c/p\u003e\n\u003cp\u003eThe user can specify the keytab location by using the option \u003ccode\u003ekeyTab\u003c/code\u003e in the configuration entry. \u003c/p\u003e\n\u003cp\u003e The principal name can be specified in the configuration entry by using the option \u003ccode\u003eprincipal\u003c/code\u003e. The principal name can either be a simple user name, a service name such as \u003ccode\u003ehost/mission.eng.sun.com\u003c/code\u003e, or \"*\". The principal can also be set using the system property \u003ccode\u003e\u003cspan id\u003d\"sun.security.krb5.principal\" class\u003d\"search-tag-result\"\u003esun.security.krb5.principal\u003c/span\u003e\u003c/code\u003e. This property is checked during login. If this property is not set, then the principal name from the configuration is used. In the case where the principal property is not set and the principal entry also does not exist, the user is prompted for the name. When this property of entry is set, and \u003ccode\u003euseTicketCache\u003c/code\u003e is set to true, only TGT belonging to this principal is used. \u003c/p\u003e\n\u003cp\u003e The following is a list of configuration options supported for \u003ccode\u003eKrb5LoginModule\u003c/code\u003e: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cdl\u003e \n  \u003cdt\u003e\n   \u003ccode\u003erefreshKrb5Config\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n    Set this to true, if you want the configuration to be refreshed before the \n   \u003ccode\u003elogin\u003c/code\u003e method is called.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003euseTicketCache\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to true, if you want the TGT to be obtained from the ticket cache. Set this option to false if you do not want this module to use the ticket cache. (Default is False). This module will search for the ticket cache in the following locations: On Linux it will look for the ticket cache in /tmp/krb5cc_\n   \u003ccode\u003euid\u003c/code\u003e where the uid is numeric user identifier. If the ticket cache is not available in the above location, or if we are on a Windows platform, it will look for the cache as {user.home}{file.separator}krb5cc_{user.name}. You can override the ticket cache location by using \n   \u003ccode\u003eticketCache\u003c/code\u003e. For Windows, if a ticket cannot be retrieved from the file ticket cache, it will use Local Security Authority (LSA) API to get the TGT. \n  \u003c/dd\u003e\n  \u003cdt\u003e\n   \u003ccode\u003eticketCache\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to the name of the ticket cache that contains user\u0027s TGT. If this is set, \n   \u003ccode\u003euseTicketCache\u003c/code\u003e must also be set to true; Otherwise a configuration error will be returned.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003erenewTGT\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to true, if you want to renew the TGT when it\u0027s more than half-way expired (the time until expiration is less than the time since start time). If this is set, \n   \u003ccode\u003euseTicketCache\u003c/code\u003e must also be set to true; otherwise a configuration error will be returned.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003edoNotPrompt\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to true if you do not want to be prompted for the password if credentials can not be obtained from the cache, the keytab, or through shared state.(Default is false) If set to true, credential must be obtained through cache, keytab, or shared state. Otherwise, authentication will fail.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003euseKeyTab\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to true if you want the module to get the principal\u0027s key from the the keytab.(default value is False) If \n   \u003ccode\u003ekeytab\u003c/code\u003e is not set then the module will locate the keytab from the Kerberos configuration file. If it is not specified in the Kerberos configuration file then it will look for the file \n   \u003ccode\u003e{user.home}{file.separator}\u003c/code\u003ekrb5.keytab.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003ekeyTab\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to the file name of the keytab to get principal\u0027s secret key.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003estoreKey\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to true to if you want the keytab or the principal\u0027s key to be stored in the Subject\u0027s private credentials. For \n   \u003ccode\u003eisInitiator\u003c/code\u003e being false, if \n   \u003ccode\u003eprincipal\u003c/code\u003e is \"*\", the \n   \u003ca href\u003d\"../../../../../../java.security.jgss/javax/security/auth/kerberos/KeyTab.html\" title\u003d\"class in javax.security.auth.kerberos\"\u003e\u003ccode\u003eKeyTab\u003c/code\u003e\u003c/a\u003e stored can be used by anyone, otherwise, it\u0027s restricted to be used by the specified principal only.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003eprincipal\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   The name of the principal that should be used. The principal can be a simple username such as \"\n   \u003ccode\u003etestuser\u003c/code\u003e\" or a service name such as \"\n   \u003ccode\u003ehost/testhost.eng.sun.com\u003c/code\u003e\". You can use the \n   \u003ccode\u003eprincipal\u003c/code\u003e option to set the principal when there are credentials for multiple principals in the \n   \u003ccode\u003ekeyTab\u003c/code\u003e or when you want a specific ticket cache only. The principal can also be set using the system property \n   \u003ccode\u003esun.security.krb5.principal\u003c/code\u003e. In addition, if this system property is defined, then it will be used. If this property is not set, then the principal name from the configuration will be used. The principal name can be set to \"*\" when \n   \u003ccode\u003eisInitiator\u003c/code\u003e is false. In this case, the acceptor is not bound to a single principal. It can act as any principal an initiator requests if keys for that principal can be found. When \n   \u003ccode\u003eisInitiator\u003c/code\u003e is true, the principal name cannot be set to \"*\". \n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003eisInitiator\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   Set this to true, if initiator. Set this to false, if acceptor only. (Default is true). Note: Do not set this value to false for initiators.\n  \u003c/dd\u003e \n \u003c/dl\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This \u003ccode\u003eLoginModule\u003c/code\u003e also recognizes the following additional \u003ccode\u003eConfiguration\u003c/code\u003e options that enable you to share username and passwords across different authentication modules: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cdl\u003e \n  \u003cdt\u003e\n   \u003ccode\u003euseFirstPass\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   if, true, this LoginModule retrieves the username and password from the module\u0027s shared state, using \"javax.security.auth.login.name\" and \"javax.security.auth.login.password\" as the respective keys. The retrieved values are used for authentication. If authentication fails, no attempt for a retry is made, and the failure is reported back to the calling application.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003etryFirstPass\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   if, true, this LoginModule retrieves the the username and password from the module\u0027s shared state using \"javax.security.auth.login.name\" and \"javax.security.auth.login.password\" as the respective keys. The retrieved values are used for authentication. If authentication fails, the module uses the CallbackHandler to retrieve a new username and password, and another attempt to authenticate is made. If the authentication fails, the failure is reported back to the calling application\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003estorePass\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   if, true, this LoginModule stores the username and password obtained from the CallbackHandler in the modules shared state, using \"javax.security.auth.login.name\" and \"javax.security.auth.login.password\" as the respective keys. This is not performed if existing values already exist for the username and password in the shared state, or if authentication fails.\n  \u003c/dd\u003e \n  \u003cdt\u003e\n   \u003ccode\u003eclearPass\u003c/code\u003e:\n  \u003c/dt\u003e \n  \u003cdd\u003e\n   if, true, this LoginModule clears the username and password stored in the module\u0027s shared state after both phases of authentication (login and commit) have completed.\n  \u003c/dd\u003e \n \u003c/dl\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf the principal system property or key is already provided, the value of \"javax.security.auth.login.name\" in the shared state is ignored. \u003c/p\u003e\n\u003cp\u003eWhen multiple mechanisms to retrieve a ticket or key is provided, the preference order is: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eticket cache \u003c/li\u003e\n \u003cli\u003ekeytab \u003c/li\u003e\n \u003cli\u003eshared state \u003c/li\u003e\n \u003cli\u003euser prompt \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eNote that if any step fails, it will fallback to the next step. There\u0027s only one exception, if the shared state step fails and \u003ccode\u003euseFirstPass \u003d true\u003c/code\u003e, no user prompt is made. \u003c/p\u003e\n\u003cp\u003eExamples of some configuration values for Krb5LoginModule in JAAS config file and the results are: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n doNotPrompt \u003d true\u003c/code\u003e\u003c/pre\u003e This is an illegal combination since none of \n \u003ccode\u003euseTicketCache, useKeyTab, useFirstPass\u003c/code\u003e and \n \u003ccode\u003etryFirstPass\u003c/code\u003e is set and the user can not be prompted for the password. \n \u003cpre\u003e\u003ccode\u003e\n ticketCache \u003d \u0026lt;filename\u0026gt;\u003c/code\u003e\u003c/pre\u003e This is an illegal combination since \n \u003ccode\u003euseTicketCache\u003c/code\u003e is not set to true and the ticketCache is set. A configuration error will occur. \n \u003cpre\u003e\u003ccode\u003e\n renewTGT \u003d true\u003c/code\u003e\u003c/pre\u003e This is an illegal combination since \n \u003ccode\u003euseTicketCache\u003c/code\u003e is not set to true and renewTGT is set. A configuration error will occur. \n \u003cpre\u003e\u003ccode\u003e\n storeKey \u003d true  useTicketCache \u003d true  doNotPrompt \u003d true\u003c/code\u003e\u003c/pre\u003e This is an illegal combination since \n \u003ccode\u003estoreKey\u003c/code\u003e is set to true but the key can not be obtained either by prompting the user or from the keytab, or from the shared state. A configuration error will occur. \n \u003cpre\u003e\u003ccode\u003e\n keyTab \u003d \u0026lt;filename\u0026gt;  doNotPrompt \u003d true\u003c/code\u003e\u003c/pre\u003e This is an illegal combination since useKeyTab is not set to true and the keyTab is set. A configuration error will occur. \n \u003cpre\u003e\u003ccode\u003e\n debug \u003d true\u003c/code\u003e\u003c/pre\u003e Prompt the user for the principal name and the password. Use the authentication exchange to get TGT from the KDC and populate the \n \u003ccode\u003eSubject\u003c/code\u003e with the principal and TGT. Output debug messages. \n \u003cpre\u003e\u003ccode\u003e\n useTicketCache \u003d true  doNotPrompt \u003d true\u003c/code\u003e\u003c/pre\u003e Check the default cache for TGT and populate the \n \u003ccode\u003eSubject\u003c/code\u003e with the principal and TGT. If the TGT is not available, do not prompt the user, instead fail the authentication. \n \u003cpre\u003e\u003ccode\u003e\n principal \u003d \u0026lt;name\u0026gt;  useTicketCache \u003d true  doNotPrompt \u003d true\u003c/code\u003e\u003c/pre\u003e Get the TGT from the default cache for the principal and populate the Subject\u0027s principal and private creds set. If ticket cache is not available or does not contain the principal\u0027s TGT authentication will fail. \n \u003cpre\u003e\u003ccode\u003e\n useTicketCache \u003d true\n ticketCache \u003d \u0026lt;file name\u0026gt;\n useKeyTab \u003d true\n keyTab \u003d \u0026lt;keytab filename\u0026gt;\n principal \u003d \u0026lt;principal name\u0026gt;\n doNotPrompt \u003d true\u003c/code\u003e\u003c/pre\u003e Search the cache for the principal\u0027s TGT. If it is not available use the key in the keytab to perform authentication exchange with the KDC and acquire the TGT. The Subject will be populated with the principal and the TGT. If the key is not available or valid then authentication will fail. \n \u003cpre\u003e\u003ccode\u003e\n useTicketCache \u003d true  ticketCache \u003d \u0026lt;filename\u0026gt;\u003c/code\u003e\u003c/pre\u003e The TGT will be obtained from the cache specified. The Kerberos principal name used will be the principal name in the Ticket cache. If the TGT is not available in the ticket cache the user will be prompted for the principal name and the password. The TGT will be obtained using the authentication exchange with the KDC. The Subject will be populated with the TGT. \n \u003cpre\u003e\u003ccode\u003e\n useKeyTab \u003d true  keyTab\u003d\u0026lt;keytab filename\u0026gt;  principal \u003d \u0026lt;principal name\u0026gt;  storeKey \u003d true\u003c/code\u003e\u003c/pre\u003e The key for the principal will be retrieved from the keytab. If the key is not available in the keytab the user will be prompted for the principal\u0027s password. The Subject will be populated with the principal\u0027s key either from the keytab or derived from the password entered. \n \u003cpre\u003e\u003ccode\u003e\n useKeyTab \u003d true  keyTab \u003d \u0026lt;keytabname\u0026gt;  storeKey \u003d true  doNotPrompt \u003d false\u003c/code\u003e\u003c/pre\u003e The user will be prompted for the service principal name. If the principal\u0027s longterm key is available in the keytab , it will be added to the Subject\u0027s private credentials. An authentication exchange will be attempted with the principal name and the key from the Keytab. If successful the TGT will be added to the Subject\u0027s private credentials set. Otherwise the authentication will fail. \n \u003cpre\u003e\u003ccode\u003e\n isInitiator \u003d false  useKeyTab \u003d true  keyTab \u003d \u0026lt;keytabname\u0026gt;  storeKey \u003d true  principal \u003d *\u003c/code\u003e\u003c/pre\u003e The acceptor will be an unbound acceptor and it can act as any principal as long that principal has keys in the keytab. \n \u003cpre\u003e\u003ccode\u003e\n useTicketCache \u003d true\n ticketCache \u003d \u0026lt;file name\u0026gt;\n useKeyTab \u003d true\n keyTab \u003d \u0026lt;file name\u0026gt;\n storeKey \u003d true\n principal \u003d \u0026lt;principal name\u0026gt;\u003c/code\u003e\u003c/pre\u003e The client\u0027s TGT will be retrieved from the ticket cache and added to the \n \u003ccode\u003eSubject\u003c/code\u003e\u0027s private credentials. If the TGT is not available in the ticket cache, or the TGT\u0027s client name does not match the principal name, Java will use a secret key to obtain the TGT using the authentication exchange and added to the Subject\u0027s private credentials. This secret key will be first retrieved from the keytab. If the key is not available, the user will be prompted for the password. In either case, the key derived from the password will be added to the Subject\u0027s private credentials set. \n \u003cpre\u003e\u003ccode\u003e\n isInitiator \u003d false\u003c/code\u003e\u003c/pre\u003e Configured to act as acceptor only, credentials are not acquired via AS exchange. For acceptors only, set this value to false. For initiators, do not set this value to false. \n \u003cpre\u003e\u003ccode\u003e\n isInitiator \u003d true\u003c/code\u003e\u003c/pre\u003e Configured to act as initiator, credentials are acquired via AS exchange. For initiators, set this value to true, or leave this option unset, in which case default value (true) will be used. \n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}