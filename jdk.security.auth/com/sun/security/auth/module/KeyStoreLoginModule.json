{
  "packageName": "com.sun.security.auth.module",
  "simpleName": "KeyStoreLoginModule",
  "moduleName": "jdk.security.auth",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initialize this LoginModule.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the \n\u003ccode\u003eSubject\u003c/code\u003e to be authenticated.",
          "\u003ccode\u003ecallbackHandler\u003c/code\u003e - a \n\u003ccode\u003eCallbackHandler\u003c/code\u003e for communicating with the end user (prompting for usernames and passwords, for example), which may be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003esharedState\u003c/code\u003e - shared \n\u003ccode\u003eLoginModule\u003c/code\u003e state.",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specified in the login \n\u003ccode\u003eConfiguration\u003c/code\u003e for this particular \n\u003ccode\u003eLoginModule\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "login",
      "comment": "Authenticate the user. Get the Keystore alias and relevant passwords. Retrieve the alias\u0027s principal and credentials from the Keystore.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#login()\"\u003elogin\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/FailedLoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eFailedLoginException\u003c/a\u003e\u003c/code\u003e - if the authentication fails.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the authentication fails"
        ],
        "return": [
          "true in all cases (this \n\u003ccode\u003eLoginModule\u003c/code\u003e should not be ignored)."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "commit",
      "comment": "Abstract method to commit the authentication process (phase 2). This method is called if the LoginContext\u0027s overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login method), then this method associates a X500Principal for the subject distinguished name of the first certificate in the alias\u0027s credentials in the subject\u0027s principals,the alias\u0027s certificate path in the subject\u0027s public credentials, and a X500PrivateCredential whose certificate is the first certificate in the alias\u0027s certificate path and whose private key is the alias\u0027s private key in the subject\u0027s private credentials. If this LoginModule\u0027s own authentication attempted failed, then this method removes any state that was originally saved.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#commit()\"\u003ecommit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the commit fails"
        ],
        "return": [
          "true if this LoginModule\u0027s own login and commit attempts succeeded, or false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abort",
      "comment": "This method is called if the LoginContext\u0027s overall authentication failed. (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed). If this LoginModule\u0027s own authentication attempt succeeded (checked by retrieving the private state saved by the login and commit methods), then this method cleans up any state that was originally saved. If the loaded KeyStore\u0027s provider extends java.security.AuthProvider, then the provider\u0027s logout method is invoked.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#abort()\"\u003eabort\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the abort fails."
        ],
        "return": [
          "false if this LoginModule\u0027s own login and/or commit attempts failed, and true otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logout",
      "comment": "Logout a user. This method removes the Principals, public credentials and the private credentials that were added by the commit method. If the loaded KeyStore\u0027s provider extends java.security.AuthProvider, then the provider\u0027s logout method is invoked.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html#logout()\"\u003elogout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/spi/LoginModule.html\" title\u003d\"interface in javax.security.auth.spi\"\u003eLoginModule\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/security/auth/login/LoginException.html\" title\u003d\"class in javax.security.auth.login\"\u003eLoginException\u003c/a\u003e\u003c/code\u003e - if the logout fails."
        ],
        "return": [
          "true in all cases since this \n\u003ccode\u003eLoginModule\u003c/code\u003e should not be ignored."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a KeyStoreLoginModule.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.sun.security.auth.module.KeyStoreLoginModule",
  "comment": "Provides a JAAS login module that prompts for a key store alias and populates the subject with the alias\u0027s principal and credentials. Stores an \n\u003ccode\u003eX500Principal\u003c/code\u003e for the subject distinguished name of the first certificate in the alias\u0027s credentials in the subject\u0027s principals, the alias\u0027s certificate path in the subject\u0027s public credentials, and a \n\u003ccode\u003eX500PrivateCredential\u003c/code\u003e whose certificate is the first certificate in the alias\u0027s certificate path and whose private key is the alias\u0027s private key in the subject\u0027s private credentials. \n\u003cp\u003e Recognizes the following options in the configuration file: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e \n  \u003ccode\u003ekeyStoreURL\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   A URL that specifies the location of the key store. Defaults to a URL pointing to the .keystore file in the directory specified by the \n  \u003ccode\u003euser.home\u003c/code\u003e system property. The input stream from this URL is passed to the \n  \u003ccode\u003eKeyStore.load\u003c/code\u003e method. \"NONE\" may be specified if a \n  \u003ccode\u003enull\u003c/code\u003e stream must be passed to the \n  \u003ccode\u003eKeyStore.load\u003c/code\u003e method. \"NONE\" should be specified if the KeyStore resides on a hardware token device, for example.\n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003ekeyStoreType\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   The key store type. If not specified, defaults to the result of calling \n  \u003ccode\u003eKeyStore.getDefaultType()\u003c/code\u003e. If the type is \"PKCS11\", then keyStoreURL must be \"NONE\" and privateKeyPasswordURL must not be specified.\n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003ekeyStoreProvider\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   The key store provider. If not specified, uses the standard search order to find the provider. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003ekeyStoreAlias\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   The alias in the key store to login as. Required when no callback handler is provided. No default value. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003ekeyStorePasswordURL\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   A URL that specifies the location of the key store password. Required when no callback handler is provided and \n  \u003ccode\u003eprotected\u003c/code\u003e is false. No default value. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003eprivateKeyPasswordURL\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   A URL that specifies the location of the specific private key password needed to access the private key for this alias. The keystore password is used if this value is needed and not specified. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003eprotected\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   This value should be set to \"true\" if the KeyStore has a separate, protected authentication path (for example, a dedicated PIN-pad attached to a smart card). Defaults to \"false\". If \"true\" keyStorePasswordURL and privateKeyPasswordURL must not be specified.\n \u003c/dd\u003e \n\u003c/dl\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}