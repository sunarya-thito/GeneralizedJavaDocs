{
  "packageName": "jdk.jfr",
  "simpleName": "ValueDescriptor",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLabel",
      "comment": "Returns a human-readable name that describes the value (for example, \"Maximum Throughput\").",
      "tagMap": {
        "return": [
          "a human-readable name, or \n\u003ccode\u003enull\u003c/code\u003e if doesn\u0027t exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of the value (for example, \"maxThroughput\").",
      "tagMap": {
        "return": [
          "the name, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDescription",
      "comment": "Returns a sentence describing the value (for example, \"Maximum throughput in the transaction system. Value is reset after each new batch.\").",
      "tagMap": {
        "return": [
          "the description, or \n\u003ccode\u003enull\u003c/code\u003e if doesn\u0027t exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContentType",
      "comment": "Returns a textual identifier that specifies how a value represented by this ValueDescriptor is interpreted or formatted. For example, if the value descriptor\u0027s type is float and the event value is 0.5f, a content type of \"jdk.jfr.Percentage\" hints to a client that the value is a percentage and that it should be rendered as \"50%\". The JDK provides the following predefined content types: jdk.jfr.Percentage jdk.jfr.Timespan jdk.jfr.Timestamp jdk.jfr.Frequency jdk.jfr.Flag jdk.jfr.MemoryAddress jdk.jfr.DataAmount jdk.jfr.NetworkAddress User-defined content types can be created by using the ContentType class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/ContentType.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eContentType\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the content type, or \n\u003ccode\u003enull\u003c/code\u003e if doesn\u0027t exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeName",
      "comment": "Returns the fully qualified class name of the type that is associated with this value descriptor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/ValueDescriptor.html#getTypeId()\"\u003e\u003ccode\u003egetTypeId()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the type name, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeId",
      "comment": "Returns a unique ID for the type in the Java virtual Machine (JVM). The ID might not be the same between JVM instances.",
      "tagMap": {
        "return": [
          "the type ID, not negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isArray",
      "comment": "Returns if this value descriptor is an array type.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if it is an array type, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotation",
      "comment": "Returns the first annotation for the specified type if an annotation element with the same name is directly present for this value descriptor, null otherwise.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the Class object that corresponds to the annotation type, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if directly present, else \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.AnnotationElement",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotationElements",
      "comment": "Returns an immutable list of annotation elements for this value descriptor.",
      "tagMap": {
        "return": [
          "a list of annotations, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.ValueDescriptor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFields",
      "comment": "Returns an immutable list of value descriptors if the type is complex, else an empty list.",
      "tagMap": {
        "return": [
          "a list of value descriptors, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a value descriptor, useful for dynamically creating event types and annotations. The following types are supported: byte.class short.class int.class long.class char.class float.class double.class boolean.class String.class Class.class Thread.class The name must be a valid Java identifier (for example, \"maxThroughput\"). See 3.8 Java Language Specification for more information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type, not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - the name, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present and the caller doesn\u0027t have \n\u003ccode\u003eFlightRecorderPermission(\"registerEvent\")\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "jdk.jfr.AnnotationElement",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotations"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a value descriptor, useful for dynamically creating event types and annotations. The following types are supported: byte.class short.class int.class long.class char.class float.class double.class boolean.class String.class Class.class Thread.class The name must be a valid Java identifier (for example, \"maxThroughput\"). See 3.8 Java Language Specification for more information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type, not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - the name, not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eannotations\u003c/code\u003e - the annotations on the value descriptors, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present and the caller doesn\u0027t have \n\u003ccode\u003eFlightRecorderPermission(\"registerEvent\")\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.jfr.ValueDescriptor",
  "comment": "Describes the event fields and annotation elements.",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}