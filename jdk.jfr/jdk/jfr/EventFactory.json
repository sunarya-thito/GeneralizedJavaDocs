{
  "packageName": "jdk.jfr",
  "simpleName": "EventFactory",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jfr.EventFactory",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "jdk.jfr.AnnotationElement",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "annotationElements",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "jdk.jfr.ValueDescriptor",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "fields",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "Creates an EventFactory object. The order of the value descriptors specifies the index to use when setting event values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Event.html#set(int,java.lang.Object)\"\u003e\u003ccode\u003eEvent.set(int, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationElements\u003c/code\u003e - list of annotation elements that describes the annotations on the event, not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003efields\u003c/code\u003e - list of descriptors that describes the fields of the event, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the input is not valid. For example, input might not be valid if the field type or name is not valid in the Java language or an annotation element references a type that can\u0027t be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller does not have \n\u003ccode\u003eFlightRecorderPermission(\"registerEvent\")\u003c/code\u003e"
        ],
        "return": [
          "event factory, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jfr.Event",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newEvent",
      "comment": "Instantiates an event, so it can be populated with data and written to the Flight Recorder system. Use the Event.set(int, Object) method to set a value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an event instance, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jfr.EventType",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEventType",
      "comment": "Returns the event type that is associated with this event factory.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the event factory is created with the \n\u003ccode\u003eRegistered(false)\u003c/code\u003e annotation and the event class is not manually registered before the invocation of this method"
        ],
        "return": [
          "event type that is associated with this event factory, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "register",
      "comment": "Registers an unregistered event. By default, the event class associated with this event factory is registered when the event factory is created, unless the event has the Registered annotation. A registered event class can write data to Flight Recorder and event metadata can be obtained by invoking FlightRecorder.getEventTypes(). If the event class associated with this event factory is already registered, the call to this method is ignored.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Registered.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eRegistered\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/FlightRecorder.html#register(java.lang.Class)\"\u003e\u003ccode\u003eFlightRecorder.register(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller does not have \n\u003ccode\u003eFlightRecorderPermission(\"registerEvent\")\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unregister",
      "comment": "Unregisters the event that is associated with this event factory. A unregistered event class can\u0027t write data to Flight Recorder and event metadata can\u0027t be obtained by invoking FlightRecorder.getEventTypes(). If the event class associated with this event factory is not already registered, the call to this method is ignored.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Registered.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eRegistered\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/FlightRecorder.html#unregister(java.lang.Class)\"\u003e\u003ccode\u003eFlightRecorder.unregister(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller does not have \n\u003ccode\u003eFlightRecorderPermission(\"registerEvent\")\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.jfr.EventFactory",
  "annotations": [],
  "tagMap": {
    "since": [
      "9"
    ]
  }
}