{
  "packageName": "jdk.jfr",
  "simpleName": "Event",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "jdk.internal.event.Event",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "begin",
      "comment": "Starts the timing of this event.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003ebegin\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "end",
      "comment": "Ends the timing of this event. The end method must be invoked after the begin method.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003eend\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "commit",
      "comment": "Writes the field values, time stamp, and event duration to the Flight Recorder system. If the event starts with an invocation of the begin method, but does not end with an explicit invocation of the end method, then the event ends when the commit method is invoked.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003ecommit\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isEnabled",
      "comment": "Returns true if at least one recording is running, and the enabled setting for this event is set to true, otherwise false is returned.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003eisEnabled\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if event is enabled, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "shouldCommit",
      "comment": "Returns true if the enabled setting for this event is set to true and if the duration is within the threshold for the event, false otherwise. The threshold is the minimum threshold for all running recordings.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003eshouldCommit\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the event can be written to the Flight Recorder system, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "set",
      "comment": "Sets a field value. Applicable only if the event is dynamically defined using the EventFactory class. The supplied index corresponds to the index of the ValueDescriptor object passed to the factory method of the EventFactory class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/EventType.html#getFields()\"\u003e\u003ccode\u003eEventType.getFields()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/EventFactory.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eEventFactory\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003eset\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the field that is passed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/EventFactory.html#create(java.util.List,java.util.List)\"\u003e\u003ccode\u003eEventFactory.create(java.util.List, java.util.List)\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003evalue\u003c/code\u003e - value to set, can be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if it\u0027s not a dynamically generated event",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is less than \n\u003ccode\u003e0\u003c/code\u003e or greater than or equal to the number of fields specified for the event"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor, for invocation by subclass constructors, typically implicit.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "jdk.jfr.Event",
  "annotations": [],
  "tagMap": {
    "since": [
      "9"
    ]
  }
}