{
  "packageName": "jdk.jfr",
  "simpleName": "Event",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "jdk.internal.event.Event",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "begin",
      "comment": "Starts the timing of this event.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003ebegin\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "end",
      "comment": "Ends the timing of this event. The end method must be invoked after the begin method.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003eend\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "commit",
      "comment": "Writes the field values, time stamp, and event duration to the Flight Recorder system. If the event starts with an invocation of the begin method, but does not end with an explicit invocation of the end method, then the event ends when the commit method is invoked.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003ecommit\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isEnabled",
      "comment": "Returns true if at least one recording is running, and the enabled setting for this event is set to true, otherwise false is returned.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003eisEnabled\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if event is enabled, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "shouldCommit",
      "comment": "Returns true if the enabled setting for this event is set to true and if the duration is within the threshold for the event, false otherwise. The threshold is the minimum threshold for all running recordings.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003eshouldCommit\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the event can be written to the Flight Recorder system, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "set",
      "comment": "Sets a field value. Applicable only if the event is dynamically defined using the EventFactory class. The supplied index corresponds to the index of the ValueDescriptor object passed to the factory method of the EventFactory class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/EventType.html#getFields()\"\u003e\u003ccode\u003eEventType.getFields()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/EventFactory.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eEventFactory\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003eset\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003ejdk.internal.event.Event\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the field that is passed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/EventFactory.html#create(java.util.List,java.util.List)\"\u003e\u003ccode\u003eEventFactory.create(java.util.List, java.util.List)\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003evalue\u003c/code\u003e - value to set, can be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if it\u0027s not a dynamically generated event",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is less than \n\u003ccode\u003e0\u003c/code\u003e or greater than or equal to the number of fields specified for the event"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor, for invocation by subclass constructors, typically implicit.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "jdk.jfr.Event",
  "comment": "Base class for events, to be subclassed in order to define events and their fields. \n\u003cp\u003e The following example shows how to implement an \u003ccode\u003eEvent\u003c/code\u003e class. \u003c/p\u003e\n\u003cpre\u003e import jdk.jfr.Event;\n import jdk.jfr.Description;\n import jdk.jfr.Label;\n\n public class Example {\n\n   @Label(\"Hello World\")\n   @Description(\"Helps programmer getting started\")\n   static class HelloWorld extends Event {\n       @Label(\"Message\")\n       String message;\n   }\n\n   public static void main(String... args) {\n       HelloWorld event \u003d new HelloWorld();\n       event.message \u003d \"hello, world!\";\n       event.commit();\n   }\n }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e After an event is allocated and its field members are populated, it can be written to the Flight Recorder system by using the \u003ca href\u003d\"#commit()\"\u003e\u003ccode\u003ecommit()\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e By default, an event is enabled. To disable an event annotate the \u003ca href\u003d\"Event.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eEvent\u003c/code\u003e\u003c/a\u003e class with \u003ccode\u003e@Enabled(false)\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Supported field types are the Java primitives: \u003ccode\u003eboolean\u003c/code\u003e, \u003ccode\u003echar\u003c/code\u003e, \u003ccode\u003ebyte\u003c/code\u003e, \u003ccode\u003eshort\u003c/code\u003e, \u003ccode\u003eint\u003c/code\u003e, \u003ccode\u003elong\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e, and \u003ccode\u003edouble\u003c/code\u003e. Supported reference types are: \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eThread\u003c/code\u003e and \u003ccode\u003eClass\u003c/code\u003e. Arrays, enums, and other reference types are silently ignored and not included. Fields that are of the supported types can be excluded by using the transient modifier. Static fields, even of the supported types, are not included. \u003c/p\u003e\n\u003cp\u003e Tools can visualize data in a meaningful way when annotations are used (for example, \u003ccode\u003eLabel\u003c/code\u003e, \u003ccode\u003eDescription\u003c/code\u003e, and \u003ccode\u003eTimespan\u003c/code\u003e). Annotations applied to an \u003ca href\u003d\"Event.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eEvent\u003c/code\u003e\u003c/a\u003e class or its fields are included if they are present (indirectly, directly, or associated), have the \u003ccode\u003eMetadataDefinition\u003c/code\u003e annotation, and they do not contain enums, arrays, or classes. \u003c/p\u003e\n\u003cp\u003e Gathering data to store in an event can be expensive. The \u003ca href\u003d\"#shouldCommit()\"\u003e\u003ccode\u003eshouldCommit()\u003c/code\u003e\u003c/a\u003e method can be used to verify whether an event instance would actually be written to the system when the \u003ccode\u003ecommit()\u003c/code\u003e method is invoked. If \u003ccode\u003eshouldCommit()\u003c/code\u003e returns false, then those operations can be avoided.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}