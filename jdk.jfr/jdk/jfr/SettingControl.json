{
  "packageName": "jdk.jfr",
  "simpleName": "SettingControl",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "settingValues"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "combine",
      "comment": "Combines the setting values for all running recordings into one value when multiple recordings are running at the same time, The semantics of how setting values are combined depends on the setting control that is implemented, but all recordings should get at least all the events they request. This method should have no side effects, because the caller might cache values. This method should never return null or throw an exception. If a value is not valid for this setting control, the value should be ignored. Examples: if the setting control represents a threshold and three recordings are running at the same time with the setting values \"10 ms\", \"8 s\", and \"1 ms\", this method returns \"1 ms\" because it means that all recordings get at least all the requested data. If the setting control represents a set of names and two recordings are running at the same time with the setting values \"Smith, Jones\" and \"Jones, Williams\" the returned value is \"Smith, Jones, Williams\" because all names would be accepted. If the setting control represents a boolean condition and four recordings are running at the same time with the following values \"true\", \"false\", \"false\", and \"incorrect\", this method returns \"true\", because all recordings get at least all the requested data.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esettingValues\u003c/code\u003e - the set of values, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value to use, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "settingValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setValue",
      "comment": "Sets the value for this setting. If the setting value is not valid for this setting, this method does not throw an exception. Instead, the value is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esettingValue\u003c/code\u003e - the string value, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getValue",
      "comment": "Returns the currently used value for this setting, not null. The value returned by this method is valid as an argument to both the setValue(String) method and combine(Set) method. This method is invoked when an event is registered to obtain the default value. It is therefore important that a valid value can be returned immediately after an instance of this class is created. It is not valid to return null.",
      "tagMap": {
        "return": [
          "the setting value, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for invocation by subclass constructors.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "jdk.jfr.SettingControl",
  "comment": "Base class to extend to create setting controls. \n\u003cp\u003e The following example shows a naive implementation of a setting control for regular expressions: \u003c/p\u003e\n\u003cpre\u003e final class RegExpControl extends SettingControl {\n   private Pattern pattern \u003d Pattern.compile(\".*\");\n\n   @Override\n   public void setValue(String value) {\n     this.pattern \u003d Pattern.compile(value);\n   }\n\n   @Override\n   public String combine(Set\u0026lt;String\u0026gt; values) {\n     return String.join(\"|\", values);\n   }\n\n   @Override\n   public String getValue() {\n     return pattern.toString();\n   }\n\n   public boolean matches(String s) {\n     return pattern.matcher(s).find();\n   }\n }\n \u003c/pre\u003e The \n\u003ccode\u003esetValue(String)\u003c/code\u003e, \n\u003ccode\u003egetValue()\u003c/code\u003e and \n\u003ccode\u003ecombine(Set\u0026lt;String\u0026gt;)\u003c/code\u003e methods are invoked when a setting value changes, which typically happens when a recording is started or stopped. The \n\u003ccode\u003ecombine(Set\u0026lt;String\u0026gt;)\u003c/code\u003e method is invoked to resolve what value to use when multiple recordings are running at the same time. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The setting control must have a default constructor that can be invoked when the event is registered. \u003c/p\u003e\n\u003cp\u003e To use a setting control with an event, add a method that returns a \u003ccode\u003eboolean\u003c/code\u003e value and takes the setting control as a parameter. Annotate the method with the \u003ccode\u003e@SettingDefinition\u003c/code\u003e annotation. By default, the method name is used as the setting name, but the name can be set explicitly by using the \u003ccode\u003e@Name\u003c/code\u003e annotation. If the method returns \u003ccode\u003etrue\u003c/code\u003e, the event will be committed. \u003c/p\u003e\n\u003cp\u003e It is recommended that the \u003ccode\u003esetValue(String)\u003c/code\u003e method updates an efficient data structure that can be quickly checked when the event is committed. \u003c/p\u003e\n\u003cp\u003e The following example shows how to create an event that uses the regular expression filter defined above. \u003c/p\u003e\n\u003cpre\u003e abstract class HTTPRequest extends Event {\n   @Label(\"Request URI\")\n   protected String uri;\n\n   @Label(\"Servlet URI Filter\")\n   @SettingDefinition\n   protected boolean uriFilter(RegExpControl regExp) {\n     return regExp.matches(uri);\n   }\n }\n\n @Label(\"HTTP Get Request\")\n class HTTPGetRequest extends HTTPRequest {\n }\n\n @Label(\"HTTP Post Request\")\n class HTTPPostRequest extends HTTPRequest {\n }\n\n class ExampleServlet extends HttpServlet {\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp) {\n     HTTPGetRequest request \u003d new HTTPGetRequest();\n     request.begin();\n     request.uri \u003d req.getRequestURI();\n     ...\n     request.commit();\n   }\n\n   protected void doPost(HttpServletRequest req, HttpServletResponse resp) {\n     HTTPPostRequest request \u003d new HTTPPostRequest();\n     request.begin();\n     request.uri \u003d req.getRequestURI();\n     ...\n     request.commit();\n   }\n }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following example shows how an event can be filtered by assigning the \u003ccode\u003e\"uriFilter\"\u003c/code\u003e setting with the specified regular expressions. \u003c/p\u003e\n\u003cpre\u003e Recording r \u003d new Recording();\n r.enable(\"HTTPGetRequest\").with(\"uriFilter\", \"https://www.example.com/list/.*\");\n r.enable(\"HTTPPostRequest\").with(\"uriFilter\", \"https://www.example.com/login/.*\");\n r.start();\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/SettingDefinition.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eSettingDefinition\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "9"
    ]
  }
}