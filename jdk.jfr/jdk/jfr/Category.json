{
  "packageName": "jdk.jfr",
  "simpleName": "Category",
  "moduleName": "jdk.jfr",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jfr.Category",
  "comment": "Event annotation, to associate the event type with a category, in the format of a human-readable path. \n\u003cp\u003e The category determines how an event is presented to the user. Events that are in the same category are typically displayed together in graphs and trees. To avoid the overlap of durational events in graphical representations, overlapping events must be in separate categories. \u003c/p\u003e\n\u003cp\u003e For example, to monitor image uploads to a web server with a separate thread for each upload, an event called File Upload starts when the user uploads a file and ends when the upload is complete. For advanced diagnostics about image uploads, more detailed events are created (for example, Image Read, Image Resize, and Image Write). During these detailed events, other low- level events could occur (for example, Socket Read and File Write). \u003c/p\u003e\n\u003cp\u003e The following visualization shows overlapping events belonging to a single thread. By assigning the events to different categories they can be visually separated and stacked vertically. \u003c/p\u003e\n\u003cpre\u003e 13:00:01                                                     13:00:05\n ---------------------------------------------------------------------\n  1   |                         File Upload                        |\n ---------------------------------------------------------------------\n  2   |       Image Read          | Image Resize |   Image Write   |\n ---------------------------------------------------------------------\n  3   | Socket Read | Socket Read |              |    File Write   |\n ---------------------------------------------------------------------\n \u003c/pre\u003e The example can be achieved by using the following categories: \n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Categories and lanes\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eLane\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eEvent Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eAnnotation\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e1\u003c/th\u003e \n   \u003cth scope\u003d\"row\"\u003eFile Upload\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e@Category(\"Upload\")\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e2\u003c/th\u003e \n   \u003cth scope\u003d\"row\"\u003eImage Read\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e@Category({\"Upload\", \"Image Upload\"})\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e2\u003c/th\u003e \n   \u003cth scope\u003d\"row\"\u003eImage Resize\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e@Category({\"Upload\", \"Image Upload\"})\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e2\u003c/th\u003e \n   \u003cth scope\u003d\"row\"\u003eImage Write\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e@Category({\"Upload\", \"Image Upload\"})\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e3\u003c/th\u003e \n   \u003cth scope\u003d\"row\"\u003eSocket Read\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e@Category(\"Java Application\")\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e3\u003c/th\u003e \n   \u003cth scope\u003d\"row\"\u003eFile Write\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e@Category(\"Java Application\")\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The File Upload, Image Read, and Socket Read events happen concurrently (in the same thread), but the events are in different categories so they do not overlap in the visualization. \u003c/p\u003e\n\u003cp\u003e The following examples shows how the category is used to determine how events are visualized in a tree: \u003c/p\u003e\n\u003cpre\u003e  |-[Java Application]\n  |  |- Socket Read\n  |  |- File Write\n  |-[Upload]\n     |- File Upload\n     |-[Image Upload]\n        |- Image Read\n        |- Image Resize\n        |- File Write\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}