{
  "packageName": "jdk.jfr",
  "simpleName": "EventType",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.ValueDescriptor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFields",
      "comment": "Returns an immutable list of descriptors that describe the event fields of this event type.",
      "tagMap": {
        "return": [
          "the list of field descriptors, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jfr.ValueDescriptor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getField",
      "comment": "Returns the field with the specified name, or null if it doesn\u0027t exist. It\u0027s possible to index into a nested field by using \".\" (for instance \"thread.group.parent.name\").",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - of the field to get, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a value descriptor that describes the field, or \n\u003ccode\u003enull\u003c/code\u003e if the field with the specified name doesn\u0027t exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns an identifier for the event (for example, \"jdk.CPULoad\"). The identifier is the fully qualified name of the event class, if not set using the Name annotation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Name.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eName\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the name, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLabel",
      "comment": "Returns a human-readable name (for example, \"CPU Load\"). The label of an event class can be set with Label.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Label.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eLabel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the label, or \n\u003ccode\u003enull\u003c/code\u003e if a label is not set"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getId",
      "comment": "Returns a unique ID for this event type in the Java Virtual Machine (JVM).",
      "tagMap": {
        "return": [
          "the ID that is used in the JVM"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.AnnotationElement",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotationElements",
      "comment": "Returns an immutable list of annotation elements for this event type.",
      "tagMap": {
        "return": [
          "an immutable list of annotations or an empty list if no annotations exists, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEnabled",
      "comment": "Returns true if the event is enabled and at least one recording is running, false otherwise. By default, the event is enabled. The event can be enabled or disabled by setting the enabled setting to true or false, programmatically or by using a configuration file. The event can also be disabled by annotating event with the @Enabled(false) annotation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Enabled.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eEnabled\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Recording.html#enable(java.lang.Class)\"\u003e\u003ccode\u003eRecording.enable(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if event is enabled, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDescription",
      "comment": "Returns a short sentence that describes the event class. The description of an event class can be set with Description.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Description.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eDescription\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the description, or \n\u003ccode\u003enull\u003c/code\u003e if no description exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotation",
      "comment": "Returns the first annotation for the specified type if an annotation element with the same name is directly present, otherwise null.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object that corresponds to the annotation type, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if directly present, else \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jfr.EventType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "jdk.jfr.Event",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "eventClass"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getEventType",
      "comment": "Returns the event type for an event class, or null if it doesn\u0027t exist.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeventClass\u003c/code\u003e - the event class, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eeventClass\u003c/code\u003e is an abstract class",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the class is annotated with \n\u003ccode\u003eRegistered(false)\u003c/code\u003e, but not manually registered"
        ],
        "return": [
          "the event class, or null if class doesn\u0027t exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.SettingDescriptor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSettingDescriptors",
      "comment": "Returns an immutable list of the setting descriptors that describe the available event settings for this event type.",
      "tagMap": {
        "return": [
          "the list of setting descriptors for this event type, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCategoryNames",
      "comment": "Returns the list of human-readable names that makes up the categories for this event type (for example, \"Java Application\", \"Statistics\").",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/Category.html\" title\u003d\"annotation in jdk.jfr\"\u003e\u003ccode\u003eCategory\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an immutable list of category names, or a list with the name \n\u003ccode\u003e\"Uncategorized\"\u003c/code\u003e if no category is set"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.jfr.EventType",
  "comment": "Describes an event, its fields, settings and annotations.",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}