{
  "packageName": "jdk.jfr.consumer",
  "simpleName": "EventStream",
  "moduleName": "jdk.jfr",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.AutoCloseable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jfr.consumer.EventStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "openRepository",
      "comment": "Creates a stream from the repository of the current Java Virtual Machine (JVM). By default, the stream starts with the next event flushed by Flight Recorder.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a stream can\u0027t be opened, or an I/O error occurs when trying to access the repository",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller does not have \n\u003ccode\u003eFlightRecorderPermission(\"accessFlightRecorder\")\u003c/code\u003e"
        ],
        "return": [
          "an event stream, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jfr.consumer.EventStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "directory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "openRepository",
      "comment": "Creates an event stream from a disk repository. By default, the stream starts with the next event flushed by Flight Recorder.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edirectory\u003c/code\u003e - location of the disk repository, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a stream can\u0027t be opened, or an I/O error occurs when trying to access the repository",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckRead\u003c/code\u003e method denies read access to the directory, or files in the directory."
        ],
        "return": [
          "an event stream, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jfr.consumer.EventStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "openFile",
      "comment": "Creates an event stream from a file. By default, the stream starts with the first event in the file.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - location of the file, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the file can\u0027t be opened, or an I/O error occurs during reading",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckRead\u003c/code\u003e method denies read access to the file"
        ],
        "return": [
          "an event stream, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.jfr.consumer.MetadataEvent",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onMetadata",
      "comment": "Registers an action to perform when new metadata arrives in the stream. The event type of an event always arrives sometime before the actual event. The action must be registered before the stream is started.",
      "tagMap": {
        "implSpec": [
          "The default implementation of this method is empty."
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - to perform, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an action is added after the stream has started"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.jfr.consumer.RecordedEvent",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onEvent",
      "comment": "Registers an action to perform on all events in the stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - an action to perform on each \n\u003ccode\u003eRecordedEvent\u003c/code\u003e, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "eventName"
          }
        },
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.jfr.consumer.RecordedEvent",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onEvent",
      "comment": "Registers an action to perform on all events matching a name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeventName\u003c/code\u003e - the name of the event, not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eaction\u003c/code\u003e - an action to perform on each \n\u003ccode\u003eRecordedEvent\u003c/code\u003e matching the event name, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onFlush",
      "comment": "Registers an action to perform after the stream has been flushed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - an action to perform after the stream has been flushed, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onError",
      "comment": "Registers an action to perform if an exception occurs. If an action is not registered, an exception stack trace is printed to standard error. Registering an action overrides the default behavior. If multiple actions have been registered, they are performed in the order of registration. If this method itself throws an exception, resulting behavior is undefined.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - an action to perform if an exception occurs, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onClose",
      "comment": "Registers an action to perform when the stream is closed. If the stream is already closed, the action will be performed immediately in the current thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - an action to perform after the stream is closed, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Releases all resources associated with this stream. If a stream is started, asynchronously or synchronously, it is stopped immediately or after the next flush. This method does NOT guarantee that all registered actions are completed before return. Closing a previously closed stream has no effect.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Unregisters an action. If the action has been registered multiple times, all instances are unregistered.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#onEvent(java.util.function.Consumer)\"\u003e\u003ccode\u003eonEvent(Consumer)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#onEvent(java.lang.String,java.util.function.Consumer)\"\u003e\u003ccode\u003eonEvent(String, Consumer)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#onFlush(java.lang.Runnable)\"\u003e\u003ccode\u003eonFlush(Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#onClose(java.lang.Runnable)\"\u003e\u003ccode\u003eonClose(Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#onError(java.util.function.Consumer)\"\u003e\u003ccode\u003eonError(Consumer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to unregister, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the action was unregistered, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "reuse"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setReuse",
      "comment": "Specifies that the event object in an onEvent(Consumer) action can be reused. If reuse is set to true, an action should not keep a reference to the event object after the action has completed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereuse\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if an event object can be reused, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ordered"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setOrdered",
      "comment": "Specifies that events arrives in chronological order, sorted by the time they were committed to the stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eordered\u003c/code\u003e - if event objects arrive in chronological order to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#onEvent(java.util.function.Consumer)\"\u003e\u003ccode\u003eonEvent(Consumer)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "field": {
            "name": "startTime"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setStartTime",
      "comment": "Specifies the start time of the stream. The start time must be set before starting the stream",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#startAsync()\"\u003e\u003ccode\u003estartAsync()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estartTime\u003c/code\u003e - the start time, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the stream is already started"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "field": {
            "name": "endTime"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setEndTime",
      "comment": "Specifies the end time of the stream. The end time must be set before starting the stream. At end time, the stream is closed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#startAsync()\"\u003e\u003ccode\u003estartAsync()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eendTime\u003c/code\u003e - the end time, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the stream is already started"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "start",
      "comment": "Starts processing of actions. Actions are performed in the current thread. To stop the stream, use the close() method.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the stream is already started or closed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startAsync",
      "comment": "Starts asynchronous processing of actions. Actions are performed in a single separate thread. To stop the stream, use the close() method.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the stream is already started or closed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "awaitTermination",
      "comment": "Blocks until all actions are completed, or the stream is closed, or the timeout occurs, or the current thread is interrupted, whichever happens first.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#startAsync()\"\u003e\u003ccode\u003estartAsync()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#interrupt()\"\u003e\u003ccode\u003eThread.interrupt()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if timeout is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "awaitTermination",
      "comment": "Blocks until all actions are completed, or the stream is closed, or the current thread is interrupted, whichever happens first.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/consumer/EventStream.html#startAsync()\"\u003e\u003ccode\u003estartAsync()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#interrupt()\"\u003e\u003ccode\u003eThread.interrupt()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.jfr.consumer.EventStream",
  "comment": "Represents a stream of events. \n\u003cp\u003e A stream is a sequence of events and the way to interact with a stream is to register actions. The \u003ccode\u003eEventStream\u003c/code\u003e interface is not to be implemented and future versions of the JDK may prevent this completely. \u003c/p\u003e\n\u003cp\u003e To receive a notification when an event arrives, register an action using the \u003ca href\u003d\"#onEvent(java.util.function.Consumer)\"\u003e\u003ccode\u003eonEvent(Consumer)\u003c/code\u003e\u003c/a\u003e method. To filter the stream for an event with a specific name, use \u003ca href\u003d\"#onEvent(java.lang.String,java.util.function.Consumer)\"\u003e\u003ccode\u003eonEvent(String, Consumer)\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e By default, the same \u003ccode\u003eRecordedEvent\u003c/code\u003e object can be used to represent two or more distinct events. That object can be delivered multiple times to the same action as well as to other actions. To use an event object after the action is completed, the \u003ca href\u003d\"#setReuse(boolean)\"\u003e\u003ccode\u003esetReuse(boolean)\u003c/code\u003e\u003c/a\u003e method should be set to \u003ccode\u003efalse\u003c/code\u003e so a new object is allocated for each event. \u003c/p\u003e\n\u003cp\u003e Events are delivered in batches. To receive a notification when a batch is complete, register an action using the \u003ca href\u003d\"#onFlush(java.lang.Runnable)\"\u003e\u003ccode\u003eonFlush(Runnable)\u003c/code\u003e\u003c/a\u003e method. This is an opportunity to aggregate or push data to external systems while the Java Virtual Machine (JVM) is preparing the next batch. \u003c/p\u003e\n\u003cp\u003e Events within a batch are sorted chronologically by their end time. Well-ordering of events is only maintained for events available to the JVM at the point of flush, i.e. for the set of events delivered as a unit in a single batch. Events delivered in a batch could therefore be out-of-order compared to events delivered in a previous batch, but never out-of-order with events within the same batch. If ordering is not a concern, sorting can be disabled using the \u003ca href\u003d\"#setOrdered(boolean)\"\u003e\u003ccode\u003esetOrdered(boolean)\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e To dispatch events to registered actions, the stream must be started. To start processing in the current thread, invoke the \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e method. To process actions asynchronously in a separate thread, invoke the \u003ca href\u003d\"#startAsync()\"\u003e\u003ccode\u003estartAsync()\u003c/code\u003e\u003c/a\u003e method. To await completion of the stream, use the awaitTermination \u003ca href\u003d\"#awaitTermination()\"\u003e\u003ccode\u003eawaitTermination()\u003c/code\u003e\u003c/a\u003e or the \u003ca href\u003d\"#awaitTermination(java.time.Duration)\"\u003e\u003ccode\u003eawaitTermination(Duration)\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e When a stream ends it is automatically closed. To manually stop processing of events, close the stream by invoking the \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method. A stream can also be automatically closed in exceptional circumstances, for example if the JVM that is being monitored exits. To receive a notification in any of these occasions, use the \u003ca href\u003d\"#onClose(java.lang.Runnable)\"\u003e\u003ccode\u003eonClose(Runnable)\u003c/code\u003e\u003c/a\u003e method to register an action. \u003c/p\u003e\n\u003cp\u003e If an unexpected exception occurs in an action, it is possible to catch the exception in an error handler. An error handler can be registered using the \u003ca href\u003d\"#onError(java.util.function.Consumer)\"\u003e\u003ccode\u003eonError(Consumer)\u003c/code\u003e\u003c/a\u003e method. If no error handler is registered, the default behavior is to print the exception and its backtrace to the standard error stream. \u003c/p\u003e\n\u003cp\u003e The following example shows how an \u003ccode\u003eEventStream\u003c/code\u003e can be used to listen to events on a JVM running Flight Recorder \u003c/p\u003e\n\u003cpre\u003e try (var es \u003d EventStream.openRepository()) {\n   es.onEvent(\"jdk.CPULoad\", event -\u0026gt; {\n     System.out.println(\"CPU Load \" + event.getEndTime());\n     System.out.println(\" Machine total: \" + 100 * event.getFloat(\"machineTotal\") + \"%\");\n     System.out.println(\" JVM User: \" + 100 * event.getFloat(\"jvmUser\") + \"%\");\n     System.out.println(\" JVM System: \" + 100 * event.getFloat(\"jvmSystem\") + \"%\");\n     System.out.println();\n   });\n   es.onEvent(\"jdk.GarbageCollection\", event -\u0026gt; {\n     System.out.println(\"Garbage collection: \" + event.getLong(\"gcId\"));\n     System.out.println(\" Cause: \" + event.getString(\"cause\"));\n     System.out.println(\" Total pause: \" + event.getDuration(\"sumOfPauses\"));\n     System.out.println(\" Longest pause: \" + event.getDuration(\"longestPause\"));\n     System.out.println();\n   });\n   es.start();\n }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e To start recording together with the stream, see \u003ca href\u003d\"RecordingStream.html\" title\u003d\"class in jdk.jfr.consumer\"\u003e\u003ccode\u003eRecordingStream\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "14"
    ]
  }
}