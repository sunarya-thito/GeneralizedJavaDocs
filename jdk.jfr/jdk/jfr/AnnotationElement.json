{
  "packageName": "jdk.jfr",
  "simpleName": "AnnotationElement",
  "moduleName": "jdk.jfr",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValues",
      "comment": "Returns an immutable list of annotation values in an order that matches the value descriptors for this AnnotationElement.",
      "annotations": [],
      "tagMap": {
        "return": [
          "list of values, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.ValueDescriptor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValueDescriptors",
      "comment": "Returns an immutable list of descriptors that describes the annotation values for this AnnotationElement.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the list of value descriptors for this \n\u003ccode\u003eAnnotation\u003c/code\u003e, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jfr.AnnotationElement",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotationElements",
      "comment": "Returns an immutable list of annotation elements for this AnnotationElement.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a list of meta annotation, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeName",
      "comment": "Returns the fully qualified name of the annotation type that corresponds to this AnnotationElement (for example, \"jdk.jfr.Label\").",
      "annotations": [],
      "tagMap": {
        "return": [
          "type name, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Returns a value for this AnnotationElement.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method in the annotation interface, not \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if a method with the specified name does not exist in the annotation"
        ],
        "return": [
          "the annotation value, not \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasValue",
      "comment": "Returns true if an annotation value with the specified name exists in this AnnotationElement.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - name of the method in the annotation interface to find, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if method exists, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.annotation.Annotation",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "annotationType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAnnotation",
      "comment": "Returns the first annotation for the specified type if an AnnotationElement with the same name exists, else null.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if it exists"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass object\u003c/code\u003e corresponding to the annotation type, not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if it exists, else \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeId",
      "comment": "Returns the type ID for this AnnotationElement. The ID is a unique identifier for the type in the Java Virtual Machine (JVM). The ID might not be the same between JVM instances.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the type ID, not negative"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.annotation.Annotation",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "annotationType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Object",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "values",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an annotation element to use for dynamically defined events. Supported value types are byte, int, short, long, double, float, boolean, char, and String. Enums, arrays and classes, are not supported. If annotationType has annotations (directly present, indirectly present, or associated), then those annotation are recursively included. However, both the annotationType and any annotation found recursively must have the MetadataDefinition annotation. To statically define events, see Event class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - interface extending \n\u003ccode\u003ejava.lang.annotation.Annotation\u003c/code\u003e, not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003evalues\u003c/code\u003e - a \n\u003ccode\u003eMap\u003c/code\u003e with keys that match method names of the specified annotation interface"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if value/key is \n\u003ccode\u003enull\u003c/code\u003e, an unsupported value type is used, or a value/key is used that doesn\u0027t match the signatures in the \n\u003ccode\u003eannotationType\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.annotation.Annotation",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "annotationType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an annotation element to use for dynamically defined events. Supported value types are byte, int, short, long, double, float, boolean, char, and String. Enums, arrays, and classes are not supported. If annotationType has annotations (directly present, indirectly present, or associated), then those annotations are recursively included. However, both annotationType and any annotation found recursively must have the MetadataDefinition annotation. To statically define events, see Event class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - interface extending \n\u003ccode\u003ejava.lang.annotation.Annotation,\u003c/code\u003e not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003evalue\u003c/code\u003e - the value that matches the \n\u003ccode\u003evalue\u003c/code\u003e method of the specified \n\u003ccode\u003eannotationType\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if value/key is \n\u003ccode\u003enull\u003c/code\u003e, an unsupported value type is used, or a value/key is used that doesn\u0027t match the signatures in the \n\u003ccode\u003eannotationType\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.annotation.Annotation",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "annotationType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an annotation element to use for dynamically defined events. Supported value types are byte, short, int, long, double, float, boolean, char, and String. Enums, arrays, and classes are not supported. If annotationType has annotations (directly present, indirectly present or associated), then those annotation are recursively included. However, both annotationType and any annotation found recursively must have the MetadataDefinition annotation. To statically define events, see Event class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - interface extending java.lang.annotation.Annotation, not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.jfr.AnnotationElement",
  "comment": "Describes event metadata, such as labels, descriptions and units. \n\u003cp\u003e The following example shows how \u003ccode\u003eAnnotationElement\u003c/code\u003e can be used to dynamically define events. \u003c/p\u003e\n\u003cpre\u003e   List\u0026lt;AnnotationElement\u0026gt; typeAnnotations \u003d new ArrayList\u0026lt;\u0026gt;();\n   typeAnnotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\"));\n   typeAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n   typeAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n\n   List\u0026lt;AnnotationElement\u0026gt; fieldAnnotations \u003d new ArrayList\u0026lt;\u0026gt;();\n   fieldAnnotations.add(new AnnotationElement(Label.class, \"Message\"));\n\n   List\u0026lt;ValueDescriptor\u0026gt; fields \u003d new ArrayList\u0026lt;\u0026gt;();\n   fields.add(new ValueDescriptor(String.class, \"message\", fieldAnnotations));\n\n   EventFactory f \u003d EventFactory.create(typeAnnotations, fields);\n   Event event \u003d f.newEvent();\n   event.commit();\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}