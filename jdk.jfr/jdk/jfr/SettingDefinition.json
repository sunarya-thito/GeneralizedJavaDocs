{
  "packageName": "jdk.jfr",
  "simpleName": "SettingDefinition",
  "moduleName": "jdk.jfr",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jfr.SettingDefinition",
  "comment": "Annotation that specifies that a method in an event class should be used to filter out events. \n\u003cp\u003e For the method to be valid it must return a \u003ccode\u003eSettingControl\u003c/code\u003e and only have one parameter, which should be a non-abstract subclass of \u003ca href\u003d\"SettingControl.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eSettingControl\u003c/code\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e The return value of the method specifies whether the event is to be written to the Flight Recorder system or not. \u003c/p\u003e\n\u003cp\u003e The following example shows how to annotate a method in an event class. \u003c/p\u003e\n\u003cpre\u003e class HelloWorld extends Event {\n\n   @Label(\"Message\")\n   String message;\n\n   @SettingDefinition\n   @Label(\"Message Filter\")\n   public boolean filter(RegExpControl regExp) {\n     return regExp.matches(message);\n   }\n }\n \u003c/pre\u003e For an example of how the setting controls are defined, see \n\u003ca href\u003d\"SettingControl.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eSettingControl\u003c/code\u003e\u003c/a\u003e.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jfr/jdk/jfr/SettingControl.html\" title\u003d\"class in jdk.jfr\"\u003e\u003ccode\u003eSettingControl\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "9"
    ]
  }
}