{
  "packageName": "jdk.jfr",
  "simpleName": "Name",
  "moduleName": "jdk.jfr",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jfr.Name",
  "comment": "Annotation that sets the default name for an element. \n\u003cp\u003e The name must be a valid identifier as specified in the Java language (for example, \u003ccode\u003e\"com.example.Transaction\"\u003c/code\u003e for an event class or \u003ccode\u003e\"message\"\u003c/code\u003e for an event field). \u003c/p\u003e\n\u003cp\u003e A stable and easy-to-use event name is of the form: \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003e[org|com|net].[organization|product].EventName\u003c/code\u003e \u003c/p\u003e\n\u003cp\u003e Events without a \u003ccode\u003e@Name\u003c/code\u003e annotation get their name from the fully qualified class name, which works well for experimentation but should be avoided in production. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe name should be stable to avoid breaking setting files and code that consumes or configures the event.\u003c/li\u003e \n \u003cli\u003eThe name should not contain redundant or unnecessary information such as \u003ccode\u003e\"jfr\"\u003c/code\u003e, \u003ccode\u003e\"internal\"\u003c/code\u003e, \u003ccode\u003e\"events\"\u003c/code\u003e, or \u003ccode\u003e\"Event\"\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003eThe name should be short, but not so short that it clashes with other organizations or products.\u003c/li\u003e \n \u003cli\u003eThe name should be easy to understand and remember for users that want to configure the event. This is especially true if the event is part of a framework or library that is meant to be used by others. It is usually enough to put all the events for a library or product in the same namespace. For example, all the events for OpenJDK are in the \u003ccode\u003e\"jdk\"\u003c/code\u003e namespace, with no sub-namespaces for \u003ccode\u003e\"hotspot\"\u003c/code\u003e, \u003ccode\u003e\"gc\"\u003c/code\u003e, or \u003ccode\u003e\"compiler\"\u003c/code\u003e. This avoids unnecessary cognitive load for users. Events can instead be arranged into categories, by using the \u003ccode\u003e@Category\u003c/code\u003e annotation. Categories can be renamed freely without causing disruption to dependencies\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}