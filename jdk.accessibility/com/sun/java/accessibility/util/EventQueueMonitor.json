{
  "packageName": "com.sun.java.accessibility.util",
  "simpleName": "EventQueueMonitor",
  "moduleName": "jdk.accessibility",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "maybeInitialize",
      "comment": "Tell the EventQueueMonitor to start listening for events.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "eventDispatched",
      "comment": "Handle events as a result of registering a listener on the EventQueue in maybeInitialize().",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html#eventDispatched(java.awt.AWTEvent)\"\u003eeventDispatched\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html\" title\u003d\"interface in java.awt.event\"\u003eAWTEventListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etheEvent\u003c/code\u003e - the event to be processed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.Accessible",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAccessibleAt",
      "comment": "Obtain the Accessible object at the given point on the Screen. The return value may be null if an Accessible object cannot be found at the particular point.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the point to be accessed"
        ],
        "return": [
          "the \n\u003ccode\u003eAccessible\u003c/code\u003e at the specified point"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isGUIInitialized",
      "comment": "Says whether the GUI subsystem has been initialized or not. If this returns true, the assistive technology can freely create GUI component instances. If the return value is false, the assistive technology should register a GUIInitializedListener and wait to create GUI component instances until the listener is called.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html#addGUIInitializedListener(com.sun.java.accessibility.util.GUIInitializedListener)\"\u003e\u003ccode\u003eaddGUIInitializedListener(com.sun.java.accessibility.util.GUIInitializedListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the GUI subsystem has been initialized"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addGUIInitializedListener",
      "comment": "Adds the specified listener to be notified when the GUI subsystem is initialized. Assistive technologies should get the results of isGUIInitialized() before calling this method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html#isGUIInitialized()\"\u003e\u003ccode\u003eisGUIInitialized()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html#removeTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)\"\u003e\u003ccode\u003eremoveTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "removeGUIInitializedListener",
      "comment": "Removes the specified listener to be notified when the GUI subsystem is initialized.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html#addGUIInitializedListener(com.sun.java.accessibility.util.GUIInitializedListener)\"\u003e\u003ccode\u003eaddGUIInitializedListener(com.sun.java.accessibility.util.GUIInitializedListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addTopLevelWindowListener",
      "comment": "Adds the specified listener to be notified when a top level window is created or destroyed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html#removeTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)\"\u003e\u003ccode\u003eremoveTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "removeTopLevelWindowListener",
      "comment": "Removes the specified listener to be notified when a top level window is created or destroyed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/EventQueueMonitor.html#addTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)\"\u003e\u003ccode\u003eaddTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCurrentMousePosition",
      "comment": "Return the last recorded position of the mouse in screen coordinates.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the last recorded position of the mouse in screen coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getTopLevelWindows",
      "comment": "Return the list of top level Windows in use in the Java Virtual Machine.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of top level \n\u003ccode\u003eWindow\u003c/code\u003es in use in the Java Virtual Machine"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getTopLevelWindowWithFocus",
      "comment": "Return the top level Window that currently has keyboard focus.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the top level \n\u003ccode\u003eWindow\u003c/code\u003e that currently has keyboard focus"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new EventQueueMonitor instance. Normally, this will be called only by the AWT Toolkit during initialization time. Assistive technologies should not create instances of EventQueueMonitor by themselves. Instead, they should either refer to it directly via the static methods in this class, e.g., getCurrentMousePosition() or obtain the instance by asking the Toolkit, e.g., Toolkit.getSystemEventQueue().",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.sun.java.accessibility.util.EventQueueMonitor",
  "comment": "The \n\u003ccode\u003eEventQueueMonitor\u003c/code\u003e class provides key core functionality for Assistive Technologies (and other system-level technologies that need some of the same things that Assistive Technology needs).",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/AWTEventMonitor.html\" title\u003d\"class in com.sun.java.accessibility.util\"\u003e\u003ccode\u003eAWTEventMonitor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.accessibility/com/sun/java/accessibility/util/SwingEventMonitor.html\" title\u003d\"class in com.sun.java.accessibility.util\"\u003e\u003ccode\u003eSwingEventMonitor\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}