{
  "packageName": "com.sun.source.tree",
  "simpleName": "LambdaExpressionTree",
  "moduleName": "jdk.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "com.sun.source.tree.ExpressionTree",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "com.sun.source.tree.VariableTree",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParameters",
      "comment": "Returns the parameters of this lambda expression.",
      "tagMap": {
        "return": [
          "the parameters"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.Tree",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBody",
      "comment": "Returns the body of the lambda expression.",
      "tagMap": {
        "return": [
          "the body"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.LambdaExpressionTree$BodyKind",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBodyKind",
      "comment": "Returns the kind of the body of the lambda expression.",
      "tagMap": {
        "return": [
          "the kind of the body"
        ]
      }
    }
  ],
  "innerClasses": [
    "com.sun.source.tree.LambdaExpressionTree$BodyKind"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.source.tree.LambdaExpressionTree",
  "comment": "A tree node for a lambda expression. For example: \n\u003cpre\u003e\u003ccode\u003e\n   ()-\u0026gt;{}\n   (List\u0026lt;String\u0026gt; ls)-\u0026gt;ls.size()\n   (x,y)-\u0026gt; { return x + y; }\n \u003c/code\u003e\u003c/pre\u003e",
  "tagMap": {}
}