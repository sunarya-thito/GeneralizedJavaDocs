{
  "packageName": "com.sun.source.util",
  "simpleName": "JavacTask",
  "moduleName": "jdk.compiler",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.source.util.JavacTask",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.annotation.processing.ProcessingEnvironment",
            "type": "Class"
          },
          "name": "processingEnvironment",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instance",
      "comment": "Returns the JavacTask for a ProcessingEnvironment. If the compiler is being invoked using a CompilationTask, then that task will be returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprocessingEnvironment\u003c/code\u003e - the processing environment"
        ],
        "return": [
          "the \n\u003ccode\u003eJavacTask\u003c/code\u003e for a \n\u003ccode\u003eProcessingEnvironment\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "com.sun.source.tree.CompilationUnitTree",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "parse",
      "comment": "Parses the specified files returning a list of abstract syntax trees.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an unhandled I/O error occurred in the compiler.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the operation cannot be performed at this time."
        ],
        "return": [
          "a list of abstract syntax trees"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "analyze",
      "comment": "Completes all analysis.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an unhandled I/O error occurred in the compiler.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the operation cannot be performed at this time."
        ],
        "return": [
          "a list of elements that were analyzed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.tools.JavaFileObject",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "generate",
      "comment": "Generates code.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an unhandled I/O error occurred in the compiler.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the operation cannot be performed at this time."
        ],
        "return": [
          "a list of files that were generated"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "com.sun.source.util.TaskListener",
            "type": "Class"
          },
          "name": "taskListener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setTaskListener",
      "comment": "Sets a specified listener to receive notification of events describing the progress of this compilation task. If another listener is receiving notifications as a result of a prior call of this method, then that listener will no longer receive notifications. Informally, this method is equivalent to calling removeTaskListener for any listener that has been previously set, followed by addTaskListener for the new listener.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etaskListener\u003c/code\u003e - the task listener"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the specified listener has already been added."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "com.sun.source.util.TaskListener",
            "type": "Class"
          },
          "name": "taskListener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "addTaskListener",
      "comment": "Adds a specified listener so that it receives notification of events describing the progress of this compilation task. This method may be called at any time before or during the compilation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etaskListener\u003c/code\u003e - the task listener"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the specified listener has already been added."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "com.sun.source.util.TaskListener",
            "type": "Class"
          },
          "name": "taskListener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "removeTaskListener",
      "comment": "Removes the specified listener so that it no longer receives notification of events describing the progress of this compilation task. This method may be called at any time before or during the compilation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etaskListener\u003c/code\u003e - the task listener"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "com.sun.source.util.ParameterNameProvider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParameterNameProvider",
      "comment": "Sets the specified ParameterNameProvider. It may be used when VariableElement.getSimpleName() is called for a method parameter for which an authoritative name is not found. The given ParameterNameProvider may infer a user-friendly name for the method parameter. Setting a new ParameterNameProvider will clear any previously set ParameterNameProvider, which won\u0027t be queried any more. When no ParameterNameProvider is set, or when it returns null from ParameterNameProvider.getParameterName(javax.lang.model.element.VariableElement), an automatically synthesized name is returned from VariableElement.getSimpleName().",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation of this method does nothing."
        ],
        "param": [
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.type.TypeMirror",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "com.sun.source.tree.Tree",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTypeMirror",
      "comment": "Returns a type mirror of the tree node determined by the specified path. This method has been superseded by methods on Trees.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/Trees.html#getTypeMirror(com.sun.source.util.TreePath)\"\u003e\u003ccode\u003eTrees.getTypeMirror(com.sun.source.util.TreePath)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path"
        ],
        "return": [
          "the type mirror"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.util.Elements",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getElements",
      "comment": "Returns a utility object for dealing with program elements.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a utility object for dealing with program elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.util.Types",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTypes",
      "comment": "Returns a utility object for dealing with type mirrors.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the utility object for dealing with type mirrors"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.source.util.JavacTask",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}