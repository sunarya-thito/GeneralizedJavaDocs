{
  "packageName": "com.sun.source.util",
  "simpleName": "Trees",
  "moduleName": "jdk.compiler",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.source.util.Trees",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaCompiler$CompilationTask",
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instance",
      "comment": "Returns a Trees object for a given CompilationTask.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the compilation task for which to get the Trees object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the task does not support the Trees API."
        ],
        "return": [
          "the Trees object"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.Trees",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.annotation.processing.ProcessingEnvironment",
            "type": "Class"
          },
          "field": {
            "name": "env"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instance",
      "comment": "Returns a Trees object for a given ProcessingEnvironment.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eenv\u003c/code\u003e - the processing environment for which to get the Trees object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the env does not support the Trees API."
        ],
        "return": [
          "the Trees object"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.SourcePositions",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSourcePositions",
      "comment": "Returns a utility object for obtaining source positions.",
      "tagMap": {
        "return": [
          "the utility object for obtaining source positions"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.Tree",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "element"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTree",
      "comment": "Returns the Tree node for a given Element. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelement\u003c/code\u003e - the element"
        ],
        "return": [
          "the tree node"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.ClassTree",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.TypeElement",
            "type": "Class"
          },
          "field": {
            "name": "element"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTree",
      "comment": "Returns the ClassTree node for a given TypeElement. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelement\u003c/code\u003e - the element"
        ],
        "return": [
          "the class tree node"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.MethodTree",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ExecutableElement",
            "type": "Class"
          },
          "field": {
            "name": "method"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTree",
      "comment": "Returns the MethodTree node for a given ExecutableElement. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emethod\u003c/code\u003e - the executable element"
        ],
        "return": [
          "the method tree node"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.Tree",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationMirror",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTree",
      "comment": "Returns the Tree node for an AnnotationMirror on a given Element. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element",
          "\u003ccode\u003ea\u003c/code\u003e - the annotation mirror"
        ],
        "return": [
          "the tree node"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.Tree",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationMirror",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationValue",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTree",
      "comment": "Returns the Tree node for an AnnotationValue for an AnnotationMirror on a given Element. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element",
          "\u003ccode\u003ea\u003c/code\u003e - the annotation mirror",
          "\u003ccode\u003ev\u003c/code\u003e - the annotation value"
        ],
        "return": [
          "the tree node"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.tree.CompilationUnitTree",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        },
        {
          "type": {
            "name": "com.sun.source.tree.Tree",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPath",
      "comment": "Returns the path to tree node within the specified compilation unit.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the compilation unit",
          "\u003ccode\u003enode\u003c/code\u003e - the tree node"
        ],
        "return": [
          "the tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPath",
      "comment": "Returns the TreePath node for a given Element. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element"
        ],
        "return": [
          "the tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationMirror",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPath",
      "comment": "Returns the TreePath node for an AnnotationMirror on a given Element. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element",
          "\u003ccode\u003ea\u003c/code\u003e - the annotation mirror"
        ],
        "return": [
          "the tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationMirror",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationValue",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPath",
      "comment": "Returns the TreePath node for an AnnotationValue for an AnnotationMirror on a given Element. Returns null if the node can not be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element",
          "\u003ccode\u003ea\u003c/code\u003e - the annotation mirror",
          "\u003ccode\u003ev\u003c/code\u003e - the annotation value"
        ],
        "return": [
          "the tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.element.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.util.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getElement",
      "comment": "Returns the Element for the Tree node identified by a given TreePath. Returns null if the element is not available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the tree path"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - is the TreePath does not identify a Tree node that might have an associated Element."
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.type.TypeMirror",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.util.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTypeMirror",
      "comment": "Returns the TypeMirror for the Tree node identified by a given TreePath. Returns null if the TypeMirror is not available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the tree path"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - is the TreePath does not identify a Tree node that might have an associated TypeMirror."
        ],
        "return": [
          "the type mirror"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.tree.Scope",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.util.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getScope",
      "comment": "Returns the Scope for the Tree node identified by a given TreePath. Returns null if the Scope is not available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the tree path"
        ],
        "return": [
          "the scope"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.util.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDocComment",
      "comment": "Returns the doc comment, if any, for the Tree node identified by a given TreePath. Returns null if no doc comment was found.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/DocTrees.html#getDocCommentTree(com.sun.source.util.TreePath)\"\u003e\u003ccode\u003eDocTrees.getDocCommentTree(TreePath)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the tree path"
        ],
        "return": [
          "the doc comment"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.tree.Scope",
            "type": "Class"
          },
          "field": {
            "name": "scope"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.TypeElement",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isAccessible",
      "comment": "Checks whether a given type is accessible in a given scope.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be checked",
          "\u003ccode\u003etype\u003c/code\u003e - the type to be checked"
        ],
        "return": [
          "true if \n\u003ccode\u003etype\u003c/code\u003e is accessible"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.tree.Scope",
            "type": "Class"
          },
          "field": {
            "name": "scope"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.element.Element",
            "type": "Class"
          },
          "field": {
            "name": "member"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.type.DeclaredType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isAccessible",
      "comment": "Checks whether the given element is accessible as a member of the given type in a given scope.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be checked",
          "\u003ccode\u003emember\u003c/code\u003e - the member to be checked",
          "\u003ccode\u003etype\u003c/code\u003e - the type for which to check if the member is accessible"
        ],
        "return": [
          "true if \n\u003ccode\u003emember\u003c/code\u003e is accessible in \n\u003ccode\u003etype\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.type.TypeMirror",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.ErrorType",
            "type": "Class"
          },
          "field": {
            "name": "errorType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getOriginalType",
      "comment": "Returns the original type from the ErrorType object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eerrorType\u003c/code\u003e - the errorType for which we want to get the original type"
        ],
        "return": [
          "the type mirror corresponding to the original type, replaced by the ErrorType"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.tools.Diagnostic$Kind",
            "type": "Class"
          },
          "field": {
            "name": "kind"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "msg"
          }
        },
        {
          "type": {
            "name": "com.sun.source.tree.Tree",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "name": "com.sun.source.tree.CompilationUnitTree",
            "type": "Class"
          },
          "field": {
            "name": "root"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "printMessage",
      "comment": "Prints a message of the specified kind at the location of the tree within the provided compilation unit",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekind\u003c/code\u003e - the kind of message",
          "\u003ccode\u003emsg\u003c/code\u003e - the message, or an empty string if none",
          "\u003ccode\u003et\u003c/code\u003e - the tree to use as a position hint",
          "\u003ccode\u003eroot\u003c/code\u003e - the compilation unit that contains tree"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.type.TypeMirror",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.tree.CatchTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLub",
      "comment": "Returns the lub of an exception parameter declared in a catch clause.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the tree for the catch clause"
        ],
        "return": [
          "the lub of the exception parameter"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.source.util.Trees",
  "comment": "Bridges JSR 199, JSR 269, and the Tree API.",
  "tagMap": {}
}