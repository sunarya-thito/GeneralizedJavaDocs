{
  "packageName": "com.sun.source.util",
  "simpleName": "TreePathScanner",
  "moduleName": "jdk.compiler",
  "type": "CLASS",
  "superClass": {
    "name": "com.sun.source.util.TreeScanner",
    "parameters": [
      {
        "name": "R",
        "type": "Class"
      },
      {
        "name": "P",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "com.sun.source.util.TreePathScanner",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.util.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "owner": "com.sun.source.util.TreePathScanner",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scan",
      "comment": "Scans a tree from a position identified by a TreePath.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path identifying the node to be scanned",
          "\u003ccode\u003ep\u003c/code\u003e - a parameter value passed to visit methods"
        ],
        "return": [
          "the result value from the visit method"
        ]
      }
    },
    {
      "returnType": {
        "owner": "com.sun.source.util.TreePathScanner",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.source.tree.Tree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        },
        {
          "type": {
            "owner": "com.sun.source.util.TreePathScanner",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scan",
      "comment": "Scans a single node. The current path is updated for the duration of the scan.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/TreeScanner.html#scan(com.sun.source.tree.Tree,P)\"\u003escan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/TreeScanner.html\" title\u003d\"class in com.sun.source.util\"\u003eTreeScanner\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/TreePathScanner.html\" title\u003d\"type parameter in TreePathScanner\"\u003eR\u003c/a\u003e,â€‹\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/TreePathScanner.html\" title\u003d\"type parameter in TreePathScanner\"\u003eP\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "apiNote": [
          "This method should normally only be called by the scanner\u0027s \n\u003ccode\u003evisit\u003c/code\u003e methods, as part of an ongoing scan initiated by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/util/TreePathScanner.html#scan(com.sun.source.util.TreePath,P)\"\u003e\u003ccode\u003escan(TreePath, P)\u003c/code\u003e\u003c/a\u003e. The one exception is that it may also be called to initiate a full scan of a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.compiler/com/sun/source/tree/CompilationUnitTree.html\" title\u003d\"interface in com.sun.source.tree\"\u003e\u003ccode\u003eCompilationUnitTree\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the node to be scanned",
          "\u003ccode\u003ep\u003c/code\u003e - a parameter value passed to the visit method"
        ],
        "return": [
          "the result value from the visit method"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.source.util.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrentPath",
      "comment": "Returns the current path for the node, as built up by the currently active set of scan calls.",
      "tagMap": {
        "return": [
          "the current path"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a TreePathScanner.",
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    },
    {
      "name": "P",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.sun.source.util.TreePathScanner",
  "comment": "A TreeVisitor that visits all the child tree nodes, and provides support for maintaining a path for the parent nodes. To visit nodes of a particular type, just override the corresponding visitorXYZ method. Inside your method, call super.visitXYZ to visit descendant nodes.",
  "tagMap": {
    "apiNote": [
      "In order to initialize the \"current path\", the scan must be started by calling one of the \n\u003ccode\u003escan\u003c/code\u003e methods."
    ],
    "since": [
      "1.6"
    ]
  }
}