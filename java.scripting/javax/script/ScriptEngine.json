{
  "packageName": "javax.script",
  "simpleName": "ScriptEngine",
  "moduleName": "java.scripting",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ARGV",
      "comment": "Reserved key for a named value that passes an array of positional arguments to a script.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.ARGV\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "FILENAME",
      "comment": "Reserved key for a named value that is the name of the file being executed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.FILENAME\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENGINE",
      "comment": "Reserved key for a named value that is the name of the ScriptEngine implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.ENGINE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENGINE_VERSION",
      "comment": "Reserved key for a named value that identifies the version of the ScriptEngine implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.ENGINE_VERSION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "NAME",
      "comment": "Reserved key for a named value that identifies the short name of the scripting language. The name is used by the ScriptEngineManager to locate a ScriptEngine with a given name in the getEngineByName method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.NAME\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LANGUAGE",
      "comment": "Reserved key for a named value that is the full name of Scripting Language supported by the implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.LANGUAGE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LANGUAGE_VERSION",
      "comment": "Reserved key for the named value that identifies the version of the scripting language supported by the implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.script.ScriptEngine.LANGUAGE_VERSION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.script.ScriptException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "script"
          }
        },
        {
          "type": {
            "name": "javax.script.ScriptContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eval",
      "comment": "Causes the immediate execution of the script whose source is the String passed as the first argument. The script may be reparsed or recompiled before execution. State left in the engine from previous executions, including variable values and compiled procedures may be visible during this execution.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escript\u003c/code\u003e - The script to be executed by the script engine.",
          "\u003ccode\u003econtext\u003c/code\u003e - A \n\u003ccode\u003eScriptContext\u003c/code\u003e exposing sets of attributes in different scopes. The meanings of the scopes \n\u003ccode\u003eScriptContext.GLOBAL_SCOPE\u003c/code\u003e, and \n\u003ccode\u003eScriptContext.ENGINE_SCOPE\u003c/code\u003e are defined in the specification. \n\u003cbr\u003e\n\u003cbr\u003e The \n\u003ccode\u003eENGINE_SCOPE\u003c/code\u003e \n\u003ccode\u003eBindings\u003c/code\u003e of the \n\u003ccode\u003eScriptContext\u003c/code\u003e contains the bindings of scripting variables to application objects to be used during this script execution."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.scripting/javax/script/ScriptException.html\" title\u003d\"class in javax.script\"\u003eScriptException\u003c/a\u003e\u003c/code\u003e - if an error occurs in script. ScriptEngines should create and throw \n\u003ccode\u003eScriptException\u003c/code\u003e wrappers for checked Exceptions thrown by underlying scripting implementations.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either argument is null."
        ],
        "return": [
          "The value returned from the execution of the script."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.script.ScriptException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "javax.script.ScriptContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eval",
      "comment": "Same as eval(String, ScriptContext) where the source of the script is read from a Reader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - The source of the script to be executed by the script engine.",
          "\u003ccode\u003econtext\u003c/code\u003e - The \n\u003ccode\u003eScriptContext\u003c/code\u003e passed to the script engine."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.scripting/javax/script/ScriptException.html\" title\u003d\"class in javax.script\"\u003eScriptException\u003c/a\u003e\u003c/code\u003e - if an error occurs in script. ScriptEngines should create and throw \n\u003ccode\u003eScriptException\u003c/code\u003e wrappers for checked Exceptions thrown by underlying scripting implementations.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either argument is null."
        ],
        "return": [
          "The value returned from the execution of the script."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.script.ScriptException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "script"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eval",
      "comment": "Executes the specified script. The default ScriptContext for the ScriptEngine is used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escript\u003c/code\u003e - The script language source to be executed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.scripting/javax/script/ScriptException.html\" title\u003d\"class in javax.script\"\u003eScriptException\u003c/a\u003e\u003c/code\u003e - if an error occurs in script. ScriptEngines should create and throw \n\u003ccode\u003eScriptException\u003c/code\u003e wrappers for checked Exceptions thrown by underlying scripting implementations.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "The value returned from the execution of the script."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.script.ScriptException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eval",
      "comment": "Same as eval(String) except that the source of the script is provided as a Reader",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - The source of the script."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.scripting/javax/script/ScriptException.html\" title\u003d\"class in javax.script\"\u003eScriptException\u003c/a\u003e\u003c/code\u003e - if an error occurs in script. ScriptEngines should create and throw \n\u003ccode\u003eScriptException\u003c/code\u003e wrappers for checked Exceptions thrown by underlying scripting implementations.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "The value returned by the script."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.script.ScriptException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "script"
          }
        },
        {
          "type": {
            "name": "javax.script.Bindings",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eval",
      "comment": "Executes the script using the Bindings argument as the ENGINE_SCOPE Bindings of the ScriptEngine during the script execution. The Reader, Writer and non-ENGINE_SCOPE Bindings of the default ScriptContext are used. The ENGINE_SCOPE Bindings of the ScriptEngine is not changed, and its mappings are unaltered by the script execution.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escript\u003c/code\u003e - The source for the script.",
          "\u003ccode\u003en\u003c/code\u003e - The \n\u003ccode\u003eBindings\u003c/code\u003e of attributes to be used for script execution."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.scripting/javax/script/ScriptException.html\" title\u003d\"class in javax.script\"\u003eScriptException\u003c/a\u003e\u003c/code\u003e - if an error occurs in script. ScriptEngines should create and throw \n\u003ccode\u003eScriptException\u003c/code\u003e wrappers for checked Exceptions thrown by underlying scripting implementations.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either argument is null."
        ],
        "return": [
          "The value returned by the script."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.script.ScriptException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "javax.script.Bindings",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eval",
      "comment": "Same as eval(String, Bindings) except that the source of the script is provided as a Reader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - The source of the script.",
          "\u003ccode\u003en\u003c/code\u003e - The \n\u003ccode\u003eBindings\u003c/code\u003e of attributes."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.scripting/javax/script/ScriptException.html\" title\u003d\"class in javax.script\"\u003eScriptException\u003c/a\u003e\u003c/code\u003e - if an error occurs in script. ScriptEngines should create and throw \n\u003ccode\u003eScriptException\u003c/code\u003e wrappers for checked Exceptions thrown by underlying scripting implementations.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either argument is null."
        ],
        "return": [
          "The value returned by the script."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "put",
      "comment": "Sets a key/value pair in the state of the ScriptEngine that may either create a Java Language Binding to be used in the execution of scripts or be used in some other way, depending on whether the key is reserved. Must have the same effect as getBindings(ScriptContext.ENGINE_SCOPE).put.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - The name of named value to add",
          "\u003ccode\u003evalue\u003c/code\u003e - The value of named value to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if key is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key is empty."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Retrieves a value set in the state of this engine. The value might be one which was set using setValue or some other value in the state of the ScriptEngine, depending on the implementation. Must have the same effect as getBindings(ScriptContext.ENGINE_SCOPE).get",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - The key whose value is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if key is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key is empty."
        ],
        "return": [
          "the value for the given key"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.script.Bindings",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scope"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBindings",
      "comment": "Returns a scope of named values. The possible scopes are: ScriptContext.GLOBAL_SCOPE - The set of named values representing global scope. If this ScriptEngine is created by a ScriptEngineManager, then the manager sets global scope bindings. This may be null if no global scope is associated with this ScriptEngine ScriptContext.ENGINE_SCOPE - The set of named values representing the state of this ScriptEngine. The values are generally visible in scripts using the associated keys as variable names. Any other value of scope defined in the default ScriptContext of the ScriptEngine. The Bindings instances that are returned must be identical to those returned by the getBindings method of ScriptContext called with corresponding arguments on the default ScriptContext of the ScriptEngine.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escope\u003c/code\u003e - Either \n\u003ccode\u003eScriptContext.ENGINE_SCOPE\u003c/code\u003e or \n\u003ccode\u003eScriptContext.GLOBAL_SCOPE\u003c/code\u003e which specifies the \n\u003ccode\u003eBindings\u003c/code\u003e to return. Implementations of \n\u003ccode\u003eScriptContext\u003c/code\u003e may define additional scopes. If the default \n\u003ccode\u003eScriptContext\u003c/code\u003e of the \n\u003ccode\u003eScriptEngine\u003c/code\u003e defines additional scopes, any of them can be passed to get the corresponding \n\u003ccode\u003eBindings\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if specified scope is invalid"
        ],
        "return": [
          "The \n\u003ccode\u003eBindings\u003c/code\u003e with the specified scope."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.script.Bindings",
            "type": "Class"
          },
          "field": {
            "name": "bindings"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scope"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBindings",
      "comment": "Sets a scope of named values to be used by scripts. The possible scopes are: ScriptContext.ENGINE_SCOPE - The specified Bindings replaces the engine scope of the ScriptEngine. ScriptContext.GLOBAL_SCOPE - The specified Bindings must be visible as the GLOBAL_SCOPE. Any other value of scope defined in the default ScriptContext of the ScriptEngine. The method must have the same effect as calling the setBindings method of ScriptContext with the corresponding value of scope on the default ScriptContext of the ScriptEngine.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebindings\u003c/code\u003e - The \n\u003ccode\u003eBindings\u003c/code\u003e for the specified scope.",
          "\u003ccode\u003escope\u003c/code\u003e - The specified scope. Either \n\u003ccode\u003eScriptContext.ENGINE_SCOPE\u003c/code\u003e, \n\u003ccode\u003eScriptContext.GLOBAL_SCOPE\u003c/code\u003e, or any other valid value of scope."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the scope is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the bindings is null and the scope is \n\u003ccode\u003eScriptContext.ENGINE_SCOPE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.script.Bindings",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBindings",
      "comment": "Returns an uninitialized Bindings.",
      "tagMap": {
        "return": [
          "A \n\u003ccode\u003eBindings\u003c/code\u003e that can be used to replace the state of this \n\u003ccode\u003eScriptEngine\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.script.ScriptContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getContext",
      "comment": "Returns the default ScriptContext of the ScriptEngine whose Bindings, Reader and Writers are used for script executions when no ScriptContext is specified.",
      "tagMap": {
        "return": [
          "The default \n\u003ccode\u003eScriptContext\u003c/code\u003e of the \n\u003ccode\u003eScriptEngine\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.script.ScriptContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setContext",
      "comment": "Sets the default ScriptContext of the ScriptEngine whose Bindings, Reader and Writers are used for script executions when no ScriptContext is specified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - A \n\u003ccode\u003eScriptContext\u003c/code\u003e that will replace the default \n\u003ccode\u003eScriptContext\u003c/code\u003e in the \n\u003ccode\u003eScriptEngine\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if context is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.script.ScriptEngineFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFactory",
      "comment": "Returns a ScriptEngineFactory for the class to which this ScriptEngine belongs.",
      "tagMap": {
        "return": [
          "The \n\u003ccode\u003eScriptEngineFactory\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.script.ScriptEngine",
  "comment": "\u003ccode\u003eScriptEngine\u003c/code\u003e is the fundamental interface whose methods must be fully functional in every implementation of this specification. \n\u003cbr\u003e\n\u003cbr\u003e These methods provide basic scripting functionality. Applications written to this simple interface are expected to work with minimal modifications in every implementation. It includes methods that execute scripts, and ones that set and get values. \n\u003cbr\u003e\n\u003cbr\u003e The values are key/value pairs of two types. The first type of pairs consists of those whose keys are reserved and defined in this specification or by individual implementations. The values in the pairs with reserved keys have specified meanings. \n\u003cbr\u003e\n\u003cbr\u003e The other type of pairs consists of those that create Java language Bindings, the values are usually represented in scripts by the corresponding keys or by decorated forms of them.",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}