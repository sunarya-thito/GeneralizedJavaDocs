{
  "packageName": "jdk.dynalink",
  "simpleName": "DynamicLinker",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "callSite",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "jdk.dynalink.RelinkableCallSite",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "link",
      "comment": "Links an invokedynamic call site. It will install a method handle into the call site that invokes the relinking mechanism of this linker. Next time the call site is invoked, it will be linked for the actual arguments it was invoked with.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the particular subclass of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/RelinkableCallSite.html\" title\u003d\"interface in jdk.dynalink\"\u003e\u003ccode\u003eRelinkableCallSite\u003c/code\u003e\u003c/a\u003e for which to create a link."
        ],
        "param": [
          "\u003ccode\u003ecallSite\u003c/code\u003e - the call site to link."
        ],
        "return": [
          "the callSite, for easy call chaining."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.linker.LinkerServices",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLinkerServices",
      "comment": "Returns the object representing the linker services of this class that are normally exposed to individual language-specific linkers. While as a user of this class you normally only care about the link(RelinkableCallSite) method, in certain circumstances you might want to use the lower level services directly; either to lookup specific method handles, to access the type converters, and so on.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the object representing the linker services of this class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackTraceElement",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLinkedCallSiteLocation",
      "comment": "Returns a stack trace element describing the location of the invokedynamic call site currently being linked on the current thread. The operation is potentially expensive as it needs to generate a stack trace to inspect it and is intended for use in diagnostics code. For \"free-floating\" call sites (not associated with an invokedynamic instruction), the result is not well-defined.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a stack trace element describing the location of the call site currently being linked, or null if it is not invoked while a call site is being linked."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.dynalink.DynamicLinker",
  "comment": "The linker for \n\u003ca href\u003d\"RelinkableCallSite.html\" title\u003d\"interface in jdk.dynalink\"\u003e\u003ccode\u003eRelinkableCallSite\u003c/code\u003e\u003c/a\u003e objects. A dynamic linker is a main objects when using Dynalink, it coordinates linking of call sites with linkers of available language runtimes that are represented by \n\u003ca href\u003d\"linker/GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e objects (you only need to deal with these if you are yourself implementing a language runtime with its own object model and/or type conversions). To use Dynalink, you have to create one or more dynamic linkers using a \n\u003ca href\u003d\"DynamicLinkerFactory.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eDynamicLinkerFactory\u003c/code\u003e\u003c/a\u003e. Subsequently, you need to invoke its \n\u003ca href\u003d\"#link(T)\"\u003e\u003ccode\u003elink(RelinkableCallSite)\u003c/code\u003e\u003c/a\u003e method from \n\u003ccode\u003einvokedynamic\u003c/code\u003e bootstrap methods to let it manage all the call sites they create. Usual usage would be to create at least one class per language runtime to contain one linker instance as: \n\u003cpre\u003e\n class MyLanguageRuntime {\n     private static final GuardingDynamicLinker myLanguageLinker \u003d new MyLanguageLinker();\n     private static final DynamicLinker dynamicLinker \u003d createDynamicLinker();\n\n     private static DynamicLinker createDynamicLinker() {\n         final DynamicLinkerFactory factory \u003d new DynamicLinkerFactory();\n         factory.setPrioritizedLinker(myLanguageLinker);\n         return factory.createLinker();\n     }\n\n     public static CallSite bootstrap(MethodHandles.Lookup lookup, String name, MethodType type) {\n         return dynamicLinker.link(\n             new SimpleRelinkableCallSite(\n                 new CallSiteDescriptor(lookup, parseOperation(name), type)));\n     }\n\n     private static Operation parseOperation(String name) {\n         ...\n     }\n }\n \u003c/pre\u003e The above setup of one static linker instance is often too simple. You will often have your language runtime have a concept of some kind of \"context class loader\" and you will want to create one dynamic linker per such class loader, to ensure it incorporates linkers for all other language runtimes visible to that class loader (see \n\u003ca href\u003d\"DynamicLinkerFactory.html#setClassLoader(java.lang.ClassLoader)\"\u003e\u003ccode\u003eDynamicLinkerFactory.setClassLoader(ClassLoader)\u003c/code\u003e\u003c/a\u003e). \n\u003cp\u003e There are three components you need to provide in the above example: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eYou are expected to provide a \u003ca href\u003d\"linker/GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e for your own language. If your runtime doesn\u0027t have its own object model or type conversions, you don\u0027t need to implement a \u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e; you would simply not invoke the \u003ccode\u003esetPrioritizedLinker\u003c/code\u003e method on the factory.\u003c/li\u003e \n \u003cli\u003eThe performance of the programs can depend on your choice of the class to represent call sites. The above example used \u003ca href\u003d\"support/SimpleRelinkableCallSite.html\" title\u003d\"class in jdk.dynalink.support\"\u003e\u003ccode\u003eSimpleRelinkableCallSite\u003c/code\u003e\u003c/a\u003e, but you might want to use \u003ca href\u003d\"support/ChainedCallSite.html\" title\u003d\"class in jdk.dynalink.support\"\u003e\u003ccode\u003eChainedCallSite\u003c/code\u003e\u003c/a\u003e instead. You\u0027ll need to experiment and decide what fits your runtime the best. You can further subclass either of these or implement your own.\u003c/li\u003e \n \u003cli\u003eYou also need to provide \u003ca href\u003d\"CallSiteDescriptor.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eCallSiteDescriptor\u003c/code\u003e\u003c/a\u003es to your call sites. They are immutable objects that contain all the information about the call site: the class performing the lookups, the operation being invoked, and the method signature. You will have to supply your own scheme to encode and decode operations in the call site name or static parameters, that is why in the above example the \u003ccode\u003eparseOperation\u003c/code\u003e method is left unimplemented.\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}