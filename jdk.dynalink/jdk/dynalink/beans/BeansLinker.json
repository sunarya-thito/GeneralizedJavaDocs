{
  "packageName": "jdk.dynalink.beans",
  "simpleName": "BeansLinker",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.dynalink.linker.TypeBasedGuardingDynamicLinker",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLinkerForClass",
      "comment": "Returns a bean linker for a particular single class. Useful when you need to override or extend the behavior of linking for some classes in your language runtime\u0027s linker, but still want to delegate to the default behavior in some cases.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a bean linker for that class"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDynamicMethod",
      "comment": "Returns true if the object is a Java dynamic method (e.g., one obtained through a GET:METHOD operation on a Java object or StaticClass or through getConstructorMethod(Class, String).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object we want to test for being a Java dynamic method."
        ],
        "return": [
          "true if it is a dynamic method, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDynamicConstructor",
      "comment": "Returns true if the object is a Java constructor (obtained through getConstructorMethod(Class, String)}.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object we want to test for being a Java constructor."
        ],
        "return": [
          "true if it is a constructor, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "signature",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getConstructorMethod",
      "comment": "Return the dynamic method of constructor of the given class and the given signature. This method is useful for exposing a functionality for selecting an overloaded constructor based on an explicit signature, as this functionality is not otherwise exposed by Dynalink as StaticClass objects act as overloaded constructors without explicit signature selection. Example usage would be: getConstructorMethod(java.awt.Color.class, \"int, int, int\").",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class",
          "\u003ccode\u003esignature\u003c/code\u003e - full signature of the constructor. Note how you can use names of primitive types, array names with normal Java notation (e.g. \n\u003ccode\u003e\"int[]\"\u003c/code\u003e), and normally you can even use unqualified class names (e.g. \n\u003ccode\u003e\"String, List\"\u003c/code\u003e instead of \n\u003ccode\u003e\"java.lang.String, java.util.List\"\u003c/code\u003e as long as they don\u0027t cause ambiguity in the specific parameter position."
        ],
        "return": [
          "dynamic method for the constructor or null if no constructor with the specified signature exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getReadableInstancePropertyNames",
      "comment": "Returns a set of names of all readable instance properties of a class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a set of names of all readable instance properties of a class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getWritableInstancePropertyNames",
      "comment": "Returns a set of names of all writable instance properties of a class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a set of names of all writable instance properties of a class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstanceMethodNames",
      "comment": "Returns a set of names of all instance methods of a class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a set of names of all instance methods of a class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getReadableStaticPropertyNames",
      "comment": "Returns a set of names of all readable static properties of a class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a set of names of all readable static properties of a class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getWritableStaticPropertyNames",
      "comment": "Returns a set of names of all writable static properties of a class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a set of names of all writable static properties of a class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStaticMethodNames",
      "comment": "Returns a set of names of all static methods of a class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class"
        ],
        "return": [
          "a set of names of all static methods of a class."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.linker.GuardedInvocation",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.linker.LinkRequest",
            "type": "Class"
          },
          "name": "request",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.linker.LinkerServices",
            "type": "Class"
          },
          "name": "linkerServices",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGuardedInvocation",
      "comment": "Description copied from interface: GuardingDynamicLinker",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingDynamicLinker.html#getGuardedInvocation(jdk.dynalink.linker.LinkRequest,jdk.dynalink.linker.LinkerServices)\"\u003egetGuardedInvocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003eGuardingDynamicLinker\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erequest\u003c/code\u003e - the object describing the request for linking a particular invocation",
          "\u003ccode\u003elinkerServices\u003c/code\u003e - linker services"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - if the operation fails for whatever reason"
        ],
        "return": [
          "a guarded invocation with a method handle suitable for the arguments, as well as a guard condition that if fails should trigger relinking. Must return null if it can\u0027t resolve the invocation. If the returned invocation is unconditional (which is actually quite rare), the guard in the return value can be null. The invocation can also have any number of switch points for asynchronous invalidation of the linkage, as well as a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThrowable\u003c/code\u003e\u003c/a\u003e subclass that describes an expected exception condition that also triggers relinking (often it is faster to rely on an infrequent but expected \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassCastException\u003c/code\u003e\u003c/a\u003e than on an always evaluated \n\u003ccode\u003einstanceof\u003c/code\u003e guard). While the linker must produce an invocation with parameter types matching those in the call site descriptor of the link request, it should not try to match the return type expected at the call site except when it can do it with only the conversions that lose neither precision nor magnitude, see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/LinkerServices.html#asTypeLosslessReturn(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)\"\u003e\u003ccode\u003eLinkerServices.asTypeLosslessReturn(MethodHandle, MethodType)\u003c/code\u003e\u003c/a\u003e for further explanation."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new beans linker. Equivalent to BeansLinker(MissingMemberHandlerFactory) with null passed as the missing member handler factory, resulting in the default behavior for linking and evaluating missing members.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.beans.MissingMemberHandlerFactory",
            "type": "Class"
          },
          "name": "missingMemberHandlerFactory",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new beans linker with the specified factory for creating missing member handlers. The passed factory can be null if the default behavior is adequate. See MissingMemberHandlerFactory for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emissingMemberHandlerFactory\u003c/code\u003e - a factory for creating handlers for operations on missing members."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.dynalink.beans.BeansLinker",
  "annotations": [],
  "tagMap": {}
}