{
  "packageName": "jdk.dynalink",
  "simpleName": "DynamicLinkerFactory",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "classLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClassLoader",
      "comment": "Sets the class loader for automatic discovery of available guarding dynamic linkers. GuardingDynamicLinkerExporter implementations available through this class loader will be automatically instantiated using the ServiceLoader mechanism and the linkers they provide will be incorporated into DynamicLinkers that this factory creates. This allows for cross-language interoperability where call sites belonging to this language runtime can be linked by linkers from these automatically discovered runtimes if their native objects are passed to this runtime. If class loader is not set explicitly by invoking this method, then the thread context class loader of the thread invoking createLinker() will be used. If this method is invoked explicitly with null then ServiceLoader.loadInstalled(Class) will be used to load the linkers.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclassLoader\u003c/code\u003e - the class loader used for the automatic discovery of available linkers."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "jdk.dynalink.linker.GuardingDynamicLinker",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "prioritizedLinkers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPrioritizedLinkers",
      "comment": "Sets the prioritized guarding dynamic linkers. Language runtimes using Dynalink will usually have at least one linker for their own language. These linkers will be consulted first by the resulting dynamic linker when it is linking call sites, before any autodiscovered and fallback linkers. If the factory also autodiscovers a linker class matching one of the prioritized linkers, the autodiscovered class will be ignored and the explicit prioritized instance will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprioritizedLinkers\u003c/code\u003e - the list of prioritized linkers. Can be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the list elements are null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.linker.GuardingDynamicLinker",
            "type": "Class"
          },
          "field": {
            "name": "prioritizedLinkers"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPrioritizedLinkers",
      "comment": "Sets the prioritized guarding dynamic linkers. Identical to calling setPrioritizedLinkers(List) with Arrays.asList(prioritizedLinkers).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprioritizedLinkers\u003c/code\u003e - an array of prioritized linkers. Can be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the array elements are null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.linker.GuardingDynamicLinker",
            "type": "Class"
          },
          "field": {
            "name": "prioritizedLinker"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPrioritizedLinker",
      "comment": "Sets a single prioritized linker. Identical to calling setPrioritizedLinkers(List) with a single-element list.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprioritizedLinker\u003c/code\u003e - the single prioritized linker. Must not be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if null is passed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "jdk.dynalink.linker.GuardingDynamicLinker",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "fallbackLinkers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFallbackLinkers",
      "comment": "Sets the fallback guarding dynamic linkers. These linkers will be consulted last by the resulting dynamic linker when it is linking call sites, after any autodiscovered and prioritized linkers. If the factory also autodiscovers a linker class matching one of the fallback linkers, the autodiscovered class will be ignored and the explicit fallback instance will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efallbackLinkers\u003c/code\u003e - the list of fallback linkers. Can be empty to indicate the caller wishes to set no fallback linkers. Note that if this method is not invoked explicitly or is passed null, then the factory will create an instance of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/beans/BeansLinker.html\" title\u003d\"class in jdk.dynalink.beans\"\u003e\u003ccode\u003eBeansLinker\u003c/code\u003e\u003c/a\u003e to serve as the default fallback linker."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the list elements are null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.linker.GuardingDynamicLinker",
            "type": "Class"
          },
          "field": {
            "name": "fallbackLinkers"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFallbackLinkers",
      "comment": "Sets the fallback guarding dynamic linkers. Identical to calling setFallbackLinkers(List) with Arrays.asList(fallbackLinkers).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efallbackLinkers\u003c/code\u003e - an array of fallback linkers. Can be empty to indicate the caller wishes to set no fallback linkers. Note that if this method is not invoked explicitly or is passed null, then the factory will create an instance of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/beans/BeansLinker.html\" title\u003d\"class in jdk.dynalink.beans\"\u003e\u003ccode\u003eBeansLinker\u003c/code\u003e\u003c/a\u003e to serve as the default fallback linker."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the array elements are null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "syncOnRelink"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSyncOnRelink",
      "comment": "Sets whether the dynamic linker created by this factory will invoke MutableCallSite.syncAll(MutableCallSite[]) after a call site is relinked. Defaults to false. You probably want to set it to true if your runtime supports multithreaded execution of dynamically linked code.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esyncOnRelink\u003c/code\u003e - true for invoking sync on relink, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "unstableRelinkThreshold"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUnstableRelinkThreshold",
      "comment": "Sets the unstable relink threshold; the number of times a call site is relinked after which it will be considered unstable, and subsequent link requests for it will indicate this. Defaults to 8 when not set explicitly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/LinkRequest.html#isCallSiteUnstable()\"\u003e\u003ccode\u003eLinkRequest.isCallSiteUnstable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eunstableRelinkThreshold\u003c/code\u003e - the new threshold. Must not be less than zero. The value of zero means that call sites will never be considered unstable."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.linker.GuardedInvocationTransformer",
            "type": "Class"
          },
          "field": {
            "name": "prelinkTransformer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPrelinkTransformer",
      "comment": "Set the pre-link transformer. This is a GuardedInvocationTransformer that will get the final chance to modify the guarded invocation after it has been created by a component linker and before the dynamic linker links it into the call site. It is normally used to adapt the return value type of the invocation to the type of the call site. When not set explicitly, a default pre-link transformer will be used that simply calls GuardedInvocation.asType(LinkerServices, MethodType). Customized pre-link transformers are rarely needed; they are mostly used as a building block for implementing advanced techniques such as code deoptimization strategies.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprelinkTransformer\u003c/code\u003e - the pre-link transformer for the dynamic linker. Can be null to have the factory use the default transformer."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.linker.MethodTypeConversionStrategy",
            "type": "Class"
          },
          "field": {
            "name": "autoConversionStrategy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoConversionStrategy",
      "comment": "Sets an object representing the conversion strategy for automatic type conversions. After LinkerServices.asType(MethodHandle, MethodType) has applied all custom conversions to a method handle, it still needs to effect method invocation conversions that can usually be automatically applied as per MethodHandle.asType(MethodType). However, sometimes language runtimes will want to customize even those conversions for their own call sites. A typical example is allowing unboxing of null return values, which is by default prohibited by ordinary MethodHandles.asType(). In this case, a language runtime can install its own custom automatic conversion strategy, that can deal with null values. Note that when the strategy\u0027s MethodTypeConversionStrategy.asType(MethodHandle, MethodType) is invoked, the custom language conversions will already have been applied to the method handle, so by design the difference between the handle\u0027s current method type and the desired final type will always only be ones that can be subjected to method invocation conversions. The strategy also doesn\u0027t need to invoke a final MethodHandle.asType() as that will be done internally as the final step.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eautoConversionStrategy\u003c/code\u003e - the strategy for applying method invocation conversions for the linker created by this factory. Can be null for no custom strategy."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.linker.MethodHandleTransformer",
            "type": "Class"
          },
          "field": {
            "name": "internalObjectsFilter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInternalObjectsFilter",
      "comment": "Sets a method handle transformer that is supposed to act as the implementation of LinkerServices.filterInternalObjects(MethodHandle) for linker services of dynamic linkers created by this factory. Some language runtimes can have internal objects that should not escape their scope. They can add a transformer here that will modify the method handle so that any parameters that can receive potentially internal language runtime objects will have a filter added on them to prevent them from escaping, potentially by wrapping them. The transformer can also potentially add an unwrapping filter to the return value. DefaultInternalObjectFilter is provided as a convenience class for easily creating such filtering transformers.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einternalObjectsFilter\u003c/code\u003e - a method handle transformer filtering out internal objects, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.DynamicLinker",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createLinker",
      "comment": "Creates a new dynamic linker based on the current configuration. This method can be invoked more than once to create multiple dynamic linkers. Automatically discovered linkers are newly instantiated on every invocation of this method. It is allowed to change the factory\u0027s configuration between invocations. The method is not thread safe. After invocation, callers can invoke getAutoLoadingErrors() to retrieve a list of ServiceConfigurationErrors that occurred while trying to load automatically discovered linkers. These are never thrown from the call to this method as it makes every effort to recover from them and ignore the failing linkers.",
      "tagMap": {
        "return": [
          "the new dynamic Linker"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.ServiceConfigurationError",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoLoadingErrors",
      "comment": "Returns a list of ServiceConfigurationErrors that were encountered while loading automatically discovered linkers during the last invocation of createLinker(). They can be any non-Dynalink specific service configuration issues, as well as some Dynalink-specific errors when an exporter that the factory tried to automatically load: did not have the runtime permission named GuardingDynamicLinkerExporter.AUTOLOAD_PERMISSION_NAME in a system with a security manager, or returned null from Supplier.get(), or the list returned from Supplier.get() had a null element.",
      "tagMap": {
        "return": [
          "an immutable list of encountered \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eServiceConfigurationError\u003c/code\u003e\u003c/a\u003es. Can be empty."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new dynamic linker factory with default configuration. Upon creation, the factory can be configured using various setXxx() methods and used to create one or more dynamic linkers according to its current configuration using createLinker().",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.dynalink.DynamicLinkerFactory",
  "comment": "A factory class for creating \n\u003ca href\u003d\"DynamicLinker.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eDynamicLinker\u003c/code\u003e\u003c/a\u003e objects. Dynamic linkers are the central objects in Dynalink; these are composed of several \n\u003ca href\u003d\"linker/GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e objects and coordinate linking of call sites with them. The usual dynamic linker is a linker composed of all \n\u003ca href\u003d\"linker/GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e objects explicitly pre-created by the user of the factory and configured with \n\u003ca href\u003d\"#setPrioritizedLinkers(java.util.List)\"\u003e\u003ccode\u003esetPrioritizedLinkers(List)\u003c/code\u003e\u003c/a\u003e, as well as any \n\u003ca href\u003d\"#setClassLoader(java.lang.ClassLoader)\"\u003e\u003ccode\u003eautomatically discovered\u003c/code\u003e\u003c/a\u003e ones, and finally the ones configured with \n\u003ca href\u003d\"#setFallbackLinkers(java.util.List)\"\u003e\u003ccode\u003esetFallbackLinkers(List)\u003c/code\u003e\u003c/a\u003e; this last category usually includes \n\u003ca href\u003d\"beans/BeansLinker.html\" title\u003d\"class in jdk.dynalink.beans\"\u003e\u003ccode\u003eBeansLinker\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {}
}