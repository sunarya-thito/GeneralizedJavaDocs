{
  "packageName": "jdk.dynalink.linker",
  "simpleName": "TypeBasedGuardingDynamicLinker",
  "moduleName": "jdk.dynalink",
  "type": "INTERFACE",
  "superClass": {
    "name": "jdk.dynalink.linker.GuardingDynamicLinker",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canLinkType",
      "comment": "Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type to link"
        ],
        "return": [
          "true if the linker can link calls for the receiver type, or false otherwise."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.dynalink.linker.TypeBasedGuardingDynamicLinker",
  "comment": "A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first argument at linking invocation time. (The first argument is usually the receiver). Most language-specific linkers will fall into this category, as they recognize their native objects as Java objects of classes implementing a specific language-native interface or superclass. The linker mechanism can optimize the dispatch for these linkers, see \n\u003ca href\u003d\"support/CompositeTypeBasedGuardingDynamicLinker.html\" title\u003d\"class in jdk.dynalink.linker.support\"\u003e\u003ccode\u003eCompositeTypeBasedGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {}
}