{
  "packageName": "jdk.dynalink.linker",
  "simpleName": "GuardingDynamicLinker",
  "moduleName": "jdk.dynalink",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.dynalink.linker.GuardedInvocation",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.linker.LinkRequest",
            "type": "Class"
          },
          "name": "linkRequest",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.linker.LinkerServices",
            "type": "Class"
          },
          "name": "linkerServices",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGuardedInvocation",
      "comment": "Creates a guarded invocation appropriate for a particular invocation with the specified arguments at a call site.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elinkRequest\u003c/code\u003e - the object describing the request for linking a particular invocation",
          "\u003ccode\u003elinkerServices\u003c/code\u003e - linker services"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - if the operation fails for whatever reason"
        ],
        "return": [
          "a guarded invocation with a method handle suitable for the arguments, as well as a guard condition that if fails should trigger relinking. Must return null if it can\u0027t resolve the invocation. If the returned invocation is unconditional (which is actually quite rare), the guard in the return value can be null. The invocation can also have any number of switch points for asynchronous invalidation of the linkage, as well as a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThrowable\u003c/code\u003e\u003c/a\u003e subclass that describes an expected exception condition that also triggers relinking (often it is faster to rely on an infrequent but expected \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassCastException\u003c/code\u003e\u003c/a\u003e than on an always evaluated \n\u003ccode\u003einstanceof\u003c/code\u003e guard). While the linker must produce an invocation with parameter types matching those in the call site descriptor of the link request, it should not try to match the return type expected at the call site except when it can do it with only the conversions that lose neither precision nor magnitude, see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/LinkerServices.html#asTypeLosslessReturn(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)\"\u003e\u003ccode\u003eLinkerServices.asTypeLosslessReturn(MethodHandle, MethodType)\u003c/code\u003e\u003c/a\u003e for further explanation."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.dynalink.linker.GuardingDynamicLinker",
  "comment": "The base interface for language-specific dynamic linkers. Such linkers always have to produce method handles with guards, as the validity of the method handle for calls at a call site inevitably depends on some condition (at the very least, it depends on the receiver belonging to the language runtime of the linker). Language runtime implementors will normally implement the linking logic for their own language as one or more \n\u003ca href\u003d\"GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e classes. They will typically set them as \n\u003ca href\u003d\"../DynamicLinkerFactory.html#setPrioritizedLinkers(java.util.List)\"\u003e\u003ccode\u003eprioritized linkers\u003c/code\u003e\u003c/a\u003e in the \n\u003ccode\u003eDynamicLinkerFactory\u003c/code\u003e they configure for themselves, and maybe also set some as \n\u003ca href\u003d\"../DynamicLinkerFactory.html#setFallbackLinkers(java.util.List)\"\u003e\u003ccode\u003efallback linkers\u003c/code\u003e\u003c/a\u003e to handle language-specific \"property not found\" etc. conditions. \n\u003cp\u003e Consider implementing \u003ca href\u003d\"TypeBasedGuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eTypeBasedGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e interface instead of this interface for those linkers that are based on the Java class of the objects. If you need to implement language-specific type conversions, have your \u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e also implement the \u003ca href\u003d\"GuardingTypeConverterFactory.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingTypeConverterFactory\u003c/code\u003e\u003c/a\u003e interface. \u003c/p\u003e\n\u003cp\u003e Languages can export linkers to other language runtimes for \u003ca href\u003d\"../DynamicLinkerFactory.html#setClassLoader(java.lang.ClassLoader)\"\u003e\u003ccode\u003eautomatic discovery\u003c/code\u003e\u003c/a\u003e using a \u003ca href\u003d\"GuardingDynamicLinkerExporter.html\" title\u003d\"class in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinkerExporter\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}