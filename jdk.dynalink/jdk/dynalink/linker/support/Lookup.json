{
  "packageName": "jdk.dynalink.linker.support",
  "simpleName": "Lookup",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "jdk.dynalink.linker.support.Lookup",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PUBLIC",
      "comment": "A canonical Lookup object that wraps MethodHandles.publicLookup().",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unreflect",
      "comment": "Performs a MethodHandles.Lookup.unreflect(Method), converting any encountered IllegalAccessException into an IllegalAccessError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the method to unreflect"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the method is inaccessible."
        ],
        "return": [
          "the unreflected method handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "field": {
            "name": "lookup"
          }
        },
        {
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unreflect",
      "comment": "Performs a MethodHandles.Lookup.unreflect(Method), converting any encountered IllegalAccessException into an IllegalAccessError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup used to unreflect",
          "\u003ccode\u003em\u003c/code\u003e - the method to unreflect"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the method is inaccessible."
        ],
        "return": [
          "the unreflected method handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.reflect.Field",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unreflectGetter",
      "comment": "Performs a MethodHandles.Lookup.unreflectGetter(Field), converting any encountered IllegalAccessException into an IllegalAccessError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the field for which a getter is unreflected"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the getter is inaccessible."
        ],
        "return": [
          "the unreflected field getter handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "refc"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "findGetter",
      "comment": "Performs a MethodHandles.Lookup.findGetter(Class, String, Class), converting any encountered IllegalAccessException into an IllegalAccessError and NoSuchFieldException into a NoSuchFieldError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erefc\u003c/code\u003e - the class declaring the field",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the field",
          "\u003ccode\u003etype\u003c/code\u003e - the type of the field"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the field is inaccessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldError.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldError\u003c/a\u003e\u003c/code\u003e - if the field does not exist."
        ],
        "return": [
          "the unreflected field getter handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.reflect.Field",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unreflectSetter",
      "comment": "Performs a MethodHandles.Lookup.unreflectSetter(Field), converting any encountered IllegalAccessException into an IllegalAccessError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the field for which a setter is unreflected"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the field is inaccessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldError.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldError\u003c/a\u003e\u003c/code\u003e - if the field does not exist."
        ],
        "return": [
          "the unreflected field setter handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.reflect.Constructor",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unreflectConstructor",
      "comment": "Performs a MethodHandles.Lookup.unreflectConstructor(Constructor), converting any encountered IllegalAccessException into an IllegalAccessError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the constructor to unreflect"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the constructor is inaccessible."
        ],
        "return": [
          "the unreflected constructor handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "field": {
            "name": "lookup"
          }
        },
        {
          "type": {
            "name": "java.lang.reflect.Constructor",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unreflectConstructor",
      "comment": "Performs a MethodHandles.Lookup.unreflectConstructor(Constructor), converting any encountered IllegalAccessException into an IllegalAccessError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup used to unreflect",
          "\u003ccode\u003ec\u003c/code\u003e - the constructor to unreflect"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the constructor is inaccessible."
        ],
        "return": [
          "the unreflected constructor handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "declaringClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "findSpecial",
      "comment": "Performs a MethodHandles.Lookup.findSpecial(Class, String, MethodType, Class) on the underlying lookup. Converts any encountered IllegalAccessException into an IllegalAccessError and NoSuchMethodException into a NoSuchMethodError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - class declaring the method",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003etype\u003c/code\u003e - the type of the method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the method is inaccessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodError.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodError\u003c/a\u003e\u003c/code\u003e - if the method does not exist."
        ],
        "return": [
          "a method handle for the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "declaringClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "findStatic",
      "comment": "Performs a MethodHandles.Lookup.findStatic(Class, String, MethodType) on the underlying lookup. Converts any encountered IllegalAccessException into an IllegalAccessError and NoSuchMethodException into a NoSuchMethodError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - class declaring the method",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003etype\u003c/code\u003e - the type of the method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the method is inaccessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodError.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodError\u003c/a\u003e\u003c/code\u003e - if the method does not exist."
        ],
        "return": [
          "a method handle for the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "declaringClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "findVirtual",
      "comment": "Performs a MethodHandles.Lookup.findVirtual(Class, String, MethodType) on the underlying lookup. Converts any encountered IllegalAccessException into an IllegalAccessError and NoSuchMethodException into a NoSuchMethodError.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - class declaring the method",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003etype\u003c/code\u003e - the type of the method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the method is inaccessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodError.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodError\u003c/a\u003e\u003c/code\u003e - if the method does not exist."
        ],
        "return": [
          "a method handle for the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "field": {
            "name": "lookup"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "findOwnSpecial",
      "comment": "Given a lookup, finds using findSpecial(Class, String, MethodType) a method on that lookup\u0027s class. Useful in classes\u0027 code for convenient linking to their own privates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup for the class",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003ertype\u003c/code\u003e - the return type of the method",
          "\u003ccode\u003eptypes\u003c/code\u003e - the parameter types of the method"
        ],
        "return": [
          "the method handle for the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "findOwnSpecial",
      "comment": "Finds using findSpecial(Class, String, MethodType) a method on that lookup\u0027s class. Useful in classes\u0027 code for convenient linking to their own privates. It\u0027s also more convenient than findSpecial in that you can just list the parameter types, and don\u0027t have to specify lookup class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003ertype\u003c/code\u003e - the return type of the method",
          "\u003ccode\u003eptypes\u003c/code\u003e - the parameter types of the method"
        ],
        "return": [
          "the method handle for the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "field": {
            "name": "lookup"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "findOwnStatic",
      "comment": "Given a lookup, finds using findStatic(Class, String, MethodType) a method on that lookup\u0027s class. Useful in classes\u0027 code for convenient linking to their own privates. It\u0027s easier to use than findStatic in that you can just list the parameter types, and don\u0027t have to specify lookup class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup for the class",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003ertype\u003c/code\u003e - the return type of the method",
          "\u003ccode\u003eptypes\u003c/code\u003e - the parameter types of the method"
        ],
        "return": [
          "the method handle for the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "findOwnStatic",
      "comment": "Finds using findStatic(Class, String, MethodType) a method on that lookup\u0027s class. Useful in classes\u0027 code for convenient linking to their own privates. It\u0027s easier to use than findStatic in that you can just list the parameter types, and don\u0027t have to specify lookup class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003ertype\u003c/code\u003e - the return type of the method",
          "\u003ccode\u003eptypes\u003c/code\u003e - the parameter types of the method"
        ],
        "return": [
          "the method handle for the method"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "field": {
            "name": "lookup"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new instance, bound to an instance of MethodHandles.Lookup.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html\" title\u003d\"class in java.lang.invoke\"\u003e\u003ccode\u003eMethodHandles.Lookup\u003c/code\u003e\u003c/a\u003e it delegates to."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.dynalink.linker.support.Lookup",
  "comment": "A wrapper around \n\u003ca href\u003d\"../../../../../java.base/java/lang/invoke/MethodHandles.Lookup.html\" title\u003d\"class in java.lang.invoke\"\u003e\u003ccode\u003eMethodHandles.Lookup\u003c/code\u003e\u003c/a\u003e that masks checked exceptions. It is useful in those cases when you\u0027re looking up methods within your own codebase (therefore it is an error if they are not present).",
  "tagMap": {}
}