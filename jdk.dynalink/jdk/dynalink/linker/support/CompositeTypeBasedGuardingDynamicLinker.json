{
  "packageName": "jdk.dynalink.linker.support",
  "simpleName": "CompositeTypeBasedGuardingDynamicLinker",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canLinkType",
      "comment": "Returns true if at least one of the composite linkers returns true from TypeBasedGuardingDynamicLinker.canLinkType(Class) for the type.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/TypeBasedGuardingDynamicLinker.html#canLinkType(java.lang.Class)\"\u003ecanLinkType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/TypeBasedGuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003eTypeBasedGuardingDynamicLinker\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type to link"
        ],
        "return": [
          "true true if at least one of the composite linkers returns true from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/TypeBasedGuardingDynamicLinker.html#canLinkType(java.lang.Class)\"\u003e\u003ccode\u003eTypeBasedGuardingDynamicLinker.canLinkType(Class)\u003c/code\u003e\u003c/a\u003e, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.linker.GuardedInvocation",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.linker.LinkRequest",
            "type": "Class"
          },
          "name": "linkRequest",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.dynalink.linker.LinkerServices",
            "type": "Class"
          },
          "name": "linkerServices",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGuardedInvocation",
      "comment": "Description copied from interface: GuardingDynamicLinker",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingDynamicLinker.html#getGuardedInvocation(jdk.dynalink.linker.LinkRequest,jdk.dynalink.linker.LinkerServices)\"\u003egetGuardedInvocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003eGuardingDynamicLinker\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elinkRequest\u003c/code\u003e - the object describing the request for linking a particular invocation",
          "\u003ccode\u003elinkerServices\u003c/code\u003e - linker services"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - if the operation fails for whatever reason"
        ],
        "return": [
          "a guarded invocation with a method handle suitable for the arguments, as well as a guard condition that if fails should trigger relinking. Must return null if it can\u0027t resolve the invocation. If the returned invocation is unconditional (which is actually quite rare), the guard in the return value can be null. The invocation can also have any number of switch points for asynchronous invalidation of the linkage, as well as a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThrowable\u003c/code\u003e\u003c/a\u003e subclass that describes an expected exception condition that also triggers relinking (often it is faster to rely on an infrequent but expected \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassCastException\u003c/code\u003e\u003c/a\u003e than on an always evaluated \n\u003ccode\u003einstanceof\u003c/code\u003e guard). While the linker must produce an invocation with parameter types matching those in the call site descriptor of the link request, it should not try to match the return type expected at the call site except when it can do it with only the conversions that lose neither precision nor magnitude, see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/LinkerServices.html#asTypeLosslessReturn(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)\"\u003e\u003ccode\u003eLinkerServices.asTypeLosslessReturn(MethodHandle, MethodType)\u003c/code\u003e\u003c/a\u003e for further explanation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.dynalink.linker.GuardingDynamicLinker",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "jdk.dynalink.linker.GuardingDynamicLinker",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "linkers",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "optimize",
      "comment": "Optimizes a list of type-based linkers. If a group of adjacent linkers in the list all implement TypeBasedGuardingDynamicLinker, they will be replaced with a single instance of CompositeTypeBasedGuardingDynamicLinker that contains them.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elinkers\u003c/code\u003e - the list of linkers to optimize"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elinkers\u003c/code\u003e or any of its elements are null."
        ],
        "return": [
          "the optimized list"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "jdk.dynalink.linker.TypeBasedGuardingDynamicLinker",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "linkers",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new composite type-based linker.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elinkers\u003c/code\u003e - the component linkers"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elinkers\u003c/code\u003e or any of its elements are null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.dynalink.linker.support.CompositeTypeBasedGuardingDynamicLinker",
  "comment": "A composite type-based guarding dynamic linker. When a receiver of a not yet seen class is encountered, all linkers are queried sequentially on their \n\u003ca href\u003d\"../TypeBasedGuardingDynamicLinker.html#canLinkType(java.lang.Class)\"\u003e\u003ccode\u003eTypeBasedGuardingDynamicLinker.canLinkType(Class)\u003c/code\u003e\u003c/a\u003e method. The linkers returning true are then bound to the class, and next time a receiver of same type is encountered, the linking is delegated to those linkers only, speeding up dispatch.",
  "tagMap": {}
}