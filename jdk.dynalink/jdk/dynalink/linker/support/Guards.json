{
  "packageName": "jdk.dynalink.linker.support",
  "simpleName": "Guards",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isOfClass",
      "comment": "Creates a guard method handle with arguments of a specified type, but with boolean return value. When invoked, it returns true if the first argument is of the specified class (exactly of it, not a subclass). The rest of the arguments will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the first argument to test for",
          "\u003ccode\u003etype\u003c/code\u003e - the method type"
        ],
        "return": [
          "a method handle testing whether its first argument is of the specified class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isInstance",
      "comment": "Creates a method handle with arguments of a specified type, but with boolean return value. When invoked, it returns true if the first argument is instance of the specified class or its subclass). The rest of the arguments will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the first argument to test for",
          "\u003ccode\u003etype\u003c/code\u003e - the method type"
        ],
        "return": [
          "a method handle testing whether its first argument is of the specified class or subclass."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isInstance",
      "comment": "Creates a method handle with arguments of a specified type, but with boolean return value. When invoked, it returns true if the n\u0027th argument is instance of the specified class or its subclass). The rest of the arguments will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the first argument to test for",
          "\u003ccode\u003epos\u003c/code\u003e - the position on the argument list to test",
          "\u003ccode\u003etype\u003c/code\u003e - the method type"
        ],
        "return": [
          "a method handle testing whether its first argument is of the specified class or subclass."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isArray",
      "comment": "Creates a method handle that returns true if the argument in the specified position is a Java array.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position in the argument lit",
          "\u003ccode\u003etype\u003c/code\u003e - the method type of the handle"
        ],
        "return": [
          "a method handle that returns true if the argument in the specified position is a Java array; the rest of the arguments are ignored."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "asType",
      "comment": "Takes a method handle intended to be used as a guard, and adapts it to the requested type, but returning a boolean. Applies MethodHandle.asType(MethodType) to convert types and uses MethodHandles.dropArguments(MethodHandle, int, Class...) to match the requested type arity.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etest\u003c/code\u003e - the test method handle",
          "\u003ccode\u003etype\u003c/code\u003e - the type to adapt the method handle to"
        ],
        "return": [
          "the adapted method handle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "asType",
      "comment": "Takes a method handle intended to be used as a guard, and adapts it to the requested type, but returning a boolean. Applies LinkerServices.asType(MethodHandle, MethodType) to convert types and uses MethodHandles.dropArguments(MethodHandle, int, Class...) to match the requested type arity.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elinkerServices\u003c/code\u003e - the linker services to use for type conversions",
          "\u003ccode\u003etest\u003c/code\u003e - the test method handle",
          "\u003ccode\u003etype\u003c/code\u003e - the type to adapt the method handle to"
        ],
        "return": [
          "the adapted method handle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getClassGuard",
      "comment": "Creates a guard method that tests its only argument for being of an exact particular class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class to test for."
        ],
        "return": [
          "the desired guard method."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstanceOfGuard",
      "comment": "Creates a guard method that tests its only argument for being an instance of a particular class.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class to test for."
        ],
        "return": [
          "the desired guard method."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIdentityGuard",
      "comment": "Creates a guard method that tests its only argument for being referentially identical to another object",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object used as referential identity test"
        ],
        "return": [
          "the desired guard method."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isNull",
      "comment": "Returns a guard that tests whether the first argument is null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a guard that tests whether the first argument is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isNotNull",
      "comment": "Returns a guard that tests whether the first argument is not null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a guard that tests whether the first argument is not null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.dynalink.linker.support.Guards",
  "comment": "Utility methods for creating typical guards for \n\u003ca href\u003d\"../../../../../java.base/java/lang/invoke/MethodHandles.html#guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)\"\u003e\u003ccode\u003eMethodHandles.guardWithTest(MethodHandle, MethodHandle, MethodHandle)\u003c/code\u003e\u003c/a\u003e and for adjusting their method types.",
  "tagMap": {}
}