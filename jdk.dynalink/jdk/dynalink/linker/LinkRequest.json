{
  "packageName": "jdk.dynalink.linker",
  "simpleName": "LinkRequest",
  "moduleName": "jdk.dynalink",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.dynalink.CallSiteDescriptor",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCallSiteDescriptor",
      "comment": "Returns the call site descriptor for the call site being linked.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the call site descriptor for the call site being linked."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArguments",
      "comment": "Returns the arguments for the invocation being linked. The returned array must be a clone; modifications to it must not affect the arguments in this request.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the arguments for the invocation being linked."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getReceiver",
      "comment": "Returns the first argument for the invocation being linked; this is typically the receiver object. This is a shorthand for getArguments()[0] that also avoids the cloning of the arguments array.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the receiver object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCallSiteUnstable",
      "comment": "Returns true if the call site is considered unstable, that is, it has been relinked more times than was specified in DynamicLinkerFactory.setUnstableRelinkThreshold(int). Linkers should use this as a hint to prefer producing linkage that is more stable (its guard fails less frequently), even if that assumption causes a less effective version of an operation to be linked. This is just a hint, though, and linkers are allowed to ignore this property.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the call site is considered unstable."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.linker.LinkRequest",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replaceArguments",
      "comment": "Returns a request identical to this one with call site descriptor and arguments replaced with the ones specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecallSiteDescriptor\u003c/code\u003e - the new call site descriptor",
          "\u003ccode\u003earguments\u003c/code\u003e - the new arguments"
        ],
        "return": [
          "a new request identical to this one, except with the call site descriptor and arguments replaced with the specified ones."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.dynalink.linker.LinkRequest",
  "comment": "Represents a request to link a particular invocation at a particular call site. Instances of these requests will be constructed and passed to all \n\u003ca href\u003d\"GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e objects managed by the \n\u003ca href\u003d\"../DynamicLinker.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eDynamicLinker\u003c/code\u003e\u003c/a\u003e that is trying to link the call site.",
  "tagMap": {}
}