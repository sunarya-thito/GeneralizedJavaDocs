{
  "packageName": "jdk.dynalink.linker",
  "simpleName": "MethodTypeConversionStrategy",
  "moduleName": "jdk.dynalink",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandle",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "field": {
            "name": "newType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asType",
      "comment": "Converts a method handle to a new type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - target method handle",
          "\u003ccode\u003enewType\u003c/code\u003e - new type"
        ],
        "return": [
          "target converted to the new type."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.dynalink.linker.MethodTypeConversionStrategy",
  "comment": "Interface for objects representing a strategy for converting a method handle to a new type. Typical usage is for customizing a language runtime\u0027s handling of \n\u003ca href\u003d\"../DynamicLinkerFactory.html#setAutoConversionStrategy(jdk.dynalink.linker.MethodTypeConversionStrategy)\"\u003e\u003ccode\u003emethod invocation conversions\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {}
}