{
  "packageName": "jdk.dynalink.linker",
  "simpleName": "LinkerServices",
  "moduleName": "jdk.dynalink",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asType",
      "comment": "Similar to MethodHandle.asType(MethodType) except it also hooks in method handles produced by all available GuardingTypeConverterFactory implementations, providing for language-specific type coercing of parameters. It will apply MethodHandle.asType(MethodType) for all primitive-to-primitive, wrapper-to-primitive, primitive-to-wrapper conversions as well as for all upcasts. For all other conversions, it\u0027ll insert MethodHandles.filterArguments(MethodHandle, int, MethodHandle...) with composite filters provided by GuardingTypeConverterFactory implementations.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehandle\u003c/code\u003e - target method handle",
          "\u003ccode\u003efromType\u003c/code\u003e - the types of source arguments"
        ],
        "return": [
          "a method handle that is a suitable combination of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandle.html#asType(java.lang.invoke.MethodType)\"\u003e\u003ccode\u003eMethodHandle.asType(MethodType)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.html#filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)\"\u003e\u003ccode\u003eMethodHandles.filterArguments(MethodHandle, int, MethodHandle...)\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.html#filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)\"\u003e\u003ccode\u003eMethodHandles.filterReturnValue(MethodHandle, MethodHandle)\u003c/code\u003e\u003c/a\u003e with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingTypeConverterFactory.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingTypeConverterFactory\u003c/code\u003e\u003c/a\u003e-produced type converters as filters."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asTypeLosslessReturn",
      "comment": "Similar to asType(MethodHandle, MethodType) except it treats return value type conversion specially. It only converts the return type of the method handle when it can be done using a conversion that loses neither precision nor magnitude, otherwise it leaves it unchanged. These are the only return value conversions that should be performed by individual language-specific linkers, and pre-link transformer of the dynamic linker should implement the strategy for dealing with potentially lossy return type conversions in a manner specific to the language runtime where the call site is located.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehandle\u003c/code\u003e - target method handle",
          "\u003ccode\u003efromType\u003c/code\u003e - the types of source arguments"
        ],
        "return": [
          "a method handle that is a suitable combination of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandle.html#asType(java.lang.invoke.MethodType)\"\u003e\u003ccode\u003eMethodHandle.asType(MethodType)\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.html#filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)\"\u003e\u003ccode\u003eMethodHandles.filterArguments(MethodHandle, int, MethodHandle...)\u003c/code\u003e\u003c/a\u003e with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingTypeConverterFactory.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingTypeConverterFactory\u003c/code\u003e\u003c/a\u003e-produced type converters as filters."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeConverter",
      "comment": "Given a source and target type, returns a method handle that converts between them. Never returns null; in worst case it will return an identity conversion (that might fail for some values at runtime). You rarely need to use this method directly and should mostly rely on asType(MethodHandle, MethodType) instead. This method is needed when you need to reuse existing type conversion machinery outside the context of processing a link request.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceType\u003c/code\u003e - the type to convert from",
          "\u003ccode\u003etargetType\u003c/code\u003e - the type to convert to"
        ],
        "return": [
          "a method handle performing the conversion."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canConvert",
      "comment": "Returns true if there might exist a conversion between the requested types (either an automatic JVM conversion, or one provided by any available GuardingTypeConverterFactory), or false if there definitely does not exist a conversion between the requested types. Note that returning true does not guarantee that the conversion will succeed at runtime for all values (especially if the \"from\" or \"to\" types are sufficiently generic), but returning false guarantees that it would fail.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efrom\u003c/code\u003e - the source type for the conversion",
          "\u003ccode\u003eto\u003c/code\u003e - the target type for the conversion"
        ],
        "return": [
          "true if there can be a conversion, false if there can not."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.linker.GuardedInvocation",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGuardedInvocation",
      "comment": "Creates a guarded invocation delegating back to the DynamicLinker that exposes this linker services object. The dynamic linker will then itself delegate the linking to all of its managed GuardingDynamicLinkers including potentially this one if no linker responds earlier, so beware of infinite recursion. You\u0027ll typically craft the link request so that it will be different than the one you are currently trying to link.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elinkRequest\u003c/code\u003e - a request for linking the invocation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - in case the top-level linker throws an exception"
        ],
        "return": [
          "a guarded invocation linked by some of the guarding dynamic linkers managed by the top-level dynamic linker. Can be null if no available linker is able to link the invocation. You will typically use the elements of the returned invocation to compose your own invocation."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.linker.ConversionComparator$Comparison",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compareConversion",
      "comment": "Determines which of the two type conversions from a source type to the two target types is preferred. This is used for dynamic overloaded method resolution. If the source type is convertible to exactly one target type with a method invocation conversion, it is chosen, otherwise available ConversionComparators are consulted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceType\u003c/code\u003e - the source type.",
          "\u003ccode\u003etargetType1\u003c/code\u003e - one potential target type",
          "\u003ccode\u003etargetType2\u003c/code\u003e - another potential target type."
        ],
        "return": [
          "one of Comparison constants that establish which – if any – of the target types is preferable for the conversion."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "filterInternalObjects",
      "comment": "Modifies the method handle so that any parameters that can receive potentially internal language runtime objects will have a filter added on them to prevent them from escaping, potentially by wrapping them. It can also potentially add an unwrapping filter to the return value. Basically transforms the method handle using the transformer configured by DynamicLinkerFactory.setInternalObjectsFilter(MethodHandleTransformer).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the target method handle"
        ],
        "return": [
          "a method handle with parameters and/or return type potentially filtered for wrapping and unwrapping."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWithLookup",
      "comment": "Executes an operation within the context of a particular MethodHandles.Lookup lookup object. Normally, methods on LinkerServices are invoked as part of the linking mechanism in which case Dynalink internally maintains a per-thread current lookup (the one belonging to the descriptor of the call site being linked). This lookup can be retrieved by any GuardingTypeConverterFactory involved in linking if it needs to generate lookup-sensitive converters. However, linker services\u0027 methods can be invoked outside the linking process too when implementing invocation-time dispatch schemes, invoking conversions at runtime, etc. If it becomes necessary to use any type converter in this situation, and it needs a lookup, it will normally only get MethodHandles.publicLookup() as the thread is not engaged in a linking operation. If there is a way to meaningfully associate the operation to the context of some caller class, consider performing it within an invocation of this method and passing a full-strength lookup for that class, as it will associate that lookup with the current thread for the duration of the operation. Note that since you are passing a SecureLookupSupplier, any invoked type converter factories will still need to hold the necessary runtime permission to be able to get the lookup should they need it.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the return value provided by the passed-in supplier."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/linker/GuardingTypeConverterFactory.html#convertToType(java.lang.Class,java.lang.Class,java.util.function.Supplier)\"\u003e\u003ccode\u003eGuardingTypeConverterFactory.convertToType(Class, Class, Supplier)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoperation\u003c/code\u003e - the operation to execute in context of the specified lookup.",
          "\u003ccode\u003elookupSupplier\u003c/code\u003e - secure supplier of the lookup"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either action or lookupSupplier are null."
        ],
        "return": [
          "the return value of the action"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.dynalink.linker.LinkerServices",
  "comment": "Interface for services provided to \n\u003ca href\u003d\"GuardingDynamicLinker.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingDynamicLinker\u003c/code\u003e\u003c/a\u003e instances by the \n\u003ca href\u003d\"../DynamicLinker.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eDynamicLinker\u003c/code\u003e\u003c/a\u003e that owns them.",
  "tagMap": {}
}