{
  "packageName": "jdk.dynalink.linker",
  "simpleName": "ConversionComparator",
  "moduleName": "jdk.dynalink",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.dynalink.linker.ConversionComparator$Comparison",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "sourceType"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "targetType1"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "targetType2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compareConversion",
      "comment": "Determines which of the two target types is the preferred conversion target from a source type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceType\u003c/code\u003e - the source type.",
          "\u003ccode\u003etargetType1\u003c/code\u003e - one potential target type",
          "\u003ccode\u003etargetType2\u003c/code\u003e - another potential target type."
        ],
        "return": [
          "one of Comparison constants that establish which - if any - of the target types is preferred for the conversion."
        ]
      }
    }
  ],
  "innerClasses": [
    "jdk.dynalink.linker.ConversionComparator$Comparison"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.dynalink.linker.ConversionComparator",
  "comment": "Optional interface to be implemented by \n\u003ca href\u003d\"GuardingTypeConverterFactory.html\" title\u003d\"interface in jdk.dynalink.linker\"\u003e\u003ccode\u003eGuardingTypeConverterFactory\u003c/code\u003e\u003c/a\u003e implementers. Language-specific conversions can cause increased overloaded method resolution ambiguity, as many methods can become applicable because of additional conversions. The static way of selecting the \"most specific\" method will fail more often, because there will be multiple maximally specific method with unrelated signatures. In these cases, language runtimes can be asked to resolve the ambiguity by expressing preferences for one conversion over the other.",
  "tagMap": {}
}