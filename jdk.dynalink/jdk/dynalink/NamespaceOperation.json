{
  "packageName": "jdk.dynalink",
  "simpleName": "NamespaceOperation",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.dynalink.Operation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseOperation",
      "comment": "Returns the base operation of this named operation.",
      "tagMap": {
        "return": [
          "the base operation of this named operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.Namespace",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNamespaces",
      "comment": "Returns the namespaces in this namespace operation. The returned array is a copy and changes to it don\u0027t have effect on this object.",
      "tagMap": {
        "return": [
          "the namespaces in this namespace operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNamespaceCount",
      "comment": "Returns the number of namespaces in this namespace operation.",
      "tagMap": {
        "return": [
          "the number of namespaces in this namespace operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.Namespace",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNamespace",
      "comment": "Returns the i-th namespace in this namespace operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the namespace index"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range."
        ],
        "return": [
          "the i-th namespace in this namespace operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Namespace",
            "type": "Class"
          },
          "field": {
            "name": "namespace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Returns true if this namespace operation contains a namespace equal to the specified namespace.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespace\u003c/code\u003e - the namespace being searched for. Must not be null."
        ],
        "return": [
          "true if the if this namespace operation contains a namespace equal to the specified namespace."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if the other object is also a namespace operation and their base operation and namespaces are equal.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare to"
        ],
        "return": [
          "true if this object is equal to the other one, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code of this namespace operation. Defined to be equal to baseOperation.hashCode() + 31 * Arrays.hashCode(namespaces).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the string representation of this namespace operation. Defined to be the toString of its base operation, followed by a colon character, followed with the list of its namespaces separated with the vertical line character (e.g. \"GET:PROPERTY|ELEMENT\").",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of this namespace operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.Operation",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBaseOperation",
      "comment": "If the passed operation is a namespace operation, returns its getBaseOperation(), otherwise returns the operation as is.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation"
        ],
        "return": [
          "the base operation of the passed operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.Namespace",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getNamespaces",
      "comment": "If the passed operation is a namespace operation, returns its getNamespaces(), otherwise returns an empty array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation"
        ],
        "return": [
          "the namespaces of the passed operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "baseOperation"
          }
        },
        {
          "type": {
            "name": "jdk.dynalink.Namespace",
            "type": "Class"
          },
          "field": {
            "name": "namespace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "contains",
      "comment": "Returns true if the specified operation is a NamespaceOperation and its base operation is equal to the specified operation, and it contains the specified namespace. If it is not a NamespaceOperation, then it returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation. Must not be null.",
          "\u003ccode\u003ebaseOperation\u003c/code\u003e - the base operation being searched for. Must not be null.",
          "\u003ccode\u003enamespace\u003c/code\u003e - the namespace being searched for. Must not be null."
        ],
        "return": [
          "true if the if the passed operation is a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/NamespaceOperation.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eNamespaceOperation\u003c/code\u003e\u003c/a\u003e, its base operation equals the searched base operation, and contains a namespace equal to the searched namespace."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "baseOperation"
          }
        },
        {
          "type": {
            "name": "jdk.dynalink.Namespace",
            "type": "Class"
          },
          "field": {
            "name": "namespaces"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new namespace operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseOperation\u003c/code\u003e - the base operation that operates on one or more namespaces.",
          "\u003ccode\u003enamespaces\u003c/code\u003e - one or more namespaces this operation operates on."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if less than one namespace is specified, or the base operation is itself a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/NamespaceOperation.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eNamespaceOperation\u003c/code\u003e\u003c/a\u003e or a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.dynalink/jdk/dynalink/NamedOperation.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eNamedOperation\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either the \n\u003ccode\u003enamespaces\u003c/code\u003e array or any of its elements are \n\u003ccode\u003enull\u003c/code\u003e, or if \n\u003ccode\u003ebaseOperation\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.dynalink.NamespaceOperation",
  "comment": "Describes an operation that operates on at least one \n\u003ca href\u003d\"Namespace.html\" title\u003d\"interface in jdk.dynalink\"\u003e\u003ccode\u003eNamespace\u003c/code\u003e\u003c/a\u003e of an object. E.g. a property getter would be described as \n\u003cpre\u003e Operation propertyGetter \u003d new NamespaceOperation(\n     StandardOperation.GET,\n     StandardNamespace.PROPERTY);\n \u003c/pre\u003e They are often combined with \n\u003ca href\u003d\"NamedOperation.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eNamedOperation\u003c/code\u003e\u003c/a\u003e, e.g. to express a property getter for a property named \"color\", you would construct: \n\u003cpre\u003e Operation colorPropertyGetter \u003d new NamedOperation(\n     new NamespaceOperation(\n         StandardOperation.GET,\n         StandardNamespace.PROPERTY),\n     \"color\");\n \u003c/pre\u003e \n\u003cp\u003eWhile \u003ccode\u003eNamespaceOperation\u003c/code\u003e can be constructed directly, it is often convenient to use the \u003ca href\u003d\"Operation.html#withNamespace(jdk.dynalink.Namespace)\"\u003e\u003ccode\u003eOperation.withNamespace(Namespace)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Operation.html#withNamespaces(jdk.dynalink.Namespace...)\"\u003e\u003ccode\u003eOperation.withNamespaces(Namespace...)\u003c/code\u003e\u003c/a\u003e factory methods instead, e.g.: \u003c/p\u003e\n\u003cpre\u003e Operation getElementOrPropertyEmpty \u003d\n     StandardOperation.GET\n         .withNamespace(StandardNamespace.PROPERTY)\n         .named(\"color\");\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eOperations on multiple namespaces\u003c/h2\u003e If multiple namespaces are specified, the namespaces are treated as alternatives to each other in order of preference. The semantics of such operation is \"first applicable\". That is, a composite of \n\u003ccode\u003eGET:PROPERTY|ELEMENT:color\u003c/code\u003e should be interpreted as \n\u003ci\u003eget the property named \"color\" on the object, but if the property does not exist, then get the collection element named \"color\" instead\u003c/i\u003e. \n\u003cp\u003e Operations with multiple namespaces are helpful in implementation of languages that don\u0027t distinguish between one or more of the namespaces, or when expressing operations against objects that can be considered both ordinary objects and collections, e.g. Java \u003ca href\u003d\"../../../java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e objects. A \u003ccode\u003eGET:PROPERTY|ELEMENT:empty\u003c/code\u003e operation against a Java map will always match the \u003ca href\u003d\"../../../java.base/java/util/Map.html#isEmpty()\"\u003e\u003ccode\u003eMap.isEmpty()\u003c/code\u003e\u003c/a\u003e property, but \u003ccode\u003eGET:ELEMENT|PROPERTY:empty\u003c/code\u003e will actually match a map element with key \u003ccode\u003e\"empty\"\u003c/code\u003e if the map contains that key, and only fall back to the \u003ccode\u003eisEmpty()\u003c/code\u003e property getter if the map does not contain the key. If the source language mandates this semantics, it can be easily achieved using operations on multiple namespaces. \u003c/p\u003e\n\u003cp\u003e Even if the language itself doesn\u0027t distinguish between some of the namespaces, it can be helpful to map different syntaxes to different namespace orderings. E.g. the source expression \u003ccode\u003eobj.color\u003c/code\u003e could map to \u003ccode\u003eGET:PROPERTY|ELEMENT|METHOD:color\u003c/code\u003e, but a different source expression that looks like collection element access \u003ccode\u003eobj[key]\u003c/code\u003e could be expressed instead as \u003ccode\u003eGET:ELEMENT|PROPERTY|METHOD\u003c/code\u003e in order to favor the element semantics. Finally, if the retrieved value is subsequently called, then it makes sense to bring \u003ccode\u003eMETHOD\u003c/code\u003e to the front of the namespace list: the getter part of the source expression \u003ccode\u003eobj.color()\u003c/code\u003e could be \u003ccode\u003eGET:METHOD|PROPERTY|ELEMENT:color\u003c/code\u003e and the one for \u003ccode\u003eobj[key]()\u003c/code\u003e could be \u003ccode\u003eGET:METHOD|ELEMENT|PROPERTY\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The base operation of a namespace operation can not itself be a namespace or named operation, but rather one of simple operations such are elements of \u003ca href\u003d\"StandardOperation.html\" title\u003d\"enum class in jdk.dynalink\"\u003e\u003ccode\u003eStandardOperation\u003c/code\u003e\u003c/a\u003e. A namespace operation itself can serve as the base operation of a named operation, though; a typical way to construct e.g. the \u003ccode\u003eGET:ELEMENT|PROPERTY:empty\u003c/code\u003e from above would be: \u003c/p\u003e\n\u003cpre\u003e Operation getElementOrPropertyEmpty \u003d StandardOperation.GET\n     .withNamespaces(\n         StandardNamespace.ELEMENT,\n         StandardNamespace.PROPERTY)\n     .named(\"empty\");\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}