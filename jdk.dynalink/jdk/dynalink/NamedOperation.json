{
  "packageName": "jdk.dynalink",
  "simpleName": "NamedOperation",
  "moduleName": "jdk.dynalink",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.dynalink.Operation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseOperation",
      "comment": "Returns the base operation of this named operation.",
      "tagMap": {
        "return": [
          "the base operation of this named operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of this named operation.",
      "tagMap": {
        "return": [
          "the name of this named operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.NamedOperation",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "newName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "changeName",
      "comment": "Finds or creates a named operation that differs from this one only in the name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewName\u003c/code\u003e - the new name to replace the old name with."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the name is null."
        ],
        "return": [
          "a named operation with the changed name."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this named operation to another object. Returns true if the other object is also a named operation, and both their base operations and name are equal.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code of this named operation. It is defined to be equal to baseOperation.hashCode() + 31 * name.hashCode().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the string representation of this named operation. It is defined to be equal to baseOperation.toString() + \":\" + name.toString().",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.dynalink.Operation",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBaseOperation",
      "comment": "If the passed operation is a named operation, returns its getBaseOperation(), otherwise returns the operation as is.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation"
        ],
        "return": [
          "the base operation of the passed operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getName",
      "comment": "If the passed operation is a named operation, returns its getName(), otherwise returns null. Note that a named operation object can never have a null name, therefore returning null is indicative that the passed operation is not, in fact, a named operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation"
        ],
        "return": [
          "the name in the passed operation, or null if it is not a named operation."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "jdk.dynalink.Operation",
            "type": "Class"
          },
          "field": {
            "name": "baseOperation"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new named operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseOperation\u003c/code\u003e - the base operation that is associated with a name.",
          "\u003ccode\u003ename\u003c/code\u003e - the name associated with the base operation. Note that the name is not necessarily a string, but can be an arbitrary object. As the name is used for addressing, it can be an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e when meant to be used as an index into an array or list etc."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003ebaseOperation\u003c/code\u003e or \n\u003ccode\u003ename\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseOperation\u003c/code\u003e is itself a \n\u003ccode\u003eNamedOperation\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.dynalink.NamedOperation",
  "comment": "Operation that associates a name with another operation. Typically used with operations that normally take a name or an index to bind them to a fixed name. E.g. \n\u003cpre\u003e     new NamedOperation(\n         new NamespaceOperation(\n             StandardOperation.GET,\n             StandardNamespace.PROPERTY),\n         \"color\")\n \u003c/pre\u003e will be a named operation for getting the property named \"color\" on the object it is applied to, and \n\u003cpre\u003e     new NamedOperation(\n         new NamespaceOperation(\n             StandardOperation.GET,\n             StandardNamespace.ELEMENT),\n         3)\n \u003c/pre\u003e will be a named operation for getting the element at index 3 from the collection it is applied to (\"name\" in this context is akin to \"address\" and encompasses both textual names, numeric indices, or any other kinds of addressing that linkers can understand). In these cases, the expected signature of the call site for the operation will change to no longer include the name parameter. Specifically, the documentation for all \n\u003ca href\u003d\"StandardOperation.html\" title\u003d\"enum class in jdk.dynalink\"\u003e\u003ccode\u003eStandardOperation\u003c/code\u003e\u003c/a\u003e members describes how they are affected by being incorporated into a named operation. \n\u003cp\u003eWhile \u003ccode\u003eNamedOperation\u003c/code\u003e can be constructed directly, it is often convenient to use the \u003ca href\u003d\"Operation.html#named(java.lang.Object)\"\u003e\u003ccode\u003eOperation.named(Object)\u003c/code\u003e\u003c/a\u003e factory method instead, e.g.: \u003c/p\u003e\n\u003cpre\u003e    StandardOperation.GET\n        .withNamespace(StandardNamespace.ELEMENT),\n        .named(3)\n     )\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Even though \u003ccode\u003eNamedOperation\u003c/code\u003e is most often used with \u003ca href\u003d\"NamespaceOperation.html\" title\u003d\"class in jdk.dynalink\"\u003e\u003ccode\u003eNamespaceOperation\u003c/code\u003e\u003c/a\u003e as its base, it can have other operations as its base too (except another named operation). Specifically, \u003ca href\u003d\"StandardOperation.html#CALL\"\u003e\u003ccode\u003eStandardOperation.CALL\u003c/code\u003e\u003c/a\u003e as well as \u003ca href\u003d\"StandardOperation.html#NEW\"\u003e\u003ccode\u003eStandardOperation.NEW\u003c/code\u003e\u003c/a\u003e can both be used with \u003ccode\u003eNamedOperation\u003c/code\u003e directly. The contract for these operations is such that when they are used as named operations, their name is only used for diagnostic messages, usually containing the textual representation of the source expression that retrieved the callee, e.g. \u003ccode\u003eStandardOperation.CALL.named(\"window.open\")\u003c/code\u003e. \u003c/p\u003e",
  "tagMap": {}
}