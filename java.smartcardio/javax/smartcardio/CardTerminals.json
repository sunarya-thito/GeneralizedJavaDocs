{
  "packageName": "javax.smartcardio",
  "simpleName": "CardTerminals",
  "moduleName": "java.smartcardio",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.smartcardio.CardTerminal",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.smartcardio.CardException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "list",
      "comment": "Returns an unmodifiable list of all available terminals.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/CardException.html\" title\u003d\"class in javax.smartcardio\"\u003eCardException\u003c/a\u003e\u003c/code\u003e - if the card operation failed"
        ],
        "return": [
          "an unmodifiable list of all available terminals."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.smartcardio.CardTerminal",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.smartcardio.CardException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.smartcardio.CardTerminals$State",
            "type": "Class"
          },
          "field": {
            "name": "state"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "list",
      "comment": "Returns an unmodifiable list of all terminals matching the specified state. If state is State.ALL, this method returns all CardTerminals encapsulated by this object. If state is State.CARD_PRESENT or State.CARD_ABSENT, it returns all CardTerminals where a card is currently present or absent, respectively. If state is State.CARD_INSERTION or State.CARD_REMOVAL, it returns all CardTerminals for which an insertion (or removal, respectively) was detected during the last call to waitForChange(). If waitForChange() has not been called on this object, CARD_INSERTION is equivalent to CARD_PRESENT and CARD_REMOVAL is equivalent to CARD_ABSENT. For an example of the use of CARD_INSERTION, see waitForChange().",
      "tagMap": {
        "param": [
          "\u003ccode\u003estate\u003c/code\u003e - the State"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if state is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/CardException.html\" title\u003d\"class in javax.smartcardio\"\u003eCardException\u003c/a\u003e\u003c/code\u003e - if the card operation failed"
        ],
        "return": [
          "an unmodifiable list of all terminals matching the specified state."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.smartcardio.CardTerminal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTerminal",
      "comment": "Returns the terminal with the specified name or null if no such terminal exists.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the terminal name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is null"
        ],
        "return": [
          "the terminal with the specified name or null if no such terminal exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.smartcardio.CardException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "waitForChange",
      "comment": "Waits for card insertion or removal in any of the terminals of this object. This call is equivalent to calling waitForChange(0).",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eCardTerminals\u003c/code\u003e object does not contain any terminals",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/CardException.html\" title\u003d\"class in javax.smartcardio\"\u003eCardException\u003c/a\u003e\u003c/code\u003e - if the card operation failed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.smartcardio.CardException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "waitForChange",
      "comment": "Waits for card insertion or removal in any of the terminals of this object or until the timeout expires. This method examines each CardTerminal of this object. If a card was inserted into or removed from a CardTerminal since the previous call to waitForChange(), it returns immediately. Otherwise, or if this is the first call to waitForChange() on this object, it blocks until a card is inserted into or removed from a CardTerminal. If timeout is greater than 0, the method returns after timeout milliseconds even if there is no change in state. In that case, this method returns false; otherwise it returns true. This method is often used in a loop in combination with list(State.CARD_INSERTION), for example:   TerminalFactory factory \u003d ...;\n  CardTerminals terminals \u003d factory.terminals();\n  while (true) {\n      for (CardTerminal terminal : terminals.list(CARD_INSERTION)) {\n          // examine Card in terminal, return if it matches\n      }\n      terminals.waitForChange();\n  }",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - if positive, block for up to \n\u003ccode\u003etimeout\u003c/code\u003e milliseconds; if zero, block indefinitely; must not be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eCardTerminals\u003c/code\u003e object does not contain any terminals",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if timeout is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/CardException.html\" title\u003d\"class in javax.smartcardio\"\u003eCardException\u003c/a\u003e\u003c/code\u003e - if the card operation failed"
        ],
        "return": [
          "false if the method returns due to an expired timeout, true otherwise."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new CardTerminals object. This constructor is called by subclasses only. Application should call TerminalFactory.terminals() to obtain a CardTerminals object.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.smartcardio.CardTerminals$State"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.smartcardio.CardTerminals",
  "comment": "The set of terminals supported by a TerminalFactory. This class allows applications to enumerate the available CardTerminals, obtain a specific CardTerminal, or wait for the insertion or removal of cards. \n\u003cp\u003eThis class is multi-threading safe and can be used by multiple threads concurrently. However, this object keeps track of the card presence state of each of its terminals. Multiple objects should be used if independent calls to \u003ca href\u003d\"#waitForChange()\"\u003ewaitForChange()\u003c/a\u003e are required. \u003c/p\u003e\n\u003cp\u003eApplications can obtain instances of this class by calling \u003ca href\u003d\"TerminalFactory.html#terminals()\"\u003eTerminalFactory.terminals()\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/TerminalFactory.html\" title\u003d\"class in javax.smartcardio\"\u003e\u003ccode\u003eTerminalFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/CardTerminal.html\" title\u003d\"class in javax.smartcardio\"\u003e\u003ccode\u003eCardTerminal\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}