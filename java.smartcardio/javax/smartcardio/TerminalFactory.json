{
  "packageName": "javax.smartcardio",
  "simpleName": "TerminalFactory",
  "moduleName": "java.smartcardio",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultType",
      "comment": "Get the default TerminalFactory type. It is determined as follows: when this class is initialized, the system property javax.smartcardio.TerminalFactory.DefaultType is examined. If it is set, a TerminalFactory of this type is instantiated by calling the getInstance(String,Object) method passing null as the value for params. If the call succeeds, the type becomes the default type and the factory becomes the default factory. If the system property is not set or the getInstance() call fails for any reason, the system defaults to an implementation specific default type and TerminalFactory.",
      "tagMap": {
        "return": [
          "the default TerminalFactory type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.smartcardio.TerminalFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefault",
      "comment": "Returns the default TerminalFactory instance. See getDefaultType() for more information. A default TerminalFactory is always available. However, depending on the implementation, it may not offer any terminals.",
      "tagMap": {
        "return": [
          "the default TerminalFactory"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.smartcardio.TerminalFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a TerminalFactory of the specified type that is initialized with the specified parameters. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new TerminalFactory object encapsulating the TerminalFactorySpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method. The TerminalFactory is initialized with the specified parameters Object. The type of parameters needed may vary between different types of TerminalFactorys.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of the requested TerminalFactory",
          "\u003ccode\u003eparams\u003c/code\u003e - the parameters to pass to the TerminalFactorySpi implementation, or null if no parameters are needed"
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if type is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no Provider supports a TerminalFactorySpi of the specified type"
        ],
        "return": [
          "a TerminalFactory of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.smartcardio.TerminalFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a TerminalFactory of the specified type that is initialized with the specified parameters. A new TerminalFactory object encapsulating the TerminalFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method. The TerminalFactory is initialized with the specified parameters Object. The type of parameters needed may vary between different types of TerminalFactorys.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of the requested TerminalFactory",
          "\u003ccode\u003eparams\u003c/code\u003e - the parameters to pass to the TerminalFactorySpi implementation, or null if no parameters are needed",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if type is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if provider is null or the empty String",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a TerminalFactorySpi implementation of the specified type is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no TerminalFactory of the specified type could be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider could not be found"
        ],
        "return": [
          "a TerminalFactory of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.smartcardio.TerminalFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a TerminalFactory of the specified type that is initialized with the specified parameters. A new TerminalFactory object encapsulating the TerminalFactorySpi implementation from the specified provider object is returned. Note that the specified provider object does not have to be registered in the provider list. The TerminalFactory is initialized with the specified parameters Object. The type of parameters needed may vary between different types of TerminalFactorys.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of the requested TerminalFactory",
          "\u003ccode\u003eparams\u003c/code\u003e - the parameters to pass to the TerminalFactorySpi implementation, or null if no parameters are needed",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if type is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if provider is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a TerminalFactorySpi implementation of the specified type is not available from the specified Provider"
        ],
        "return": [
          "a TerminalFactory of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProvider",
      "comment": "Returns the provider of this TerminalFactory.",
      "tagMap": {
        "return": [
          "the provider of this TerminalFactory."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Returns the type of this TerminalFactory. This is the value that was specified in the getInstance() method that returned this object.",
      "tagMap": {
        "return": [
          "the type of this TerminalFactory"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.smartcardio.CardTerminals",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "terminals",
      "comment": "Returns a new CardTerminals object encapsulating the terminals supported by this factory. See the class comment of the CardTerminals class regarding how the returned objects can be shared and reused.",
      "tagMap": {
        "return": [
          "a new CardTerminals object encapsulating the terminals supported by this factory."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this TerminalFactory.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this TerminalFactory."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "javax.smartcardio.TerminalFactory",
  "comment": "A factory for CardTerminal objects. It allows an application to \n\u003cul\u003e \n \u003cli\u003eobtain a TerminalFactory by calling one of the static factory methods in this class (\u003ca href\u003d\"#getDefault()\"\u003egetDefault()\u003c/a\u003e or \u003ca href\u003d\"#getInstance(java.lang.String,java.lang.Object)\"\u003egetInstance()\u003c/a\u003e). \u003c/li\u003e\n \u003cli\u003euse this TerminalFactory object to access the CardTerminals by calling the \u003ca href\u003d\"#terminals()\"\u003eterminals()\u003c/a\u003e method. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003eEach TerminalFactory has a \u003ccode\u003etype\u003c/code\u003e indicating how it was implemented. It must be specified when the implementation is obtained using a \u003ca href\u003d\"#getInstance(java.lang.String,java.lang.Object)\"\u003egetInstance()\u003c/a\u003e method and can be retrieved via the \u003ca href\u003d\"#getType()\"\u003egetType()\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003eThe following standard type names have been defined: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  \u003ccode\u003ePC/SC\u003c/code\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  an implementation that calls into the PC/SC Smart Card stack of the host platform. Implementations do not require parameters and accept \"null\" as argument in the getInstance() calls. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ccode\u003eNone\u003c/code\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  an implementation that does not supply any CardTerminals. On platforms that do not support other implementations, \n  \u003ca href\u003d\"#getDefaultType()\"\u003egetDefaultType()\u003c/a\u003e returns \n  \u003ccode\u003eNone\u003c/code\u003e and \n  \u003ca href\u003d\"#getDefault()\"\u003egetDefault()\u003c/a\u003e returns an instance of a \n  \u003ccode\u003eNone\u003c/code\u003e TerminalFactory. Factories of this type cannot be obtained by calling the \n  \u003ccode\u003egetInstance()\u003c/code\u003e methods. \n \u003c/dd\u003e\n\u003c/dl\u003e Additional standard types may be defined in the future. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Provider implementations that accept initialization parameters via the \u003ccode\u003egetInstance()\u003c/code\u003e methods are strongly encouraged to use a \u003ca href\u003d\"../../../java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003eProperties\u003c/a\u003e object as the representation for String name-value pair based parameters whenever possible. This allows applications to more easily interoperate with multiple providers than if each provider used different provider specific class as parameters. \u003c/p\u003e\n\u003cp\u003eTerminalFactory utilizes an extensible service provider framework. Service providers that wish to add a new implementation should see the \u003ca href\u003d\"TerminalFactorySpi.html\" title\u003d\"class in javax.smartcardio\"\u003eTerminalFactorySpi\u003c/a\u003e class for more information.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.smartcardio/javax/smartcardio/CardTerminals.html\" title\u003d\"class in javax.smartcardio\"\u003e\u003ccode\u003eCardTerminals\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}