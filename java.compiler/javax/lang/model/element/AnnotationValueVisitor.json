{
  "packageName": "javax.lang.model.element",
  "simpleName": "AnnotationValueVisitor",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visit",
      "comment": "Visits an annotation value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eav\u003c/code\u003e - the value to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visit",
      "comment": "A convenience method equivalent to visit(av, null).",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is \n\u003ccode\u003evisit(av, null)\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eav\u003c/code\u003e - the value to visit"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitBoolean",
      "comment": "Visits a boolean value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitByte",
      "comment": "Visits a byte value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitChar",
      "comment": "Visits a char value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitDouble",
      "comment": "Visits a double value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitFloat",
      "comment": "Visits a float value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitInt",
      "comment": "Visits an int value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitLong",
      "comment": "Visits a long value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitShort",
      "comment": "Visits a short value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitString",
      "comment": "Visits a string value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitType",
      "comment": "Visits a type value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitEnumConstant",
      "comment": "Visits an enum value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitAnnotation",
      "comment": "Visits an annotation value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitArray",
      "comment": "Visits an array value in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evals\u003c/code\u003e - the value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.AnnotationValueVisitor",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitUnknown",
      "comment": "Visits an unknown kind of annotation value. This can occur if the language evolves and new kinds of value can be stored in an annotation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eav\u003c/code\u003e - the unknown value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/UnknownAnnotationValueException.html\" title\u003d\"class in javax.lang.model.element\"\u003eUnknownAnnotationValueException\u003c/a\u003e\u003c/code\u003e - a visitor implementation may optionally throw this exception"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    },
    {
      "name": "P",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.lang.model.element.AnnotationValueVisitor",
  "comment": "A visitor of the values of annotation interface elements, using a variant of the visitor design pattern. Unlike a standard visitor which dispatches based on the concrete type of a member of a type hierarchy, this visitor dispatches based on the type of data stored; there are no distinct subclasses for storing, for example, \n\u003ccode\u003eboolean\u003c/code\u003e values versus \n\u003ccode\u003eint\u003c/code\u003e values. Classes implementing this interface are used to operate on a value when the type of that value is unknown at compile time. When a visitor is passed to a value\u0027s \n\u003ca href\u003d\"AnnotationValue.html#accept(javax.lang.model.element.AnnotationValueVisitor,P)\"\u003e\u003ccode\u003eaccept\u003c/code\u003e\u003c/a\u003e method, the \n\u003ccode\u003evisit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e method applicable to that value is invoked. \n\u003cp\u003e Classes implementing this interface may or may not throw a \u003ccode\u003eNullPointerException\u003c/code\u003e if the additional parameter \u003ccode\u003ep\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e; see documentation of the implementing class for details.\u003c/p\u003e",
  "tagMap": {
    "apiNote": [
      "\u003cstrong\u003eWARNING:\u003c/strong\u003e It is possible that methods will be added to this interface to accommodate new, currently unknown, language structures added to future versions of the Java programming language. Such additions have already occurred in another visitor interface in this package to support language features added after this API was introduced. Visitor classes directly implementing this interface may be source incompatible with future versions of the platform. To avoid this source incompatibility, visitor implementations are encouraged to instead extend the appropriate abstract visitor class that implements this interface. However, an API should generally use this visitor interface as the type for parameters, return type, etc. rather than one of the abstract classes. \n\u003cp\u003eMethods to accommodate new language constructs are expected to be added as default methods to provide strong source compatibility, as done for \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/ElementVisitor.html#visitModule(javax.lang.model.element.ModuleElement,P)\"\u003e\u003ccode\u003evisitModule\u003c/code\u003e\u003c/a\u003e in \u003ccode\u003eElementVisitor\u003c/code\u003e. The implementations of the default methods in this interface will in turn call \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html#visitUnknown(javax.lang.model.element.AnnotationValue,P)\"\u003e\u003ccode\u003evisitUnknown\u003c/code\u003e\u003c/a\u003e, behavior that will be overridden in concrete visitors supporting the source version with the new language construct. \u003c/p\u003e\n\u003cp\u003eThere are several families of classes implementing this visitor interface in the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/package-summary.html\"\u003eutil package\u003c/a\u003e. The families follow a naming pattern along the lines of \u003ccode\u003eFooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e where \u003ci\u003eN\u003c/i\u003e indicates the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html\" title\u003d\"enum class in javax.lang.model\"\u003esource version\u003c/a\u003e the visitor is appropriate for. In particular, a \u003ccode\u003eFooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e is expected to handle all language constructs present in source version \u003ci\u003eN\u003c/i\u003e. If there are no new language constructs added in version \u003ci\u003eN\u003c/i\u003e\u0026nbsp;+\u0026nbsp;1 (or subsequent releases), \u003ccode\u003e FooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e may also handle that later source version; in that case, the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/SupportedSourceVersion.html\" title\u003d\"annotation in javax.annotation.processing\"\u003e\u003ccode\u003eSupportedSourceVersion\u003c/code\u003e\u003c/a\u003e annotation on the \u003ccode\u003e FooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e class will indicate a later version. When visiting an annotation value representing a language construct introduced \u003cstrong\u003eafter\u003c/strong\u003e source version \u003ci\u003eN\u003c/i\u003e, a \u003ccode\u003e FooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e will throw an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/UnknownAnnotationValueException.html\" title\u003d\"class in javax.lang.model.element\"\u003e\u003ccode\u003eUnknownAnnotationValueException\u003c/code\u003e\u003c/a\u003e unless that behavior is overridden. \u003c/p\u003e\n\u003cp\u003eWhen choosing which member of a visitor family to subclass, subclassing the most recent one increases the range of source versions covered. When choosing which visitor family to subclass, consider their built-in capabilities: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eAbstractAnnotationValueVisitor\u003c/code\u003e\u003c/a\u003es: Skeletal visitor implementations. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/SimpleAnnotationValueVisitor6.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eSimpleAnnotationValueVisitor\u003c/code\u003e\u003c/a\u003es: Support default actions and a default return value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}