{
  "packageName": "javax.lang.model.element",
  "simpleName": "Element",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.lang.model.AnnotatedConstruct",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.lang.model.type.TypeMirror",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asType",
      "comment": "Returns the type defined by this element.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/Types.html\" title\u003d\"interface in javax.lang.model.util\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/ExecutableElement.html#asType()\"\u003e\u003ccode\u003eExecutableElement.asType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/ModuleElement.html#asType()\"\u003e\u003ccode\u003eModuleElement.asType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/PackageElement.html#asType()\"\u003e\u003ccode\u003ePackageElement.asType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/TypeElement.html#asType()\"\u003e\u003ccode\u003eTypeElement.asType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/TypeParameterElement.html#asType()\"\u003e\u003ccode\u003eTypeParameterElement.asType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/VariableElement.html#asType()\"\u003e\u003ccode\u003eVariableElement.asType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the type defined by this element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.element.ElementKind",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKind",
      "comment": "Returns the kind of this element. The kind of a package is PACKAGE. The kind of a module is MODULE. The kind of a type element is one of ANNOTATION_TYPE, CLASS, ENUM, INTERFACE, or RECORD. The kind of a variable is one of ENUM_CONSTANT, EXCEPTION_PARAMETER, FIELD, LOCAL_VARIABLE, PARAMETER, RESOURCE_VARIABLE, or BINDING_VARIABLE. The kind of an executable is one of CONSTRUCTOR, INSTANCE_INIT, METHOD, or STATIC_INIT. The kind of a type parameter is TYPE_PARAMETER. The kind of a record component is RECORD_COMPONENT.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003ekind\u003c/code\u003e of this element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "javax.lang.model.element.Modifier",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getModifiers",
      "comment": "Returns the modifiers of this element, excluding annotations. Implicit modifiers, such as the public and static modifiers of interface members, are included.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the modifiers of this element, or an empty set if there are none"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.element.Name",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSimpleName",
      "comment": "Returns the simple (unqualified) name of this element. The name of a generic class or interface does not include any reference to its formal type parameters. For example, the simple name of the type element representing java.util.Set\u003cE\u003e is \"Set\". If this element represents an unnamed package or unnamed module, an empty name is returned. If it represents a constructor, the name \"\u003cinit\u003e\" is returned. If it represents a static initializer, the name \"\u003cclinit\u003e\" is returned. If it represents an anonymous class or instance initializer, an empty name is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/PackageElement.html#getSimpleName()\"\u003e\u003ccode\u003ePackageElement.getSimpleName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/ExecutableElement.html#getSimpleName()\"\u003e\u003ccode\u003eExecutableElement.getSimpleName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/TypeElement.html#getSimpleName()\"\u003e\u003ccode\u003eTypeElement.getSimpleName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/VariableElement.html#getSimpleName()\"\u003e\u003ccode\u003eVariableElement.getSimpleName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/ModuleElement.html#getSimpleName()\"\u003e\u003ccode\u003eModuleElement.getSimpleName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/RecordComponentElement.html#getSimpleName()\"\u003e\u003ccode\u003eRecordComponentElement.getSimpleName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the simple (unqualified) name of this element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.element.Element",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnclosingElement",
      "comment": "Returns the innermost element within which this element is, loosely speaking, enclosed. If this element is one whose declaration is lexically enclosed immediately within the declaration of another element, that other element is returned. If this is a top-level class or interface, its package is returned. If this is a package, its module is returned if such a module exists. Otherwise, null is returned. If this is a type parameter, the generic element of the type parameter is returned. If this is a method or constructor parameter, the executable element which declares the parameter is returned. If this is a record component, the record class which declares the record component is returned. If this is a module, null is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/Elements.html#getPackageOf(javax.lang.model.element.Element)\"\u003e\u003ccode\u003eElements.getPackageOf(javax.lang.model.element.Element)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the enclosing element, or \n\u003ccode\u003enull\u003c/code\u003e if there is none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnclosedElements",
      "comment": "Returns the elements that are, loosely speaking, directly enclosed by this element. A class or interface is considered to enclose the fields, methods, constructors, record components, and member classes and interfaces that it directly declares. A package encloses the top-level classes and interfaces within it, but is not considered to enclose subpackages. A module encloses packages within it. Enclosed elements may include implicitly declared mandated elements. Other kinds of elements are not currently considered to enclose any elements; however, that may change as this API or the programming language evolves.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.8.9\"\u003e8.8.9 Default Constructor\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.9\"\u003e8.9 Enum Classes\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/TypeElement.html#getEnclosedElements()\"\u003e\u003ccode\u003eTypeElement.getEnclosedElements()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/PackageElement.html#getEnclosedElements()\"\u003e\u003ccode\u003ePackageElement.getEnclosedElements()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/ModuleElement.html#getEnclosedElements()\"\u003e\u003ccode\u003eModuleElement.getEnclosedElements()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/Elements.html#getAllMembers(javax.lang.model.element.TypeElement)\"\u003e\u003ccode\u003eElements.getAllMembers(javax.lang.model.element.TypeElement)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "Elements of certain kinds can be isolated using methods in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/ElementFilter.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eElementFilter\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the enclosed elements, or an empty list if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Returns true if the argument represents the same element as this, or false otherwise.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "apiNote": [
          "The identity of an element involves implicit state not directly accessible from the element\u0027s methods, including state about the presence of unrelated types. Element objects created by different implementations of these interfaces should \n\u003ci\u003enot\u003c/i\u003e be expected to be equal even if \"the same\" element is being modeled; this is analogous to the inequality of \n\u003ccode\u003eClass\u003c/code\u003e objects for the same class file loaded through different class loaders."
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be compared with this element"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the argument represents the same element as \n\u003ccode\u003ethis\u003c/code\u003e, or \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Obeys the general contract of Object.hashCode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/Element.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.AnnotationMirror",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationMirrors",
      "comment": "Returns the annotations that are directly present on this construct. To get inherited annotations as well, use getAllAnnotationMirrors. Note that any annotations returned by this method are declaration annotations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003egetAnnotationMirrors\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html\" title\u003d\"interface in javax.lang.model\"\u003eAnnotatedConstruct\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the annotations \n\u003cem\u003edirectly present\u003c/em\u003e on this construct; an empty list if there are none"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "annotationType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotation",
      "comment": "Returns this construct\u0027s annotation of the specified type if such an annotation is present, else null. The annotation returned by this method could contain an element whose value is of type Class. This value cannot be returned directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class might not be loadable at all. Attempting to read a Class object by invoking the relevant method on the returned annotation will result in a MirroredTypeException, from which the corresponding TypeMirror may be extracted. Similarly, attempting to read a Class[]-valued element will result in a MirroredTypesException. Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information — representations of annotation types currently loaded into the VM — rather than on the representations defined by and used throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for callers that are written to operate on a known, fixed set of annotation types. Note that any annotation returned by this method is a declaration annotation.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the annotation type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotationMirrors()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedElement.getAnnotation(java.lang.Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypeException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypesException\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html\" title\u003d\"interface in javax.lang.model\"\u003eAnnotatedConstruct\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the annotation type"
        ],
        "return": [
          "this construct\u0027s annotation of the specified type if such an annotation is \n\u003cem\u003epresent\u003c/em\u003e, else \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "annotationType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationsByType",
      "comment": "Returns annotations that are associated with this construct. If there are no annotations associated with this construct, the return value is an array of length 0. The order of annotations which are directly or indirectly present on a construct C is computed as if indirectly present annotations on C are directly present on C in place of their container annotation, in the order in which they appear in the value element of the container annotation. The difference between this method and AnnotatedConstruct.getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type, and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The annotations returned by this method could contain an element whose value is of type Class. This value cannot be returned directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class might not be loadable at all. Attempting to read a Class object by invoking the relevant method on the returned annotation will result in a MirroredTypeException, from which the corresponding TypeMirror may be extracted. Similarly, attempting to read a Class[]-valued element will result in a MirroredTypesException. Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information — representations of annotation types currently loaded into the VM — rather than on the representations defined by and used throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for callers that are written to operate on a known, fixed set of annotation types. Note that any annotations returned by this method are declaration annotations.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the annotation type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotationMirrors()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotation(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedElement.getAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypeException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypesException\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationsByType(java.lang.Class)\"\u003egetAnnotationsByType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html\" title\u003d\"interface in javax.lang.model\"\u003eAnnotatedConstruct\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the annotation type"
        ],
        "return": [
          "this construct\u0027s annotations for the specified annotation type if present on this construct, else an empty array"
        ],
        "since": [
          "8"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.lang.model.element.ElementVisitor",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              },
              {
                "name": "P",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "P",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        },
        {
          "name": "P",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "accept",
      "comment": "Applies a visitor to this element.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the return type of the visitor\u0027s methods",
          "\u003ccode\u003eP\u003c/code\u003e - the type of the additional parameter to the visitor\u0027s methods"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the visitor operating on this element",
          "\u003ccode\u003ep\u003c/code\u003e - additional parameter to the visitor"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.lang.model.element.Element",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/Elements.html\" title\u003d\"interface in javax.lang.model.util\"\u003e\u003ccode\u003eElements\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/TypeMirror.html\" title\u003d\"interface in javax.lang.model.type\"\u003e\u003ccode\u003eTypeMirror\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}