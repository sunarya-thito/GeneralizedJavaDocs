{
  "packageName": "javax.lang.model.element",
  "simpleName": "NestingKind",
  "moduleName": "java.compiler",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "javax.lang.model.element.NestingKind",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.lang.model.element.NestingKind",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.element.NestingKind",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNested",
      "comment": "Does this constant correspond to a nested type element? A nested type element is any that is not top-level. More specifically, an inner type element is any nested type element that is not static.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-14.html#jls-14.3\"\u003e14.3 Local Class Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "whether or not the constant is nested"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.lang.model.element.NestingKind",
  "comment": "The \n\u003ci\u003enesting kind\u003c/i\u003e of a type element. Type elements come in four varieties: top-level, member, local, and anonymous. \n\u003ci\u003eNesting kind\u003c/i\u003e is a non-standard term used here to denote this classification. \n\u003cp\u003eNote that it is possible additional nesting kinds will be added in future versions of the platform. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e The classes below are annotated with their nesting kind. \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e\n import java.lang.annotation.*;\n import static java.lang.annotation.RetentionPolicy.*;\n import javax.lang.model.element.*;\n import static javax.lang.model.element.NestingKind.*;\n\n @Nesting(TOP_LEVEL)\n public class NestingExamples {\n     @Nesting(MEMBER)\n     static class MemberClass1{}\n\n     @Nesting(MEMBER)\n     class MemberClass2{}\n\n     public static void main(String... argv) {\n         @Nesting(LOCAL)\n         class LocalClass{};\n\n         Class\u0026lt;?\u0026gt;[] classes \u003d {\n             NestingExamples.class,\n             MemberClass1.class,\n             MemberClass2.class,\n             LocalClass.class\n         };\n\n         for(Class\u0026lt;?\u0026gt; clazz : classes) {\n             System.out.format(\"%s is %s%n\",\n                               clazz.getName(),\n                               clazz.getAnnotation(Nesting.class).value());\n         }\n     }\n }\n\n @Retention(RUNTIME)\n @interface Nesting {\n     NestingKind value();\n }\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}