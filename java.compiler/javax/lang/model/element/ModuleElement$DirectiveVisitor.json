{
  "packageName": "javax.lang.model.element",
  "simpleName": "DirectiveVisitor",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$Directive",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visit",
      "comment": "Visits any directive as if by passing itself to that directive\u0027s accept method and passing null for the additional parameter.",
      "tagMap": {
        "implSpec": [
          "The default implementation is \n\u003ccode\u003ed.accept(v, null)\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$Directive",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visit",
      "comment": "Visits any directive as if by passing itself to that directive\u0027s accept method.",
      "tagMap": {
        "implSpec": [
          "The default implementation is \n\u003ccode\u003ed.accept(v, p)\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$RequiresDirective",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitRequires",
      "comment": "Visits a requires directive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$ExportsDirective",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitExports",
      "comment": "Visits an exports directive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$OpensDirective",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitOpens",
      "comment": "Visits an opens directive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$UsesDirective",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitUses",
      "comment": "Visits a uses directive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$ProvidesDirective",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitProvides",
      "comment": "Visits a provides directive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.ModuleElement$Directive",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitUnknown",
      "comment": "Visits an unknown directive. This can occur if the language evolves and new kinds of directive are added.",
      "tagMap": {
        "implSpec": [
          "The default implementation throws \n\u003ccode\u003enew UnknownDirectiveException(d, p)\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the directive to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/UnknownDirectiveException.html\" title\u003d\"class in javax.lang.model.element\"\u003eUnknownDirectiveException\u003c/a\u003e\u003c/code\u003e - a visitor implementation may optionally throw this exception"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    },
    {
      "name": "P",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "javax.lang.model.element.ModuleElement$DirectiveVisitor",
  "comment": "A visitor of module directives, in the style of the visitor design pattern. Classes implementing this interface are used to operate on a directive when the kind of directive is unknown at compile time. When a visitor is passed to a directive\u0027s \n\u003ca href\u003d\"ModuleElement.Directive.html#accept(javax.lang.model.element.ModuleElement.DirectiveVisitor,P)\"\u003e\u003ccode\u003eaccept\u003c/code\u003e\u003c/a\u003e method, the \n\u003ccode\u003evisit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e method applicable to that directive is invoked. \n\u003cp\u003e Classes implementing this interface may or may not throw a \u003ccode\u003eNullPointerException\u003c/code\u003e if the additional parameter \u003ccode\u003ep\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e; see documentation of the implementing class for details. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e It is possible that methods will be added to this interface to accommodate new, currently unknown, language structures added to future versions of the Java programming language. Methods to accommodate new language constructs will be added in a source \u003cem\u003ecompatible\u003c/em\u003e way using \u003cem\u003edefault methods\u003c/em\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}