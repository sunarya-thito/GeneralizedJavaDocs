{
  "packageName": "javax.lang.model",
  "simpleName": "AnnotatedConstruct",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.AnnotationMirror",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationMirrors",
      "comment": "Returns the annotations that are directly present on this construct.",
      "tagMap": {
        "return": [
          "the annotations \n\u003cem\u003edirectly present\u003c/em\u003e on this construct; an empty list if there are none"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotation",
      "comment": "Returns this construct\u0027s annotation of the specified type if such an annotation is present, else null. The annotation returned by this method could contain an element whose value is of type Class. This value cannot be returned directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class might not be loadable at all. Attempting to read a Class object by invoking the relevant method on the returned annotation will result in a MirroredTypeException, from which the corresponding TypeMirror may be extracted. Similarly, attempting to read a Class[]-valued element will result in a MirroredTypesException. Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information — representations of annotation types currently loaded into the VM — rather than on the representations defined by and used throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for callers that are written to operate on a known, fixed set of annotation types.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.1\"\u003e9.6.1 Annotation Interface Elements\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the annotation type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003e\u003ccode\u003egetAnnotationMirrors()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedElement.getAnnotation(java.lang.Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypeException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypesException\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the annotation type"
        ],
        "return": [
          "this construct\u0027s annotation of the specified type if such an annotation is \n\u003cem\u003epresent\u003c/em\u003e, else \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationsByType",
      "comment": "Returns annotations that are associated with this construct. If there are no annotations associated with this construct, the return value is an array of length 0. The order of annotations which are directly or indirectly present on a construct C is computed as if indirectly present annotations on C are directly present on C in place of their container annotation, in the order in which they appear in the value element of the container annotation. The difference between this method and getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type, and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The annotations returned by this method could contain an element whose value is of type Class. This value cannot be returned directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class might not be loadable at all. Attempting to read a Class object by invoking the relevant method on the returned annotation will result in a MirroredTypeException, from which the corresponding TypeMirror may be extracted. Similarly, attempting to read a Class[]-valued element will result in a MirroredTypesException. Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information — representations of annotation types currently loaded into the VM — rather than on the representations defined by and used throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for callers that are written to operate on a known, fixed set of annotation types.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6\"\u003e9.6 Annotation Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.1\"\u003e9.6.1 Annotation Interface Elements\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the annotation type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003e\u003ccode\u003egetAnnotationMirrors()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003egetAnnotation(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedElement.getAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypeException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypesException\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the annotation type"
        ],
        "return": [
          "this construct\u0027s annotations for the specified annotation type if present on this construct, else an empty array"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.lang.model.AnnotatedConstruct",
  "comment": "Represents a construct that can be annotated. A construct is either an \n\u003ca href\u003d\"element/Element.html\" title\u003d\"interface in javax.lang.model.element\"\u003eelement\u003c/a\u003e or a \n\u003ca href\u003d\"type/TypeMirror.html\" title\u003d\"interface in javax.lang.model.type\"\u003etype\u003c/a\u003e. Annotations on an element are on a \n\u003cem\u003edeclaration\u003c/em\u003e, whereas annotations on a type are on a specific \n\u003cem\u003euse\u003c/em\u003e of a type name. As defined by \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.4\"\u003e9.7.4\u003c/a\u003e, an annotation on an element is a \n\u003cem\u003edeclaration annotation\u003c/em\u003e and an annotation on a type is a \n\u003cem\u003etype annotation\u003c/em\u003e. The terms \n\u003cem\u003edirectly present\u003c/em\u003e, \n\u003cem\u003epresent\u003c/em\u003e, \n\u003cem\u003eindirectly present\u003c/em\u003e, and \n\u003cem\u003eassociated \u003c/em\u003e are used throughout this interface to describe precisely which annotations, either declaration annotations or type annotations, are returned by the methods in this interface. \n\u003cp\u003eIn the definitions below, an annotation \u003ci\u003eA\u003c/i\u003e has an annotation type \u003ci\u003eAT\u003c/i\u003e. If \u003ci\u003eAT\u003c/i\u003e is a repeatable annotation type, the type of the containing annotation is \u003ci\u003eATC\u003c/i\u003e. \u003c/p\u003e\n\u003cp\u003eAnnotation \u003ci\u003eA\u003c/i\u003e is \u003cem\u003edirectly present\u003c/em\u003e on a construct \u003ci\u003eC\u003c/i\u003e if either: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ci\u003eA\u003c/i\u003e is \u003ca href\u003d\"util/Elements.html#getOrigin(javax.lang.model.AnnotatedConstruct,javax.lang.model.element.AnnotationMirror)\"\u003eexplicitly or implicitly\u003c/a\u003e declared as applying to the source code representation of \u003ci\u003eC\u003c/i\u003e. \u003cp\u003eTypically, if exactly one annotation of type \u003ci\u003eAT\u003c/i\u003e appears in the source code of representation of \u003ci\u003eC\u003c/i\u003e, then \u003ci\u003eA\u003c/i\u003e is explicitly declared as applying to \u003ci\u003eC\u003c/i\u003e. An annotation of type \u003ci\u003eAT\u003c/i\u003e on a \u003ca href\u003d\"element/RecordComponentElement.html\" title\u003d\"interface in javax.lang.model.element\"\u003erecord component\u003c/a\u003e can be implicitly propagated down to affiliated mandated members. Type annotations modifying the type of a record component can be also propagated to mandated members. Propagation of the annotations to mandated members is governed by rules given in the \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e. If there are multiple annotations of type \u003ci\u003eAT\u003c/i\u003e present on \u003ci\u003eC\u003c/i\u003e, then if \u003ci\u003eAT\u003c/i\u003e is repeatable annotation type, an annotation of type \u003ci\u003eATC\u003c/i\u003e is \u003ca href\u003d\"util/Elements.html#getOrigin(javax.lang.model.AnnotatedConstruct,javax.lang.model.element.AnnotationMirror)\"\u003eimplicitly declared\u003c/a\u003e on \u003ci\u003eC\u003c/i\u003e. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e A representation of \u003ci\u003eA\u003c/i\u003e appears in the executable output for \u003ci\u003eC\u003c/i\u003e, such as the \u003ccode\u003eRuntimeVisibleAnnotations\u003c/code\u003e (JVMS \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.16\"\u003e4.7.16\u003c/a\u003e) or \u003ccode\u003eRuntimeVisibleParameterAnnotations\u003c/code\u003e (JVMS \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.17\"\u003e4.7.17\u003c/a\u003e) attributes of a class file. \u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eAn annotation \u003ci\u003eA\u003c/i\u003e is \u003cem\u003epresent\u003c/em\u003e on a construct \u003ci\u003eC\u003c/i\u003e if either: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ci\u003eA\u003c/i\u003e is directly present on \u003ci\u003eC\u003c/i\u003e. \u003c/li\u003e\n \u003cli\u003eNo annotation of type \u003ci\u003eAT\u003c/i\u003e is directly present on \u003ci\u003eC\u003c/i\u003e, and \u003ci\u003eC\u003c/i\u003e is a class and \u003ci\u003eAT\u003c/i\u003e is inheritable and \u003ci\u003eA\u003c/i\u003e is present on the superclass of \u003ci\u003eC\u003c/i\u003e. \u003c/li\u003e\n\u003c/ul\u003e An annotation \n\u003ci\u003eA\u003c/i\u003e is \n\u003cem\u003eindirectly present\u003c/em\u003e on a construct \n\u003ci\u003eC\u003c/i\u003e if both: \n\u003cul\u003e \n \u003cli\u003e\u003ci\u003eAT\u003c/i\u003e is a repeatable annotation type with a containing annotation type \u003ci\u003eATC\u003c/i\u003e. \u003c/li\u003e\n \u003cli\u003eAn annotation of type \u003ci\u003eATC\u003c/i\u003e is directly present on \u003ci\u003eC\u003c/i\u003e and \u003ci\u003eA\u003c/i\u003e is an annotation included in the result of calling the \u003ccode\u003evalue\u003c/code\u003e method of the directly present annotation of type \u003ci\u003eATC\u003c/i\u003e. \u003c/li\u003e\n\u003c/ul\u003e An annotation \n\u003ci\u003eA\u003c/i\u003e is \n\u003cem\u003eassociated\u003c/em\u003e with a construct \n\u003ci\u003eC\u003c/i\u003e if either: \n\u003cul\u003e \n \u003cli\u003e \u003ci\u003eA\u003c/i\u003e is directly or indirectly present on \u003ci\u003eC\u003c/i\u003e. \u003c/li\u003e\n \u003cli\u003e No annotation of type \u003ci\u003eAT\u003c/i\u003e is directly or indirectly present on \u003ci\u003eC\u003c/i\u003e, and \u003ci\u003eC\u003c/i\u003e is a class, and \u003ci\u003eAT\u003c/i\u003e is inheritable, and \u003ci\u003eA\u003c/i\u003e is associated with the superclass of \u003ci\u003eC\u003c/i\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6\"\u003e9.6 Annotation Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.4.3\"\u003e9.6.4.3 \u003ccode\u003e@Inherited\u003c/code\u003e\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.4\"\u003e9.7.4 Where Annotations May Appear\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.5\"\u003e9.7.5 Multiple Annotations of the Same Interface\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}