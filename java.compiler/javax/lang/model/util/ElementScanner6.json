{
  "packageName": "javax.lang.model.util",
  "simpleName": "ElementScanner6",
  "moduleName": "java.compiler",
  "type": "CLASS",
  "superClass": {
    "name": "javax.lang.model.util.AbstractElementVisitor6",
    "parameters": [
      {
        "name": "R",
        "type": "Class"
      },
      {
        "name": "P",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "memberType": "JavaField",
      "modifiers": 20,
      "name": "DEFAULT_VALUE",
      "comment": "The specified default value.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "scan",
      "comment": "Iterates over the given elements and calls scan(Element, P) on each one. Returns the result of the last call to scan or DEFAULT_VALUE for an empty iterable.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterable\u003c/code\u003e - the elements to scan",
          "\u003ccode\u003ep\u003c/code\u003e - additional parameter"
        ],
        "return": [
          "the scan of the last element or \n\u003ccode\u003eDEFAULT_VALUE\u003c/code\u003e if no elements"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scan",
      "comment": "Processes an element by calling e.accept(this, p); this method may be overridden by subclasses.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to scan",
          "\u003ccode\u003ep\u003c/code\u003e - a scanner-specified parameter"
        ],
        "return": [
          "the result of visiting \n\u003ccode\u003ee\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "scan",
      "comment": "Convenience method equivalent to v.scan(e, null).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to scan"
        ],
        "return": [
          "the result of scanning \n\u003ccode\u003ee\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "visitPackage",
      "comment": "Visits a package element.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation scans the enclosed elements."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of scanning"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "visitType",
      "comment": "Visits a type element.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation scans the enclosed elements. Note that type parameters are \n\u003cem\u003enot\u003c/em\u003e scanned by this implementation since type parameters are not considered to be \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/TypeElement.html#getEnclosedElements()\"\u003eenclosed elements of a type\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of scanning"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "visitVariable",
      "comment": "Visits a variable element.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation scans the enclosed elements, unless the element is a \n\u003ccode\u003eRESOURCE_VARIABLE\u003c/code\u003e in which case \n\u003ccode\u003e visitUnknown\u003c/code\u003e is called."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of scanning"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "visitExecutable",
      "comment": "Visits an executable element.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation scans the parameters. Note that type parameters are \n\u003cem\u003enot\u003c/em\u003e scanned by this implementation."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of scanning"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.ElementScanner6",
        "name": "R",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "visitTypeParameter",
      "comment": "Visits a type parameter element.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation scans the enclosed elements."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of scanning"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for concrete subclasses; uses null for the default value.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "javax.lang.model.util.ElementScanner6",
            "name": "R",
            "type": "Variable"
          },
          "name": "defaultValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for concrete subclasses; uses the argument for the default value.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edefaultValue\u003c/code\u003e - the default value"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    },
    {
      "name": "P",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.lang.model.util.ElementScanner6",
  "comment": "A scanning visitor of program elements with default behavior appropriate for the \n\u003ca href\u003d\"../SourceVersion.html#RELEASE_6\"\u003e\u003ccode\u003eRELEASE_6\u003c/code\u003e\u003c/a\u003e source version. The \n\u003ccode\u003evisit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e methods in this class scan their component elements by calling \n\u003ccode\u003escan\u003c/code\u003e on their \n\u003ca href\u003d\"../element/Element.html#getEnclosedElements()\"\u003eenclosed elements\u003c/a\u003e, \n\u003ca href\u003d\"../element/ExecutableElement.html#getParameters()\"\u003eparameters\u003c/a\u003e, etc., as indicated in the individual method specifications. A subclass can control the order elements are visited by overriding the \n\u003ccode\u003evisit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e methods. Note that clients of a scanner may get the desired behavior be invoking \n\u003ccode\u003ev.scan(e, p)\u003c/code\u003e rather than \n\u003ccode\u003ev.visit(e, p)\u003c/code\u003e on the root objects of interest. \n\u003cp\u003eWhen a subclass overrides a \u003ccode\u003evisit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e method, the new method can cause the enclosed elements to be scanned in the default way by calling \u003ccode\u003esuper.visit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e. In this fashion, the concrete visitor can control the ordering of traversal over the component elements with respect to the additional processing; for example, consistently calling \u003ccode\u003esuper.visit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e at the start of the overridden methods will yield a preorder traversal, etc. If the component elements should be traversed in some other order, instead of calling \u003ccode\u003esuper.visit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e, an overriding visit method should call \u003ccode\u003escan\u003c/code\u003e with the elements in the desired order.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/ElementScanner7.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eElementScanner7\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/ElementScanner8.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eElementScanner8\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/ElementScanner9.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eElementScanner9\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/ElementScanner14.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eElementScanner14\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "Methods in this class may be overridden subject to their general contract. \n\u003cp id\u003d\"note_for_subclasses\"\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e The \u003ccode\u003eElementVisitor\u003c/code\u003e interface implemented by this class may have methods added to it in the future to accommodate new, currently unknown, language structures added to future versions of the Java programming language. Therefore, methods whose names begin with \u003ccode\u003e\"visit\"\u003c/code\u003e may be added to this class in the future; to avoid incompatibilities, classes which extend this class should not declare any instance methods with names beginning with \u003ccode\u003e\"visit\"\u003c/code\u003e.\u003c/p\u003e \n\u003cp\u003eWhen such a new visit method is added, the default implementation in this class will be to directly or indirectly call the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractElementVisitor6.html#visitUnknown(javax.lang.model.element.Element,P)\"\u003e\u003ccode\u003evisitUnknown\u003c/code\u003e\u003c/a\u003e method. A new element scanner visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.\u003c/p\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}