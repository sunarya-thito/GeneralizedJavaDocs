{
  "packageName": "javax.lang.model.util",
  "simpleName": "AbstractAnnotationValueVisitor6",
  "moduleName": "java.compiler",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "javax.lang.model.util.AbstractAnnotationValueVisitor6",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationValue",
            "type": "Class"
          },
          "field": {
            "name": "av"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.util.AbstractAnnotationValueVisitor6",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "visit",
      "comment": "Visits any annotation value as if by passing itself to that value\u0027s accept. The invocation v.visit(av, p) is equivalent to av.accept(v, p).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html#visit(javax.lang.model.element.AnnotationValue,P)\"\u003evisit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html\" title\u003d\"interface in javax.lang.model.element\"\u003eAnnotationValueVisitor\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"type parameter in AbstractAnnotationValueVisitor6\"\u003eR\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"type parameter in AbstractAnnotationValueVisitor6\"\u003eP\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eav\u003c/code\u003e - the value to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.AbstractAnnotationValueVisitor6",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationValue",
            "type": "Class"
          },
          "field": {
            "name": "av"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "visit",
      "comment": "Visits an annotation value as if by passing itself to that value\u0027s accept method passing null for the additional parameter. The invocation v.visit(av) is equivalent to av.accept(v, null).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html#visit(javax.lang.model.element.AnnotationValue)\"\u003evisit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html\" title\u003d\"interface in javax.lang.model.element\"\u003eAnnotationValueVisitor\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"type parameter in AbstractAnnotationValueVisitor6\"\u003eR\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"type parameter in AbstractAnnotationValueVisitor6\"\u003eP\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eav\u003c/code\u003e - the value to visit"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.util.AbstractAnnotationValueVisitor6",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.AnnotationValue",
            "type": "Class"
          },
          "field": {
            "name": "av"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.util.AbstractAnnotationValueVisitor6",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "visitUnknown",
      "comment": "Visits an unknown kind of annotation value. This can occur if the language evolves and new kinds of value can be stored in an annotation.",
      "tagMap": {
        "implSpec": [
          "The default implementation of this method in \n\u003ccode\u003e AbstractAnnotationValueVisitor6\u003c/code\u003e will always throw \n\u003ccode\u003e new UnknownAnnotationValueException(av, p)\u003c/code\u003e. This behavior is not required of a subclass."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html#visitUnknown(javax.lang.model.element.AnnotationValue,P)\"\u003evisitUnknown\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/AnnotationValueVisitor.html\" title\u003d\"interface in javax.lang.model.element\"\u003eAnnotationValueVisitor\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"type parameter in AbstractAnnotationValueVisitor6\"\u003eR\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html\" title\u003d\"type parameter in AbstractAnnotationValueVisitor6\"\u003eP\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eav\u003c/code\u003e - the unknown value being visited",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "the result of the visit"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for concrete subclasses to call.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    },
    {
      "name": "P",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.lang.model.util.AbstractAnnotationValueVisitor6",
  "comment": "A skeletal visitor for annotation values with default behavior appropriate for the \n\u003ca href\u003d\"../SourceVersion.html#RELEASE_6\"\u003e\u003ccode\u003eRELEASE_6\u003c/code\u003e\u003c/a\u003e source version.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor7.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eAbstractAnnotationValueVisitor7\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor8.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eAbstractAnnotationValueVisitor8\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor9.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eAbstractAnnotationValueVisitor9\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor14.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eAbstractAnnotationValueVisitor14\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "\u003cp id\u003d\"note_for_subclasses\"\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e The \u003ccode\u003e AnnotationValueVisitor\u003c/code\u003e interface implemented by this class may have methods added to it in the future to accommodate new, currently unknown, language structures added to future versions of the Java programming language. Therefore, methods whose names begin with \u003ccode\u003e\"visit\"\u003c/code\u003e may be added to this class in the future; to avoid incompatibilities, classes and subclasses which extend this class should not declare any instance methods with names beginning with \u003ccode\u003e\"visit\"\u003c/code\u003e.\u003c/p\u003e \n\u003cp\u003eWhen such a new visit method is added, the default implementation in this class will be to directly or indirectly call the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractAnnotationValueVisitor6.html#visitUnknown(javax.lang.model.element.AnnotationValue,P)\"\u003e\u003ccode\u003evisitUnknown\u003c/code\u003e\u003c/a\u003e method. A new abstract annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.\u003c/p\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}