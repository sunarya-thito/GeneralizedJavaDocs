{
  "packageName": "javax.lang.model",
  "simpleName": "SourceVersion",
  "moduleName": "java.compiler",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "latest",
      "comment": "Returns the latest source version that can be modeled.",
      "tagMap": {
        "return": [
          "the latest source version that can be modeled"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "latestSupported",
      "comment": "Returns the latest source version fully supported by the current execution environment. RELEASE_9 or later must be returned.",
      "tagMap": {
        "apiNote": [
          "This method is included alongside \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html#latest()\"\u003e\u003ccode\u003elatest()\u003c/code\u003e\u003c/a\u003e to allow identification of situations where the language model API is running on a platform version different than the latest version modeled by the API. One way that sort of situation can occur is if an IDE or similar tool is using the API to model source version \n\u003ci\u003eN\u003c/i\u003e while running on platform version (\n\u003ci\u003eN\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1). Running in this configuration is supported by the API. Running an API on platform versions earlier than (\n\u003ci\u003eN\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1) or later than \n\u003ci\u003eN\u003c/i\u003e may or may not work as an implementation detail. If an annotation processor was generating code to run under the current execution environment, the processor should only use platform features up to the \n\u003ccode\u003elatestSupported\u003c/code\u003e release, which may be earlier than the \n\u003ccode\u003elatest\u003c/code\u003e release."
        ],
        "return": [
          "the latest source version fully supported by the current execution environment"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isIdentifier",
      "comment": "Returns whether or not name is a syntactically valid identifier (simple name) or keyword in the latest source version. The method returns true if the name consists of an initial character for which Character.isJavaIdentifierStart(int) returns true, followed only by characters for which Character.isJavaIdentifierPart(int) returns true. This pattern matches regular identifiers, keywords, restricted keywords, restricted identifiers and the literals \"true\", \"false\", \"null\". The method returns false for all other strings.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\"\u003e3.8 Identifiers\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the string to check"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this string is a syntactically valid identifier or keyword, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isName",
      "comment": "Returns whether or not name is a syntactically valid qualified name in the latest source version. Syntactically, a qualified name is a sequence of identifiers separated by period characters (\".\"). This method splits the input string into period-separated segments and applies checks to each segment in turn. Unlike isIdentifier, this method returns false for keywords, boolean literals, and the null literal in any segment. This method returns true for restricted keywords and restricted identifiers.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.9\"\u003e3.9 Keywords\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-6.html#jls-6.2\"\u003e6.2 Names and Identifiers\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the string to check"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this string is a syntactically valid name, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.SourceVersion",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isName",
      "comment": "Returns whether or not name is a syntactically valid qualified name in the given source version. Syntactically, a qualified name is a sequence of identifiers separated by period characters (\".\"). This method splits the input string into period-separated segments and applies checks to each segment in turn. Unlike isIdentifier, this method returns false for keywords, boolean literals, and the null literal in any segment. This method returns true for restricted keywords and restricted identifiers.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.9\"\u003e3.9 Keywords\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-6.html#jls-6.2\"\u003e6.2 Names and Identifiers\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the string to check",
          "\u003ccode\u003eversion\u003c/code\u003e - the version to use"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this string is a syntactically valid name, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isKeyword",
      "comment": "Returns whether or not s is a keyword, boolean literal, or null literal in the latest source version. This method returns false for restricted keywords and restricted identifiers.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.9\"\u003e3.9 Keywords\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.3\"\u003e3.10.3 Boolean Literals\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.8\"\u003e3.10.8 The Null Literal\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to check"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003es\u003c/code\u003e is a keyword, or boolean literal, or null literal, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "javax.lang.model.SourceVersion",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isKeyword",
      "comment": "Returns whether or not s is a keyword, boolean literal, or null literal in the given source version. This method returns false for restricted keywords and restricted identifiers.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.9\"\u003e3.9 Keywords\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.3\"\u003e3.10.3 Boolean Literals\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.8\"\u003e3.10.8 The Null Literal\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to check",
          "\u003ccode\u003eversion\u003c/code\u003e - the version to use"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003es\u003c/code\u003e is a keyword, or boolean literal, or null literal, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.lang.model.SourceVersion",
  "comment": "Source versions of the Java programming language. See the appropriate edition of \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e for information about a particular source version. \n\u003cp\u003eNote that additional source version constants will be added to model future releases of the language.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}