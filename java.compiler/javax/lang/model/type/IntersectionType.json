{
  "packageName": "javax.lang.model.type",
  "simpleName": "IntersectionType",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.lang.model.type.TypeMirror",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.type.TypeMirror",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBounds",
      "comment": "Returns the bounds comprising this intersection type.",
      "tagMap": {
        "return": [
          "the bounds comprising this intersection type"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.lang.model.type.IntersectionType",
  "comment": "Represents an intersection type. \n\u003cp\u003eAn intersection type can be either implicitly or explicitly declared in a program. For example, the bound of the type parameter \u003ccode\u003e\u0026lt;T extends Number \u0026amp; Runnable\u0026gt;\u003c/code\u003e is an (implicit) intersection type. This is represented by an \u003ccode\u003eIntersectionType\u003c/code\u003e with \u003ccode\u003eNumber\u003c/code\u003e and \u003ccode\u003eRunnable\u003c/code\u003e as its bounds.\u003c/p\u003e",
  "tagMap": {
    "implNote": [
      "In the reference implementation an \n\u003ccode\u003e IntersectionType\u003c/code\u003e is used to model the explicit target type of a cast expression."
    ],
    "since": [
      "1.8"
    ]
  }
}