{
  "packageName": "javax.lang.model.type",
  "simpleName": "TypeVisitor",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.TypeMirror",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visit",
      "comment": "Visits a type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.TypeMirror",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visit",
      "comment": "A convenience method equivalent to visit(t, null).",
      "tagMap": {
        "implSpec": [
          "The default implementation is \n\u003ccode\u003evisit(t, null)\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the element to visit"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.PrimitiveType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitPrimitive",
      "comment": "Visits a primitive type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.NullType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitNull",
      "comment": "Visits the null type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.ArrayType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitArray",
      "comment": "Visits an array type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.DeclaredType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitDeclared",
      "comment": "Visits a declared type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.ErrorType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitError",
      "comment": "Visits an error type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.TypeVariable",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitTypeVariable",
      "comment": "Visits a type variable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.WildcardType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitWildcard",
      "comment": "Visits a wildcard type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.ExecutableType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitExecutable",
      "comment": "Visits an executable type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.NoType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitNoType",
      "comment": "Visits a NoType instance.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.TypeMirror",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitUnknown",
      "comment": "Visits an unknown kind of type. This can occur if the language evolves and new kinds of types are added to the TypeMirror hierarchy.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/UnknownTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003eUnknownTypeException\u003c/a\u003e\u003c/code\u003e - a visitor implementation may optionally throw this exception"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.UnionType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitUnion",
      "comment": "Visits a union type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.lang.model.type.TypeVisitor",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.IntersectionType",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "javax.lang.model.type.TypeVisitor",
            "name": "P",
            "type": "Variable"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitIntersection",
      "comment": "Visits an intersection type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the type to visit",
          "\u003ccode\u003ep\u003c/code\u003e - a visitor-specified parameter"
        ],
        "return": [
          "a visitor-specified result"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    },
    {
      "name": "P",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.lang.model.type.TypeVisitor",
  "comment": "A visitor of types, in the style of the visitor design pattern. Classes implementing this interface are used to operate on a type when the kind of type is unknown at compile time. When a visitor is passed to a type\u0027s \n\u003ca href\u003d\"TypeMirror.html#accept(javax.lang.model.type.TypeVisitor,P)\"\u003e\u003ccode\u003eaccept\u003c/code\u003e\u003c/a\u003e method, the \n\u003ccode\u003evisit\u003ci\u003eXyz\u003c/i\u003e\u003c/code\u003e method most applicable to that type is invoked. \n\u003cp\u003e Classes implementing this interface may or may not throw a \u003ccode\u003eNullPointerException\u003c/code\u003e if the additional parameter \u003ccode\u003ep\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e; see documentation of the implementing class for details.\u003c/p\u003e",
  "tagMap": {
    "apiNote": [
      "\u003cstrong\u003eWARNING:\u003c/strong\u003e It is possible that methods will be added to this interface to accommodate new, currently unknown, language structures added to future versions of the Java programming language. Such additions have already occurred to support language features added after this API was introduced. Visitor classes directly implementing this interface may be source incompatible with future versions of the platform. To avoid this source incompatibility, visitor implementations are encouraged to instead extend the appropriate abstract visitor class that implements this interface. However, an API should generally use this visitor interface as the type for parameters, return type, etc. rather than one of the abstract classes. \n\u003cp\u003eMethods to accommodate new language constructs are expected to be added as default methods to provide strong source compatibility. The implementations of the default methods will in turn call \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/TypeVisitor.html#visitUnknown(javax.lang.model.type.TypeMirror,P)\"\u003e\u003ccode\u003evisitUnknown\u003c/code\u003e\u003c/a\u003e, behavior that will be overridden in concrete visitors supporting the source version with the new language construct. \u003c/p\u003e\n\u003cp\u003eThere are several families of classes implementing this visitor interface in the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/package-summary.html\"\u003eutil package\u003c/a\u003e. The families follow a naming pattern along the lines of \u003ccode\u003eFooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e where \u003ci\u003eN\u003c/i\u003e indicates the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html\" title\u003d\"enum class in javax.lang.model\"\u003esource version\u003c/a\u003e the visitor is appropriate for. In particular, a \u003ccode\u003eFooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e is expected to handle all language constructs present in source version \u003ci\u003eN\u003c/i\u003e. If there are no new language constructs added in version \u003ci\u003eN\u003c/i\u003e\u0026nbsp;+\u0026nbsp;1 (or subsequent releases), \u003ccode\u003e FooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e may also handle that later source version; in that case, the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/SupportedSourceVersion.html\" title\u003d\"annotation in javax.annotation.processing\"\u003e\u003ccode\u003eSupportedSourceVersion\u003c/code\u003e\u003c/a\u003e annotation on the \u003ccode\u003e FooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e class will indicate a later version. When visiting a type representing a language construct introduced \u003cstrong\u003eafter\u003c/strong\u003e source version \u003ci\u003eN\u003c/i\u003e, a \u003ccode\u003e FooVisitor\u003c/code\u003e\u003ci\u003eN\u003c/i\u003e will throw an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/UnknownTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eUnknownTypeException\u003c/code\u003e\u003c/a\u003e unless that behavior is overridden. \u003c/p\u003e\n\u003cp\u003eWhen choosing which member of a visitor family to subclass, subclassing the most recent one increases the range of source versions covered. When choosing which visitor family to subclass, consider their built-in capabilities: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/AbstractTypeVisitor6.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eAbstractTypeVisitor\u003c/code\u003e\u003c/a\u003es: Skeletal visitor implementations. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/SimpleTypeVisitor6.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eSimpleTypeVisitor\u003c/code\u003e\u003c/a\u003es: Support default actions and a default return value. \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/TypeKindVisitor6.html\" title\u003d\"class in javax.lang.model.util\"\u003e\u003ccode\u003eTypeKindVisitor\u003c/code\u003e\u003c/a\u003es: Visit methods provided on a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/TypeMirror.html#getKind()\"\u003eper-kind\u003c/a\u003e granularity as some categories of types can have more than one kind. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}