{
  "packageName": "javax.lang.model.type",
  "simpleName": "TypeMirror",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.lang.model.AnnotatedConstruct",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.lang.model.type.TypeKind",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKind",
      "comment": "Returns the kind of this type. The kind of a primitive type is one of the kinds for which TypeKind.isPrimitive() returns true. The kind of a null type is NULL. The kind of an array type is ARRAY. The kind of a declared type is DECLARED. The kind of an error type is ERROR. The kind of a type variable is TYPEVAR. The kind of a wildcard type is WILDCARD. The kind of an executable type is EXECUTABLE. The kind of a pseudo-type is one of VOID, PACKAGE, MODULE, or NONE. The kind of a union type is UNION. The kind of an intersection type is INTERSECTION.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003ekind\u003c/code\u003e of this type"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Obeys the general contract of Object.equals. This method does not, however, indicate whether two types represent the same type. Semantic comparisons of type equality should instead use Types.isSameType(TypeMirror, TypeMirror). The results of t1.equals(t2) and Types.isSameType(t1, t2) may differ.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be compared with this type"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this one"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Obeys the general contract of Object.hashCode.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/TypeMirror.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Returns an informative string representation of this type. If possible, the string should be of a form suitable for representing this type in source code. Any names embedded in the result are qualified if possible.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.AnnotationMirror",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationMirrors",
      "comment": "Returns the annotations that are directly present on this construct. Note that any annotations returned by this method are type annotations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003egetAnnotationMirrors\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html\" title\u003d\"interface in javax.lang.model\"\u003eAnnotatedConstruct\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the annotations \n\u003cem\u003edirectly present\u003c/em\u003e on this construct; an empty list if there are none"
        ],
        "since": [
          "8"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotation",
      "comment": "Returns this construct\u0027s annotation of the specified type if such an annotation is present, else null. The annotation returned by this method could contain an element whose value is of type Class. This value cannot be returned directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class might not be loadable at all. Attempting to read a Class object by invoking the relevant method on the returned annotation will result in a MirroredTypeException, from which the corresponding TypeMirror may be extracted. Similarly, attempting to read a Class[]-valued element will result in a MirroredTypesException. Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information — representations of annotation types currently loaded into the VM — rather than on the representations defined by and used throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for callers that are written to operate on a known, fixed set of annotation types. Note that any annotation returned by this method is a type annotation.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the annotation type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotationMirrors()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedElement.getAnnotation(java.lang.Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypeException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypesException\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html\" title\u003d\"interface in javax.lang.model\"\u003eAnnotatedConstruct\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the annotation type"
        ],
        "return": [
          "this construct\u0027s annotation of the specified type if such an annotation is \n\u003cem\u003epresent\u003c/em\u003e, else \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "8"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationsByType",
      "comment": "Returns annotations that are associated with this construct. If there are no annotations associated with this construct, the return value is an array of length 0. The order of annotations which are directly or indirectly present on a construct C is computed as if indirectly present annotations on C are directly present on C in place of their container annotation, in the order in which they appear in the value element of the container annotation. The difference between this method and AnnotatedConstruct.getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type, and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The annotations returned by this method could contain an element whose value is of type Class. This value cannot be returned directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class might not be loadable at all. Attempting to read a Class object by invoking the relevant method on the returned annotation will result in a MirroredTypeException, from which the corresponding TypeMirror may be extracted. Similarly, attempting to read a Class[]-valued element will result in a MirroredTypesException. Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information — representations of annotation types currently loaded into the VM — rather than on the representations defined by and used throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for callers that are written to operate on a known, fixed set of annotation types. Note that any annotations returned by this method are type annotations.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the annotation type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationMirrors()\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotationMirrors()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotation(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedElement.getAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypeException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypeException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/type/MirroredTypesException.html\" title\u003d\"class in javax.lang.model.type\"\u003e\u003ccode\u003eMirroredTypesException\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationsByType(java.lang.Class)\"\u003egetAnnotationsByType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html\" title\u003d\"interface in javax.lang.model\"\u003eAnnotatedConstruct\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationType\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the annotation type"
        ],
        "return": [
          "this construct\u0027s annotations for the specified annotation type if present on this construct, else an empty array"
        ],
        "since": [
          "8"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.type.TypeVisitor",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              },
              {
                "name": "P",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "P",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        },
        {
          "name": "P",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "accept",
      "comment": "Applies a visitor to this type.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the return type of the visitor\u0027s methods",
          "\u003ccode\u003eP\u003c/code\u003e - the type of the additional parameter to the visitor\u0027s methods"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the visitor operating on this type",
          "\u003ccode\u003ep\u003c/code\u003e - additional parameter to the visitor"
        ],
        "return": [
          "a visitor-specified result"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.lang.model.type.TypeMirror",
  "comment": "Represents a type in the Java programming language. Types include primitive types, declared types (class and interface types), array types, type variables, and the null type. Also represented are wildcard type arguments, the signature and return types of executables, and pseudo-types corresponding to packages, modules, and the keyword \n\u003ccode\u003evoid\u003c/code\u003e. \n\u003cp\u003e Types should be compared using the utility methods in \u003ca href\u003d\"../util/Types.html\" title\u003d\"interface in javax.lang.model.util\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e. There is no guarantee that any particular type will always be represented by the same object. \u003c/p\u003e\n\u003cp\u003e To implement operations based on the class of an \u003ccode\u003e TypeMirror\u003c/code\u003e object, either use a \u003ca href\u003d\"TypeVisitor.html\" title\u003d\"interface in javax.lang.model.type\"\u003evisitor\u003c/a\u003e or use the result of the \u003ca href\u003d\"#getKind()\"\u003e\u003ccode\u003egetKind()\u003c/code\u003e\u003c/a\u003e method. Using \u003ccode\u003e instanceof\u003c/code\u003e is \u003cem\u003enot\u003c/em\u003e necessarily a reliable idiom for determining the effective class of an object in this modeling hierarchy since an implementation may choose to have a single object implement multiple \u003ccode\u003eTypeMirror\u003c/code\u003e subinterfaces.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.1\"\u003e4.1 The Kinds of Types and Values\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.2\"\u003e4.2 Primitive Types and Values\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.3\"\u003e4.3 Reference Types and Values\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.4\"\u003e4.4 Type Variables\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.5\"\u003e4.5 Parameterized Types\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.8\"\u003e4.8 Raw Types\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.9\"\u003e4.9 Intersection Types\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-10.html#jls-10.1\"\u003e10.1 Array Types\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/element/Element.html\" title\u003d\"interface in javax.lang.model.element\"\u003e\u003ccode\u003eElement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/util/Types.html\" title\u003d\"interface in javax.lang.model.util\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}