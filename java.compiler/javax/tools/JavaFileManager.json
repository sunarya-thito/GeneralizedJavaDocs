{
  "packageName": "javax.tools",
  "simpleName": "JavaFileManager",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.io.Closeable",
      "type": "Class"
    },
    {
      "name": "java.io.Flushable",
      "type": "Class"
    },
    {
      "name": "javax.tools.OptionChecker",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.ClassLoader",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClassLoader",
      "comment": "Returns a class loader for loading plug-ins from the given package-oriented location. For example, to load annotation processors, a compiler will request a class loader for the ANNOTATION_PROCESSOR_PATH location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a class loader can not be created in the current security context",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is a module-oriented location"
        ],
        "return": [
          "a class loader for the given location; or \n\u003ccode\u003enull\u003c/code\u003e if loading plug-ins from the given location is disabled or if the location is not known"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "name": "javax.tools.JavaFileObject",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "packageName"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "javax.tools.JavaFileObject$Kind",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "kinds"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "recurse"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "list",
      "comment": "Lists all file objects matching the given criteria in the given package-oriented location. List file objects in \"subpackages\" if recurse is true. Note: even if the given location is unknown to this file manager, it may not return null. Also, an unknown location may not cause an exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a location",
          "\u003ccode\u003epackageName\u003c/code\u003e - a package name",
          "\u003ccode\u003ekinds\u003c/code\u003e - return objects only of these kinds",
          "\u003ccode\u003erecurse\u003c/code\u003e - if true include \"subpackages\""
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred, or if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is a module-oriented location",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "an Iterable of file objects matching the given criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "javax.tools.JavaFileObject",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "inferBinaryName",
      "comment": "Infers a binary name of a file object based on a package-oriented location. The binary name returned might not be a valid binary name according to The Java Language Specification.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a location",
          "\u003ccode\u003efile\u003c/code\u003e - a file object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is a module-oriented location",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "a binary name or \n\u003ccode\u003enull\u003c/code\u003e the file object is not found in the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.tools.FileObject",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.tools.FileObject",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSameFile",
      "comment": "Compares two file objects and return true if they represent the same underlying object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a file object",
          "\u003ccode\u003eb\u003c/code\u003e - a file object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either of the arguments were created with another file manager and this file manager does not support foreign file objects"
        ],
        "return": [
          "true if the given file objects represent the same underlying object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "current"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "remaining"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "handleOption",
      "comment": "Handles one option. If current is an option to this file manager it will consume any arguments to that option from remaining and return true, otherwise return false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecurrent\u003c/code\u003e - current option",
          "\u003ccode\u003eremaining\u003c/code\u003e - remaining options"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this option to this file manager is used incorrectly",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "true if this option was handled by this file manager, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasLocation",
      "comment": "Determines if a location is known to this file manager.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a location"
        ],
        "return": [
          "true if the location is known"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.tools.JavaFileObject",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        },
        {
          "type": {
            "name": "javax.tools.JavaFileObject$Kind",
            "type": "Class"
          },
          "field": {
            "name": "kind"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getJavaFileForInput",
      "comment": "Returns a file object for input representing the specified class of the specified kind in the given package-oriented location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a location",
          "\u003ccode\u003eclassName\u003c/code\u003e - the name of a class",
          "\u003ccode\u003ekind\u003c/code\u003e - the kind of file, must be one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileObject.Kind.html#SOURCE\"\u003e\u003ccode\u003eSOURCE\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileObject.Kind.html#CLASS\"\u003e\u003ccode\u003eCLASS\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is not known to this file manager and the file manager does not support unknown locations, or if the kind is not valid, or if the location is a module-oriented location",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred, or if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "a file object, might return \n\u003ccode\u003enull\u003c/code\u003e if the file does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.tools.JavaFileObject",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        },
        {
          "type": {
            "name": "javax.tools.JavaFileObject$Kind",
            "type": "Class"
          },
          "field": {
            "name": "kind"
          }
        },
        {
          "type": {
            "name": "javax.tools.FileObject",
            "type": "Class"
          },
          "field": {
            "name": "sibling"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getJavaFileForOutput",
      "comment": "Returns a file object for output representing the specified class of the specified kind in the given package-oriented location. Optionally, this file manager might consider the sibling as a hint for where to place the output. The exact semantics of this hint is unspecified. The JDK compiler, javac, for example, will place class files in the same directories as originating source files unless a class file output directory is provided. To facilitate this behavior, javac might provide the originating source file as sibling when calling this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a package-oriented location",
          "\u003ccode\u003eclassName\u003c/code\u003e - the name of a class",
          "\u003ccode\u003ekind\u003c/code\u003e - the kind of file, must be one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileObject.Kind.html#SOURCE\"\u003e\u003ccode\u003eSOURCE\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileObject.Kind.html#CLASS\"\u003e\u003ccode\u003eCLASS\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003esibling\u003c/code\u003e - a file object to be used as hint for placement; might be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if sibling is not known to this file manager, or if the location is not known to this file manager and the file manager does not support unknown locations, or if the kind is not valid, or if the location is not an output location",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred, or if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "a file object for output"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.tools.FileObject",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "packageName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relativeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFileForInput",
      "comment": "Returns a file object for input representing the specified relative name in the specified package in the given package-oriented location. If the returned object represents a source or class file, it must be an instance of JavaFileObject. Informally, the file object returned by this method is located in the concatenation of the location, package name, and relative name. For example, to locate the properties file \"resources/compiler.properties\" in the package \"com.sun.tools.javac\" in the SOURCE_PATH location, this method might be called like so: getFileForInput(SOURCE_PATH, \"com.sun.tools.javac\", \"resources/compiler.properties\"); If the call was executed on Windows, with SOURCE_PATH set to \"C:\\Documents and Settings\\UncleBob\\src\\share\\classes\", a valid result would be a file object representing the file \"C:\\Documents and Settings\\UncleBob\\src\\share\\classes\\com\\sun\\tools\\javac\\resources\\compiler.properties\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a package-oriented location",
          "\u003ccode\u003epackageName\u003c/code\u003e - a package name",
          "\u003ccode\u003erelativeName\u003c/code\u003e - a relative name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is not known to this file manager and the file manager does not support unknown locations, or if \n\u003ccode\u003erelativeName\u003c/code\u003e is not valid, or if the location is a module-oriented location",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred, or if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "a file object, might return \n\u003ccode\u003enull\u003c/code\u003e if the file does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.tools.FileObject",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "packageName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relativeName"
          }
        },
        {
          "type": {
            "name": "javax.tools.FileObject",
            "type": "Class"
          },
          "field": {
            "name": "sibling"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFileForOutput",
      "comment": "Returns a file object for output representing the specified relative name in the specified package in the given location. Optionally, this file manager might consider the sibling as a hint for where to place the output. The exact semantics of this hint is unspecified. The JDK compiler, javac, for example, will place class files in the same directories as originating source files unless a class file output directory is provided. To facilitate this behavior, javac might provide the originating source file as sibling when calling this method. If the returned object represents a source or class file, it must be an instance of JavaFileObject. Informally, the file object returned by this method is located in the concatenation of the location, package name, and relative name or next to the sibling argument. See getFileForInput for an example.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - an output location",
          "\u003ccode\u003epackageName\u003c/code\u003e - a package name",
          "\u003ccode\u003erelativeName\u003c/code\u003e - a relative name",
          "\u003ccode\u003esibling\u003c/code\u003e - a file object to be used as hint for placement; might be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if sibling is not known to this file manager, or if the location is not known to this file manager and the file manager does not support unknown locations, or if \n\u003ccode\u003erelativeName\u003c/code\u003e is not valid, or if the location is not an output location",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred, or if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e has been called and this file manager cannot be reopened"
        ],
        "return": [
          "a file object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "flush",
      "comment": "Flushes any resources opened for output by this file manager directly or indirectly. Flushing a closed file manager has no effect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html#flush()\"\u003eflush\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html\" title\u003d\"interface in java.io\"\u003eFlushable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Releases any resources opened by this file manager directly or indirectly. This might render this file manager useless and the effect of subsequent calls to methods on this object or any objects obtained through this object is undefined unless explicitly allowed. However, closing a file manager which has already been closed has no effect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileManager.html#flush()\"\u003e\u003ccode\u003eflush()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.tools.JavaFileManager$Location",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "moduleName"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocationForModule",
      "comment": "Gets a location for a named module within a location, which may be either a module-oriented location or an output location. The result will be an output location if the given location is an output location, or it will be a package-oriented location.",
      "tagMap": {
        "implSpec": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the module-oriented location",
          "\u003ccode\u003emoduleName\u003c/code\u003e - the name of the module to be found"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this operation if not supported by this file manager",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is neither an output location nor a module-oriented location"
        ],
        "return": [
          "the location for the named module"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.tools.JavaFileManager$Location",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "javax.tools.JavaFileObject",
            "type": "Class"
          },
          "field": {
            "name": "fo"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocationForModule",
      "comment": "Gets a location for the module containing a specific file to be found within a location, which may be either a module-oriented location or an output location. The result will be an output location if the given location is an output location, or it will be a package-oriented location.",
      "tagMap": {
        "implSpec": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the module-oriented location",
          "\u003ccode\u003efo\u003c/code\u003e - the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this operation if not supported by this file manager",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is neither an output location nor a module-oriented location"
        ],
        "return": [
          "the module containing the file"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ServiceLoader",
        "parameters": [
          {
            "name": "S",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "S",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "service"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "S",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getServiceLoader",
      "comment": "Get a service loader for a specific service class from a given location. If the location is a module-oriented location, the service loader will use the service declarations in the modules found in that location. Otherwise, a service loader is created using the package-oriented location, in which case, the services are determined using the provider-configuration files in META-INF/services.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eS\u003c/code\u003e - the service class"
        ],
        "implSpec": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the module-oriented location",
          "\u003ccode\u003eservice\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object of the service class"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this operation if not supported by this file manager"
        ],
        "return": [
          "a service loader for the given service class"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "inferModuleName",
      "comment": "Infer the name of the module from its location, as returned by getLocationForModule or listModuleLocations.",
      "tagMap": {
        "implSpec": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - a package-oriented location representing a module"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this operation if not supported by this file manager",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is not one known to this file manager"
        ],
        "return": [
          "the name of the module"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "javax.tools.JavaFileManager$Location",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "listLocationsForModules",
      "comment": "Lists the locations for all the modules in a module-oriented location or an output location. The locations that are returned will be output locations if the given location is an output, or it will be a package-oriented locations.",
      "tagMap": {
        "implSpec": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the module-oriented location for which to list the modules"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this operation if not supported by this file manager",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the location is not a module-oriented location"
        ],
        "return": [
          "a series of sets of locations containing modules"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.tools.JavaFileManager$Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "javax.tools.FileObject",
            "type": "Class"
          },
          "field": {
            "name": "fo"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Determines whether or not a given file object is \"contained in\" a specified location. For a package-oriented location, a file object is contained in the location if there exist values for packageName and relativeName such that either of the following calls would return the same file object:      getFileForInput(location, packageName, relativeName)\n     getFileForOutput(location, packageName, relativeName, null)\n For a module-oriented location, a file object is contained in the location if there exists a module that may be obtained by the call:      getLocationForModule(location, moduleName)\n such that the file object is contained in the (package-oriented) location for that module.",
      "tagMap": {
        "implSpec": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location",
          "\u003ccode\u003efo\u003c/code\u003e - the file object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is a problem determining the result",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the method is not supported"
        ],
        "return": [
          "whether or not the file is contained in the location"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.tools.JavaFileManager$Location"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.tools.JavaFileManager",
  "comment": "File manager for tools operating on Java programming language source and class files. In this context, \n\u003cem\u003efile\u003c/em\u003e means an abstraction of regular files and other sources of data. \n\u003cp\u003eWhen constructing new JavaFileObjects, the file manager must determine where to create them. For example, if a file manager manages regular files on a file system, it would most likely have a current/working directory to use as default location when creating or finding files. A number of hints can be provided to a file manager as to where to create files. Any file manager might choose to ignore these hints. \u003c/p\u003e\n\u003cp\u003eSome methods in this interface use class names. Such class names must be given in the Java Virtual Machine internal form of fully qualified class and interface names. For convenience \u0027.\u0027 and \u0027/\u0027 are interchangeable. The internal form is defined in chapter four of \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cp\u003e \u003ci\u003eDiscussion:\u003c/i\u003e this means that the names \"java/lang.package-info\", \"java/lang/package-info\", \"java.lang.package-info\", are valid and equivalent. Compare to binary name as defined in \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e, section 13.1 \"The Form of a Binary\". \u003c/p\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe case of names is significant. All names should be treated as case-sensitive. For example, some file systems have case-insensitive, case-aware file names. File objects representing such files should take care to preserve case by using \u003ca href\u003d\"../../../java.base/java/io/File.html#getCanonicalFile()\"\u003e\u003ccode\u003eFile.getCanonicalFile()\u003c/code\u003e\u003c/a\u003e or similar means. If the system is not case-aware, file objects must use other means to preserve case. \u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003ca id\u003d\"relative_name\"\u003eRelative names\u003c/a\u003e:\u003c/em\u003e some methods in this interface use relative names. A relative name is a non-null, non-empty sequence of path segments separated by \u0027/\u0027. \u0027.\u0027 or \u0027..\u0027 are invalid path segments. A valid relative name must match the \"path-rootless\" rule of \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3986.txt\"\u003eRFC\u0026nbsp;3986\u003c/a\u003e, section\u0026nbsp;3.3. Informally, this should be true: \n \u003c!-- URI.create(relativeName).normalize().getPath().equals(relativeName) --\u003e \u003c/p\u003e\n\u003cpre\u003e  URI.\u003ca href\u003d\"../../../java.base/java/net/URI.html#create(java.lang.String)\"\u003ecreate\u003c/a\u003e(relativeName).\u003ca href\u003d\"../../../java.base/java/net/URI.html#normalize()\"\u003enormalize\u003c/a\u003e().\u003ca href\u003d\"../../../java.base/java/net/URI.html#getPath()\"\u003egetPath\u003c/a\u003e().equals(relativeName)\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eAll methods in this interface might throw a SecurityException. \u003c/p\u003e\n\u003cp\u003eAn object of this interface is not required to support multi-threaded access, that is, be synchronized. However, it must support concurrent access to different file objects created by this object. \u003c/p\u003e\n\u003cp\u003e\u003cem\u003eImplementation note:\u003c/em\u003e a consequence of this requirement is that a trivial implementation of output to a \u003ca href\u003d\"../../../java.base/java/util/jar/JarOutputStream.html\" title\u003d\"class in java.util.jar\"\u003eJarOutputStream\u003c/a\u003e is not a sufficient implementation. That is, rather than creating a JavaFileObject that returns the JarOutputStream directly, the contents must be cached until closed and then written to the JarOutputStream. \u003c/p\u003e\n\u003cp\u003eUnless explicitly allowed, all methods in this interface might throw a NullPointerException if given a \u003ccode\u003enull\u003c/code\u003e argument.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/JavaFileObject.html\" title\u003d\"interface in javax.tools\"\u003e\u003ccode\u003eJavaFileObject\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/FileObject.html\" title\u003d\"interface in javax.tools\"\u003e\u003ccode\u003eFileObject\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}