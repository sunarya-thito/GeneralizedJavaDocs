{
  "packageName": "javax.tools",
  "simpleName": "Location",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns the name of this location.",
      "tagMap": {
        "return": [
          "a name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOutputLocation",
      "comment": "Determines if this is an output location. An output location is a location that is conventionally used for output.",
      "tagMap": {
        "apiNote": [
          "An output location may be used to write files in either a package-oriented organization or in a module-oriented organization."
        ],
        "return": [
          "true if this is an output location, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isModuleOrientedLocation",
      "comment": "Indicates if this location is module-oriented location, and therefore expected to contain classes in a module/package/class hierarchy, as compared to a package-oriented location, which is expected to contain classes in a package/class hierarchy. The result of this method is undefined if this is an output location.",
      "tagMap": {
        "implNote": [
          "This implementation returns true if the name includes the word \"MODULE\"."
        ],
        "return": [
          "true if this location is expected to contain modules"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "javax.tools.JavaFileManager$Location",
  "comment": "Interface for locations of file objects. Used by file managers to determine where to place or search for file objects. \n\u003cp\u003eInformally, a \u003ccode\u003eLocation\u003c/code\u003e corresponds to a \"search path\", such as a class path or module path, as used by command-line tools that use the default file system. \u003c/p\u003e\n\u003cp\u003eSome locations are typically used to identify a place in which a tool can find files to be read; others are typically used to identify a place where a tool can write files. If a location is used to identify a place for reading files, those files may be organized in a simple \u003cem\u003epackage/class\u003c/em\u003e hierarchy: such locations are described as \u003cstrong\u003epackage-oriented\u003c/strong\u003e. Alternatively, the files may be organized in a \u003cem\u003emodule/package/class\u003c/em\u003e hierarchy: such locations are described as \u003cstrong\u003emodule-oriented\u003c/strong\u003e. If a location is typically used to identify a place where a tool can write files, it is up to the tool that writes the files to specify how those files will be organized. \u003c/p\u003e\n\u003cp\u003eYou can access the classes in a package-oriented location using methods like \u003ca href\u003d\"JavaFileManager.html#getJavaFileForInput(javax.tools.JavaFileManager.Location,java.lang.String,javax.tools.JavaFileObject.Kind)\"\u003e\u003ccode\u003eJavaFileManager.getJavaFileForInput(javax.tools.JavaFileManager.Location, java.lang.String, javax.tools.JavaFileObject.Kind)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"JavaFileManager.html#list(javax.tools.JavaFileManager.Location,java.lang.String,java.util.Set,boolean)\"\u003e\u003ccode\u003eJavaFileManager.list(javax.tools.JavaFileManager.Location, java.lang.String, java.util.Set\u0026lt;javax.tools.JavaFileObject.Kind\u0026gt;, boolean)\u003c/code\u003e\u003c/a\u003e. It is not possible to directly list the classes in a module-oriented location. Instead, you can get a package-oriented location for any specific module using methods like \u003ca href\u003d\"JavaFileManager.html#getLocationForModule(javax.tools.JavaFileManager.Location,java.lang.String)\"\u003e\u003ccode\u003eJavaFileManager.getLocationForModule(javax.tools.JavaFileManager.Location, java.lang.String)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"JavaFileManager.html#listLocationsForModules(javax.tools.JavaFileManager.Location)\"\u003e\u003ccode\u003eJavaFileManager.listLocationsForModules(javax.tools.JavaFileManager.Location)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}