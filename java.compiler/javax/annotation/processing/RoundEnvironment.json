{
  "packageName": "javax.annotation.processing",
  "simpleName": "RoundEnvironment",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "processingOver",
      "comment": "Returns true if types generated by this round will not be subject to a subsequent round of annotation processing; returns false otherwise.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if types generated by this round will not be subject to a subsequent round of annotation processing; returns \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "errorRaised",
      "comment": "Returns true if an error was raised in the prior round of processing; returns false otherwise.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if an error was raised in the prior round of processing; returns \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRootElements",
      "comment": "Returns the root elements for annotation processing generated by the prior round.",
      "tagMap": {
        "return": [
          "the root elements for annotation processing generated by the prior round, or an empty set if there were none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.TypeElement",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsAnnotatedWith",
      "comment": "Returns the elements annotated with the given annotation type. The annotation may appear directly or be inherited. Only package elements, module elements, and type elements included in this round of annotation processing, or declarations of members, constructors, parameters, type parameters, or record components declared within those, are returned. Included type elements are root types and any member types nested within them. Elements of a package are not considered included simply because a package-info file for that package was created. Likewise, elements of a module are not considered included simply because a module-info file for that module was created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - annotation type being requested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the argument does not represent an annotation type"
        ],
        "return": [
          "the elements annotated with the given annotation type, or an empty set if there are none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.lang.model.element.TypeElement",
            "type": "Class"
          },
          "field": {
            "name": "annotations"
          },
          "varArgs": {}
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsAnnotatedWithAny",
      "comment": "Returns the elements annotated with one or more of the given annotation types.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.3\"\u003e9.6.3 Repeatable Annotation Interfaces\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "implSpec": [
          "The default implementation of this method creates an empty result set, iterates over the annotations in the argument array calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/RoundEnvironment.html#getElementsAnnotatedWith(javax.lang.model.element.TypeElement)\"\u003e\u003ccode\u003egetElementsAnnotatedWith(TypeElement)\u003c/code\u003e\u003c/a\u003e on each annotation and adding those results to the result set. Finally, the contents of the result set are returned as an unmodifiable set."
        ],
        "apiNote": [
          "This method may be useful when processing repeating annotations by looking for an annotation type and its containing annotation type at the same time."
        ],
        "param": [
          "\u003ccode\u003eannotations\u003c/code\u003e - annotation types being requested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the any elements of the argument set do not represent an annotation type"
        ],
        "return": [
          "the elements annotated with one or more of the given annotation types, or an empty set if there are none"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.annotation.Annotation",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsAnnotatedWith",
      "comment": "Returns the elements annotated with the given annotation type. The annotation may appear directly or be inherited. Only package elements, module elements, and type elements included in this round of annotation processing, or declarations of members, constructors, parameters, type parameters, or record components declared within those, are returned. Included type elements are root types and any member types nested within them. Elements in a package are not considered included simply because a package-info file for that package was created. Likewise, elements of a module are not considered included simply because a module-info file for that module was created. Note: An implementation of this method typically performs an internal conversion from the runtime reflective representation of an annotation type as a Class object to a different representation used for annotation processing. The set of annotation types present in the runtime context may differ from the set of annotation types present in the context of annotation processing in a particular environmental configuration. If an runtime annotation type is not present in the annotation processing context, the situation is not treated as an error and no elements are found for that annotation type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotation(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - annotation type being requested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the argument does not represent an annotation type"
        ],
        "return": [
          "the elements annotated with the given annotation type, or an empty set if there are none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.lang.model.element.Element",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "upperBounds": [
                      {
                        "name": "java.lang.annotation.Annotation",
                        "type": "Class"
                      }
                    ],
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotations"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsAnnotatedWithAny",
      "comment": "Returns the elements annotated with one or more of the given annotation types. Note: An implementation of this method typically performs an internal conversion from the runtime reflective representation of an annotation type as a Class object to a different representation used for annotation processing. The set of annotation types present in the runtime context may differ from the set of annotation types present in the context of annotation processing in a particular environmental configuration. If an runtime annotation type is not present in the annotation processing context, the situation is not treated as an error and no elements are found for that annotation type.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.3\"\u003e9.6.3 Repeatable Annotation Interfaces\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "implSpec": [
          "The default implementation of this method creates an empty result set, iterates over the annotations in the argument set calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/RoundEnvironment.html#getElementsAnnotatedWith(java.lang.Class)\"\u003e\u003ccode\u003egetElementsAnnotatedWith(Class)\u003c/code\u003e\u003c/a\u003e on each annotation and adding those results to the result set. Finally, the contents of the result set are returned as an unmodifiable set."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotation(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/AnnotatedConstruct.html#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003eAnnotatedConstruct.getAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method may be useful when processing repeating annotations by looking for an annotation type and its containing annotation type at the same time."
        ],
        "param": [
          "\u003ccode\u003eannotations\u003c/code\u003e - annotation types being requested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the any elements of the argument set do not represent an annotation type"
        ],
        "return": [
          "the elements annotated with one or more of the given annotation types, or an empty set if there are none"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.annotation.processing.RoundEnvironment",
  "comment": "An annotation processing tool framework will \n\u003ca href\u003d\"Processor.html#process(java.util.Set,javax.annotation.processing.RoundEnvironment)\"\u003eprovide an annotation processor with an object implementing this interface\u003c/a\u003e so that the processor can query for information about a round of annotation processing.",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}