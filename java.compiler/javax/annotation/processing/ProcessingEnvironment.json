{
  "packageName": "javax.annotation.processing",
  "simpleName": "ProcessingEnvironment",
  "moduleName": "java.compiler",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOptions",
      "comment": "Returns the processor-specific options passed to the annotation processing tool. Options are returned in the form of a map from option name to option value. For an option with no value, the corresponding value in the map is null. See documentation of the particular tool infrastructure being used for details on how to pass in processor-specific options. For example, a command-line implementation may distinguish processor-specific options by prefixing them with a known string like \"-A\"; other tool implementations may follow different conventions or provide alternative mechanisms. A given implementation may also provide implementation-specific ways of finding options passed to the tool in addition to the processor-specific options.",
      "tagMap": {
        "return": [
          "the processor-specific options passed to the annotation processing tool"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.annotation.processing.Messager",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMessager",
      "comment": "Returns the messager used to report errors, warnings, and other notices.",
      "tagMap": {
        "return": [
          "the messager used to report errors, warnings, and other notices"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.annotation.processing.Filer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFiler",
      "comment": "Returns the filer used to create new source, class, or auxiliary files.",
      "tagMap": {
        "return": [
          "the filer used to create new source, class, or auxiliary files"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.util.Elements",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementUtils",
      "comment": "Returns an implementation of some utility methods for operating on elements.",
      "tagMap": {
        "return": [
          "an implementation of some utility methods for operating on elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.util.Types",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeUtils",
      "comment": "Returns an implementation of some utility methods for operating on types.",
      "tagMap": {
        "return": [
          "an implementation of some utility methods for operating on types"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSourceVersion",
      "comment": "Returns the source version that any generated source and class files should conform to.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/Processor.html#getSupportedSourceVersion()\"\u003e\u003ccode\u003eProcessor.getSupportedSourceVersion()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the source version that any generated \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/Filer.html#createSourceFile(java.lang.CharSequence,javax.lang.model.element.Element...)\"\u003esource\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/annotation/processing/Filer.html#createClassFile(java.lang.CharSequence,javax.lang.model.element.Element...)\"\u003eclass\u003c/a\u003e files should conform to"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocale",
      "comment": "Returns the current locale or null if no locale is in effect. The locale can be be used to provide localized messages.",
      "tagMap": {
        "return": [
          "the current locale or \n\u003ccode\u003enull\u003c/code\u003e if no locale is in effect"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPreviewEnabled",
      "comment": "Returns true if preview features are enabled and false otherwise.",
      "tagMap": {
        "implSpec": [
          "The default implementation of this method returns \n\u003ccode\u003efalse\u003c/code\u003e."
        ],
        "return": [
          "whether or not preview features are enabled"
        ],
        "since": [
          "13"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.annotation.processing.ProcessingEnvironment",
  "comment": "An annotation processing tool framework will \n\u003ca href\u003d\"Processor.html#init(javax.annotation.processing.ProcessingEnvironment)\"\u003eprovide an annotation processor with an object implementing this interface\u003c/a\u003e so the processor can use facilities provided by the framework to write new files, report error messages, and find other utilities. \n\u003cp\u003eThird parties may wish to provide value-add wrappers around the facility objects from this interface, for example a \u003ccode\u003eFiler\u003c/code\u003e extension that allows multiple processors to coordinate writing out a single source file. To enable this, for processors running in a context where their side effects via the API could be visible to each other, the tool infrastructure must provide corresponding facility objects that are \u003ccode\u003e.equals\u003c/code\u003e, \u003ccode\u003eFiler\u003c/code\u003es that are \u003ccode\u003e.equals\u003c/code\u003e, and so on. In addition, the tool invocation must be able to be configured such that from the perspective of the running annotation processors, at least the chosen subset of helper classes are viewed as being loaded by the same class loader. (Since the facility objects manage shared state, the implementation of a wrapper class must know whether or not the same base facility object has been wrapped before.)\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}