{
  "packageName": "jdk.incubator.vector",
  "simpleName": "Conversion",
  "moduleName": "jdk.incubator.vector",
  "type": "INTERFACE",
  "superClass": {
    "name": "jdk.incubator.vector.VectorOperators$Operator",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorOperators$Conversion",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "domainType",
      "comment": "The domain of this conversion, a primitive type.",
      "tagMap": {
        "return": [
          "the domain of this conversion"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorOperators$Conversion",
            "name": "F",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rangeType",
      "comment": "The range of this conversion, a primitive type.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Operator.html#rangeType()\"\u003erangeType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Operator.html\" title\u003d\"interface in jdk.incubator.vector\"\u003eVectorOperators.Operator\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the range of this conversion"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          },
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "from"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "to"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        },
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "check",
      "comment": "Ensures that this conversion has the desired domain and range types.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the desired domain type",
          "\u003ccode\u003eF\u003c/code\u003e - the desired range type"
        ],
        "param": [
          "\u003ccode\u003efrom\u003c/code\u003e - the desired domain type",
          "\u003ccode\u003eto\u003c/code\u003e - the desired range type"
        ],
        "return": [
          "this conversion object, with validated domain and range"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          },
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "from"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "to"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        },
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofCast",
      "comment": "The Java language assignment or casting conversion between two types.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the domain type (boxed version of a lane type)",
          "\u003ccode\u003eF\u003c/code\u003e - the range type (boxed version of a lane type)"
        ],
        "param": [
          "\u003ccode\u003efrom\u003c/code\u003e - the type of the value to convert",
          "\u003ccode\u003eto\u003c/code\u003e - the desired type after conversion"
        ],
        "return": [
          "a Java assignment or casting conversion"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          },
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "from"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "to"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        },
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofReinterpret",
      "comment": "The bitwise reinterpretation between two types.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the domain type (boxed version of a lane type)",
          "\u003ccode\u003eF\u003c/code\u003e - the range type (boxed version of a lane type)"
        ],
        "param": [
          "\u003ccode\u003efrom\u003c/code\u003e - the type of the value to reinterpret",
          "\u003ccode\u003eto\u003c/code\u003e - the desired type after reinterpretation"
        ],
        "return": [
          "a bitwise reinterpretation conversion"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    },
    {
      "name": "F",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "jdk.incubator.vector.VectorOperators$Conversion",
  "comment": "Type for all \n\u003ca href\u003d\"Vector.html#lane-wise\"\u003elane-wise\u003c/a\u003e conversions on lane values, usable in expressions like \n\u003ccode\u003ew1 \u003d v0.\u003c/code\u003e\n\u003ca href\u003d\"Vector.html#convert(jdk.incubator.vector.VectorOperators.Conversion,int)\"\u003e\u003ccode\u003econvert\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(I2D, 1)\u003c/code\u003e.",
  "tagMap": {
    "apiNote": [
      "User code should not implement this interface. A future release of this type may restrict implementations to be members of the same package."
    ]
  }
}