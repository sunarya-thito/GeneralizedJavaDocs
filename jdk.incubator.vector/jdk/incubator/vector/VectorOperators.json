{
  "packageName": "jdk.incubator.vector",
  "simpleName": "VectorOperators",
  "moduleName": "jdk.incubator.vector",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NOT",
      "comment": "Produce ~a. Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZOMO",
      "comment": "Produce a\u003d\u003d0?0:-1 (zero or minus one). Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ABS",
      "comment": "Produce abs(a).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NEG",
      "comment": "Produce -a.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIN",
      "comment": "Produce sin(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COS",
      "comment": "Produce cos(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TAN",
      "comment": "Produce tan(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ASIN",
      "comment": "Produce asin(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ACOS",
      "comment": "Produce acos(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ATAN",
      "comment": "Produce atan(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EXP",
      "comment": "Produce exp(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LOG",
      "comment": "Produce log(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LOG10",
      "comment": "Produce log10(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SQRT",
      "comment": "Produce sqrt(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CBRT",
      "comment": "Produce cbrt(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SINH",
      "comment": "Produce sinh(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COSH",
      "comment": "Produce cosh(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TANH",
      "comment": "Produce tanh(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EXPM1",
      "comment": "Produce expm1(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Unary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LOG1P",
      "comment": "Produce log1p(a). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ADD",
      "comment": "Produce a+b.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SUB",
      "comment": "Produce a-b.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MUL",
      "comment": "Produce a*b.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIV",
      "comment": "Produce a/b. Floating only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN",
      "comment": "Produce min(a,b).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX",
      "comment": "Produce max(a,b).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FIRST_NONZERO",
      "comment": "Produce bits(a)!\u003d0?a:b.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AND",
      "comment": "Produce a\u0026b. Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AND_NOT",
      "comment": "Produce a\u0026~b. Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OR",
      "comment": "Produce a|b. Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Associative",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "XOR",
      "comment": "Produce a^b. Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LSHL",
      "comment": "Produce a\u003c\u003c(n\u0026(ESIZE*8-1)). Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ASHR",
      "comment": "Produce a\u003e\u003e(n\u0026(ESIZE*8-1)). Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LSHR",
      "comment": "Produce a\u003e\u003e\u003e(n\u0026(ESIZE*8-1)). Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROL",
      "comment": "Produce rotateLeft(a,n). Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROR",
      "comment": "Produce rotateRight(a,n). Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ATAN2",
      "comment": "Produce atan2(a,b). See Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "POW",
      "comment": "Produce pow(a,b). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Binary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HYPOT",
      "comment": "Produce hypot(a,b). Floating only. See section \"Operations on floating point vectors\" above",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Ternary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITWISE_BLEND",
      "comment": "Produce a^((a^b)\u0026c). (Bitwise (c(i)?b(i):a(i)).) Integral only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Ternary",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FMA",
      "comment": "Produce fma(a,b,c). Floating only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Test",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IS_DEFAULT",
      "comment": "Test bits(a)\u003d\u003d0. (Not true of -0.0.)",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Test",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IS_NEGATIVE",
      "comment": "Test bits(a)\u003c0. (True of -0.0.)",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Test",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IS_FINITE",
      "comment": "Test isFinite(a). Floating only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Test",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IS_NAN",
      "comment": "Test isNaN(a). Floating only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Test",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IS_INFINITE",
      "comment": "Test isInfinite(a). Floating only.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Comparison",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EQ",
      "comment": "Compare a\u003d\u003db.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Comparison",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NE",
      "comment": "Compare a!\u003db.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Comparison",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LT",
      "comment": "Compare a\u003cb.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Comparison",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LE",
      "comment": "Compare a\u003c\u003db.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Comparison",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GT",
      "comment": "Compare a\u003eb.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Comparison",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GE",
      "comment": "Compare a\u003e\u003db.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "B2D",
      "comment": "Convert byteVal to (double)byteVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "B2F",
      "comment": "Convert byteVal to (float)byteVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "B2I",
      "comment": "Convert byteVal to (int)byteVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "B2L",
      "comment": "Convert byteVal to (long)byteVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "B2S",
      "comment": "Convert byteVal to (short)byteVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Double",
            "type": "Class"
          },
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "D2B",
      "comment": "Convert doubleVal to (byte)doubleVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Double",
            "type": "Class"
          },
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "D2F",
      "comment": "Convert doubleVal to (float)doubleVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Double",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "D2I",
      "comment": "Convert doubleVal to (int)doubleVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Double",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "D2L",
      "comment": "Convert doubleVal to (long)doubleVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Double",
            "type": "Class"
          },
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "D2S",
      "comment": "Convert doubleVal to (short)doubleVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          },
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "F2B",
      "comment": "Convert floatVal to (byte)floatVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          },
          {
            "name": "java.lang.Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "F2D",
      "comment": "Convert floatVal to (double)floatVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "F2I",
      "comment": "Convert floatVal to (int)floatVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "F2L",
      "comment": "Convert floatVal to (long)floatVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          },
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "F2S",
      "comment": "Convert floatVal to (short)floatVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "I2B",
      "comment": "Convert intVal to (byte)intVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "I2D",
      "comment": "Convert intVal to (double)intVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "I2F",
      "comment": "Convert intVal to (float)intVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "I2L",
      "comment": "Convert intVal to (long)intVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "I2S",
      "comment": "Convert intVal to (short)intVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          },
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "L2B",
      "comment": "Convert longVal to (byte)longVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          },
          {
            "name": "java.lang.Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "L2D",
      "comment": "Convert longVal to (double)longVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          },
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "L2F",
      "comment": "Convert longVal to (float)longVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "L2I",
      "comment": "Convert longVal to (int)longVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          },
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "L2S",
      "comment": "Convert longVal to (short)longVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "S2B",
      "comment": "Convert shortVal to (byte)shortVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "S2D",
      "comment": "Convert shortVal to (double)shortVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "S2F",
      "comment": "Convert shortVal to (float)shortVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "S2I",
      "comment": "Convert shortVal to (int)shortVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "S2L",
      "comment": "Convert shortVal to (long)shortVal.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Double",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "REINTERPRET_D2L",
      "comment": "Reinterpret bits of doubleVal as long. As if by Double.doubleToRawLongBits(double)",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "REINTERPRET_F2I",
      "comment": "Reinterpret bits of floatVal as int. As if by Float.floatToRawIntBits(float)",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "REINTERPRET_I2F",
      "comment": "Reinterpret bits of intVal as float. As if by Float.intBitsToFloat(int)",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          },
          {
            "name": "java.lang.Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "REINTERPRET_L2D",
      "comment": "Reinterpret bits of longVal as double. As if by Double.longBitsToDouble(long)",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO_EXTEND_B2I",
      "comment": "Zero-extend byteVal to int.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO_EXTEND_B2L",
      "comment": "Zero-extend byteVal to long.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO_EXTEND_B2S",
      "comment": "Zero-extend byteVal to short.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO_EXTEND_I2L",
      "comment": "Zero-extend intVal to long.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO_EXTEND_S2I",
      "comment": "Zero-extend shortVal to int.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorOperators$Conversion",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          },
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO_EXTEND_S2L",
      "comment": "Zero-extend shortVal to long.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "jdk.incubator.vector.VectorOperators$Operator",
    "jdk.incubator.vector.VectorOperators$Ternary",
    "jdk.incubator.vector.VectorOperators$Conversion",
    "jdk.incubator.vector.VectorOperators$Associative",
    "jdk.incubator.vector.VectorOperators$Test",
    "jdk.incubator.vector.VectorOperators$Binary",
    "jdk.incubator.vector.VectorOperators$Comparison",
    "jdk.incubator.vector.VectorOperators$Unary"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "jdk.incubator.vector.VectorOperators",
  "comment": "This class consists solely of static constants that describe lane-wise vector operations, plus nested interfaces which classify them. The static constants serve as tokens denoting specifically requested lane operations in vector expressions, such as the token \n\u003ccode\u003eADD\u003c/code\u003e in \n\u003ccode\u003ew \u003d v0.\u003c/code\u003e\n\u003ca href\u003d\"Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(ADD, v1)\u003c/code\u003e. \n\u003cp\u003e The documentation for each individual operator token is very brief, giving a symbolic Java expression for the operation that the token requests. Those symbolic expressions use the following conventional elements: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003ec\u003c/code\u003e — names of lane values \u003c/li\u003e\n \u003cli\u003eJava operators like \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e?:\u003c/code\u003e, etc. — expression operators \u003c/li\u003e\n \u003cli\u003eJava method names like \u003ccode\u003emax\u003c/code\u003e, \u003ccode\u003esin\u003c/code\u003e, etc. — methods in standard classes like \u003ccode\u003eMath\u003c/code\u003e, \u003ccode\u003eDouble\u003c/code\u003e, etc. Unqualified method names should be read as if in the context of a static import, and with resolution of overloading. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003ebits(x)\u003c/code\u003e — a function call which produces the underlying bits of the value \u003ccode\u003ex\u003c/code\u003e. If \u003ccode\u003ex\u003c/code\u003e is a floating point value, this is either \u003ccode\u003edoubleToLongBits(x)\u003c/code\u003e or \u003ccode\u003efloatToIntBits(x)\u003c/code\u003e. Otherwise, the value is just \u003ccode\u003ex\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eESIZE\u003c/code\u003e — the size in bytes of the operand type \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eintVal\u003c/code\u003e, \u003ccode\u003ebyteVal\u003c/code\u003e, etc. — the operand of a conversion, with the indicated type \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eOperations on floating point vectors\u003c/h2\u003e \n\u003cul\u003e \n \u003cli\u003eLane-wise vector operations that apply to floating point vectors follow the accuracy and monotonicity specifications of the equivalent Java operation or method mentioned in its documentation. If the vector element type is \u003ccode\u003efloat\u003c/code\u003e and the Java operation or method only accepts and returns \u003ccode\u003edouble\u003c/code\u003e values, then the scalar operation on each lane is adapted to cast operands and the result, specifically widening \u003ccode\u003efloat\u003c/code\u003e operands to \u003ccode\u003edouble\u003c/code\u003e operands and narrowing the \u003ccode\u003edouble\u003c/code\u003e result to a \u003ccode\u003efloat\u003c/code\u003e. \u003c/li\u003e\n \u003cli id\u003d\"fp_assoc\"\u003eCertain associative operations that apply to floating point vectors are not truly associative on the floating point lane values. Specifically, \u003ca href\u003d\"#ADD\"\u003e\u003ccode\u003eADD\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#MUL\"\u003e\u003ccode\u003eMUL\u003c/code\u003e\u003c/a\u003e used with cross-lane reduction operations, such as \u003ca href\u003d\"FloatVector.html#reduceLanes(jdk.incubator.vector.VectorOperators.Associative)\"\u003e\u003ccode\u003eFloatVector.reduceLanes(Associative)\u003c/code\u003e\u003c/a\u003e. The result of such an operation is a function both of the input values (vector and mask) as well as the order of the scalar operations applied to combine lane values. In such cases the order is intentionally not defined. This allows the JVM to generate optimal machine code for the underlying platform at runtime. If the platform supports a vector instruction to add or multiply all values in the vector, or if there is some other efficient machine code sequence, then the JVM has the option of generating this machine code. Otherwise, the default implementation is applied, which adds vector elements sequentially from beginning to end. For this reason, the result of such an operation may vary for the same input values. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e Note that a particular operator token may apply to several different lane types. Thus, these tokens behave like overloaded operators or methods, not like type-specific method handles or lambdas. Also unlike method handles or lambdas, these operators do not possess operational semantics; they have no \u003ccode\u003eapply\u003c/code\u003e or \u003ccode\u003einvoke\u003c/code\u003e method. They are used only to request lane operations from vector objects, and cannot (by themselves) perform operations on individual lane values.\u003c/p\u003e",
  "tagMap": {}
}