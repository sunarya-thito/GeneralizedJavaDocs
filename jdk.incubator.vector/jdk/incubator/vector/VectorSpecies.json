{
  "packageName": "jdk.incubator.vector",
  "simpleName": "VectorSpecies",
  "moduleName": "jdk.incubator.vector",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "elementType",
      "comment": "Returns the primitive element type of vectors of this species.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#arrayType()\"\u003e\u003ccode\u003eClass.arrayType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the primitive element type (\n\u003ccode\u003eETYPE\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "jdk.incubator.vector.Vector",
                "parameters": [
                  {
                    "owner": "jdk.incubator.vector.VectorSpecies",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vectorType",
      "comment": "Returns the vector type of this species. A vector is of this species if and only if it is of the corresponding vector type.",
      "tagMap": {
        "return": [
          "the vector type of this species"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "jdk.incubator.vector.VectorMask",
                "parameters": [
                  {
                    "owner": "jdk.incubator.vector.VectorSpecies",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "maskType",
      "comment": "Returns the vector mask type for this species.",
      "tagMap": {
        "return": [
          "the mask type"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "elementSize",
      "comment": "Returns the lane size, in bits, of vectors of this species.",
      "tagMap": {
        "return": [
          "the element size, in bits"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorShape",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vectorShape",
      "comment": "Returns the shape of vectors produced by this species.",
      "tagMap": {
        "return": [
          "the shape of any vectors of this species"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "length",
      "comment": "Returns the number of lanes in a vector of this species.",
      "tagMap": {
        "apiNote": [
          "This is also the number of lanes in a mask or shuffle associated with a vector of this species."
        ],
        "return": [
          "the number of vector lanes"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vectorBitSize",
      "comment": "Returns the total vector size, in bits, of any vector of this species. This is the same value as this.vectorShape().vectorBitSize().",
      "tagMap": {
        "apiNote": [
          "This size may be distinct from the size in bits of a mask or shuffle of this species."
        ],
        "return": [
          "the total vector size, in bits"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vectorByteSize",
      "comment": "Returns the total vector size, in bytes, of any vector of this species. This is the same value as this.vectorShape().vectorBitSize() / Byte.SIZE.",
      "tagMap": {
        "apiNote": [
          "This size may be distinct from the size in bits of a mask or shuffle of this species."
        ],
        "return": [
          "the total vector size, in bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loopBound",
      "comment": "Loop control function which returns the largest multiple of VLENGTH that is less than or equal to the given length value. Here, VLENGTH is the result of this.length(), and length is interpreted as a number of lanes. The resulting value R satisfies this inequality: R \u003c\u003d length \u003c R+VLENGTH\n Specifically, this method computes length - floorMod(length, VLENGTH), where floorMod computes a remainder value by rounding its quotient toward negative infinity. As long as VLENGTH is a power of two, then the result is also equal to length \u0026 ~(VLENGTH - 1).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorMod(long,long)\"\u003e\u003ccode\u003eMath.floorMod(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elength\u003c/code\u003e - the input length"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003elength\u003c/code\u003e is negative and the result would overflow to a positive value"
        ],
        "return": [
          "the largest multiple of the vector length not greater than the given length"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "indexInRange",
      "comment": "Returns a mask of this species where only the lanes at index N such that the adjusted index N+offset is in the range [0..limit-1] are set. This method returns the value of the expression maskAll(true).indexInRange(offset, limit)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorMask.html#indexInRange(int,int)\"\u003e\u003ccode\u003eVectorMask.indexInRange(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting index",
          "\u003ccode\u003elimit\u003c/code\u003e - the upper-bound (exclusive) of index range"
        ],
        "return": [
          "a mask with out-of-range lanes unset"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "elementType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "check",
      "comment": "Checks that this species has the given element type, and returns this species unchanged. The effect is similar to this pseudocode: elementType \u003d\u003d elementType() ? this : throw new ClassCastException().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type of the required lane type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#check(java.lang.Class)\"\u003e\u003ccode\u003eVector.check(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#check(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eVector.check(VectorSpecies)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eelementType\u003c/code\u003e - the required lane type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the species has the wrong element type"
        ],
        "return": [
          "the same species"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "outputSpecies"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "lanewise"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "partLimit",
      "comment": "Given this species and a second one, reports the net expansion or contraction of a (potentially) resizing reinterpretation cast or lane-wise conversion from this species to the second. The sign and magnitude of the return value depends on the size difference between the proposed input and output shapes, and (optionally, if lanewise is true) also on the size difference between the proposed input and output lanes. First, a logical result size is determined. If lanewise is false, this size that of the input VSHAPE. If lanewise is true, the logical result size is the product of the input VLENGTH times the size of the output ETYPE. Next, the logical result size is compared against the size of the proposed output shape, to see how it will fit. If the logical result fits precisely in the output shape, the return value is zero, signifying no net expansion or contraction. If the logical result would overflow the output shape, the return value is the ratio (greater than one) of the logical result size to the (smaller) output size. This ratio can be viewed as measuring the proportion of \"dropped input bits\" which must be deleted from the input in order for the result to fit in the output vector. It is also the part limit, a upper exclusive limit on the part parameter to a method that would transform the input species to the output species. If the logical result would drop into the output shape with room to spare, the return value is a negative number whose absolute value the ratio (greater than one) between the output size and the (smaller) logical result size. This ratio can be viewed as measuring the proportion of \"extra padding bits\" which must be added to the logical result to fill up the output vector. It is also the part limit, an exclusive lower limit on the part parameter to a method that would transform the input species to the output species.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretShape(jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.reinterpretShape(VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convertShape(jdk.incubator.vector.VectorOperators.Conversion,jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.convertShape(VectorOperators.Conversion,VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoutputSpecies\u003c/code\u003e - the proposed output species",
          "\u003ccode\u003elanewise\u003c/code\u003e - whether to take lane sizes into account"
        ],
        "return": [
          "an indication of the size change, as a signed ratio or zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "newType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "withLanes",
      "comment": "Finds a species with the given element type and the same shape as this species. Returns the same value as VectorSpecies.of(newType, this.vectorShape()).",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#withShape(jdk.incubator.vector.VectorShape)\"\u003e\u003ccode\u003ewithShape(VectorShape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#of(java.lang.Class,jdk.incubator.vector.VectorShape)\"\u003e\u003ccode\u003eof(Class, VectorShape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewType\u003c/code\u003e - the new element type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no such species exists for the given combination of element type and shape or if the given type is not a valid \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "a species for the new element type and the same shape"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorShape",
            "type": "Class"
          },
          "field": {
            "name": "newShape"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "withShape",
      "comment": "Finds a species with the given shape and the same elementType as this species. Returns the same value as VectorSpecies.of(this.elementType(), newShape).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#withLanes(java.lang.Class)\"\u003e\u003ccode\u003ewithLanes(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#of(java.lang.Class,jdk.incubator.vector.VectorShape)\"\u003e\u003ccode\u003eof(Class, VectorShape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewShape\u003c/code\u003e - the new shape"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no such species exists for the given combination of element type and shape"
        ],
        "return": [
          "a species for the same element type and the new shape"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "elementType"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorShape",
            "type": "Class"
          },
          "field": {
            "name": "shape"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Finds a species for an element type and shape.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the boxed element type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#withLanes(java.lang.Class)\"\u003e\u003ccode\u003ewithLanes(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#withShape(jdk.incubator.vector.VectorShape)\"\u003e\u003ccode\u003ewithShape(VectorShape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eelementType\u003c/code\u003e - the element type",
          "\u003ccode\u003eshape\u003c/code\u003e - the shape"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no such species exists for the given combination of element type and shape or if the given type is not a valid \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "a species for the given element type and shape"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "etype"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofLargestShape",
      "comment": "Finds the largest vector species of the given element type. The returned species is a species chosen by the platform that has a shape with the largest possible bit-size for the given element type. The underlying vector shape might not support other lane types on some platforms, which may limit the applicability of reinterpretation casts. Vector algorithms which require reinterpretation casts will be more portable if they use the platform\u0027s preferred species.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the boxed element type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#ofPreferred(java.lang.Class)\"\u003e\u003ccode\u003eofPreferred(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eetype\u003c/code\u003e - the element type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no such species exists for the element type or if the given type is not a valid \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "a preferred species for an element type"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "etype"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofPreferred",
      "comment": "Finds the species preferred by the current platform for a given vector element type. This is the same value as VectorSpecies.of(etype, VectorShape.preferredShape()). This species is chosen by the platform so that it has the largest possible shape that supports all lane element types. This has the following implications: The various preferred species for different element types will have the same underlying shape. All vectors created from preferred species will have a common bit-size and information capacity. Reinterpretation casts between vectors of preferred species will neither truncate lanes nor fill them with default values. For any particular element type, some platform might possibly provide a larger vector shape that (as a trade-off) does not support all possible element types.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the boxed element type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretShape(jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.reinterpretShape(VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShape.html#preferredShape()\"\u003e\u003ccode\u003eVectorShape.preferredShape()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#ofLargestShape(java.lang.Class)\"\u003e\u003ccode\u003eofLargestShape(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eetype\u003c/code\u003e - the element type"
        ],
        "implNote": [
          "On many platforms there is no behavioral difference between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#ofLargestShape(java.lang.Class)\"\u003e\u003ccode\u003eofLargestShape\u003c/code\u003e\u003c/a\u003e and \n\u003ccode\u003eofPreferred\u003c/code\u003e, because the preferred shape is usually also the largest available shape for every lane type. Therefore, most vector algorithms will perform well without \n\u003ccode\u003eofLargestShape\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no such species exists for the element type or if the given type is not a valid \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "a preferred species for this element type"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "elementType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "elementSize",
      "comment": "Returns the bit-size of the given vector element type (ETYPE). The element type must be a valid ETYPE, not a wrapper type or other object type. The element type argument must be a mirror for a valid vector ETYPE, such as byte.class, int.class, or double.class. The bit-size of such a type is the SIZE constant for the corresponding wrapper class, such as Byte.SIZE, or Integer.SIZE, or Double.SIZE.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementType\u003c/code\u003e - a vector element type (an \n\u003ccode\u003eETYPE\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003eelementType\u003c/code\u003e argument is not a valid vector \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "the bit-size of \n\u003ccode\u003eelementType\u003c/code\u003e, such as 32 for \n\u003ccode\u003eint.class\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "zero",
      "comment": "Returns a vector of this species where all lane elements are set to the default primitive value, (ETYPE)0. Equivalent to IntVector.zero(this) or an equivalent zero method, on the vector type corresponding to this species.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#zero(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eIntVector.zero(VectorSpecies)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/FloatVector.html#zero(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eFloatVector.zero(VectorSpecies)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a zero vector of the given species"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "fromArray",
      "comment": "Returns a vector of this species where lane elements are initialized from the given array at the given offset. The array must be of the the correct ETYPE. Equivalent to IntVector.fromArray(this,a,offset) or an equivalent fromArray method, on the vector type corresponding to this species.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#fromArray(jdk.incubator.vector.VectorSpecies,int%5B%5D,int)\"\u003e\u003ccode\u003eIntVector.fromArray(VectorSpecies,int[],int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/FloatVector.html#fromArray(jdk.incubator.vector.VectorSpecies,float%5B%5D,int)\"\u003e\u003ccode\u003eFloatVector.fromArray(VectorSpecies,float[],int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an array of the \n\u003ccode\u003eETYPE\u003c/code\u003e for this species",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of the first lane value to load"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N \u0026gt;\u003d a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ],
        "return": [
          "a vector of the given species filled from the array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "fromByteArray",
      "comment": "Loads a vector of this species from a byte array starting at an offset. Bytes are composed into primitive lane elements according to the specified byte order. The vector is arranged into lanes according to memory ordering. Equivalent to IntVector.fromByteArray(this,a,offset,bo) or an equivalent fromByteArray method, on the vector type corresponding to this species.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#fromByteArray(jdk.incubator.vector.VectorSpecies,byte%5B%5D,int,java.nio.ByteOrder)\"\u003e\u003ccode\u003eIntVector.fromByteArray(VectorSpecies,byte[],int,ByteOrder)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/FloatVector.html#fromByteArray(jdk.incubator.vector.VectorSpecies,byte%5B%5D,int,java.nio.ByteOrder)\"\u003e\u003ccode\u003eFloatVector.fromByteArray(VectorSpecies,byte[],int,ByteOrder)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a byte array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of the first byte to load",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N*ESIZE \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+(N+1)*ESIZE \u0026gt; a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ],
        "return": [
          "a vector of the given species filled from the byte array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadMask",
      "comment": "Returns a mask of this species where lane elements are initialized from the given array at the given offset. Equivalent to VectorMask.fromArray(this,a,offset).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorMask.html#fromArray(jdk.incubator.vector.VectorSpecies,boolean%5B%5D,int)\"\u003e\u003ccode\u003eVectorMask.fromArray(VectorSpecies,boolean[],int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - the \n\u003ccode\u003eboolean\u003c/code\u003e array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N \u0026gt;\u003d a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector mask"
        ],
        "return": [
          "the mask loaded from the \n\u003ccode\u003eboolean\u003c/code\u003e array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "bit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "maskAll",
      "comment": "Returns a mask of this species, where each lane is set or unset according to given single boolean, which is broadcast to all lanes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#maskAll(boolean)\"\u003e\u003ccode\u003eVector.maskAll(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebit\u003c/code\u003e - the given mask bit to be replicated"
        ],
        "return": [
          "a mask where each lane is set or unset according to the given bit"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcast",
      "comment": "Returns a vector of the given species where all lane elements are set to the primitive value e. This method returns the value of this expression: EVector.broadcast(this, (ETYPE)e), where EVector is the vector class specific to the the ETYPE of this species. The long value must be accurately representable by ETYPE, so that e\u003d\u003d(long)(ETYPE)e.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#checkValue(long)\"\u003e\u003ccode\u003echeckValue(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to broadcast"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003elong\u003c/code\u003e value cannot be represented by the vector species \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "a vector where all lane elements are set to the primitive value \n\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "checkValue",
      "comment": "Checks that this species can represent the given element value, and returns the value unchanged. The long value must be accurately representable by the ETYPE of the vector species, so that e\u003d\u003d(long)(ETYPE)e. The effect is similar to this pseudocode: e \u003d\u003d (long)(ETYPE)e ? e : throw new IllegalArgumentException().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to be checked"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003elong\u003c/code\u003e value cannot be represented by the vector species \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorShuffle",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sourceIndexes"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shuffleFromValues",
      "comment": "Creates a shuffle for this species from a series of source indexes. For each shuffle lane, where N is the shuffle lane index, the Nth index value is validated against the species VLENGTH, and (if invalid) is partially wrapped to an exceptional index in the range [-VLENGTH..-1].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#fromValues(jdk.incubator.vector.VectorSpecies,int...)\"\u003e\u003ccode\u003eVectorShuffle.fromValues(VectorSpecies,int...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esourceIndexes\u003c/code\u003e - the source indexes which the shuffle will draw from"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esourceIndexes.length !\u003d VLENGTH\u003c/code\u003e"
        ],
        "return": [
          "a shuffle where each lane\u0027s source index is set to the given \n\u003ccode\u003eint\u003c/code\u003e value, partially wrapped if exceptional"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorShuffle",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "sourceIndexes"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shuffleFromArray",
      "comment": "Creates a shuffle for this species from an int array starting at an offset. For each shuffle lane, where N is the shuffle lane index, the array element at index i + N is validated against the species VLENGTH, and (if invalid) is partially wrapped to an exceptional index in the range [-VLENGTH..-1].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#fromArray(jdk.incubator.vector.VectorSpecies,int%5B%5D,int)\"\u003e\u003ccode\u003eVectorShuffle.fromArray(VectorSpecies,int[],int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esourceIndexes\u003c/code\u003e - the source indexes which the shuffle will draw from",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset \u0026lt; 0\u003c/code\u003e, or \n\u003ccode\u003eoffset \u0026gt; sourceIndexes.length - VLENGTH\u003c/code\u003e"
        ],
        "return": [
          "a shuffle where each lane\u0027s source index is set to the given \n\u003ccode\u003eint\u003c/code\u003e value, partially wrapped if exceptional"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorShuffle",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.IntUnaryOperator",
            "type": "Class"
          },
          "field": {
            "name": "fn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shuffleFromOp",
      "comment": "Creates a shuffle for this species from the successive values of an operator applied to the range [0..VLENGTH-1]. For each shuffle lane, where N is the shuffle lane index, the Nth index value is validated against the species VLENGTH, and (if invalid) is partially wrapped to an exceptional index in the range [-VLENGTH..-1]. Care should be taken to ensure VectorShuffle values produced from this method are consumed as constants to ensure optimal generation of code. For example, shuffle values can be held in static final fields or loop-invariant local variables. This method behaves as if a shuffle is created from an array of mapped indexes as follows: \n   int[] a \u003d new int[VLENGTH];\n   for (int i \u003d 0; i \u003c a.length; i++) {\n       a[i] \u003d fn.applyAsInt(i);\n   }\n   return VectorShuffle.fromArray(this, a, 0);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#fromOp(jdk.incubator.vector.VectorSpecies,java.util.function.IntUnaryOperator)\"\u003e\u003ccode\u003eVectorShuffle.fromOp(VectorSpecies,IntUnaryOperator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the lane index mapping function"
        ],
        "return": [
          "a shuffle of mapped indexes"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorShuffle",
        "parameters": [
          {
            "owner": "jdk.incubator.vector.VectorSpecies",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "step"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "wrap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "iotaShuffle",
      "comment": "Creates a shuffle using source indexes set to sequential values starting from start and stepping by the given step. This method returns the value of the expression VectorSpecies.shuffleFromOp(i -\u003e R(start + i * step)), where R is wrapIndex if wrap is true, and is the identity function otherwise. If wrap is false each index is validated against the species VLENGTH, and (if invalid) is partially wrapped to an exceptional index in the range [-VLENGTH..-1]. Otherwise, if wrap is true, also reduce each index, as if by wrapIndex, to the valid range [0..VLENGTH-1].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#iota(jdk.incubator.vector.VectorSpecies,int,int,boolean)\"\u003e\u003ccode\u003eVectorShuffle.iota(VectorSpecies,int,int,boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "The \n\u003ccode\u003ewrap\u003c/code\u003e parameter should be set to \n\u003ccode\u003e true\u003c/code\u003e if invalid source indexes should be wrapped. Otherwise, setting it to \n\u003ccode\u003efalse\u003c/code\u003e allows invalid source indexes to be range-checked by later operations such as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle)\"\u003e\u003ccode\u003eunary rearrange\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the starting value of the source index sequence, typically \n\u003ccode\u003e0\u003c/code\u003e",
          "\u003ccode\u003estep\u003c/code\u003e - the difference between adjacent source indexes, typically \n\u003ccode\u003e1\u003c/code\u003e",
          "\u003ccode\u003ewrap\u003c/code\u003e - whether to wrap resulting indexes modulo \n\u003ccode\u003eVLENGTH\u003c/code\u003e"
        ],
        "return": [
          "a shuffle of sequential lane indexes"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Returns a string of the form \"Species[ETYPE, VLENGTH, SHAPE]\", where ETYPE is the primitive lane type, VLENGTH is the vector lane count associated with the species, and SHAPE is the vector shape associated with the species.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string of the form \"Species[ETYPE, VLENGTH, SHAPE]\""
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Indicates whether this species is identical to some other object. Two species are identical only if they have the same shape and same element type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "whether this species is identical to some other object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Returns a hash code value for the species, based on the vector shape and element type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this species"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.incubator.vector.VectorSpecies",
  "comment": "Interface for managing all vectors of the same combination of \n\u003ca href\u003d\"Vector.html#ETYPE\"\u003eelement type\u003c/a\u003e (\n\u003ccode\u003eETYPE\u003c/code\u003e) and \n\u003ca href\u003d\"VectorShape.html\" title\u003d\"enum class in jdk.incubator.vector\"\u003e\u003ccode\u003eshape\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {
    "apiNote": [
      "User code should not implement this interface. A future release of this type may restrict implementations to be members of the same package."
    ],
    "implNote": [
      "The string representation of an instance of this interface will be of the form \"Species[ETYPE, VLENGTH, SHAPE]\", where \n\u003ccode\u003e ETYPE\u003c/code\u003e is the primitive \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#elementType()\"\u003elane type\u003c/a\u003e, \n\u003ccode\u003eVLENGTH\u003c/code\u003e is the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#length()\"\u003evector lane count\u003c/a\u003e associated with the species, and \n\u003ccode\u003eSHAPE\u003c/code\u003e is the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#vectorShape()\"\u003evector shape\u003c/a\u003e associated with the species. \n\u003cp\u003eVector species objects can be stored in locals and parameters and as \u003ccode\u003estatic final\u003c/code\u003e constants, but storing them in other Java fields or in array elements, while semantically valid, may incur performance penalties.\u003c/p\u003e"
    ]
  }
}