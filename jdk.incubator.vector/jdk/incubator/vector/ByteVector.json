{
  "packageName": "jdk.incubator.vector",
  "simpleName": "ByteVector",
  "moduleName": "jdk.incubator.vector",
  "type": "CLASS",
  "superClass": {
    "name": "jdk.incubator.vector.Vector",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPECIES_64",
      "comment": "Species representing ByteVectors of VectorShape.S_64_BIT.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPECIES_128",
      "comment": "Species representing ByteVectors of VectorShape.S_128_BIT.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPECIES_256",
      "comment": "Species representing ByteVectors of VectorShape.S_256_BIT.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPECIES_512",
      "comment": "Species representing ByteVectors of VectorShape.S_512_BIT.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPECIES_MAX",
      "comment": "Species representing ByteVectors of VectorShape.S_Max_BIT.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPECIES_PREFERRED",
      "comment": "Preferred species for ByteVectors. A preferred species is a species of maximal bit-size for the platform.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "zero",
      "comment": "Returns a vector of the given species where all lane elements are set to zero, the default primitive value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of the desired zero vector"
        ],
        "return": [
          "a zero vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "broadcast",
      "comment": "Returns a vector of the same species as this one where all lane elements are set to the primitive value e. The contents of the current vector are discarded; only the species is relevant to this operation. This method returns the value of this expression: ByteVector.broadcast(this.species(), e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(jdk.incubator.vector.VectorSpecies,long)\"\u003e\u003ccode\u003ebroadcast(VectorSpecies,long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#broadcast(long)\"\u003e\u003ccode\u003eVectorSpecies.broadcast(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "Unlike the similar method named \n\u003ccode\u003ebroadcast()\u003c/code\u003e in the supertype \n\u003ccode\u003eVector\u003c/code\u003e, this method does not need to validate its argument, and cannot throw \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e. This method is therefore preferable to the supertype method."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to broadcast"
        ],
        "return": [
          "a vector where all lane elements are set to the primitive value \n\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "broadcast",
      "comment": "Returns a vector of the given species where all lane elements are set to the primitive value e.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#broadcast(long)\"\u003e\u003ccode\u003eVectorSpecies.broadcast(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of the desired vector",
          "\u003ccode\u003ee\u003c/code\u003e - the value to broadcast"
        ],
        "return": [
          "a vector where all lane elements are set to the primitive value \n\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "broadcast",
      "comment": "Returns a vector of the same species as this one where all lane elements are set to the primitive value e. The contents of the current vector are discarded; only the species is relevant to this operation. This method returns the value of this expression: EVector.broadcast(this.species(), (ETYPE)e), where EVector is the vector class specific to this vector\u0027s element type ETYPE. The long value e must be accurately representable by the ETYPE of this vector\u0027s species, so that e\u003d\u003d(long)(ETYPE)e. If this rule is violated the problem is not detected statically, but an IllegalArgumentException is thrown at run-time. Thus, this method somewhat weakens the static type checking of immediate constants and other scalars, but it makes up for this by improving the expressiveness of the generic API. Note that an e value in the range [-128..127] is always acceptable, since every ETYPE will accept every byte value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#broadcast(long)\"\u003e\u003ccode\u003eVectorSpecies.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#broadcast(long)\"\u003e\u003ccode\u003eIntVector.broadcast(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/FloatVector.html#broadcast(float)\"\u003e\u003ccode\u003eFloatVector.broadcast(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "When working with vector subtypes like \n\u003ccode\u003eByteVector\u003c/code\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003ethe more strongly typed method\u003c/a\u003e is typically selected. It can be explicitly selected using a cast: \n\u003ccode\u003ev.broadcast((byte)e)\u003c/code\u003e. The two expressions will produce numerically identical results."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003ebroadcast\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to broadcast"
        ],
        "return": [
          "a vector where all lane elements are set to the primitive value \n\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "broadcast",
      "comment": "Returns a vector of the given species where all lane elements are set to the primitive value e. The long value must be accurately representable by the ETYPE of the vector species, so that e\u003d\u003d(long)(ETYPE)e.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(jdk.incubator.vector.VectorSpecies,byte)\"\u003e\u003ccode\u003ebroadcast(VectorSpecies,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#checkValue(long)\"\u003e\u003ccode\u003eVectorSpecies.checkValue(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of the desired vector",
          "\u003ccode\u003ee\u003c/code\u003e - the value to broadcast"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003elong\u003c/code\u003e value cannot be represented by the vector\u0027s \n\u003ccode\u003eETYPE\u003c/code\u003e"
        ],
        "return": [
          "a vector where all lane elements are set to the primitive value \n\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Unary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lanewise",
      "comment": "Operates on the lane values of this vector. This is a lane-wise unary operation which applies the selected operation to each lane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#NEG\"\u003e\u003ccode\u003eVectorOperators.NEG\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#NOT\"\u003e\u003ccode\u003eVectorOperators.NOT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#SIN\"\u003e\u003ccode\u003eVectorOperators.SIN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Unary,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Ternary,Vector,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to process lane values"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Unary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Operates on the lane values of this vector, with selection of lane elements controlled by a mask. This is a lane-wise unary operation which applies the selected operation to each lane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Unary)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary,jdk.incubator.vector.VectorMask)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to process lane values",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Binary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lanewise",
      "comment": "Combines the corresponding lane values of this vector with those of a second input vector. This is a lane-wise binary operation which applies the selected operation to each lane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ev\u003c/code\u003e - the input vector"
        ],
        "return": [
          "the result of applying the operation lane-wise to the two input vectors"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Binary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the corresponding lane values of this vector with those of a second input vector, with selection of lane elements controlled by a mask. This is a lane-wise binary operation which applies the selected operation to each lane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ev\u003c/code\u003e - the second input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of applying the operation lane-wise to the two input vectors"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Binary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the value of a broadcast scalar. This is a lane-wise binary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to process lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the two input vectors"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Binary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the value of a broadcast scalar, with selection of lane elements controlled by a mask. This is a masked lane-wise binary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e), m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to process lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Binary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the value of a broadcast scalar. This is a lane-wise binary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,long,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "When working with vector subtypes like \n\u003ccode\u003eByteVector\u003c/code\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003ethe more strongly typed method\u003c/a\u003e is typically selected. It can be explicitly selected using a cast: \n\u003ccode\u003ev.lanewise(op,(byte)e)\u003c/code\u003e. The two expressions will produce numerically identical results."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Binary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the corresponding lane values of this vector with those of a second input vector, with selection of lane elements controlled by a mask. This is a lane-wise binary operation which applies the selected operation to each lane. The second operand is a broadcast integral value. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e), m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "When working with vector subtypes like \n\u003ccode\u003eByteVector\u003c/code\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,byte,jdk.incubator.vector.VectorMask)\"\u003ethe more strongly typed method\u003c/a\u003e is typically selected. It can be explicitly selected using a cast: \n\u003ccode\u003ev.lanewise(op,(byte)e,m)\u003c/code\u003e. The two expressions will produce numerically identical results."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long,jdk.incubator.vector.VectorMask)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lanewise",
      "comment": "Combines the corresponding lane values of this vector with the lanes of a second and a third input vector. This is a lane-wise ternary operation which applies the selected operation to each lane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,byte)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ev1\u003c/code\u003e - the second input vector",
          "\u003ccode\u003ev2\u003c/code\u003e - the third input vector"
        ],
        "return": [
          "the result of applying the operation lane-wise to the three input vectors"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v2"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the corresponding lane values of this vector with the lanes of a second and a third input vector, with selection of lane elements controlled by a mask. This is a lane-wise ternary operation which applies the selected operation to each lane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003elanewise\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ev1\u003c/code\u003e - the second input vector",
          "\u003ccode\u003ev2\u003c/code\u003e - the third input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of applying the operation lane-wise to the three input vectors"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e1"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the values of two broadcast scalars. This is a lane-wise ternary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e1), this.broadcast(e2)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ee1\u003c/code\u003e - the first input scalar",
          "\u003ccode\u003ee2\u003c/code\u003e - the second input scalar"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector and the scalars"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e1"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e2"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the values of two broadcast scalars, with selection of lane elements controlled by a mask. This is a masked lane-wise ternary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e1), this.broadcast(e2), m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ee1\u003c/code\u003e - the first input scalar",
          "\u003ccode\u003ee2\u003c/code\u003e - the second input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vector and the scalars"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the values of another vector and a broadcast scalar. This is a lane-wise ternary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, v1, this.broadcast(e2)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ev1\u003c/code\u003e - the other input vector",
          "\u003ccode\u003ee2\u003c/code\u003e - the input scalar"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vectors and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e2"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the values of another vector and a broadcast scalar, with selection of lane elements controlled by a mask. This is a masked lane-wise ternary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, v1, this.broadcast(e2), m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,byte)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ev1\u003c/code\u003e - the other input vector",
          "\u003ccode\u003ee2\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vectors and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e1"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the values of another vector and a broadcast scalar. This is a lane-wise ternary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e1), v2).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ee1\u003c/code\u003e - the input scalar",
          "\u003ccode\u003ev2\u003c/code\u003e - the other input vector"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vectors and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Ternary",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e1"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v2"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lanewise",
      "comment": "Combines the lane values of this vector with the values of another vector and a broadcast scalar, with selection of lane elements controlled by a mask. This is a masked lane-wise ternary operation which applies the selected operation to each lane. The return value will be equal to this expression: this.lanewise(op, this.broadcast(e1), v2, m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003ee1\u003c/code\u003e - the input scalar",
          "\u003ccode\u003ev2\u003c/code\u003e - the other input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the result of applying the operation lane-wise to the input vectors and the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "add",
      "comment": "Adds this vector to a second input vector. This is a lane-wise binary operation which applies the primitive addition operation (+) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(ADD, v). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(byte)\"\u003e\u003ccode\u003eadd(byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#add(jdk.incubator.vector.Vector)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the result of adding this vector to the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "add",
      "comment": "Adds this vector to the broadcast of an input scalar. This is a lane-wise binary operation which applies the primitive addition operation (+) to each lane. This method is also equivalent to the expression lanewise(ADD, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eadd(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eadd(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#ADD\"\u003e\u003ccode\u003eVectorOperators.ADD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of adding each lane of this vector to the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "add",
      "comment": "Adds this vector to a second input vector, selecting lanes under the control of a mask. This is a masked lane-wise binary operation which applies the primitive addition operation (+) to each pair of corresponding lane values. For any lane unset in the mask, the primitive operation is suppressed and this vector retains the original value stored in that lane. This method is also equivalent to the expression lanewise(ADD, v, m). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eadd(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#add(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the second input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of adding this vector to the given vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "add",
      "comment": "Adds this vector to the broadcast of an input scalar, selecting lane elements controlled by a mask. This is a masked lane-wise binary operation which applies the primitive addition operation (+) to each lane. This method is also equivalent to the expression lanewise(ADD, s, m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eadd(Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(byte)\"\u003e\u003ccode\u003eadd(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#ADD\"\u003e\u003ccode\u003eVectorOperators.ADD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of adding each lane of this vector to the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "sub",
      "comment": "Subtracts a second input vector from this vector. This is a lane-wise binary operation which applies the primitive subtraction operation (-) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(SUB, v). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#sub(byte)\"\u003e\u003ccode\u003esub(byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#sub(jdk.incubator.vector.Vector)\"\u003esub\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the result of subtracting the second input vector from this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "sub",
      "comment": "Subtracts an input scalar from this vector. This is a masked lane-wise binary operation which applies the primitive subtraction operation (-) to each lane. This method is also equivalent to the expression lanewise(SUB, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#sub(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003esub(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#sub(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003esub(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#SUB\"\u003e\u003ccode\u003eVectorOperators.SUB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of subtracting the scalar from each lane of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "sub",
      "comment": "Subtracts a second input vector from this vector under the control of a mask. This is a masked lane-wise binary operation which applies the primitive subtraction operation (-) to each pair of corresponding lane values. For any lane unset in the mask, the primitive operation is suppressed and this vector retains the original value stored in that lane. This method is also equivalent to the expression lanewise(SUB, v, m). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#sub(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003esub(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#sub(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003esub\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the second input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of subtracting the second input vector from this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "sub",
      "comment": "Subtracts an input scalar from this vector under the control of a mask. This is a masked lane-wise binary operation which applies the primitive subtraction operation (-) to each lane. This method is also equivalent to the expression lanewise(SUB, s, m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#sub(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003esub(Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#sub(byte)\"\u003e\u003ccode\u003esub(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#SUB\"\u003e\u003ccode\u003eVectorOperators.SUB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of subtracting the scalar from each lane of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "mul",
      "comment": "Multiplies this vector by a second input vector. This is a lane-wise binary operation which applies the primitive multiplication operation (*) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(MUL, v). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(byte)\"\u003e\u003ccode\u003emul(byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#mul(jdk.incubator.vector.Vector)\"\u003emul\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the result of multiplying this vector by the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "mul",
      "comment": "Multiplies this vector by the broadcast of an input scalar. This is a lane-wise binary operation which applies the primitive multiplication operation (*) to each lane. This method is also equivalent to the expression lanewise(MUL, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003emul(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003emul(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#MUL\"\u003e\u003ccode\u003eVectorOperators.MUL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of multiplying this vector by the given scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "mul",
      "comment": "Multiplies this vector by a second input vector under the control of a mask. This is a lane-wise binary operation which applies the primitive multiplication operation (*) to each pair of corresponding lane values. For any lane unset in the mask, the primitive operation is suppressed and this vector retains the original value stored in that lane. This method is also equivalent to the expression lanewise(MUL, v, m). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003emul(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#mul(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003emul\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the second input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of multiplying this vector by the given vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "mul",
      "comment": "Multiplies this vector by the broadcast of an input scalar, selecting lane elements controlled by a mask. This is a masked lane-wise binary operation which applies the primitive multiplication operation (*) to each lane. This method is also equivalent to the expression lanewise(MUL, s, m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003emul(Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(byte)\"\u003e\u003ccode\u003emul(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#MUL\"\u003e\u003ccode\u003eVectorOperators.MUL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of muling each lane of this vector to the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "div",
      "comment": "Divides this vector by a second input vector. This is a lane-wise binary operation which applies the primitive division operation (/) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(DIV, v). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#div(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.div(Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/DoubleVector.html#div(double)\"\u003e\u003ccode\u003eDoubleVector.div(double)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#DIV\"\u003e\u003ccode\u003eVectorOperators.DIV\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003eIntVector.lanewise(VectorOperators.Binary,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "If there is a zero divisor, \n\u003ccode\u003e ArithmeticException\u003c/code\u003e will be thrown."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#div(jdk.incubator.vector.Vector)\"\u003ediv\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the result of dividing this vector by the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "div",
      "comment": "Divides this vector by the broadcast of an input scalar. This is a lane-wise binary operation which applies the primitive division operation (/) to each lane. This method is also equivalent to the expression lanewise(DIV, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#div(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003ediv(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#div(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003ediv(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#DIV\"\u003e\u003ccode\u003eVectorOperators.DIV\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "If there is a zero divisor, \n\u003ccode\u003e ArithmeticException\u003c/code\u003e will be thrown."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of dividing each lane of this vector by the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "div",
      "comment": "Divides this vector by a second input vector under the control of a mask. This is a lane-wise binary operation which applies the primitive division operation (/) to each pair of corresponding lane values. For any lane unset in the mask, the primitive operation is suppressed and this vector retains the original value stored in that lane. This method is also equivalent to the expression lanewise(DIV, v, m). As a full-service named operation, this method comes in masked and unmasked overloadings, and (in subclasses) also comes in scalar-broadcast overloadings (both masked and unmasked).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#div(byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003ediv(byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "If there is a zero divisor, \n\u003ccode\u003e ArithmeticException\u003c/code\u003e will be thrown."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#div(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003ediv\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of dividing this vector by the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "div",
      "comment": "Divides this vector by the broadcast of an input scalar, selecting lane elements controlled by a mask. This is a masked lane-wise binary operation which applies the primitive division operation (/) to each lane. This method is also equivalent to the expression lanewise(DIV, s, m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#div(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003ediv(Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#div(byte)\"\u003e\u003ccode\u003ediv(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#DIV\"\u003e\u003ccode\u003eVectorOperators.DIV\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,long)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "If there is a zero divisor, \n\u003ccode\u003e ArithmeticException\u003c/code\u003e will be thrown."
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the result of dividing each lane of this vector by the scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "min",
      "comment": "Computes the smaller of this vector and a second input vector. This is a lane-wise binary operation which applies the operation Math.min() to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(MIN, v).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#min(int)\"\u003e\u003ccode\u003eIntVector.min(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#MIN\"\u003e\u003ccode\u003eVectorOperators.MIN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#min(jdk.incubator.vector.Vector)\"\u003emin\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the lanewise minimum of this vector and the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "min",
      "comment": "Computes the smaller of this vector and the broadcast of an input scalar. This is a lane-wise binary operation which applies the operation Math.min() to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(MIN, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#min(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003emin(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#MIN\"\u003e\u003ccode\u003eVectorOperators.MIN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of multiplying this vector by the given scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "max",
      "comment": "Computes the larger of this vector and a second input vector. This is a lane-wise binary operation which applies the operation Math.max() to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(MAX, v). This is not a full-service named operation like add(). A masked version of this operation is not directly available but may be obtained via the masked version of lanewise. Subclasses define an additional scalar-broadcast overloading of this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#max(int)\"\u003e\u003ccode\u003eIntVector.max(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#MAX\"\u003e\u003ccode\u003eVectorOperators.MAX\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#max(jdk.incubator.vector.Vector)\"\u003emax\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the lanewise maximum of this vector and the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "max",
      "comment": "Computes the larger of this vector and the broadcast of an input scalar. This is a lane-wise binary operation which applies the operation Math.max() to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(MAX, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#max(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003emax(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#broadcast(long)\"\u003e\u003ccode\u003ebroadcast(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#MAX\"\u003e\u003ccode\u003eVectorOperators.MAX\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result of multiplying this vector by the given scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "and",
      "comment": "Computes the bitwise logical conjunction (\u0026) of this vector and a second input vector. This is a lane-wise binary operation which applies the the primitive bitwise \"and\" operation (\u0026) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(AND, v). This is not a full-service named operation like add. A masked version of this operation is not directly available but may be obtained via the masked version of lanewise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#and(byte)\"\u003e\u003ccode\u003eand(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#or(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eor(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#not()\"\u003e\u003ccode\u003enot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#AND\"\u003e\u003ccode\u003eVectorOperators.AND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the bitwise \n\u003ccode\u003e\u0026amp;\u003c/code\u003e of this vector and the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "and",
      "comment": "Computes the bitwise logical conjunction (\u0026) of this vector and a scalar. This is a lane-wise binary operation which applies the the primitive bitwise \"and\" operation (\u0026) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(AND, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#and(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eand(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#AND\"\u003e\u003ccode\u003eVectorOperators.AND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - an input scalar"
        ],
        "return": [
          "the bitwise \n\u003ccode\u003e\u0026amp;\u003c/code\u003e of this vector and scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "or",
      "comment": "Computes the bitwise logical disjunction (|) of this vector and a second input vector. This is a lane-wise binary operation which applies the the primitive bitwise \"or\" operation (|) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(AND, v). This is not a full-service named operation like add. A masked version of this operation is not directly available but may be obtained via the masked version of lanewise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#or(byte)\"\u003e\u003ccode\u003eor(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#and(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eand(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#not()\"\u003e\u003ccode\u003enot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#OR\"\u003e\u003ccode\u003eVectorOperators.OR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the bitwise \n\u003ccode\u003e|\u003c/code\u003e of this vector and the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "or",
      "comment": "Computes the bitwise logical disjunction (|) of this vector and a scalar. This is a lane-wise binary operation which applies the the primitive bitwise \"or\" operation (|) to each pair of corresponding lane values. This method is also equivalent to the expression lanewise(OR, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#or(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eor(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#OR\"\u003e\u003ccode\u003eVectorOperators.OR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Binary,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Binary,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - an input scalar"
        ],
        "return": [
          "the bitwise \n\u003ccode\u003e|\u003c/code\u003e of this vector and scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "neg",
      "comment": "Negates this vector. This is a lane-wise unary operation which applies the primitive negation operation (-x) to each input lane. This method is also equivalent to the expression lanewise(NEG).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#NEG\"\u003e\u003ccode\u003eVectorOperators.NEG\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Unary)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Unary,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#neg()\"\u003eneg\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the negation of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "abs",
      "comment": "Returns the absolute value of this vector. This is a lane-wise unary operation which applies the method Math.abs to each input lane. This method is also equivalent to the expression lanewise(ABS).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#ABS\"\u003e\u003ccode\u003eVectorOperators.ABS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Unary)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.lanewise(VectorOperators.Unary,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#abs()\"\u003eabs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the absolute value of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "not",
      "comment": "Computes the bitwise logical complement (~) of this vector. This is a lane-wise binary operation which applies the the primitive bitwise \"not\" operation (~) to each lane value. This method is also equivalent to the expression lanewise(NOT). This is not a full-service named operation like add. A masked version of this operation is not directly available but may be obtained via the masked version of lanewise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#and(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eand(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#NOT\"\u003e\u003ccode\u003eVectorOperators.NOT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Unary,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Unary,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the bitwise complement \n\u003ccode\u003e~\u003c/code\u003e of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "eq",
      "comment": "Tests if this vector is equal to another input vector. This is a lane-wise binary test operation which applies the primitive equals operation (\u003d\u003d) to each pair of corresponding lane values. The result is the same as compare(VectorOperators.EQ, v).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#EQ\"\u003e\u003ccode\u003eVectorOperators.EQ\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eVector.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#eq(jdk.incubator.vector.Vector)\"\u003eeq\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector equal to the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "eq",
      "comment": "Tests if this vector is equal to an input scalar. This is a lane-wise binary test operation which applies the primitive equals operation (\u003d\u003d) to each lane. The result is the same as compare(VectorOperators.Comparison.EQ, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,long)\"\u003e\u003ccode\u003ecompare(VectorOperators.Comparison,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the result mask of testing if this vector is equal to \n\u003ccode\u003ee\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lt",
      "comment": "Tests if this vector is less than another input vector. This is a lane-wise binary test operation which applies the primitive less-than operation (\u003c) to each lane. The result is the same as compare(VectorOperators.LT, v).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#LT\"\u003e\u003ccode\u003eVectorOperators.LT\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lt(jdk.incubator.vector.Vector)\"\u003elt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector is less than the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lt",
      "comment": "Tests if this vector is less than an input scalar. This is a lane-wise binary test operation which applies the primitive less than operation (\u003c) to each lane. The result is the same as compare(VectorOperators.LT, e).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,long)\"\u003e\u003ccode\u003ecompare(VectorOperators.Comparison,byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the mask result of testing if this vector is less than the input scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Test",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "test",
      "comment": "Tests the lanes of this vector according to the given operation. This is a lane-wise unary test operation which applies the given test operation to each lane value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Comparison.html\" title\u003d\"interface in jdk.incubator.vector\"\u003e\u003ccode\u003eVectorOperators.Comparison\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#test(jdk.incubator.vector.VectorOperators.Test,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.test(VectorOperators.Test, VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison, Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#test(jdk.incubator.vector.VectorOperators.Test)\"\u003etest\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to test lane values"
        ],
        "return": [
          "the mask result of testing the lanes of this vector, according to the selected test operator"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Test",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "test",
      "comment": "Test selected lanes of this vector, according to the given operation. This is a masked lane-wise unary test operation which applies the given test operation to each lane value. The returned result is equal to the expression test(op).and(m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#test(jdk.incubator.vector.VectorOperators.Test)\"\u003e\u003ccode\u003eVector.test(VectorOperators.Test)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#test(jdk.incubator.vector.VectorOperators.Test,jdk.incubator.vector.VectorMask)\"\u003etest\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to test lane values",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the mask result of testing the lanes of this vector, according to the selected test operator, and only in the lanes selected by the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Comparison",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compare",
      "comment": "Tests this vector by comparing it with another input vector, according to the given comparison operation. This is a lane-wise binary test operation which applies the given comparison operation to each pair of corresponding lane values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#eq(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.eq(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#lt(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.lt(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Comparison.html\" title\u003d\"interface in jdk.incubator.vector\"\u003e\u003ccode\u003eVectorOperators.Comparison\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison, Vector, VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#test(jdk.incubator.vector.VectorOperators.Test)\"\u003e\u003ccode\u003eVector.test(VectorOperators.Test)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003ecompare\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to compare lane values",
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector compares to the input, according to the selected comparison operator"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Comparison",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compare",
      "comment": "Tests this vector by comparing it with another input vector, according to the given comparison operation, in lanes selected by a mask. This is a masked lane-wise binary test operation which applies the given comparison operation to each pair of corresponding lane values. The returned result is equal to the expression compare(op,v).and(m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison, Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003ecompare\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to compare lane values",
          "\u003ccode\u003ev\u003c/code\u003e - a second input vector",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector compares to the input, according to the selected comparison operator, and only in the lanes selected by the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Comparison",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compare",
      "comment": "Tests this vector by comparing it with an input scalar, according to the given comparison operation. This is a lane-wise binary test operation which applies the comparison operation to each lane. The result is the same as compare(op, broadcast(species(), e)). That is, the scalar may be regarded as broadcast to a vector of the same species, and then compared against the original vector, using the selected comparison operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003ecompare(VectorOperators.Comparison,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#eq(byte)\"\u003e\u003ccode\u003eeq(byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lt(byte)\"\u003e\u003ccode\u003elt(byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to compare lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector compares to the input, according to the selected comparison operator"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Comparison",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compare",
      "comment": "Tests this vector by comparing it with an input scalar, according to the given comparison operation, in lanes selected by a mask. This is a masked lane-wise binary test operation which applies to each pair of corresponding lane values. The returned result is equal to the expression compare(op,s).and(m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003ecompare(VectorOperators.Comparison,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to compare lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector compares to the input, according to the selected comparison operator, and only in the lanes selected by the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Comparison",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compare",
      "comment": "Tests this vector by comparing it with an input scalar, according to the given comparison operation. This is a lane-wise binary test operation which applies the given comparison operation to each lane value, paired with the broadcast value. The result is the same as this.compare(op, this.broadcast(e)). That is, the scalar may be regarded as broadcast to a vector of the same species, and then compared against the original vector, using the selected comparison operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,long)\"\u003ecompare\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to compare lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector compares to the input, according to the selected comparison operator"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Comparison",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compare",
      "comment": "Tests this vector by comparing it with an input scalar, according to the given comparison operation, in lanes selected by a mask. This is a masked lane-wise binary test operation which applies the given comparison operation to each lane value, paired with the broadcast value. The returned result is equal to the expression compare(op,e).and(m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#broadcast(long)\"\u003e\u003ccode\u003eVector.broadcast(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.compare(VectorOperators.Comparison,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#compare(jdk.incubator.vector.VectorOperators.Comparison,long,jdk.incubator.vector.VectorMask)\"\u003ecompare\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to compare lane values",
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "return": [
          "the mask result of testing lane-wise if this vector compares to the input, according to the selected comparison operator, and only in the lanes selected by the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "blend",
      "comment": "Replaces selected lanes of this vector with corresponding lanes from a second input vector under the control of a mask. This is a masked lane-wise binary operation which selects each lane value from one or the other input. For any lane set in the mask, the new lane value is taken from the second input vector, and replaces whatever value was in the that lane of this vector. For any lane unset in the mask, the replacement is suppressed and this vector retains the original value stored in that lane. The following pseudocode illustrates this behavior: \n Vector\u003cE\u003e a \u003d ...;\n VectorSpecies\u003cE\u003e species \u003d a.species();\n Vector\u003cE\u003e b \u003d ...;\n b.check(species);\n VectorMask\u003cE\u003e m \u003d ...;\n ETYPE[] ar \u003d a.toArray();\n for (int i \u003d 0; i \u003c ar.length; i++) {\n     if (m.laneIsSet(i)) {\n         ar[i] \u003d b.lane(i);\n     }\n }\n return EVector.fromArray(s, ar, 0);",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#blend(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003eblend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the second input vector, containing replacement lane values",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection from the second input vector"
        ],
        "return": [
          "the result of blending the lane elements of this vector with those of the second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "addIndex",
      "comment": "Adds the lanes of this vector to their corresponding lane numbers, scaled by a given constant. This is a lane-wise unary operation which, for each lane N, computes the scaled index value N*scale and adds it to the value already in lane N of the current vector. The scale must not be so large, and the element size must not be so small, that that there would be an overflow when computing any of the N*scale or VLENGTH*scale, when the the result is represented using the vector lane type ETYPE. The following pseudocode illustrates this behavior: \n Vector\u003cE\u003e a \u003d ...;\n VectorSpecies\u003cE\u003e species \u003d a.species();\n ETYPE[] ar \u003d a.toArray();\n for (int i \u003d 0; i \u003c ar.length; i++) {\n     long d \u003d (long)i * scale;\n     if (d !\u003d (ETYPE) d)  throw ...;\n     ar[i] +\u003d (ETYPE) d;\n }\n long d \u003d (long)ar.length * scale;\n if (d !\u003d (ETYPE) d)  throw ...;\n return EVector.fromArray(s, ar, 0);",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#addIndex(int)\"\u003eaddIndex\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003escale\u003c/code\u003e - the number to multiply by each lane index \n\u003ccode\u003eN\u003c/code\u003e, typically \n\u003ccode\u003e1\u003c/code\u003e"
        ],
        "return": [
          "the result of incrementing each lane element by its corresponding lane index \n\u003ccode\u003eN\u003c/code\u003e, scaled by \n\u003ccode\u003escale\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "blend",
      "comment": "Replaces selected lanes of this vector with a scalar value under the control of a mask. This is a masked lane-wise binary operation which selects each lane value from one or the other input. The returned result is equal to the expression blend(broadcast(e),m).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar, containing the replacement lane value",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection of the scalar"
        ],
        "return": [
          "the result of blending the lane elements of this vector with the scalar value"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "blend",
      "comment": "Replaces selected lanes of this vector with a scalar value under the control of a mask. This is a masked lane-wise binary operation which selects each lane value from one or the other input. The returned result is equal to the expression blend(broadcast(e),m).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#blend(long,jdk.incubator.vector.VectorMask)\"\u003eblend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the input scalar, containing the replacement lane value",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection of the scalar"
        ],
        "return": [
          "the result of blending the lane elements of this vector with the scalar value"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Slices a segment of adjacent lanes, starting at a given origin lane in the current vector, and continuing (as needed) into an immediately following vector. The block of VLENGTH lanes is extracted into its own vector and returned. This is a cross-lane operation that shifts lane elements to the front, from the current vector and the second vector. Both vectors can be viewed as a combined \"background\" of length 2*VLENGTH, from which a slice is extracted. The lane numbered N in the output vector is copied from lane origin+N of the input vector, if that lane exists, else from lane origin+N-VLENGTH of the second vector (which is guaranteed to exist). The origin value must be in the inclusive range 0..VLENGTH. As limiting cases, v.slice(0,w) and v.slice(VLENGTH,w) return v and w, respectively.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.slice(int,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int)\"\u003e\u003ccode\u003eVector.slice(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int)\"\u003e\u003ccode\u003eVector.unslice(int,Vector,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the first input lane to transfer into the slice",
          "\u003ccode\u003ev1\u003c/code\u003e - a second vector logically concatenated with the first, before the slice is taken (if omitted it defaults to zero)"
        ],
        "return": [
          "a contiguous slice of \n\u003ccode\u003eVLENGTH\u003c/code\u003e lanes, taken from this vector starting at the indicated origin, and continuing (as needed) into the second vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "slice",
      "comment": "Slices a segment of adjacent lanes under the control of a mask, starting at a given origin lane in the current vector, and continuing (as needed) into an immediately following vector. The block of VLENGTH lanes is extracted into its own vector and returned. The resulting vector will be zero in all lanes unset in the given mask. Lanes set in the mask will contain data copied from selected lanes of this or v1. This is a cross-lane operation that shifts lane elements to the front, from the current vector and the second vector. Both vectors can be viewed as a combined \"background\" of length 2*VLENGTH, from which a slice is extracted. The returned result is equal to the expression broadcast(0).blend(slice(origin,v1),m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.slice(int,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.unslice(int,Vector,int,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003eslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the first input lane to transfer into the slice",
          "\u003ccode\u003ew\u003c/code\u003e - a second vector logically concatenated with the first, before the slice is taken (if omitted it defaults to zero)",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection into the resulting vector"
        ],
        "return": [
          "a contiguous slice of \n\u003ccode\u003eVLENGTH\u003c/code\u003e lanes, taken from this vector starting at the indicated origin, and continuing (as needed) into the second vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Slices a segment of adjacent lanes, starting at a given origin lane in the current vector. A block of VLENGTH lanes, possibly padded with zero lanes, is extracted into its own vector and returned. This is a convenience method which slices from a single vector against an extended background of zero lanes. It is equivalent to slice (origin, broadcast(0)). It may also be viewed simply as a cross-lane shift from later to earlier lanes, with zeroes filling in the vacated lanes at the end of the vector. In this view, the shift count is origin.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.slice(int,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int)\"\u003e\u003ccode\u003eVector.unslice(int,Vector,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the first input lane to transfer into the slice"
        ],
        "return": [
          "the last \n\u003ccode\u003eVLENGTH-origin\u003c/code\u003e input lanes, placed starting in the first lane of the ouput, padded at the end with zeroes"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "part"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "unslice",
      "comment": "Reverses a slice(), inserting the current vector as a slice within another \"background\" input vector, which is regarded as one or the other input to a hypothetical subsequent slice() operation. This is a cross-lane operation that permutes the lane elements of the current vector toward the back and inserts them into a logical pair of background vectors. Only one of the pair will be returned, however. The background is formed by duplicating the second input vector. (However, the output will never contain two duplicates from the same input lane.) The lane numbered N in the input vector is copied into lane origin+N of the first background vector, if that lane exists, else into lane origin+N-VLENGTH of the second background vector (which is guaranteed to exist). The first or second background vector, updated with the inserted slice, is returned. The part number of zero or one selects the first or second updated background vector. The origin value must be in the inclusive range 0..VLENGTH. As limiting cases, v.unslice(0,w,0) and v.unslice(VLENGTH,w,1) both return v, while v.unslice(0,w,1) and v.unslice(VLENGTH,w,0) both return w.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.slice(int,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.unslice(int,Vector,int,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int)\"\u003eunslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the first output lane to receive the slice",
          "\u003ccode\u003ew\u003c/code\u003e - the background vector that (as two copies) will receive the inserted slice",
          "\u003ccode\u003epart\u003c/code\u003e - the part number of the result (either zero or one)"
        ],
        "return": [
          "either the first or second part of a pair of background vectors \n\u003ccode\u003ew\u003c/code\u003e, updated by inserting this vector at the indicated origin"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "part"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "unslice",
      "comment": "Reverses a slice(), inserting (under the control of a mask) the current vector as a slice within another \"background\" input vector, which is regarded as one or the other input to a hypothetical subsequent slice() operation. This is a cross-lane operation that permutes the lane elements of the current vector forward and inserts its lanes (when selected by the mask) into a logical pair of background vectors. As with the unmasked version of this method, only one of the pair will be returned, as selected by the part number. For each lane N selected by the mask, the lane value is copied into lane origin+N of the first background vector, if that lane exists, else into lane origin+N-VLENGTH of the second background vector (which is guaranteed to exist). Background lanes retain their original values if the corresponding input lanes N are unset in the mask. The first or second background vector, updated with set lanes of the inserted slice, is returned. The part number of zero or one selects the first or second updated background vector.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int)\"\u003e\u003ccode\u003eVector.unslice(int,Vector,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.slice(int,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int,jdk.incubator.vector.VectorMask)\"\u003eunslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the first output lane to receive the slice",
          "\u003ccode\u003ew\u003c/code\u003e - the background vector that (as two copies) will receive the inserted slice, if they are set in \n\u003ccode\u003em\u003c/code\u003e",
          "\u003ccode\u003epart\u003c/code\u003e - the part number of the result (either zero or one)",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection from the current vector"
        ],
        "return": [
          "either the first or second part of a pair of background vectors \n\u003ccode\u003ew\u003c/code\u003e, updated by inserting selected lanes of this vector at the indicated origin"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "unslice",
      "comment": "Reverses a slice(), inserting the current vector as a slice within a \"background\" input of zero lane values. Compared to other unslice() methods, this method only returns the first of the pair of background vectors. This is a convenience method which returns the result of unslice (origin, broadcast(0), 0). It may also be viewed simply as a cross-lane shift from earlier to later lanes, with zeroes filling in the vacated lanes at the beginning of the vector. In this view, the shift count is origin.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int,jdk.incubator.vector.Vector,int)\"\u003e\u003ccode\u003eVector.unslice(int,Vector,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int)\"\u003e\u003ccode\u003eVector.slice(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#unslice(int)\"\u003eunslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the first output lane to receive the slice"
        ],
        "return": [
          "the first \n\u003ccode\u003eVLENGTH-origin\u003c/code\u003e input lanes, placed starting at the given origin, padded at the beginning with zeroes"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorShuffle",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rearrange",
      "comment": "Rearranges the lane elements of this vector, selecting lanes under the control of a specific shuffle. This is a cross-lane operation that rearranges the lane elements of this vector. For each lane N of the shuffle, and for each lane source index I\u003ds.laneSource(N) in the shuffle, the output lane N obtains the value from the input vector at lane I.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#laneIsValid()\"\u003e\u003ccode\u003eVectorShuffle.laneIsValid()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle)\"\u003erearrange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the shuffle controlling lane index selection"
        ],
        "return": [
          "the rearrangement of the lane elements of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorShuffle",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rearrange",
      "comment": "Rearranges the lane elements of this vector, selecting lanes under the control of a specific shuffle and a mask. This is a cross-lane operation that rearranges the lane elements of this vector. For each lane N of the shuffle, and for each lane source index I\u003ds.laneSource(N) in the shuffle, the output lane N obtains the value from the input vector at lane I if the mask is set. Otherwise the output lane N is set to zero. This method returns the value of this pseudocode: \n Vector\u003cE\u003e r \u003d this.rearrange(s.wrapIndexes());\n VectorMask\u003cE\u003e valid \u003d s.laneIsValid();\n if (m.andNot(valid).anyTrue()) throw ...;\n return broadcast(0).blend(r, m);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#laneIsValid()\"\u003e\u003ccode\u003eVectorShuffle.laneIsValid()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.VectorMask)\"\u003erearrange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the shuffle controlling lane index selection",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling application of the shuffle"
        ],
        "return": [
          "the rearrangement of the lane elements of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorShuffle",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rearrange",
      "comment": "Rearranges the lane elements of two vectors, selecting lanes under the control of a specific shuffle, using both normal and exceptional indexes in the shuffle to steer data. This is a cross-lane operation that rearranges the lane elements of the two input vectors (the current vector and a second vector v). For each lane N of the shuffle, and for each lane source index I\u003ds.laneSource(N) in the shuffle, the output lane N obtains the value from the first vector at lane I if I\u003e\u003d0. Otherwise, the exceptional index I is wrapped by adding VLENGTH to it and used to index the second vector, at index I+VLENGTH. This method returns the value of this pseudocode: \n Vector\u003cE\u003e r1 \u003d this.rearrange(s.wrapIndexes());\n // or else: r1 \u003d this.rearrange(s, s.laneIsValid());\n Vector\u003cE\u003e r2 \u003d v.rearrange(s.wrapIndexes());\n return r2.blend(r1,s.laneIsValid());",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#laneIsValid()\"\u003e\u003ccode\u003eVectorShuffle.laneIsValid()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#slice(int,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.slice(int,Vector)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.Vector)\"\u003erearrange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the shuffle controlling lane selection from both input vectors",
          "\u003ccode\u003ev\u003c/code\u003e - the second input vector"
        ],
        "return": [
          "the rearrangement of lane elements of this vector and a second input vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "selectFrom",
      "comment": "Using index values stored in the lanes of this vector, assemble values stored in second vector v. The second vector thus serves as a table, whose elements are selected by indexes in the current vector. This is a cross-lane operation that rearranges the lane elements of the argument vector, under the control of this vector. For each lane N of this vector, and for each lane value I\u003dthis.lane(N) in this vector, the output lane N obtains the value from the argument vector at lane I. In this way, the result contains only values stored in the argument vector v, but presented in an order which depends on the index values in this. The result is the same as the expression v.rearrange(this.toShuffle()).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#selectFrom(jdk.incubator.vector.Vector)\"\u003eselectFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the vector supplying the result values"
        ],
        "return": [
          "the rearrangement of the lane elements of \n\u003ccode\u003ev\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "selectFrom",
      "comment": "Using index values stored in the lanes of this vector, assemble values stored in second vector, under the control of a mask. Using index values stored in the lanes of this vector, assemble values stored in second vector v. The second vector thus serves as a table, whose elements are selected by indexes in the current vector. Lanes that are unset in the mask receive a zero rather than a value from the table. This is a cross-lane operation that rearranges the lane elements of the argument vector, under the control of this vector and the mask. The result is the same as the expression v.rearrange(this.toShuffle(), m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#selectFrom(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.selectFrom(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#rearrange(jdk.incubator.vector.VectorShuffle,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003eVector.rearrange(VectorShuffle,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#selectFrom(jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003eselectFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the vector supplying the result values",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling selection from \n\u003ccode\u003ev\u003c/code\u003e"
        ],
        "return": [
          "the rearrangement of the lane elements of \n\u003ccode\u003ev\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mask"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "bitwiseBlend",
      "comment": "Blends together the bits of two vectors under the control of a third, which supplies mask bits. This is a lane-wise ternary operation which performs a bitwise blending operation (a\u0026~c)|(b\u0026c) to each lane. This method is also equivalent to the expression lanewise(BITWISE_BLEND, bits, mask).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#bitwiseBlend(byte,byte)\"\u003e\u003ccode\u003ebitwiseBlend(byte,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#bitwiseBlend(byte,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003ebitwiseBlend(byte,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#bitwiseBlend(jdk.incubator.vector.Vector,byte)\"\u003e\u003ccode\u003ebitwiseBlend(Vector,byte)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#BITWISE_BLEND\"\u003e\u003ccode\u003eVectorOperators.BITWISE_BLEND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - input bits to blend into the current vector",
          "\u003ccode\u003emask\u003c/code\u003e - a bitwise mask to enable blending of the input bits"
        ],
        "return": [
          "the bitwise blend of the given bits into the current vector, under control of the bitwise mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "mask"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "bitwiseBlend",
      "comment": "Blends together the bits of a vector and a scalar under the control of another scalar, which supplies mask bits. This is a lane-wise ternary operation which performs a bitwise blending operation (a\u0026~c)|(b\u0026c) to each lane. This method is also equivalent to the expression lanewise(BITWISE_BLEND, bits, mask).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#bitwiseBlend(jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003ebitwiseBlend(Vector,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#BITWISE_BLEND\"\u003e\u003ccode\u003eVectorOperators.BITWISE_BLEND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - input bits to blend into the current vector",
          "\u003ccode\u003emask\u003c/code\u003e - a bitwise mask to enable blending of the input bits"
        ],
        "return": [
          "the bitwise blend of the given bits into the current vector, under control of the bitwise mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mask"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "bitwiseBlend",
      "comment": "Blends together the bits of a vector and a scalar under the control of another vector, which supplies mask bits. This is a lane-wise ternary operation which performs a bitwise blending operation (a\u0026~c)|(b\u0026c) to each lane. This method is also equivalent to the expression lanewise(BITWISE_BLEND, bits, mask).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#bitwiseBlend(jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003ebitwiseBlend(Vector,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#BITWISE_BLEND\"\u003e\u003ccode\u003eVectorOperators.BITWISE_BLEND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,byte,jdk.incubator.vector.Vector,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,byte,Vector,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - input bits to blend into the current vector",
          "\u003ccode\u003emask\u003c/code\u003e - a bitwise mask to enable blending of the input bits"
        ],
        "return": [
          "the bitwise blend of the given bits into the current vector, under control of the bitwise mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.Vector",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "mask"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "bitwiseBlend",
      "comment": "Blends together the bits of two vectors under the control of a scalar, which supplies mask bits. This is a lane-wise ternary operation which performs a bitwise blending operation (a\u0026~c)|(b\u0026c) to each lane. This method is also equivalent to the expression lanewise(BITWISE_BLEND, bits, mask).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#bitwiseBlend(jdk.incubator.vector.Vector,jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003ebitwiseBlend(Vector,Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#BITWISE_BLEND\"\u003e\u003ccode\u003eVectorOperators.BITWISE_BLEND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#lanewise(jdk.incubator.vector.VectorOperators.Ternary,jdk.incubator.vector.Vector,byte,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003elanewise(VectorOperators.Ternary,Vector,byte,VectorMask)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - input bits to blend into the current vector",
          "\u003ccode\u003emask\u003c/code\u003e - a bitwise mask to enable blending of the input bits"
        ],
        "return": [
          "the bitwise blend of the given bits into the current vector, under control of the bitwise mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Associative",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "reduceLanes",
      "comment": "Returns a value accumulated from all the lanes of this vector. This is an associative cross-lane reduction operation which applies the specified operation to all the lane elements. A few reduction operations do not support arbitrary reordering of their operands, yet are included here because of their usefulness. In the case of FIRST_NONZERO, the reduction returns the value from the lowest-numbered non-zero lane. All other reduction operations are fully commutative and associative. The implementation can choose any order of processing, yet it will always produce the same result.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#reduceLanes(jdk.incubator.vector.VectorOperators.Associative,jdk.incubator.vector.VectorMask)\"\u003e\u003ccode\u003ereduceLanes(VectorOperators.Associative,VectorMask)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#add(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eadd(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#mul(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003emul(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#min(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003emin(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#max(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003emax(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#and(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eand(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#or(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eor(Vector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#XOR\"\u003e\u003ccode\u003eVectorOperators.XOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#FIRST_NONZERO\"\u003e\u003ccode\u003eVectorOperators.FIRST_NONZERO\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the accumulated result"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Associative",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "reduceLanes",
      "comment": "Returns a value accumulated from selected lanes of this vector, controlled by a mask. This is an associative cross-lane reduction operation which applies the specified operation to the selected lane elements. If no elements are selected, an operation-specific identity value is returned. If the operation is ADD, XOR, OR, or FIRST_NONZERO, then the identity value is zero, the default byte value. If the operation is MUL, then the identity value is one. If the operation is AND, then the identity value is minus one (all bits set). If the operation is MAX, then the identity value is Byte.MIN_VALUE. If the operation is MIN, then the identity value is Byte.MAX_VALUE. A few reduction operations do not support arbitrary reordering of their operands, yet are included here because of their usefulness. In the case of FIRST_NONZERO, the reduction returns the value from the lowest-numbered non-zero lane. All other reduction operations are fully commutative and associative. The implementation can choose any order of processing, yet it will always produce the same result.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#reduceLanes(jdk.incubator.vector.VectorOperators.Associative)\"\u003e\u003ccode\u003ereduceLanes(VectorOperators.Associative)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the operation used to combine lane values",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this vector does not support the requested operation"
        ],
        "return": [
          "the reduced result accumulated from the selected lane values"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lane",
      "comment": "Gets the lane element at lane index i",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the lane index"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the index is is out of range (\n\u003ccode\u003e\u0026lt; 0 || \u0026gt;\u003d length()\u003c/code\u003e)"
        ],
        "return": [
          "the lane element at lane index \n\u003ccode\u003ei\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "withLane",
      "comment": "Replaces the lane element of this vector at lane index i with value e. This is a cross-lane operation and behaves as if it returns the result of blending this vector with an input vector that is the result of broadcasting e and a mask that has only one lane set at lane index i.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the lane index of the lane element to be replaced",
          "\u003ccode\u003ee\u003c/code\u003e - the value to be placed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the index is is out of range (\n\u003ccode\u003e\u0026lt; 0 || \u0026gt;\u003d length()\u003c/code\u003e)"
        ],
        "return": [
          "the result of replacing the lane element of this vector at lane index \n\u003ccode\u003ei\u003c/code\u003e with value \n\u003ccode\u003ee\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toArray",
      "comment": "Returns an array of type byte[] containing all the lane values. The array length is the same as the vector length. The array elements are stored in lane order. This method behaves as if it stores this vector into an allocated array (using intoArray) and returns the array as follows: \n   byte[] a \u003d new byte[this.length()];\n   this.intoArray(a, 0);\n   return a;",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#toArray()\"\u003e\u003ccode\u003etoArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#toArray()\"\u003e\u003ccode\u003eIntVector.toArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/DoubleVector.html#toArray()\"\u003e\u003ccode\u003eDoubleVector.toArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toArray()\"\u003etoArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an array containing the lane values of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toIntArray",
      "comment": "Returns an int[] array containing all the lane values, converted to the type int. The array length is the same as the vector length. The array elements are converted as if by casting and stored in lane order. This operation may fail if the vector element type is float or double, when lanes contain fractional or out-of-range values. If any vector lane value is not representable as an int, an exception is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toArray()\"\u003e\u003ccode\u003eVector.toArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toLongArray()\"\u003e\u003ccode\u003eVector.toLongArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toDoubleArray()\"\u003e\u003ccode\u003eVector.toDoubleArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#toArray()\"\u003e\u003ccode\u003eIntVector.toArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toIntArray()\"\u003etoIntArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "When this method is used on used on vectors of type \n\u003ccode\u003eByteVector\u003c/code\u003e, there will be no loss of precision or range, and so no \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown."
        ],
        "return": [
          "an \n\u003ccode\u003eint[]\u003c/code\u003e array containing the lane values of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toLongArray",
      "comment": "Returns a long[] array containing all the lane values, converted to the type long. The array length is the same as the vector length. The array elements are converted as if by casting and stored in lane order. This operation may fail if the vector element type is float or double, when lanes contain fractional or out-of-range values. If any vector lane value is not representable as a long, an exception is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toArray()\"\u003e\u003ccode\u003eVector.toArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toIntArray()\"\u003e\u003ccode\u003eVector.toIntArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toDoubleArray()\"\u003e\u003ccode\u003eVector.toDoubleArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/LongVector.html#toArray()\"\u003e\u003ccode\u003eLongVector.toArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toLongArray()\"\u003etoLongArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "When this method is used on used on vectors of type \n\u003ccode\u003eByteVector\u003c/code\u003e, there will be no loss of precision or range, and so no \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown."
        ],
        "return": [
          "a \n\u003ccode\u003elong[]\u003c/code\u003e array containing the lane values of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toDoubleArray",
      "comment": "Returns a double[] array containing all the lane values, converted to the type double. The array length is the same as the vector length. The array elements are converted as if by casting and stored in lane order. This operation can lose precision if the vector element type is long.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toArray()\"\u003e\u003ccode\u003eVector.toArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toIntArray()\"\u003e\u003ccode\u003eVector.toIntArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toLongArray()\"\u003e\u003ccode\u003eVector.toLongArray()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/DoubleVector.html#toArray()\"\u003e\u003ccode\u003eDoubleVector.toArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toDoubleArray()\"\u003etoDoubleArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "When this method is used on used on vectors of type \n\u003ccode\u003eByteVector\u003c/code\u003e, there will be no loss of precision."
        ],
        "return": [
          "a \n\u003ccode\u003edouble[]\u003c/code\u003e array containing the lane values of this vector, possibly rounded to representable \n\u003ccode\u003edouble\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromByteArray",
      "comment": "Loads a vector from a byte array starting at an offset. Bytes are composed into primitive lane elements according to the specified byte order. The vector is arranged into lanes according to memory ordering. This method behaves as if it returns the result of calling fromByteBuffer() as follows: \n var bb \u003d ByteBuffer.wrap(a);\n var m \u003d species.maskAll(true);\n return fromByteBuffer(species, bb, offset, bo, m);",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ea\u003c/code\u003e - the byte array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N*ESIZE \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+(N+1)*ESIZE \u0026gt; a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ],
        "return": [
          "a vector loaded from a byte array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromByteArray",
      "comment": "Loads a vector from a byte array starting at an offset and using a mask. Lanes where the mask is unset are filled with the default value of byte (zero). Bytes are composed into primitive lane elements according to the specified byte order. The vector is arranged into lanes according to memory ordering. This method behaves as if it returns the result of calling fromByteBuffer() as follows: \n var bb \u003d ByteBuffer.wrap(a);\n return fromByteBuffer(species, bb, offset, bo, m);",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ea\u003c/code\u003e - the byte array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N*ESIZE \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+(N+1)*ESIZE \u0026gt; a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector where the mask is set"
        ],
        "return": [
          "a vector loaded from a byte array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromArray",
      "comment": "Loads a vector from an array of type byte[] starting at an offset. For each vector lane, where N is the vector lane index, the array element at index offset + N is placed into the resulting vector at lane index N.",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ea\u003c/code\u003e - the array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N \u0026gt;\u003d a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ],
        "return": [
          "the vector loaded from an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromArray",
      "comment": "Loads a vector from an array of type byte[] starting at an offset and using a mask. Lanes where the mask is unset are filled with the default value of byte (zero). For each vector lane, where N is the vector lane index, if the mask lane at index N is set then the array element at index offset + N is placed into the resulting vector at lane index N, otherwise the default element value is placed into the resulting vector at lane index N.",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ea\u003c/code\u003e - the array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N \u0026gt;\u003d a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector where the mask is set"
        ],
        "return": [
          "the vector loaded from an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "indexMap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mapOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromArray",
      "comment": "Gathers a new vector composed of elements from an array of type byte[], using indexes obtained by adding a fixed offset to a series of secondary offsets from an index map. The index map is a contiguous sequence of VLENGTH elements in a second array of ints, starting at a given mapOffset. For each vector lane, where N is the vector lane index, the lane is loaded from the array element a[f(N)], where f(N) is the index mapping expression offset + indexMap[mapOffset + N]].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#toIntArray()\"\u003e\u003ccode\u003etoIntArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ea\u003c/code\u003e - the array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array, may be negative if relative indexes in the index map compensate to produce a value within the array bounds",
          "\u003ccode\u003eindexMap\u003c/code\u003e - the index map",
          "\u003ccode\u003emapOffset\u003c/code\u003e - the offset into the index map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emapOffset+N \u0026lt; 0\u003c/code\u003e or if \n\u003ccode\u003emapOffset+N \u0026gt;\u003d indexMap.length\u003c/code\u003e, or if \n\u003ccode\u003ef(N)\u003doffset+indexMap[mapOffset+N]\u003c/code\u003e is an invalid index into \n\u003ccode\u003ea\u003c/code\u003e, for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ],
        "return": [
          "the vector loaded from the indexed elements of the array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "indexMap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mapOffset"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromArray",
      "comment": "Gathers a new vector composed of elements from an array of type byte[], under the control of a mask, and using indexes obtained by adding a fixed offset to a series of secondary offsets from an index map. The index map is a contiguous sequence of VLENGTH elements in a second array of ints, starting at a given mapOffset. For each vector lane, where N is the vector lane index, if the lane is set in the mask, the lane is loaded from the array element a[f(N)], where f(N) is the index mapping expression offset + indexMap[mapOffset + N]]. Unset lanes in the resulting vector are set to zero.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#toIntArray()\"\u003e\u003ccode\u003etoIntArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ea\u003c/code\u003e - the array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array, may be negative if relative indexes in the index map compensate to produce a value within the array bounds",
          "\u003ccode\u003eindexMap\u003c/code\u003e - the index map",
          "\u003ccode\u003emapOffset\u003c/code\u003e - the offset into the index map",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emapOffset+N \u0026lt; 0\u003c/code\u003e or if \n\u003ccode\u003emapOffset+N \u0026gt;\u003d indexMap.length\u003c/code\u003e, or if \n\u003ccode\u003ef(N)\u003doffset+indexMap[mapOffset+N]\u003c/code\u003e is an invalid index into \n\u003ccode\u003ea\u003c/code\u003e, for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector where the mask is set"
        ],
        "return": [
          "the vector loaded from the indexed elements of the array"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "bb"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromByteBuffer",
      "comment": "Loads a vector from a byte buffer starting at an offset into the byte buffer. Bytes are composed into primitive lane elements according to the specified byte order. The vector is arranged into lanes according to memory ordering. This method behaves as if it returns the result of calling fromByteBuffer() as follows: \n var m \u003d species.maskAll(true);\n return fromByteBuffer(species, bb, offset, bo, m);",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ebb\u003c/code\u003e - the byte buffer",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the byte buffer",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N*1 \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N*1 \u0026gt;\u003d bb.limit()\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ],
        "return": [
          "a vector loaded from a byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "bb"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromByteBuffer",
      "comment": "Loads a vector from a byte buffer starting at an offset into the byte buffer and using a mask. Lanes where the mask is unset are filled with the default value of byte (zero). Bytes are composed into primitive lane elements according to the specified byte order. The vector is arranged into lanes according to memory ordering. The following pseudocode illustrates the behavior: \n ByteBuffer eb \u003d bb.duplicate()\n     .position(offset);\n byte[] ar \u003d new byte[species.length()];\n for (int n \u003d 0; n \u003c ar.length; n++) {\n     if (m.laneIsSet(n)) {\n         ar[n] \u003d eb.get(n);\n     }\n }\n ByteVector r \u003d ByteVector.fromArray(species, ar, 0);",
      "tagMap": {
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - species of desired vector",
          "\u003ccode\u003ebb\u003c/code\u003e - the byte buffer",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the byte buffer",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ],
        "implNote": [
          "The byte order argument is ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N*1 \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N*1 \u0026gt;\u003d bb.limit()\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector where the mask is set"
        ],
        "return": [
          "a vector loaded from a byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoArray",
      "comment": "Stores this vector into an array of type byte[] starting at an offset. For each vector lane, where N is the vector lane index, the lane element at index N is stored into the array element a[offset+N].",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the array, of type \n\u003ccode\u003ebyte[]\u003c/code\u003e",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N \u0026gt;\u003d a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoArray",
      "comment": "Stores this vector into an array of byte starting at offset and using a mask. For each vector lane, where N is the vector lane index, the lane element at index N is stored into the array element a[offset+N]. If the mask lane at N is unset then the corresponding array element a[offset+N] is left unchanged. Array range checking is done for lanes where the mask is set. Lanes where the mask is unset are not stored and do not need to correspond to legitimate elements of a. That is, unset lanes may correspond to array indexes less than zero or beyond the end of the array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the array, of type \n\u003ccode\u003ebyte[]\u003c/code\u003e",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane storage"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset+N \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+N \u0026gt;\u003d a.length\u003c/code\u003e for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector where the mask is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "indexMap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mapOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoArray",
      "comment": "Scatters this vector into an array of type byte[] using indexes obtained by adding a fixed offset to a series of secondary offsets from an index map. The index map is a contiguous sequence of VLENGTH elements in a second array of ints, starting at a given mapOffset. For each vector lane, where N is the vector lane index, the lane element at index N is stored into the array element a[f(N)], where f(N) is the index mapping expression offset + indexMap[mapOffset + N]].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#toIntArray()\"\u003e\u003ccode\u003etoIntArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the array",
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset to combine with the index map offsets",
          "\u003ccode\u003eindexMap\u003c/code\u003e - the index map",
          "\u003ccode\u003emapOffset\u003c/code\u003e - the offset into the index map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emapOffset+N \u0026lt; 0\u003c/code\u003e or if \n\u003ccode\u003emapOffset+N \u0026gt;\u003d indexMap.length\u003c/code\u003e, or if \n\u003ccode\u003ef(N)\u003doffset+indexMap[mapOffset+N]\u003c/code\u003e is an invalid index into \n\u003ccode\u003ea\u003c/code\u003e, for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "indexMap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mapOffset"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoArray",
      "comment": "Scatters this vector into an array of type byte[], under the control of a mask, and using indexes obtained by adding a fixed offset to a series of secondary offsets from an index map. The index map is a contiguous sequence of VLENGTH elements in a second array of ints, starting at a given mapOffset. For each vector lane, where N is the vector lane index, if the mask lane at index N is set then the lane element at index N is stored into the array element a[f(N)], where f(N) is the index mapping expression offset + indexMap[mapOffset + N]].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/ByteVector.html#toIntArray()\"\u003e\u003ccode\u003etoIntArray()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the array",
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset to combine with the index map offsets",
          "\u003ccode\u003eindexMap\u003c/code\u003e - the index map",
          "\u003ccode\u003emapOffset\u003c/code\u003e - the offset into the index map",
          "\u003ccode\u003em\u003c/code\u003e - the mask"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emapOffset+N \u0026lt; 0\u003c/code\u003e or if \n\u003ccode\u003emapOffset+N \u0026gt;\u003d indexMap.length\u003c/code\u003e, or if \n\u003ccode\u003ef(N)\u003doffset+indexMap[mapOffset+N]\u003c/code\u003e is an invalid index into \n\u003ccode\u003ea\u003c/code\u003e, for any lane \n\u003ccode\u003eN\u003c/code\u003e in the vector where the mask is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoByteArray",
      "comment": "Stores this vector into a byte array starting at an offset using explicit byte order. Bytes are extracted from primitive lane elements according to the specified byte ordering. The lanes are stored according to their memory ordering. This method behaves as if it calls intoByteBuffer() as follows: \n var bb \u003d ByteBuffer.wrap(a);\n var m \u003d maskAll(true);\n intoByteBuffer(bb, offset, bo, m);",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#intoByteArray(byte%5B%5D,int,java.nio.ByteOrder)\"\u003eintoByteArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the byte array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoByteArray",
      "comment": "Stores this vector into a byte array starting at an offset using explicit byte order and a mask. Bytes are extracted from primitive lane elements according to the specified byte ordering. The lanes are stored according to their memory ordering. This method behaves as if it calls intoByteBuffer() as follows: \n var bb \u003d ByteBuffer.wrap(a);\n intoByteBuffer(bb, offset, bo, m);",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#intoByteArray(byte%5B%5D,int,java.nio.ByteOrder,jdk.incubator.vector.VectorMask)\"\u003eintoByteArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the byte array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "bb"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoByteBuffer",
      "comment": "Stores this vector into a byte buffer starting at an offset using explicit byte order. Bytes are extracted from primitive lane elements according to the specified byte ordering. The lanes are stored according to their memory ordering. This method behaves as if it calls intoByteBuffer() as follows: \n var m \u003d maskAll(true);\n intoByteBuffer(bb, offset, bo, m);",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#intoByteBuffer(java.nio.ByteBuffer,int,java.nio.ByteOrder)\"\u003eintoByteBuffer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebb\u003c/code\u003e - the byte buffer",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "bb"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorMask",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intoByteBuffer",
      "comment": "Stores this vector into a byte buffer starting at an offset using explicit byte order and a mask. Bytes are extracted from primitive lane elements according to the specified byte ordering. The lanes are stored according to their memory ordering. The following pseudocode illustrates the behavior, where the primitive element type is not of byte, EBuffer is the primitive buffer type, ETYPE is the primitive element type, and EVector is the primitive vector type for this vector: \n EBuffer eb \u003d bb.duplicate()\n     .position(offset)\n     .order(bo).asEBuffer();\n ETYPE[] a \u003d this.toArray();\n for (int n \u003d 0; n \u003c a.length; n++) {\n     if (m.laneIsSet(n)) {\n         eb.put(n, a[n]);\n     }\n }\n When the primitive element type is of byte the primitive byte buffer is obtained as follows, where operation on the buffer remains the same as in the prior pseudocode: \n ByteBuffer eb \u003d bb.duplicate()\n     .position(offset);",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#intoByteBuffer(java.nio.ByteBuffer,int,java.nio.ByteOrder,jdk.incubator.vector.VectorMask)\"\u003eintoByteBuffer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebb\u003c/code\u003e - the byte buffer",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the array",
          "\u003ccode\u003ebo\u003c/code\u003e - the intended byte order",
          "\u003ccode\u003em\u003c/code\u003e - the mask controlling lane selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "reinterpretAsBytes",
      "comment": "Views this vector as a vector of the same shape and contents but a lane type of byte, where the bytes are extracted from the lanes according to little-endian order. It is a convenience method for the expression reinterpretShape(species().withLanes(byte.class)). It may be considered an inverse to the various methods which consolidate bytes into larger lanes within the same vector, such as Vector.reinterpretAsInts().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretShape(jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.reinterpretShape(VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/IntVector.html#intoByteArray(byte%5B%5D,int,java.nio.ByteOrder)\"\u003e\u003ccode\u003eIntVector.intoByteArray(byte[], int, ByteOrder)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/FloatVector.html#intoByteArray(byte%5B%5D,int,java.nio.ByteOrder)\"\u003e\u003ccode\u003eFloatVector.intoByteArray(byte[], int, ByteOrder)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#withLanes(java.lang.Class)\"\u003e\u003ccode\u003eVectorSpecies.withLanes(Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretAsBytes()\"\u003ereinterpretAsBytes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eByteVector\u003c/code\u003e with the same shape and information content"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ByteVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "viewAsIntegralLanes",
      "comment": "Views this vector as a vector of the same shape, length, and contents, but a lane type that is not a floating-point type. This is a lane-wise reinterpretation cast on the lane values. As such, this method does not change VSHAPE or VLENGTH, and there is no change to the bitwise contents of the vector. If the vector\u0027s ETYPE is already an integral type, the same vector is returned unchanged. This method returns the value of this expression: convert(conv,0), where conv is VectorOperators.Conversion.ofReinterpret(E.class,F.class), and F is the non-floating-point type of the same size as E.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Conversion.html#ofReinterpret(java.lang.Class,java.lang.Class)\"\u003e\u003ccode\u003eVectorOperators.Conversion.ofReinterpret(Class,Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convert(jdk.incubator.vector.VectorOperators.Conversion,int)\"\u003e\u003ccode\u003eVector.convert(VectorOperators.Conversion,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#viewAsIntegralLanes()\"\u003eviewAsIntegralLanes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the original vector, reinterpreted as non-floating point"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "viewAsFloatingLanes",
      "comment": "Views this vector as a vector of the same shape, length, and contents, but a lane type that is a floating-point type. This is a lane-wise reinterpretation cast on the lane values. As such, there this method does not change VSHAPE or VLENGTH, and there is no change to the bitwise contents of the vector. If the vector\u0027s ETYPE is already a float-point type, the same vector is returned unchanged. If the vector\u0027s element size does not match any floating point type size, an IllegalArgumentException is thrown. This method returns the value of this expression: convert(conv,0), where conv is VectorOperators.Conversion.ofReinterpret(E.class,F.class), and F is the floating-point type of the same size as E, if any.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Conversion.html#ofReinterpret(java.lang.Class,java.lang.Class)\"\u003e\u003ccode\u003eVectorOperators.Conversion.ofReinterpret(Class,Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convert(jdk.incubator.vector.VectorOperators.Conversion,int)\"\u003e\u003ccode\u003eVector.convert(VectorOperators.Conversion,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#viewAsFloatingLanes()\"\u003eviewAsFloatingLanes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "This method always throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e, because there is no floating point type of the same size as \n\u003ccode\u003ebyte\u003c/code\u003e. The return type of this method is arbitrarily designated as \n\u003ccode\u003eVector\u0026lt;?\u0026gt;\u003c/code\u003e. Future versions of this API may change the return type if additional floating point types become available."
        ],
        "return": [
          "the original vector, reinterpreted as floating point"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toString",
      "comment": "Returns a string representation of this vector, of the form \"[0,1,2...]\", reporting the lane values of this vector, in lane order. The string is produced as if by a call to Arrays.toString(), as appropriate to the byte array returned by this.toArray().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a string of the form \n\u003ccode\u003e\"[0,1,2...]\"\u003c/code\u003e reporting the lane values of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "equals",
      "comment": "Indicates whether this vector is identical to some other object. Two vectors are identical only if they have the same species and same lane values, in the same order. The comparison of lane values is produced as if by a call to Arrays.equals(), as appropriate to the arrays returned by toArray() on both vectors.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#eq(jdk.incubator.vector.Vector)\"\u003e\u003ccode\u003eVector.eq(jdk.incubator.vector.Vector\u0026lt;E\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "whether this vector is identical to some other object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hashCode",
      "comment": "Returns a hash code value for the vector. based on the lane values and the vector species.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html\" title\u003d\"class in java.lang\"\u003eByte\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorSpecies",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "species",
      "comment": "Description copied from class: Vector",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#species()\"\u003especies\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the species of this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "species"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "check",
      "comment": "Description copied from class: Vector",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type of the required species"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#check(java.lang.Class)\"\u003e\u003ccode\u003eVector.check(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorMask.html#check(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eVectorMask.check(VectorSpecies)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#check(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eVectorShuffle.check(VectorSpecies)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#check(jdk.incubator.vector.VectorSpecies)\"\u003echeck\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003especies\u003c/code\u003e - the required species"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "elementType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "check",
      "comment": "Checks that this vector has the given element type, and returns this vector unchanged. The effect is similar to this pseudocode: elementType \u003d\u003d species().elementType() ? this : throw new ClassCastException().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type of the required lane type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#check(java.lang.Class)\"\u003e\u003ccode\u003eVectorSpecies.check(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorMask.html#check(java.lang.Class)\"\u003e\u003ccode\u003eVectorMask.check(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#check(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eVector.check(VectorSpecies)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorShuffle.html#check(jdk.incubator.vector.VectorSpecies)\"\u003e\u003ccode\u003eVectorShuffle.check(VectorSpecies)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#check(java.lang.Class)\"\u003echeck\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eelementType\u003c/code\u003e - the required lane type"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.VectorMask",
        "parameters": [
          {
            "name": "java.lang.Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "bit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "maskAll",
      "comment": "Returns a mask of same species as this vector, where each lane is set or unset according to given single boolean, which is broadcast to all lanes. This method returns the value of this expression: species().maskAll(bit).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#maskAll(boolean)\"\u003e\u003ccode\u003eVectorSpecies.maskAll(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#maskAll(boolean)\"\u003emaskAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebit\u003c/code\u003e - the given mask bit to be replicated"
        ],
        "return": [
          "a mask where each lane is set or unset according to the given bit"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.ShortVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reinterpretAsShorts",
      "comment": "Reinterprets this vector as a vector of the same shape and contents but a lane type of short, where the lanes are assembled from successive bytes according to little-endian order. It is a convenience method for the expression reinterpretShape(species().withLanes(short.class)). It may be considered an inverse to Vector.reinterpretAsBytes().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretAsShorts()\"\u003ereinterpretAsShorts\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eShortVector\u003c/code\u003e with the same shape and information content"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.IntVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reinterpretAsInts",
      "comment": "Reinterprets this vector as a vector of the same shape and contents but a lane type of int, where the lanes are assembled from successive bytes according to little-endian order. It is a convenience method for the expression reinterpretShape(species().withLanes(int.class)). It may be considered an inverse to Vector.reinterpretAsBytes().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretAsInts()\"\u003ereinterpretAsInts\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eIntVector\u003c/code\u003e with the same shape and information content"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.LongVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reinterpretAsLongs",
      "comment": "Reinterprets this vector as a vector of the same shape and contents but a lane type of long, where the lanes are assembled from successive bytes according to little-endian order. It is a convenience method for the expression reinterpretShape(species().withLanes(long.class)). It may be considered an inverse to Vector.reinterpretAsBytes().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretAsLongs()\"\u003ereinterpretAsLongs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eLongVector\u003c/code\u003e with the same shape and information content"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.FloatVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reinterpretAsFloats",
      "comment": "Reinterprets this vector as a vector of the same shape and contents but a lane type of float, where the lanes are assembled from successive bytes according to little-endian order. It is a convenience method for the expression reinterpretShape(species().withLanes(float.class)). It may be considered an inverse to Vector.reinterpretAsBytes().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretAsFloats()\"\u003ereinterpretAsFloats\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eFloatVector\u003c/code\u003e with the same shape and information content"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.DoubleVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reinterpretAsDoubles",
      "comment": "Reinterprets this vector as a vector of the same shape and contents but a lane type of double, where the lanes are assembled from successive bytes according to little-endian order. It is a convenience method for the expression reinterpretShape(species().withLanes(double.class)). It may be considered an inverse to Vector.reinterpretAsBytes().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretAsDoubles()\"\u003ereinterpretAsDoubles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDoubleVector\u003c/code\u003e with the same shape and information content"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Conversion",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              },
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "conv"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "part"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "convert",
      "comment": "Convert this vector to a vector of the same shape and a new element type, converting lane values from the current ETYPE to a new lane type (called FTYPE here) according to the indicated conversion. This is a lane-wise shape-invariant operation which copies ETYPE values from the input vector to corresponding FTYPE values in the result. Depending on the selected conversion, this operation may either expand or contract its logical result, in which case a non-zero part number can further control the selection and steering of the logical result into the physical output vector. Each specific conversion is described by a conversion constant in the class VectorOperators. Each conversion operator has a specified domain type and range type. The domain type must exactly match the lane type of the input vector, while the range type determines the lane type of the output vectors. A conversion operator may be classified as (respectively) in-place, expanding, or contracting, depending on whether the bit-size of its domain type is (respectively) equal, less than, or greater than the bit-size of its range type. Independently, conversion operations can also be classified as reinterpreting or value-transforming, depending on whether the conversion copies representation bits unchanged, or changes the representation bits in order to retain (part or all of) the logical value of the input value. If a reinterpreting conversion contracts, it will truncate the upper bits of the input. If it expands, it will pad upper bits of the output with zero bits, when there are no corresponding input bits. An expanding conversion such as S2I (short value to int) takes a scalar value and represents it in a larger format (always with some information redundancy). A contracting conversion such as D2F (double value to float) takes a scalar value and represents it in a smaller format (always with some information loss). Some in-place conversions may also include information loss, such as L2D (long value to double) or F2I (float value to int). Reinterpreting in-place conversions are not lossy, unless the bitwise value is somehow not legal in the output type. Converting the bit-pattern of a NaN may discard bits from the NaN\u0027s significand. This classification is important, because, unless otherwise documented, conversion operations never change vector shape, regardless of how they may change lane sizes. Therefore an expanding conversion cannot store all of its results in its output vector, because the output vector has fewer lanes of larger size, in order to have the same overall bit-size as its input. Likewise, a contracting conversion must store its relatively small results into a subset of the lanes of the output vector, defaulting the unused lanes to zero. As an example, a conversion from byte to long (M\u003d8) will discard 87.5% of the input values in order to convert the remaining 12.5% into the roomy long lanes of the output vector. The inverse conversion will convert back all of the large results, but will waste 87.5% of the lanes in the output vector. In-place conversions (M\u003d1) deliver all of their results in one output vector, without wasting lanes. To manage the details of these expansions and contractions, a non-zero part parameter selects partial results from expansions, or steers the results of contractions into corresponding locations, as follows: expanding by M: part must be in the range [0..M-1], and selects the block of VLENGTH/M input lanes starting at the origin lane at part*VLENGTH/M. The VLENGTH/M output lanes represent a partial slice of the whole logical result of the conversion, filling the entire physical output vector. contracting by M: part must be in the range [-M+1..0], and steers all VLENGTH input lanes into the output located at the origin lane -part*VLENGTH. There is a total of VLENGTH*M output lanes, and those not holding converted input values are filled with zeroes. A group of such output vectors, with logical result parts steered to disjoint blocks, can be reassembled using the bitwise or or (for floating point) the FIRST_NONZERO operator. in-place (M\u003d1): part must be zero. Both vectors have the same VLENGTH. The result is always positioned at the origin lane of zero. This method is a restricted version of the more general but less frequently used shape-changing method convertShape(). The result of this method is the same as the expression this.convertShape(conv, rsp, this.broadcast(part)), where the output species is rsp\u003dthis.species().withLanes(FTYPE.class).",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type of the species"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#I2L\"\u003e\u003ccode\u003eVectorOperators.I2L\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Conversion.html#ofCast(java.lang.Class,java.lang.Class)\"\u003e\u003ccode\u003eVectorOperators.Conversion.ofCast(Class,Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorSpecies.html#partLimit(jdk.incubator.vector.VectorSpecies,boolean)\"\u003e\u003ccode\u003eVectorSpecies.partLimit(VectorSpecies,boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#viewAsFloatingLanes()\"\u003e\u003ccode\u003eVector.viewAsFloatingLanes()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#viewAsIntegralLanes()\"\u003e\u003ccode\u003eVector.viewAsIntegralLanes()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convertShape(jdk.incubator.vector.VectorOperators.Conversion,jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.convertShape(VectorOperators.Conversion,VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretShape(jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.reinterpretShape(VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convert(jdk.incubator.vector.VectorOperators.Conversion,int)\"\u003econvert\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003econv\u003c/code\u003e - the desired scalar conversion to apply lane-wise",
          "\u003ccode\u003epart\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#expansion\"\u003epart number\u003c/a\u003e of the result, or zero if neither expanding nor contracting"
        ],
        "return": [
          "a vector converted by shape and element type from this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "toSpecies"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "part"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "castShape",
      "comment": "Convenience method for converting a vector from one lane type to another, reshaping as needed when lane sizes change. This method returns the value of this expression: convertShape(conv,rsp,part), where conv is VectorOperators.Conversion.ofCast(E.class,F.class). If the old and new species have different shape, this is a shape-changing operation, and may have special implementation costs.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type of the output species"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.Conversion.html#ofCast(java.lang.Class,java.lang.Class)\"\u003e\u003ccode\u003eVectorOperators.Conversion.ofCast(Class,Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convertShape(jdk.incubator.vector.VectorOperators.Conversion,jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.convertShape(VectorOperators.Conversion,VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#castShape(jdk.incubator.vector.VectorSpecies,int)\"\u003ecastShape\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etoSpecies\u003c/code\u003e - the desired output species",
          "\u003ccode\u003epart\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#expansion\"\u003epart number\u003c/a\u003e of the result, or zero if neither expanding nor contracting"
        ],
        "return": [
          "a vector converted by element type from this vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.vector.Vector",
        "parameters": [
          {
            "name": "F",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.vector.VectorOperators$Conversion",
            "parameters": [
              {
                "name": "java.lang.Byte",
                "type": "Class"
              },
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "conv"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.vector.VectorSpecies",
            "parameters": [
              {
                "name": "F",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rsp"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "part"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "F",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "convertShape",
      "comment": "Converts this vector to a vector of the given species, shape and element type, converting lane values from the current ETYPE to a new lane type (called FTYPE here) according to the indicated conversion. This is a lane-wise operation which copies ETYPE values from the input vector to corresponding FTYPE values in the result. If the old and new species have the same shape, the behavior is exactly the same as the simpler, shape-invariant method convert(). In such cases, the simpler method convert() should be used, to make code easier to reason about. Otherwise, this is a shape-changing operation, and may have special implementation costs. As a combined effect of shape changes and lane size changes, the input and output species may have different lane counts, causing expansion or contraction. In this case a non-zero part parameter selects partial results from an expanded logical result, or steers the results of a contracted logical result into a physical output vector of the required output species. The following pseudocode illustrates the behavior of this method for in-place, expanding, and contracting conversions. (This pseudocode also applies to the shape-invariant method, but with shape restrictions on the output species.) Note that only one of the three code paths is relevant to any particular combination of conversion operator and shapes. \n FTYPE scalar_conversion_op(ETYPE s);\n EVector a \u003d ...;\n VectorSpecies\u003cF\u003e rsp \u003d ...;\n int part \u003d ...;\n VectorSpecies\u003cE\u003e dsp \u003d a.species();\n int domlen \u003d dsp.length();\n int ranlen \u003d rsp.length();\n FTYPE[] logical \u003d new FTYPE[domlen];\n for (int i \u003d 0; i \u003c domlen; i++) {\n   logical[i] \u003d scalar_conversion_op(a.lane(i));\n }\n FTYPE[] physical;\n if (domlen \u003d\u003d ranlen) { // in-place\n     assert part \u003d\u003d 0; //else AIOOBE\n     physical \u003d logical;\n } else if (domlen \u003e ranlen) { // expanding\n     int M \u003d domlen / ranlen;\n     assert 0 \u003c\u003d part \u0026\u0026 part \u003c M; //else AIOOBE\n     int origin \u003d part * ranlen;\n     physical \u003d Arrays.copyOfRange(logical, origin, origin + ranlen);\n } else { // (domlen \u003c ranlen) // contracting\n     int M \u003d ranlen / domlen;\n     assert 0 \u003e\u003d part \u0026\u0026 part \u003e -M; //else AIOOBE\n     int origin \u003d -part * domlen;\n     System.arraycopy(logical, 0, physical, origin, domlen);\n }\n return FVector.fromArray(ran, physical, 0);",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eF\u003c/code\u003e - the boxed element type of the output species"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convert(jdk.incubator.vector.VectorOperators.Conversion,int)\"\u003e\u003ccode\u003eVector.convert(VectorOperators.Conversion,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#castShape(jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.castShape(VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#reinterpretShape(jdk.incubator.vector.VectorSpecies,int)\"\u003e\u003ccode\u003eVector.reinterpretShape(VectorSpecies,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#convertShape(jdk.incubator.vector.VectorOperators.Conversion,jdk.incubator.vector.VectorSpecies,int)\"\u003econvertShape\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003eVector\u003c/a\u003e\u0026lt;E\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003econv\u003c/code\u003e - the desired scalar conversion to apply lane-wise",
          "\u003ccode\u003ersp\u003c/code\u003e - the desired output species",
          "\u003ccode\u003epart\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.vector/jdk/incubator/vector/Vector.html#expansion\"\u003epart number\u003c/a\u003e of the result, or zero if neither expanding nor contracting"
        ],
        "return": [
          "a vector converted by element type from this vector"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "jdk.incubator.vector.ByteVector",
  "comment": "A specialized \n\u003ca href\u003d\"Vector.html\" title\u003d\"class in jdk.incubator.vector\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing an ordered immutable sequence of \n\u003ccode\u003ebyte\u003c/code\u003e values.",
  "tagMap": {}
}