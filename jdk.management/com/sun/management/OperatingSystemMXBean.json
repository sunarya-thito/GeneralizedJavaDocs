{
  "packageName": "com.sun.management",
  "simpleName": "OperatingSystemMXBean",
  "moduleName": "jdk.management",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.management.OperatingSystemMXBean",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCommittedVirtualMemorySize",
      "comment": "Returns the amount of virtual memory that is guaranteed to be available to the running process in bytes, or -1 if this operation is not supported.",
      "tagMap": {
        "return": [
          "the amount of virtual memory that is guaranteed to be available to the running process in bytes, or \n\u003ccode\u003e-1\u003c/code\u003e if this operation is not supported."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTotalSwapSpaceSize",
      "comment": "Returns the total amount of swap space in bytes.",
      "tagMap": {
        "return": [
          "the total amount of swap space in bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFreeSwapSpaceSize",
      "comment": "Returns the amount of free swap space in bytes.",
      "tagMap": {
        "return": [
          "the amount of free swap space in bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProcessCpuTime",
      "comment": "Returns the CPU time used by the process on which the Java virtual machine is running in nanoseconds. The returned value is of nanoseconds precision but not necessarily nanoseconds accuracy. This method returns -1 if the the platform does not support this operation.",
      "tagMap": {
        "return": [
          "the CPU time used by the process in nanoseconds, or \n\u003ccode\u003e-1\u003c/code\u003e if this operation is not supported."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFreePhysicalMemorySize",
      "comment": "Returns the amount of free physical memory in bytes.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "implSpec": [
          "This implementation must return the same value as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getFreeMemorySize()\"\u003e\u003ccode\u003egetFreeMemorySize()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the amount of free physical memory in bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFreeMemorySize",
      "comment": "Returns the amount of free memory in bytes.",
      "tagMap": {
        "return": [
          "the amount of free memory in bytes."
        ],
        "since": [
          "14"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTotalPhysicalMemorySize",
      "comment": "Returns the total amount of physical memory in bytes.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "implSpec": [
          "This implementation must return the same value as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getTotalMemorySize()\"\u003e\u003ccode\u003egetTotalMemorySize()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the total amount of physical memory in bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTotalMemorySize",
      "comment": "Returns the total amount of memory in bytes.",
      "tagMap": {
        "return": [
          "the total amount of memory in bytes."
        ],
        "since": [
          "14"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSystemCpuLoad",
      "comment": "Returns the \"recent cpu usage\" for the whole system. This value is a double in the [0.0,1.0] interval. A value of 0.0 means that all CPUs were idle during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running 100% of the time during the recent period being observed. All values betweens 0.0 and 1.0 are possible depending of the activities going on in the system. If the system recent cpu usage is not available, the method returns a negative value.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "14"
            }
          ]
        }
      ],
      "tagMap": {
        "implSpec": [
          "This implementation must return the same value as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getCpuLoad()\"\u003e\u003ccode\u003egetCpuLoad()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the \"recent cpu usage\" for the whole system; a negative value if not available."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCpuLoad",
      "comment": "Returns the \"recent cpu usage\" for the operating environment. This value is a double in the [0.0,1.0] interval. A value of 0.0 means that all CPUs were idle during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running 100% of the time during the recent period being observed. All values betweens 0.0 and 1.0 are possible depending of the activities going on. If the recent cpu usage is not available, the method returns a negative value.",
      "tagMap": {
        "return": [
          "the \"recent cpu usage\" for the whole operating environment; a negative value if not available."
        ],
        "since": [
          "14"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProcessCpuLoad",
      "comment": "Returns the \"recent cpu usage\" for the Java Virtual Machine process. This value is a double in the [0.0,1.0] interval. A value of 0.0 means that none of the CPUs were running threads from the JVM process during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running threads from the JVM 100% of the time during the recent period being observed. Threads from the JVM include the application threads as well as the JVM internal threads. All values betweens 0.0 and 1.0 are possible depending of the activities going on in the JVM process and the whole system. If the Java Virtual Machine recent CPU usage is not available, the method returns a negative value.",
      "tagMap": {
        "return": [
          "the \"recent cpu usage\" for the Java Virtual Machine process; a negative value if not available."
        ],
        "since": [
          "1.7"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.management.OperatingSystemMXBean",
  "comment": "Platform-specific management interface for the operating system on which the Java virtual machine is running. \n\u003cp\u003e This interface provides information about the operating environment on which the Java virtual machine is running. That might be a native operating system, a virtualized operating system environment, or a container-managed environment. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eOperatingSystemMXBean\u003c/code\u003e object returned by \u003ca href\u003d\"../../../../java.management/java/lang/management/ManagementFactory.html#getOperatingSystemMXBean()\"\u003e\u003ccode\u003eManagementFactory.getOperatingSystemMXBean()\u003c/code\u003e\u003c/a\u003e is an instance of the implementation class of this interface or \u003ca href\u003d\"UnixOperatingSystemMXBean.html\" title\u003d\"interface in com.sun.management\"\u003e\u003ccode\u003eUnixOperatingSystemMXBean\u003c/code\u003e\u003c/a\u003e interface depending on its underlying operating system.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}