{
  "packageName": "com.sun.management",
  "simpleName": "HotSpotDiagnosticMXBean",
  "moduleName": "jdk.management",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.management.PlatformManagedObject",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dumpHeap",
      "comment": "Dumps the heap to the outputFile file in the same format as the hprof heap dump. If this method is called remotely from another process, the heap dump output is written to a file named outputFile on the machine where the target VM is running. If outputFile is a relative path, it is relative to the working directory where the target VM was started.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoutputFile\u003c/code\u003e - the system-dependent filename",
          "\u003ccode\u003elive\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e dump only \n\u003ci\u003elive\u003c/i\u003e objects i.e. objects that are reachable from others"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eoutputFile\u003c/code\u003e already exists, cannot be created, opened, or written to.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this operation is not supported.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoutputFile\u003c/code\u003e does not end with \".hprof\" suffix.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoutputFile\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the named file or the caller does not have ManagmentPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.management.VMOption",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDiagnosticOptions",
      "comment": "Returns a list of VMOption objects for all diagnostic options. A diagnostic option is a writeable VM option that can be set dynamically mainly for troubleshooting and diagnosis.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a list of \n\u003ccode\u003eVMOption\u003c/code\u003e objects for all diagnostic options."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.management.VMOption",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVMOption",
      "comment": "Returns a VMOption object for a VM option of the given name.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if a VM option of the given name does not exist."
        ],
        "return": [
          "a \n\u003ccode\u003eVMOption\u003c/code\u003e object for a VM option of the given name."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setVMOption",
      "comment": "Sets a VM option of the given name to the specified value. The new value will be reflected in a new VMOption object returned by the getVMOption(java.lang.String) method or the getDiagnosticOptions() method. This method does not change the value of this VMOption object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of a VM option",
          "\u003ccode\u003evalue\u003c/code\u003e - New value of the VM option to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the VM option of the given name does not exist.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the new value is invalid.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the VM option is not writable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name or value is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller does not have ManagementPermission(\"control\")."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.management.HotSpotDiagnosticMXBean",
  "comment": "Diagnostic management interface for the HotSpot Virtual Machine. \n\u003cp\u003eThe diagnostic MBean is registered to the platform MBeanServer as are other platform MBeans. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eObjectName\u003c/code\u003e for uniquely identifying the diagnostic MXBean within an MBeanServer is: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003ccode\u003ecom.sun.management:type\u003dHotSpotDiagnostic\u003c/code\u003e \n\u003c/blockquote\u003e .* It can be obtained by calling the \n\u003ca href\u003d\"../../../../java.management/java/lang/management/PlatformManagedObject.html#getObjectName()\"\u003e\u003ccode\u003ePlatformManagedObject.getObjectName()\u003c/code\u003e\u003c/a\u003e method. All methods throw a \n\u003ccode\u003eNullPointerException\u003c/code\u003e if any input argument is \n\u003ccode\u003enull\u003c/code\u003e unless it\u0027s stated otherwise.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ManagementFactory.html#getPlatformMXBeans(java.lang.Class)\"\u003e\u003ccode\u003eManagementFactory.getPlatformMXBeans(Class)\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}