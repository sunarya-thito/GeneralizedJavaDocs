{
  "packageName": "jdk.jshell",
  "simpleName": "Builder",
  "moduleName": "jdk.jshell",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "in",
      "comment": "Sets the input for the running evaluation (it\u0027s System.in). Note: applications that use System.in for snippet or other user input cannot use System.in as the input stream for the remote process. The read method of the InputStream may throw the InterruptedIOException to signal the user canceled the input. The currently running snippet will be automatically stopped. The default, if this is not set, is to provide an empty input stream -- new ByteArrayInputStream(new byte[0]).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the \n\u003ccode\u003eInputStream\u003c/code\u003e to be channelled to \n\u003ccode\u003eSystem.in\u003c/code\u003e in the remote execution process"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "out",
      "comment": "Sets the output for the running evaluation (it\u0027s System.out). The controlling process and the remote process can share System.out. The default, if this is not set, is System.out.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the \n\u003ccode\u003ePrintStream\u003c/code\u003e to be channelled to \n\u003ccode\u003eSystem.out\u003c/code\u003e in the remote execution process"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "field": {
            "name": "err"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "err",
      "comment": "Sets the error output for the running evaluation (it\u0027s System.err). The controlling process and the remote process can share System.err. The default, if this is not set, is System.err.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eerr\u003c/code\u003e - the \n\u003ccode\u003ePrintStream\u003c/code\u003e to be channelled to \n\u003ccode\u003eSystem.err\u003c/code\u003e in the remote execution process"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "generator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tempVariableNameGenerator",
      "comment": "Sets a generator of temp variable names for VarSnippet of Snippet.SubKind.TEMP_VAR_EXPRESSION_SUBKIND. Do not use this method unless you have explicit need for it. The generator will be used for newly created VarSnippet instances. The name of a variable is queried with PersistentSnippet.name(). The callback is sent during the processing of the snippet, the JShell state is not stable. No calls whatsoever on the JShell instance may be made from the callback. The generated name must be unique within active snippets. The default behavior (if this is not set or generator is null) is to generate the name as a sequential number with a prefixing dollar sign (\"$\").",
      "tagMap": {
        "param": [
          "\u003ccode\u003egenerator\u003c/code\u003e - the \n\u003ccode\u003eSupplier\u003c/code\u003e to generate the temporary variable name string or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "name": "jdk.jshell.Snippet",
                "type": "Class"
              },
              {
                "name": "java.lang.Integer",
                "type": "Class"
              },
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "generator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "idGenerator",
      "comment": "Sets the generator of identifying names for Snippets. Do not use this method unless you have explicit need for it. The generator will be used for newly created Snippet instances. The identifying name (id) is accessed with Snippet.id() and can be seen in the StackTraceElement.getFileName() for a EvalException and UnresolvedReferenceException. The inputs to the generator are the Snippet and an integer. The integer will be the same for two Snippets which would overwrite one-another, but otherwise is unique. The callback is sent during the processing of the snippet and the Snippet and the state as a whole are not stable. No calls to change system state (including Snippet state) should be made. Queries of Snippet may be made except to Snippet.id(). No calls on the JShell instance may be made from the callback, except to status(Snippet). The default behavior (if this is not set or generator is null) is to generate the id as the integer converted to a string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egenerator\u003c/code\u003e - the \n\u003ccode\u003eBiFunction\u003c/code\u003e to generate the id string or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remoteVMOptions",
      "comment": "Sets additional VM options for launching the VM.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoptions\u003c/code\u003e - The options for the remote VM"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compilerOptions",
      "comment": "Adds compiler options. These additional options will be used on parsing, analysis, and code generation calls to the compiler. Options which interfere with results are not supported and have undefined effects on JShell\u0027s operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoptions\u003c/code\u003e - the addition options for compiler invocations"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "executionControlSpec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "executionEngine",
      "comment": "Sets the custom engine for execution. Snippet execution will be provided by the ExecutionControl instance selected by the specified execution control spec. Use, at most, one of these overloaded executionEngine builder methods.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutionControlSpec\u003c/code\u003e - the execution control spec, which is documented in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/spi/package-summary.html\"\u003e\u003ccode\u003ejdk.jshell.spi\u003c/code\u003e\u003c/a\u003e package documentation."
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.spi.ExecutionControlProvider",
            "type": "Class"
          },
          "field": {
            "name": "executionControlProvider"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "executionControlParameters"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "executionEngine",
      "comment": "Sets the custom engine for execution. Snippet execution will be provided by the specified ExecutionControl instance. Use, at most, one of these overloaded executionEngine builder methods.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutionControlProvider\u003c/code\u003e - the provider to supply the execution engine",
          "\u003ccode\u003eexecutionControlParameters\u003c/code\u003e - the parameters to the provider, or \n\u003ccode\u003enull\u003c/code\u003e for default parameters"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "javax.tools.StandardJavaFileManager",
                "type": "Class"
              },
              {
                "name": "javax.tools.StandardJavaFileManager",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mapping"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fileManager",
      "comment": "Configure the FileManager to be used by compilation and source analysis. If not set or passed null, the compiler\u0027s standard file manager will be used (identity mapping). For use in special applications where the compiler\u0027s normal file handling needs to be overridden. See the file manager APIs for more information. The file manager input enables forwarding file managers, if this is not needed, the incoming file manager can be ignored (constant function).",
      "tagMap": {
        "param": [
          "\u003ccode\u003emapping\u003c/code\u003e - a function that given the compiler\u0027s standard file manager, returns a file manager to use"
        ],
        "return": [
          "the \n\u003ccode\u003eBuilder\u003c/code\u003e instance (for use in chained initialization)"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "build",
      "comment": "Builds a JShell state engine. This is the entry-point to all JShell functionality. This creates a remote process for execution. It is thus important to close the returned instance.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eJShell\u003c/code\u003e instance could not be created."
        ],
        "return": [
          "the state engine"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "jdk.jshell.JShell$Builder",
  "comment": "Builder for \n\u003ccode\u003eJShell\u003c/code\u003e instances. Create custom instances of \n\u003ccode\u003eJShell\u003c/code\u003e by using the setter methods on this class. After zero or more of these, use the \n\u003ca href\u003d\"#build()\"\u003e\u003ccode\u003ebuild()\u003c/code\u003e\u003c/a\u003e method to create a \n\u003ccode\u003eJShell\u003c/code\u003e instance. These can all be chained. For example, setting the remote output and error streams: \n\u003cpre\u003e \u003ccode\u003e\n     JShell myShell \u003d\n       JShell.builder()\n         .out(myOutStream)\n         .err(myErrStream)\n         .build(); \u003c/code\u003e \u003c/pre\u003e If no special set-up is needed, just use \n\u003ccode\u003eJShell.builder().build()\u003c/code\u003e or the short-cut equivalent \n\u003ccode\u003eJShell.create()\u003c/code\u003e.",
  "tagMap": {}
}