{
  "packageName": "jdk.jshell",
  "simpleName": "ExpressionSnippet",
  "moduleName": "jdk.jshell",
  "type": "CLASS",
  "superClass": {
    "name": "jdk.jshell.Snippet",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "name",
      "comment": "Variable name which is the value of the expression. Since the expression is either just a variable identifier or it is an assignment to a variable, there is always a variable which is the subject of the expression. All other forms of expression become temporary variables which are instead referenced by a VarSnippet.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the name of the variable which is the subject of the expression."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "typeName",
      "comment": "Type of the expression",
      "annotations": [],
      "tagMap": {
        "return": [
          "String representation of the type of the expression."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jshell.ExpressionSnippet",
  "comment": "Snippet for an assignment or variable-value expression. The Kind is \n\u003ca href\u003d\"Snippet.Kind.html#EXPRESSION\"\u003e\u003ccode\u003eSnippet.Kind.EXPRESSION\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e \u003ccode\u003eExpressionSnippet\u003c/code\u003e is immutable: an access to any of its methods will always return the same result. and thus is thread-safe.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-15.html#jls-15\"\u003e15 Expressions\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "9"
    ]
  }
}