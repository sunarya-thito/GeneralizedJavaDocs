{
  "packageName": "jdk.jshell",
  "simpleName": "EvalException",
  "moduleName": "jdk.jshell",
  "type": "CLASS",
  "superClass": {
    "name": "jdk.jshell.JShellException",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExceptionClassName",
      "comment": "Returns the name of the Throwable subclass which was thrown in the executing client. Note this class may not be loaded in the controlling process. See Class.getName() for the format of the string.",
      "tagMap": {
        "return": [
          "the name of the exception class as a String"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShellException",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCause",
      "comment": "Returns the wrapped cause of the throwable in the executing client represented by this EvalException or null if the cause is nonexistent or unknown.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003egetCause\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003eThrowable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the cause wrapped in a \n\u003ccode\u003eEvalException\u003c/code\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/UnresolvedReferenceException.html\" title\u003d\"class in jdk.jshell\"\u003e\u003ccode\u003eUnresolvedReferenceException\u003c/code\u003e\u003c/a\u003e or return \n\u003ccode\u003enull\u003c/code\u003e if the cause is nonexistent or unknown."
        ],
        "since": [
          "11"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jshell.EvalException",
  "comment": "Wraps an throwable thrown in the executing client. An instance of \n\u003ccode\u003eEvalException\u003c/code\u003e can be returned in the \n\u003ca href\u003d\"SnippetEvent.html#exception()\"\u003e\u003ccode\u003eSnippetEvent.exception()\u003c/code\u003e\u003c/a\u003e query. The name of the throwable thrown is available from \n\u003ca href\u003d\"#getExceptionClassName()\"\u003e\u003ccode\u003egetExceptionClassName()\u003c/code\u003e\u003c/a\u003e. Message and stack can be queried by methods on \n\u003ccode\u003eException\u003c/code\u003e. \n\u003cp\u003e Note that in stack trace frames representing JShell Snippets, \u003ccode\u003eStackTraceElement.getFileName()\u003c/code\u003e will return \"#\" followed by the Snippet id and for snippets without a method name (for example an expression) \u003ccode\u003eStackTraceElement.getMethodName()\u003c/code\u003e will be the empty string.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#jdk.jshell.EvalException\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "9"
    ]
  }
}