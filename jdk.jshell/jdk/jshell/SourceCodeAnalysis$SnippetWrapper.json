{
  "packageName": "jdk.jshell",
  "simpleName": "SnippetWrapper",
  "moduleName": "jdk.jshell",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "source",
      "comment": "Returns the input that is wrapped. For wrappers(String), this is the source of the snippet within the input. A variable declaration of N variables will map to N wrappers with the source separated. For wrapper(Snippet), this is Snippet.source().",
      "tagMap": {
        "return": [
          "the input source corresponding to the wrapper."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "wrapped",
      "comment": "Returns a Java class definition that wraps the source() or, if an import, the import source. If the input is not a valid Snippet, this will not be a valid class/import definition. The source may be divided and mapped to different locations within the wrapped source.",
      "tagMap": {
        "return": [
          "the source wrapped into top-level Java code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "fullClassName",
      "comment": "Returns the fully qualified class name of the wrapped() class. For erroneous input, a best guess is returned.",
      "tagMap": {
        "return": [
          "the name of the synthetic wrapped class; if an import, the name is not defined"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Kind",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "kind",
      "comment": "Returns the Snippet.Kind of the source().",
      "tagMap": {
        "return": [
          "an enum representing the general kind of snippet."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sourceToWrappedPosition",
      "comment": "Maps character position within the source to character position within the wrapped.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.SnippetWrapper.html#source()\"\u003e\u003ccode\u003esource()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the corresponding position in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.SnippetWrapper.html#wrapped()\"\u003e\u003ccode\u003ewrapped()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "wrappedToSourcePosition",
      "comment": "Maps character position within the wrapped to character position within the source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.SnippetWrapper.html#wrapped()\"\u003e\u003ccode\u003ewrapped()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the corresponding position in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.SnippetWrapper.html#source()\"\u003e\u003ccode\u003esource()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "jdk.jshell.SourceCodeAnalysis$SnippetWrapper",
  "comment": "The wrapping of a snippet of Java source into valid top-level Java source. The wrapping will always either be an import or include a synthetic class at the top-level. If a synthetic class is generated, it will be proceeded by the package and import declarations, and may contain synthetic class members. \n\u003cp\u003e This interface, in addition to the mapped form, provides the context and position mapping information.\u003c/p\u003e",
  "tagMap": {}
}