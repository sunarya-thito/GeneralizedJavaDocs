{
  "packageName": "jdk.jshell",
  "simpleName": "JShell",
  "moduleName": "jdk.jshell",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jshell.JShell",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "Create a new JShell state engine. That is, create an instance of JShell. Equivalent to JShell.builder().build().",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eJShell\u003c/code\u003e instance could not be created."
        ],
        "return": [
          "an instance of \n\u003ccode\u003eJShell\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Builder",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "builder",
      "comment": "Factory method for JShell.Builder which, in-turn, is used for creating instances of JShell. Create a default instance of JShell with JShell.builder().build(). For more construction options see JShell.Builder.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/JShell.Builder.html\" title\u003d\"class in jdk.jshell\"\u003e\u003ccode\u003eJShell.Builder\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eBuilder\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.SourceCodeAnalysis",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sourceCodeAnalysis",
      "comment": "Access to source code analysis functionality. An instance of JShell will always return the same SourceCodeAnalysis instance from sourceCodeAnalysis().",
      "tagMap": {
        "return": [
          "an instance of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.html\" title\u003d\"class in jdk.jshell\"\u003e\u003ccode\u003eSourceCodeAnalysis\u003c/code\u003e\u003c/a\u003e which can be used for source analysis such as completion detection and completion suggestions."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jshell.SnippetEvent",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "eval",
      "comment": "Evaluate the input String, including definition and/or execution, if applicable. The input is checked for errors, unless the errors can be deferred (as is the case with some unresolvedDependencies references), errors will abort evaluation. The input should be exactly one complete snippet of source code, that is, one expression, statement, variable declaration, method declaration, class declaration, or import. To break arbitrary input into individual complete snippets, use SourceCodeAnalysis.analyzeCompletion(String). For imports, the import is added. Classes, interfaces. methods, and variables are defined. The initializer of variables, statements, and expressions are executed. The modifiers public, protected, private, static, and final are not allowed on op-level declarations and are ignored with a warning. Synchronized, native, abstract, and default top-level methods are not allowed and are errors. If a previous definition of a declaration is overwritten then there will be an event showing its status changed to OVERWRITTEN, this will not occur for dropped, rejected, or already overwritten declarations. If execution environment is out of process, as is the default case, then if the evaluated code causes the execution environment to terminate, this JShell instance will be closed but the calling process and VM remain valid.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/SourceCodeAnalysis.html#analyzeCompletion(java.lang.String)\"\u003e\u003ccode\u003eSourceCodeAnalysis.analyzeCompletion(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/JShell.html#onShutdown(java.util.function.Consumer)\"\u003e\u003ccode\u003eonShutdown(java.util.function.Consumer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The input String to evaluate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed."
        ],
        "return": [
          "the list of events directly or indirectly caused by this evaluation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "jdk.jshell.SnippetEvent",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.Snippet",
            "type": "Class"
          },
          "field": {
            "name": "snippet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drop",
      "comment": "Remove a declaration from the state. That is, if the snippet is an active persistent snippet, remove the snippet and update the JShell evaluation state accordingly. For all active snippets, change the status to DROPPED.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esnippet\u003c/code\u003e - The snippet to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the snippet is not associated with this \n\u003ccode\u003eJShell\u003c/code\u003e instance."
        ],
        "return": [
          "The list of events from updating declarations dependent on the dropped snippet."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addToClasspath",
      "comment": "The specified path is added to the end of the classpath used in eval(). Note that the unnamed package is not accessible from the package in which eval(String) code is placed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to add to the classpath."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stop",
      "comment": "Attempt to stop currently running evaluation. When called while the eval(java.lang.String) method is running and the user\u0027s code being executed, an attempt will be made to stop user\u0027s code. Note that typically this method needs to be called from a different thread than the one running the eval method. If the eval(java.lang.String) method is not running, does nothing. The attempt to stop the user\u0027s code may fail in some case, which may include when the execution is blocked on an I/O operation, or when the user\u0027s code is catching the ThreadDeath exception.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Close this state engine. Frees resources. Should be called when this state engine is no longer needed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "jdk.jshell.Snippet",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "snippets",
      "comment": "Return all snippets.",
      "tagMap": {
        "return": [
          "the snippets for all current snippets in id order."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "jdk.jshell.VarSnippet",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "variables",
      "comment": "Returns the active variable snippets. This convenience method is equivalent to snippets() filtered for status(snippet).isActive() \u0026\u0026 snippet.kind() \u003d\u003d Kind.VARIABLE and cast to VarSnippet.",
      "tagMap": {
        "return": [
          "the active declared variables."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "jdk.jshell.MethodSnippet",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "methods",
      "comment": "Returns the active method snippets. This convenience method is equivalent to snippets() filtered for status(snippet).isActive() \u0026\u0026 snippet.kind() \u003d\u003d Kind.METHOD and cast to MethodSnippet.",
      "tagMap": {
        "return": [
          "the active declared methods."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "jdk.jshell.TypeDeclSnippet",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "types",
      "comment": "Returns the active type declaration (class, interface, annotation type, and enum) snippets. This convenience method is equivalent to snippets() filtered for status(snippet).isActive() \u0026\u0026 snippet.kind() \u003d\u003d Kind.TYPE_DECL and cast to TypeDeclSnippet.",
      "tagMap": {
        "return": [
          "the active declared type declarations."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "jdk.jshell.ImportSnippet",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "imports",
      "comment": "Returns the active import snippets. This convenience method is equivalent to snippets() filtered for status(snippet).isActive() \u0026\u0026 snippet.kind() \u003d\u003d Kind.IMPORT and cast to ImportSnippet.",
      "tagMap": {
        "return": [
          "the active declared import declarations."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Status",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.Snippet",
            "type": "Class"
          },
          "field": {
            "name": "snippet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "status",
      "comment": "Return the status of the snippet. This is updated either because of an explicit eval() call or an automatic update triggered by a dependency.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esnippet\u003c/code\u003e - the \n\u003ccode\u003eSnippet\u003c/code\u003e to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the snippet is not associated with this \n\u003ccode\u003eJShell\u003c/code\u003e instance."
        ],
        "return": [
          "the status corresponding to this snippet"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "jdk.jshell.Diag",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.Snippet",
            "type": "Class"
          },
          "field": {
            "name": "snippet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "diagnostics",
      "comment": "Return the diagnostics of the most recent evaluation of the snippet. The evaluation can either because of an explicit eval() call or an automatic update triggered by a dependency.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esnippet\u003c/code\u003e - the \n\u003ccode\u003eSnippet\u003c/code\u003e to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the snippet is not associated with this \n\u003ccode\u003eJShell\u003c/code\u003e instance."
        ],
        "return": [
          "the diagnostics corresponding to this snippet. This does not include unresolvedDependencies references reported in \n\u003ccode\u003eunresolvedDependencies()\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.DeclarationSnippet",
            "type": "Class"
          },
          "field": {
            "name": "snippet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unresolvedDependencies",
      "comment": "For RECOVERABLE_DEFINED or RECOVERABLE_NOT_DEFINED declarations, the names of current unresolved dependencies for the snippet. The returned value of this method, for a given method may change when an eval() or drop() of another snippet causes an update of a dependency.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esnippet\u003c/code\u003e - the declaration \n\u003ccode\u003eSnippet\u003c/code\u003e to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the snippet is not associated with this \n\u003ccode\u003eJShell\u003c/code\u003e instance."
        ],
        "return": [
          "a stream of symbol names that are currently unresolvedDependencies."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.VarSnippet",
            "type": "Class"
          },
          "field": {
            "name": "snippet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "varValue",
      "comment": "Get the current value of a variable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esnippet\u003c/code\u003e - the variable Snippet whose value is queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the snippet is not associated with this \n\u003ccode\u003eJShell\u003c/code\u003e instance.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the variable\u0027s status is anything but \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/Snippet.Status.html#VALID\"\u003e\u003ccode\u003eSnippet.Status.VALID\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the current value of the variable referenced by snippet."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Subscription",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.jshell.SnippetEvent",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onSnippetEvent",
      "comment": "Register a callback to be called when the Status of a snippet changes. Each call adds a new subscription.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - Action to perform when the Status changes."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eJShell\u003c/code\u003e instance is closed."
        ],
        "return": [
          "A token which can be used to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/JShell.html#unsubscribe(jdk.jshell.JShell.Subscription)\"\u003eunsubscribe\u003c/a\u003e this subscription."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShell$Subscription",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.jshell.JShell",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onShutdown",
      "comment": "Register a callback to be called when this JShell instance terminates. This occurs either because the client process has ended (e.g. called System.exit(0)) or the connection has been shutdown, as by close(). Each call adds a new subscription.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - Action to perform when the state terminates."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this JShell instance is closed"
        ],
        "return": [
          "A token which can be used to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/JShell.html#unsubscribe(jdk.jshell.JShell.Subscription)\"\u003eunsubscribe\u003c/a\u003e this subscription."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.jshell.JShell$Subscription",
            "type": "Class"
          },
          "field": {
            "name": "token"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unsubscribe",
      "comment": "Cancel a callback subscription.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoken\u003c/code\u003e - The token corresponding to the subscription to be unsubscribed."
        ]
      }
    }
  ],
  "innerClasses": [
    "jdk.jshell.JShell$Builder",
    "jdk.jshell.JShell$Subscription"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jshell.JShell",
  "comment": "The JShell evaluation state engine. This is the central class in the JShell API. A \n\u003ccode\u003eJShell\u003c/code\u003e instance holds the evolving compilation and execution state. The state is changed with the instance methods \n\u003ca href\u003d\"#eval(java.lang.String)\"\u003e\u003ccode\u003eeval(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#drop(jdk.jshell.Snippet)\"\u003e\u003ccode\u003edrop(Snippet)\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"#addToClasspath(java.lang.String)\"\u003e\u003ccode\u003eaddToClasspath(String)\u003c/code\u003e\u003c/a\u003e. The majority of methods query the state. A \n\u003ccode\u003eJShell\u003c/code\u003e instance also allows registering for events with \n\u003ca href\u003d\"#onSnippetEvent(java.util.function.Consumer)\"\u003e\u003ccode\u003eonSnippetEvent(Consumer)\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"#onShutdown(java.util.function.Consumer)\"\u003e\u003ccode\u003eonShutdown(Consumer)\u003c/code\u003e\u003c/a\u003e, which are unregistered with \n\u003ca href\u003d\"#unsubscribe(jdk.jshell.JShell.Subscription)\"\u003e\u003ccode\u003eunsubscribe(Subscription)\u003c/code\u003e\u003c/a\u003e. Access to the source analysis utilities is via \n\u003ca href\u003d\"#sourceCodeAnalysis()\"\u003e\u003ccode\u003esourceCodeAnalysis()\u003c/code\u003e\u003c/a\u003e. When complete the instance should be closed to free resources -- \n\u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e An instance of \u003ccode\u003eJShell\u003c/code\u003e is created with \u003ccode\u003eJShell.create()\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e This class is not thread safe, except as noted, all access should be through a single thread.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}