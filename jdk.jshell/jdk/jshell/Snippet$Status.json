{
  "packageName": "jdk.jshell",
  "simpleName": "Status",
  "moduleName": "jdk.jshell",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "jdk.jshell.Snippet$Status",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Status",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Status",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isActive",
      "comment": "Indicates whether the Snippet is active, that is, will a persistent snippet be re-evaluated when a new JShell.eval(String) or JShell.drop(Snippet) that could change its status is invoked. This is more broad than isDefined() since a Snippet which is RECOVERABLE_NOT_DEFINED will be updated.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the Snippet is active; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDefined",
      "comment": "Indicates whether the snippet is currently part of the defined state of the JShell. Is it visible to compilation of other snippets?",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the Snippet is defined; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "jdk.jshell.Snippet$Status",
  "comment": "Describes the current state of a Snippet. This is a dynamic property of a Snippet within the JShell state -- thus is retrieved with a \n\u003ca href\u003d\"JShell.html#status(jdk.jshell.Snippet)\"\u003equery on {@code JShell}\u003c/a\u003e. \n\u003cp\u003e The \u003ccode\u003eStatus\u003c/code\u003e changes as the state changes. For example, creation of another snippet with \u003ca href\u003d\"JShell.html#eval(java.lang.String)\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e may resolve dependencies of this Snippet (or invalidate those dependencies), or \u003ca href\u003d\"#OVERWRITTEN\"\u003eoverwrite\u003c/a\u003e this Snippet changing its \u003ccode\u003eStatus\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Important properties associated with \u003ccode\u003eStatus\u003c/code\u003e are: \u003ca href\u003d\"#isDefined()\"\u003e\u003ccode\u003eisDefined()\u003c/code\u003e\u003c/a\u003e, if it is visible to other existing and new snippets; and \u003ca href\u003d\"#isActive()\"\u003e\u003ccode\u003eisActive()\u003c/code\u003e\u003c/a\u003e, if, as the JShell state changes, the snippet will update, possibly changing \u003ccode\u003eStatus\u003c/code\u003e. An executable Snippet can only be executed if it is in the the \u003ca href\u003d\"#VALID\"\u003e\u003ccode\u003eVALID\u003c/code\u003e\u003c/a\u003e \u003ccode\u003eStatus\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jshell/jdk/jshell/JShell.html#status(jdk.jshell.Snippet)\"\u003e\u003ccode\u003eJShell.status(jdk.jshell.Snippet)\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}