{
  "packageName": "jdk.jshell",
  "simpleName": "SnippetEvent",
  "moduleName": "jdk.jshell",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jshell.Snippet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "snippet",
      "comment": "The Snippet which has changed",
      "tagMap": {
        "return": [
          "the return the Snippet whose \n\u003ccode\u003eStatus\u003c/code\u003e has changed."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Status",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "previousStatus",
      "comment": "The status before the transition. If this event describes a Snippet creation return NONEXISTENT.",
      "tagMap": {
        "return": [
          "the previousStatus"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Status",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "status",
      "comment": "The after status. Note: this may be the same as the previous status (not all changes cause a Status change.",
      "tagMap": {
        "return": [
          "the status"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSignatureChange",
      "comment": "Indicates whether the signature has changed. Coming in or out of definition is always a signature change. An overwritten Snippet (status \u003d\u003d OVERWRITTEN) is always false as responsibility for the definition has passed to the overwriting definition.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the signature changed; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "causeSnippet",
      "comment": "Either the snippet whose change caused this update or null. This returns null if this change is the creation of a new Snippet via eval or it is the explicit drop of a Snippet with drop.",
      "tagMap": {
        "return": [
          "the Snippet which caused this change or \n\u003ccode\u003enull\u003c/code\u003e if directly caused by an API action."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.JShellException",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exception",
      "comment": "An instance of UnresolvedReferenceException, if an unresolved reference was encountered, or an instance of EvalException if an exception was thrown during execution, otherwise null.",
      "tagMap": {
        "return": [
          "the exception or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "value",
      "comment": "The result value of successful run. The value is null if not executed or an exception was thrown.",
      "tagMap": {
        "return": [
          "the value or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Return a string representation of the event",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a descriptive representation of the SnippetEvent"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "jdk.jshell.SnippetEvent",
  "comment": "A description of a change to a Snippet. These are generated by direct changes to state with \n\u003ca href\u003d\"JShell.html#eval(java.lang.String)\"\u003e\u003ccode\u003eJShell.eval(String)\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"JShell.html#drop(jdk.jshell.Snippet)\"\u003e\u003ccode\u003eJShell.drop(Snippet)\u003c/code\u003e\u003c/a\u003e, or indirectly by these same methods as dependencies change or Snippets are overwritten. For direct changes, the \n\u003ca href\u003d\"#causeSnippet()\"\u003e\u003ccode\u003ecauseSnippet()\u003c/code\u003e\u003c/a\u003e is \n\u003ccode\u003enull\u003c/code\u003e. \n\u003cp\u003e \u003ccode\u003eSnippetEvent\u003c/code\u003e is immutable: an access to any of its methods will always return the same result. and thus is thread-safe.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}