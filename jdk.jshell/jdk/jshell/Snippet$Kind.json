{
  "packageName": "jdk.jshell",
  "simpleName": "Kind",
  "moduleName": "jdk.jshell",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "jdk.jshell.Snippet$Kind",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Kind",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.jshell.Snippet$Kind",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPersistent",
      "comment": "Indicates whether this Kind of Snippet is persistent. Only declarations are persistent because they influence future Snippets. Note that though the Kind of a Snippet may be persistent, that does not mean that the Snippet will persist; For example it may be invalid or have been dropped. See: Snippet.Status.isDefined().",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eKind\u003c/code\u003e of \n\u003ccode\u003eSnippet\u003c/code\u003e is visible to subsequent evaluations; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "jdk.jshell.Snippet$Kind",
  "comment": "Describes the general kind of snippet. The \n\u003ccode\u003eKind\u003c/code\u003e is an immutable property of a Snippet. It is accessed with \n\u003ca href\u003d\"Snippet.html#kind()\"\u003e\u003ccode\u003eSnippet.kind()\u003c/code\u003e\u003c/a\u003e. The \n\u003ccode\u003eKind\u003c/code\u003e can be used to determine which subclass of Snippet it is. For example, \n\u003ca href\u003d\"JShell.html#eval(java.lang.String)\"\u003e\u003ccode\u003eeval(\"int three() { return 3; }\")\u003c/code\u003e\u003c/a\u003e will return a snippet creation event. The \n\u003ccode\u003eKind\u003c/code\u003e of that Snippet will be \n\u003ccode\u003eMETHOD\u003c/code\u003e, from which you know that the subclass of \n\u003ccode\u003eSnippet\u003c/code\u003e is \n\u003ccode\u003eMethodSnippet\u003c/code\u003e and it can be cast as such.",
  "tagMap": {}
}