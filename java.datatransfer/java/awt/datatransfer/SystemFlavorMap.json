{
  "packageName": "java.awt.datatransfer",
  "simpleName": "SystemFlavorMap",
  "moduleName": "java.datatransfer",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.datatransfer.FlavorMap",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultFlavorMap",
      "comment": "Returns the default FlavorMap for this thread\u0027s ClassLoader.",
      "tagMap": {
        "return": [
          "the default FlavorMap for this thread\u0027s ClassLoader"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flav"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNativesForFlavor",
      "comment": "Returns a List of String natives to which the specified DataFlavor can be translated by the data transfer subsystem. The List will be sorted from best native to worst. That is, the first native will best reflect data in the specified flavor to the underlying native platform. If the specified DataFlavor is previously unknown to the data transfer subsystem and the data transfer subsystem is unable to translate this DataFlavor to any existing native, then invoking this method will establish a mapping in both directions between the specified DataFlavor and an encoded version of its MIME type as its native.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#encodeDataFlavor(java.awt.datatransfer.DataFlavor)\"\u003e\u003ccode\u003eencodeDataFlavor(java.awt.datatransfer.DataFlavor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorTable.html#getNativesForFlavor(java.awt.datatransfer.DataFlavor)\"\u003egetNativesForFlavor\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorTable.html\" title\u003d\"interface in java.awt.datatransfer\"\u003eFlavorTable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eflav\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e whose corresponding natives should be returned. If \n\u003ccode\u003enull\u003c/code\u003e is specified, all natives currently known to the data transfer subsystem are returned in a non-deterministic order."
        ],
        "return": [
          "a \n\u003ccode\u003ejava.util.List\u003c/code\u003e of \n\u003ccode\u003ejava.lang.String\u003c/code\u003e objects which are platform-specific representations of platform-specific data formats"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlavorsForNative",
      "comment": "Returns a List of DataFlavors to which the specified String native can be translated by the data transfer subsystem. The List will be sorted from best DataFlavor to worst. That is, the first DataFlavor will best reflect data in the specified native to a Java application. If the specified native is previously unknown to the data transfer subsystem, and that native has been properly encoded, then invoking this method will establish a mapping in both directions between the specified native and a DataFlavor whose MIME type is a decoded version of the native. If the specified native is not a properly encoded native and the mappings for this native have not been altered with setFlavorsForNative, then the contents of the List is platform dependent, but null cannot be returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#encodeJavaMIMEType(java.lang.String)\"\u003e\u003ccode\u003eencodeJavaMIMEType(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorTable.html#getFlavorsForNative(java.lang.String)\"\u003egetFlavorsForNative\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorTable.html\" title\u003d\"interface in java.awt.datatransfer\"\u003eFlavorTable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enat\u003c/code\u003e - the native whose corresponding \n\u003ccode\u003eDataFlavor\u003c/code\u003es should be returned. If \n\u003ccode\u003enull\u003c/code\u003e is specified, all \n\u003ccode\u003eDataFlavor\u003c/code\u003es currently known to the data transfer subsystem are returned in a non-deterministic order."
        ],
        "return": [
          "a \n\u003ccode\u003ejava.util.List\u003c/code\u003e of \n\u003ccode\u003eDataFlavor\u003c/code\u003e objects into which platform-specific data in the specified, platform-specific native can be translated"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "flavors"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNativesForFlavors",
      "comment": "Returns a Map of the specified DataFlavors to their most preferred String native. Each native value will be the same as the first native in the List returned by getNativesForFlavor for the specified flavor. If a specified DataFlavor is previously unknown to the data transfer subsystem, then invoking this method will establish a mapping in both directions between the specified DataFlavor and an encoded version of its MIME type as its native.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#getNativesForFlavor(java.awt.datatransfer.DataFlavor)\"\u003e\u003ccode\u003egetNativesForFlavor(java.awt.datatransfer.DataFlavor)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#encodeDataFlavor(java.awt.datatransfer.DataFlavor)\"\u003e\u003ccode\u003eencodeDataFlavor(java.awt.datatransfer.DataFlavor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorMap.html#getNativesForFlavors(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003egetNativesForFlavors\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorMap.html\" title\u003d\"interface in java.awt.datatransfer\"\u003eFlavorMap\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eflavors\u003c/code\u003e - an array of \n\u003ccode\u003eDataFlavor\u003c/code\u003es which will be the key set of the returned \n\u003ccode\u003eMap\u003c/code\u003e. If \n\u003ccode\u003enull\u003c/code\u003e is specified, a mapping of all \n\u003ccode\u003eDataFlavor\u003c/code\u003es known to the data transfer subsystem to their most preferred \n\u003ccode\u003eString\u003c/code\u003e natives will be returned."
        ],
        "return": [
          "a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e of \n\u003ccode\u003eDataFlavor\u003c/code\u003es to \n\u003ccode\u003eString\u003c/code\u003e natives"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "natives"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlavorsForNatives",
      "comment": "Returns a Map of the specified String natives to their most preferred DataFlavor. Each DataFlavor value will be the same as the first DataFlavor in the List returned by getFlavorsForNative for the specified native. If a specified native is previously unknown to the data transfer subsystem, and that native has been properly encoded, then invoking this method will establish a mapping in both directions between the specified native and a DataFlavor whose MIME type is a decoded version of the native.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#getFlavorsForNative(java.lang.String)\"\u003e\u003ccode\u003egetFlavorsForNative(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#encodeJavaMIMEType(java.lang.String)\"\u003e\u003ccode\u003eencodeJavaMIMEType(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorMap.html#getFlavorsForNatives(java.lang.String%5B%5D)\"\u003egetFlavorsForNatives\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/FlavorMap.html\" title\u003d\"interface in java.awt.datatransfer\"\u003eFlavorMap\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enatives\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es which will be the key set of the returned \n\u003ccode\u003eMap\u003c/code\u003e. If \n\u003ccode\u003enull\u003c/code\u003e is specified, a mapping of all supported \n\u003ccode\u003eString\u003c/code\u003e natives to their most preferred \n\u003ccode\u003eDataFlavor\u003c/code\u003es will be returned."
        ],
        "return": [
          "a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e of \n\u003ccode\u003eString\u003c/code\u003e natives to \n\u003ccode\u003eDataFlavor\u003c/code\u003es"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flav"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addUnencodedNativeForFlavor",
      "comment": "Adds a mapping from the specified DataFlavor (and all DataFlavors equal to the specified DataFlavor) to the specified String native. Unlike getNativesForFlavor, the mapping will only be established in one direction, and the native will not be encoded. To establish a two-way mapping, call addFlavorForUnencodedNative as well. The new mapping will be of lower priority than any existing mapping. This method has no effect if a mapping from the specified or equal DataFlavor to the specified String native already exists.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#addFlavorForUnencodedNative(java.lang.String,java.awt.datatransfer.DataFlavor)\"\u003e\u003ccode\u003eaddFlavorForUnencodedNative(java.lang.String, java.awt.datatransfer.DataFlavor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eflav\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e key for the mapping",
          "\u003ccode\u003enat\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e native value for the mapping"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if flav or nat is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flav"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "natives"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNativesForFlavor",
      "comment": "Discards the current mappings for the specified DataFlavor and all DataFlavors equal to the specified DataFlavor, and creates new mappings to the specified String natives. Unlike getNativesForFlavor, the mappings will only be established in one direction, and the natives will not be encoded. To establish two-way mappings, call setFlavorsForNative as well. The first native in the array will represent the highest priority mapping. Subsequent natives will represent mappings of decreasing priority. If the array contains several elements that reference equal String natives, this method will establish new mappings for the first of those elements and ignore the rest of them. It is recommended that client code not reset mappings established by the data transfer subsystem. This method should only be used for application-level mappings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#setFlavorsForNative(java.lang.String,java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003esetFlavorsForNative(java.lang.String, java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eflav\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e key for the mappings",
          "\u003ccode\u003enatives\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e native values for the mappings"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if flav or natives is \n\u003ccode\u003enull\u003c/code\u003e or if natives contains \n\u003ccode\u003enull\u003c/code\u003e elements"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nat"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flav"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addFlavorForUnencodedNative",
      "comment": "Adds a mapping from a single String native to a single DataFlavor. Unlike getFlavorsForNative, the mapping will only be established in one direction, and the native will not be encoded. To establish a two-way mapping, call addUnencodedNativeForFlavor as well. The new mapping will be of lower priority than any existing mapping. This method has no effect if a mapping from the specified String native to the specified or equal DataFlavor already exists.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#addUnencodedNativeForFlavor(java.awt.datatransfer.DataFlavor,java.lang.String)\"\u003e\u003ccode\u003eaddUnencodedNativeForFlavor(java.awt.datatransfer.DataFlavor, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enat\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e native key for the mapping",
          "\u003ccode\u003eflav\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e value for the mapping"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enat\u003c/code\u003e or \n\u003ccode\u003eflav\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nat"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "flavors"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFlavorsForNative",
      "comment": "Discards the current mappings for the specified String native, and creates new mappings to the specified DataFlavors. Unlike getFlavorsForNative, the mappings will only be established in one direction, and the natives need not be encoded. To establish two-way mappings, call setNativesForFlavor as well. The first DataFlavor in the array will represent the highest priority mapping. Subsequent DataFlavors will represent mappings of decreasing priority. If the array contains several elements that reference equal DataFlavors, this method will establish new mappings for the first of those elements and ignore the rest of them. It is recommended that client code not reset mappings established by the data transfer subsystem. This method should only be used for application-level mappings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/SystemFlavorMap.html#setNativesForFlavor(java.awt.datatransfer.DataFlavor,java.lang.String%5B%5D)\"\u003e\u003ccode\u003esetNativesForFlavor(java.awt.datatransfer.DataFlavor, java.lang.String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enat\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e native key for the mappings",
          "\u003ccode\u003eflavors\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e values for the mappings"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enat\u003c/code\u003e or \n\u003ccode\u003eflavors\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or if \n\u003ccode\u003eflavors\u003c/code\u003e contains \n\u003ccode\u003enull\u003c/code\u003e elements"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mimeType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "encodeJavaMIMEType",
      "comment": "Encodes a MIME type for use as a String native. The format of an encoded representation of a MIME type is implementation-dependent. The only restrictions are: The encoded representation is null if and only if the MIME type String is null The encoded representations for two non-null MIME type Strings are equal if and only if these Strings are equal according to String.equals(Object) The reference implementation of this method returns the specified MIME type String prefixed with JAVA_DATAFLAVOR:.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emimeType\u003c/code\u003e - the MIME type to encode"
        ],
        "return": [
          "the encoded \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003emimeType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flav"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "encodeDataFlavor",
      "comment": "Encodes a DataFlavor for use as a String native. The format of an encoded DataFlavor is implementation-dependent. The only restrictions are: The encoded representation is null if and only if the specified DataFlavor is null or its MIME type String is null The encoded representations for two non-null DataFlavors with non-null MIME type Strings are equal if and only if the MIME type Strings of these DataFlavors are equal according to String.equals(Object) The reference implementation of this method returns the MIME type String of the specified DataFlavor prefixed with JAVA_DATAFLAVOR:.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflav\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e to encode"
        ],
        "return": [
          "the encoded \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003eflav\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or has a \n\u003ccode\u003enull\u003c/code\u003e MIME type"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaMIMEType",
      "comment": "Returns whether the specified String is an encoded Java MIME type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to test"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eString\u003c/code\u003e is encoded; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decodeJavaMIMEType",
      "comment": "Decodes a String native for use as a Java MIME type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enat\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode"
        ],
        "return": [
          "the decoded Java MIME type, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003enat\u003c/code\u003e is not an encoded \n\u003ccode\u003eString\u003c/code\u003e native"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decodeDataFlavor",
      "comment": "Decodes a String native for use as a DataFlavor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enat\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class of the data flavor is not loaded"
        ],
        "return": [
          "the decoded \n\u003ccode\u003eDataFlavor\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003enat\u003c/code\u003e is not an encoded \n\u003ccode\u003eString\u003c/code\u003e native"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.datatransfer.SystemFlavorMap",
  "comment": "The SystemFlavorMap is a configurable map between \"natives\" (Strings), which correspond to platform-specific data formats, and \"flavors\" (DataFlavors), which correspond to platform-independent MIME types. This mapping is used by the data transfer subsystem to transfer data between Java and native applications, and between Java applications in separate VMs.",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}