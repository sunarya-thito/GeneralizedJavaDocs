{
  "packageName": "java.awt.datatransfer",
  "simpleName": "DataFlavor",
  "moduleName": "java.datatransfer",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "stringFlavor",
      "comment": "The DataFlavor representing a Java Unicode String class, where:      representationClass \u003d java.lang.String\n     mimeType            \u003d \"application/x-java-serialized-object\"",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "imageFlavor",
      "comment": "The DataFlavor representing a Java Image class, where:      representationClass \u003d java.awt.Image\n     mimeType            \u003d \"image/x-java-image\"\n Will be null if java.awt.Image is not visible, the java.desktop module is not loaded, or the java.desktop module is not in the run-time image.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "plainTextFlavor",
      "comment": "The DataFlavor representing plain text with Unicode encoding, where:      representationClass \u003d InputStream\n     mimeType            \u003d \"text/plain; charset\u003dunicode\"\n This DataFlavor has been deprecated because: Its representation is an InputStream, an 8-bit based representation, while Unicode is a 16-bit character set The charset \"unicode\" is not well-defined. \"unicode\" implies a particular platform\u0027s implementation of Unicode, not a cross-platform implementation",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "javaSerializedObjectMimeType",
      "comment": "A MIME Content-Type of application/x-java-serialized-object represents a graph of Java object(s) that have been made persistent. The representation class associated with this DataFlavor identifies the Java type of an object returned as a reference from an invocation java.awt.datatransfer.getTransferData.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.datatransfer.DataFlavor.javaSerializedObjectMimeType\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "javaFileListFlavor",
      "comment": "To transfer a list of files to/from Java (and the underlying platform) a DataFlavor of this type/subtype and representation class of java.util.List is used. Each element of the list is required/guaranteed to be of type java.io.File.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "javaJVMLocalObjectMimeType",
      "comment": "To transfer a reference to an arbitrary Java object reference that has no associated MIME Content-type, across a Transferable interface WITHIN THE SAME JVM, a DataFlavor with this type/subtype is used, with a representationClass equal to the type of the class/interface being passed across the Transferable. The object reference returned from Transferable.getTransferData for a DataFlavor with this MIME Content-Type is required to be an instance of the representation Class of the DataFlavor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.datatransfer.DataFlavor.javaJVMLocalObjectMimeType\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "javaRemoteObjectMimeType",
      "comment": "In order to pass a live link to a Remote object via a Drag and Drop ACTION_LINK operation a Mime Content Type of application/x-java-remote-object should be used, where the representation class of the DataFlavor represents the type of the Remote interface to be transferred.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.datatransfer.DataFlavor.javaRemoteObjectMimeType\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 9,
      "name": "selectionHtmlFlavor",
      "comment": "Represents a piece of an HTML markup. The markup consists of the part selected on the source side. Therefore some tags in the markup may be unpaired. If the flavor is used to represent the data in a Transferable instance, no additional changes will be made. This DataFlavor instance represents the same HTML markup as DataFlavor instances which content MIME type does not contain document parameter and representation class is the String class.      representationClass \u003d String\n     mimeType            \u003d \"text/html\"",
      "tagMap": {
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 9,
      "name": "fragmentHtmlFlavor",
      "comment": "Represents a piece of an HTML markup. If possible, the markup received from a native system is supplemented with pair tags to be a well-formed HTML markup. If the flavor is used to represent the data in a Transferable instance, no additional changes will be made.      representationClass \u003d String\n     mimeType            \u003d \"text/html\"",
      "tagMap": {
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 9,
      "name": "allHtmlFlavor",
      "comment": "Represents a piece of an HTML markup. If possible, the markup received from a native system is supplemented with additional tags to make up a well-formed HTML document. If the flavor is used to represent the data in a Transferable instance, no additional changes will be made.      representationClass \u003d String\n     mimeType            \u003d \"text/html\"",
      "tagMap": {
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "fallback"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 28,
      "name": "tryToLoadClass",
      "comment": "Tries to load a class from: the bootstrap loader, the system loader, the context loader (if one is present) and finally the loader specified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclassName\u003c/code\u003e - the name of the class to be loaded",
          "\u003ccode\u003efallback\u003c/code\u003e - the fallback loader"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if class is not found"
        ],
        "return": [
          "the class loaded"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "String representation of this DataFlavor and its parameters. The resulting String contains the name of the DataFlavor class, this flavor\u0027s MIME type, and its representation class. If this flavor has a primary MIME type of \"text\", supports the charset parameter, and has an encoded representation, the flavor\u0027s charset is also included. See selectBestTextFlavor for a list of text flavors which support the charset parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "string representation of this \n\u003ccode\u003eDataFlavor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTextPlainUnicodeFlavor",
      "comment": "Returns a DataFlavor representing plain text with Unicode encoding, where:      representationClass \u003d java.io.InputStream\n     mimeType            \u003d \"text/plain;\n                            charset\u003d\u003cplatform default Unicode encoding\u003e\"",
      "tagMap": {
        "implNote": [
          "Oracle\u0027s implementation for Microsoft Windows and macOS uses the encoding \n\u003ccode\u003eutf-16le\u003c/code\u003e. Oracle\u0027s implementation for Solaris and Linux uses the encoding \n\u003ccode\u003eiso-10646-ucs-2\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eDataFlavor\u003c/code\u003e representing plain text with Unicode encoding"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "availableFlavors"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "selectBestTextFlavor",
      "comment": "Selects the best text DataFlavor from an array of DataFlavors. Only DataFlavor.stringFlavor, and equivalent flavors, and flavors that have a primary MIME type of \"text\", are considered for selection. Flavors are first sorted by their MIME types in the following order: \"text/sgml\" \"text/xml\" \"text/html\" \"text/rtf\" \"text/enriched\" \"text/richtext\" \"text/uri-list\" \"text/tab-separated-values\" \"text/t140\" \"text/rfc822-headers\" \"text/parityfec\" \"text/directory\" \"text/css\" \"text/calendar\" \"application/x-java-serialized-object\" \"text/plain\" \"text/\u003cother\u003e\" For example, \"text/sgml\" will be selected over \"text/html\", and DataFlavor.stringFlavor will be chosen over DataFlavor.plainTextFlavor. If two or more flavors share the best MIME type in the array, then that MIME type will be checked to see if it supports the charset parameter. The following MIME types support, or are treated as though they support, the charset parameter: \"text/sgml\" \"text/xml\" \"text/html\" \"text/enriched\" \"text/richtext\" \"text/uri-list\" \"text/directory\" \"text/css\" \"text/calendar\" \"application/x-java-serialized-object\" \"text/plain\" The following MIME types do not support, or are treated as though they do not support, the charset parameter: \"text/rtf\" \"text/tab-separated-values\" \"text/t140\" \"text/rfc822-headers\" \"text/parityfec\" For \"text/\u003cother\u003e\" MIME types, the first time the JRE needs to determine whether the MIME type supports the charset parameter, it will check whether the parameter is explicitly listed in an arbitrarily chosen DataFlavor which uses that MIME type. If so, the JRE will assume from that point on that the MIME type supports the charset parameter and will not check again. If the parameter is not explicitly listed, the JRE will assume from that point on that the MIME type does not support the charset parameter and will not check again. Because this check is performed on an arbitrarily chosen DataFlavor, developers must ensure that all DataFlavors with a \"text/\u003cother\u003e\" MIME type specify the charset parameter if it is supported by that MIME type. Developers should never rely on the JRE to substitute the platform\u0027s default charset for a \"text/\u003cother\u003e\" DataFlavor. Failure to adhere to this restriction will lead to undefined behavior. If the best MIME type in the array does not support the charset parameter, the flavors which share that MIME type will then be sorted by their representation classes in the following order: java.io.InputStream, java.nio.ByteBuffer, [B, \u003call others\u003e. If two or more flavors share the best representation class, or if no flavor has one of the three specified representations, then one of those flavors will be chosen non-deterministically. If the best MIME type in the array does support the charset parameter, the flavors which share that MIME type will then be sorted by their representation classes in the following order: java.io.Reader, java.lang.String, java.nio.CharBuffer, [C, \u003call others\u003e. If two or more flavors share the best representation class, and that representation is one of the four explicitly listed, then one of those flavors will be chosen non-deterministically. If, however, no flavor has one of the four specified representations, the flavors will then be sorted by their charsets. Unicode charsets, such as \"UTF-16\", \"UTF-8\", \"UTF-16BE\", \"UTF-16LE\", and their aliases, are considered best. After them, the platform default charset and its aliases are selected. \"US-ASCII\" and its aliases are worst. All other charsets are chosen in alphabetical order, but only charsets supported by this implementation of the Java platform will be considered. If two or more flavors share the best charset, the flavors will then again be sorted by their representation classes in the following order: java.io.InputStream, java.nio.ByteBuffer, [B, \u003call others\u003e. If two or more flavors share the best representation class, or if no flavor has one of the three specified representations, then one of those flavors will be chosen non-deterministically.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eavailableFlavors\u003c/code\u003e - an array of available \n\u003ccode\u003eDataFlavor\u003c/code\u003es"
        ],
        "return": [
          "the best (highest fidelity) flavor according to the rules specified above, or \n\u003ccode\u003enull\u003c/code\u003e, if \n\u003ccode\u003eavailableFlavors\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, has zero length, or contains no text flavors"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.datatransfer.UnsupportedFlavorException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.Transferable",
            "type": "Class"
          },
          "field": {
            "name": "transferable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReaderForText",
      "comment": "Gets a Reader for a text flavor, decoded, if necessary, for the expected charset (encoding). The supported representation classes are java.io.Reader, java.lang.String, java.nio.CharBuffer, [C, java.io.InputStream, java.nio.ByteBuffer, and [B. Because text flavors which do not support the charset parameter are encoded in a non-standard format, this method should not be called for such flavors. However, in order to maintain backward-compatibility, if this method is called for such a flavor, this method will treat the flavor as though it supports the charset parameter and attempt to decode it accordingly. See selectBestTextFlavor for a list of text flavors which do not support the charset parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etransferable\u003c/code\u003e - the \n\u003ccode\u003eTransferable\u003c/code\u003e whose data will be requested in this flavor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the representation class is not one of the seven listed above",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eTransferable\u003c/code\u003e has \n\u003ccode\u003enull\u003c/code\u003e data",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eTransferable\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - if this flavor\u0027s representation is \n\u003ccode\u003ejava.io.InputStream\u003c/code\u003e, \n\u003ccode\u003ejava.nio.ByteBuffer\u003c/code\u003e, or \n\u003ccode\u003e[B\u003c/code\u003e and this flavor\u0027s encoding is not supported by this implementation of the Java platform",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/UnsupportedFlavorException.html\" title\u003d\"class in java.awt.datatransfer\"\u003eUnsupportedFlavorException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eTransferable\u003c/code\u003e does not support this flavor",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the data cannot be read because of an I/O error"
        ],
        "return": [
          "a \n\u003ccode\u003eReader\u003c/code\u003e to read the \n\u003ccode\u003eTransferable\u003c/code\u003e\u0027s data"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMimeType",
      "comment": "Returns the MIME type string for this DataFlavor.",
      "tagMap": {
        "return": [
          "the MIME type string for this flavor"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRepresentationClass",
      "comment": "Returns the Class which objects supporting this DataFlavor will return when this DataFlavor is requested.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e which objects supporting this \n\u003ccode\u003eDataFlavor\u003c/code\u003e will return when this \n\u003ccode\u003eDataFlavor\u003c/code\u003e is requested"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHumanPresentableName",
      "comment": "Returns the human presentable name for the data format that this DataFlavor represents. This name would be localized for different countries.",
      "tagMap": {
        "return": [
          "the human presentable name for the data format that this \n\u003ccode\u003eDataFlavor\u003c/code\u003e represents"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrimaryType",
      "comment": "Returns the primary MIME type for this DataFlavor.",
      "tagMap": {
        "return": [
          "the primary MIME type of this \n\u003ccode\u003eDataFlavor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubType",
      "comment": "Returns the sub MIME type of this DataFlavor.",
      "tagMap": {
        "return": [
          "the Sub MIME type of this \n\u003ccode\u003eDataFlavor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "paramName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameter",
      "comment": "Returns the human presentable name for this DataFlavor if paramName equals \"humanPresentableName\". Otherwise returns the MIME type value associated with paramName.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparamName\u003c/code\u003e - the parameter name requested"
        ],
        "return": [
          "the value of the name parameter, or \n\u003ccode\u003enull\u003c/code\u003e if there is no associated value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "humanPresentableName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHumanPresentableName",
      "comment": "Sets the human presentable name for the data format that this DataFlavor represents. This name would be localized for different countries.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehumanPresentableName\u003c/code\u003e - the new human presentable name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is reflexive: for any non-null reference value x, x.equals(x) should return true. It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x \u003d\u003d y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. The equals comparison for the DataFlavor class is implemented as follows: Two DataFlavors are considered equal if and only if their MIME primary type and subtype and representation class are equal. Additionally, if the primary type is \"text\", the subtype denotes a text flavor which supports the charset parameter, and the representation class is not java.io.Reader, java.lang.String, java.nio.CharBuffer, or [C, the charset parameter must also be equal. If a charset is not explicitly specified for one or both DataFlavors, the platform default encoding is assumed. See selectBestTextFlavor for a list of text flavors which support the charset parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to compare with \n\u003ccode\u003ethis\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ethat\u003c/code\u003e is equivalent to this \n\u003ccode\u003eDataFlavor\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "that"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "This method has the same behavior as equals(Object). The only difference being that it takes a DataFlavor instance as a parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e to compare with \n\u003ccode\u003ethis\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ethat\u003c/code\u003e is equivalent to this \n\u003ccode\u003eDataFlavor\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares only the mimeType against the passed in String and representationClass is not considered in the comparison. If representationClass needs to be compared, then equals(new DataFlavor(s)) may be used.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003emimeType\u003c/code\u003e to compare"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the String (MimeType) is equal; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or if \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns hash code for this DataFlavor. For two equal DataFlavors, hash codes are equal. For the String that matches DataFlavor.equals(String), it is not guaranteed that DataFlavor\u0027s hash code is equal to the hash code of the String.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code for this \n\u003ccode\u003eDataFlavor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "that"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "match",
      "comment": "Identical to equals(DataFlavor).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e to compare with \n\u003ccode\u003ethis\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ethat\u003c/code\u003e is equivalent to this \n\u003ccode\u003eDataFlavor\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mimeType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMimeTypeEqual",
      "comment": "Returns whether the string representation of the MIME type passed in is equivalent to the MIME type of this DataFlavor. Parameters are not included in the comparison.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emimeType\u003c/code\u003e - the string representation of the MIME type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if mimeType is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the string representation of the MIME type passed in is equivalent to the MIME type of this \n\u003ccode\u003eDataFlavor\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "dataFlavor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isMimeTypeEqual",
      "comment": "Compares the mimeType of two DataFlavor objects. No parameters are considered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataFlavor\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eMimeType\u003c/code\u003es are equal, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMimeTypeSerializedObject",
      "comment": "Does the DataFlavor represent a serialized object?",
      "tagMap": {
        "return": [
          "whether or not a serialized object is represented"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDefaultRepresentationClass",
      "comment": "Returns the default representation class.",
      "tagMap": {
        "return": [
          "the default representation class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDefaultRepresentationClassAsString",
      "comment": "Returns the name of the default representation class.",
      "tagMap": {
        "return": [
          "the name of the default representation class"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepresentationClassInputStream",
      "comment": "Does the DataFlavor represent a java.io.InputStream?",
      "tagMap": {
        "return": [
          "whether or not this \n\u003ccode\u003eDataFlavor\u003c/code\u003e represent a \n\u003ccode\u003ejava.io.InputStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepresentationClassReader",
      "comment": "Returns whether the representation class for this DataFlavor is java.io.Reader or a subclass thereof.",
      "tagMap": {
        "return": [
          "whether or not the representation class for this \n\u003ccode\u003eDataFlavor\u003c/code\u003e is \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e or a subclass thereof"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepresentationClassCharBuffer",
      "comment": "Returns whether the representation class for this DataFlavor is java.nio.CharBuffer or a subclass thereof.",
      "tagMap": {
        "return": [
          "whether or not the representation class for this \n\u003ccode\u003eDataFlavor\u003c/code\u003e is \n\u003ccode\u003ejava.nio.CharBuffer\u003c/code\u003e or a subclass thereof"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepresentationClassByteBuffer",
      "comment": "Returns whether the representation class for this DataFlavor is java.nio.ByteBuffer or a subclass thereof.",
      "tagMap": {
        "return": [
          "whether or not the representation class for this \n\u003ccode\u003eDataFlavor\u003c/code\u003e is \n\u003ccode\u003ejava.nio.ByteBuffer\u003c/code\u003e or a subclass thereof"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepresentationClassSerializable",
      "comment": "Returns true if the representation class can be serialized.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the representation class can be serialized"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepresentationClassRemote",
      "comment": "Returns true if the representation class is Remote.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the representation class is \n\u003ccode\u003eRemote\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFlavorSerializedObjectType",
      "comment": "Returns true if the DataFlavor specified represents a serialized object.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eDataFlavor\u003c/code\u003e specified represents a Serialized Object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFlavorRemoteObjectType",
      "comment": "Returns true if the DataFlavor specified represents a remote object.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eDataFlavor\u003c/code\u003e specified represents a Remote Object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFlavorJavaFileListType",
      "comment": "Returns true if the DataFlavor specified represents a list of file objects.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eDataFlavor\u003c/code\u003e specified represents a \n\u003ccode\u003ejava.util.List\u003c/code\u003e of \n\u003ccode\u003ejava.io.File\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFlavorTextType",
      "comment": "Returns whether this DataFlavor is a valid text flavor for this implementation of the Java platform. Only flavors equivalent to DataFlavor.stringFlavor and DataFlavors with a primary MIME type of \"text\" can be valid text flavors. If this flavor supports the charset parameter, it must be equivalent to DataFlavor.stringFlavor, or its representation must be java.io.Reader, java.lang.String, java.nio.CharBuffer, [C, java.io.InputStream, java.nio.ByteBuffer, or [B. If the representation is java.io.InputStream, java.nio.ByteBuffer, or [B, then this flavor\u0027s charset parameter must be supported by this implementation of the Java platform. If a charset is not specified, then the platform default charset, which is always supported, is assumed. If this flavor does not support the charset parameter, its representation must be java.io.InputStream, java.nio.ByteBuffer, or [B. See selectBestTextFlavor for a list of text flavors which support the charset parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eDataFlavor\u003c/code\u003e is a valid text flavor as described above; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectOutput",
            "type": "Class"
          },
          "field": {
            "name": "os"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeExternal",
      "comment": "Serializes this DataFlavor.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html#writeExternal(java.io.ObjectOutput)\"\u003ewriteExternal\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html\" title\u003d\"interface in java.io\"\u003eExternalizable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eos\u003c/code\u003e - the stream to write the object to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - Includes any I/O exceptions that may occur"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectInput",
            "type": "Class"
          },
          "field": {
            "name": "is"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readExternal",
      "comment": "Restores this DataFlavor from a Serialized state.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html#readExternal(java.io.ObjectInput)\"\u003ereadExternal\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html\" title\u003d\"interface in java.io\"\u003eExternalizable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eis\u003c/code\u003e - the stream to read data from in order to restore the object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if I/O errors occur",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - If the class for an object being restored cannot be found."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.CloneNotSupportedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns a clone of this DataFlavor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CloneNotSupportedException.html\" title\u003d\"class in java.lang\"\u003eCloneNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the object\u0027s class does not support the \n\u003ccode\u003eCloneable\u003c/code\u003e interface. Subclasses that override the \n\u003ccode\u003eclone\u003c/code\u003e method can also throw this exception to indicate that an instance cannot be cloned."
        ],
        "return": [
          "a clone of this \n\u003ccode\u003eDataFlavor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "normalizeMimeTypeParameter",
      "comment": "Called on DataFlavor for every MIME Type parameter to allow DataFlavor subclasses to handle special parameters like the text/plain charset parameters, whose values are case insensitive. (MIME type parameter values are supposed to be case sensitive. This method is called for each parameter name/value pair and should return the normalized representation of the parameterValue.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the parameter name",
          "\u003ccode\u003eparameterValue\u003c/code\u003e - the parameter value"
        ],
        "return": [
          "the parameter value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mimeType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "normalizeMimeType",
      "comment": "Called for each MIME type string to give DataFlavor subtypes the opportunity to change how the normalization of MIME types is accomplished. One possible use would be to add default parameter/value pairs in cases where none are present in the MIME type string passed in.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emimeType\u003c/code\u003e - the mime type"
        ],
        "return": [
          "the mime type"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new DataFlavor. This constructor is provided only for the purpose of supporting the Externalizable interface. It is not intended for public (client) use.",
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "representationClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "humanPresentableName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DataFlavor that represents a Java class. The returned DataFlavor will have the following characteristics:     representationClass \u003d representationClass\n    mimeType            \u003d application/x-java-serialized-object",
      "tagMap": {
        "param": [
          "\u003ccode\u003erepresentationClass\u003c/code\u003e - the class used to transfer data in this flavor",
          "\u003ccode\u003ehumanPresentableName\u003c/code\u003e - the human-readable string used to identify this flavor; if this parameter is \n\u003ccode\u003enull\u003c/code\u003e then the value of the MIME Content Type is used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erepresentationClass\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mimeType"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "humanPresentableName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DataFlavor that represents a MimeType. The returned DataFlavor will have the following characteristics: If the mimeType is \"application/x-java-serialized-object; class\u003d\u003crepresentation class\u003e\", the result is the same as calling new DataFlavor(Class.forName(\u003crepresentation class\u003e). Otherwise:      representationClass \u003d InputStream\n     mimeType            \u003d mimeType",
      "tagMap": {
        "param": [
          "\u003ccode\u003emimeType\u003c/code\u003e - the string used to identify the MIME type for this flavor; if the \n\u003ccode\u003emimeType\u003c/code\u003e does not specify a \"class\u003d\" parameter, or if the class is not successfully loaded, then an \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown",
          "\u003ccode\u003ehumanPresentableName\u003c/code\u003e - the human-readable string used to identify this flavor; if this parameter is \n\u003ccode\u003enull\u003c/code\u003e then the value of the MIME Content Type is used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emimeType\u003c/code\u003e is invalid or if the class is not successfully loaded",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emimeType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mimeType"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "humanPresentableName"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "classLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DataFlavor that represents a MimeType. The returned DataFlavor will have the following characteristics: If the mimeType is \"application/x-java-serialized-object; class\u003d\u003crepresentation class\u003e\", the result is the same as calling new DataFlavor(Class.forName(\u003crepresentation class\u003e). Otherwise:      representationClass \u003d InputStream\n     mimeType            \u003d mimeType",
      "tagMap": {
        "param": [
          "\u003ccode\u003emimeType\u003c/code\u003e - the string used to identify the MIME type for this flavor",
          "\u003ccode\u003ehumanPresentableName\u003c/code\u003e - the human-readable string used to identify this flavor",
          "\u003ccode\u003eclassLoader\u003c/code\u003e - the class loader to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class is not loaded",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emimeType\u003c/code\u003e is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emimeType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mimeType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DataFlavor from a mimeType string. The string can specify a \"class\u003d\u003cfully specified Java class name\u003e\" parameter to create a DataFlavor with the desired representation class. If the string does not contain \"class\u003d\" parameter, java.io.InputStream is used as default.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emimeType\u003c/code\u003e - the string used to identify the MIME type for this flavor; if the class specified by \"class\u003d\" parameter is not successfully loaded, then a \n\u003ccode\u003eClassNotFoundException\u003c/code\u003e is thrown"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class is not loaded",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emimeType\u003c/code\u003e is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emimeType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.datatransfer.DataFlavor",
  "comment": "A \n\u003ccode\u003eDataFlavor\u003c/code\u003e provides meta information about data. \n\u003ccode\u003eDataFlavor\u003c/code\u003e is typically used to access data on the clipboard, or during a drag and drop operation. \n\u003cp\u003e An instance of \u003ccode\u003eDataFlavor\u003c/code\u003e encapsulates a content type as defined in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2045.txt\"\u003eRFC 2045\u003c/a\u003e and \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2046.txt\"\u003eRFC 2046\u003c/a\u003e. A content type is typically referred to as a MIME type. \u003c/p\u003e\n\u003cp\u003e A content type consists of a media type (referred to as the primary type), a subtype, and optional parameters. See \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2045.txt\"\u003eRFC 2045\u003c/a\u003e for details on the syntax of a MIME type. \u003c/p\u003e\n\u003cp\u003e The JRE data transfer implementation interprets the parameter \"class\" of a MIME type as \u003cb\u003ea representation class\u003c/b\u003e. The representation class reflects the class of the object being transferred. In other words, the representation class is the type of object returned by \u003ca href\u003d\"Transferable.html#getTransferData(java.awt.datatransfer.DataFlavor)\"\u003e\u003ccode\u003eTransferable.getTransferData(java.awt.datatransfer.DataFlavor)\u003c/code\u003e\u003c/a\u003e. For example, the MIME type of \u003ca href\u003d\"#imageFlavor\"\u003e\u003ccode\u003eimageFlavor\u003c/code\u003e\u003c/a\u003e is \u003ccode\u003e\"image/x-java-image;class\u003djava.awt.Image\"\u003c/code\u003e, the primary type is \u003ccode\u003eimage\u003c/code\u003e, the subtype is \u003ccode\u003ex-java-image\u003c/code\u003e, and the representation class is \u003ccode\u003ejava.awt.Image\u003c/code\u003e. When \u003ccode\u003egetTransferData\u003c/code\u003e is invoked with a \u003ccode\u003eDataFlavor\u003c/code\u003e of \u003ccode\u003eimageFlavor\u003c/code\u003e, an instance of \u003ccode\u003ejava.awt.Image\u003c/code\u003e is returned. It\u0027s important to note that \u003ccode\u003eDataFlavor\u003c/code\u003e does no error checking against the representation class. It is up to consumers of \u003ccode\u003eDataFlavor\u003c/code\u003e, such as \u003ccode\u003eTransferable\u003c/code\u003e, to honor the representation class. \u003cbr\u003e Note, if you do not specify a representation class when creating a \u003ccode\u003eDataFlavor\u003c/code\u003e, the default representation class is used. See appropriate documentation for \u003ccode\u003eDataFlavor\u003c/code\u003e\u0027s constructors. \u003c/p\u003e\n\u003cp\u003e Also, \u003ccode\u003eDataFlavor\u003c/code\u003e instances with the \"text\" primary MIME type may have a \"charset\" parameter. Refer to \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2046.txt\"\u003eRFC 2046\u003c/a\u003e and \u003ca href\u003d\"#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)\"\u003e\u003ccode\u003eselectBestTextFlavor(java.awt.datatransfer.DataFlavor[])\u003c/code\u003e\u003c/a\u003e for details on \"text\" MIME types and the \"charset\" parameter. \u003c/p\u003e\n\u003cp\u003e Equality of \u003ccode\u003eDataFlavors\u003c/code\u003e is determined by the primary type, subtype, and representation class. Refer to \u003ca href\u003d\"#equals(java.awt.datatransfer.DataFlavor)\"\u003e\u003ccode\u003eequals(DataFlavor)\u003c/code\u003e\u003c/a\u003e for details. When determining equality, any optional parameters are ignored. For example, the following produces two \u003ccode\u003eDataFlavors\u003c/code\u003e that are considered identical: \u003c/p\u003e\n\u003cpre\u003e   DataFlavor flavor1 \u003d new DataFlavor(Object.class, \"X-test/test; class\u003d\u0026lt;java.lang.Object\u0026gt;; foo\u003dbar\");\n   DataFlavor flavor2 \u003d new DataFlavor(Object.class, \"X-test/test; class\u003d\u0026lt;java.lang.Object\u0026gt;; x\u003dy\");\n   // The following returns true.\n   flavor1.equals(flavor2);\n \u003c/pre\u003e As mentioned, \n\u003ccode\u003eflavor1\u003c/code\u003e and \n\u003ccode\u003eflavor2\u003c/code\u003e are considered identical. As such, asking a \n\u003ccode\u003eTransferable\u003c/code\u003e for either \n\u003ccode\u003eDataFlavor\u003c/code\u003e returns the same results. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For more information on using data transfer with Swing see the \u003ca href\u003d\"http://docs.oracle.com/javase/tutorial/uiswing/dnd/index.html\"\u003eHow to Use Drag and Drop and Data Transfer\u003c/a\u003e, section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.datatransfer.DataFlavor\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}