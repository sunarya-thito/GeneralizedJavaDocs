{
  "packageName": "io.papermc.paper.world.generation",
  "simpleName": "ProtoWorld",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the block at (x, y, z) to the provided BlockData.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate in this ProtoWorld",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate in this ProtoWorld",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate in this ProtoWorld",
          "\u003ccode\u003edata\u003c/code\u003e - \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/data/BlockData.html\" title\u003d\"interface in org.bukkit.block.data\"\u003e\u003ccode\u003eBlockData\u003c/code\u003e\u003c/a\u003e to set the block at the provided coordinates to."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vector"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the block at a vector location to the provided BlockData.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evector\u003c/code\u003e - \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the position of the block to set.",
          "\u003ccode\u003edata\u003c/code\u003e - \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/data/BlockData.html\" title\u003d\"interface in org.bukkit.block.data\"\u003e\u003ccode\u003eBlockData\u003c/code\u003e\u003c/a\u003e to set the block at the provided coordinates to."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.BlockState",
            "type": "Class"
          },
          "field": {
            "name": "state"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockState",
      "comment": "Sets the BlockState at a location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate.",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate.",
          "\u003ccode\u003estate\u003c/code\u003e - The block state."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.BlockState",
            "type": "Class"
          },
          "field": {
            "name": "state"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockState",
      "comment": "Sets the BlockState at a location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to set block state.",
          "\u003ccode\u003estate\u003c/code\u003e - The block state."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockState",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockState",
      "comment": "Gets the BlockState at a location.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate.",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate."
        ],
        "return": [
          "The block state."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockState",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockState",
      "comment": "Gets the BlockState at a location.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to get block state from."
        ],
        "return": [
          "The block state."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "scheduleBlockUpdate",
      "comment": "Schedule a block update at (x, y, z).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate in this ProtoWorld",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate in this ProtoWorld",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate in this ProtoWorld"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "scheduleBlockUpdate",
      "comment": "Schedule a block update at a vector location",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the position of the block to update."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "scheduleFluidUpdate",
      "comment": "Schedule a fluid update at (x, y, z).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate in this ProtoWorld",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate in this ProtoWorld",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate in this ProtoWorld"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "scheduleFluidUpdate",
      "comment": "Schedule a fluid update at a vector location",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the position of the block to update."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Get the World object this ProtoWorld represents. Do not attempt to read from/write to this world! Doing so during generation will cause a deadlock!",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld\u003c/code\u003e\u003c/a\u003e object that this ProtoWorld represents."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Get the BlockData of the block at the provided coordinates.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate in this ProtoWorld",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate in this ProtoWorld",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate in this ProtoWorld"
        ],
        "return": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/data/BlockData.html\" title\u003d\"interface in org.bukkit.block.data\"\u003e\u003ccode\u003eBlockData\u003c/code\u003e\u003c/a\u003e at the coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vector"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Get the BlockData of the block at the provided coordinates.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evector\u003c/code\u003e - \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the position of the block to get."
        ],
        "return": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/data/BlockData.html\" title\u003d\"interface in org.bukkit.block.data\"\u003e\u003ccode\u003eBlockData\u003c/code\u003e\u003c/a\u003e at the coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCenterChunkX",
      "comment": "Get the X-coordinate of the chunk in the center of this ProtoWorld",
      "tagMap": {
        "return": [
          "The center chunk\u0027s X coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCenterBlockX",
      "comment": "Get the X-coordinate of the block in the center of this ProtoWorld",
      "tagMap": {
        "return": [
          "The center chunk\u0027s X coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCenterChunkZ",
      "comment": "Get the Z-coordinate of the chunk in the center of this ProtoWorld",
      "tagMap": {
        "return": [
          "The center chunk\u0027s Z coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCenterBlockZ",
      "comment": "Get the Z-coordinate of the block in the center of this ProtoWorld",
      "tagMap": {
        "return": [
          "The center chunk\u0027s Z coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.EntityType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnEntity",
      "comment": "Creates an entity at the location represented by the given Vector",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity",
          "\u003ccode\u003etype\u003c/code\u003e - The entity to spawn"
        ],
        "return": [
          "Resulting Entity of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Spawn an entity of a specific class at location represented by the given Vector",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity at",
          "\u003ccode\u003eclazz\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is null or the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e requested cannot be spawned"
        ],
        "return": [
          "An instance of the spawned \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason",
            "type": "Class"
          },
          "field": {
            "name": "reason"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Spawn an entity of a specific class at location represented by the given Vector",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity at",
          "\u003ccode\u003eclazz\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn",
          "\u003ccode\u003ereason\u003c/code\u003e - The reason for the entity\u0027s spawn."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is null or the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e requested cannot be spawned"
        ],
        "return": [
          "An instance of the spawned \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "function"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Spawn an entity of a specific class at the location represented by the given Vector, with the supplied function run before the entity is added to the world. Note that when the function is run, the entity will not be actually in the world. Any operation involving such as teleporting the entity is undefined until after this function returns.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity at",
          "\u003ccode\u003eclazz\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn",
          "\u003ccode\u003efunction\u003c/code\u003e - The function to be run before the entity is spawned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is null or the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e requested cannot be spawned"
        ],
        "return": [
          "An instance of the spawned \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason",
            "type": "Class"
          },
          "field": {
            "name": "reason"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "function"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Spawn an entity of a specific class at the location represented by the given Vector, with the supplied function run before the entity is added to the world. Note that when the function is run, the entity will not be actually in the world. Any operation involving such as teleporting the entity is undefined until after this function returns.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity at",
          "\u003ccode\u003eclazz\u003c/code\u003e - The class of the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn",
          "\u003ccode\u003ereason\u003c/code\u003e - The reason for the entity\u0027s spawn.",
          "\u003ccode\u003efunction\u003c/code\u003e - The function to be run before the entity is spawned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is null or the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e requested cannot be spawned"
        ],
        "return": [
          "An instance of the spawned \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.EntityType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason",
            "type": "Class"
          },
          "field": {
            "name": "reason"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnEntity",
      "comment": "Creates an entity at the location represented by the given Vector",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity",
          "\u003ccode\u003etype\u003c/code\u003e - The entity to spawn",
          "\u003ccode\u003ereason\u003c/code\u003e - The reason for the entity\u0027s spawn."
        ],
        "return": [
          "Resulting Entity of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.EntityType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason",
            "type": "Class"
          },
          "field": {
            "name": "reason"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "org.bukkit.entity.Entity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "function"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnEntity",
      "comment": "Creates an entity at the location represented by the given Vector, with the supplied function run before the entity is added to the world. Note that when the function is run, the entity will not be actually in the world. Any operation involving such as teleporting the entity is undefined until after this function returns.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e representing the location to spawn the entity",
          "\u003ccode\u003etype\u003c/code\u003e - The entity to spawn",
          "\u003ccode\u003ereason\u003c/code\u003e - The reason for the entity\u0027s spawn.",
          "\u003ccode\u003efunction\u003c/code\u003e - The function to be run before the entity is spawned."
        ],
        "return": [
          "Resulting Entity of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "function"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason",
            "type": "Class"
          },
          "field": {
            "name": "reason"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "io.papermc.paper.world.generation.ProtoWorld",
  "comment": "Represents a small grid of chunks in a \n\u003ca href\u003d\"../../../../../org/bukkit/World.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld\u003c/code\u003e\u003c/a\u003e with rudimentary block and entity access, for use during world generation. \n\u003cp\u003e A ProtoWorld is guaranteed read/write access to a 3x3 grid of chunks, but may have access to a grid as large as 17x17. It is safest to assume that there is only read/write access to 3x3 chunks. Some chunks outside of the 3x3 area may be readable but not writable. \u003c/p\u003e\n\u003cp\u003e ProtoWorlds should not be stored! After they are used during chunk generation they should be disposed of.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/generator/BlockPopulator.html#populate(org.bukkit.generator.WorldInfo,java.util.Random,int,int,org.bukkit.generator.LimitedRegion)\"\u003e\u003ccode\u003eBlockPopulator.populate(WorldInfo, Random, int, int, LimitedRegion)\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}