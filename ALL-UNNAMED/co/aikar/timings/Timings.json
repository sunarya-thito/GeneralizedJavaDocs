{
  "packageName": "co.aikar.timings",
  "simpleName": "Timings",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "co.aikar.timings.Timing",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NULL_HANDLER",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "co.aikar.timings.Timing",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Returns a Timing for a plugin corresponding to a name.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to own the Timing",
          "\u003ccode\u003ename\u003c/code\u003e - Name of Timing"
        ],
        "return": [
          "Handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "co.aikar.timings.Timing",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Returns a handler that has a groupHandler timer handler. Parent timers should not have their start/stop methods called directly, as the children will call it for you. Parent Timers are used to group multiple subsections together and get a summary of them combined Parent Handler can not be changed after first call",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to own the Timing",
          "\u003ccode\u003ename\u003c/code\u003e - Name of Timing",
          "\u003ccode\u003egroupHandler\u003c/code\u003e - Parent handler to mirror .start/stop calls to"
        ],
        "return": [
          "Timing Handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "co.aikar.timings.Timing",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofStart",
      "comment": "Returns a Timing object after starting it, useful for Java7 try-with-resources. try (Timing ignored \u003d Timings.ofStart(plugin, someName)) { // timed section }",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to own the Timing",
          "\u003ccode\u003ename\u003c/code\u003e - Name of Timing"
        ],
        "return": [
          "Timing Handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "co.aikar.timings.Timing",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofStart",
      "comment": "Returns a Timing object after starting it, useful for Java7 try-with-resources. try (Timing ignored \u003d Timings.ofStart(plugin, someName, groupHandler)) { // timed section }",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to own the Timing",
          "\u003ccode\u003ename\u003c/code\u003e - Name of Timing",
          "\u003ccode\u003egroupHandler\u003c/code\u003e - Parent handler to mirror .start/stop calls to"
        ],
        "return": [
          "Timing Handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isTimingsEnabled",
      "comment": "Gets whether or not the Spigot Timings system is enabled",
      "annotations": [],
      "tagMap": {
        "return": [
          "Enabled or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setTimingsEnabled",
      "comment": "Sets whether or not the Spigot Timings system should be enabled Calling this will reset timing data.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eenabled\u003c/code\u003e - Should timings be reported"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isVerboseTimingsEnabled",
      "comment": "Sets whether or not the Timings should monitor at Verbose level. When Verbose is disabled, high-frequency timings will not be available.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Enabled or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setVerboseTimingsEnabled",
      "comment": "Sets whether or not the Timings should monitor at Verbose level. When Verbose is disabled, high-frequency timings will not be available. Calling this will reset timing data.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eenabled\u003c/code\u003e - Should high-frequency timings be reported"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHistoryInterval",
      "comment": "Gets the interval between Timing History report generation. Defaults to 5 minutes (6000 ticks)",
      "annotations": [],
      "tagMap": {
        "return": [
          "Interval in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setHistoryInterval",
      "comment": "Sets the interval between Timing History report generations. Defaults to 5 minutes (6000 ticks) This will recheck your history length, so lowering this value will lower your history length if you need more than 60 history windows.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einterval\u003c/code\u003e - Interval in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHistoryLength",
      "comment": "Gets how long in ticks Timings history is kept for the server. Defaults to 1 hour (72000 ticks)",
      "annotations": [],
      "tagMap": {
        "return": [
          "Duration in Ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setHistoryLength",
      "comment": "Sets how long Timing History reports are kept for the server. Defaults to 1 hours(72000 ticks) This value is capped at a maximum of getHistoryInterval() * MAX_HISTORY_FRAMES (12) Will not reset Timing Data but may truncate old history if the new length is less than old length.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elength\u003c/code\u003e - Duration in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reset",
      "comment": "Resets all Timing Data",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "generateReport",
      "comment": "Generates a report and sends it to the specified command sender. If sender is null, ConsoleCommandSender will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - The sender to send to, or null to use the ConsoleCommandSender"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "generateReport",
      "comment": "Generates a report and sends it to the specified listener. Use with BufferedCommandSender to get full response when done!",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - The listener to send responses too."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "co.aikar.timings.Timings",
  "tagMap": {}
}