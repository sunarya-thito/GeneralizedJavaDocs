{
  "packageName": "org.bukkit",
  "simpleName": "Location",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.World",
            "type": "Class"
          },
          "field": {
            "name": "world"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWorld",
      "comment": "Sets the world that this location resides in",
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - New world that this location resides in"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWorldLoaded",
      "comment": "Checks if world in this location is present and loaded.",
      "tagMap": {
        "return": [
          "true if is loaded, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWorld",
      "comment": "Gets the world that this location resides in",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#isWorldLoaded()\"\u003e\u003ccode\u003eisWorldLoaded()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - when world is unloaded"
        ],
        "return": [
          "World that contains this location, or \n\u003ccode\u003enull\u003c/code\u003e if it is not set"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChunk",
      "comment": "Gets the chunk at the represented location",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Chunk at the represented location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlock",
      "comment": "Gets the block at the represented location",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Block at the represented location"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setX",
      "comment": "Sets the x-coordinate of this location",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getX",
      "comment": "Gets the x-coordinate of this location",
      "tagMap": {
        "return": [
          "x-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockX",
      "comment": "Gets the floored value of the X component, indicating the block that this location is contained with.",
      "tagMap": {
        "return": [
          "block X"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setY",
      "comment": "Sets the y-coordinate of this location",
      "tagMap": {
        "param": [
          "\u003ccode\u003ey\u003c/code\u003e - y-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getY",
      "comment": "Gets the y-coordinate of this location",
      "tagMap": {
        "return": [
          "y-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockY",
      "comment": "Gets the floored value of the Y component, indicating the block that this location is contained with.",
      "tagMap": {
        "return": [
          "block y"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setZ",
      "comment": "Sets the z-coordinate of this location",
      "tagMap": {
        "param": [
          "\u003ccode\u003ez\u003c/code\u003e - z-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getZ",
      "comment": "Gets the z-coordinate of this location",
      "tagMap": {
        "return": [
          "z-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockZ",
      "comment": "Gets the floored value of the Z component, indicating the block that this location is contained with.",
      "tagMap": {
        "return": [
          "block z"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "yaw"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setYaw",
      "comment": "Sets the yaw of this location, measured in degrees. A yaw of 0 or 360 represents the positive z direction. A yaw of 180 represents the negative z direction. A yaw of 90 represents the negative x direction. A yaw of 270 represents the positive x direction. Increasing yaw values are the equivalent of turning to your right-facing, increasing the scale of the next respective axis, and decreasing the scale of the previous axis.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyaw\u003c/code\u003e - new rotation\u0027s yaw"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getYaw",
      "comment": "Gets the yaw of this location, measured in degrees. A yaw of 0 or 360 represents the positive z direction. A yaw of 180 represents the negative z direction. A yaw of 90 represents the negative x direction. A yaw of 270 represents the positive x direction. Increasing yaw values are the equivalent of turning to your right-facing, increasing the scale of the next respective axis, and decreasing the scale of the previous axis.",
      "tagMap": {
        "return": [
          "the rotation\u0027s yaw"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pitch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPitch",
      "comment": "Sets the pitch of this location, measured in degrees. A pitch of 0 represents level forward facing. A pitch of 90 represents downward facing, or negative y direction. A pitch of -90 represents upward facing, or positive y direction. Increasing pitch values the equivalent of looking down.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epitch\u003c/code\u003e - new incline\u0027s pitch"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPitch",
      "comment": "Gets the pitch of this location, measured in degrees. A pitch of 0 represents level forward facing. A pitch of 90 represents downward facing, or negative y direction. A pitch of -90 represents upward facing, or positive y direction. Increasing pitch values the equivalent of looking down.",
      "tagMap": {
        "return": [
          "the incline\u0027s pitch"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDirection",
      "comment": "Gets a unit-vector pointing in the direction that this Location is facing.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a vector pointing the direction of this location\u0027s \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#getPitch()\"\u003e\u003ccode\u003epitch\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#getYaw()\"\u003e\u003ccode\u003eyaw\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vector"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDirection",
      "comment": "Sets the yaw and pitch to point in the direction of the vector.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evector\u003c/code\u003e - the direction vector"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds the location by another.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for differing worlds"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds the location by a vector.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - Vector to use"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds the location by another. Not world-aware.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Subtracts the location by another.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for differing worlds"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Subtracts the location by a vector.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The vector to use"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Subtracts the location by another. Not world-aware and orientation independent.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The value of this method is not cached and uses a costly square-root function, so do not repeatedly call this method to get the location\u0027s magnitude. NaN will be returned if the inner result of the sqrt() function overflows, which will be caused if the length is too long. Not world-aware and orientation independent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the magnitude"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lengthSquared",
      "comment": "Gets the magnitude of the location squared. Not world-aware and orientation independent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the magnitude"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "distance",
      "comment": "Get the distance between this location and another. The value of this method is not cached and uses a costly square-root function, so do not repeatedly call this method to get the location\u0027s magnitude. NaN will be returned if the inner result of the sqrt() function overflows, which will be caused if the distance is too long.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The other location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for differing worlds"
        ],
        "return": [
          "the distance"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "distanceSquared",
      "comment": "Get the squared distance between this location and another.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The other location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for differing worlds"
        ],
        "return": [
          "the distance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Performs scalar multiplication, multiplying all components with a scalar. Not world-aware.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - The factor"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "zero",
      "comment": "Zero this location\u0027s components. Not world-aware.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the same location"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isChunkLoaded",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isGenerated",
      "comment": "Checks if a Chunk has been generated at this location.",
      "tagMap": {
        "return": [
          "true if a chunk has been generated at this location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "set",
      "comment": "Sets the position of this Location and returns itself This mutates this object, clone first.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate"
        ],
        "return": [
          "self (not cloned)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "base"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Takes the x/y/z from base and adds the specified x/y/z to it and returns self This mutates this object, clone first.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebase\u003c/code\u003e - The base coordinate to modify",
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate to add to base",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate to add to base",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate to add to base"
        ],
        "return": [
          "self (not cloned)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "base"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Takes the x/y/z from base and subtracts the specified x/y/z to it and returns self This mutates this object, clone first.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebase\u003c/code\u003e - The base coordinate to modify",
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate to subtract from base",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate to subtract from base",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate to subtract from base"
        ],
        "return": [
          "self (not cloned)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBlockLocation",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "A new location where X/Y/Z are on the Block location (integer value of X/Y/Z)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBlockKey",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/Block.html#getBlockKey(int,int,int)\"\u003e\u003ccode\u003eBlock.getBlockKey(int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The block key for this location\u0027s block location."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toCenterLocation",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "A new location where X/Y/Z are the center of the block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toHighestLocation",
      "comment": "Returns a copy of this location except with y \u003d getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if {\n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#getWorld()\"\u003e\u003ccode\u003egetWorld()\u003c/code\u003e\u003c/a\u003e} is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A copy of this location except with y \u003d getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "com.destroystokyo.paper.HeightmapType",
            "type": "Class"
          },
          "field": {
            "name": "heightmap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toHighestLocation",
      "comment": "Returns a copy of this location except with y \u003d getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightmap)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheightmap\u003c/code\u003e - The heightmap to use for finding the highest y location."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if {\n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#getWorld()\"\u003e\u003ccode\u003egetWorld()\u003c/code\u003e\u003c/a\u003e} is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#getHighestBlockYAt(int,int,com.destroystokyo.paper.HeightmapType)\"\u003e\u003ccode\u003eWorld.getHighestBlockYAt(int, int, com.destroystokyo.paper.HeightmapType)\u003c/code\u003e\u003c/a\u003e does not support the specified heightmap"
        ],
        "return": [
          "A copy of this location except with y \u003d getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightmap)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.HeightMap",
            "type": "Class"
          },
          "field": {
            "name": "heightMap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toHighestLocation",
      "comment": "Returns a copy of this location except with y \u003d getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightMap)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheightMap\u003c/code\u003e - The heightmap to use for finding the highest y location."
        ],
        "return": [
          "A copy of this location except with y \u003d getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ(), heightMap)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "power"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createExplosion",
      "comment": "Creates explosion at this location with given power Will break blocks and ignite blocks on fire.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "power"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "setFire"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createExplosion",
      "comment": "Creates explosion at this location with given power and optionally setting blocks on fire. Will break blocks.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "power"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "setFire"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "breakBlocks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createExplosion",
      "comment": "Creates explosion at this location with given power and optionally setting blocks on fire.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire",
          "\u003ccode\u003ebreakBlocks\u003c/code\u003e - Whether or not to have blocks be destroyed"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "power"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createExplosion",
      "comment": "Creates explosion at this location with given power, with the specified entity as the source. Will break blocks and ignite blocks on fire.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The source entity of the explosion",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "power"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "setFire"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createExplosion",
      "comment": "Creates explosion at this location with given power and optionally setting blocks on fire, with the specified entity as the source. Will break blocks.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The source entity of the explosion",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "power"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "setFire"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "breakBlocks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createExplosion",
      "comment": "Creates explosion at this location with given power and optionally setting blocks on fire, with the specified entity as the source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The source entity of the explosion",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire",
          "\u003ccode\u003ebreakBlocks\u003c/code\u003e - Whether or not to have blocks be destroyed"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntities",
      "comment": "Returns a list of entities within a bounding box centered around a Location. Some implementations may impose artificial restrictions on the size of the search bounding box.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - 1/2 the size of the box along x axis",
          "\u003ccode\u003ey\u003c/code\u003e - 1/2 the size of the box along y axis",
          "\u003ccode\u003ez\u003c/code\u003e - 1/2 the size of the box along z axis"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyLivingEntities",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eradius\u003c/code\u003e - X Radius"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xzRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyLivingEntities",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exzRadius\u003c/code\u003e - X/Z Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius"
        ],
        "return": [
          "the collection of living entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "zRadius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyLivingEntities",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exRadius\u003c/code\u003e - X Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003ezRadius\u003c/code\u003e - Z radius"
        ],
        "return": [
          "the collection of living entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.LivingEntity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyLivingEntities",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eradius\u003c/code\u003e - Radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of living entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xzRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.LivingEntity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyLivingEntities",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exzRadius\u003c/code\u003e - X/Z Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of living entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "zRadius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.LivingEntity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyLivingEntities",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exRadius\u003c/code\u003e - X Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003ezRadius\u003c/code\u003e - Z radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of living entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyPlayers",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eradius\u003c/code\u003e - X/Y/Z Radius"
        ],
        "return": [
          "the collection of players near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xzRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyPlayers",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exzRadius\u003c/code\u003e - X/Z Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius"
        ],
        "return": [
          "the collection of players near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "zRadius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyPlayers",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exRadius\u003c/code\u003e - X Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003ezRadius\u003c/code\u003e - Z Radius"
        ],
        "return": [
          "the collection of players near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Player",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyPlayers",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eradius\u003c/code\u003e - X/Y/Z Radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of players near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xzRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Player",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyPlayers",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exzRadius\u003c/code\u003e - X/Z Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of players near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "zRadius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Player",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyPlayers",
      "comment": "Gets nearby players within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003exRadius\u003c/code\u003e - X Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003ezRadius\u003c/code\u003e - Z Radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of players near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "annotations": [
          {
            "type": "org.jetbrains.annotations.NotNull"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntitiesByType",
      "comment": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the entity type"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - Type to filter by",
          "\u003ccode\u003eradius\u003c/code\u003e - X/Y/Z radius to search within"
        ],
        "return": [
          "the collection of entities of type clazz near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "annotations": [
          {
            "type": "org.jetbrains.annotations.NotNull"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xzRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntitiesByType",
      "comment": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the entity type"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - Type to filter by",
          "\u003ccode\u003exzRadius\u003c/code\u003e - X/Z radius to search within",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y radius to search within"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "annotations": [
          {
            "type": "org.jetbrains.annotations.NotNull"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "zRadius"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntitiesByType",
      "comment": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the entity type"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - Type to filter by",
          "\u003ccode\u003exRadius\u003c/code\u003e - X Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003ezRadius\u003c/code\u003e - Z Radius"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "annotations": [
          {
            "type": "org.jetbrains.annotations.NotNull"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntitiesByType",
      "comment": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the entity type"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - Type to filter by",
          "\u003ccode\u003eradius\u003c/code\u003e - X/Y/Z radius to search within",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "annotations": [
          {
            "type": "org.jetbrains.annotations.NotNull"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xzRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntitiesByType",
      "comment": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the entity type"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - Type to filter by",
          "\u003ccode\u003exzRadius\u003c/code\u003e - X/Z radius to search within",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y radius to search within",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "annotations": [
          {
            "type": "org.jetbrains.annotations.NotNull"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "org.bukkit.entity.Entity",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "xRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "yRadius"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "zRadius"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNearbyEntitiesByType",
      "comment": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the entity type"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - Type to filter by",
          "\u003ccode\u003exRadius\u003c/code\u003e - X Radius",
          "\u003ccode\u003eyRadius\u003c/code\u003e - Y Radius",
          "\u003ccode\u003ezRadius\u003c/code\u003e - Z Radius",
          "\u003ccode\u003epredicate\u003c/code\u003e - a predicate used to filter results"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toVector",
      "comment": "Constructs a new Vector based on this Location",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "New Vector containing the coordinates represented by this Location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "checkFinite",
      "comment": "Check if each component of this Location is finite.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any component is not finite"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "locToBlock",
      "comment": "Safely converts a double (location coordinate) to an int (block coordinate)",
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Precise coordinate"
        ],
        "return": [
          "Block coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "serialize",
      "comment": "Description copied from interface: ConfigurationSerializable",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/configuration/serialization/ConfigurationSerializable.html#serialize()\"\u003eserialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003eConfigurationSerializable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Map containing the current state of this class"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Object",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "args"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "deserialize",
      "comment": "Required method for deserialization",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eargs\u003c/code\u003e - map to deserialize"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the world don\u0027t exists"
        ],
        "return": [
          "deserialized location"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "yaw"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "normalizeYaw",
      "comment": "Normalizes the given yaw angle to a value between +/-180 degrees.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#getYaw()\"\u003e\u003ccode\u003egetYaw()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eyaw\u003c/code\u003e - the yaw in degrees"
        ],
        "return": [
          "the normalized yaw in degrees"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pitch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "normalizePitch",
      "comment": "Normalizes the given pitch angle to a value between +/-90 degrees.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Location.html#getPitch()\"\u003e\u003ccode\u003egetPitch()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epitch\u003c/code\u003e - the pitch in degrees"
        ],
        "return": [
          "the normalized pitch in degrees"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "org.bukkit.World",
            "type": "Class"
          },
          "field": {
            "name": "world"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new Location with the given coordinates",
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world in which this location resides",
          "\u003ccode\u003ex\u003c/code\u003e - The x-coordinate of this new location",
          "\u003ccode\u003ey\u003c/code\u003e - The y-coordinate of this new location",
          "\u003ccode\u003ez\u003c/code\u003e - The z-coordinate of this new location"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "org.bukkit.World",
            "type": "Class"
          },
          "field": {
            "name": "world"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "yaw"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pitch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new Location with the given coordinates and direction",
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world in which this location resides",
          "\u003ccode\u003ex\u003c/code\u003e - The x-coordinate of this new location",
          "\u003ccode\u003ey\u003c/code\u003e - The y-coordinate of this new location",
          "\u003ccode\u003ez\u003c/code\u003e - The z-coordinate of this new location",
          "\u003ccode\u003eyaw\u003c/code\u003e - The absolute rotation on the x-plane, in degrees",
          "\u003ccode\u003epitch\u003c/code\u003e - The absolute rotation on the y-plane, in degrees"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.Location",
  "comment": "Represents a 3-dimensional position in a world. \n\u003cbr\u003e No constraints are placed on any angular values other than that they be specified in degrees. This means that negative angles or angles of greater magnitude than 360 are valid, but may be normalized to any other equivalent representation by the implementation.",
  "tagMap": {}
}