{
  "packageName": "org.bukkit.block",
  "simpleName": "CreatureSpawner",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.block.TileState",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.entity.EntityType",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpawnedType",
      "comment": "Get the spawner\u0027s creature type.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The creature type."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnedType",
      "comment": "Set the spawner\u0027s creature type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecreatureType\u003c/code\u003e - The creature type."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCreatureTypeByName",
      "comment": "Set the spawner mob type.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecreatureType\u003c/code\u003e - The creature type\u0027s name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCreatureTypeName",
      "comment": "Get the spawner\u0027s creature type.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The creature type\u0027s name."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDelay",
      "comment": "Get the spawner\u0027s delay. This is the delay, in ticks, until the spawner will spawn its next mob.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The delay."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDelay",
      "comment": "Set the spawner\u0027s delay. If set to -1, the spawn delay will be reset to a random value between getMinSpawnDelay() and getMaxSpawnDelay().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - The delay."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinSpawnDelay",
      "comment": "The minimum spawn delay amount (in ticks). This value is used when the spawner resets its delay (for any reason). It will choose a random number between getMinSpawnDelay() and getMaxSpawnDelay() for its next getDelay(). Default value is 200 ticks.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum spawn delay amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMinSpawnDelay",
      "comment": "Set the minimum spawn delay amount (in ticks).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/CreatureSpawner.html#getMinSpawnDelay()\"\u003e\u003ccode\u003egetMinSpawnDelay()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - the minimum spawn delay amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxSpawnDelay",
      "comment": "The maximum spawn delay amount (in ticks). This value is used when the spawner resets its delay (for any reason). It will choose a random number between getMinSpawnDelay() and getMaxSpawnDelay() for its next getDelay(). This value must be greater than 0 and less than or equal to getMaxSpawnDelay(). Default value is 800 ticks.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum spawn delay amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxSpawnDelay",
      "comment": "Set the maximum spawn delay amount (in ticks). This value must be greater than 0, as well as greater than or equal to getMinSpawnDelay()",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/CreatureSpawner.html#getMaxSpawnDelay()\"\u003e\u003ccode\u003egetMaxSpawnDelay()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - the new maximum spawn delay amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpawnCount",
      "comment": "Get how many mobs attempt to spawn. Default value is 4.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current spawn count"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnCount",
      "comment": "Set how many mobs attempt to spawn.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003espawnCount\u003c/code\u003e - the new spawn count"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxNearbyEntities",
      "comment": "Set the new maximum amount of similar entities that are allowed to be within spawning range of this spawner. If more than the maximum number of entities are within range, the spawner will not spawn and try again with a new getDelay(). Default value is 16.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum number of nearby, similar, entities"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxNearbyEntities",
      "comment": "Set the maximum number of similar entities that are allowed to be within spawning range of this spawner. Similar entities are entities that are of the same EntityType",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxNearbyEntities\u003c/code\u003e - the maximum number of nearby, similar, entities"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRequiredPlayerRange",
      "comment": "Get the maximum distance(squared) a player can be in order for this spawner to be active. If this value is less than or equal to 0, this spawner is always active (given that there are players online). Default value is 16.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum distance(squared) a player can be in order for this spawner to be active."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRequiredPlayerRange",
      "comment": "Set the maximum distance (squared) a player can be in order for this spawner to be active. Setting this value to less than or equal to 0 will make this spawner always active (given that there are players online).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erequiredPlayerRange\u003c/code\u003e - the maximum distance (squared) a player can be in order for this spawner to be active."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpawnRange",
      "comment": "Get the radius around which the spawner will attempt to spawn mobs in. This area is square, includes the block the spawner is in, and is centered on the spawner\u0027s x,z coordinates - not the spawner itself. It is 2 blocks high, centered on the spawner\u0027s y-coordinate (its bottom); thus allowing mobs to spawn as high as its top surface and as low as 1 block below its bottom surface. Default value is 4.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the spawn range"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnRange",
      "comment": "Set the new spawn range.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/CreatureSpawner.html#getSpawnRange()\"\u003e\u003ccode\u003egetSpawnRange()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003espawnRange\u003c/code\u003e - the new spawn range"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isActivated",
      "comment": "Check if spawner is activated (a player is close enough)",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if a player is close enough to activate it"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetTimer",
      "comment": "Resets the spawn delay timer within the min/max range",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnedItem",
      "comment": "Sets the EntityType to EntityType.DROPPED_ITEM and sets the data to the given ItemStack. setSpawnCount(int) does not dictate the amount of items in the stack spawned, but rather how many stacks should be spawned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/CreatureSpawner.html#setSpawnedType(org.bukkit.entity.EntityType)\"\u003e\u003ccode\u003esetSpawnedType(EntityType)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eitemStack\u003c/code\u003e - The item to spawn. Must not \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Material.html#isAir()\"\u003e\u003ccode\u003ebe air\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.block.CreatureSpawner",
  "comment": "Represents a captured state of a creature spawner.",
  "tagMap": {}
}