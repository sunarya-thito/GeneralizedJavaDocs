{
  "packageName": "org.bukkit.block",
  "simpleName": "Sign",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.block.TileState",
      "type": "Class"
    },
    {
      "name": "org.bukkit.material.Colorable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLines",
      "comment": "Gets all the lines of text currently on this sign.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Array of Strings containing each line of text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLine",
      "comment": "Gets the line of text at the specified index. For example, getLine(0) will return the first line of text.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Line number to get the text from, starting at 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - Thrown when the line does not exist"
        ],
        "return": [
          "Text on the given line"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLine",
      "comment": "Sets the line of text at the specified index. For example, setLine(0, \"Line One\") will set the first line of text to \"Line One\".",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Line number to set the text at, starting from 0",
          "\u003ccode\u003eline\u003c/code\u003e - New text to set at the specified index"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the index is out of the range 0..3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEditable",
      "comment": "Marks whether this sign can be edited by players. This is a special value, which is not persisted. It should only be set if a placed sign is manipulated during the BlockPlaceEvent. Behaviour outside of this event is undefined.",
      "annotations": [],
      "tagMap": {
        "return": [
          "if this sign is currently editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setEditable",
      "comment": "Marks whether this sign can be edited by players. This is a special value, which is not persisted. It should only be set if a placed sign is manipulated during the BlockPlaceEvent. Behaviour outside of this event is undefined.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeditable\u003c/code\u003e - if this sign is currently editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isGlowingText",
      "comment": "Gets whether this sign has glowing text.",
      "annotations": [],
      "tagMap": {
        "return": [
          "if this sign has glowing text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGlowingText",
      "comment": "Sets whether this sign has glowing text.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eglowing\u003c/code\u003e - if this sign has glowing text"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.block.Sign",
  "comment": "Represents a captured state of either a SignPost or a WallSign.",
  "tagMap": {}
}