{
  "packageName": "org.bukkit.block",
  "simpleName": "TileState",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.block.BlockState",
      "type": "Class"
    },
    {
      "name": "org.bukkit.persistence.PersistentDataHolder",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.persistence.PersistentDataContainer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPersistentDataContainer",
      "comment": "Returns a custom tag container capable of storing tags on the object. Note that the tags stored on this container are all stored under their own custom namespace therefore modifying default tags using this PersistentDataHolder is impossible. This PersistentDataHolder is only linked to the snapshot instance stored by the BlockState. When storing changes on the PersistentDataHolder, the updated content will only be applied to the actual tile entity after one of the BlockState.update() methods is called.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/persistence/PersistentDataHolder.html#getPersistentDataContainer()\"\u003egetPersistentDataContainer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/persistence/PersistentDataHolder.html\" title\u003d\"interface in org.bukkit.persistence\"\u003ePersistentDataHolder\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the custom tag container"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.block.TileState",
  "comment": "Represents a block state that also hosts a tile entity at the given location. This interface alone is merely a marker that does not provide any data. Data about the tile entities is provided by the respective interface for each tile entity type. After modifying the data provided by a TileState, \n\u003ca href\u003d\"BlockState.html#update()\"\u003e\u003ccode\u003eBlockState.update()\u003c/code\u003e\u003c/a\u003e needs to be called to store the data.",
  "tagMap": {}
}