{
  "packageName": "org.bukkit.block",
  "simpleName": "Structure",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.block.TileState",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStructureName",
      "comment": "The name of this structure.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "structure name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setStructureName",
      "comment": "Set the name of this structure. This is case-sensitive. The name of the structure in the UsageMode.SAVE structure block MUST match the name within the UsageMode.CORNER block or the size calculation will fail.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the case-sensitive name of this structure"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAuthor",
      "comment": "Get the name of who created this structure.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the name of whoever created this structure."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAuthor",
      "comment": "Set the name of whoever created this structure.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eauthor\u003c/code\u003e - whoever created this structure (not empty)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAuthor",
      "comment": "Set the name of whoever created this structure using a LivingEntity.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elivingEntity\u003c/code\u003e - the entity who created this structure"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BlockVector",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelativePosition",
      "comment": "The relative position of the structure outline based on the position of the structure block. Maximum allowed distance is 48 blocks in any direction.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a Location which contains the relative distance this structure is from the structure block."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRelativePosition",
      "comment": "Set the relative position from the structure block. Maximum allowed distance is 48 blocks in any direction.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evector\u003c/code\u003e - the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/BlockVector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eBlockVector\u003c/code\u003e\u003c/a\u003e containing the relative origin coordinates of this structure."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BlockVector",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStructureSize",
      "comment": "The distance to the opposite corner of this structure. The maximum structure size is 48x48x48. When a structure has successfully been calculated (i.e. it is within the maximum allowed distance) a white border surrounds the structure.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/BlockVector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eBlockVector\u003c/code\u003e\u003c/a\u003e which contains the total size of the structure."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setStructureSize",
      "comment": "Set the maximum size of this structure from the origin point. Maximum allowed size is 48x48x48.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evector\u003c/code\u003e - the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/BlockVector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eBlockVector\u003c/code\u003e\u003c/a\u003e containing the size of this structure, based off of the origin coordinates."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMirror",
      "comment": "Sets the mirroring of the structure.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emirror\u003c/code\u003e - the new mirroring method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.structure.Mirror",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMirror",
      "comment": "How this structure is mirrored.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the current mirroring method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRotation",
      "comment": "Set how this structure is rotated.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erotation\u003c/code\u003e - the new rotation"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.structure.StructureRotation",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRotation",
      "comment": "Get how this structure is rotated.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the new rotation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUsageMode",
      "comment": "Set the UsageMode of this structure block.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emode\u003c/code\u003e - the new mode to set."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.structure.UsageMode",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUsageMode",
      "comment": "Get the UsageMode of this structure block.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the mode this block is currently in."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setIgnoreEntities",
      "comment": "While in UsageMode.SAVE mode, this will ignore any entities when saving the structure. While in UsageMode.LOAD mode this will ignore any entities that were saved to file.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eignoreEntities\u003c/code\u003e - the flag to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isIgnoreEntities",
      "comment": "Get if this structure block should ignore entities.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the appropriate \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/structure/UsageMode.html\" title\u003d\"enum class in org.bukkit.block.structure\"\u003e\u003ccode\u003eUsageMode\u003c/code\u003e\u003c/a\u003e should ignore entities."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShowAir",
      "comment": "Set if the structure outline should show air blocks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eshowAir\u003c/code\u003e - if the structure block should show air blocks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isShowAir",
      "comment": "Check if this structure block is currently showing all air blocks",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the structure block is showing all air blocks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBoundingBoxVisible",
      "comment": "Set if this structure box should show the bounding box.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eshowBoundingBox\u003c/code\u003e - if the structure box should be shown"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBoundingBoxVisible",
      "comment": "Get if this structure block is currently showing the bounding box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the bounding box is shown"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setIntegrity",
      "comment": "Set the integrity of the structure. Integrity must be between 0.0 and 1.0 Lower integrity values will result in more blocks being removed when loading a structure. Integrity and getSeed() are used together to determine which blocks are randomly removed to mimic \"decay.\"",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eintegrity\u003c/code\u003e - the integrity of this structure"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getIntegrity",
      "comment": "Get the integrity of this structure.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the integrity of this structure"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSeed",
      "comment": "The seed used to determine which blocks will be removed upon loading. getIntegrity() and seed are used together to determine which blocks are randomly removed to mimic \"decay.\"",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the seed used to determine how many blocks will be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSeed",
      "comment": "The seed used to determine how many blocks are removed upon loading of this structure.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the seed used"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMetadata",
      "comment": "Only applicable while in UsageMode.DATA. Metadata are specific functions that can be applied to the structure location. Consult the Minecraft wiki for more information.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emetadata\u003c/code\u003e - the function to perform on the selected location"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMetadata",
      "comment": "Get the metadata function this structure block will perform when activated. Consult the Minecraft Wiki for more information.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the function that will be performed when this block is activated"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.block.Structure",
  "tagMap": {}
}