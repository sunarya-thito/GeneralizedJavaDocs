{
  "packageName": "org.bukkit.block",
  "simpleName": "BlockState",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.metadata.Metadatable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlock",
      "comment": "Gets the block represented by this block state.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this block state is not placed"
        ],
        "return": [
          "the block represented by this block state"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.material.MaterialData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getData",
      "comment": "Gets the metadata for this block state.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "block specific metadata"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Gets the data for this block state.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "block specific data"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Gets the type of this block state.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "block type"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLightLevel",
      "comment": "Gets the current light level of the block represented by this block state.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this block state is not placed"
        ],
        "return": [
          "the light level between 0-15"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the world which contains the block represented by this block state.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this block state is not placed"
        ],
        "return": [
          "the world containing the block represented by this block state"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getX",
      "comment": "Gets the x-coordinate of this block state.",
      "annotations": [],
      "tagMap": {
        "return": [
          "x-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getY",
      "comment": "Gets the y-coordinate of this block state.",
      "annotations": [],
      "tagMap": {
        "return": [
          "y-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getZ",
      "comment": "Gets the z-coordinate of this block state.",
      "annotations": [],
      "tagMap": {
        "return": [
          "z-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Gets the location of this block state. If this block state is not placed the location\u0027s world will be null!",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Stores the location of this block state in the provided Location object. If the provided Location is null this method does nothing and returns null. If this block state is not placed the location\u0027s world will be null!",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "null -\u003e null; !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location to copy into"
        ],
        "return": [
          "The Location object provided or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunk",
      "comment": "Gets the chunk which contains the block represented by this block state.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this block state is not placed"
        ],
        "return": [
          "the containing Chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setData",
      "comment": "Sets the metadata for this block state.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - New block specific metadata"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the data for this block state.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - New block specific data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setType",
      "comment": "Sets the type of this block state.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - Material to change this block state to"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "update",
      "comment": "Attempts to update the block represented by this state, setting it to the new values as defined by this state. This has the same effect as calling update(false). That is to say, this will not modify the state of a block if it is no longer the same type as it was when this state was taken. It will return false in this eventuality.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/block/BlockState.html#update(boolean)\"\u003e\u003ccode\u003eupdate(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the update was successful, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "update",
      "comment": "Attempts to update the block represented by this state, setting it to the new values as defined by this state. This has the same effect as calling update(force, true). That is to say, this will trigger a physics update to surrounding blocks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eforce\u003c/code\u003e - true to forcefully set the state"
        ],
        "return": [
          "true if the update was successful, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "update",
      "comment": "Attempts to update the block represented by this state, setting it to the new values as defined by this state. If this state is not placed, this will have no effect and return true. Unless force is true, this will not modify the state of a block if it is no longer the same type as it was when this state was taken. It will return false in this eventuality. If force is true, it will set the type of the block to match the new state, set the state data and then return true. If applyPhysics is true, it will trigger a physics update on surrounding blocks which could cause them to update or disappear.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eforce\u003c/code\u003e - true to forcefully set the state",
          "\u003ccode\u003eapplyPhysics\u003c/code\u003e - false to cancel updating physics on surrounding blocks"
        ],
        "return": [
          "true if the update was successful, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRawData",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The data as a raw byte."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRawData",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - The new data value for the block."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPlaced",
      "comment": "Returns whether this state is placed in the world. Some methods will not work if the block state isn\u0027t placed in the world.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether the state is placed in the world or \u0027virtual\u0027 (e.g. on an itemstack)"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.block.BlockState",
  "comment": "Represents a captured state of a block, which will not change automatically. \n\u003cp\u003e Unlike Block, which only one object can exist per coordinate, BlockState can exist multiple times for any given Block. Note that another plugin may change the state of the block and you will not know, or they may change the block to another type entirely, causing your BlockState to become invalid.\u003c/p\u003e",
  "tagMap": {}
}