{
  "packageName": "org.bukkit.persistence",
  "simpleName": "PersistentDataContainer",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "Z",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "set",
      "comment": "Stores a metadata value on the PersistentDataHolder instance. This API cannot be used to manipulate minecraft data, as the values will be stored using your namespace. This method will override any existing value the PersistentDataHolder may have stored under the provided key.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the generic java type of the tag value",
          "\u003ccode\u003eZ\u003c/code\u003e - the generic type of the object to store"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key this value will be stored under",
          "\u003ccode\u003etype\u003c/code\u003e - the type this tag uses",
          "\u003ccode\u003evalue\u003c/code\u003e - the value stored in the tag"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the type is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the value is null. Removing a tag should be done using \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/persistence/PersistentDataContainer.html#remove(org.bukkit.NamespacedKey)\"\u003e\u003ccode\u003eremove(NamespacedKey)\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no suitable adapter will be found for the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/persistence/PersistentDataType.html#getPrimitiveType()\"\u003e\u003ccode\u003ePersistentDataType.getPrimitiveType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "Z",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "has",
      "comment": "Returns if the persistent metadata provider has metadata registered matching the provided parameters. This method will only return if the found value has the same primitive data type as the provided key. Storing a value using a custom PersistentDataType implementation will not store the complex data type. Therefore storing a UUID (by storing a byte[]) will match has(\"key\" , PersistentDataType.BYTE_ARRAY). Likewise a stored byte[] will always match your UUID PersistentDataType even if it is not 16 bytes long. This method is only usable for custom object keys. Overwriting existing tags, like the the display name, will not work as the values are stored using your namespace.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the generic type of the stored primitive",
          "\u003ccode\u003eZ\u003c/code\u003e - the generic type of the eventually created complex object"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key the value is stored under",
          "\u003ccode\u003etype\u003c/code\u003e - the type which primitive storage type has to match the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key to look up is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the type to cast the found object to is null"
        ],
        "return": [
          "if a value"
        ]
      }
    },
    {
      "returnType": {
        "name": "Z",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Returns the metadata value that is stored on the PersistentDataHolder instance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              },
              {
                "name": "Z",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the generic type of the stored primitive",
          "\u003ccode\u003eZ\u003c/code\u003e - the generic type of the eventually created complex object"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key to look up in the custom tag map",
          "\u003ccode\u003etype\u003c/code\u003e - the type the value must have and will be casted to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key to look up is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the type to cast the found object to is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value exists under the given key, but cannot be access using the given type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no suitable adapter will be found for the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/persistence/PersistentDataType.html#getPrimitiveType()\"\u003e\u003ccode\u003ePersistentDataType.getPrimitiveType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value or \n\u003ccode\u003enull\u003c/code\u003e if no value was mapped under the given value"
        ]
      }
    },
    {
      "returnType": {
        "name": "Z",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOrDefault",
      "comment": "Returns the metadata value that is stored on the PersistentDataHolder instance. If the value does not exist in the container, the default value provided is returned.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              },
              {
                "name": "Z",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the generic type of the stored primitive",
          "\u003ccode\u003eZ\u003c/code\u003e - the generic type of the eventually created complex object"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key to look up in the custom tag map",
          "\u003ccode\u003etype\u003c/code\u003e - the type the value must have and will be casted to",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - the default value to return if no value was found for the provided key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key to look up is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the type to cast the found object to is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value exists under the given key, but cannot be access using the given type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no suitable adapter will be found for the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/persistence/PersistentDataType.html#getPrimitiveType()\"\u003e\u003ccode\u003ePersistentDataType.getPrimitiveType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value or the default value if no value was mapped under the given value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.NamespacedKey",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKeys",
      "comment": "Get a set of keys present on this PersistentDataContainer instance. Any changes made to the returned set will not be reflected on the instance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the key set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes a custom key from the PersistentDataHolder instance.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the provided key is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Returns if the container instance is empty, therefore has no entries inside it.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the boolean"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.persistence.PersistentDataAdapterContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAdapterContext",
      "comment": "Returns the adapter context this tag container uses.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the tag context"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.persistence.PersistentDataContainer",
  "comment": "This interface represents a map like object, capable of storing custom tags in it.",
  "tagMap": {}
}