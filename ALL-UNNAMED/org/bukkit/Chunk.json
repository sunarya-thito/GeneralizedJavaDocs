{
  "packageName": "org.bukkit",
  "simpleName": "Chunk",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.persistence.PersistentDataHolder",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getX",
      "comment": "Gets the X-coordinate of this chunk",
      "tagMap": {
        "return": [
          "X-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getZ",
      "comment": "Gets the Z-coordinate of this chunk",
      "tagMap": {
        "return": [
          "Z-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the world containing this chunk",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Parent World"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlock",
      "comment": "Gets a block from this chunk",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - 0-15",
          "\u003ccode\u003ey\u003c/code\u003e - 0-255",
          "\u003ccode\u003ez\u003c/code\u003e - 0-15"
        ],
        "return": [
          "the Block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.ChunkSnapshot",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunkSnapshot",
      "comment": "Capture thread-safe read-only snapshot of chunk data",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "ChunkSnapshot"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.ChunkSnapshot",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "includeMaxblocky"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "includeBiome"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "includeBiomeTempRain"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunkSnapshot",
      "comment": "Capture thread-safe read-only snapshot of chunk data",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eincludeMaxblocky\u003c/code\u003e - - if true, snapshot includes per-coordinate maximum Y values",
          "\u003ccode\u003eincludeBiome\u003c/code\u003e - - if true, snapshot includes per-coordinate biome type",
          "\u003ccode\u003eincludeBiomeTempRain\u003c/code\u003e - - if true, snapshot includes per-coordinate raw biome temperature and rainfall"
        ],
        "return": [
          "ChunkSnapshot"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEntitiesLoaded",
      "comment": "Checks if entities in this chunk are loaded.",
      "tagMap": {
        "return": [
          "True if entities are loaded."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntities",
      "comment": "Get a list of all entities in the chunk. This will force load any entities, which are not loaded.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The entities."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockState",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTileEntities",
      "comment": "Get a list of all tile entities in the chunk.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The tile entities."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLoaded",
      "comment": "Checks if the chunk is loaded.",
      "tagMap": {
        "return": [
          "True if it is loaded."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "generate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "load",
      "comment": "Loads the chunk.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egenerate\u003c/code\u003e - Whether or not to generate a chunk if it doesn\u0027t already exist"
        ],
        "return": [
          "true if the chunk has loaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "load",
      "comment": "Loads the chunk.",
      "tagMap": {
        "return": [
          "true if the chunk has loaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "save"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unload",
      "comment": "Unloads and optionally saves the Chunk",
      "tagMap": {
        "param": [
          "\u003ccode\u003esave\u003c/code\u003e - Controls whether the chunk is saved"
        ],
        "return": [
          "true if the chunk has unloaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unload",
      "comment": "Unloads and optionally saves the Chunk",
      "tagMap": {
        "return": [
          "true if the chunk has unloaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSlimeChunk",
      "comment": "Checks if this chunk can spawn slimes without being a swamp biome.",
      "tagMap": {
        "return": [
          "true if slimes are able to spawn in this chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isForceLoaded",
      "comment": "Gets whether the chunk at the specified chunk coordinates is force loaded. A force loaded chunk will not be unloaded due to lack of player activity.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#isChunkForceLoaded(int,int)\"\u003e\u003ccode\u003eWorld.isChunkForceLoaded(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "force load status"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "forced"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setForceLoaded",
      "comment": "Sets whether the chunk at the specified chunk coordinates is force loaded. A force loaded chunk will not be unloaded due to lack of player activity.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#setChunkForceLoaded(int,int,boolean)\"\u003e\u003ccode\u003eWorld.setChunkForceLoaded(int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eforced\u003c/code\u003e - force load status"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPluginChunkTicket",
      "comment": "Adds a plugin ticket for this chunk, loading this chunk if it is not already loaded. A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eWorld.addPluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin which owns the ticket"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If the specified plugin is not enabled"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a plugin ticket was added, \n\u003ccode\u003efalse\u003c/code\u003e if the ticket already exists for the plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePluginChunkTicket",
      "comment": "Removes the specified plugin\u0027s ticket for this chunk A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eWorld.removePluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin which owns the ticket"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the plugin ticket was removed, \n\u003ccode\u003efalse\u003c/code\u003e if there is no plugin ticket for the chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPluginChunkTickets",
      "comment": "Retrieves a collection specifying which plugins have tickets for this chunk. This collection is not updated when plugin tickets are added or removed to this chunk. A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#getPluginChunkTickets(int,int)\"\u003e\u003ccode\u003eWorld.getPluginChunkTickets(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "unmodifiable collection containing which plugins have tickets for this chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getInhabitedTime",
      "comment": "Gets the amount of time in ticks that this chunk has been inhabited. Note that the time is incremented once per tick per player in the chunk.",
      "tagMap": {
        "return": [
          "inhabited time"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInhabitedTime",
      "comment": "Sets the amount of time in ticks that this chunk has been inhabited.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - new inhabited time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "field": {
            "name": "block"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Tests if this chunk contains the specified block.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eblock\u003c/code\u003e - block to test"
        ],
        "return": [
          "if the block is contained within"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.Chunk",
  "comment": "Represents a chunk of blocks",
  "tagMap": {}
}