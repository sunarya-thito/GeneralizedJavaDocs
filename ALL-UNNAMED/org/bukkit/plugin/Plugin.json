{
  "packageName": "org.bukkit.plugin",
  "simpleName": "Plugin",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.command.TabExecutor",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDataFolder",
      "comment": "Returns the folder that the plugin data\u0027s files are located in. The folder may not yet exist.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The folder"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.PluginDescriptionFile",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDescription",
      "comment": "Returns the plugin.yaml file containing the details for this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Contents of the plugin.yaml file"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.file.FileConfiguration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConfig",
      "comment": "Gets a FileConfiguration for this plugin, read through \"config.yml\" If there is a default config.yml embedded in this plugin, it will be provided as a default for this Configuration.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Plugin configuration"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filename"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResource",
      "comment": "Gets an embedded resource in this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efilename\u003c/code\u003e - Filename of the resource"
        ],
        "return": [
          "File if found, otherwise null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "saveConfig",
      "comment": "Saves the FileConfiguration retrievable by getConfig().",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "saveDefaultConfig",
      "comment": "Saves the raw contents of the default config.yml file to the location retrievable by getConfig(). This should fail silently if the config.yml already exists.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "resourcePath"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "replace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "saveResource",
      "comment": "Saves the raw contents of any resource embedded with a plugin\u0027s .jar file assuming it can be found using getResource(String). The resource is saved into the plugin\u0027s data folder using the same hierarchy as the .jar file (subdirectories are preserved).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eresourcePath\u003c/code\u003e - the embedded resource path to look for within the plugin\u0027s .jar file. (No preceding slash).",
          "\u003ccode\u003ereplace\u003c/code\u003e - if true, the embedded resource will overwrite the contents of an existing file."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the resource path is null, empty, or points to a nonexistent resource."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reloadConfig",
      "comment": "Discards any data in getConfig() and reloads from disk.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.PluginLoader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPluginLoader",
      "comment": "Gets the associated PluginLoader responsible for this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "PluginLoader that controls this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Server",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getServer",
      "comment": "Returns the Server instance currently running this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Server running this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEnabled",
      "comment": "Returns a value indicating whether or not this plugin is currently enabled",
      "tagMap": {
        "return": [
          "true if this plugin is enabled, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onDisable",
      "comment": "Called when this plugin is disabled",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onLoad",
      "comment": "Called after a plugin is loaded but before it has been enabled. When multiple plugins are loaded, the onLoad() for all plugins is called before any onEnable() is called.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "onEnable",
      "comment": "Called when this plugin is enabled",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isNaggable",
      "comment": "Simple boolean if we can still nag to the logs about things",
      "tagMap": {
        "return": [
          "boolean whether we can nag"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canNag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNaggable",
      "comment": "Set naggable state",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecanNag\u003c/code\u003e - is this plugin still naggable?"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "worldName"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultWorldGenerator",
      "comment": "Gets a ChunkGenerator for use in a default world, as specified in the server configuration",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldName\u003c/code\u003e - Name of the world that this will be applied to",
          "\u003ccode\u003eid\u003c/code\u003e - Unique ID, if any, that was specified to indicate which generator was requested"
        ],
        "return": [
          "ChunkGenerator for use in the default world generation"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.BiomeProvider",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "worldName"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultBiomeProvider",
      "comment": "Gets a BiomeProvider for use in a default world, as specified in the server configuration",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldName\u003c/code\u003e - Name of the world that this will be applied to",
          "\u003ccode\u003eid\u003c/code\u003e - Unique ID, if any, that was specified to indicate which biome provider was requested"
        ],
        "return": [
          "BiomeProvider for use in the default world generation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLogger",
      "comment": "Returns the plugin logger associated with this server\u0027s logger. The returned logger automatically tags all log messages with the plugin\u0027s name.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Logger associated with this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.slf4j.Logger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSLF4JLogger",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.apache.logging.log4j.Logger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLog4JLogger",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns the name of the plugin. This should return the bare name of the plugin and should be used for comparison.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "name of the plugin"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.plugin.Plugin",
  "comment": "Represents a Plugin \n\u003cp\u003e The use of \u003ca href\u003d\"PluginBase.html\" title\u003d\"class in org.bukkit.plugin\"\u003e\u003ccode\u003ePluginBase\u003c/code\u003e\u003c/a\u003e is recommended for actual Implementation\u003c/p\u003e",
  "tagMap": {}
}