{
  "packageName": "org.bukkit.plugin",
  "simpleName": "PluginManager",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "org.bukkit.plugin.PluginLoader",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerInterface",
      "comment": "Registers the specified plugin loader",
      "tagMap": {
        "param": [
          "\u003ccode\u003eloader\u003c/code\u003e - Class name of the PluginLoader to register"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown when the given Class is not a valid PluginLoader"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.Plugin",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlugin",
      "comment": "Checks if the given plugin is loaded and returns it when applicable Please note that the name of the plugin is case-sensitive",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the plugin to check"
        ],
        "return": [
          "Plugin if it exists, otherwise null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.Plugin",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlugins",
      "comment": "Gets a list of all currently loaded plugins",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Array of Plugins"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPluginEnabled",
      "comment": "Checks if the given plugin is enabled or not Please note that the name of the plugin is case-sensitive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the plugin to check"
        ],
        "return": [
          "true if the plugin is enabled, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPluginEnabled",
      "comment": "Checks if the given plugin is enabled or not",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Contract",
          "values": [
            {
              "name": "value",
              "value": "null -\u003e false"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to check"
        ],
        "return": [
          "true if the plugin is enabled, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.Plugin",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.bukkit.plugin.InvalidPluginException",
          "type": "Class"
        },
        {
          "name": "org.bukkit.plugin.InvalidDescriptionException",
          "type": "Class"
        },
        {
          "name": "org.bukkit.plugin.UnknownDependencyException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadPlugin",
      "comment": "Loads the plugin in the specified file File must be valid according to the current enabled Plugin interfaces",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - File containing the plugin to load"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/plugin/InvalidPluginException.html\" title\u003d\"class in org.bukkit.plugin\"\u003eInvalidPluginException\u003c/a\u003e\u003c/code\u003e - Thrown when the specified file is not a valid plugin",
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/plugin/InvalidDescriptionException.html\" title\u003d\"class in org.bukkit.plugin\"\u003eInvalidDescriptionException\u003c/a\u003e\u003c/code\u003e - Thrown when the specified file contains an invalid description",
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/plugin/UnknownDependencyException.html\" title\u003d\"class in org.bukkit.plugin\"\u003eUnknownDependencyException\u003c/a\u003e\u003c/code\u003e - If a required dependency could not be resolved"
        ],
        "return": [
          "The Plugin loaded, or null if it was invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.Plugin",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "directory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadPlugins",
      "comment": "Loads the plugins contained within the specified directory",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edirectory\u003c/code\u003e - Directory to check for plugins"
        ],
        "return": [
          "A list of all plugins loaded"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "disablePlugins",
      "comment": "Disables all the loaded plugins",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearPlugins",
      "comment": "Disables and removes all plugins",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.Event",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "callEvent",
      "comment": "Calls an event with the given details",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - Event details"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - Thrown when an asynchronous event is fired from synchronous code. \n\u003cp\u003e \u003ci\u003eNote: This is best-effort basis, and should not be used to test synchronized state. This is an indicator for flawed flow logic.\u003c/i\u003e\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.Listener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerEvents",
      "comment": "Registers all the events in the given listener class",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - Listener to register",
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to register"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "org.bukkit.event.Event",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.Listener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.EventPriority",
            "type": "Class"
          },
          "field": {
            "name": "priority"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.EventExecutor",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerEvent",
      "comment": "Registers the specified executor to the given event class",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - Event type to register",
          "\u003ccode\u003elistener\u003c/code\u003e - Listener to register",
          "\u003ccode\u003epriority\u003c/code\u003e - Priority to register this event at",
          "\u003ccode\u003eexecutor\u003c/code\u003e - EventExecutor to register",
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to register"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "org.bukkit.event.Event",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.Listener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.EventPriority",
            "type": "Class"
          },
          "field": {
            "name": "priority"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.EventExecutor",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ignoreCancelled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerEvent",
      "comment": "Registers the specified executor to the given event class",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - Event type to register",
          "\u003ccode\u003elistener\u003c/code\u003e - Listener to register",
          "\u003ccode\u003epriority\u003c/code\u003e - Priority to register this event at",
          "\u003ccode\u003eexecutor\u003c/code\u003e - EventExecutor to register",
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to register",
          "\u003ccode\u003eignoreCancelled\u003c/code\u003e - Whether to pass cancelled events or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "enablePlugin",
      "comment": "Enables the specified plugin Attempting to enable a plugin that is already enabled will have no effect",
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to enable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "field": {
            "name": "plugin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "disablePlugin",
      "comment": "Disables the specified plugin Attempting to disable a plugin that is not enabled will have no effect",
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin to disable"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.permissions.Permission",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPermission",
      "comment": "Gets a Permission from its fully qualified name",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the permission"
        ],
        "return": [
          "Permission, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permission",
            "type": "Class"
          },
          "field": {
            "name": "perm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPermission",
      "comment": "Adds a Permission to this plugin manager. If a permission is already defined with the given name of the new permission, an exception will be thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eperm\u003c/code\u003e - Permission to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown when a permission with the same name already exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permission",
            "type": "Class"
          },
          "field": {
            "name": "perm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePermission",
      "comment": "Removes a Permission registration from this plugin manager. If the specified permission does not exist in this plugin manager, nothing will happen. Removing a permission registration will not remove the permission from any Permissibles that have it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eperm\u003c/code\u003e - Permission to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePermission",
      "comment": "Removes a Permission registration from this plugin manager. If the specified permission does not exist in this plugin manager, nothing will happen. Removing a permission registration will not remove the permission from any Permissibles that have it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Permission to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.permissions.Permission",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultPermissions",
      "comment": "Gets the default permissions for the given op status",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - Which set of default permissions to get"
        ],
        "return": [
          "The default permissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permission",
            "type": "Class"
          },
          "field": {
            "name": "perm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "recalculatePermissionDefaults",
      "comment": "Recalculates the defaults for the given Permission. This will have no effect if the specified permission is not registered here.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eperm\u003c/code\u003e - Permission to recalculate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permissible",
            "type": "Class"
          },
          "field": {
            "name": "permissible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subscribeToPermission",
      "comment": "Subscribes the given Permissible for information about the requested Permission, by name. If the specified Permission changes in any form, the Permissible will be asked to recalculate.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermission\u003c/code\u003e - Permission to subscribe to",
          "\u003ccode\u003epermissible\u003c/code\u003e - Permissible subscribing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permissible",
            "type": "Class"
          },
          "field": {
            "name": "permissible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsubscribeFromPermission",
      "comment": "Unsubscribes the given Permissible for information about the requested Permission, by name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermission\u003c/code\u003e - Permission to unsubscribe from",
          "\u003ccode\u003epermissible\u003c/code\u003e - Permissible subscribing"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.permissions.Permissible",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPermissionSubscriptions",
      "comment": "Gets a set containing all subscribed Permissibles to the given permission, by name",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epermission\u003c/code\u003e - Permission to query for"
        ],
        "return": [
          "Set containing all subscribed permissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permissible",
            "type": "Class"
          },
          "field": {
            "name": "permissible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subscribeToDefaultPerms",
      "comment": "Subscribes to the given Default permissions by operator status If the specified defaults change in any form, the Permissible will be asked to recalculate.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - Default list to subscribe to",
          "\u003ccode\u003epermissible\u003c/code\u003e - Permissible subscribing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.permissions.Permissible",
            "type": "Class"
          },
          "field": {
            "name": "permissible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsubscribeFromDefaultPerms",
      "comment": "Unsubscribes from the given Default permissions by operator status",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - Default list to unsubscribe from",
          "\u003ccode\u003epermissible\u003c/code\u003e - Permissible subscribing"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.permissions.Permissible",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultPermSubscriptions",
      "comment": "Gets a set containing all subscribed Permissibles to the given default list, by op status",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - Default list to query for"
        ],
        "return": [
          "Set containing all subscribed permissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.permissions.Permission",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPermissions",
      "comment": "Gets a set of all registered permissions. This set is a copy and will not be modified live.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Set containing all current registered permissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "useTimings",
      "comment": "Returns whether or not timing code should be used for event calls",
      "tagMap": {
        "return": [
          "True if event timings are to be used"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.plugin.PluginManager",
  "comment": "Handles all plugin management from the Server",
  "tagMap": {}
}