{
  "packageName": "org.bukkit.plugin.java",
  "simpleName": "JavaPlugin",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "org.bukkit.plugin.PluginBase",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDataFolder",
      "comment": "Returns the folder that the plugin data\u0027s files are located in. The folder may not yet exist.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The folder."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.PluginLoader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPluginLoader",
      "comment": "Gets the associated PluginLoader responsible for this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "PluginLoader that controls this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Server",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getServer",
      "comment": "Returns the Server instance currently running this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Server running this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isEnabled",
      "comment": "Returns a value indicating whether or not this plugin is currently enabled",
      "tagMap": {
        "return": [
          "true if this plugin is enabled, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getFile",
      "comment": "Returns the file which contains this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "File containing this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.PluginDescriptionFile",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDescription",
      "comment": "Returns the plugin.yaml file containing the details for this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Contents of the plugin.yaml file"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.file.FileConfiguration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConfig",
      "comment": "Description copied from interface: Plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Plugin configuration"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getTextResource",
      "comment": "Provides a reader for a text file located inside the jar. The returned reader will read text with the UTF-8 charset.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getResourceAsStream(java.lang.String)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eClassLoader.getResourceAsStream(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the filename of the resource to load"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if file is null"
        ],
        "return": [
          "null if \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/plugin/java/JavaPlugin.html#getResource(java.lang.String)\"\u003e\u003ccode\u003egetResource(String)\u003c/code\u003e\u003c/a\u003e returns null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reloadConfig",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "saveConfig",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "saveDefaultConfig",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "resourcePath"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "replace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "saveResource",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {
        "param": [
          "\u003ccode\u003eresourcePath\u003c/code\u003e - the embedded resource path to look for within the plugin\u0027s .jar file. (No preceding slash).",
          "\u003ccode\u003ereplace\u003c/code\u003e - if true, the embedded resource will overwrite the contents of an existing file."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filename"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResource",
      "comment": "Description copied from interface: Plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efilename\u003c/code\u003e - Filename of the resource"
        ],
        "return": [
          "File if found, otherwise null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ClassLoader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getClassLoader",
      "comment": "Returns the ClassLoader which holds this plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "ClassLoader holding this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "enabled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setEnabled",
      "comment": "Sets the enabled state of this plugin",
      "tagMap": {
        "param": [
          "\u003ccode\u003eenabled\u003c/code\u003e - true if enabled, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "field": {
            "name": "sender"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.command.Command",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "label"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "args"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onCommand",
      "comment": "Executes the given command, returning its success. If false is returned, then the \"usage\" plugin.yml entry for this command (if defined) will be sent to the player.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - Source of the command",
          "\u003ccode\u003ecommand\u003c/code\u003e - Command which was executed",
          "\u003ccode\u003elabel\u003c/code\u003e - Alias of the command which was used",
          "\u003ccode\u003eargs\u003c/code\u003e - Passed command arguments"
        ],
        "return": [
          "true if a valid command, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "field": {
            "name": "sender"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.command.Command",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "alias"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "args"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onTabComplete",
      "comment": "Requests a list of possible completions for a command argument.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - Source of the command. For players tab-completing a command inside of a command block, this will be the player, not the command block.",
          "\u003ccode\u003ecommand\u003c/code\u003e - Command which was executed",
          "\u003ccode\u003ealias\u003c/code\u003e - The alias used",
          "\u003ccode\u003eargs\u003c/code\u003e - The arguments passed to the command, including final partial argument to be completed and command label"
        ],
        "return": [
          "A List of possible completions for the final argument, or null to default to the command executor"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.command.PluginCommand",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCommand",
      "comment": "Gets the command with the given name, specific to this plugin. Commands need to be registered in the PluginDescriptionFile to exist at runtime.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - name or alias of the command"
        ],
        "return": [
          "the plugin command if found, otherwise null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onLoad",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onDisable",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onEnable",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "worldName"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultWorldGenerator",
      "comment": "Description copied from interface: Plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldName\u003c/code\u003e - Name of the world that this will be applied to",
          "\u003ccode\u003eid\u003c/code\u003e - Unique ID, if any, that was specified to indicate which generator was requested"
        ],
        "return": [
          "ChunkGenerator for use in the default world generation"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.BiomeProvider",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "worldName"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultBiomeProvider",
      "comment": "Description copied from interface: Plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldName\u003c/code\u003e - Name of the world that this will be applied to",
          "\u003ccode\u003eid\u003c/code\u003e - Unique ID, if any, that was specified to indicate which biome provider was requested"
        ],
        "return": [
          "BiomeProvider for use in the default world generation"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isNaggable",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {
        "return": [
          "boolean whether we can nag"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canNag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setNaggable",
      "comment": "Description copied from interface: Plugin",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecanNag\u003c/code\u003e - is this plugin still naggable?"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLogger",
      "comment": "Description copied from interface: Plugin",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Logger associated with this plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.plugin.java.JavaPlugin",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPlugin",
      "comment": "This method provides fast access to the plugin that has provided the given plugin class, which is usually the plugin that implemented it. An exception to this would be if plugin\u0027s jar that contained the class does not extend the class, where the intended plugin would have resided in a different jar / classloader.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - a class that extends JavaPlugin"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class desired"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if clazz is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if clazz does not extend \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/plugin/java/JavaPlugin.html\" title\u003d\"class in org.bukkit.plugin.java\"\u003e\u003ccode\u003eJavaPlugin\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if clazz was not provided by a plugin, for example, if called with \n\u003ccode\u003eJavaPlugin.getPlugin(JavaPlugin.class)\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if called from the static initializer for given JavaPlugin",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if plugin that provided the class does not extend the class"
        ],
        "return": [
          "the plugin that provides and implements said class"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.java.JavaPlugin",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "clazz"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getProvidingPlugin",
      "comment": "This method provides fast access to the plugin that has provided the given class.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - a class belonging to a plugin"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the class is not provided by a JavaPlugin",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if class is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if called from the static initializer for given JavaPlugin"
        ],
        "return": [
          "the plugin that provided the class"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.java.JavaPluginLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.PluginDescriptionFile",
            "type": "Class"
          },
          "field": {
            "name": "description"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dataFolder"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "org.bukkit.plugin.java.JavaPlugin",
  "comment": "Represents a Java plugin",
  "tagMap": {}
}