{
  "packageName": "org.bukkit.generator",
  "simpleName": "ChunkGenerator",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateNoise",
      "comment": "Shapes the Chunk noise for the given coordinates. Notes: This method should never attempt to get the Chunk at the passed coordinates, as doing so may cause an infinite loop. This method should never modify the ChunkGenerator.ChunkData at a later point of time. The Y-coordinate range should never be hardcoded, to get the Y-coordinate range use the methods ChunkGenerator.ChunkData.getMinHeight() and ChunkGenerator.ChunkData.getMaxHeight(). If shouldGenerateNoise() is set to true, the given ChunkGenerator.ChunkData contains already the Vanilla noise generation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldInfo\u003c/code\u003e - The world info of the world this chunk will be used for",
          "\u003ccode\u003erandom\u003c/code\u003e - The random generator to use",
          "\u003ccode\u003ex\u003c/code\u003e - The X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - The Z-coordinate of the chunk",
          "\u003ccode\u003echunkData\u003c/code\u003e - To modify"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateSurface",
      "comment": "Shapes the Chunk surface for the given coordinates. Notes: This method should never attempt to get the Chunk at the passed coordinates, as doing so may cause an infinite loop. This method should never modify the ChunkGenerator.ChunkData at a later point of time. The Y-coordinate range should never be hardcoded, to get the Y-coordinate range use the methods ChunkGenerator.ChunkData.getMinHeight() and ChunkGenerator.ChunkData.getMaxHeight(). If shouldGenerateSurface() is set to true, the given ChunkGenerator.ChunkData contains already the Vanilla surface generation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldInfo\u003c/code\u003e - The world info of the world this chunk will be used for",
          "\u003ccode\u003erandom\u003c/code\u003e - The random generator to use",
          "\u003ccode\u003ex\u003c/code\u003e - The X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - The Z-coordinate of the chunk",
          "\u003ccode\u003echunkData\u003c/code\u003e - To modify"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateBedrock",
      "comment": "Shapes the Chunk bedrock layer for the given coordinates. Notes: This method should never attempt to get the Chunk at the passed coordinates, as doing so may cause an infinite loop. This method should never modify the ChunkGenerator.ChunkData at a later point of time. The Y-coordinate range should never be hardcoded, to get the Y-coordinate range use the methods ChunkGenerator.ChunkData.getMinHeight() and ChunkGenerator.ChunkData.getMaxHeight(). If shouldGenerateBedrock() is set to true, the given ChunkGenerator.ChunkData contains already the Vanilla bedrock generation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldInfo\u003c/code\u003e - The world info of the world this chunk will be used for",
          "\u003ccode\u003erandom\u003c/code\u003e - The random generator to use",
          "\u003ccode\u003ex\u003c/code\u003e - The X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - The Z-coordinate of the chunk",
          "\u003ccode\u003echunkData\u003c/code\u003e - To modify"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateCaves",
      "comment": "Shapes the Chunk caves for the given coordinates. Notes: This method should never attempt to get the Chunk at the passed coordinates, as doing so may cause an infinite loop. This method should never modify the ChunkGenerator.ChunkData at a later point of time. The Y-coordinate range should never be hardcoded, to get the Y-coordinate range use the methods ChunkGenerator.ChunkData.getMinHeight() and ChunkGenerator.ChunkData.getMaxHeight(). If shouldGenerateCaves() is set to true, the given ChunkGenerator.ChunkData contains already the Vanilla cave generation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldInfo\u003c/code\u003e - The world info of the world this chunk will be used for",
          "\u003ccode\u003erandom\u003c/code\u003e - The random generator to use",
          "\u003ccode\u003ex\u003c/code\u003e - The X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - The Z-coordinate of the chunk",
          "\u003ccode\u003echunkData\u003c/code\u003e - To modify"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.BiomeProvider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultBiomeProvider",
      "comment": "Gets called when no BiomeProvider is set in WorldCreator or via the server configuration files. It is therefore possible that one plugin can provide the Biomes and another one the generation. Notes: If null is returned, than Vanilla biomes are used. This method only gets called once when the world is loaded. Returning another BiomeProvider later one is not respected.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldInfo\u003c/code\u003e - The world info of the world the biome provider will be used for"
        ],
        "return": [
          "BiomeProvider to use to fill the biomes of a chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseHeight",
      "comment": "This method is similar to World.getHighestBlockAt(int, int, HeightMap). With the difference being, that the highest y coordinate should be the block before any surface, bedrock, caves or decoration is applied. Or in other words the highest block when only the noise is present at the chunk. Notes: When this method is not overridden, the Vanilla base height is used. This method should never attempt to get the Chunk at the passed coordinates, or use the method World.getHighestBlockAt(int, int, HeightMap), as doing so may cause an infinite loop.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldInfo\u003c/code\u003e - The world info of the world this chunk will be used for",
          "\u003ccode\u003erandom\u003c/code\u003e - The random generator to use",
          "\u003ccode\u003ex\u003c/code\u003e - The X-coordinate from world origin",
          "\u003ccode\u003ez\u003c/code\u003e - The Z-coordinate from world origin",
          "\u003ccode\u003eheightMap\u003c/code\u003e - From the highest block should be get"
        ],
        "return": [
          "The y coordinate of the highest block at the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator$ChunkData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateChunkData",
      "comment": "Shapes the chunk for the given coordinates. This method must return a ChunkData. Notes: This method should never attempt to get the Chunk at the passed coordinates, as doing so may cause an infinite loop This method should never modify a ChunkData after it has been returned. This method must return a ChunkData returned by createChunkData(org.bukkit.World)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world this chunk will be used for",
          "\u003ccode\u003erandom\u003c/code\u003e - The random generator to use",
          "\u003ccode\u003ex\u003c/code\u003e - The X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - The Z-coordinate of the chunk",
          "\u003ccode\u003ebiome\u003c/code\u003e - Proposed biome values for chunk - can be updated by generator"
        ],
        "return": [
          "ChunkData containing the types for each block created by this generator"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator$ChunkData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "createChunkData",
      "comment": "Create a ChunkData for a world.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world the ChunkData is for"
        ],
        "return": [
          "a new ChunkData for world"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canSpawn",
      "comment": "Tests if the specified location is valid for a natural spawn position",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world we\u0027re testing on",
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block to test",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block to test"
        ],
        "return": [
          "true if the location is valid, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.generator.BlockPopulator",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultPopulators",
      "comment": "Gets a list of default BlockPopulators to apply to a given world",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - World to apply to"
        ],
        "return": [
          "List containing any amount of BlockPopulators"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateDecorations",
      "comment": "Generate decorations in a chunk, with quick access to its neighbors.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "java.lang.forRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - ProtoWorld to generate decorations with."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFixedSpawnLocation",
      "comment": "Gets a fixed spawn location to use for a given world. A null value is returned if a world should not use a fixed spawn point, and will instead attempt to find one randomly.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world to locate a spawn point for",
          "\u003ccode\u003erandom\u003c/code\u003e - Random generator to use in the calculation"
        ],
        "return": [
          "Location containing a new spawn point, otherwise null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isParallelCapable",
      "comment": "Gets if this ChunkGenerator is parallel capable. See ChunkGenerator for more information.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "parallel capable status"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateNoise",
      "comment": "Gets if the server should generate Vanilla noise. The Vanilla noise is generated before generateNoise(WorldInfo, Random, int, int, ChunkData) is called.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla noise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateSurface",
      "comment": "Gets if the server should generate Vanilla surface. The Vanilla surface is generated before generateSurface(WorldInfo, Random, int, int, ChunkData) is called.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla surface"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateBedrock",
      "comment": "Gets if the server should generate Vanilla bedrock. The Vanilla bedrock is generated before generateBedrock(WorldInfo, Random, int, int, ChunkData) is called.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla bedrock"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateCaves",
      "comment": "Gets if the server should generate Vanilla caves. The Vanilla caves are generated before generateCaves(WorldInfo, Random, int, int, ChunkData) is called.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla caves"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateDecorations",
      "comment": "Gets if the server should generate Vanilla decorations after this ChunkGenerator. The Vanilla decoration are generated before any BlockPopulator are called.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla decorations"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateMobs",
      "comment": "Gets if the server should generate Vanilla mobs after this ChunkGenerator.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla mobs"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldGenerateStructures",
      "comment": "Gets if the server should generate Vanilla structures after this ChunkGenerator.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server should generate Vanilla structures"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator$ChunkData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createVanillaChunkData",
      "comment": "Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world to create the ChunkData for",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - the z coordinate of the chunk"
        ],
        "return": [
          "a new ChunkData for the world"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "org.bukkit.generator.ChunkGenerator$ChunkData",
    "org.bukkit.generator.ChunkGenerator$BiomeGrid"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "org.bukkit.generator.ChunkGenerator",
  "tagMap": {}
}