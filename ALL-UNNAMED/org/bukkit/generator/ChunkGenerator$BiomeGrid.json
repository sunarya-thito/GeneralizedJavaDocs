{
  "packageName": "org.bukkit.generator",
  "simpleName": "BiomeGrid",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.block.Biome",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Get biome at x, z within chunk being generated",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - - 0-15",
          "\u003ccode\u003ez\u003c/code\u003e - - 0-15"
        ],
        "return": [
          "Biome value"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Biome",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Get biome at x, z within chunk being generated",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - - 0-15",
          "\u003ccode\u003ey\u003c/code\u003e - - 0-255",
          "\u003ccode\u003ez\u003c/code\u003e - - 0-15"
        ],
        "return": [
          "Biome value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.Biome",
            "type": "Class"
          },
          "name": "bio",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiome",
      "comment": "Set biome at x, z within chunk being generated",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - - 0-15",
          "\u003ccode\u003ez\u003c/code\u003e - - 0-15",
          "\u003ccode\u003ebio\u003c/code\u003e - - Biome value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.Biome",
            "type": "Class"
          },
          "name": "bio",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiome",
      "comment": "Set biome at x, z within chunk being generated",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - - 0-15",
          "\u003ccode\u003ey\u003c/code\u003e - - 0-255",
          "\u003ccode\u003ez\u003c/code\u003e - - 0-15",
          "\u003ccode\u003ebio\u003c/code\u003e - - Biome value"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "org.bukkit.generator.ChunkGenerator$BiomeGrid",
  "comment": "Interface to biome section for chunk to be generated: initialized with default values for world type and seed. \n\u003cp\u003e Custom generator is free to access and tailor values during generateBlockSections() or generateExtBlockSections().\u003c/p\u003e",
  "tagMap": {}
}