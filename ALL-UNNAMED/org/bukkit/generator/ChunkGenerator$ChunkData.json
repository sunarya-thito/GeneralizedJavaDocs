{
  "packageName": "org.bukkit.generator",
  "simpleName": "ChunkData",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinHeight",
      "comment": "Get the minimum height for this ChunkData. It is not guaranteed that this method will return the same value as WorldInfo.getMinHeight(). Setting blocks below this height will do nothing.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum height"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxHeight",
      "comment": "Get the maximum height for this ChunkData. It is not guaranteed that this method will return the same value as WorldInfo.getMaxHeight(). Setting blocks at or above this height will do nothing.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum height"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Biome",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Get the biome at x, y, z within chunk being generated",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minimum (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive"
        ],
        "return": [
          "Biome value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlock",
      "comment": "Set the block at x,y,z in the chunk data to material. Note: setting blocks outside the chunk\u0027s bounds does nothing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ematerial\u003c/code\u003e - the type to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlock",
      "comment": "Set the block at x,y,z in the chunk data to material. Setting blocks outside the chunk\u0027s bounds does nothing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ematerial\u003c/code\u003e - the type to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlock",
      "comment": "Set the block at x,y,z in the chunk data to material. Setting blocks outside the chunk\u0027s bounds does nothing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive",
          "\u003ccode\u003eblockData\u003c/code\u003e - the type to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRegion",
      "comment": "Set a region of this chunk from xMin, yMin, zMin (inclusive) to xMax, yMax, zMax (exclusive) to material. Setting blocks outside the chunk\u0027s bounds does nothing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003exMin\u003c/code\u003e - minimum x location (inclusive) in the chunk to set",
          "\u003ccode\u003eyMin\u003c/code\u003e - minimum y location (inclusive) in the chunk to set",
          "\u003ccode\u003ezMin\u003c/code\u003e - minimum z location (inclusive) in the chunk to set",
          "\u003ccode\u003exMax\u003c/code\u003e - maximum x location (exclusive) in the chunk to set",
          "\u003ccode\u003eyMax\u003c/code\u003e - maximum y location (exclusive) in the chunk to set",
          "\u003ccode\u003ezMax\u003c/code\u003e - maximum z location (exclusive) in the chunk to set",
          "\u003ccode\u003ematerial\u003c/code\u003e - the type to set the blocks to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRegion",
      "comment": "Set a region of this chunk from xMin, yMin, zMin (inclusive) to xMax, yMax, zMax (exclusive) to material. Setting blocks outside the chunk\u0027s bounds does nothing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003exMin\u003c/code\u003e - minimum x location (inclusive) in the chunk to set",
          "\u003ccode\u003eyMin\u003c/code\u003e - minimum y location (inclusive) in the chunk to set",
          "\u003ccode\u003ezMin\u003c/code\u003e - minimum z location (inclusive) in the chunk to set",
          "\u003ccode\u003exMax\u003c/code\u003e - maximum x location (exclusive) in the chunk to set",
          "\u003ccode\u003eyMax\u003c/code\u003e - maximum y location (exclusive) in the chunk to set",
          "\u003ccode\u003ezMax\u003c/code\u003e - maximum z location (exclusive) in the chunk to set",
          "\u003ccode\u003ematerial\u003c/code\u003e - the type to set the blocks to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRegion",
      "comment": "Set a region of this chunk from xMin, yMin, zMin (inclusive) to xMax, yMax, zMax (exclusive) to material. Setting blocks outside the chunk\u0027s bounds does nothing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003exMin\u003c/code\u003e - minimum x location (inclusive) in the chunk to set",
          "\u003ccode\u003eyMin\u003c/code\u003e - minimum y location (inclusive) in the chunk to set",
          "\u003ccode\u003ezMin\u003c/code\u003e - minimum z location (inclusive) in the chunk to set",
          "\u003ccode\u003exMax\u003c/code\u003e - maximum x location (exclusive) in the chunk to set",
          "\u003ccode\u003eyMax\u003c/code\u003e - maximum y location (exclusive) in the chunk to set",
          "\u003ccode\u003ezMax\u003c/code\u003e - maximum z location (exclusive) in the chunk to set",
          "\u003ccode\u003eblockData\u003c/code\u003e - the type to set the blocks to"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Get the type of the block at x, y, z. Getting blocks outside the chunk\u0027s bounds returns air.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive"
        ],
        "return": [
          "the type of the block or Material.AIR if x, y or z are outside the chunk\u0027s bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.material.MaterialData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeAndData",
      "comment": "Get the type and data of the block at x, y, z. Getting blocks outside the chunk\u0027s bounds returns air.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive"
        ],
        "return": [
          "the type and data of the block or the MaterialData for air if x, y or z are outside the chunk\u0027s bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Get the type and data of the block at x, y, z. Getting blocks outside the chunk\u0027s bounds returns air.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive"
        ],
        "return": [
          "the data of the block or the BlockData for air if x, y or z are outside the chunk\u0027s bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getData",
      "comment": "Get the block data at x,y,z in the chunk data. Getting blocks outside the chunk\u0027s bounds returns 0.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x location in the chunk from 0-15 inclusive",
          "\u003ccode\u003ey\u003c/code\u003e - the y location in the chunk from minHeight (inclusive) - maxHeight (exclusive)",
          "\u003ccode\u003ez\u003c/code\u003e - the z location in the chunk from 0-15 inclusive"
        ],
        "return": [
          "the block data value or air if x, y or z are outside the chunk\u0027s bounds"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "org.bukkit.generator.ChunkGenerator$ChunkData",
  "tagMap": {}
}