{
  "packageName": "org.bukkit.inventory",
  "simpleName": "PlayerInventory",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.inventory.Inventory",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArmorContents",
      "comment": "Get all ItemStacks from the armor slots",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "All the ItemStacks from the armor slots. Individual items can be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getExtraContents",
      "comment": "Get all additional ItemStacks stored in this inventory. NB: What defines an extra slot is up to the implementation, however it will not be contained within Inventory.getStorageContents() or getArmorContents()",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "All additional ItemStacks. Individual items can be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHelmet",
      "comment": "Return the ItemStack from the helmet slot",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack in the helmet slot"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChestplate",
      "comment": "Return the ItemStack from the chestplate slot",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack in the chestplate slot"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLeggings",
      "comment": "Return the ItemStack from the leg slot",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack in the leg slot"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoots",
      "comment": "Return the ItemStack from the boots slot",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack in the boots slot"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItem",
      "comment": "Stores the ItemStack at the given index of the inventory. Indexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top left corner of the inventory, moving to the right, and moving to the row below it back on the left side when it reaches the end of the row. It follows the same path in the inventory like you would read a book. Indexes 36 through 39 refer to the armor slots. Though you can set armor with this method using these indexes, you are encouraged to use the provided methods for those slots. Index 40 refers to the off hand (shield) item slot. Though you can set off hand with this method using this index, you are encouraged to use the provided method for this slot. If you attempt to use this method with an index less than 0 or greater than 40, an ArrayIndexOutOfBounds exception will be thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setBoots(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetBoots(ItemStack)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setChestplate(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetChestplate(ItemStack)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setHelmet(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetHelmet(ItemStack)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setLeggings(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetLeggings(ItemStack)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setItemInOffHand(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetItemInOffHand(ItemStack)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/Inventory.html#setItem(int,org.bukkit.inventory.ItemStack)\"\u003esetItem\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/Inventory.html\" title\u003d\"interface in org.bukkit.inventory\"\u003eInventory\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index where to put the ItemStack",
          "\u003ccode\u003eitem\u003c/code\u003e - The ItemStack to set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - when index \u0026lt; 0 || index \u0026gt; 40"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.EquipmentSlot",
            "type": "Class"
          },
          "field": {
            "name": "slot"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItem",
      "comment": "Stores the ItemStack at the given equipment slot in the inventory.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setItem(int,org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetItem(int, ItemStack)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eslot\u003c/code\u003e - the slot to put the ItemStack",
          "\u003ccode\u003eitem\u003c/code\u003e - the ItemStack to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.EquipmentSlot",
            "type": "Class"
          },
          "field": {
            "name": "slot"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItem",
      "comment": "Gets the ItemStack at the given equipment slot in the inventory.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eslot\u003c/code\u003e - the slot to get the ItemStack"
        ],
        "return": [
          "the ItemStack in the given slot"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "items"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setArmorContents",
      "comment": "Put the given ItemStacks into the armor slots",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitems\u003c/code\u003e - The ItemStacks to use as armour"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "items"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setExtraContents",
      "comment": "Put the given ItemStacks into the extra slots See getExtraContents() for an explanation of extra slots.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitems\u003c/code\u003e - The ItemStacks to use as extra"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "helmet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHelmet",
      "comment": "Put the given ItemStack into the helmet slot. This does not check if the ItemStack is a helmet",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehelmet\u003c/code\u003e - The ItemStack to use as helmet"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "chestplate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setChestplate",
      "comment": "Put the given ItemStack into the chestplate slot. This does not check if the ItemStack is a chestplate",
      "tagMap": {
        "param": [
          "\u003ccode\u003echestplate\u003c/code\u003e - The ItemStack to use as chestplate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "leggings"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLeggings",
      "comment": "Put the given ItemStack into the leg slot. This does not check if the ItemStack is a pair of leggings",
      "tagMap": {
        "param": [
          "\u003ccode\u003eleggings\u003c/code\u003e - The ItemStack to use as leggings"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "boots"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBoots",
      "comment": "Put the given ItemStack into the boots slot. This does not check if the ItemStack is a boots",
      "tagMap": {
        "param": [
          "\u003ccode\u003eboots\u003c/code\u003e - The ItemStack to use as boots"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemInMainHand",
      "comment": "Gets a copy of the item the player is currently holding in their main hand.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the currently held item"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItemInMainHand",
      "comment": "Sets the item the player is holding in their main hand.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitem\u003c/code\u003e - The item to put into the player\u0027s hand"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemInOffHand",
      "comment": "Gets a copy of the item the player is currently holding in their off hand.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the currently held item"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItemInOffHand",
      "comment": "Sets the item the player is holding in their off hand.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitem\u003c/code\u003e - The item to put into the player\u0027s hand"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemInHand",
      "comment": "Gets a copy of the item the player is currently holding",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#getItemInMainHand()\"\u003e\u003ccode\u003egetItemInMainHand()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#getItemInOffHand()\"\u003e\u003ccode\u003egetItemInOffHand()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the currently held item"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "stack"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItemInHand",
      "comment": "Sets the item the player is holding",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setItemInMainHand(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetItemInMainHand(ItemStack)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/PlayerInventory.html#setItemInOffHand(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetItemInOffHand(ItemStack)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estack\u003c/code\u003e - The item to put into the player\u0027s hand"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHeldItemSlot",
      "comment": "Get the slot number of the currently held item",
      "tagMap": {
        "return": [
          "Held item slot number"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "slot"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHeldItemSlot",
      "comment": "Set the slot number of the currently held item. This validates whether the slot is between 0 and 8 inclusive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eslot\u003c/code\u003e - The new slot number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if slot is not between 0 and 8 inclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.HumanEntity",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHolder",
      "comment": "Description copied from interface: Inventory",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/Inventory.html#getHolder()\"\u003egetHolder\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/Inventory.html\" title\u003d\"interface in org.bukkit.inventory\"\u003eInventory\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The holder of the inventory; null if it has no holder."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.inventory.PlayerInventory",
  "comment": "Interface to the inventory of a Player, including the four armor slots and any extra slots.",
  "tagMap": {}
}