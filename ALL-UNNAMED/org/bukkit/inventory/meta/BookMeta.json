{
  "packageName": "org.bukkit.inventory.meta",
  "simpleName": "BookMeta",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.inventory.meta.ItemMeta",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasTitle",
      "comment": "Checks for the existence of a title in the book.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the book has a title"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTitle",
      "comment": "Gets the title of the book. Plugins should check that hasTitle() returns true before calling this method.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the title of the book"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTitle",
      "comment": "Sets the title of the book. Limited to 32 characters. Removes title when given null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - the title to set"
        ],
        "return": [
          "true if the title was successfully set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasAuthor",
      "comment": "Checks for the existence of an author in the book.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the book has an author"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAuthor",
      "comment": "Gets the author of the book. Plugins should check that hasAuthor() returns true before calling this method.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the author of the book"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAuthor",
      "comment": "Sets the author of the book. Removes author when given null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eauthor\u003c/code\u003e - the author to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasGeneration",
      "comment": "Checks for the existence of generation level in the book.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the book has a generation level"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.meta.BookMeta$Generation",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGeneration",
      "comment": "Gets the generation of the book. Plugins should check that hasGeneration() returns true before calling this method.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the generation of the book"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGeneration",
      "comment": "Sets the generation of the book. Removes generation when given null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003egeneration\u003c/code\u003e - the generation to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasPages",
      "comment": "Checks for the existence of pages in the book.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the book has pages"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPage",
      "comment": "Gets the specified page in the book. The given page must exist. Pages are 1-indexed.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epage\u003c/code\u003e - the page number to get, in range [1, getPageCount()]"
        ],
        "return": [
          "the page from the book"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPage",
      "comment": "Sets the specified page in the book. Pages of the book must be contiguous. The data can be up to 256 characters in length, additional characters are truncated. Pages are 1-indexed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epage\u003c/code\u003e - the page number to set, in range [1, getPageCount()]",
          "\u003ccode\u003edata\u003c/code\u003e - the data to set for that page"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPages",
      "comment": "Gets all the pages in the book.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "list of all the pages in the book"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPages",
      "comment": "Clears the existing book pages, and sets the book to use the provided pages. Maximum 100 pages with 256 characters per page.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epages\u003c/code\u003e - A list of pages to set the book to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPages",
      "comment": "Clears the existing book pages, and sets the book to use the provided pages. Maximum 50 pages with 256 characters per page.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epages\u003c/code\u003e - A list of strings, each being a page"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPage",
      "comment": "Adds new pages to the end of the book. Up to a maximum of 50 pages with 256 characters per page.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epages\u003c/code\u003e - A list of strings, each being a page"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPageCount",
      "comment": "Gets the number of pages in the book.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of pages in the book"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.meta.BookMeta",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clone",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/meta/ItemMeta.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003eItemMeta\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.meta.BookMeta$Spigot",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spigot",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "org.bukkit.inventory.meta.BookMeta$Generation",
    "org.bukkit.inventory.meta.BookMeta$Spigot"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.inventory.meta.BookMeta",
  "comment": "Represents a book (\n\u003ca href\u003d\"../../Material.html#WRITABLE_BOOK\"\u003e\u003ccode\u003eMaterial.WRITABLE_BOOK\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"../../Material.html#WRITTEN_BOOK\"\u003e\u003ccode\u003eMaterial.WRITTEN_BOOK\u003c/code\u003e\u003c/a\u003e) that can have a title, an author, and pages.",
  "tagMap": {}
}