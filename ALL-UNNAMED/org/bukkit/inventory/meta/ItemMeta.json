{
  "packageName": "org.bukkit.inventory.meta",
  "simpleName": "ItemMeta",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.lang.Cloneable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.configuration.serialization.ConfigurationSerializable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.persistence.PersistentDataHolder",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasDisplayName",
      "comment": "Checks for existence of a display name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this has a display name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDisplayName",
      "comment": "Gets the display name that is set. Plugins should check that hasDisplayName() returns true before calling this method.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the display name that is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDisplayName",
      "comment": "Sets the display name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasLocalizedName",
      "comment": "Checks for existence of a localized name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this has a localized name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocalizedName",
      "comment": "Gets the localized display name that is set. Plugins should check that hasLocalizedName() returns true before calling this method.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the localized name that is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLocalizedName",
      "comment": "Sets the localized name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasLore",
      "comment": "Checks for existence of lore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this has lore"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLore",
      "comment": "Gets the lore that is set. Plugins should check if hasLore() returns true before calling this method.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a list of lore that is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLore",
      "comment": "Sets the lore for this item. Removes lore when given null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elore\u003c/code\u003e - the lore that will be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasCustomModelData",
      "comment": "Checks for existence of custom model data. CustomModelData is an integer that may be associated client side with a custom item model.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this has custom model data"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCustomModelData",
      "comment": "Gets the custom model data that is set. CustomModelData is an integer that may be associated client side with a custom item model. Plugins should check that hasCustomModelData() returns true before calling this method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the localized name that is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCustomModelData",
      "comment": "Sets the custom model data. CustomModelData is an integer that may be associated client side with a custom item model.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the data to set, or null to clear"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasEnchants",
      "comment": "Checks for the existence of any enchantments.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if an enchantment exists on this meta"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasEnchant",
      "comment": "Checks for existence of the specified enchantment.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - enchantment to check"
        ],
        "return": [
          "true if this enchantment exists for this meta"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnchantLevel",
      "comment": "Checks for the level of the specified enchantment.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - enchantment to check"
        ],
        "return": [
          "The level that the specified enchantment has, or 0 if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnchants",
      "comment": "Returns a copy the enchantments in this ItemMeta. Returns an empty map if none.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "An immutable copy of the enchantments"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addEnchant",
      "comment": "Adds the specified enchantment to this item meta.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to add",
          "\u003ccode\u003elevel\u003c/code\u003e - Level for the enchantment",
          "\u003ccode\u003eignoreLevelRestriction\u003c/code\u003e - this indicates the enchantment should be applied, ignoring the level limit"
        ],
        "return": [
          "true if the item meta changed as a result of this call, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeEnchant",
      "comment": "Removes the specified enchantment from this item meta.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to remove"
        ],
        "return": [
          "true if the item meta changed as a result of this call, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasConflictingEnchant",
      "comment": "Checks if the specified enchantment conflicts with any enchantments in this ItemMeta.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - enchantment to test"
        ],
        "return": [
          "true if the enchantment conflicts, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addItemFlags",
      "comment": "Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eitemFlags\u003c/code\u003e - The hideflags which shouldn\u0027t be rendered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeItemFlags",
      "comment": "Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eitemFlags\u003c/code\u003e - Hideflags which should be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.inventory.ItemFlag",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemFlags",
      "comment": "Get current set itemFlags. The collection returned is unmodifiable.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "A set of all itemFlags set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasItemFlag",
      "comment": "Check if the specified flag is present on this item.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - the flag to check"
        ],
        "return": [
          "if it is present"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isUnbreakable",
      "comment": "Return if the unbreakable tag is true. An unbreakable item will not lose durability.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the unbreakable tag is true"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUnbreakable",
      "comment": "Sets the unbreakable tag. An unbreakable item will not lose durability.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eunbreakable\u003c/code\u003e - true if set unbreakable"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasAttributeModifiers",
      "comment": "Checks for the existence of any AttributeModifiers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if any AttributeModifiers exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.google.common.collect.Multimap",
        "parameters": [
          {
            "name": "org.bukkit.attribute.Attribute",
            "type": "Class"
          },
          {
            "name": "org.bukkit.attribute.AttributeModifier",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeModifiers",
      "comment": "Return an immutable copy of all Attributes and their modifiers in this ItemMeta. Returns null if none exist.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "an immutable \n\u003ca href\u003d\"https://guava.dev/releases/21.0/api/docs/com/google/common/collect/Multimap.html\" title\u003d\"class or interface in com.google.common.collect\" class\u003d\"external-link\"\u003e\u003ccode\u003eMultimap\u003c/code\u003e\u003c/a\u003e of Attributes and their AttributeModifiers, or null if none exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.google.common.collect.Multimap",
        "parameters": [
          {
            "name": "org.bukkit.attribute.Attribute",
            "type": "Class"
          },
          {
            "name": "org.bukkit.attribute.AttributeModifier",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeModifiers",
      "comment": "Return an immutable copy of all Attributes and their AttributeModifiers for a given EquipmentSlot. Any AttributeModifier that does have have a given EquipmentSlot will be returned. This is because AttributeModifiers without a slot are active in any slot. If there are no attributes set for the given slot, an empty map will be returned.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eslot\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/EquipmentSlot.html\" title\u003d\"enum in org.bukkit.inventory\"\u003e\u003ccode\u003eEquipmentSlot\u003c/code\u003e\u003c/a\u003e to check"
        ],
        "return": [
          "the immutable \n\u003ca href\u003d\"https://guava.dev/releases/21.0/api/docs/com/google/common/collect/Multimap.html\" title\u003d\"class or interface in com.google.common.collect\" class\u003d\"external-link\"\u003e\u003ccode\u003eMultimap\u003c/code\u003e\u003c/a\u003e with the respective Attributes and modifiers, or an empty map if no attributes are set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.attribute.AttributeModifier",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeModifiers",
      "comment": "Return an immutable copy of all AttributeModifiers for a given Attribute",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/Attribute.html\" title\u003d\"enum in org.bukkit.attribute\"\u003e\u003ccode\u003eAttribute\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if Attribute is null"
        ],
        "return": [
          "an immutable collection of \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/AttributeModifier.html\" title\u003d\"class in org.bukkit.attribute\"\u003e\u003ccode\u003eAttributeModifier\u003c/code\u003e\u003c/a\u003es or null if no AttributeModifiers exist for the Attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addAttributeModifier",
      "comment": "Add an Attribute and it\u0027s Modifier. AttributeModifiers can now support EquipmentSlots. If not set, the AttributeModifier will be active in ALL slots. Two AttributeModifiers that have the same UUID cannot exist on the same Attribute.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/Attribute.html\" title\u003d\"enum in org.bukkit.attribute\"\u003e\u003ccode\u003eAttribute\u003c/code\u003e\u003c/a\u003e to modify",
          "\u003ccode\u003emodifier\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/AttributeModifier.html\" title\u003d\"class in org.bukkit.attribute\"\u003e\u003ccode\u003eAttributeModifier\u003c/code\u003e\u003c/a\u003e specifying the modification"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if Attribute is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if AttributeModifier is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if AttributeModifier already exists"
        ],
        "return": [
          "true if the Attribute and AttributeModifier were successfully added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAttributeModifiers",
      "comment": "Set all Attributes and their AttributeModifiers. To clear all currently set Attributes and AttributeModifiers use null or an empty Multimap. If not null nor empty, this will filter all entries that are not-null and add them to the ItemStack.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattributeModifiers\u003c/code\u003e - the new Multimap containing the Attributes and their AttributeModifiers"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAttributeModifier",
      "comment": "Remove all AttributeModifiers associated with the given Attribute. This will return false if nothing was removed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - attribute to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if Attribute is null"
        ],
        "return": [
          "true if all modifiers were removed from a given Attribute. Returns false if no attributes were removed."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAttributeModifier",
      "comment": "Remove all Attributes and AttributeModifiers for a given EquipmentSlot. If the given EquipmentSlot is null, this will remove all AttributeModifiers that do not have an EquipmentSlot set.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eslot\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/EquipmentSlot.html\" title\u003d\"enum in org.bukkit.inventory\"\u003e\u003ccode\u003eEquipmentSlot\u003c/code\u003e\u003c/a\u003e to clear all Attributes and their modifiers for"
        ],
        "return": [
          "true if all modifiers were removed that match the given EquipmentSlot."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAttributeModifier",
      "comment": "Remove a specific Attribute and AttributeModifier. AttributeModifiers are matched according to their UUID.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/AttributeModifier.html#getUniqueId()\"\u003e\u003ccode\u003eAttributeModifier.getUniqueId()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/Attribute.html\" title\u003d\"enum in org.bukkit.attribute\"\u003e\u003ccode\u003eAttribute\u003c/code\u003e\u003c/a\u003e to remove",
          "\u003ccode\u003emodifier\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/attribute/AttributeModifier.html\" title\u003d\"class in org.bukkit.attribute\"\u003e\u003ccode\u003eAttributeModifier\u003c/code\u003e\u003c/a\u003e to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the Attribute is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the AttributeModifier is null"
        ],
        "return": [
          "if any attribute modifiers were remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.meta.tags.CustomItemTagContainer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCustomTagContainer",
      "comment": "Returns a public custom tag container capable of storing tags on the item. Those tags will be sent to the client with all of their content, so the client is capable of reading them. This will result in the player seeing a NBT Tag notification on the item. These tags can also be modified by the client once in creative mode",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the custom tag container"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setVersion",
      "comment": "Internal use only! Do not use under any circumstances!",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eversion\u003c/code\u003e - version"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.meta.ItemMeta",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clone",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.inventory.meta.ItemMeta",
  "comment": "This type represents the storage mechanism for auxiliary item data. \n\u003cp\u003e An implementation will handle the creation and application for ItemMeta. This class should not be implemented by a plugin in a live environment.\u003c/p\u003e",
  "tagMap": {}
}