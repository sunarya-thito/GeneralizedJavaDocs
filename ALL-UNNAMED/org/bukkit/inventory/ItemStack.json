{
  "packageName": "org.bukkit.inventory",
  "simpleName": "ItemStack",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Gets the type of this item",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Type of the items in this stack"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setType",
      "comment": "Sets the type of this item Note that in doing so you will reset the MaterialData for this stack. IMPORTANT: An ItemStack is only designed to contain items. Do not use this class to encapsulate Materials for which Material.isItem() returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - New type to set the items in this stack to"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAmount",
      "comment": "Gets the amount of items in this stack",
      "tagMap": {
        "return": [
          "Amount of items in this stack"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAmount",
      "comment": "Sets the amount of items in this stack",
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - New amount of items in this stack"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.material.MaterialData",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getData",
      "comment": "Gets the MaterialData for this stack of items",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "MaterialData for this item"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.material.MaterialData",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setData",
      "comment": "Sets the MaterialData for this stack of items",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - New MaterialData for this item"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "durability"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDurability",
      "comment": "Sets the durability of this item",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edurability\u003c/code\u003e - Durability of this item"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDurability",
      "comment": "Gets the durability of this item",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "return": [
          "Durability of this item"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxStackSize",
      "comment": "Get the maximum stacksize for the material hold in this ItemStack. (Returns -1 if it has no idea)",
      "tagMap": {
        "return": [
          "The maximum you can stack this material to."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "stack"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSimilar",
      "comment": "This method is the same as equals, but does not consider stack size (amount).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estack\u003c/code\u003e - the item stack to compare to"
        ],
        "return": [
          "true if the two stacks are equal, ignoring the amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          "field": {
            "name": "ench"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsEnchantment",
      "comment": "Checks if this ItemStack contains the given Enchantment",
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to test"
        ],
        "return": [
          "True if this has the given enchantment"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          "field": {
            "name": "ench"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnchantmentLevel",
      "comment": "Gets the level of the specified enchantment on this item stack",
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to check"
        ],
        "return": [
          "Level of the enchantment, or 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnchantments",
      "comment": "Gets a map containing all enchantments and their levels on this item.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Map of enchantments."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "org.bukkit.enchantments.Enchantment",
                "type": "Class"
              },
              {
                "name": "java.lang.Integer",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "enchantments"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addEnchantments",
      "comment": "Adds the specified enchantments to this item stack. This method is the same as calling addEnchantment(org.bukkit.enchantments.Enchantment, int) for each element of the map.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eenchantments\u003c/code\u003e - Enchantments to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified enchantments is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any specific enchantment or level is null. \n\u003cb\u003eWarning\u003c/b\u003e: Some enchantments may be added before this exception is thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          "field": {
            "name": "ench"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "level"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addEnchantment",
      "comment": "Adds the specified Enchantment to this item stack. If this item stack already contained the given enchantment (at any level), it will be replaced.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to add",
          "\u003ccode\u003elevel\u003c/code\u003e - Level of the enchantment"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if enchantment null, or enchantment is not applicable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "org.bukkit.enchantments.Enchantment",
                "type": "Class"
              },
              {
                "name": "java.lang.Integer",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "enchantments"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addUnsafeEnchantments",
      "comment": "Adds the specified enchantments to this item stack in an unsafe manner. This method is the same as calling addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int) for each element of the map.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eenchantments\u003c/code\u003e - Enchantments to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          "field": {
            "name": "ench"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "level"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addUnsafeEnchantment",
      "comment": "Adds the specified Enchantment to this item stack. If this item stack already contained the given enchantment (at any level), it will be replaced. This method is unsafe and will ignore level restrictions or item type. Use at your own discretion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to add",
          "\u003ccode\u003elevel\u003c/code\u003e - Level of the enchantment"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.enchantments.Enchantment",
            "type": "Class"
          },
          "field": {
            "name": "ench"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeEnchantment",
      "comment": "Removes the specified Enchantment if it exists on this ItemStack",
      "tagMap": {
        "param": [
          "\u003ccode\u003eench\u003c/code\u003e - Enchantment to remove"
        ],
        "return": [
          "Previous level, or 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "serialize",
      "comment": "Description copied from interface: ConfigurationSerializable",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html#serialize()\"\u003eserialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003eConfigurationSerializable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Map containing the current state of this class"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Object",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "args"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "deserialize",
      "comment": "Required method for configuration serialization",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eargs\u003c/code\u003e - map to deserialize"
        ],
        "return": [
          "deserialized item stack"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.meta.ItemMeta",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getItemMeta",
      "comment": "Get a copy of this ItemStack\u0027s ItemMeta.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "a copy of the current ItemStack\u0027s ItemData"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasItemMeta",
      "comment": "Checks to see if any meta data has been defined.",
      "tagMap": {
        "return": [
          "Returns true if some meta data has been set for this item"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.meta.ItemMeta",
            "type": "Class"
          },
          "field": {
            "name": "itemMeta"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setItemMeta",
      "comment": "Set the ItemMeta of this ItemStack.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitemMeta\u003c/code\u003e - new ItemMeta, or null to indicate meta data be cleared."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the item meta was not created by the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/ItemFactory.html\" title\u003d\"interface in org.bukkit.inventory\"\u003e\u003ccode\u003eItemFactory\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "True if successfully applied ItemMeta, see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/ItemFactory.html#isApplicable(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003eItemFactory.isApplicable(ItemMeta, ItemStack)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Defaults stack size to 1, with no extra data. IMPORTANT: An ItemStack is only designed to contain items. Do not use this class to encapsulate Materials for which Material.isItem() returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - item material"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "An item stack with no extra data. IMPORTANT: An ItemStack is only designed to contain items. Do not use this class to encapsulate Materials for which Material.isItem() returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - item material",
          "\u003ccode\u003eamount\u003c/code\u003e - stack size"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "damage"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "An item stack with the specified damage / durability",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - item material",
          "\u003ccode\u003eamount\u003c/code\u003e - stack size",
          "\u003ccode\u003edamage\u003c/code\u003e - durability / damage"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "damage"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.Byte",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type",
          "\u003ccode\u003eamount\u003c/code\u003e - the amount in the stack",
          "\u003ccode\u003edamage\u003c/code\u003e - the damage value of the item",
          "\u003ccode\u003edata\u003c/code\u003e - the data value or null"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "stack"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new item stack derived from the specified stack",
      "tagMap": {
        "param": [
          "\u003ccode\u003estack\u003c/code\u003e - the stack to copy"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified stack is null or returns an item meta not created by the item factory"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.inventory.ItemStack",
  "comment": "Represents a stack of items. \n\u003cp\u003e \u003cb\u003eIMPORTANT: An \u003ci\u003eItem\u003c/i\u003eStack is only designed to contain \u003ci\u003eitems\u003c/i\u003e. Do not use this class to encapsulate Materials for which \u003ca href\u003d\"../Material.html#isItem()\"\u003e\u003ccode\u003eMaterial.isItem()\u003c/code\u003e\u003c/a\u003e returns false.\u003c/b\u003e\u003c/p\u003e",
  "tagMap": {}
}