{
  "packageName": "org.bukkit",
  "simpleName": "World",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.RegionAccessor",
      "type": "Class"
    },
    {
      "name": "org.bukkit.generator.WorldInfo",
      "type": "Class"
    },
    {
      "name": "org.bukkit.plugin.messaging.PluginMessageRecipient",
      "type": "Class"
    },
    {
      "name": "org.bukkit.metadata.Metadatable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockAt",
      "comment": "Gets the Block at the given coordinates",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block"
        ],
        "return": [
          "Block at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockAt",
      "comment": "Gets the Block at the given Location",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location of the block"
        ],
        "return": [
          "Block at the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockYAt",
      "comment": "Gets the highest non-empty (impassable) coordinate at the given coordinates.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the blocks",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the blocks"
        ],
        "return": [
          "Y-coordinate of the highest non-empty block"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockYAt",
      "comment": "Gets the highest non-empty (impassable) coordinate at the given Location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location of the blocks"
        ],
        "return": [
          "Y-coordinate of the highest non-empty block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockAt",
      "comment": "Gets the highest non-empty (impassable) block at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block"
        ],
        "return": [
          "Highest non-empty block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockAt",
      "comment": "Gets the highest non-empty (impassable) block at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Coordinates to get the highest block"
        ],
        "return": [
          "Highest non-empty block"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.HeightMap",
            "type": "Class"
          },
          "name": "heightMap",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockYAt",
      "comment": "Gets the highest coordinate corresponding to the HeightMap at the given coordinates.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the blocks",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the blocks",
          "\u003ccode\u003eheightMap\u003c/code\u003e - the heightMap that is used to determine the highest point"
        ],
        "return": [
          "Y-coordinate of the highest block corresponding to the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/HeightMap.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eHeightMap\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.HeightMap",
            "type": "Class"
          },
          "name": "heightMap",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockYAt",
      "comment": "Gets the highest coordinate corresponding to the HeightMap at the given Location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location of the blocks",
          "\u003ccode\u003eheightMap\u003c/code\u003e - the heightMap that is used to determine the highest point"
        ],
        "return": [
          "Y-coordinate of the highest block corresponding to the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/HeightMap.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eHeightMap\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.HeightMap",
            "type": "Class"
          },
          "name": "heightMap",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockAt",
      "comment": "Gets the highest block corresponding to the HeightMap at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block",
          "\u003ccode\u003eheightMap\u003c/code\u003e - the heightMap that is used to determine the highest point"
        ],
        "return": [
          "Highest block corresponding to the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/HeightMap.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eHeightMap\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.HeightMap",
            "type": "Class"
          },
          "name": "heightMap",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHighestBlockAt",
      "comment": "Gets the highest block corresponding to the HeightMap at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Coordinates to get the highest block",
          "\u003ccode\u003eheightMap\u003c/code\u003e - the heightMap that is used to determine the highest point"
        ],
        "return": [
          "Highest block corresponding to the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/HeightMap.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eHeightMap\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunkAt",
      "comment": "Gets the Chunk at the given coordinates",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "Chunk at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunkAt",
      "comment": "Gets the Chunk at the given Location",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location of the chunk"
        ],
        "return": [
          "Chunk at the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          },
          "name": "block",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunkAt",
      "comment": "Gets the Chunk that contains the given Block",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eblock\u003c/code\u003e - Block to get the containing chunk from"
        ],
        "return": [
          "The chunk that contains the given block"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Chunk",
            "type": "Class"
          },
          "name": "chunk",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isChunkLoaded",
      "comment": "Checks if the specified Chunk is loaded",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echunk\u003c/code\u003e - The chunk to check"
        ],
        "return": [
          "true if the chunk is loaded, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLoadedChunks",
      "comment": "Gets an array of all loaded Chunks",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Chunk[] containing all loaded chunks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Chunk",
            "type": "Class"
          },
          "name": "chunk",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadChunk",
      "comment": "Loads the specified Chunk. This method will keep the specified chunk loaded until one of the unload methods is manually called. Callers are advised to instead use getChunkAt which will only temporarily load the requested chunk.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echunk\u003c/code\u003e - The chunk to load"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isChunkLoaded",
      "comment": "Checks if the Chunk at the specified coordinates is loaded",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "true if the chunk is loaded, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isChunkGenerated",
      "comment": "Checks if the Chunk at the specified coordinates is generated",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "true if the chunk is generated, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isChunkInUse",
      "comment": "Checks if the Chunk at the specified coordinates is loaded and in use by one or more players",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "true if the chunk is loaded and in use by one or more players, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadChunk",
      "comment": "Loads the Chunk at the specified coordinates. This method will keep the specified chunk loaded until one of the unload methods is manually called. Callers are advised to instead use getChunkAt which will only temporarily load the requested chunk. If the chunk does not exist, it will be generated. This method is analogous to loadChunk(int, int, boolean) where generate is true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "generate",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadChunk",
      "comment": "Loads the Chunk at the specified coordinates. This method will keep the specified chunk loaded until one of the unload methods is manually called. Callers are advised to instead use getChunkAt which will only temporarily load the requested chunk.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk",
          "\u003ccode\u003egenerate\u003c/code\u003e - Whether or not to generate a chunk if it doesn\u0027t already exist"
        ],
        "return": [
          "true if the chunk has loaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Chunk",
            "type": "Class"
          },
          "name": "chunk",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unloadChunk",
      "comment": "Safely unloads and saves the Chunk at the specified coordinates This method is analogous to unloadChunk(int, int, boolean) where save is true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echunk\u003c/code\u003e - the chunk to unload"
        ],
        "return": [
          "true if the chunk has unloaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unloadChunk",
      "comment": "Safely unloads and saves the Chunk at the specified coordinates This method is analogous to unloadChunk(int, int, boolean) where save is true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "true if the chunk has unloaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "save",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unloadChunk",
      "comment": "Safely unloads and optionally saves the Chunk at the specified coordinates.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk",
          "\u003ccode\u003esave\u003c/code\u003e - Whether or not to save the chunk"
        ],
        "return": [
          "true if the chunk has unloaded successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unloadChunkRequest",
      "comment": "Safely queues the Chunk at the specified coordinates for unloading.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "true is the queue attempt was successful, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "regenerateChunk",
      "comment": "Regenerates the Chunk at the specified coordinates",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "Whether the chunk was actually regenerated"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "refreshChunk",
      "comment": "Resends the Chunk to all clients",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "Whether the chunk was actually refreshed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isChunkForceLoaded",
      "comment": "Gets whether the chunk at the specified chunk coordinates is force loaded. A force loaded chunk will not be unloaded due to lack of player activity.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "force load status"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "forced",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setChunkForceLoaded",
      "comment": "Sets whether the chunk at the specified chunk coordinates is force loaded. A force loaded chunk will not be unloaded due to lack of player activity.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk",
          "\u003ccode\u003eforced\u003c/code\u003e - force load status"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.Chunk",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getForceLoadedChunks",
      "comment": "Returns all force loaded chunks in this world. A force loaded chunk will not be unloaded due to lack of player activity.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "unmodifiable collection of force loaded chunks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "name": "plugin",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPluginChunkTicket",
      "comment": "Adds a plugin ticket for the specified chunk, loading the chunk if it is not already loaded. A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eremovePluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk",
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin which owns the ticket"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If the specified plugin is not enabled"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a plugin ticket was added, \n\u003ccode\u003efalse\u003c/code\u003e if the ticket already exists for the plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "name": "plugin",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePluginChunkTicket",
      "comment": "Removes the specified plugin\u0027s ticket for the specified chunk A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eaddPluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk",
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin which owns the ticket"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the plugin ticket was removed, \n\u003ccode\u003efalse\u003c/code\u003e if there is no plugin ticket for the chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "name": "plugin",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePluginChunkTickets",
      "comment": "Removes all plugin tickets for the specified plugin A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eaddPluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eremovePluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Specified plugin"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPluginChunkTickets",
      "comment": "Retrieves a collection specifying which plugins have tickets for the specified chunk. This collection is not updated when plugin tickets are added or removed to the chunk. A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eaddPluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eremovePluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the chunk"
        ],
        "return": [
          "unmodifiable collection containing which plugins have tickets for the chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "org.bukkit.Chunk",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPluginChunkTickets",
      "comment": "Returns a map of which plugins have tickets for what chunks. The returned map is not updated when plugin tickets are added or removed to chunks. If a plugin has no tickets, it will be absent from the map. A plugin ticket will prevent a chunk from unloading until it is explicitly removed. A plugin instance may only have one ticket per chunk, but each chunk can have multiple plugin tickets.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eaddPluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003eremovePluginChunkTicket(int, int, Plugin)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "unmodifiable map containing which plugins have tickets for what chunks"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Item",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "item",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dropItem",
      "comment": "Drops an item at the specified Location",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to drop the item",
          "\u003ccode\u003eitem\u003c/code\u003e - ItemStack to drop"
        ],
        "return": [
          "ItemDrop entity created as a result of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Item",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "item",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Consumer",
            "parameters": [
              {
                "name": "org.bukkit.entity.Item",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dropItem",
      "comment": "Drops an item at the specified Location Note that functions will run before the entity is spawned",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to drop the item",
          "\u003ccode\u003eitem\u003c/code\u003e - ItemStack to drop",
          "\u003ccode\u003efunction\u003c/code\u003e - the function to be run before the entity is spawned."
        ],
        "return": [
          "ItemDrop entity created as a result of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Item",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "item",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dropItemNaturally",
      "comment": "Drops an item at the specified Location with a random offset",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to drop the item",
          "\u003ccode\u003eitem\u003c/code\u003e - ItemStack to drop"
        ],
        "return": [
          "ItemDrop entity created as a result of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Item",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "item",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Consumer",
            "parameters": [
              {
                "name": "org.bukkit.entity.Item",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dropItemNaturally",
      "comment": "Drops an item at the specified Location with a random offset Note that functions will run before the entity is spawned",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to drop the item",
          "\u003ccode\u003eitem\u003c/code\u003e - ItemStack to drop",
          "\u003ccode\u003efunction\u003c/code\u003e - the function to be run before the entity is spawned."
        ],
        "return": [
          "ItemDrop entity created as a result of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Arrow",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "speed",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "spread",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnArrow",
      "comment": "Creates an Arrow entity at the given Location",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to spawn the arrow",
          "\u003ccode\u003edirection\u003c/code\u003e - Direction to shoot the arrow in",
          "\u003ccode\u003espeed\u003c/code\u003e - Speed of the arrow. A recommend speed is 0.6",
          "\u003ccode\u003espread\u003c/code\u003e - Spread of the arrow. A recommend spread is 12"
        ],
        "return": [
          "Arrow entity spawned as a result of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "speed",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "spread",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.AbstractArrow",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnArrow",
      "comment": "Creates an arrow entity of the given class at the given Location",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of arrow to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to spawn the arrow",
          "\u003ccode\u003edirection\u003c/code\u003e - Direction to shoot the arrow in",
          "\u003ccode\u003espeed\u003c/code\u003e - Speed of the arrow. A recommend speed is 0.6",
          "\u003ccode\u003espread\u003c/code\u003e - Spread of the arrow. A recommend spread is 12",
          "\u003ccode\u003eclazz\u003c/code\u003e - the Entity class for the arrow \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/SpectralArrow.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eSpectralArrow\u003c/code\u003e\u003c/a\u003e,\n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Arrow.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eArrow\u003c/code\u003e\u003c/a\u003e,\n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/TippedArrow.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eTippedArrow\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "Arrow entity spawned as a result of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.TreeType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "generateTree",
      "comment": "Creates a tree at the given Location",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to spawn the tree",
          "\u003ccode\u003etype\u003c/code\u003e - Type of the tree to create"
        ],
        "return": [
          "true if the tree was created successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.TreeType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.BlockChangeDelegate",
            "type": "Class"
          },
          "name": "delegate",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "generateTree",
      "comment": "Creates a tree at the given Location",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html#generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType,org.bukkit.util.Consumer)\"\u003e\u003ccode\u003eRegionAccessor.generateTree(org.bukkit.Location, java.util.Random, org.bukkit.TreeType, org.bukkit.util.Consumer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to spawn the tree",
          "\u003ccode\u003etype\u003c/code\u003e - Type of the tree to create",
          "\u003ccode\u003edelegate\u003c/code\u003e - A class to call for each block changed as a result of this method"
        ],
        "return": [
          "true if the tree was created successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.LightningStrike",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "strikeLightning",
      "comment": "Strikes lightning at the given Location",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location to strike lightning"
        ],
        "return": [
          "The lightning entity."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.LightningStrike",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "strikeLightningEffect",
      "comment": "Strikes lightning at the given Location without doing damage",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location to strike lightning"
        ],
        "return": [
          "The lightning entity."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntities",
      "comment": "Get a list of all entities in this World",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html#getEntities()\"\u003egetEntities\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html\" title\u003d\"interface in org.bukkit\"\u003eRegionAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A List of all Entities currently residing in this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLivingEntities",
      "comment": "Get a list of all living entities in this World",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html#getLivingEntities()\"\u003egetLivingEntities\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html\" title\u003d\"interface in org.bukkit\"\u003eRegionAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A List of all LivingEntities currently residing in this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "classes",
          "varargs": true
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntitiesByClass",
      "comment": "Get a collection of all entities in this World matching the given class/interface",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - an entity subclass"
        ],
        "param": [
          "\u003ccode\u003eclasses\u003c/code\u003e - The classes representing the types of entity to match"
        ],
        "return": [
          "A List of all Entities currently residing in this world that match the given class/interface"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "cls",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntitiesByClass",
      "comment": "Get a collection of all entities in this World matching the given class/interface",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - an entity subclass"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html#getEntitiesByClass(java.lang.Class)\"\u003egetEntitiesByClass\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html\" title\u003d\"interface in org.bukkit\"\u003eRegionAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecls\u003c/code\u003e - The class representing the type of entity to match"
        ],
        "return": [
          "A List of all Entities currently residing in this world that match the given class/interface"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "classes",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntitiesByClasses",
      "comment": "Get a collection of all entities in this World matching any of the given classes/interfaces",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html#getEntitiesByClasses(java.lang.Class...)\"\u003egetEntitiesByClasses\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/RegionAccessor.html\" title\u003d\"interface in org.bukkit\"\u003eRegionAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eclasses\u003c/code\u003e - The classes representing the types of entity to match"
        ],
        "return": [
          "A List of all Entities currently residing in this world that match one or more of the given classes/interfaces"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayers",
      "comment": "Get a list of all players in this World",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "A list of all Players currently residing in this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNearbyEntities",
      "comment": "Returns a list of entities within a bounding box centered around a Location. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the size of the search bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The center of the bounding box",
          "\u003ccode\u003ex\u003c/code\u003e - 1/2 the size of the box along x axis",
          "\u003ccode\u003ey\u003c/code\u003e - 1/2 the size of the box along y axis",
          "\u003ccode\u003ez\u003c/code\u003e - 1/2 the size of the box along z axis"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Entity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNearbyEntities",
      "comment": "Returns a list of entities within a bounding box centered around a Location. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the size of the search bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The center of the bounding box",
          "\u003ccode\u003ex\u003c/code\u003e - 1/2 the size of the box along x axis",
          "\u003ccode\u003ey\u003c/code\u003e - 1/2 the size of the box along y axis",
          "\u003ccode\u003ez\u003c/code\u003e - 1/2 the size of the box along z axis",
          "\u003ccode\u003efilter\u003c/code\u003e - only entities that fulfill this predicate are considered, or \n\u003ccode\u003enull\u003c/code\u003e to consider all entities"
        ],
        "return": [
          "the collection of entities near location. This will always be a non-null collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.BoundingBox",
            "type": "Class"
          },
          "name": "boundingBox",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNearbyEntities",
      "comment": "Returns a list of entities within the given bounding box. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the size of the search bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eboundingBox\u003c/code\u003e - the bounding box"
        ],
        "return": [
          "the collection of entities within the bounding box, will always be a non-null collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.BoundingBox",
            "type": "Class"
          },
          "name": "boundingBox",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Entity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNearbyEntities",
      "comment": "Returns a list of entities within the given bounding box. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the size of the search bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eboundingBox\u003c/code\u003e - the bounding box",
          "\u003ccode\u003efilter\u003c/code\u003e - only entities that fulfill this predicate are considered, or \n\u003ccode\u003enull\u003c/code\u003e to consider all entities"
        ],
        "return": [
          "the collection of entities within the bounding box, will always be a non-null collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceEntities",
      "comment": "Performs a ray trace that checks for entity collisions. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double,java.util.function.Predicate)\"\u003e\u003ccode\u003erayTraceEntities(Location, Vector, double, double, Predicate)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start position",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance"
        ],
        "return": [
          "the closest ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "raySize",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceEntities",
      "comment": "Performs a ray trace that checks for entity collisions. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double,java.util.function.Predicate)\"\u003e\u003ccode\u003erayTraceEntities(Location, Vector, double, double, Predicate)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start position",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003eraySize\u003c/code\u003e - entity bounding boxes will be uniformly expanded (or shrinked) by this value before doing collision checks"
        ],
        "return": [
          "the closest ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Entity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceEntities",
      "comment": "Performs a ray trace that checks for entity collisions. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double,java.util.function.Predicate)\"\u003e\u003ccode\u003erayTraceEntities(Location, Vector, double, double, Predicate)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start position",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003efilter\u003c/code\u003e - only entities that fulfill this predicate are considered, or \n\u003ccode\u003enull\u003c/code\u003e to consider all entities"
        ],
        "return": [
          "the closest ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "raySize",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Entity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceEntities",
      "comment": "Performs a ray trace that checks for entity collisions. This may not consider entities in currently unloaded chunks. Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start position",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003eraySize\u003c/code\u003e - entity bounding boxes will be uniformly expanded (or shrinked) by this value before doing collision checks",
          "\u003ccode\u003efilter\u003c/code\u003e - only entities that fulfill this predicate are considered, or \n\u003ccode\u003enull\u003c/code\u003e to consider all entities"
        ],
        "return": [
          "the closest ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceBlocks",
      "comment": "Performs a ray trace that checks for block collisions using the blocks\u0027 precise collision shapes. This takes collisions with passable blocks into account, but ignores fluids. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean)\"\u003e\u003ccode\u003erayTraceBlocks(Location, Vector, double, FluidCollisionMode, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start location",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance"
        ],
        "return": [
          "the ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.FluidCollisionMode",
            "type": "Class"
          },
          "name": "fluidCollisionMode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceBlocks",
      "comment": "Performs a ray trace that checks for block collisions using the blocks\u0027 precise collision shapes. This takes collisions with passable blocks into account. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean)\"\u003e\u003ccode\u003erayTraceBlocks(Location, Vector, double, FluidCollisionMode, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start location",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003efluidCollisionMode\u003c/code\u003e - the fluid collision mode"
        ],
        "return": [
          "the ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.FluidCollisionMode",
            "type": "Class"
          },
          "name": "fluidCollisionMode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "ignorePassableBlocks",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceBlocks",
      "comment": "Performs a ray trace that checks for block collisions using the blocks\u0027 precise collision shapes. If collisions with passable blocks are ignored, fluid collisions are ignored as well regardless of the fluid collision mode. Portal blocks are only considered passable if the ray starts within them. Apart from that collisions with portal blocks will be considered even if collisions with passable blocks are otherwise ignored. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start location",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003efluidCollisionMode\u003c/code\u003e - the fluid collision mode",
          "\u003ccode\u003eignorePassableBlocks\u003c/code\u003e - whether to ignore passable but collidable blocks (ex. tall grass, signs, fluids, ..)"
        ],
        "return": [
          "the ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.FluidCollisionMode",
            "type": "Class"
          },
          "name": "fluidCollisionMode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "ignorePassableBlocks",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "raySize",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "name": "org.bukkit.entity.Entity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTrace",
      "comment": "Performs a ray trace that checks for both block and entity collisions. Block collisions use the blocks\u0027 precise collision shapes. The raySize parameter is only taken into account for entity collision checks. If collisions with passable blocks are ignored, fluid collisions are ignored as well regardless of the fluid collision mode. Portal blocks are only considered passable if the ray starts within them. Apart from that collisions with portal blocks will be considered even if collisions with passable blocks are otherwise ignored. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start location",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003efluidCollisionMode\u003c/code\u003e - the fluid collision mode",
          "\u003ccode\u003eignorePassableBlocks\u003c/code\u003e - whether to ignore passable but collidable blocks (ex. tall grass, signs, fluids, ..)",
          "\u003ccode\u003eraySize\u003c/code\u003e - entity bounding boxes will be uniformly expanded (or shrinked) by this value before doing collision checks",
          "\u003ccode\u003efilter\u003c/code\u003e - only entities that fulfill this predicate are considered, or \n\u003ccode\u003enull\u003c/code\u003e to consider all entities"
        ],
        "return": [
          "the closest ray trace hit result with either a block or an entity, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpawnLocation",
      "comment": "Gets the default spawn Location of this world",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The spawn location of this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnLocation",
      "comment": "Sets the spawn location of the world. The location provided must be equal to this world.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e to set the spawn for this world at."
        ],
        "return": [
          "True if it was successfully set."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "angle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnLocation",
      "comment": "Sets the spawn location of the world",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate",
          "\u003ccode\u003eangle\u003c/code\u003e - the angle"
        ],
        "return": [
          "True if it was successfully set."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnLocation",
      "comment": "Sets the spawn location of the world",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate"
        ],
        "return": [
          "True if it was successfully set."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTime",
      "comment": "Gets the relative in-game time of this world. The relative time is analogous to hours * 1000",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#getFullTime()\"\u003e\u003ccode\u003eReturns an absolute time of this world\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The current relative time"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the relative in-game time on the server. The relative time is analogous to hours * 1000 Note that setting the relative time below the current relative time will actually move the clock forward a day. If you require to rewind time, please see setFullTime(long)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#setFullTime(long)\"\u003e\u003ccode\u003eSets the absolute time of this world\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - The new relative time to set the in-game time to (in hours*1000)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFullTime",
      "comment": "Gets the full in-game time on this world",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#getTime()\"\u003e\u003ccode\u003eReturns a relative time of this world\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The current absolute time"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFullTime",
      "comment": "Sets the in-game time on the server Note that this sets the full time of the world, which may cause adverse effects such as breaking redstone clocks and any scheduled events",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#setTime(long)\"\u003e\u003ccode\u003eSets the relative time of this world\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - The new absolute time to set this world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGameTime",
      "comment": "Gets the full in-game time on this world since the world generation",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#getTime()\"\u003e\u003ccode\u003eReturns a relative time of this world\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/World.html#getFullTime()\"\u003e\u003ccode\u003eReturns an absolute time of this world\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The current absolute time since the world generation"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasStorm",
      "comment": "Returns whether the world has an ongoing storm.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Whether there is an ongoing storm"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "hasStorm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setStorm",
      "comment": "Set whether there is a storm. A duration will be set for the new current conditions. This will implicitly call setClearWeatherDuration(int) with 0 ticks to reset the world\u0027s clear weather.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehasStorm\u003c/code\u003e - Whether there is rain and snow"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWeatherDuration",
      "comment": "Get the remaining time in ticks of the current conditions.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Time in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "duration",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWeatherDuration",
      "comment": "Set the remaining time in ticks of the current conditions.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - Time in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isThundering",
      "comment": "Returns whether there is thunder.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Whether there is thunder"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "thundering",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setThundering",
      "comment": "Set whether it is thundering. This will implicitly call setClearWeatherDuration(int) with 0 ticks to reset the world\u0027s clear weather.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethundering\u003c/code\u003e - Whether it is thundering"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getThunderDuration",
      "comment": "Get the thundering duration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Duration in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "duration",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setThunderDuration",
      "comment": "Set the thundering duration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - Duration in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isClearWeather",
      "comment": "Returns whether the world has clear weather. This will be true such that isThundering() and hasStorm() are both false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if clear weather"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "duration",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClearWeatherDuration",
      "comment": "Set the clear weather duration. The clear weather ticks determine whether or not the world will be allowed to rain or storm. If clear weather ticks are \u003e 0, the world will not naturally do either until the duration has elapsed. This method is equivalent to calling /weather clear with a set amount of ticks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - duration in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClearWeatherDuration",
      "comment": "Get the clear weather duration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "duration in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "setFire",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power and optionally setting blocks on fire.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "setFire",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "breakBlocks",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power and optionally setting blocks on fire or breaking blocks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire",
          "\u003ccode\u003ebreakBlocks\u003c/code\u003e - Whether or not to have blocks be destroyed"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "setFire",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "breakBlocks",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power and optionally setting blocks on fire or breaking blocks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire",
          "\u003ccode\u003ebreakBlocks\u003c/code\u003e - Whether or not to have blocks be destroyed",
          "\u003ccode\u003esource\u003c/code\u003e - the source entity, used for tracking damage"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to blow up",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "setFire",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power and optionally setting blocks on fire.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to blow up",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "setFire",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "breakBlocks",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power and optionally setting blocks on fire or breaking blocks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to blow up",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire",
          "\u003ccode\u003ebreakBlocks\u003c/code\u003e - Whether or not to have blocks be destroyed"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "power",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "setFire",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "breakBlocks",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplosion",
      "comment": "Creates explosion at given coordinates with given power and optionally setting blocks on fire or breaking blocks.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to blow up",
          "\u003ccode\u003epower\u003c/code\u003e - The power of explosion, where 4F is TNT",
          "\u003ccode\u003esetFire\u003c/code\u003e - Whether or not to set blocks on fire",
          "\u003ccode\u003ebreakBlocks\u003c/code\u003e - Whether or not to have blocks be destroyed",
          "\u003ccode\u003esource\u003c/code\u003e - the source entity, used for tracking damage"
        ],
        "return": [
          "false if explosion was canceled, otherwise true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPVP",
      "comment": "Gets the current PVP setting for this world.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if PVP is enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "pvp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPVP",
      "comment": "Sets the PVP setting for this world.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epvp\u003c/code\u003e - True/False whether PVP should be Enabled."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGenerator",
      "comment": "Gets the chunk generator for this world",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "ChunkGenerator associated with this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.BiomeProvider",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiomeProvider",
      "comment": "Gets the biome provider for this world",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "BiomeProvider associated with this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "save",
      "comment": "Saves world to disk",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.generator.BlockPopulator",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPopulators",
      "comment": "Gets a list of all applied BlockPopulators for this World",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "List containing any or none BlockPopulators"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.FallingBlock",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.material.MaterialData",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnFallingBlock",
      "comment": "Spawn a FallingBlock entity at the given Location of the specified Material. The material dictates what is falling. When the FallingBlock hits the ground, it will place that block. The Material must be a block type, check with material.isBlock(). The Material may not be air.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e to spawn the FallingBlock",
          "\u003ccode\u003edata\u003c/code\u003e - The block data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/material/MaterialData.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003eMaterialData\u003c/code\u003e\u003c/a\u003e are null or \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e of the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/material/MaterialData.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003eMaterialData\u003c/code\u003e\u003c/a\u003e is not a block"
        ],
        "return": [
          "The spawned \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.FallingBlock",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnFallingBlock",
      "comment": "Spawn a FallingBlock entity at the given Location of the specified Material. The material dictates what is falling. When the FallingBlock hits the ground, it will place that block. The Material must be a block type, check with material.isBlock(). The Material may not be air.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e to spawn the FallingBlock",
          "\u003ccode\u003edata\u003c/code\u003e - The block data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/block/data/BlockData.html\" title\u003d\"interface in org.bukkit.block.data\"\u003e\u003ccode\u003eBlockData\u003c/code\u003e\u003c/a\u003e are null"
        ],
        "return": [
          "The spawned \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.FallingBlock",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "name": "material",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnFallingBlock",
      "comment": "Spawn a FallingBlock entity at the given Location of the specified Material. The material dictates what is falling. When the FallingBlock hits the ground, it will place that block. The Material must be a block type, check with material.isBlock(). The Material may not be air.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e to spawn the FallingBlock",
          "\u003ccode\u003ematerial\u003c/code\u003e - The block \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e type",
          "\u003ccode\u003edata\u003c/code\u003e - The block data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e are null or \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e is not a block"
        ],
        "return": [
          "The spawned \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Effect",
            "type": "Class"
          },
          "name": "effect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Plays an effect to all players within a default radius around a given location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e around which players must be to hear the sound",
          "\u003ccode\u003eeffect\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Effect.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eEffect\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edata\u003c/code\u003e - a data bit needed for some effects"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Effect",
            "type": "Class"
          },
          "name": "effect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radius",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Plays an effect to all players within a given radius around a location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e around which players must be to hear the effect",
          "\u003ccode\u003eeffect\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Effect.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eEffect\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edata\u003c/code\u003e - a data bit needed for some effects",
          "\u003ccode\u003eradius\u003c/code\u003e - the radius around the location"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Effect",
            "type": "Class"
          },
          "name": "effect",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Plays an effect to all players within a default radius around a given location.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - data dependant on the type of effect"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e around which players must be to hear the sound",
          "\u003ccode\u003eeffect\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Effect.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eEffect\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edata\u003c/code\u003e - a data bit needed for some effects"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Effect",
            "type": "Class"
          },
          "name": "effect",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radius",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Plays an effect to all players within a given radius around a location.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - data dependant on the type of effect"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e around which players must be to hear the effect",
          "\u003ccode\u003eeffect\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Effect.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eEffect\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edata\u003c/code\u003e - a data bit needed for some effects",
          "\u003ccode\u003eradius\u003c/code\u003e - the radius around the location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.ChunkSnapshot",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "includeBiome",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "includeBiomeTemp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEmptyChunkSnapshot",
      "comment": "Get empty chunk snapshot (equivalent to all air blocks), optionally including valid biome data. Used for representing an ungenerated chunk, or for fetching only biome data without loading a chunk.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - - chunk x coordinate",
          "\u003ccode\u003ez\u003c/code\u003e - - chunk z coordinate",
          "\u003ccode\u003eincludeBiome\u003c/code\u003e - - if true, snapshot includes per-coordinate biome type",
          "\u003ccode\u003eincludeBiomeTemp\u003c/code\u003e - - if true, snapshot includes per-coordinate raw biome temperature"
        ],
        "return": [
          "The empty snapshot."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "allowMonsters",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "allowAnimals",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnFlags",
      "comment": "Sets the spawn flags for this.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eallowMonsters\u003c/code\u003e - - if true, monsters are allowed to spawn in this world.",
          "\u003ccode\u003eallowAnimals\u003c/code\u003e - - if true, animals are allowed to spawn in this world."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllowAnimals",
      "comment": "Gets whether animals can spawn in this world.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether animals can spawn in this world."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllowMonsters",
      "comment": "Gets whether monsters can spawn in this world.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether monsters can spawn in this world."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Biome",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Gets the biome for the given block coordinates.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate of the block"
        ],
        "return": [
          "Biome of the requested block"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.Biome",
            "type": "Class"
          },
          "name": "bio",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiome",
      "comment": "Sets the biome for the given block coordinates",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate of the block",
          "\u003ccode\u003ebio\u003c/code\u003e - new Biome type for this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTemperature",
      "comment": "Gets the temperature for the given block coordinates. It is safe to run this method when the block does not exist, it will not create the block. This method will return the raw temperature without adjusting for block height effects.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate of the block"
        ],
        "return": [
          "Temperature of the requested block"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTemperature",
      "comment": "Gets the temperature for the given block coordinates. It is safe to run this method when the block does not exist, it will not create the block. This method will return the raw temperature without adjusting for block height effects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate of the block"
        ],
        "return": [
          "Temperature of the requested block"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHumidity",
      "comment": "Gets the humidity for the given block coordinates. It is safe to run this method when the block does not exist, it will not create the block.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate of the block"
        ],
        "return": [
          "Humidity of the requested block"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHumidity",
      "comment": "Gets the humidity for the given block coordinates. It is safe to run this method when the block does not exist, it will not create the block.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z coordinate of the block"
        ],
        "return": [
          "Humidity of the requested block"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLogicalHeight",
      "comment": "Gets the maximum height to which chorus fruits and nether portals can bring players within this dimension. This excludes portals that were already built above the limit as they still connect normally. May not be greater than WorldInfo.getMaxHeight().",
      "annotations": [],
      "tagMap": {
        "return": [
          "maximum logical height for chorus fruits and nether portals"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isNatural",
      "comment": "Gets if this world is natural. When false, compasses spin randomly, and using a bed to set the respawn point or sleep, is disabled. When true, nether portals can spawn zombified piglins.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if world is natural"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBedWorks",
      "comment": "Gets if beds work in this world. A non-working bed will blow up when trying to sleep. isNatural() defines if a bed can be used to set spawn point.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if beds work in this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasSkyLight",
      "comment": "Gets if this world has skylight access.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this world has skylight access"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasCeiling",
      "comment": "Gets if this world has a ceiling.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this world has a bedrock ceiling"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPiglinSafe",
      "comment": "Gets if this world allow to piglins to survive without shaking and transforming to zombified piglins.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if piglins will not transform to zombified piglins"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRespawnAnchorWorks",
      "comment": "Gets if this world allows players to charge and use respawn anchors.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if players can charge and use respawn anchors"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasRaids",
      "comment": "Gets if players with the bad omen effect in this world will trigger a raid.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if raids will be triggered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isUltraWarm",
      "comment": "Gets if various water/lava mechanics will be triggered in this world, eg: Water is evaporated Sponges dry Lava spreads faster and further",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this world has the above mechanics"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSeaLevel",
      "comment": "Gets the sea level for this world. This is often half of WorldInfo.getMaxHeight()",
      "annotations": [],
      "tagMap": {
        "return": [
          "Sea level"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKeepSpawnInMemory",
      "comment": "Gets whether the world\u0027s spawn area should be kept loaded into memory or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the world\u0027s spawn area will be kept loaded into memory."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "keepLoaded",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setKeepSpawnInMemory",
      "comment": "Sets whether the world\u0027s spawn area should be kept loaded into memory or not.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeepLoaded\u003c/code\u003e - if true then the world\u0027s spawn area will be kept loaded into memory."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAutoSave",
      "comment": "Gets whether or not the world will automatically save",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the world will automatically save, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAutoSave",
      "comment": "Sets whether or not the world will automatically save",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - true if the world should automatically save, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Difficulty",
            "type": "Class"
          },
          "name": "difficulty",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDifficulty",
      "comment": "Sets the Difficulty of the world.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edifficulty\u003c/code\u003e - the new difficulty you want to set the world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Difficulty",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDifficulty",
      "comment": "Gets the Difficulty of the world.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The difficulty of the world."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorldFolder",
      "comment": "Gets the folder of this world on disk.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The folder of this world."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.WorldType",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorldType",
      "comment": "Gets the type of this world.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Type of this world."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canGenerateStructures",
      "comment": "Gets whether or not structures are being generated.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if structures are being generated."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isHardcore",
      "comment": "Gets whether the world is hardcore or not. In a hardcore world the difficulty is locked to hard.",
      "annotations": [],
      "tagMap": {
        "return": [
          "hardcore status"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "hardcore",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHardcore",
      "comment": "Sets whether the world is hardcore or not. In a hardcore world the difficulty is locked to hard.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehardcore\u003c/code\u003e - Whether the world is hardcore"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerAnimalSpawns",
      "comment": "Gets the world\u0027s ticks per animal spawns value This value determines how many ticks there are between attempts to spawn animals. Example Usage: A value of 1 will mean the server will attempt to spawn animals in this world every tick. A value of 400 will mean the server will attempt to spawn animals in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, animal spawning will be disabled for this world. We recommend using setSpawnFlags(boolean, boolean) to control this instead. Minecraft default: 400.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The world\u0027s ticks per animal spawns value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ticksPerAnimalSpawns",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTicksPerAnimalSpawns",
      "comment": "Sets the world\u0027s ticks per animal spawns value This value determines how many ticks there are between attempts to spawn animals. Example Usage: A value of 1 will mean the server will attempt to spawn animals in this world every tick. A value of 400 will mean the server will attempt to spawn animals in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, animal spawning will be disabled for this world. We recommend using setSpawnFlags(boolean, boolean) to control this instead. Minecraft default: 400.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eticksPerAnimalSpawns\u003c/code\u003e - the ticks per animal spawns value you want to set the world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerMonsterSpawns",
      "comment": "Gets the world\u0027s ticks per monster spawns value This value determines how many ticks there are between attempts to spawn monsters. Example Usage: A value of 1 will mean the server will attempt to spawn monsters in this world every tick. A value of 400 will mean the server will attempt to spawn monsters in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, monsters spawning will be disabled for this world. We recommend using setSpawnFlags(boolean, boolean) to control this instead. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The world\u0027s ticks per monster spawns value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ticksPerMonsterSpawns",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTicksPerMonsterSpawns",
      "comment": "Sets the world\u0027s ticks per monster spawns value This value determines how many ticks there are between attempts to spawn monsters. Example Usage: A value of 1 will mean the server will attempt to spawn monsters in this world on every tick. A value of 400 will mean the server will attempt to spawn monsters in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, monsters spawning will be disabled for this world. We recommend using setSpawnFlags(boolean, boolean) to control this instead. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eticksPerMonsterSpawns\u003c/code\u003e - the ticks per monster spawns value you want to set the world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerWaterSpawns",
      "comment": "Gets the world\u0027s ticks per water mob spawns value This value determines how many ticks there are between attempts to spawn water mobs. Example Usage: A value of 1 will mean the server will attempt to spawn water mobs in this world every tick. A value of 400 will mean the server will attempt to spawn water mobs in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, water mobs spawning will be disabled for this world. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The world\u0027s ticks per water mob spawns value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ticksPerWaterSpawns",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTicksPerWaterSpawns",
      "comment": "Sets the world\u0027s ticks per water mob spawns value This value determines how many ticks there are between attempts to spawn water mobs. Example Usage: A value of 1 will mean the server will attempt to spawn water mobs in this world on every tick. A value of 400 will mean the server will attempt to spawn water mobs in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, water mobs spawning will be disabled for this world. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eticksPerWaterSpawns\u003c/code\u003e - the ticks per water mob spawns value you want to set the world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerWaterAmbientSpawns",
      "comment": "Gets the default ticks per water ambient mob spawns value. Example Usage: A value of 1 will mean the server will attempt to spawn water ambient mobs every tick. A value of 400 will mean the server will attempt to spawn water ambient mobs every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, ambient mobs spawning will be disabled. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default ticks per water ambient mobs spawn value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ticksPerAmbientSpawns",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTicksPerWaterAmbientSpawns",
      "comment": "Sets the world\u0027s ticks per water ambient mob spawns value This value determines how many ticks there are between attempts to spawn water ambient mobs. Example Usage: A value of 1 will mean the server will attempt to spawn water ambient mobs in this world on every tick. A value of 400 will mean the server will attempt to spawn weater ambient mobs in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, water ambient mobs spawning will be disabled for this world. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eticksPerAmbientSpawns\u003c/code\u003e - the ticks per water ambient mob spawns value you want to set the world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerAmbientSpawns",
      "comment": "Gets the world\u0027s ticks per ambient mob spawns value This value determines how many ticks there are between attempts to spawn ambient mobs. Example Usage: A value of 1 will mean the server will attempt to spawn ambient mobs in this world every tick. A value of 400 will mean the server will attempt to spawn ambient mobs in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, ambient mobs spawning will be disabled for this world. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The world\u0027s ticks per ambient mob spawns value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ticksPerAmbientSpawns",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTicksPerAmbientSpawns",
      "comment": "Sets the world\u0027s ticks per ambient mob spawns value This value determines how many ticks there are between attempts to spawn ambient mobs. Example Usage: A value of 1 will mean the server will attempt to spawn ambient mobs in this world on every tick. A value of 400 will mean the server will attempt to spawn ambient mobs in this world every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, ambient mobs spawning will be disabled for this world. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eticksPerAmbientSpawns\u003c/code\u003e - the ticks per ambient mob spawns value you want to set the world to"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMonsterSpawnLimit",
      "comment": "Gets limit for number of monsters that can spawn in a chunk in this world",
      "annotations": [],
      "tagMap": {
        "return": [
          "The monster spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMonsterSpawnLimit",
      "comment": "Sets the limit for number of monsters that can spawn in a chunk in this world Note: If set to a negative number the world will use the server-wide spawn limit instead.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elimit\u003c/code\u003e - the new mob limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnimalSpawnLimit",
      "comment": "Gets the limit for number of animals that can spawn in a chunk in this world",
      "annotations": [],
      "tagMap": {
        "return": [
          "The animal spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAnimalSpawnLimit",
      "comment": "Sets the limit for number of animals that can spawn in a chunk in this world Note: If set to a negative number the world will use the server-wide spawn limit instead.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elimit\u003c/code\u003e - the new mob limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWaterAnimalSpawnLimit",
      "comment": "Gets the limit for number of water animals that can spawn in a chunk in this world",
      "annotations": [],
      "tagMap": {
        "return": [
          "The water animal spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWaterAnimalSpawnLimit",
      "comment": "Sets the limit for number of water animals that can spawn in a chunk in this world Note: If set to a negative number the world will use the server-wide spawn limit instead.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elimit\u003c/code\u003e - the new mob limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWaterAmbientSpawnLimit",
      "comment": "Gets user-specified limit for number of water ambient mobs that can spawn in a chunk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the water ambient spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWaterAmbientSpawnLimit",
      "comment": "Sets the limit for number of water ambient mobs that can spawn in a chunk in this world Note: If set to a negative number the world will use the server-wide spawn limit instead.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elimit\u003c/code\u003e - the new mob limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAmbientSpawnLimit",
      "comment": "Gets the limit for number of ambient mobs that can spawn in a chunk in this world",
      "annotations": [],
      "tagMap": {
        "return": [
          "The ambient spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAmbientSpawnLimit",
      "comment": "Sets the limit for number of ambient mobs that can spawn in a chunk in this world Note: If set to a negative number the world will use the server-wide spawn limit instead.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elimit\u003c/code\u003e - the new mob limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Sound",
            "type": "Class"
          },
          "name": "sound",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "volume",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "pitch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a Sound at the provided Location in the World This function will fail silently if Location or Sound are null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - The sound to play",
          "\u003ccode\u003evolume\u003c/code\u003e - The volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - The pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sound",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "volume",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "pitch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a Sound at the provided Location in the World. This function will fail silently if Location or Sound are null. No sound will be heard by the players if their clients do not have the respective sound for the value passed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - the internal sound name to play",
          "\u003ccode\u003evolume\u003c/code\u003e - the volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - the pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Sound",
            "type": "Class"
          },
          "name": "sound",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.SoundCategory",
            "type": "Class"
          },
          "name": "category",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "volume",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "pitch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a Sound at the provided Location in the World. This function will fail silently if Location or Sound are null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - The sound to play",
          "\u003ccode\u003ecategory\u003c/code\u003e - the category of the sound",
          "\u003ccode\u003evolume\u003c/code\u003e - The volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - The pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sound",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.SoundCategory",
            "type": "Class"
          },
          "name": "category",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "volume",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "pitch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a Sound at the provided Location in the World. This function will fail silently if Location or Sound are null. No sound will be heard by the players if their clients do not have the respective sound for the value passed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - the internal sound name to play",
          "\u003ccode\u003ecategory\u003c/code\u003e - the category of the sound",
          "\u003ccode\u003evolume\u003c/code\u003e - the volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - the pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGameRules",
      "comment": "Get an array containing the names of all the GameRules.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "An array of \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/GameRule.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eGameRule\u003c/code\u003e\u003c/a\u003e names."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGameRuleValue",
      "comment": "Gets the current state of the specified rule Will return null if rule passed is null",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "null -\u003e null; !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - Rule to look up value of"
        ],
        "return": [
          "String value of rule"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGameRuleValue",
      "comment": "Set the specified gamerule to specified value. The rule may attempt to validate the value passed, will return true if value was set. If rule is null, the function will return false.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - Rule to set",
          "\u003ccode\u003evalue\u003c/code\u003e - Value to set rule to"
        ],
        "return": [
          "True if rule was set"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isGameRule",
      "comment": "Checks if string is a valid game rule",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - Rule to check"
        ],
        "return": [
          "True if rule exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.GameRule",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGameRuleValue",
      "comment": "Get the current value for a given GameRule.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the GameRule\u0027s type"
        ],
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the GameRule to check"
        ],
        "return": [
          "the current value"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.GameRule",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGameRuleDefault",
      "comment": "Get the default value for a given GameRule. This value is not guaranteed to match the current value.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of GameRule"
        ],
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the rule to return a default value for"
        ],
        "return": [
          "the default value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.GameRule",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGameRule",
      "comment": "Set the given GameRule\u0027s new value.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the value type of the GameRule"
        ],
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the GameRule to update",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "true if the value was successfully set"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.WorldBorder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorldBorder",
      "comment": "Gets the world border for this world.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The world border for this world."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "extra",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "extra",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "extra",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "extra",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "extra",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "force",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003eforce\u003c/code\u003e - whether to send the particle to players within an extended range and encourage their client to render it regardless of settings"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Particle",
            "type": "Class"
          },
          "name": "particle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "offsetZ",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "extra",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "force",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003eforce\u003c/code\u003e - whether to send the particle to players within an extended range and encourage their client to render it regardless of settings"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "origin",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.StructureType",
            "type": "Class"
          },
          "name": "structureType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radius",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "findUnexplored",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "locateNearestStructure",
      "comment": "Find the closest nearby structure of a given StructureType. Finding unexplored structures can, and will, block if the world is looking in chunks that gave not generated yet. This can lead to the world temporarily freezing while locating an unexplored structure. The radius is not a rigid square radius. Each structure may alter how many chunks to check for each iteration. Do not assume that only a radius x radius chunk area will be checked. For example, StructureType.WOODLAND_MANSION can potentially check up to 20,000 blocks away (or more) regardless of the radius used. This will not load or generate chunks. This can also lead to instances where the server can hang if you are only looking for unexplored structures. This is because it will keep looking further and further out in order to find the structure.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - where to start looking for a structure",
          "\u003ccode\u003estructureType\u003c/code\u003e - the type of structure to find",
          "\u003ccode\u003eradius\u003c/code\u003e - the radius, in chunks, around which to search",
          "\u003ccode\u003efindUnexplored\u003c/code\u003e - true to only find unexplored structures"
        ],
        "return": [
          "the closest \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e, or null if no structure of the specified type exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getViewDistance",
      "comment": "Returns the view distance used for this world.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the view distance used for this world"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World$Spigot",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spigot",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.Raid",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radius",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "locateNearestRaid",
      "comment": "Finds the nearest raid close to the given location.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the origin location",
          "\u003ccode\u003eradius\u003c/code\u003e - the radius"
        ],
        "return": [
          "the closest \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Raid.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eRaid\u003c/code\u003e\u003c/a\u003e, or null if no raids were found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.Raid",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRaids",
      "comment": "Gets all raids that are going on over this world.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the list of all active raids"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.boss.DragonBattle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnderDragonBattle",
      "comment": "Get the DragonBattle associated with this world. If this world\u0027s environment is not World.Environment.THE_END, null will be returned. If an end world, a dragon battle instance will be returned regardless of whether or not a dragon is present in the world or a fight sequence has been activated. The dragon battle instance acts as a state holder.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the dragon battle instance"
        ]
      }
    }
  ],
  "innerClasses": [
    "org.bukkit.World$Environment",
    "org.bukkit.World$Spigot"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.World",
  "comment": "Represents a world, which may contain entities, chunks and blocks",
  "tagMap": {}
}