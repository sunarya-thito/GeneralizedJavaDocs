{
  "packageName": "org.bukkit.entity",
  "simpleName": "Entity",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.metadata.Metadatable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.command.CommandSender",
      "type": "Class"
    },
    {
      "name": "org.bukkit.Nameable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.persistence.PersistentDataHolder",
      "type": "Class"
    },
    {
      "name": "net.kyori.adventure.text.event.HoverEventSource",
      "parameters": [
        {
          "name": "net.kyori.adventure.text.event.HoverEvent$ShowEntity",
          "type": "Class"
        }
      ],
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Gets the entity\u0027s current position",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a new copy of Location containing the position of this entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Stores the entity\u0027s current position in the provided Location object. If the provided Location is null this method does nothing and returns null.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Contract",
          "values": [
            {
              "name": "value",
              "value": "null -\u003e null; !null -\u003e !null"
            }
          ]
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location to copy into"
        ],
        "return": [
          "The Location object provided or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "velocity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setVelocity",
      "comment": "Sets this entity\u0027s velocity in meters per tick",
      "tagMap": {
        "param": [
          "\u003ccode\u003evelocity\u003c/code\u003e - New velocity to travel with"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVelocity",
      "comment": "Gets this entity\u0027s current velocity",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Current traveling velocity of this entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHeight",
      "comment": "Gets the entity\u0027s height",
      "tagMap": {
        "return": [
          "height of entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWidth",
      "comment": "Gets the entity\u0027s width",
      "tagMap": {
        "return": [
          "width of entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoundingBox",
      "comment": "Gets the entity\u0027s current bounding box. The returned bounding box reflects the entity\u0027s current location and size.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the entity\u0027s current bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOnGround",
      "comment": "Returns true if the entity is supported by a block. This value is a state updated by the server and is not recalculated unless the entity moves.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#isOnGround()\"\u003e\u003ccode\u003ePlayer.isOnGround()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "True if entity is on ground."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInWater",
      "comment": "Returns true if the entity is in water.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the entity is in water."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the current world this entity resides in",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "World"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "yaw"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pitch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRotation",
      "comment": "Sets the entity\u0027s rotation. Note that if the entity is affected by AI, it may override this rotation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyaw\u003c/code\u003e - the yaw",
          "\u003ccode\u003epitch\u003c/code\u003e - the pitch"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if used for players"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "teleport",
      "comment": "Teleports this entity to the given location. If this entity is riding a vehicle, it will be dismounted prior to teleportation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - New location to teleport this entity to"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.player.PlayerTeleportEvent$TeleportCause",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "teleport",
      "comment": "Teleports this entity to the given location. If this entity is riding a vehicle, it will be dismounted prior to teleportation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - New location to teleport this entity to",
          "\u003ccode\u003ecause\u003c/code\u003e - The cause of this teleportation"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "teleport",
      "comment": "Teleports this entity to the target Entity. If this entity is riding a vehicle, it will be dismounted prior to teleportation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edestination\u003c/code\u003e - Entity to teleport this entity to"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.player.PlayerTeleportEvent$TeleportCause",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "teleport",
      "comment": "Teleports this entity to the target Entity. If this entity is riding a vehicle, it will be dismounted prior to teleportation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edestination\u003c/code\u003e - Entity to teleport this entity to",
          "\u003ccode\u003ecause\u003c/code\u003e - The cause of this teleportation"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletableFuture",
        "parameters": [
          {
            "name": "java.lang.Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "teleportAsync",
      "comment": "Loads/Generates(in 1.13+) the Chunk asynchronously, and then teleports the entity when the chunk is ready.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to teleport to"
        ],
        "return": [
          "A future that will be completed with the result of the teleport"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletableFuture",
        "parameters": [
          {
            "name": "java.lang.Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.event.player.PlayerTeleportEvent$TeleportCause",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "teleportAsync",
      "comment": "Loads/Generates(in 1.13+) the Chunk asynchronously, and then teleports the entity when the chunk is ready.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to teleport to",
          "\u003ccode\u003ecause\u003c/code\u003e - Reason for teleport"
        ],
        "return": [
          "A future that will be completed with the result of the teleport"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNearbyEntities",
      "comment": "Returns a list of entities within a bounding box centered around this entity",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - 1/2 the size of the box along x axis",
          "\u003ccode\u003ey\u003c/code\u003e - 1/2 the size of the box along y axis",
          "\u003ccode\u003ez\u003c/code\u003e - 1/2 the size of the box along z axis"
        ],
        "return": [
          "\u003ccode\u003eList\u0026lt;Entity\u0026gt;\u003c/code\u003e List of entities nearby"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntityId",
      "comment": "Returns a unique id for this entity",
      "tagMap": {
        "return": [
          "Entity id"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFireTicks",
      "comment": "Returns the entity\u0027s current fire ticks (ticks before the entity stops being on fire).",
      "tagMap": {
        "return": [
          "int fireTicks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxFireTicks",
      "comment": "Returns the entity\u0027s maximum fire ticks.",
      "tagMap": {
        "return": [
          "int maxFireTicks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFireTicks",
      "comment": "Sets the entity\u0027s current fire ticks (ticks before the entity stops being on fire).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - Current ticks remaining"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fire"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setVisualFire",
      "comment": "Sets if the entity has visual fire (it will always appear to be on fire).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efire\u003c/code\u003e - whether visual fire is enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isVisualFire",
      "comment": "Gets if the entity has visual fire (it will always appear to be on fire).",
      "tagMap": {
        "return": [
          "whether visual fire is enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFreezeTicks",
      "comment": "Returns the entity\u0027s current freeze ticks (amount of ticks the entity has been in powdered snow).",
      "tagMap": {
        "return": [
          "int freeze ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxFreezeTicks",
      "comment": "Returns the entity\u0027s maximum freeze ticks (amount of ticks before it will be fully frozen)",
      "tagMap": {
        "return": [
          "int max freeze ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFreezeTicks",
      "comment": "Sets the entity\u0027s current freeze ticks (amount of ticks the entity has been in powdered snow).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - Current ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isFrozen",
      "comment": "Gets if the entity is fully frozen (it has been in powdered snow for max freeze ticks).",
      "tagMap": {
        "return": [
          "freeze status"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Mark the entity\u0027s removal.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDead",
      "comment": "Returns true if this entity has been marked for removal.",
      "tagMap": {
        "return": [
          "True if it is dead."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isValid",
      "comment": "Returns false if the entity has died or been despawned for some other reason.",
      "tagMap": {
        "return": [
          "True if valid."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Server",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getServer",
      "comment": "Gets the Server that contains this Entity",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html#getServer()\"\u003egetServer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003eCommandSender\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Server instance running this Entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPersistent",
      "comment": "Returns true if the entity gets persisted. By default all entities are persistent. An entity will also not get persisted, if it is riding an entity that is not persistent. The persistent flag on players controls whether or not to save their playerdata file when they quit. If a player is directly or indirectly riding a non-persistent entity, the vehicle at the root and all its passengers won\u0027t get persisted. This should not be confused with LivingEntity.setRemoveWhenFarAway(boolean) which controls despawning of living entities.",
      "tagMap": {
        "return": [
          "true if this entity is persistent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "persistent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPersistent",
      "comment": "Sets whether or not the entity gets persisted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html#isPersistent()\"\u003e\u003ccode\u003eisPersistent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epersistent\u003c/code\u003e - the persistence status"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPassenger",
      "comment": "Gets the primary passenger of a vehicle. For vehicles that could have multiple passengers, this will only return the primary passenger.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "an entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "passenger"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPassenger",
      "comment": "Set the passenger of a vehicle.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epassenger\u003c/code\u003e - The new passenger."
        ],
        "return": [
          "false if it could not be done for whatever reason"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPassengers",
      "comment": "Gets a list of passengers of this vehicle. The returned list will not be directly linked to the entity\u0027s current passengers, and no guarantees are made as to its mutability.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "list of entities corresponding to current passengers."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "passenger"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPassenger",
      "comment": "Add a passenger to the vehicle.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epassenger\u003c/code\u003e - The passenger to add"
        ],
        "return": [
          "false if it could not be done for whatever reason"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "passenger"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePassenger",
      "comment": "Remove a passenger from the vehicle.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epassenger\u003c/code\u003e - The passenger to remove"
        ],
        "return": [
          "false if it could not be done for whatever reason"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Check if a vehicle has passengers.",
      "tagMap": {
        "return": [
          "True if the vehicle has no passengers."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eject",
      "comment": "Eject any passenger.",
      "tagMap": {
        "return": [
          "True if there was a passenger."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFallDistance",
      "comment": "Returns the distance this entity has fallen",
      "tagMap": {
        "return": [
          "The distance."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "distance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFallDistance",
      "comment": "Sets the fall distance for this entity",
      "tagMap": {
        "param": [
          "\u003ccode\u003edistance\u003c/code\u003e - The new distance."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.event.entity.EntityDamageEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLastDamageCause",
      "comment": "Record the last EntityDamageEvent inflicted on this entity",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - a \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/entity/EntityDamageEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityDamageEvent\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.entity.EntityDamageEvent",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastDamageCause",
      "comment": "Retrieve the last EntityDamageEvent inflicted on this entity. This event may have been cancelled.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "the last known \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/entity/EntityDamageEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityDamageEvent\u003c/code\u003e\u003c/a\u003e or null if hitherto unharmed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.UUID",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUniqueId",
      "comment": "Returns a unique and persistent id for this entity",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "unique id"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksLived",
      "comment": "Gets the amount of ticks this entity has lived for. This is the equivalent to \"age\" in entities.",
      "tagMap": {
        "return": [
          "Age of entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTicksLived",
      "comment": "Sets the amount of ticks this entity has lived for. This is the equivalent to \"age\" in entities. May not be less than one tick.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Age of entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.EntityEffect",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Performs the specified EntityEffect for this entity. This will be viewable to all players near the entity. If the effect is not applicable to this class of entity, it will not play.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - Effect to play."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.EntityType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Get the type of the entity.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The entity type."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInsideVehicle",
      "comment": "Returns whether this entity is inside a vehicle.",
      "tagMap": {
        "return": [
          "True if the entity is in a vehicle."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "leaveVehicle",
      "comment": "Leave the current vehicle. If the entity is currently in a vehicle (and is removed from it), true will be returned, otherwise false will be returned.",
      "tagMap": {
        "return": [
          "True if the entity was in a vehicle."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVehicle",
      "comment": "Get the vehicle that this player is inside. If there is no vehicle, null will be returned.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The current vehicle."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCustomNameVisible",
      "comment": "Sets whether or not to display the mob\u0027s custom name client side. The name will be displayed above the mob similarly to a player. This value has no effect on players, they will always display their name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - custom name or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCustomNameVisible",
      "comment": "Gets whether or not the mob\u0027s custom name is displayed client side. This value has no effect on players, they will always display their name.",
      "tagMap": {
        "return": [
          "if the custom name is displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGlowing",
      "comment": "Sets whether the entity has a team colored (default: white) glow. nb: this refers to the \u0027Glowing\u0027 entity property, not whether a glowing potion effect is applied",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - if the entity is glowing"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isGlowing",
      "comment": "Gets whether the entity is glowing or not. nb: this refers to the \u0027Glowing\u0027 entity property, not whether a glowing potion effect is applied",
      "tagMap": {
        "return": [
          "whether the entity is glowing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInvulnerable",
      "comment": "Sets whether the entity is invulnerable or not. When an entity is invulnerable it can only be damaged by players in creative mode.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - if the entity is invulnerable"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInvulnerable",
      "comment": "Gets whether the entity is invulnerable or not.",
      "tagMap": {
        "return": [
          "whether the entity is"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSilent",
      "comment": "Gets whether the entity is silent or not.",
      "tagMap": {
        "return": [
          "whether the entity is silent."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSilent",
      "comment": "Sets whether the entity is silent or not. When an entity is silent it will not produce any sound.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - if the entity is silent"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasGravity",
      "comment": "Returns whether gravity applies to this entity.",
      "tagMap": {
        "return": [
          "whether gravity applies"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "gravity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGravity",
      "comment": "Sets whether gravity applies to this entity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egravity\u003c/code\u003e - whether gravity should apply"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPortalCooldown",
      "comment": "Gets the period of time (in ticks) before this entity can use a portal.",
      "tagMap": {
        "return": [
          "portal cooldown ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "cooldown"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPortalCooldown",
      "comment": "Sets the period of time (in ticks) before this entity can use a portal.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecooldown\u003c/code\u003e - portal cooldown ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScoreboardTags",
      "comment": "Returns a set of tags for this entity. Entities can have no more than 1024 tags.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a set of tags for this entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addScoreboardTag",
      "comment": "Add a tag to this entity. Entities can have no more than 1024 tags.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - the tag to add"
        ],
        "return": [
          "true if the tag was successfully added"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeScoreboardTag",
      "comment": "Removes a given tag from this entity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - the tag to remove"
        ],
        "return": [
          "true if the tag was successfully removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.PistonMoveReaction",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPistonMoveReaction",
      "comment": "Returns the reaction of the entity when moved by a piston.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "reaction"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockFace",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFacing",
      "comment": "Get the closest cardinal BlockFace direction an entity is currently facing. This will not return any non-cardinal directions such as BlockFace.UP or BlockFace.DOWN. Hanging entities will override this call and thus their behavior may be different.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Hanging.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eHanging\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/material/Directional.html#getFacing()\"\u003e\u003ccode\u003eDirectional.getFacing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the entity\u0027s current cardinal facing."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Pose",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPose",
      "comment": "Gets the entity\u0027s current pose. Note that the pose is only updated at the end of a tick, so may be inconsistent with other methods. eg Player.isSneaking() being true does not imply the current pose will be Pose.SNEAKING",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "current pose"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity$Spigot",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spigot",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html#spigot()\"\u003espigot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003eCommandSender\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.event.HoverEvent",
        "parameters": [
          {
            "name": "net.kyori.adventure.text.event.HoverEvent$ShowEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.function.UnaryOperator",
            "parameters": [
              {
                "name": "net.kyori.adventure.text.event.HoverEvent$ShowEntity",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asHoverEvent",
      "comment": "Description copied from interface: net.kyori.adventure.text.event.HoverEventSource",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/text/event/HoverEventSource.html#asHoverEvent(java.util.function.UnaryOperator)\" title\u003d\"class or interface in net.kyori.adventure.text.event\" class\u003d\"external-link\"\u003easHoverEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/text/event/HoverEventSource.html\" title\u003d\"class or interface in net.kyori.adventure.text.event\" class\u003d\"external-link\"\u003eHoverEventSource\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/text/event/HoverEvent.ShowEntity.html\" title\u003d\"class or interface in net.kyori.adventure.text.event\" class\u003d\"external-link\"\u003eHoverEvent.ShowEntity\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - transformation on value"
        ],
        "return": [
          "a hover event"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOrigin",
      "comment": "Gets the location where this entity originates from. This value can be null if the entity hasn\u0027t yet been added to the world.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "Location where entity originates or null if not yet added"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "fromMobSpawner",
      "comment": "Returns whether this entity was spawned from a mob spawner.",
      "tagMap": {
        "return": [
          "True if entity spawned from a mob spawner"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunk",
      "comment": "Gets the latest chunk an entity is currently or was in.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The current, or most recent chunk if the entity is invalid (which may load the chunk)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntitySpawnReason",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/entity/CreatureSpawnEvent.SpawnReason.html\" title\u003d\"enum class in org.bukkit.event.entity\"\u003e\u003ccode\u003eCreatureSpawnEvent.SpawnReason\u003c/code\u003e\u003c/a\u003e that initially spawned this entity. \n\u003c!-- Paper - added \"initially\" to clarify that the SpawnReason doesn\u0027t change after the Entity was initially spawned\" --\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInRain",
      "comment": "Check if entity is in rain",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInBubbleColumn",
      "comment": "Check if entity is in bubble column",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInWaterOrRain",
      "comment": "Check if entity is in water or rain",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInWaterOrBubbleColumn",
      "comment": "Check if entity is in water or bubble column",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInWaterOrRainOrBubbleColumn",
      "comment": "Check if entity is in water or rain or bubble column",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInLava",
      "comment": "Check if entity is in lava",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isTicking",
      "comment": "Check if entity is inside a ticking chunk",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "org.bukkit.entity.Entity$Spigot"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.entity.Entity",
  "comment": "Represents a base entity in the world",
  "tagMap": {}
}