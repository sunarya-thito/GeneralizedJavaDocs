{
  "packageName": "org.bukkit.entity",
  "simpleName": "FishHook",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.entity.Projectile",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinWaitTime",
      "comment": "Get the minimum number of ticks one has to wait for a fish biting. The default is 100 ticks (5 seconds). Note that this is before applying lure.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Minimum number of ticks one has to wait for a fish biting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMinWaitTime",
      "comment": "Set the minimum number of ticks one has to wait for a fish biting. The default is 100 ticks (5 seconds). Note that this is before applying lure.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eminWaitTime\u003c/code\u003e - Minimum number of ticks one has to wait for a fish biting"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxWaitTime",
      "comment": "Get the maximum number of ticks one has to wait for a fish biting. The default is 600 ticks (30 seconds). Note that this is before applying lure.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Maximum number of ticks one has to wait for a fish biting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxWaitTime",
      "comment": "Set the maximum number of ticks one has to wait for a fish biting. The default is 600 ticks (30 seconds). Note that this is before applying lure.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxWaitTime\u003c/code\u003e - Maximum number of ticks one has to wait for a fish biting"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getApplyLure",
      "comment": "Get whether the lure enchantment should be applied to reduce the wait time. The default is true. Lure reduces the wait time by 100 ticks (5 seconds) for each level of the enchantment.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Whether the lure enchantment should be applied to reduce the wait time"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setApplyLure",
      "comment": "Set whether the lure enchantment should be applied to reduce the wait time. The default is true. Lure reduces the wait time by 100 ticks (5 seconds) for each level of the enchantment.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eapplyLure\u003c/code\u003e - Whether the lure enchantment should be applied to reduce the wait time"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiteChance",
      "comment": "Gets the chance of a fish biting. 0.0 \u003d No Chance. 1.0 \u003d Instant catch.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "chance the bite chance"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiteChance",
      "comment": "Sets the chance of a fish biting. 0.0 \u003d No Chance. 1.0 \u003d Instant catch.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003echance\u003c/code\u003e - the bite chance"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the bite chance is not between 0 and 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInOpenWater",
      "comment": "Check whether or not this fish hook is in open water. Open water is defined by a 5x4x5 area of water, air and lily pads. If in open water, treasure items may be caught.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if in open water, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHookedEntity",
      "comment": "Get the entity hooked by this fish hook.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the hooked entity. null if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHookedEntity",
      "comment": "Set the entity hooked by this fish hook.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eentity\u003c/code\u003e - the entity to set, or null to unhook"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "pullHookedEntity",
      "comment": "Pull the hooked entity to the caster of this fish hook. If no entity is hooked, this method has no effect.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if pulled, false if no entity is hooked"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.FishHook$HookState",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getState",
      "comment": "Get the current state of this fish hook.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the fish hook state"
        ]
      }
    }
  ],
  "innerClasses": [
    "org.bukkit.entity.FishHook$HookState"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.entity.FishHook",
  "tagMap": {}
}