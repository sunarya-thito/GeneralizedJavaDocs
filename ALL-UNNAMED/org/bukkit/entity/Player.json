{
  "packageName": "org.bukkit.entity",
  "simpleName": "Player",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.entity.HumanEntity",
      "type": "Class"
    },
    {
      "name": "org.bukkit.conversations.Conversable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.OfflinePlayer",
      "type": "Class"
    },
    {
      "name": "org.bukkit.plugin.messaging.PluginMessageRecipient",
      "type": "Class"
    },
    {
      "name": "net.kyori.adventure.identity.Identified",
      "type": "Class"
    },
    {
      "name": "com.destroystokyo.paper.network.NetworkClient",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "net.kyori.adventure.identity.Identity",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "identity",
      "comment": "Description copied from interface: net.kyori.adventure.identity.Identified",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/identity/Identified.html#identity()\" title\u003d\"class or interface in net.kyori.adventure.identity\" class\u003d\"external-link\"\u003eidentity\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/identity/Identified.html\" title\u003d\"class or interface in net.kyori.adventure.identity\" class\u003d\"external-link\"\u003eIdentified\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the identity"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "displayName",
      "comment": "Gets the \"friendly\" name to display of this player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the display name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "displayName",
      "comment": "Sets the \"friendly\" name to display of this player.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edisplayName\u003c/code\u003e - the display name to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDisplayName",
      "comment": "Gets the \"friendly\" name to display of this player. This may include color. Note that this name will not be displayed in game, only in chat and places defined by plugins.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the friendly name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDisplayName",
      "comment": "Sets the \"friendly\" name to display of this player. This may include color. Note that this name will not be displayed in game, only in chat and places defined by plugins.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The new display name."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playerListName",
      "comment": "Sets the name that is shown on the in-game player list. If the value is null, the name will be identical to HumanEntity.getName().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - new player list name"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playerListName",
      "comment": "Gets the name that is shown on the in-game player list.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the player list name"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playerListHeader",
      "comment": "Gets the currently displayed player list header for this player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "player list header or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playerListFooter",
      "comment": "Gets the currently displayed player list footer for this player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "player list footer or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerListName",
      "comment": "Gets the name that is shown on the player list.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the player list name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerListName",
      "comment": "Sets the name that is shown on the in-game player list. If the value is null, the name will be identical to HumanEntity.getName().",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - new player list name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerListHeader",
      "comment": "Gets the currently displayed player list header for this player.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "player list header or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerListFooter",
      "comment": "Gets the currently displayed player list footer for this player.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "player list header or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerListHeader",
      "comment": "Sets the currently displayed player list header for this player.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheader\u003c/code\u003e - player list header, null for empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerListFooter",
      "comment": "Sets the currently displayed player list footer for this player.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efooter\u003c/code\u003e - player list footer, null for empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerListHeaderFooter",
      "comment": "Sets the currently displayed player list header and footer for this player.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheader\u003c/code\u003e - player list header, null for empty",
          "\u003ccode\u003efooter\u003c/code\u003e - player list footer, null for empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCompassTarget",
      "comment": "Set the target of the player\u0027s compass.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - Location to point to"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCompassTarget",
      "comment": "Get the previously set compass target.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "location of the target"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.InetSocketAddress",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAddress",
      "comment": "Gets the socket address of this player",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/com/destroystokyo/paper/network/NetworkClient.html#getAddress()\"\u003egetAddress\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/com/destroystokyo/paper/network/NetworkClient.html\" title\u003d\"interface in com.destroystokyo.paper.network\"\u003eNetworkClient\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the player\u0027s address"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendRawMessage",
      "comment": "Sends this sender a message raw",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/conversations/Conversable.html#sendRawMessage(java.lang.String)\"\u003esendRawMessage\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/conversations/Conversable.html\" title\u003d\"interface in org.bukkit.conversations\"\u003eConversable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - Message to be displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "kickPlayer",
      "comment": "Kicks player with custom kick message.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - kick message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "kick",
      "comment": "Kicks player with custom kick message.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - kick message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "kick",
      "comment": "Kicks player with custom kick message and cause.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - kick message",
          "\u003ccode\u003ecause\u003c/code\u003e - kick cause"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "chat",
      "comment": "Says a message (or runs a command).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - message to print"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "performCommand",
      "comment": "Makes the player perform the given command",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - Command to perform"
        ],
        "return": [
          "true if the command was successful, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOnGround",
      "comment": "Returns true if the entity is supported by a block. This value is a state updated by the client after each movement.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#isOnGround()\"\u003e\u003ccode\u003eisOnGround()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html#isOnGround()\"\u003eisOnGround\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003eEntity\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "True if entity is on ground."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSneaking",
      "comment": "Returns if the player is in sneak mode",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if player is in sneak mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSneaking",
      "comment": "Sets the sneak mode the player",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esneak\u003c/code\u003e - true if player should appear sneaking"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSprinting",
      "comment": "Gets whether the player is sprinting or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if player is sprinting."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSprinting",
      "comment": "Sets whether the player is sprinting or not.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esprinting\u003c/code\u003e - true if the player should be sprinting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "saveData",
      "comment": "Saves the players current location, health, inventory, motion, and other information into the username.dat file, in the world/player folder",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadData",
      "comment": "Loads the players current location, health, inventory, motion, and other information from the username.dat file, in the world/player folder. Note: This will overwrite the players current inventory, health, motion, etc, with the state from the saved dat file.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSleepingIgnored",
      "comment": "Sets whether the player is ignored as not sleeping. If everyone is either sleeping or has this flag set, then time will advance to the next day. If everyone has this flag set but no one is actually in bed, then nothing will happen.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eisSleeping\u003c/code\u003e - Whether to ignore."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSleepingIgnored",
      "comment": "Returns whether the player is sleeping ignored.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Whether player is ignoring sleep."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBedSpawnLocation",
      "comment": "Gets the Location where the player will spawn at their bed, null if they have not slept in one or their current bed spawn is invalid.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/OfflinePlayer.html#getBedSpawnLocation()\"\u003egetBedSpawnLocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/OfflinePlayer.html\" title\u003d\"interface in org.bukkit\"\u003eOfflinePlayer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Bed Spawn Location if bed exists, otherwise null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBedSpawnLocation",
      "comment": "Sets the Location where the player will spawn at their bed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - where to set the respawn location"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBedSpawnLocation",
      "comment": "Sets the Location where the player will spawn at their bed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - where to set the respawn location",
          "\u003ccode\u003eforce\u003c/code\u003e - whether to forcefully set the respawn location even if a valid bed is not present"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playNote",
      "comment": "Play a note for a player at a location. This requires a note block at the particular location (as far as the client is concerned). This will not work without a note block. This will not work with cake.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location of a note block.",
          "\u003ccode\u003einstrument\u003c/code\u003e - The instrument ID.",
          "\u003ccode\u003enote\u003c/code\u003e - The note ID."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playNote",
      "comment": "Play a note for a player at a location. This requires a note block at the particular location (as far as the client is concerned). This will not work without a note block. This will not work with cake.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location of a note block",
          "\u003ccode\u003einstrument\u003c/code\u003e - The instrument",
          "\u003ccode\u003enote\u003c/code\u003e - The note"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a sound for a player at the location. This function will fail silently if Location or Sound are null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - The sound to play",
          "\u003ccode\u003evolume\u003c/code\u003e - The volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - The pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a sound for a player at the location. This function will fail silently if Location or Sound are null. No sound will be heard by the player if their client does not have the respective sound for the value passed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - the internal sound name to play",
          "\u003ccode\u003evolume\u003c/code\u003e - the volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - the pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a sound for a player at the location. This function will fail silently if Location or Sound are null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - The sound to play",
          "\u003ccode\u003ecategory\u003c/code\u003e - The category of the sound",
          "\u003ccode\u003evolume\u003c/code\u003e - The volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - The pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playSound",
      "comment": "Play a sound for a player at the location. This function will fail silently if Location or Sound are null. No sound will be heard by the player if their client does not have the respective sound for the value passed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location to play the sound",
          "\u003ccode\u003esound\u003c/code\u003e - the internal sound name to play",
          "\u003ccode\u003ecategory\u003c/code\u003e - The category of the sound",
          "\u003ccode\u003evolume\u003c/code\u003e - the volume of the sound",
          "\u003ccode\u003epitch\u003c/code\u003e - the pitch of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopSound",
      "comment": "Stop the specified sound from playing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esound\u003c/code\u003e - the sound to stop"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopSound",
      "comment": "Stop the specified sound from playing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esound\u003c/code\u003e - the sound to stop"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopSound",
      "comment": "Stop the specified sound from playing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esound\u003c/code\u003e - the sound to stop",
          "\u003ccode\u003ecategory\u003c/code\u003e - the category of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopSound",
      "comment": "Stop the specified sound from playing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esound\u003c/code\u003e - the sound to stop",
          "\u003ccode\u003ecategory\u003c/code\u003e - the category of the sound"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Plays an effect to just this player.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location to play the effect at",
          "\u003ccode\u003eeffect\u003c/code\u003e - the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Effect.html\" title\u003d\"enum class in org.bukkit\"\u003e\u003ccode\u003eEffect\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edata\u003c/code\u003e - a data bit needed for some effects"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playEffect",
      "comment": "Plays an effect to just this player.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the data based based on the type of the effect"
        ],
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location to play the effect at",
          "\u003ccode\u003eeffect\u003c/code\u003e - the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Effect.html\" title\u003d\"enum class in org.bukkit\"\u003e\u003ccode\u003eEffect\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edata\u003c/code\u003e - a data bit needed for some effects"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "breakBlock",
      "comment": "Force this player to break a Block using the item in their main hand. This method will respect enchantments, handle item durability (if applicable) and drop experience and the correct items according to the tool/item in the player\u0027s hand. Note that this method will call a BlockBreakEvent, meaning that this method may not be successful in breaking the block if the event was cancelled by a third party plugin. Care should be taken if running this method in a BlockBreakEvent listener as recursion may be possible if it is invoked on the same Block being broken in the event. Additionally, a BlockDropItemEvent is called for the items dropped by this method (if successful). The block must be in the same world as the player.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eblock\u003c/code\u003e - the block to break"
        ],
        "return": [
          "true if the block was broken, false if the break failed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendBlockChange",
      "comment": "Send a block change. This fakes a block change packet for a user at a certain location. This will not actually change the world in any way.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location of the changed block",
          "\u003ccode\u003ematerial\u003c/code\u003e - The new block",
          "\u003ccode\u003edata\u003c/code\u003e - The block data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendBlockChange",
      "comment": "Send a block change. This fakes a block change packet for a user at a certain location. This will not actually change the world in any way.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location of the changed block",
          "\u003ccode\u003eblock\u003c/code\u003e - The new block"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendBlockDamage",
      "comment": "Send block damage. This fakes block break progress for a user at a certain location. This will not actually change the block\u0027s break progress in any way.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the damaged block",
          "\u003ccode\u003eprogress\u003c/code\u003e - the progress from 0.0 - 1.0 where 0 is no damage and 1.0 is the most damaged"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendChunkChange",
      "comment": "Send a chunk change. This fakes a chunk change packet for a user at a certain location. The updated cuboid must be entirely within a single chunk. This will not actually change the world in any way. At least one of the dimensions of the cuboid must be even. The size of the data buffer must be 2.5*sx*sy*sz and formatted in accordance with the Packet51 format.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - The location of the cuboid",
          "\u003ccode\u003esx\u003c/code\u003e - The x size of the cuboid",
          "\u003ccode\u003esy\u003c/code\u003e - The y size of the cuboid",
          "\u003ccode\u003esz\u003c/code\u003e - The z size of the cuboid",
          "\u003ccode\u003edata\u003c/code\u003e - The data to be sent"
        ],
        "return": [
          "true if the chunk change packet was sent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it",
          "\u003ccode\u003edyeColor\u003c/code\u003e - the color of the sign"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dyeColor is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it",
          "\u003ccode\u003ehasGlowingText\u003c/code\u003e - whether the text of the sign should glow as if dyed with a glowing ink sac"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dyeColor is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it",
          "\u003ccode\u003edyeColor\u003c/code\u003e - the color of the sign",
          "\u003ccode\u003ehasGlowingText\u003c/code\u003e - whether the text of the sign should glow as if dyed with a glowing ink sac"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dyeColor is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it",
          "\u003ccode\u003edyeColor\u003c/code\u003e - the color of the sign"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dyeColor is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendSignChange",
      "comment": "Send a sign change. This fakes a sign change packet for a user at a certain location. This will not actually change the world in any way. This method will use a sign at the location\u0027s block or a faked sign sent via sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte). If the client does not have a sign at the given location it will display an error message to the user.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location of the sign",
          "\u003ccode\u003elines\u003c/code\u003e - the new text on the sign or null to clear it",
          "\u003ccode\u003edyeColor\u003c/code\u003e - the color of the sign",
          "\u003ccode\u003ehasGlowingText\u003c/code\u003e - if the sign\u0027s text should be glowing"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if location is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dyeColor is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if lines is non-null and has a length less than 4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendMap",
      "comment": "Render a map and send it to the player in its entirety. This may be used when streaming the map in the normal manner is not desirable.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - The map to be sent"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerFull",
      "comment": "Permanently Bans the Profile and IP address currently used by the player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for ban"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerFull",
      "comment": "Permanently Bans the Profile and IP address currently used by the player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for ban",
          "\u003ccode\u003esource\u003c/code\u003e - Source of ban, or null for default"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerFull",
      "comment": "Bans the Profile and IP address currently used by the player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for Ban",
          "\u003ccode\u003eexpires\u003c/code\u003e - When to expire the ban"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerFull",
      "comment": "Bans the Profile and IP address currently used by the player.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for Ban",
          "\u003ccode\u003eexpires\u003c/code\u003e - When to expire the ban",
          "\u003ccode\u003esource\u003c/code\u003e - Source of the ban, or null for default"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Permanently Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for ban",
          "\u003ccode\u003ekickPlayer\u003c/code\u003e - Whether or not to kick the player afterwards"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Permanently Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for ban",
          "\u003ccode\u003esource\u003c/code\u003e - Source of ban, or null for default",
          "\u003ccode\u003ekickPlayer\u003c/code\u003e - Whether or not to kick the player afterwards"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for Ban",
          "\u003ccode\u003eexpires\u003c/code\u003e - When to expire the ban",
          "\u003ccode\u003ekickPlayer\u003c/code\u003e - Whether or not to kick the player afterwards"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Permanently Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for ban"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Permanently Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for ban",
          "\u003ccode\u003esource\u003c/code\u003e - Source of ban, or null for default"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for Ban",
          "\u003ccode\u003eexpires\u003c/code\u003e - When to expire the ban"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for Ban",
          "\u003ccode\u003eexpires\u003c/code\u003e - When to expire the ban",
          "\u003ccode\u003esource\u003c/code\u003e - Source of the banm or null for default"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanEntry",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banPlayerIP",
      "comment": "Bans the IP address currently used by the player. Does not ban the Profile, use banPlayerFull(String, Date, String)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereason\u003c/code\u003e - Reason for Ban",
          "\u003ccode\u003eexpires\u003c/code\u003e - When to expire the ban",
          "\u003ccode\u003esource\u003c/code\u003e - Source of the banm or null for default",
          "\u003ccode\u003ekickPlayer\u003c/code\u003e - if the targeted player should be kicked"
        ],
        "return": [
          "Ban Entry"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendActionBar",
      "comment": "Sends an Action Bar message to the client. Use Section symbols for legacy color codes to send formatting.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - The message to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendActionBar",
      "comment": "Sends an Action Bar message to the client. Use supplied alternative character to the section symbol to represent legacy color codes.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealternateChar\u003c/code\u003e - Alternate symbol such as \u0027\u0026amp;\u0027",
          "\u003ccode\u003emessage\u003c/code\u003e - The message to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendActionBar",
      "comment": "Sends an Action Bar message to the client.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - The components to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendMessage",
      "comment": "Sends the component to the player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html#sendMessage(net.md_5.bungee.api.chat.BaseComponent)\"\u003esendMessage\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003eCommandSender\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the components to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendMessage",
      "comment": "Sends an array of components as a single message to the player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html#sendMessage(net.md_5.bungee.api.chat.BaseComponent...)\"\u003esendMessage\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003eCommandSender\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponents\u003c/code\u003e - the components to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendMessage",
      "comment": "Sends an array of components as a single message to the specified screen position of this player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the screen position",
          "\u003ccode\u003ecomponents\u003c/code\u003e - the components to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerListHeaderFooter",
      "comment": "Set the text displayed in the player list header and footer for this player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheader\u003c/code\u003e - content for the top of the player list",
          "\u003ccode\u003efooter\u003c/code\u003e - content for the bottom of the player list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerListHeaderFooter",
      "comment": "Set the text displayed in the player list header and footer for this player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheader\u003c/code\u003e - content for the top of the player list",
          "\u003ccode\u003efooter\u003c/code\u003e - content for the bottom of the player list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTitleTimes",
      "comment": "Update the times for titles displayed to the player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efadeInTicks\u003c/code\u003e - ticks to fade-in",
          "\u003ccode\u003estayTicks\u003c/code\u003e - ticks to stay visible",
          "\u003ccode\u003efadeOutTicks\u003c/code\u003e - ticks to fade-out"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSubtitle",
      "comment": "Update the subtitle of titles displayed to the player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubtitle\u003c/code\u003e - Subtitle to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSubtitle",
      "comment": "Update the subtitle of titles displayed to the player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubtitle\u003c/code\u003e - Subtitle to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "showTitle",
      "comment": "Show the given title to the player, along with the last subtitle set, using the last set times",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - Title to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "showTitle",
      "comment": "Show the given title to the player, along with the last subtitle set, using the last set times",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - Title to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "showTitle",
      "comment": "Show the given title and subtitle to the player using the given times",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - big text",
          "\u003ccode\u003esubtitle\u003c/code\u003e - little text under it",
          "\u003ccode\u003efadeInTicks\u003c/code\u003e - ticks to fade-in",
          "\u003ccode\u003estayTicks\u003c/code\u003e - ticks to stay visible",
          "\u003ccode\u003efadeOutTicks\u003c/code\u003e - ticks to fade-out"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "showTitle",
      "comment": "Show the given title and subtitle to the player using the given times",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - big text",
          "\u003ccode\u003esubtitle\u003c/code\u003e - little text under it",
          "\u003ccode\u003efadeInTicks\u003c/code\u003e - ticks to fade-in",
          "\u003ccode\u003estayTicks\u003c/code\u003e - ticks to stay visible",
          "\u003ccode\u003efadeOutTicks\u003c/code\u003e - ticks to fade-out"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendTitle",
      "comment": "Show the title to the player, overriding any previously displayed title. This method overrides any previous title, use updateTitle(Title) to change the existing one.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - the title to send"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the title is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "updateTitle",
      "comment": "Show the title to the player, overriding any previously displayed title. This method doesn\u0027t override previous titles, but changes their values.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - the title to send"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if title is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hideTitle",
      "comment": "Hide any title that is currently visible to the player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "updateInventory",
      "comment": "Forces an update of the player\u0027s entire inventory.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerTime",
      "comment": "Sets the current time on the player\u0027s client. When relative is true the player\u0027s time will be kept synchronized to its world time with the specified offset. When using non relative time the player\u0027s time will stay fixed at the specified time parameter. It\u0027s up to the caller to continue updating the player\u0027s time. To restore player time to normal use resetPlayerTime().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - The current player\u0027s perceived time or the player\u0027s time offset from the server time.",
          "\u003ccode\u003erelative\u003c/code\u003e - When true the player time is kept relative to its world time."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerTime",
      "comment": "Returns the player\u0027s current timestamp.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The player\u0027s time"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerTimeOffset",
      "comment": "Returns the player\u0027s current time offset relative to server time, or the current player\u0027s fixed time if the player\u0027s time is absolute.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The player\u0027s time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPlayerTimeRelative",
      "comment": "Returns true if the player\u0027s time is relative to the server time, otherwise the player\u0027s time is absolute and will not change its current time unless done so with setPlayerTime().",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the player\u0027s time is relative to the server time."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetPlayerTime",
      "comment": "Restores the normal condition where the player\u0027s time is synchronized with the server time. Equivalent to calling setPlayerTime(0, true).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerWeather",
      "comment": "Sets the type of weather the player will see. When used, the weather status of the player is locked until resetPlayerWeather() is used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - The WeatherType enum type the player should experience"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.WeatherType",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerWeather",
      "comment": "Returns the type of weather the player is currently experiencing.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The WeatherType that the player is currently experiencing or null if player is seeing server weather."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetPlayerWeather",
      "comment": "Restores the normal condition where the player\u0027s weather is controlled by server conditions.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "giveExp",
      "comment": "Gives the player the amount of experience specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - Exp amount to give"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "giveExp",
      "comment": "Gives the player the amount of experience specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - Exp amount to give",
          "\u003ccode\u003eapplyMending\u003c/code\u003e - Mend players items with mending, with same behavior as picking up orbs. calls \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#applyMending(int)\"\u003e\u003ccode\u003eapplyMending(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "applyMending",
      "comment": "Applies the mending effect to any items just as picking up an orb would. Can also be called with giveExp(int, boolean) by passing true to applyMending",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - Exp to apply"
        ],
        "return": [
          "the remaining experience"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "giveExpLevels",
      "comment": "Gives the player the amount of experience levels specified. Levels can be taken by specifying a negative amount.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - amount of experience levels to give or take"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getExp",
      "comment": "Gets the players current experience points towards the next level. This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "Current experience points"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setExp",
      "comment": "Sets the players current experience points towards the next level This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexp\u003c/code\u003e - New experience points"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLevel",
      "comment": "Gets the players current experience level",
      "annotations": [],
      "tagMap": {
        "return": [
          "Current experience level"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLevel",
      "comment": "Sets the players current experience level",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - New experience level"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTotalExperience",
      "comment": "Gets the players total experience points. This refers to the total amount of experience the player has collected over time and is not currently displayed to the client.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Current total experience points"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTotalExperience",
      "comment": "Sets the players current experience points. This refers to the total amount of experience the player has collected over time and is not currently displayed to the client.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexp\u003c/code\u003e - New total experience points"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendExperienceChange",
      "comment": "Send an experience change. This fakes an experience change packet for a user. This will not actually change the experience points in any way.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#setExp(float)\"\u003e\u003ccode\u003esetExp(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprogress\u003c/code\u003e - Experience progress percentage (between 0.0 and 1.0)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendExperienceChange",
      "comment": "Send an experience change. This fakes an experience change packet for a user. This will not actually change the experience points in any way.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#setExp(float)\"\u003e\u003ccode\u003esetExp(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#setLevel(int)\"\u003e\u003ccode\u003esetLevel(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprogress\u003c/code\u003e - New experience progress percentage (between 0.0 and 1.0)",
          "\u003ccode\u003elevel\u003c/code\u003e - New experience level"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllowFlight",
      "comment": "Determines if the Player is allowed to fly via jump key double-tap like in creative mode.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if the player is allowed to fly."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAllowFlight",
      "comment": "Sets if the Player is allowed to fly via jump key double-tap like in creative mode.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eflight\u003c/code\u003e - If flight should be allowed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hidePlayer",
      "comment": "Hides a player from this player",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - Player to hide"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hidePlayer",
      "comment": "Hides a player from this player",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin that wants to hide the player",
          "\u003ccode\u003eplayer\u003c/code\u003e - Player to hide"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "showPlayer",
      "comment": "Allows this player to see a player that was previously hidden",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - Player to show"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "showPlayer",
      "comment": "Allows this player to see a player that was previously hidden. If another another plugin had hidden the player too, then the player will remain hidden until the other plugin calls this method too.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - Plugin that wants to show the player",
          "\u003ccode\u003eplayer\u003c/code\u003e - Player to show"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canSee",
      "comment": "Checks to see if a player has been hidden from this player",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - Player to check"
        ],
        "return": [
          "True if the provided player is not being hidden from this player"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isFlying",
      "comment": "Checks to see if this player is currently flying or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if the player is flying, else false."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFlying",
      "comment": "Makes this player start or stop flying.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - True to fly."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFlySpeed",
      "comment": "Sets the speed at which a client will fly. Negative values indicate reverse directions.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The new speed, from -1 to 1."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If new speed is less than -1 or greater than 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWalkSpeed",
      "comment": "Sets the speed at which a client will walk. Negative values indicate reverse directions.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The new speed, from -1 to 1."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If new speed is less than -1 or greater than 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFlySpeed",
      "comment": "Gets the current allowed speed that a client can fly.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The current allowed speed, from -1 to 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWalkSpeed",
      "comment": "Gets the current allowed speed that a client can walk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The current allowed speed, from -1 to 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTexturePack",
      "comment": "Request that the player\u0027s client download and switch texture packs. The player\u0027s client will download the new texture pack asynchronously in the background, and will automatically switch to it once the download is complete. If the client has downloaded and cached the same texture pack in the past, it will perform a file size check against the response content to determine if the texture pack has changed and needs to be downloaded again. When this request is sent for the very first time from a given server, the client will first display a confirmation GUI to the player before proceeding with the download. Notes: Players can disable server textures on their client, in which case this method will have no affect on them. Use the PlayerResourcePackStatusEvent to figure out whether or not the player loaded the pack! There is no concept of resetting texture packs back to default within Minecraft, so players will have to relog to do so or you have to send an empty pack. The request is send with \"null\" as the hash. This might result in newer versions not loading the pack correctly.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL from which the client will download the texture pack. The string must contain only US-ASCII characters and should be encoded as per RFC 1738."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is too long."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResourcePack",
      "comment": "Request that the player\u0027s client download and switch resource packs. The player\u0027s client will download the new resource pack asynchronously in the background, and will automatically switch to it once the download is complete. If the client has downloaded and cached the same resource pack in the past, it will perform a file size check against the response content to determine if the resource pack has changed and needs to be downloaded again. When this request is sent for the very first time from a given server, the client will first display a confirmation GUI to the player before proceeding with the download. Notes: Players can disable server resources on their client, in which case this method will have no affect on them. Use the PlayerResourcePackStatusEvent to figure out whether or not the player loaded the pack! There is no concept of resetting resource packs back to default within Minecraft, so players will have to relog to do so or you have to send an empty pack. The request is send with \"null\" as the hash. This might result in newer versions not loading the pack correctly.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL from which the client will download the resource pack. The string must contain only US-ASCII characters and should be encoded as per RFC 1738."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is too long. The length restriction is an implementation specific arbitrary value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResourcePack",
      "comment": "Request that the player\u0027s client download and switch resource packs. The player\u0027s client will download the new resource pack asynchronously in the background, and will automatically switch to it once the download is complete. If the client has downloaded and cached a resource pack with the same hash in the past it will not download but directly apply the cached pack. When this request is sent for the very first time from a given server, the client will first display a confirmation GUI to the player before proceeding with the download. Notes: Players can disable server resources on their client, in which case this method will have no affect on them. Use the PlayerResourcePackStatusEvent to figure out whether or not the player loaded the pack! There is no concept of resetting resource packs back to default within Minecraft, so players will have to relog to do so or you have to send an empty pack.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL from which the client will download the resource pack. The string must contain only US-ASCII characters and should be encoded as per RFC 1738.",
          "\u003ccode\u003ehash\u003c/code\u003e - The sha1 hash sum of the resource pack file which is used to apply a cached version of the pack directly without downloading if it is available. Hast to be 20 bytes long!"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is too long. The length restriction is an implementation specific arbitrary value.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the hash is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the hash is not 20 bytes long."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.scoreboard.Scoreboard",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScoreboard",
      "comment": "Gets the Scoreboard displayed to this player",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The current scoreboard seen by this player"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setScoreboard",
      "comment": "Sets the player\u0027s visible Scoreboard.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003escoreboard\u003c/code\u003e - New Scoreboard for the player"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if scoreboard is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if scoreboard was not created by the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/scoreboard/ScoreboardManager.html\" title\u003d\"interface in org.bukkit.scoreboard\"\u003e\u003ccode\u003escoreboard manager\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is a player that is not logged yet or has logged out"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isHealthScaled",
      "comment": "Gets if the client is displayed a \u0027scaled\u0027 health, that is, health on a scale from 0-getHealthScale().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#setHealthScaled(boolean)\"\u003e\u003ccode\u003esetHealthScaled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "if client health display is scaled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHealthScaled",
      "comment": "Sets if the client is displayed a \u0027scaled\u0027 health, that is, health on a scale from 0-getHealthScale(). Displayed health follows a simple formula displayedHealth \u003d getHealth() / getMaxHealth() * getHealthScale().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003escale\u003c/code\u003e - if the client health display is scaled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHealthScale",
      "comment": "Sets the number to scale health to for the client; this will also setHealthScaled(true). Displayed health follows a simple formula displayedHealth \u003d getHealth() / getMaxHealth() * getHealthScale().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003escale\u003c/code\u003e - the number to scale health to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if scale is \u0026lt;0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if scale is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html#NaN\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eDouble.NaN\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if scale is too high"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHealthScale",
      "comment": "Gets the number that health is scaled to for the client.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#setHealthScale(double)\"\u003e\u003ccode\u003esetHealthScale(double)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Player.html#setHealthScaled(boolean)\"\u003e\u003ccode\u003esetHealthScaled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number that health would be scaled to for the client if HealthScaling is set to true"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpectatorTarget",
      "comment": "Gets the entity which is followed by the camera when in GameMode.SPECTATOR.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the followed entity, or null if not in spectator mode or not following a specific entity."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpectatorTarget",
      "comment": "Sets the entity which is followed by the camera when in GameMode.SPECTATOR.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eentity\u003c/code\u003e - the entity to follow or null to reset"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the player is not in \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/GameMode.html#SPECTATOR\"\u003e\u003ccode\u003eGameMode.SPECTATOR\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendTitle",
      "comment": "Sends a title and a subtitle message to the player. If either of these values are null, they will not be sent and the display will remain unchanged. If they are empty strings, the display will be updated as such. If the strings contain a new line, only the first line will be sent. The titles will be displayed with the client\u0027s default timings.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - Title text",
          "\u003ccode\u003esubtitle\u003c/code\u003e - Subtitle text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendTitle",
      "comment": "Sends a title and a subtitle message to the player. If either of these values are null, they will not be sent and the display will remain unchanged. If they are empty strings, the display will be updated as such. If the strings contain a new line, only the first line will be sent. All timings values may take a value of -1 to indicate that they will use the last value sent (or the defaults if no title has been displayed).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - Title text",
          "\u003ccode\u003esubtitle\u003c/code\u003e - Subtitle text",
          "\u003ccode\u003efadeIn\u003c/code\u003e - time in ticks for titles to fade in. Defaults to 10.",
          "\u003ccode\u003estay\u003c/code\u003e - time in ticks for titles to stay. Defaults to 70.",
          "\u003ccode\u003efadeOut\u003c/code\u003e - time in ticks for titles to fade out. Defaults to 20."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetTitle",
      "comment": "Resets the title displayed to the player. This will clear the displayed title / subtitle and reset timings to their default values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/title/Title.html\" title\u003d\"class or interface in net.kyori.adventure.title\" class\u003d\"external-link\"\u003e\u003ccode\u003eTitle\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/audience/Audience.html#resetTitle()\" title\u003d\"class or interface in net.kyori.adventure.audience\" class\u003d\"external-link\"\u003eresetTitle\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/audience/Audience.html\" title\u003d\"class or interface in net.kyori.adventure.audience\" class\u003d\"external-link\"\u003eAudience\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003elocation\u003c/code\u003e - the location to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnParticle",
      "comment": "Spawns the particle (the number of times specified by count) at the target location. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of particle data (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparticle\u003c/code\u003e - the particle to spawn",
          "\u003ccode\u003ex\u003c/code\u003e - the position on the x axis to spawn at",
          "\u003ccode\u003ey\u003c/code\u003e - the position on the y axis to spawn at",
          "\u003ccode\u003ez\u003c/code\u003e - the position on the z axis to spawn at",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of particles",
          "\u003ccode\u003eoffsetX\u003c/code\u003e - the maximum random offset on the X axis",
          "\u003ccode\u003eoffsetY\u003c/code\u003e - the maximum random offset on the Y axis",
          "\u003ccode\u003eoffsetZ\u003c/code\u003e - the maximum random offset on the Z axis",
          "\u003ccode\u003eextra\u003c/code\u003e - the extra data for this particle, depends on the particle used (normally speed)",
          "\u003ccode\u003edata\u003c/code\u003e - the data to use for the particle or null, the type of this depends on \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Particle.html#getDataType()\"\u003e\u003ccode\u003eParticle.getDataType()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.advancement.AdvancementProgress",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAdvancementProgress",
      "comment": "Return the player\u0027s progression on the specified advancement.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eadvancement\u003c/code\u003e - advancement"
        ],
        "return": [
          "object detailing the player\u0027s progress"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientViewDistance",
      "comment": "Get the player\u0027s current client side view distance. Will default to the server view distance if the client has not yet communicated this information,",
      "annotations": [],
      "tagMap": {
        "return": [
          "client view distance as above"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "locale",
      "comment": "Gets the player\u0027s current locale.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the player\u0027s locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPing",
      "comment": "Gets the player\u0027s estimated ping in milliseconds. In Vanilla this value represents the average of the response time to the last four application layer ping packets sent. This value does not represent the network round trip time and as such may have less granularity and be impacted by other sources. For these reasons it should not be used for anti-cheat purposes. Its recommended use is only as a qualitative indicator of connection quality (Vanilla uses it for this purpose in the tab list).",
      "annotations": [],
      "tagMap": {
        "return": [
          "player ping"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocale",
      "comment": "Gets the player\u0027s current locale. The value of the locale String is not defined properly. The vanilla Minecraft client will use lowercase language / country pairs separated by an underscore, but custom resource packs may use any format they wish.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the player\u0027s locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAffectsSpawning",
      "comment": "Get whether the player can affect mob spawning",
      "annotations": [],
      "tagMap": {
        "return": [
          "if the player can affect mob spawning"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAffectsSpawning",
      "comment": "Set whether the player can affect mob spawning",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaffects\u003c/code\u003e - Whether the player can affect mob spawning"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getViewDistance",
      "comment": "Gets the view distance for this player",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#getViewDistance()\"\u003e\u003ccode\u003eWorld.getViewDistance()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#getNoTickViewDistance()\"\u003e\u003ccode\u003eWorld.getNoTickViewDistance()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the player\u0027s view distance"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setViewDistance",
      "comment": "Sets the view distance for this player",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#setViewDistance(int)\"\u003e\u003ccode\u003eWorld.setViewDistance(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#setNoTickViewDistance(int)\"\u003e\u003ccode\u003eWorld.setNoTickViewDistance(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eviewDistance\u003c/code\u003e - the player\u0027s view distance"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNoTickViewDistance",
      "comment": "Gets the no-ticking view distance for this player. No-tick view distance is the view distance where chunks will load, however the chunks and their entities will not be set to tick.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The no-tick view distance for this player."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNoTickViewDistance",
      "comment": "Sets the no-ticking view distance for this player. No-tick view distance is the view distance where chunks will load, however the chunks and their entities will not be set to tick.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eviewDistance\u003c/code\u003e - view distance in [2, 32] or -1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSendViewDistance",
      "comment": "Gets the sending view distance for this player. Sending view distance is the view distance where chunks will load in for players.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The sending view distance for this player."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSendViewDistance",
      "comment": "Sets the sending view distance for this player. Sending view distance is the view distance where chunks will load in for players.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eviewDistance\u003c/code\u003e - view distance in [2, 32] or -1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "updateCommands",
      "comment": "Update the list of commands sent to the client. Generally useful to ensure the client has a complete list of commands after permission changes are done.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openBook",
      "comment": "Open a Material.WRITTEN_BOOK for a Player",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebook\u003c/code\u003e - The book to open for this player"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.event.HoverEvent",
        "parameters": [
          {
            "name": "net.kyori.adventure.text.event.HoverEvent$ShowEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asHoverEvent",
      "comment": "Description copied from interface: net.kyori.adventure.text.event.HoverEventSource",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html#asHoverEvent(java.util.function.UnaryOperator)\"\u003easHoverEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003eEntity\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/text/event/HoverEventSource.html#asHoverEvent(java.util.function.UnaryOperator)\" title\u003d\"class or interface in net.kyori.adventure.text.event\" class\u003d\"external-link\"\u003easHoverEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/text/event/HoverEventSource.html\" title\u003d\"class or interface in net.kyori.adventure.text.event\" class\u003d\"external-link\"\u003eHoverEventSource\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/text/event/HoverEvent.ShowEntity.html\" title\u003d\"class or interface in net.kyori.adventure.text.event\" class\u003d\"external-link\"\u003eHoverEvent.ShowEntity\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - transformation on value"
        ],
        "return": [
          "a hover event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResourcePack",
      "comment": "Request that the player\u0027s client download and switch resource packs. The player\u0027s client will download the new resource pack asynchronously in the background, and will automatically switch to it once the download is complete. If the client has downloaded and cached the same resource pack in the past, it will perform a quick timestamp check over the network to determine if the resource pack has changed and needs to be downloaded again. When this request is sent for the very first time from a given server, the client will first display a confirmation GUI to the player before proceeding with the download. Notes: Players can disable server resources on their client, in which case this method will have no affect on them. There is no concept of resetting resource packs back to default within Minecraft, so players will have to relog to do so.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL from which the client will download the resource pack. The string must contain only US-ASCII characters and should be encoded as per RFC 1738.",
          "\u003ccode\u003ehash\u003c/code\u003e - A 40 character hexadecimal and lowercase SHA-1 digest of the resource pack file."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is too long. The length restriction is an implementation specific arbitrary value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResourcePack",
      "comment": "Request that the player\u0027s client download and switch resource packs. The player\u0027s client will download the new resource pack asynchronously in the background, and will automatically switch to it once the download is complete. If the client has downloaded and cached the same resource pack in the past, it will perform a quick timestamp check over the network to determine if the resource pack has changed and needs to be downloaded again. When this request is sent for the very first time from a given server, the client will first display a confirmation GUI to the player before proceeding with the download. Notes: Players can disable server resources on their client, in which case this method will have no affect on them. There is no concept of resetting resource packs back to default within Minecraft, so players will have to relog to do so.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL from which the client will download the resource pack. The string must contain only US-ASCII characters and should be encoded as per RFC 1738.",
          "\u003ccode\u003ehash\u003c/code\u003e - A 40 character hexadecimal and lowercase SHA-1 digest of the resource pack file.",
          "\u003ccode\u003erequired\u003c/code\u003e - Marks if the resource pack should be required by the client"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is too long. The length restriction is an implementation specific arbitrary value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResourcePack",
      "comment": "Request that the player\u0027s client download and switch resource packs. The player\u0027s client will download the new resource pack asynchronously in the background, and will automatically switch to it once the download is complete. If the client has downloaded and cached the same resource pack in the past, it will perform a quick timestamp check over the network to determine if the resource pack has changed and needs to be downloaded again. When this request is sent for the very first time from a given server, the client will first display a confirmation GUI to the player before proceeding with the download. Notes: Players can disable server resources on their client, in which case this method will have no affect on them. There is no concept of resetting resource packs back to default within Minecraft, so players will have to relog to do so.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL from which the client will download the resource pack. The string must contain only US-ASCII characters and should be encoded as per RFC 1738.",
          "\u003ccode\u003ehash\u003c/code\u003e - A 40 character hexadecimal and lowercase SHA-1 digest of the resource pack file.",
          "\u003ccode\u003erequired\u003c/code\u003e - Marks if the resource pack should be required by the client",
          "\u003ccode\u003eresourcePackPrompt\u003c/code\u003e - A Prompt to be displayed in the client request"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if the URL is too long. The length restriction is an implementation specific arbitrary value."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.player.PlayerResourcePackStatusEvent$Status",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResourcePackStatus",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the most recent resource pack status received from the player, or null if no status has ever been received from this player."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResourcePackHash",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the most recent resource pack hash received from the player, or null if no hash has ever been received from this player."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasResourcePack",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the last resource pack status received from this player was \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/player/PlayerResourcePackStatusEvent.Status.html#SUCCESSFULLY_LOADED\"\u003e\u003ccode\u003ePlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.profile.PlayerProfile",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerProfile",
      "comment": "Gets a copy of this players profile",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The players profile object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPlayerProfile",
      "comment": "Changes the PlayerProfile for this player. This will cause this player to be reregistered to all clients that can currently see this player",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprofile\u003c/code\u003e - The new profile to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCooldownPeriod",
      "comment": "Returns the amount of ticks the current cooldown lasts",
      "annotations": [],
      "tagMap": {
        "return": [
          "Amount of ticks cooldown will last"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCooledAttackStrength",
      "comment": "Returns the percentage of attack power available based on the cooldown (zero to one).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eadjustTicks\u003c/code\u003e - Amount of ticks to add to cooldown counter for this calculation"
        ],
        "return": [
          "Percentage of attack power available"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetCooldown",
      "comment": "Reset the cooldown counter to 0, effectively starting the cooldown period.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientOption",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the client option value of the player"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Firework",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "boostElytra",
      "comment": "Boost a Player that\u0027s LivingEntity.isGliding() using a Firework. If the creation of the entity is cancelled, no boosting is done. This method does not fire PlayerElytraBoostEvent.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efirework\u003c/code\u003e - The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Material.html#FIREWORK_ROCKET\"\u003e\u003ccode\u003eMaterial.FIREWORK_ROCKET\u003c/code\u003e\u003c/a\u003e to boost the player with"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/LivingEntity.html#isGliding()\"\u003e\u003ccode\u003eLivingEntity.isGliding()\u003c/code\u003e\u003c/a\u003e is false or if the \n\u003ccode\u003efirework\u003c/code\u003e isn\u0027t a \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Material.html#FIREWORK_ROCKET\"\u003e\u003ccode\u003eMaterial.FIREWORK_ROCKET\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Firework.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFirework\u003c/code\u003e\u003c/a\u003e boosting the Player or null if the spawning of the entity was cancelled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendOpLevel",
      "comment": "Send a packet to the player indicating its operator status level. Note: This will not persist across more than the current connection, and setting the player\u0027s operator status as a later point will override the effects of this.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - The level to send to the player. Must be in \n\u003ccode\u003e[0, 4]\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the level is negative or greater than \n\u003ccode\u003e4\u003c/code\u003e (i.e. not within \n\u003ccode\u003e[0, 4]\u003c/code\u003e)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTrackedPlayers",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Returns a set of Players within this player\u0027s tracking range (that the player\u0027s client can \"see\")"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientBrandName",
      "comment": "Returns player\u0027s client brand name. If the client didn\u0027t send this information, the brand name will be null. For the Notchian client this name defaults to vanilla. Some modified clients report other names such as forge.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "client brand name"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Player$Spigot",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spigot",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html#spigot()\"\u003espigot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003eCommandSender\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html#spigot()\"\u003espigot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003eEntity\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "org.bukkit.entity.Player$Spigot"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.entity.Player",
  "comment": "Represents a player, connected or not",
  "tagMap": {}
}