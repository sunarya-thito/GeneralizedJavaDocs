{
  "packageName": "org.bukkit.entity",
  "simpleName": "HumanEntity",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.entity.LivingEntity",
      "type": "Class"
    },
    {
      "name": "org.bukkit.entity.AnimalTamer",
      "type": "Class"
    },
    {
      "name": "org.bukkit.inventory.InventoryHolder",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns the name of this player",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/AnimalTamer.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/AnimalTamer.html\" title\u003d\"interface in org.bukkit.entity\"\u003eAnimalTamer\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/command/CommandSender.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003eCommandSender\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Player name"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.PlayerInventory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getInventory",
      "comment": "Get the player\u0027s inventory.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/InventoryHolder.html#getInventory()\"\u003egetInventory\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/inventory/InventoryHolder.html\" title\u003d\"interface in org.bukkit.inventory\"\u003eInventoryHolder\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The inventory of the player, this also contains the armor slots."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnderChest",
      "comment": "Get the player\u0027s EnderChest inventory",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The EnderChest of the player"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.MainHand",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMainHand",
      "comment": "Gets the player\u0027s selected main hand",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the players main hand"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.InventoryView$Property",
            "type": "Class"
          },
          "field": {
            "name": "prop"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWindowProperty",
      "comment": "If the player currently has an inventory window open, this method will set a property of that window, such as the state of a progress bar.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprop\u003c/code\u003e - The property.",
          "\u003ccode\u003evalue\u003c/code\u003e - The value to set the property to."
        ],
        "return": [
          "True if the property was successfully set."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.InventoryView",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOpenInventory",
      "comment": "Gets the inventory view the player is currently viewing. If they do not have an inventory window open, it returns their internal crafting view.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The inventory view."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.InventoryView",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.Inventory",
            "type": "Class"
          },
          "field": {
            "name": "inventory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openInventory",
      "comment": "Opens an inventory window with the specified inventory on the top and the player\u0027s inventory on the bottom.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003einventory\u003c/code\u003e - The inventory to open"
        ],
        "return": [
          "The newly opened inventory view"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.InventoryView",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "force"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openWorkbench",
      "comment": "Opens an empty workbench inventory window with the player\u0027s inventory on the bottom.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to attach it to. If null, the player\u0027s location is used.",
          "\u003ccode\u003eforce\u003c/code\u003e - If false, and there is no workbench block at the location, no inventory will be opened and null will be returned."
        ],
        "return": [
          "The newly opened inventory view, or null if it could not be opened."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.InventoryView",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "force"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openEnchanting",
      "comment": "Opens an empty enchanting inventory window with the player\u0027s inventory on the bottom.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to attach it to. If null, the player\u0027s location is used.",
          "\u003ccode\u003eforce\u003c/code\u003e - If false, and there is no enchanting table at the location, no inventory will be opened and null will be returned."
        ],
        "return": [
          "The newly opened inventory view, or null if it could not be opened."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.InventoryView",
            "type": "Class"
          },
          "field": {
            "name": "inventory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openInventory",
      "comment": "Opens an inventory window to the specified inventory view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einventory\u003c/code\u003e - The view to open"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.InventoryView",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Villager",
            "type": "Class"
          },
          "field": {
            "name": "trader"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "force"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openMerchant",
      "comment": "Starts a trade between the player and the villager. Note that only one player may trade with a villager at once. You must use the force parameter for this.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etrader\u003c/code\u003e - The merchant to trade with. Cannot be null.",
          "\u003ccode\u003eforce\u003c/code\u003e - whether to force the trade even if another player is trading"
        ],
        "return": [
          "The newly opened inventory view, or null if it could not be opened."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.InventoryView",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.Merchant",
            "type": "Class"
          },
          "field": {
            "name": "merchant"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "force"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "openMerchant",
      "comment": "Starts a trade between the player and the merchant. Note that only one player may trade with a merchant at once. You must use the force parameter for this.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emerchant\u003c/code\u003e - The merchant to trade with. Cannot be null.",
          "\u003ccode\u003eforce\u003c/code\u003e - whether to force the trade even if another player is trading"
        ],
        "return": [
          "The newly opened inventory view, or null if it could not be opened."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "closeInventory",
      "comment": "Force-closes the currently open inventory view for this player, if any.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemInHand",
      "comment": "Returns the ItemStack currently in your hand, can be empty.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack of the item you are currently holding."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItemInHand",
      "comment": "Sets the item to the given ItemStack, this will replace whatever the user was holding.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eitem\u003c/code\u003e - The ItemStack which will end up in the hand"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemOnCursor",
      "comment": "Returns the ItemStack currently on your cursor, can be empty. Will always be empty if the player currently has no open window.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack of the item you are currently moving around."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setItemOnCursor",
      "comment": "Sets the item to the given ItemStack, this will replace whatever the user was moving. Will always be empty if the player currently has no open window.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitem\u003c/code\u003e - The ItemStack which will end up in the hand"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "material"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasCooldown",
      "comment": "Check whether a cooldown is active on the specified material.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ematerial\u003c/code\u003e - the material to check"
        ],
        "return": [
          "if a cooldown is active on the material"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "material"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCooldown",
      "comment": "Get the cooldown time in ticks remaining for the specified material.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ematerial\u003c/code\u003e - the material to check"
        ],
        "return": [
          "the remaining cooldown time in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Material",
            "type": "Class"
          },
          "field": {
            "name": "material"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCooldown",
      "comment": "Set a cooldown on the specified material for a certain amount of ticks. ticks. 0 ticks will result in the removal of the cooldown. Cooldowns are used by the server for items such as ender pearls and shields to prevent them from being used repeatedly. Note that cooldowns will not by themselves stop an item from being used for attacking.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ematerial\u003c/code\u003e - the material to set the cooldown for",
          "\u003ccode\u003eticks\u003c/code\u003e - the amount of ticks to set or 0 to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSleepTicks",
      "comment": "Get the sleep ticks of the player. This value may be capped.",
      "tagMap": {
        "return": [
          "slumber ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "force"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sleep",
      "comment": "Attempts to make the entity sleep at the given location. The location must be in the current world and have a bed placed at the location. The game may also enforce other requirements such as proximity to bed, monsters, and dimension type if force is not set.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location of the bed",
          "\u003ccode\u003eforce\u003c/code\u003e - whether to try and sleep at the location even if not normally possible"
        ],
        "return": [
          "whether the sleep was successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "setSpawnLocation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "wakeup",
      "comment": "Causes the player to wakeup if they are currently sleeping.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esetSpawnLocation\u003c/code\u003e - whether to set their spawn location to the bed they are currently sleeping in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if not sleeping"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBedLocation",
      "comment": "Gets the location of the bed the player is currently sleeping in",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if not sleeping"
        ],
        "return": [
          "location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.GameMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGameMode",
      "comment": "Gets this human\u0027s current GameMode",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "Current game mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.GameMode",
            "type": "Class"
          },
          "field": {
            "name": "mode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGameMode",
      "comment": "Sets this human\u0027s current GameMode",
      "tagMap": {
        "param": [
          "\u003ccode\u003emode\u003c/code\u003e - New game mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBlocking",
      "comment": "Check if the player is currently blocking (ie with a shield).",
      "tagMap": {
        "return": [
          "Whether they are blocking."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isHandRaised",
      "comment": "Check if the player currently has their hand raised (ie about to begin blocking).",
      "tagMap": {
        "return": [
          "Whether their hand is raised"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemInUse",
      "comment": "Gets the item that the player is using (eating food, drawing back a bow, blocking, etc.)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "the item being used by the player, or null if they are not using an item"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getExpToLevel",
      "comment": "Get the total amount of experience required for the player to level",
      "tagMap": {
        "return": [
          "Experience required to level up"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttackCooldown",
      "comment": "Gets the current cooldown for a player\u0027s attack. This is used to calculate damage, with 1.0 representing a fully charged attack and 0.0 representing a non-charged attack",
      "tagMap": {
        "return": [
          "A float between 0.0-1.0 representing the progress of the charge"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.NamespacedKey",
            "type": "Class"
          },
          "field": {
            "name": "recipe"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "discoverRecipe",
      "comment": "Discover a recipe for this player such that it has not already been discovered. This method will add the key\u0027s associated recipe to the player\u0027s recipe book.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipe\u003c/code\u003e - the key of the recipe to discover"
        ],
        "return": [
          "whether or not the recipe was newly discovered"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "org.bukkit.NamespacedKey",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "recipes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "discoverRecipes",
      "comment": "Discover a collection of recipes for this player such that they have not already been discovered. This method will add the keys\u0027 associated recipes to the player\u0027s recipe book. If a recipe in the provided collection has already been discovered, it will be silently ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipes\u003c/code\u003e - the keys of the recipes to discover"
        ],
        "return": [
          "the amount of newly discovered recipes where 0 indicates that none were newly discovered and a number equal to \n\u003ccode\u003erecipes.size()\u003c/code\u003e indicates that all were new"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.NamespacedKey",
            "type": "Class"
          },
          "field": {
            "name": "recipe"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "undiscoverRecipe",
      "comment": "Undiscover a recipe for this player such that it has already been discovered. This method will remove the key\u0027s associated recipe from the player\u0027s recipe book.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipe\u003c/code\u003e - the key of the recipe to undiscover"
        ],
        "return": [
          "whether or not the recipe was successfully undiscovered (i.e. it was previously discovered)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "org.bukkit.NamespacedKey",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "recipes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "undiscoverRecipes",
      "comment": "Undiscover a collection of recipes for this player such that they have already been discovered. This method will remove the keys\u0027 associated recipes from the player\u0027s recipe book. If a recipe in the provided collection has not yet been discovered, it will be silently ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipes\u003c/code\u003e - the keys of the recipes to undiscover"
        ],
        "return": [
          "the amount of undiscovered recipes where 0 indicates that none were undiscovered and a number equal to \n\u003ccode\u003erecipes.size()\u003c/code\u003e indicates that all were undiscovered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.NamespacedKey",
            "type": "Class"
          },
          "field": {
            "name": "recipe"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasDiscoveredRecipe",
      "comment": "Check whether or not this entity has discovered the specified recipe.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipe\u003c/code\u003e - the key of the recipe to check"
        ],
        "return": [
          "true if discovered, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.NamespacedKey",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDiscoveredRecipes",
      "comment": "Get an immutable set of recipes this entity has discovered.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "all discovered recipes"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShoulderEntityLeft",
      "comment": "Gets the entity currently perched on the left shoulder or null if no entity. The returned entity will not be spawned within the world, so most operations are invalid unless the entity is first spawned in.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "left shoulder entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "entity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShoulderEntityLeft",
      "comment": "Sets the entity currently perched on the left shoulder, or null to remove. This method will remove the entity from the world. Note that only a copy of the entity will be set to display on the shoulder. Also note that the client will currently only render Parrot entities.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eentity\u003c/code\u003e - left shoulder entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShoulderEntityRight",
      "comment": "Gets the entity currently perched on the right shoulder or null if no entity. The returned entity will not be spawned within the world, so most operations are invalid unless the entity is first spawned in.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "right shoulder entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "entity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShoulderEntityRight",
      "comment": "Sets the entity currently perched on the right shoulder, or null to remove. This method will remove the entity from the world. Note that only a copy of the entity will be set to display on the shoulder. Also note that the client will currently only render Parrot entities.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eentity\u003c/code\u003e - right shoulder entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "dropAll"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dropItem",
      "comment": "Make the entity drop the item in their hand. This will force the entity to drop the item they are holding with an option to drop the entire ItemStack or just 1 of the items.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edropAll\u003c/code\u003e - True to drop entire stack, false to drop 1 of the stack"
        ],
        "return": [
          "True if item was dropped successfully"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getExhaustion",
      "comment": "Gets the players current exhaustion level. Exhaustion controls how fast the food level drops. While you have a certain amount of exhaustion, your saturation will drop to zero, and then your food will drop to zero.",
      "tagMap": {
        "return": [
          "Exhaustion level"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setExhaustion",
      "comment": "Sets the players current exhaustion level",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Exhaustion level"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSaturation",
      "comment": "Gets the players current saturation level. Saturation is a buffer for food level. Your food level will not drop if you are saturated \u003e 0.",
      "tagMap": {
        "return": [
          "Saturation level"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSaturation",
      "comment": "Sets the players current saturation level",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Saturation level"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFoodLevel",
      "comment": "Gets the players current food level",
      "tagMap": {
        "return": [
          "Food level"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFoodLevel",
      "comment": "Sets the players current food level",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - New food level"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSaturatedRegenRate",
      "comment": "Get the regeneration rate (1 health per x ticks) of the HumanEntity when they have saturation and their food level is \u003e\u003d 20. Default is 10.",
      "tagMap": {
        "return": [
          "the regeneration rate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSaturatedRegenRate",
      "comment": "Set the regeneration rate (1 health per x ticks) of the HumanEntity when they have saturation and their food level is \u003e\u003d 20. Default is 10. Not affected if the world\u0027s difficulty is peaceful.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - the amount of ticks to gain 1 health."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUnsaturatedRegenRate",
      "comment": "Get the regeneration rate (1 health per x ticks) of the HumanEntity when they have no saturation and their food level is \u003e\u003d 18. Default is 80.",
      "tagMap": {
        "return": [
          "the regeneration rate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUnsaturatedRegenRate",
      "comment": "Get the regeneration rate (1 health per x ticks) of the HumanEntity when they have no saturation and their food level is \u003e\u003d 18. Default is 80. Not affected if the world\u0027s difficulty is peaceful.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - the amount of ticks to gain 1 health."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStarvationRate",
      "comment": "Get the starvation rate (1 health per x ticks) of the HumanEntity. Default is 80.",
      "tagMap": {
        "return": [
          "the starvation rate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setStarvationRate",
      "comment": "Get the starvation rate (1 health per x ticks) of the HumanEntity. Default is 80.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - the amount of ticks to lose 1 health"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.entity.HumanEntity",
  "comment": "Represents a human entity, such as an NPC or a player",
  "tagMap": {}
}