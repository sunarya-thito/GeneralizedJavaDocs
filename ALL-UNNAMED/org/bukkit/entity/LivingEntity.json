{
  "packageName": "org.bukkit.entity",
  "simpleName": "LivingEntity",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.attribute.Attributable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.entity.Damageable",
      "type": "Class"
    },
    {
      "name": "org.bukkit.projectiles.ProjectileSource",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEyeHeight",
      "comment": "Gets the height of the living entity\u0027s eyes above its Location.",
      "tagMap": {
        "return": [
          "height of the living entity\u0027s eyes above its location"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ignorePose"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEyeHeight",
      "comment": "Gets the height of the living entity\u0027s eyes above its Location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eignorePose\u003c/code\u003e - if set to true, the effects of pose changes, eg sneaking and gliding will be ignored"
        ],
        "return": [
          "height of the living entity\u0027s eyes above its location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEyeLocation",
      "comment": "Get a Location detailing the current eye position of the living entity.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a location at the eyes of the living entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "org.bukkit.Material",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "transparent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLineOfSight",
      "comment": "Gets all blocks along the living entity\u0027s line of sight. This list contains all blocks from the living entity\u0027s eye position to target inclusive. This method considers all blocks as 1x1x1 in size.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etransparent\u003c/code\u003e - Set containing all transparent block Materials (set to null for only air)",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan (may be limited by server by at least 100 blocks, no less)"
        ],
        "return": [
          "list containing all blocks along the living entity\u0027s line of sight"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "org.bukkit.Material",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "transparent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlock",
      "comment": "Gets the block that the living entity has targeted. This method considers all blocks as 1x1x1 in size. To take exact block collision shapes into account, see getTargetBlockExact(int, FluidCollisionMode).",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etransparent\u003c/code\u003e - Set containing all transparent block Materials (set to null for only air)",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan (may be limited by server by at least 100 blocks, no less)"
        ],
        "return": [
          "block that the living entity has targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlock",
      "comment": "Gets the block that the living entity has targeted, ignoring fluids",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan"
        ],
        "return": [
          "block that the living entity has targeted, or null if no block is within maxDistance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "com.destroystokyo.paper.block.TargetBlockInfo$FluidMode",
            "type": "Class"
          },
          "field": {
            "name": "fluidMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlock",
      "comment": "Gets the block that the living entity has targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan",
          "\u003ccode\u003efluidMode\u003c/code\u003e - whether to check fluids or not"
        ],
        "return": [
          "block that the living entity has targeted, or null if no block is within maxDistance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockFace",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlockFace",
      "comment": "Gets the blockface of that block that the living entity has targeted, ignoring fluids",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan"
        ],
        "return": [
          "blockface of the block that the living entity has targeted, or null if no block is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockFace",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "com.destroystokyo.paper.block.TargetBlockInfo$FluidMode",
            "type": "Class"
          },
          "field": {
            "name": "fluidMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlockFace",
      "comment": "Gets the blockface of that block that the living entity has targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan",
          "\u003ccode\u003efluidMode\u003c/code\u003e - whether to check fluids or not"
        ],
        "return": [
          "blockface of the block that the living entity has targeted, or null if no block is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.block.TargetBlockInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlockInfo",
      "comment": "Gets information about the block the living entity has targeted, ignoring fluids",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan"
        ],
        "return": [
          "TargetBlockInfo about the block the living entity has targeted, or null if no block is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.block.TargetBlockInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "com.destroystokyo.paper.block.TargetBlockInfo$FluidMode",
            "type": "Class"
          },
          "field": {
            "name": "fluidMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlockInfo",
      "comment": "Gets information about the block the living entity has targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan",
          "\u003ccode\u003efluidMode\u003c/code\u003e - whether to check fluids or not"
        ],
        "return": [
          "TargetBlockInfo about the block the living entity has targeted, or null if no block is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetEntity",
      "comment": "Gets information about the entity being targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan"
        ],
        "return": [
          "entity being targeted, or null if no entity is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ignoreBlocks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetEntity",
      "comment": "Gets information about the entity being targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan",
          "\u003ccode\u003eignoreBlocks\u003c/code\u003e - true to scan through blocks"
        ],
        "return": [
          "entity being targeted, or null if no entity is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.entity.TargetEntityInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetEntityInfo",
      "comment": "Gets information about the entity being targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan"
        ],
        "return": [
          "TargetEntityInfo about the entity being targeted, or null if no entity is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.entity.TargetEntityInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ignoreBlocks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetEntityInfo",
      "comment": "Gets information about the entity being targeted",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan",
          "\u003ccode\u003eignoreBlocks\u003c/code\u003e - true to scan through blocks"
        ],
        "return": [
          "TargetEntityInfo about the entity being targeted, or null if no entity is targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "org.bukkit.Material",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "transparent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastTwoTargetBlocks",
      "comment": "Gets the last two blocks along the living entity\u0027s line of sight. The target block will be the last block in the list. This method considers all blocks as 1x1x1 in size.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etransparent\u003c/code\u003e - Set containing all transparent block Materials (set to null for only air)",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - this is the maximum distance to scan. This may be further limited by the server, but never to less than 100 blocks"
        ],
        "return": [
          "list containing the last 2 blocks along the living entity\u0027s line of sight"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlockExact",
      "comment": "Gets the block that the living entity has targeted. This takes the blocks\u0027 precise collision shapes into account. Fluids are ignored. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/LivingEntity.html#getTargetBlockExact(int,org.bukkit.FluidCollisionMode)\"\u003e\u003ccode\u003egetTargetBlockExact(int, org.bukkit.FluidCollisionMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance to scan"
        ],
        "return": [
          "block that the living entity has targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.FluidCollisionMode",
            "type": "Class"
          },
          "field": {
            "name": "fluidCollisionMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetBlockExact",
      "comment": "Gets the block that the living entity has targeted. This takes the blocks\u0027 precise collision shapes into account. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/LivingEntity.html#rayTraceBlocks(double,org.bukkit.FluidCollisionMode)\"\u003e\u003ccode\u003erayTraceBlocks(double, FluidCollisionMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance to scan",
          "\u003ccode\u003efluidCollisionMode\u003c/code\u003e - the fluid collision mode"
        ],
        "return": [
          "block that the living entity has targeted"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceBlocks",
      "comment": "Performs a ray trace that provides information on the targeted block. This takes the blocks\u0027 precise collision shapes into account. Fluids are ignored. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/entity/LivingEntity.html#rayTraceBlocks(double,org.bukkit.FluidCollisionMode)\"\u003e\u003ccode\u003erayTraceBlocks(double, FluidCollisionMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance to scan"
        ],
        "return": [
          "information on the targeted block, or \n\u003ccode\u003enull\u003c/code\u003e if there is no targeted block in range"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "maxDistance"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.FluidCollisionMode",
            "type": "Class"
          },
          "field": {
            "name": "fluidCollisionMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTraceBlocks",
      "comment": "Performs a ray trace that provides information on the targeted block. This takes the blocks\u0027 precise collision shapes into account. This may cause loading of chunks! Some implementations may impose artificial restrictions on the maximum distance.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode)\"\u003e\u003ccode\u003eWorld.rayTraceBlocks(Location, Vector, double, FluidCollisionMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance to scan",
          "\u003ccode\u003efluidCollisionMode\u003c/code\u003e - the fluid collision mode"
        ],
        "return": [
          "information on the targeted block, or \n\u003ccode\u003enull\u003c/code\u003e if there is no targeted block in range"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRemainingAir",
      "comment": "Returns the amount of air that the living entity has remaining, in ticks.",
      "tagMap": {
        "return": [
          "amount of air remaining"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRemainingAir",
      "comment": "Sets the amount of air that the living entity has remaining, in ticks.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - amount of air remaining"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaximumAir",
      "comment": "Returns the maximum amount of air the living entity can have, in ticks.",
      "tagMap": {
        "return": [
          "maximum amount of air"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaximumAir",
      "comment": "Sets the maximum amount of air the living entity can have, in ticks.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - maximum amount of air"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArrowCooldown",
      "comment": "Gets the time in ticks until the next arrow leaves the entity\u0027s body.",
      "tagMap": {
        "return": [
          "ticks until arrow leaves"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setArrowCooldown",
      "comment": "Sets the time in ticks until the next arrow leaves the entity\u0027s body.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - time until arrow leaves"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArrowsInBody",
      "comment": "Gets the amount of arrows in an entity\u0027s body.",
      "tagMap": {
        "return": [
          "amount of arrows in body"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setArrowsInBody",
      "comment": "Set the amount of arrows in the entity\u0027s body.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - amount of arrows in entity\u0027s body"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBeeStingerCooldown",
      "comment": "Gets the time in ticks until the next bee stinger leaves the entity\u0027s body.",
      "tagMap": {
        "return": [
          "ticks until bee stinger leaves"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBeeStingerCooldown",
      "comment": "Sets the time in ticks until the next stinger leaves the entity\u0027s body.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - time until bee stinger leaves"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBeeStingersInBody",
      "comment": "Gets the amount of bee stingers in an entity\u0027s body.",
      "tagMap": {
        "return": [
          "amount of bee stingers in body"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBeeStingersInBody",
      "comment": "Set the amount of bee stingers in the entity\u0027s body.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - amount of bee stingers in entity\u0027s body"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaximumNoDamageTicks",
      "comment": "Returns the living entity\u0027s current maximum no damage ticks. This is the maximum duration in which the living entity will not take damage.",
      "tagMap": {
        "return": [
          "maximum no damage ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaximumNoDamageTicks",
      "comment": "Sets the living entity\u0027s current maximum no damage ticks.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - maximum amount of no damage ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastDamage",
      "comment": "Returns the living entity\u0027s last damage taken in the current no damage ticks time. Only damage higher than this amount will further damage the living entity.",
      "tagMap": {
        "return": [
          "damage taken since the last no damage ticks time period"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "damage"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLastDamage",
      "comment": "Sets the damage dealt within the current no damage ticks time period.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edamage\u003c/code\u003e - amount of damage"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNoDamageTicks",
      "comment": "Returns the living entity\u0027s current no damage ticks.",
      "tagMap": {
        "return": [
          "amount of no damage ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ticks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNoDamageTicks",
      "comment": "Sets the living entity\u0027s current no damage ticks.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eticks\u003c/code\u003e - amount of no damage ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Player",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKiller",
      "comment": "Gets the player identified as the killer of the living entity. May be null.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "killer player, or null if none found"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "field": {
            "name": "killer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setKiller",
      "comment": "Sets the player identified as the killer of the living entity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekiller\u003c/code\u003e - player"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.potion.PotionEffect",
            "type": "Class"
          },
          "field": {
            "name": "effect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPotionEffect",
      "comment": "Adds the given PotionEffect to the living entity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeffect\u003c/code\u003e - PotionEffect to be added"
        ],
        "return": [
          "whether the effect could be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.potion.PotionEffect",
            "type": "Class"
          },
          "field": {
            "name": "effect"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "force"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPotionEffect",
      "comment": "Adds the given PotionEffect to the living entity. Only one potion effect can be present for a given PotionEffectType.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeffect\u003c/code\u003e - PotionEffect to be added",
          "\u003ccode\u003eforce\u003c/code\u003e - whether conflicting effects should be removed"
        ],
        "return": [
          "whether the effect could be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "org.bukkit.potion.PotionEffect",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "effects"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPotionEffects",
      "comment": "Attempts to add all of the given PotionEffect to the living entity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeffects\u003c/code\u003e - the effects to add"
        ],
        "return": [
          "whether all of the effects could be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.potion.PotionEffectType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasPotionEffect",
      "comment": "Returns whether the living entity already has an existing effect of the given PotionEffectType applied to it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the potion type to check"
        ],
        "return": [
          "whether the living entity has this potion effect active on them"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.potion.PotionEffect",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.potion.PotionEffectType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPotionEffect",
      "comment": "Returns the active PotionEffect of the specified type. If the effect is not present on the entity then null will be returned.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the potion type to check"
        ],
        "return": [
          "the effect active on this entity, or null if not active."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.potion.PotionEffectType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePotionEffect",
      "comment": "Removes any effects present of the given PotionEffectType.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the potion type to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "org.bukkit.potion.PotionEffect",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getActivePotionEffects",
      "comment": "Returns all currently active PotionEffects on the living entity.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a collection of \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003es"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasLineOfSight",
      "comment": "Checks whether the living entity has block line of sight to another. This uses the same algorithm that hostile mobs use to find the closest player.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the entity to determine line of sight to"
        ],
        "return": [
          "true if there is a line of sight, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasLineOfSight",
      "comment": "Checks whether the living entity has block line of sight to the given block. This uses the same algorithm that hostile mobs use to find the closest player.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location to determine line of sight to"
        ],
        "return": [
          "true if there is a line of sight, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRemoveWhenFarAway",
      "comment": "Returns if the living entity despawns when away from players or not. By default, animals are not removed while other mobs are.",
      "tagMap": {
        "return": [
          "true if the living entity is removed when away from players"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "remove"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRemoveWhenFarAway",
      "comment": "Sets whether or not the living entity despawns when away from players or not.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eremove\u003c/code\u003e - the removal status"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.EntityEquipment",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEquipment",
      "comment": "Gets the inventory with the equipment worn by the living entity.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "the living entity\u0027s inventory"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "pickup"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCanPickupItems",
      "comment": "Sets whether or not the living entity can pick up items.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epickup\u003c/code\u003e - whether or not the living entity can pick up items"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCanPickupItems",
      "comment": "Gets if the living entity can pick up items.",
      "tagMap": {
        "return": [
          "whether or not the living entity can pick up items"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLeashed",
      "comment": "Returns whether the entity is currently leashed.",
      "tagMap": {
        "return": [
          "whether the entity is leashed"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLeashHolder",
      "comment": "Gets the entity that is currently leading this entity.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if not currently leashed"
        ],
        "return": [
          "the entity holding the leash"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "holder"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLeashHolder",
      "comment": "Sets the leash on this entity to be held by the supplied entity. This method has no effect on EnderDragons, Withers, Players, or Bats. Non-living entities excluding leashes will not persist as leash holders.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eholder\u003c/code\u003e - the entity to leash this entity to, or null to unleash"
        ],
        "return": [
          "whether the operation was successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isGliding",
      "comment": "Checks to see if an entity is gliding, such as using an Elytra.",
      "tagMap": {
        "return": [
          "True if this entity is gliding."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "gliding"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGliding",
      "comment": "Makes entity start or stop gliding. This will work even if an Elytra is not equipped, but will be reverted by the server immediately after unless an event-cancelling mechanism is put in place.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egliding\u003c/code\u003e - True if the entity is gliding."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSwimming",
      "comment": "Checks to see if an entity is swimming.",
      "tagMap": {
        "return": [
          "True if this entity is swimming."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "swimming"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSwimming",
      "comment": "Makes entity start or stop swimming. This may have unexpected results if the entity is not in water.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eswimming\u003c/code\u003e - True if the entity is swimming."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRiptiding",
      "comment": "Checks to see if an entity is currently using the Riptide enchantment.",
      "tagMap": {
        "return": [
          "True if this entity is currently riptiding."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSleeping",
      "comment": "Returns whether this entity is slumbering.",
      "tagMap": {
        "return": [
          "slumber state"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isClimbing",
      "comment": "Gets if the entity is climbing.",
      "tagMap": {
        "return": [
          "if the entity is climbing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ai"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAI",
      "comment": "Sets whether an entity will have AI. The entity will be completely unable to move if it has no AI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eai\u003c/code\u003e - whether the mob will have AI or not."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasAI",
      "comment": "Checks whether an entity has AI. The entity will be completely unable to move if it has no AI.",
      "tagMap": {
        "return": [
          "true if the entity has AI, otherwise false."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "attack",
      "comment": "Makes this entity attack the given entity with a melee attack. Attack damage is calculated by the server from the attributes and equipment of this mob, and knockback is applied to target as appropriate.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - entity to attack."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "swingMainHand",
      "comment": "Makes this entity swing their main hand. This method does nothing if this entity does not have an animation for swinging their main hand.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "swingOffHand",
      "comment": "Makes this entity swing their off hand. This method does nothing if this entity does not have an animation for swinging their off hand.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "collidable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCollidable",
      "comment": "Set if this entity will be subject to collisions with other entities. Exemptions to this rule can be managed with getCollidableExemptions()",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecollidable\u003c/code\u003e - collision status"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCollidable",
      "comment": "Gets if this entity is subject to collisions with other entities. Some entities might be exempted from the collidable rule of this entity. Use getCollidableExemptions() to get these. Please note that this method returns only the custom collidable state, not whether the entity is non-collidable for other reasons such as being dead.",
      "tagMap": {
        "return": [
          "collision status"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.util.UUID",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCollidableExemptions",
      "comment": "Gets a mutable set of UUIDs of the entities which are exempt from the entity\u0027s collidable rule and which\u0027s collision with this entity will behave the opposite of it. This set can be modified to add or remove exemptions. For example if collidable is true and an entity is in the exemptions set then it will not collide with it. Similarly if collidable is false and an entity is in this set then it will still collide with it. Note these exemptions are not (currently) persistent.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the collidable exemption set"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.memory.MemoryKey",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "memoryKey"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMemory",
      "comment": "Returns the value of the memory specified. Note that the value is null when the specific entity does not have that value by default.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the return value"
        ],
        "param": [
          "\u003ccode\u003ememoryKey\u003c/code\u003e - memory to access"
        ],
        "return": [
          "a instance of the memory section value or null if not present"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.memory.MemoryKey",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "memoryKey"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "memoryValue"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMemory",
      "comment": "Sets the value of the memory specified. Note that the value will not be persisted when the specific entity does not have that value by default.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the passed value"
        ],
        "param": [
          "\u003ccode\u003ememoryKey\u003c/code\u003e - the memory to access",
          "\u003ccode\u003ememoryValue\u003c/code\u003e - a typed memory value"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.EntityCategory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCategory",
      "comment": "Get the category to which this entity belongs. Categories may subject this entity to additional effects, benefits or debuffs.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the entity category"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "invisible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInvisible",
      "comment": "Sets whether the entity is invisible or not.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einvisible\u003c/code\u003e - If the entity is invisible"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInvisible",
      "comment": "Gets whether the entity is invisible or not.",
      "tagMap": {
        "return": [
          "Whether the entity is invisible"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArrowsStuck",
      "comment": "Get the number of arrows stuck in this entity",
      "tagMap": {
        "return": [
          "Number of arrows stuck"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "arrows"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setArrowsStuck",
      "comment": "Set the number of arrows stuck in this entity",
      "tagMap": {
        "param": [
          "\u003ccode\u003earrows\u003c/code\u003e - Number of arrows to stick in this entity"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShieldBlockingDelay",
      "comment": "Get the delay (in ticks) before blocking is effective for this entity",
      "tagMap": {
        "return": [
          "Delay in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShieldBlockingDelay",
      "comment": "Set the delay (in ticks) before blocking is effective for this entity",
      "tagMap": {
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - Delay in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getActiveItem",
      "comment": "Get\u0027s the item being actively \"used\" or consumed.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The item. Will be null if no active item."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearActiveItem",
      "comment": "Interrupts any ongoing active \"usage\" or consumption or an item.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemUseRemainingTime",
      "comment": "Get\u0027s remaining time a player needs to keep hands raised with an item to finish using it.",
      "tagMap": {
        "return": [
          "Remaining ticks to use the item"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHandRaisedTime",
      "comment": "Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)",
      "tagMap": {
        "return": [
          "Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isHandRaised",
      "comment": "Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)",
      "tagMap": {
        "return": [
          "Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.EquipmentSlot",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHandRaised",
      "comment": "Gets the hand raised by this living entity. Will be either EquipmentSlot.HAND or EquipmentSlot.OFF_HAND.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the hand raised"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isJumping",
      "comment": "Get entity jump state. Jump state will be true when the entity has been marked to jump.",
      "tagMap": {
        "return": [
          "entity jump state."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "jumping"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setJumping",
      "comment": "Set entity jump state Setting to true will mark the entity to jump. Setting to false will unmark the entity to jump but will not stop a jump already in-progress.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ejumping\u003c/code\u003e - entity jump state"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Item",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playPickupItemAnimation",
      "comment": "Plays pickup item animation towards this entity. This will remove the item on the client. Quantity is inferred to be that of the Item.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitem\u003c/code\u003e - item to pickup"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Item",
            "type": "Class"
          },
          "field": {
            "name": "item"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "quantity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "playPickupItemAnimation",
      "comment": "Plays pickup item animation towards this entity. This will remove the item on the client.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eitem\u003c/code\u003e - item to pickup",
          "\u003ccode\u003equantity\u003c/code\u003e - quantity of item"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHurtDirection",
      "comment": "Gets player hurt direction",
      "tagMap": {
        "return": [
          "hurt direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "hurtDirection"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHurtDirection",
      "comment": "Sets player hurt direction",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehurtDirection\u003c/code\u003e - hurt direction"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.entity.LivingEntity",
  "comment": "Represents a living entity, such as a monster or player",
  "tagMap": {}
}