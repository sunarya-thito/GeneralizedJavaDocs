{
  "packageName": "org.bukkit.entity",
  "simpleName": "AbstractArrow",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.entity.Projectile",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKnockbackStrength",
      "comment": "Gets the knockback strength for an arrow, which is the KnockBack level of the bow that shot it.",
      "tagMap": {
        "return": [
          "the knockback strength value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "knockbackStrength"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setKnockbackStrength",
      "comment": "Sets the knockback strength for an arrow.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eknockbackStrength\u003c/code\u003e - the knockback strength value"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDamage",
      "comment": "Gets the base amount of damage this arrow will do. Defaults to 2.0 for a normal arrow with 0.5 * (1 + power level) added for arrows fired from enchanted bows.",
      "tagMap": {
        "return": [
          "base damage amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "damage"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDamage",
      "comment": "Sets the base amount of damage this arrow will do.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edamage\u003c/code\u003e - new damage amount"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPierceLevel",
      "comment": "Gets the number of times this arrow can pierce through an entity.",
      "tagMap": {
        "return": [
          "pierce level"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pierceLevel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPierceLevel",
      "comment": "Sets the number of times this arrow can pierce through an entity. Must be between 0 and 127 times.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epierceLevel\u003c/code\u003e - new pierce level"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCritical",
      "comment": "Gets whether this arrow is critical. Critical arrows have increased damage and cause particle effects. Critical arrows generally occur when a player fully draws a bow before firing.",
      "tagMap": {
        "return": [
          "true if it is critical"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "critical"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCritical",
      "comment": "Sets whether or not this arrow should be critical.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecritical\u003c/code\u003e - whether or not it should be critical"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInBlock",
      "comment": "Gets whether this arrow is in a block or not. Arrows in a block are motionless and may be picked up by players.",
      "tagMap": {
        "return": [
          "true if in a block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttachedBlock",
      "comment": "Gets the block to which this arrow is attached.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "the attached block or null if not attached"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.AbstractArrow$PickupStatus",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPickupStatus",
      "comment": "Gets the current pickup status of this arrow.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the pickup status of this arrow."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.AbstractArrow$PickupStatus",
            "type": "Class"
          },
          "field": {
            "name": "status"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPickupStatus",
      "comment": "Sets the current pickup status of this arrow.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estatus\u003c/code\u003e - new pickup status of this arrow."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isShotFromCrossbow",
      "comment": "Gets if this arrow was shot from a crossbow.",
      "tagMap": {
        "return": [
          "if shot from a crossbow"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "shotFromCrossbow"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShotFromCrossbow",
      "comment": "Sets if this arrow was shot from a crossbow.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eshotFromCrossbow\u003c/code\u003e - if shot from a crossbow"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemStack",
      "comment": "Gets the ItemStack for this arrow.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The ItemStack, as if a player picked up the arrow"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.AbstractArrow$PickupRule",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPickupRule",
      "comment": "Gets the AbstractArrow.PickupRule for this arrow. This is generally AbstractArrow.PickupRule.ALLOWED only if the arrow was not fired from a bow with the infinity enchantment.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "return": [
          "The pickup rule"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.bukkit.entity.AbstractArrow$PickupRule",
            "type": "Class"
          },
          "field": {
            "name": "rule"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPickupRule",
      "comment": "Set the rule for which players can pickup this arrow as an item.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - The pickup rule"
        ]
      }
    }
  ],
  "innerClasses": [
    "org.bukkit.entity.AbstractArrow$PickupStatus",
    "org.bukkit.entity.AbstractArrow$PickupRule"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.entity.AbstractArrow",
  "comment": "Represents an arrow.",
  "tagMap": {}
}