{
  "packageName": "org.bukkit.util",
  "simpleName": "BoundingBox",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Creates a new bounding box using the coordinates of the given vectors as corners.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorner1\u003c/code\u003e - the first corner",
          "\u003ccode\u003ecorner2\u003c/code\u003e - the second corner"
        ],
        "return": [
          "the bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Creates a new bounding box using the coordinates of the given locations as corners.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorner1\u003c/code\u003e - the first corner",
          "\u003ccode\u003ecorner2\u003c/code\u003e - the second corner"
        ],
        "return": [
          "the bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Creates a new bounding box using the coordinates of the given blocks as corners. The bounding box will be sized to fully contain both blocks.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorner1\u003c/code\u003e - the first corner block",
          "\u003ccode\u003ecorner2\u003c/code\u003e - the second corner block"
        ],
        "return": [
          "the bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Creates a new 1x1x1 sized bounding box containing the given block.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eblock\u003c/code\u003e - the block"
        ],
        "return": [
          "the bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Creates a new bounding box using the given center and extents.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecenter\u003c/code\u003e - the center",
          "\u003ccode\u003ex\u003c/code\u003e - 1/2 the size of the bounding box along the x axis",
          "\u003ccode\u003ey\u003c/code\u003e - 1/2 the size of the bounding box along the y axis",
          "\u003ccode\u003ez\u003c/code\u003e - 1/2 the size of the bounding box along the z axis"
        ],
        "return": [
          "the bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Creates a new bounding box using the given center and extents.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecenter\u003c/code\u003e - the center",
          "\u003ccode\u003ex\u003c/code\u003e - 1/2 the size of the bounding box along the x axis",
          "\u003ccode\u003ey\u003c/code\u003e - 1/2 the size of the bounding box along the y axis",
          "\u003ccode\u003ez\u003c/code\u003e - 1/2 the size of the bounding box along the z axis"
        ],
        "return": [
          "the bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resize",
      "comment": "Resizes this bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the first corner\u0027s x value",
          "\u003ccode\u003ey1\u003c/code\u003e - the first corner\u0027s y value",
          "\u003ccode\u003ez1\u003c/code\u003e - the first corner\u0027s z value",
          "\u003ccode\u003ex2\u003c/code\u003e - the second corner\u0027s x value",
          "\u003ccode\u003ey2\u003c/code\u003e - the second corner\u0027s y value",
          "\u003ccode\u003ez2\u003c/code\u003e - the second corner\u0027s z value"
        ],
        "return": [
          "this bounding box (resized)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinX",
      "comment": "Gets the minimum x value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum x value"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinY",
      "comment": "Gets the minimum y value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum y value"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinZ",
      "comment": "Gets the minimum z value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum z value"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMin",
      "comment": "Gets the minimum corner as vector.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the minimum corner as vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxX",
      "comment": "Gets the maximum x value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum x value"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxY",
      "comment": "Gets the maximum y value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum y value"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxZ",
      "comment": "Gets the maximum z value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum z value"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMax",
      "comment": "Gets the maximum corner as vector.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the maximum corner vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWidthX",
      "comment": "Gets the width of the bounding box in the x direction.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the width in the x direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWidthZ",
      "comment": "Gets the width of the bounding box in the z direction.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the width in the z direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHeight",
      "comment": "Gets the height of the bounding box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the height"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVolume",
      "comment": "Gets the volume of the bounding box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the volume"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCenterX",
      "comment": "Gets the x coordinate of the center of the bounding box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the center\u0027s x coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCenterY",
      "comment": "Gets the y coordinate of the center of the bounding box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the center\u0027s y coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCenterZ",
      "comment": "Gets the z coordinate of the center of the bounding box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the center\u0027s z coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCenter",
      "comment": "Gets the center of the bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the center"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "copy",
      "comment": "Copies another bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other bounding box"
        ],
        "return": [
          "this bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box by the given values in the corresponding directions. Negative values will shrink the bounding box in the corresponding direction. Shrinking will be limited to the point where the affected opposite faces would meet if the they shrank at uniform speeds.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enegativeX\u003c/code\u003e - the amount of expansion in the negative x direction",
          "\u003ccode\u003enegativeY\u003c/code\u003e - the amount of expansion in the negative y direction",
          "\u003ccode\u003enegativeZ\u003c/code\u003e - the amount of expansion in the negative z direction",
          "\u003ccode\u003epositiveX\u003c/code\u003e - the amount of expansion in the positive x direction",
          "\u003ccode\u003epositiveY\u003c/code\u003e - the amount of expansion in the positive y direction",
          "\u003ccode\u003epositiveZ\u003c/code\u003e - the amount of expansion in the positive z direction"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box uniformly by the given values in both positive and negative directions. Negative values will shrink the bounding box. Shrinking will be limited to the bounding box\u0027s current size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the amount of expansion in both positive and negative x direction",
          "\u003ccode\u003ey\u003c/code\u003e - the amount of expansion in both positive and negative y direction",
          "\u003ccode\u003ez\u003c/code\u003e - the amount of expansion in both positive and negative z direction"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box uniformly by the given values in both positive and negative directions. Negative values will shrink the bounding box. Shrinking will be limited to the bounding box\u0027s current size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpansion\u003c/code\u003e - the expansion values"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box uniformly by the given value in all directions. A negative value will shrink the bounding box. Shrinking will be limited to the bounding box\u0027s current size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpansion\u003c/code\u003e - the amount of expansion"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box in the specified direction. The magnitude of the direction will scale the expansion. A negative expansion value will shrink the bounding box in this direction. Shrinking will be limited to the bounding box\u0027s current size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edirX\u003c/code\u003e - the x direction component",
          "\u003ccode\u003edirY\u003c/code\u003e - the y direction component",
          "\u003ccode\u003edirZ\u003c/code\u003e - the z direction component",
          "\u003ccode\u003eexpansion\u003c/code\u003e - the amount of expansion"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box in the specified direction. The magnitude of the direction will scale the expansion. A negative expansion value will shrink the bounding box in this direction. Shrinking will be limited to the bounding box\u0027s current size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edirection\u003c/code\u003e - the direction",
          "\u003ccode\u003eexpansion\u003c/code\u003e - the amount of expansion"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expand",
      "comment": "Expands this bounding box in the direction specified by the given block face. A negative expansion value will shrink the bounding box in this direction. Shrinking will be limited to the bounding box\u0027s current size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eblockFace\u003c/code\u003e - the block face",
          "\u003ccode\u003eexpansion\u003c/code\u003e - the amount of expansion"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expandDirectional",
      "comment": "Expands this bounding box in the specified direction. Negative values will expand the bounding box in the negative direction, positive values will expand it in the positive direction. The magnitudes of the direction components determine the corresponding amounts of expansion.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edirX\u003c/code\u003e - the x direction component",
          "\u003ccode\u003edirY\u003c/code\u003e - the y direction component",
          "\u003ccode\u003edirZ\u003c/code\u003e - the z direction component"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expandDirectional",
      "comment": "Expands this bounding box in the specified direction. Negative values will expand the bounding box in the negative direction, positive values will expand it in the positive direction. The magnitude of the direction vector determines the amount of expansion.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edirection\u003c/code\u003e - the direction and magnitude of the expansion"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "union",
      "comment": "Expands this bounding box to contain (or border) the specified position.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/BoundingBox.html#contains(double,double,double)\"\u003e\u003ccode\u003econtains(double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eposX\u003c/code\u003e - the x position value",
          "\u003ccode\u003eposY\u003c/code\u003e - the y position value",
          "\u003ccode\u003eposZ\u003c/code\u003e - the z position value"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "union",
      "comment": "Expands this bounding box to contain (or border) the specified position.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/BoundingBox.html#contains(double,double,double)\"\u003e\u003ccode\u003econtains(double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the position"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "union",
      "comment": "Expands this bounding box to contain (or border) the specified position.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/util/BoundingBox.html#contains(double,double,double)\"\u003e\u003ccode\u003econtains(double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the position"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "union",
      "comment": "Expands this bounding box to contain both this and the given bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other bounding box"
        ],
        "return": [
          "this bounding box (now expanded)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersection",
      "comment": "Resizes this bounding box to represent the intersection of this and the given bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other bounding box"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the bounding boxes don\u0027t overlap"
        ],
        "return": [
          "this bounding box (now representing the intersection)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shift",
      "comment": "Shifts this bounding box by the given amounts.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eshiftX\u003c/code\u003e - the shift in x direction",
          "\u003ccode\u003eshiftY\u003c/code\u003e - the shift in y direction",
          "\u003ccode\u003eshiftZ\u003c/code\u003e - the shift in z direction"
        ],
        "return": [
          "this bounding box (now shifted)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shift",
      "comment": "Shifts this bounding box by the given amounts.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eshift\u003c/code\u003e - the shift"
        ],
        "return": [
          "this bounding box (now shifted)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shift",
      "comment": "Shifts this bounding box by the given amounts.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eshift\u003c/code\u003e - the shift"
        ],
        "return": [
          "this bounding box (now shifted)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "overlaps",
      "comment": "Checks if this bounding box overlaps with the given bounding box. Bounding boxes that are only intersecting at the borders are not considered overlapping.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other bounding box"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if overlapping"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "overlaps",
      "comment": "Checks if this bounding box overlaps with the bounding box that is defined by the given corners. Bounding boxes that are only intersecting at the borders are not considered overlapping.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - the first corner",
          "\u003ccode\u003emax\u003c/code\u003e - the second corner"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if overlapping"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Checks if this bounding box contains the specified position. Positions exactly on the minimum borders of the bounding box are considered to be inside the bounding box, while positions exactly on the maximum borders are considered to be outside. This allows bounding boxes to reside directly next to each other with positions always only residing in exactly one of them.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the position\u0027s x coordinates",
          "\u003ccode\u003ey\u003c/code\u003e - the position\u0027s y coordinates",
          "\u003ccode\u003ez\u003c/code\u003e - the position\u0027s z coordinates"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the bounding box contains the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Checks if this bounding box contains the specified position. Positions exactly on the minimum borders of the bounding box are considered to be inside the bounding box, while positions exactly on the maximum borders are considered to be outside. This allows bounding boxes to reside directly next to each other with positions always only residing in exactly one of them.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the position"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the bounding box contains the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Checks if this bounding box fully contains the given bounding box.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other bounding box"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the bounding box contains the given bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Checks if this bounding box fully contains the bounding box that is defined by the given corners.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - the first corner",
          "\u003ccode\u003emax\u003c/code\u003e - the second corner"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the bounding box contains the specified bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rayTrace",
      "comment": "Calculates the intersection of this bounding box with the specified line segment. Intersections at edges and corners yield one of the affected block faces as hit result, but it is not defined which of them.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start position",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance"
        ],
        "return": [
          "the ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of this bounding box.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the cloned bounding box"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "serialize",
      "comment": "Description copied from interface: ConfigurationSerializable",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/configuration/serialization/ConfigurationSerializable.html#serialize()\"\u003eserialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003eConfigurationSerializable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Map containing the current state of this class"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "deserialize",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new (degenerate) bounding box with all corner coordinates at 0.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "z2",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new bounding box from the given corner coordinates.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the first corner\u0027s x value",
          "\u003ccode\u003ey1\u003c/code\u003e - the first corner\u0027s y value",
          "\u003ccode\u003ez1\u003c/code\u003e - the first corner\u0027s z value",
          "\u003ccode\u003ex2\u003c/code\u003e - the second corner\u0027s x value",
          "\u003ccode\u003ey2\u003c/code\u003e - the second corner\u0027s y value",
          "\u003ccode\u003ez2\u003c/code\u003e - the second corner\u0027s z value"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.util.BoundingBox",
  "comment": "A mutable axis aligned bounding box (AABB). \n\u003cp\u003e This basically represents a rectangular box (specified by minimum and maximum corners) that can for example be used to describe the position and extents of an object (such as an entity, block, or rectangular region) in 3D space. Its edges and faces are parallel to the axes of the cartesian coordinate system. \u003c/p\u003e\n\u003cp\u003e The bounding box may be degenerate (one or more sides having the length 0). \u003c/p\u003e\n\u003cp\u003e Because bounding boxes are mutable, storing them long term may be dangerous if they get modified later. If you want to keep around a bounding box, it may be wise to call \u003ca href\u003d\"#clone()\"\u003e\u003ccode\u003eclone()\u003c/code\u003e\u003c/a\u003e in order to get a copy.\u003c/p\u003e",
  "tagMap": {}
}