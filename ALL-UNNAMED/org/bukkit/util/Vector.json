{
  "packageName": "org.bukkit.util",
  "simpleName": "Vector",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "double",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "x",
      "tagMap": {}
    },
    {
      "type": {
        "name": "double",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "y",
      "tagMap": {}
    },
    {
      "type": {
        "name": "double",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "z",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds a vector to this one",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Subtracts a vector from this one.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Multiplies the vector by another.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Divides the vector by another.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "vec"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "copy",
      "comment": "Copies another vector",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evec\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The value of this method is not cached and uses a costly square-root function, so do not repeatedly call this method to get the vector\u0027s magnitude. NaN will be returned if the inner result of the sqrt() function overflows, which will be caused if the length is too long.",
      "tagMap": {
        "return": [
          "the magnitude"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lengthSquared",
      "comment": "Gets the magnitude of the vector squared.",
      "tagMap": {
        "return": [
          "the magnitude"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "distance",
      "comment": "Get the distance between this vector and another. The value of this method is not cached and uses a costly square-root function, so do not repeatedly call this method to get the vector\u0027s magnitude. NaN will be returned if the inner result of the sqrt() function overflows, which will be caused if the distance is too long.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the distance"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "distanceSquared",
      "comment": "Get the squared distance between this vector and another.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the distance"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "angle",
      "comment": "Gets the angle between this vector and another in radians.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The other vector"
        ],
        "return": [
          "angle in radians"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "midpoint",
      "comment": "Sets this vector to the midpoint between this vector and another.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The other vector"
        ],
        "return": [
          "this same vector (now a midpoint)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMidpoint",
      "comment": "Gets a new midpoint vector between this vector and another.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The other vector"
        ],
        "return": [
          "a new midpoint vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Performs scalar multiplication, multiplying all components with a scalar.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - The factor"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Performs scalar multiplication, multiplying all components with a scalar.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - The factor"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Performs scalar multiplication, multiplying all components with a scalar.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - The factor"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dot",
      "comment": "Calculates the dot product of this vector with another. The dot product is defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The other vector"
        ],
        "return": [
          "dot product"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "crossProduct",
      "comment": "Calculates the cross product of this vector with another. The cross product is defined as: x \u003d y1 * z2 - y2 * z1 y \u003d z1 * x2 - z2 * x1 z \u003d x1 * y2 - x2 * y1",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The other vector"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCrossProduct",
      "comment": "Calculates the cross product of this vector with another without mutating the original. The cross product is defined as: x \u003d y1 * z2 - y2 * z1 y \u003d z1 * x2 - z2 * x1 z \u003d x1 * y2 - x2 * y1",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The other vector"
        ],
        "return": [
          "a new vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "normalize",
      "comment": "Converts this vector to a unit vector (a vector with length of 1).",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "zero",
      "comment": "Zero this vector\u0027s components.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "min"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInAABB",
      "comment": "Returns whether this vector is in an axis-aligned bounding box. The minimum and maximum vectors given must be truly the minimum and maximum X, Y and Z components.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - Minimum vector",
          "\u003ccode\u003emax\u003c/code\u003e - Maximum vector"
        ],
        "return": [
          "whether this vector is in the AABB"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "radius"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInSphere",
      "comment": "Returns whether this vector is within a sphere.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - Sphere origin.",
          "\u003ccode\u003eradius\u003c/code\u003e - Sphere radius"
        ],
        "return": [
          "whether this vector is in the sphere"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNormalized",
      "comment": "Returns if a vector is normalized",
      "tagMap": {
        "return": [
          "whether the vector is normalised"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "angle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rotateAroundX",
      "comment": "Rotates the vector around the x axis. This piece of math is based on the standard rotation matrix for vectors in three dimensional space. This matrix can be found here: Rotation Matrix.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eangle\u003c/code\u003e - the angle to rotate the vector about. This angle is passed in radians"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "angle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rotateAroundY",
      "comment": "Rotates the vector around the y axis. This piece of math is based on the standard rotation matrix for vectors in three dimensional space. This matrix can be found here: Rotation Matrix.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eangle\u003c/code\u003e - the angle to rotate the vector about. This angle is passed in radians"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "angle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rotateAroundZ",
      "comment": "Rotates the vector around the z axis This piece of math is based on the standard rotation matrix for vectors in three dimensional space. This matrix can be found here: Rotation Matrix.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eangle\u003c/code\u003e - the angle to rotate the vector about. This angle is passed in radians"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "angle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rotateAroundAxis",
      "comment": "Rotates the vector around a given arbitrary axis in 3 dimensional space. Rotation will follow the general Right-Hand-Rule, which means rotation will be counterclockwise when the axis is pointing towards the observer. This method will always make sure the provided axis is a unit vector, to not modify the length of the vector when rotating. If you are experienced with the scaling of a non-unit axis vector, you can use rotateAroundNonUnitAxis(Vector, double).",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis to rotate the vector around. If the passed vector is not of length 1, it gets copied and normalized before using it for the rotation. Please use \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/util/Vector.html#normalize()\"\u003e\u003ccode\u003enormalize()\u003c/code\u003e\u003c/a\u003e on the instance before passing it to this method",
          "\u003ccode\u003eangle\u003c/code\u003e - the angle to rotate the vector around the axis"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provided axis vector instance is null"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "angle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rotateAroundNonUnitAxis",
      "comment": "Rotates the vector around a given arbitrary axis in 3 dimensional space. Rotation will follow the general Right-Hand-Rule, which means rotation will be counterclockwise when the axis is pointing towards the observer. Note that the vector length will change accordingly to the axis vector length. If the provided axis is not a unit vector, the rotated vector will not have its previous length. The scaled length of the resulting vector will be related to the axis vector. If you are not perfectly sure about the scaling of the vector, use rotateAroundAxis(Vector, double)",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis to rotate the vector around.",
          "\u003ccode\u003eangle\u003c/code\u003e - the angle to rotate the vector around the axis"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provided axis vector instance is null"
        ],
        "return": [
          "the same vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getX",
      "comment": "Gets the X component.",
      "tagMap": {
        "return": [
          "The X component."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockX",
      "comment": "Gets the floored value of the X component, indicating the block that this vector is contained with.",
      "tagMap": {
        "return": [
          "block X"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getY",
      "comment": "Gets the Y component.",
      "tagMap": {
        "return": [
          "The Y component."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockY",
      "comment": "Gets the floored value of the Y component, indicating the block that this vector is contained with.",
      "tagMap": {
        "return": [
          "block y"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getZ",
      "comment": "Gets the Z component.",
      "tagMap": {
        "return": [
          "The Z component."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockZ",
      "comment": "Gets the floored value of the Z component, indicating the block that this vector is contained with.",
      "tagMap": {
        "return": [
          "block z"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setX",
      "comment": "Set the X component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The new X component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setX",
      "comment": "Set the X component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The new X component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setX",
      "comment": "Set the X component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The new X component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setY",
      "comment": "Set the Y component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ey\u003c/code\u003e - The new Y component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setY",
      "comment": "Set the Y component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ey\u003c/code\u003e - The new Y component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setY",
      "comment": "Set the Y component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ey\u003c/code\u003e - The new Y component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setZ",
      "comment": "Set the Z component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ez\u003c/code\u003e - The new Z component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setZ",
      "comment": "Set the Z component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ez\u003c/code\u003e - The new Z component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setZ",
      "comment": "Set the Z component.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ez\u003c/code\u003e - The new Z component."
        ],
        "return": [
          "This vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks to see if two objects are equal. Only two Vectors can ever return true. This method uses a fuzzy match to account for floating point errors. The epsilon can be retrieved with epsilon.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this vector",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Get a new vector.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "vector"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns this vector\u0027s components as x,y,z.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.World",
            "type": "Class"
          },
          "field": {
            "name": "world"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocation",
      "comment": "Gets a Location version of this vector with yaw and pitch being 0.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world to link the location to."
        ],
        "return": [
          "the location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.World",
            "type": "Class"
          },
          "field": {
            "name": "world"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "yaw"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pitch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocation",
      "comment": "Gets a Location version of this vector.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - The world to link the location to.",
          "\u003ccode\u003eyaw\u003c/code\u003e - The desired yaw.",
          "\u003ccode\u003epitch\u003c/code\u003e - The desired pitch."
        ],
        "return": [
          "the location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BlockVector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBlockVector",
      "comment": "Get the block vector of this vector.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "A block vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "checkFinite",
      "comment": "Check if each component of this Vector is finite.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any component is not finite"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getEpsilon",
      "comment": "Get the threshold used for equals().",
      "tagMap": {
        "return": [
          "The epsilon."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "v2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMinimum",
      "comment": "Gets the minimum components of two vectors.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev1\u003c/code\u003e - The first vector.",
          "\u003ccode\u003ev2\u003c/code\u003e - The second vector."
        ],
        "return": [
          "minimum"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "v1"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "v2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMaximum",
      "comment": "Gets the maximum components of two vectors.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev1\u003c/code\u003e - The first vector.",
          "\u003ccode\u003ev2\u003c/code\u003e - The second vector."
        ],
        "return": [
          "maximum"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getRandom",
      "comment": "Gets a random vector with components having a random value between 0 and 1.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "A random vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "serialize",
      "comment": "Description copied from interface: ConfigurationSerializable",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html#serialize()\"\u003eserialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003eConfigurationSerializable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Map containing the current state of this class"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Object",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "args"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "deserialize",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct the vector with all components as 0.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct the vector with provided integer components.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X component",
          "\u003ccode\u003ey\u003c/code\u003e - Y component",
          "\u003ccode\u003ez\u003c/code\u003e - Z component"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct the vector with provided double components.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X component",
          "\u003ccode\u003ey\u003c/code\u003e - Y component",
          "\u003ccode\u003ez\u003c/code\u003e - Z component"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "z"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct the vector with provided float components.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X component",
          "\u003ccode\u003ey\u003c/code\u003e - Y component",
          "\u003ccode\u003ez\u003c/code\u003e - Z component"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.util.Vector",
  "comment": "Represents a mutable vector. Because the components of Vectors are mutable, storing Vectors long term may be dangerous if passing code modifies the Vector later. If you want to keep around a Vector, it may be wise to call \n\u003ccode\u003eclone()\u003c/code\u003e in order to get a copy.",
  "tagMap": {}
}