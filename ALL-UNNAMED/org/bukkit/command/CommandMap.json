{
  "packageName": "org.bukkit.command",
  "simpleName": "CommandMap",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fallbackPrefix",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "org.bukkit.command.Command",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "commands",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerAll",
      "comment": "Registers all the commands belonging to a certain plugin. Caller can use:- command.getName() to determine the label registered for this command command.getAliases() to determine the aliases which where registered",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efallbackPrefix\u003c/code\u003e - a prefix which is prepended to each command with a \u0027:\u0027 one or more times to make the command unique",
          "\u003ccode\u003ecommands\u003c/code\u003e - a list of commands to register"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "label",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fallbackPrefix",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.command.Command",
            "type": "Class"
          },
          "name": "command",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "register",
      "comment": "Registers a command. Returns true on success; false if name is already taken and fallback had to be used. Caller can use:- command.getName() to determine the label registered for this command command.getAliases() to determine the aliases which where registered",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elabel\u003c/code\u003e - the label of the command, without the \u0027/\u0027-prefix.",
          "\u003ccode\u003efallbackPrefix\u003c/code\u003e - a prefix which is prepended to the command with a \u0027:\u0027 one or more times to make the command unique",
          "\u003ccode\u003ecommand\u003c/code\u003e - the command to register"
        ],
        "return": [
          "true if command was registered with the passed in label, false otherwise, which indicates the fallbackPrefix was used one or more times"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fallbackPrefix",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.command.Command",
            "type": "Class"
          },
          "name": "command",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "register",
      "comment": "Registers a command. Returns true on success; false if name is already taken and fallback had to be used. Caller can use:- command.getName() to determine the label registered for this command command.getAliases() to determine the aliases which where registered",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efallbackPrefix\u003c/code\u003e - a prefix which is prepended to the command with a \u0027:\u0027 one or more times to make the command unique",
          "\u003ccode\u003ecommand\u003c/code\u003e - the command to register, from which label is determined from the command name"
        ],
        "return": [
          "true if command was registered with the passed in label, false otherwise, which indicates the fallbackPrefix was used one or more times"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.bukkit.command.CommandException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "name": "sender",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "cmdLine",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dispatch",
      "comment": "Looks for the requested command and executes it if found.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - The command\u0027s sender",
          "\u003ccode\u003ecmdLine\u003c/code\u003e - command + arguments. Example: \"/test abc 123\""
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/command/CommandException.html\" title\u003d\"class in org.bukkit.command\"\u003eCommandException\u003c/a\u003e\u003c/code\u003e - Thrown when the executor for the given command fails with an unhandled exception"
        ],
        "return": [
          "returns false if no target is found, true otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearCommands",
      "comment": "Clears all registered commands.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.command.Command",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCommand",
      "comment": "Gets the command registered to the specified name",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the command to retrieve"
        ],
        "return": [
          "Command with the specified name or null if a command with that label doesn\u0027t exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "name": "sender",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "cmdLine",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tabComplete",
      "comment": "Looks for the requested command and executes an appropriate tab-completer if found. This method will also tab-complete partial commands.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - The command\u0027s sender.",
          "\u003ccode\u003ecmdLine\u003c/code\u003e - The entire command string to tab-complete, excluding initial slash."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/command/CommandException.html\" title\u003d\"class in org.bukkit.command\"\u003eCommandException\u003c/a\u003e\u003c/code\u003e - Thrown when the tab-completer for the given command fails with an unhandled exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either sender or cmdLine are null"
        ],
        "return": [
          "a list of possible tab-completions. This list may be immutable. Will be null if no matching command of which sender has permission."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "name": "sender",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "cmdLine",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tabComplete",
      "comment": "Looks for the requested command and executes an appropriate tab-completer if found. This method will also tab-complete partial commands.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - The command\u0027s sender.",
          "\u003ccode\u003ecmdLine\u003c/code\u003e - The entire command string to tab-complete, excluding initial slash.",
          "\u003ccode\u003elocation\u003c/code\u003e - The position looked at by the sender, or null if none"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/command/CommandException.html\" title\u003d\"class in org.bukkit.command\"\u003eCommandException\u003c/a\u003e\u003c/code\u003e - Thrown when the tab-completer for the given command fails with an unhandled exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either sender or cmdLine are null"
        ],
        "return": [
          "a list of possible tab-completions. This list may be immutable. Will be null if no matching command of which sender has permission."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.command.CommandMap",
  "annotations": [],
  "tagMap": {}
}