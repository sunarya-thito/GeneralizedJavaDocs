{
  "packageName": "org.bukkit.event.inventory",
  "simpleName": "InventoryDragEvent",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "org.bukkit.event.inventory.InventoryInteractEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNewItems",
      "comment": "Gets all items to be added to the inventory in this drag.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "map from raw slot id to new ItemStack"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRawSlots",
      "comment": "Gets the raw slot ids to be changed in this drag.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "list of raw slot ids, suitable for getView().getItem(int)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInventorySlots",
      "comment": "Gets the slots to be changed in this drag.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "list of converted slot ids, suitable for \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/Inventory.html#getItem(int)\"\u003e\u003ccode\u003eInventory.getItem(int)\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCursor",
      "comment": "Gets the result cursor after the drag is done. The returned value is mutable.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the result cursor"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCursor",
      "comment": "Sets the result cursor after the drag is done. Changing this item stack changes the cursor item. Note that changing the affected \"dragged\" slots does not change this ItemStack, nor does changing this ItemStack affect the \"dragged\" slots.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewCursor\u003c/code\u003e - the new cursor ItemStack"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOldCursor",
      "comment": "Gets an ItemStack representing the cursor prior to any modifications as a result of this drag.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the original cursor"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.inventory.DragType",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Gets the DragType that describes the behavior of ItemStacks placed after this InventoryDragEvent. The ItemStacks and the raw slots that they\u0027re being applied to can be found using getNewItems().",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the DragType of this InventoryDragEvent"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHandlers",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryEvent.html#getHandlers()\"\u003egetHandlers\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryEvent.html\" title\u003d\"class in org.bukkit.event.inventory\"\u003eInventoryEvent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHandlerList",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.InventoryView",
            "type": "Class"
          },
          "name": "what",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "newCursor",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "oldCursor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "right",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.Integer",
                "type": "Class"
              },
              {
                "name": "org.bukkit.inventory.ItemStack",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "slots",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.event.inventory.InventoryDragEvent",
  "comment": "This event is called when the player drags an item in their cursor across the inventory. The ItemStack is distributed across the slots the HumanEntity dragged over. The method of distribution is described by the DragType returned by \n\u003ca href\u003d\"#getType()\"\u003e\u003ccode\u003egetType()\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e Canceling this event will result in none of the changes described in \u003ca href\u003d\"#getNewItems()\"\u003e\u003ccode\u003egetNewItems()\u003c/code\u003e\u003c/a\u003e being applied to the Inventory. \u003c/p\u003e\n\u003cp\u003e Because InventoryDragEvent occurs within a modification of the Inventory, not all Inventory related methods are safe to use. \u003c/p\u003e\n\u003cp\u003e The following should never be invoked by an EventHandler for InventoryDragEvent using the HumanEntity or InventoryView associated with this event. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"../../entity/HumanEntity.html#closeInventory()\"\u003e\u003ccode\u003eHumanEntity.closeInventory()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"../../entity/HumanEntity.html#openInventory(org.bukkit.inventory.Inventory)\"\u003e\u003ccode\u003eHumanEntity.openInventory(Inventory)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"../../entity/HumanEntity.html#openWorkbench(org.bukkit.Location,boolean)\"\u003e\u003ccode\u003eHumanEntity.openWorkbench(Location, boolean)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"../../entity/HumanEntity.html#openEnchanting(org.bukkit.Location,boolean)\"\u003e\u003ccode\u003eHumanEntity.openEnchanting(Location, boolean)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"../../inventory/InventoryView.html#close()\"\u003e\u003ccode\u003eInventoryView.close()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e To invoke one of these methods, schedule a task using \n\u003ca href\u003d\"../../scheduler/BukkitScheduler.html#runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)\"\u003e\u003ccode\u003eBukkitScheduler.runTask(Plugin, Runnable)\u003c/code\u003e\u003c/a\u003e, which will run the task on the next tick. Also be aware that this is not an exhaustive list, and other methods could potentially create issues as well. \n\u003cp\u003e Assuming the EntityHuman associated with this event is an instance of a Player, manipulating the MaxStackSize or contents of an Inventory will require an Invocation of \u003ca href\u003d\"../../entity/Player.html#updateInventory()\"\u003e\u003ccode\u003ePlayer.updateInventory()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e Any modifications to slots that are modified by the results of this InventoryDragEvent will be overwritten. To change these slots, this event should be cancelled and the changes applied. Alternatively, scheduling a task using \u003ca href\u003d\"../../scheduler/BukkitScheduler.html#runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)\"\u003e\u003ccode\u003eBukkitScheduler.runTask(Plugin, Runnable)\u003c/code\u003e\u003c/a\u003e, which would execute the task on the next tick, would work as well.\u003c/p\u003e",
  "tagMap": {}
}