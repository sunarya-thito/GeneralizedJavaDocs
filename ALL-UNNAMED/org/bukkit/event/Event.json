{
  "packageName": "org.bukkit.event",
  "simpleName": "Event",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "callEvent",
      "comment": "Calls the event and tests if cancelled.",
      "annotations": [],
      "tagMap": {
        "return": [
          "false if event was cancelled, if cancellable. otherwise true."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEventName",
      "comment": "Convenience method for providing a user-friendly identifier. By default, it is the event\u0027s class\u0027s simple name.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "name of this event"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getHandlers",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isAsynchronous",
      "comment": "Any custom event that should not by synchronized with other events must use the specific constructor. These are the caveats of using an asynchronous event: The event is never fired from inside code triggered by a synchronous event. Attempting to do so results in an IllegalStateException. However, asynchronous event handlers may fire synchronous or asynchronous events The event may be fired multiple times simultaneously and in any order. Any newly registered or unregistered handler is ignored after an event starts execution. The handlers for this event may block for any length of time. Some implementations may selectively declare a specific event use as asynchronous. This behavior should be clearly defined. Asynchronous calls are not calculated in the plugin timing system.",
      "annotations": [],
      "tagMap": {
        "return": [
          "false by default, true if the event fires asynchronously"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "The default constructor is defined for cleaner code. This constructor assumes the event is synchronous.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isAsync",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "This constructor is used to explicitly declare an event as synchronous or asynchronous.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eisAsync\u003c/code\u003e - true indicates the event will fire asynchronously, false by default from default constructor"
        ]
      }
    }
  ],
  "innerClasses": [
    "org.bukkit.event.Event$Result"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "org.bukkit.event.Event",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/plugin/PluginManager.html#callEvent(org.bukkit.event.Event)\"\u003e\u003ccode\u003ePluginManager.callEvent(Event)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/plugin/PluginManager.html#registerEvents(org.bukkit.event.Listener,org.bukkit.plugin.Plugin)\"\u003e\u003ccode\u003ePluginManager.registerEvents(Listener,Plugin)\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}