{
  "packageName": "org.bukkit.event.block",
  "simpleName": "BlockCanBuildEvent",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "org.bukkit.event.block.BlockEvent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "buildable",
      "tagMap": {}
    },
    {
      "type": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "blockData",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBuildable",
      "comment": "Gets whether or not the block can be built here. By default, returns Minecraft\u0027s answer on whether the block can be built here or not.",
      "tagMap": {
        "return": [
          "boolean whether or not the block can be built"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "cancel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBuildable",
      "comment": "Sets whether the block can be built here or not.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecancel\u003c/code\u003e - true if you want to allow the block to be built here despite Minecraft\u0027s default behaviour"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaterial",
      "comment": "Gets the Material that we are trying to place.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The Material that we are trying to place"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockData",
      "comment": "Gets the BlockData that we are trying to place.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "The BlockData that we are trying to place"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Player",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPlayer",
      "comment": "Gets the player who placed the block involved in this event. May be null for legacy calls of the event.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The Player who placed the block involved in this event"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHandlers",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/Event.html#getHandlers()\"\u003egetHandlers\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/Event.html\" title\u003d\"class in org.bukkit.event\"\u003eEvent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHandlerList",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          },
          "field": {
            "name": "block"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canBuild"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          },
          "field": {
            "name": "block"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canBuild"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "tagMap": {
        "param": [
          "\u003ccode\u003eblock\u003c/code\u003e - the block involved in this event",
          "\u003ccode\u003eplayer\u003c/code\u003e - the player placing the block",
          "\u003ccode\u003etype\u003c/code\u003e - the id of the block to place",
          "\u003ccode\u003ecanBuild\u003c/code\u003e - whether we can build"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.event.block.BlockCanBuildEvent",
  "comment": "Called when we try to place a block, to see if we can build it here or not. \n\u003cp\u003e Note: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe Block returned by getBlock() is the block we are trying to place on, not the block we are trying to place. \u003c/li\u003e\n \u003cli\u003eIf you want to figure out what is being placed, use \u003ca href\u003d\"#getMaterial()\"\u003e\u003ccode\u003egetMaterial()\u003c/code\u003e\u003c/a\u003e instead. \u003c/li\u003e\n\u003c/ul\u003e",
  "tagMap": {}
}