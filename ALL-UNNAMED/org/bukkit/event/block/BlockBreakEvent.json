{
  "packageName": "org.bukkit.event.block",
  "simpleName": "BlockBreakEvent",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "org.bukkit.event.block.BlockExpEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.entity.Player",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPlayer",
      "comment": "Gets the Player that is breaking the block involved in this event.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "The Player that is breaking the block involved in this event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "dropItems",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDropItems",
      "comment": "Sets whether or not the block will drop items as it normally would.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edropItems\u003c/code\u003e - Whether or not the block will drop items"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDropItems",
      "comment": "Gets whether or not the block will drop items.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Whether or not the block will drop items"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCancelled",
      "comment": "Description copied from interface: Cancellable",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/Cancellable.html#isCancelled()\"\u003eisCancelled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/Cancellable.html\" title\u003d\"interface in org.bukkit.event\"\u003eCancellable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this event is cancelled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "cancel",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCancelled",
      "comment": "Description copied from interface: Cancellable",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/Cancellable.html#setCancelled(boolean)\"\u003esetCancelled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/Cancellable.html\" title\u003d\"interface in org.bukkit.event\"\u003eCancellable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecancel\u003c/code\u003e - true if you wish to cancel this event"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          },
          "name": "theBlock",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "name": "player",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.event.block.BlockBreakEvent",
  "comment": "Called when a block is broken by a player. \n\u003cp\u003e If you wish to have the block drop experience, you must set the experience value above 0. By default, experience will be set in the event if: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eThe player is not in creative or adventure mode \u003c/li\u003e\n \u003cli\u003eThe player can loot the block (ie: does not destroy it completely, by using the correct tool) \u003c/li\u003e\n \u003cli\u003eThe player does not have silk touch \u003c/li\u003e\n \u003cli\u003eThe block drops experience in vanilla Minecraft \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e Note: Plugins wanting to simulate a traditional block drop should set the block to air and utilize their own methods for determining what the default drop for the block being broken is and what to do about it, if anything. \u003c/p\u003e\n\u003cp\u003e If a Block Break event is cancelled, the block will not break and experience will not drop.\u003c/p\u003e",
  "tagMap": {}
}