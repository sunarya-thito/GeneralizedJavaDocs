{
  "packageName": "org.bukkit.event",
  "simpleName": "HandlerList",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "bakeAll",
      "comment": "Bake all handler lists. Best used just after all normal event registration is complete, ie just after all plugins are loaded if you\u0027re using fevents in a plugin system.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unregisterAll",
      "comment": "Unregister all listeners from all handler lists.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "name": "plugin",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unregisterAll",
      "comment": "Unregister a specific plugin\u0027s listeners from all handler lists.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - plugin to unregister"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.event.Listener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unregisterAll",
      "comment": "Unregister a specific listener from all handler lists.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - listener to unregister"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.RegisteredListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "register",
      "comment": "Register a new listener in this handler list",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - listener to register"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "org.bukkit.plugin.RegisteredListener",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "listeners",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "registerAll",
      "comment": "Register a collection of new listeners in this handler list",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elisteners\u003c/code\u003e - listeners to register"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.RegisteredListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unregister",
      "comment": "Remove a listener from a specific order slot",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "name": "plugin",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unregister",
      "comment": "Remove a specific plugin\u0027s listeners from this handler",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - plugin to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.event.Listener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unregister",
      "comment": "Remove a specific listener from this handler",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bake",
      "comment": "Bake HashMap and ArrayLists to 2d array - does nothing if not necessary",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.RegisteredListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRegisteredListeners",
      "comment": "Get the baked registered listeners associated with this handler list",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the array of registered listeners"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ArrayList",
        "parameters": [
          {
            "name": "org.bukkit.plugin.RegisteredListener",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.plugin.Plugin",
            "type": "Class"
          },
          "name": "plugin",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getRegisteredListeners",
      "comment": "Get a specific plugin\u0027s registered listeners associated with this handler list",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplugin\u003c/code\u003e - the plugin to get the listeners of"
        ],
        "return": [
          "the list of registered listeners"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ArrayList",
        "parameters": [
          {
            "name": "org.bukkit.event.HandlerList",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHandlerLists",
      "comment": "Get a list of all handler lists for every event type",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the list of all handler lists"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new handler list and initialize using EventPriority. The HandlerList is then added to meta-list for use in bakeAll()",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.event.HandlerList",
  "comment": "A list of event handlers, stored per-event. Based on lahwran\u0027s fevents.",
  "tagMap": {}
}