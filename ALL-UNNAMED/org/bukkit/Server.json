{
  "packageName": "org.bukkit",
  "simpleName": "Server",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "org.bukkit.plugin.messaging.PluginMessageRecipient",
      "type": "Class"
    },
    {
      "name": "net.kyori.adventure.audience.ForwardingAudience",
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "BROADCAST_CHANNEL_ADMINISTRATIVE",
      "comment": "Used for all administrative messages, such as an operator using a command. For use in broadcast(net.kyori.adventure.text.Component, java.lang.String).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/constant-values.html#org.bukkit.Server.BROADCAST_CHANNEL_ADMINISTRATIVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "BROADCAST_CHANNEL_USERS",
      "comment": "Used for all announcement messages, such as informing users that a player has joined. For use in broadcast(net.kyori.adventure.text.Component, java.lang.String).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/constant-values.html#org.bukkit.Server.BROADCAST_CHANNEL_USERS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Gets the name of this server implementation.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "name of this server implementation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVersion",
      "comment": "Gets the version string of this server implementation.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "version of this server implementation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBukkitVersion",
      "comment": "Gets the Bukkit version that this server is running.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "version of Bukkit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinecraftVersion",
      "comment": "Gets the version of game this server implements",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "version of game"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "org.bukkit.entity.Player",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOnlinePlayers",
      "comment": "Gets a view of all currently logged in players. This view is a reused object, making some operations like Collection.size() zero-allocation. The collection is a view backed by the internal representation, such that, changes to the internal state of the server will be reflected immediately. However, the reuse of the returned collection (identity) is not strictly guaranteed for future or all implementations. Casting the collection, or relying on interface implementations (like Serializable or List), is deprecated. Iteration behavior is undefined outside of self-contained main-thread uses. Normal and immediate iterator use without consequences that affect the collection are fully supported. The effects following (non-exhaustive) teleportation, death, and kicking are undefined. Any use of this collection from asynchronous threads is unsafe. For safe consequential iteration or mimicking the old array behavior, using Collection.toArray(Object[]) is recommended. For making snapshots, ImmutableList.copyOf(Collection) is recommended.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a view of currently online players."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxPlayers",
      "comment": "Get the maximum amount of players which can login to this server.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the amount of players this server allows"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxPlayers",
      "comment": "Set the maximum amount of players which can login to this server.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxPlayers\u003c/code\u003e - the amount of players this server allows"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPort",
      "comment": "Get the game port that the server runs on.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the port number of this server"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getViewDistance",
      "comment": "Get the view distance from this server.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the view distance from this server."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getIp",
      "comment": "Get the IP that this server is bound to, or empty string if not specified.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the IP string that this server is bound to, otherwise empty string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorldType",
      "comment": "Get world type (level-type setting) for default world.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGenerateStructures",
      "comment": "Get generate-structures setting.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if structure generation is enabled, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxWorldSize",
      "comment": "Get max world size.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum world size as specified for the server"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllowEnd",
      "comment": "Gets whether this server allows the End or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether this server allows the End or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllowNether",
      "comment": "Gets whether this server allows the Nether or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether this server allows the Nether or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasWhitelist",
      "comment": "Gets whether this server has a whitelist or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether this server has a whitelist or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWhitelist",
      "comment": "Sets if the server is whitelisted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - true for whitelist on, false for off"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isWhitelistEnforced",
      "comment": "Gets whether the server whitelist is enforced. If the whitelist is enforced, non-whitelisted players will be disconnected when the server whitelist is reloaded.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether the server whitelist is enforced"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setWhitelistEnforced",
      "comment": "Sets if the server whitelist is enforced. If the whitelist is enforced, non-whitelisted players will be disconnected when the server whitelist is reloaded.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - true for enforced, false for not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.OfflinePlayer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWhitelistedPlayers",
      "comment": "Gets a list of whitelisted players.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a set containing all whitelisted players"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reloadWhitelist",
      "comment": "Reloads the whitelist from disk.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcastMessage",
      "comment": "Broadcast a message to all players. This is the same as calling broadcast(java.lang.String, java.lang.String) to BROADCAST_CHANNEL_USERS",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - the message"
        ],
        "return": [
          "the number of players"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcast",
      "comment": "Sends the component to all online players.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the component to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcast",
      "comment": "Sends an array of components as a single message to all online players.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponents\u003c/code\u003e - the components to send"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUpdateFolder",
      "comment": "Gets the name of the update folder. The update folder is used to safely update plugins at the right moment on a plugin load. The update folder name is relative to the plugins folder.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the name of the update folder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUpdateFolderFile",
      "comment": "Gets the update folder. The update folder is used to safely update plugins at the right moment on a plugin load.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the update folder"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConnectionThrottle",
      "comment": "Gets the value of the connection throttle setting.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the value of the connection throttle setting"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerAnimalSpawns",
      "comment": "Gets default ticks per animal spawns value. Example Usage: A value of 1 will mean the server will attempt to spawn monsters every tick. A value of 400 will mean the server will attempt to spawn monsters every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, animal spawning will be disabled. We recommend using spawn-animals to control this instead. Minecraft default: 400.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default ticks per animal spawns value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerMonsterSpawns",
      "comment": "Gets the default ticks per monster spawns value. Example Usage: A value of 1 will mean the server will attempt to spawn monsters every tick. A value of 400 will mean the server will attempt to spawn monsters every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, monsters spawning will be disabled. We recommend using spawn-monsters to control this instead. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default ticks per monsters spawn value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerWaterSpawns",
      "comment": "Gets the default ticks per water mob spawns value. Example Usage: A value of 1 will mean the server will attempt to spawn water mobs every tick. A value of 400 will mean the server will attempt to spawn water mobs every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, water mobs spawning will be disabled. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default ticks per water mobs spawn value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerWaterAmbientSpawns",
      "comment": "Gets the default ticks per water ambient mob spawns value. Example Usage: A value of 1 will mean the server will attempt to spawn water ambient mobs every tick. A value of 400 will mean the server will attempt to spawn water ambient mobs every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, ambient mobs spawning will be disabled. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default ticks per water ambient mobs spawn value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTicksPerAmbientSpawns",
      "comment": "Gets the default ticks per ambient mob spawns value. Example Usage: A value of 1 will mean the server will attempt to spawn ambient mobs every tick. A value of 400 will mean the server will attempt to spawn ambient mobs every 400th tick. A value below 0 will be reset back to Minecraft\u0027s default. Note: If set to 0, ambient mobs spawning will be disabled. Minecraft default: 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default ticks per ambient mobs spawn value"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Player",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayer",
      "comment": "Gets a player object by the given username. This method may not return objects for offline players.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to look up"
        ],
        "return": [
          "a player if one was found, null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Player",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerExact",
      "comment": "Gets the player with the exact given name, case insensitive.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Exact name of the player to retrieve"
        ],
        "return": [
          "a player object if one was found, null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "matchPlayer",
      "comment": "Attempts to match any players with the given name, and returns a list of all possibly matches. This list is not sorted in any particular order. If an exact match is found, the returned list will only contain a single result.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the (partial) name to match"
        ],
        "return": [
          "list of all possible players"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Player",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayer",
      "comment": "Gets the player with the given UUID.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - UUID of the player to retrieve"
        ],
        "return": [
          "a player object if one was found, null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.UUID",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPlayerUniqueId",
      "comment": "Gets the unique ID of the player currently known as the specified player name In Offline Mode, will return an Offline UUID",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayerName\u003c/code\u003e - the player name to look up the unique ID for"
        ],
        "return": [
          "A UUID, or null if that player name is not registered with Minecraft and the server is in online mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.PluginManager",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPluginManager",
      "comment": "Gets the plugin manager for interfacing with plugins.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a plugin manager for this Server instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.scheduler.BukkitScheduler",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScheduler",
      "comment": "Gets the scheduler for managing scheduled events.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a scheduling service for this server"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.ServicesManager",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getServicesManager",
      "comment": "Gets a services manager.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "s services manager"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.World",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorlds",
      "comment": "Gets a list of all worlds on this server.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a list of worlds"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createWorld",
      "comment": "Creates or loads a world with the given name using the specified options. If the world is already loaded, it will just return the equivalent of getWorld(creator.name()).",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecreator\u003c/code\u003e - the options to use when creating the world"
        ],
        "return": [
          "newly created or loaded world"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unloadWorld",
      "comment": "Unloads a world with the given name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the world to unload",
          "\u003ccode\u003esave\u003c/code\u003e - whether to save the chunks before unloading"
        ],
        "return": [
          "true if successful, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unloadWorld",
      "comment": "Unloads the given world.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world to unload",
          "\u003ccode\u003esave\u003c/code\u003e - whether to save the chunks before unloading"
        ],
        "return": [
          "true if successful, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the world with the given name.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the world to retrieve"
        ],
        "return": [
          "a world with the given name, or null if none exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the world from the given Unique ID.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003euid\u003c/code\u003e - a unique-id of the world to retrieve"
        ],
        "return": [
          "a world with the given Unique ID, or null if none exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the world from the given NamespacedKey",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworldKey\u003c/code\u003e - the NamespacedKey of the world to retrieve"
        ],
        "return": [
          "a world with the given NamespacedKey, or null if none exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.map.MapView",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMap",
      "comment": "Gets the map from the given item ID.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - the id of the map to get"
        ],
        "return": [
          "a map view if it exists, or null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.map.MapView",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createMap",
      "comment": "Create a new map with an automatically assigned ID.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world the map will belong to"
        ],
        "return": [
          "a newly created map view"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplorerMap",
      "comment": "Create a new explorer map targeting the closest nearby structure of a given StructureType. This method uses implementation default values for radius and findUnexplored (usually 100, true).",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#locateNearestStructure(org.bukkit.Location,org.bukkit.StructureType,int,boolean)\"\u003e\u003ccode\u003eWorld.locateNearestStructure(org.bukkit.Location, org.bukkit.StructureType, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world the map will belong to",
          "\u003ccode\u003elocation\u003c/code\u003e - the origin location to find the nearest structure",
          "\u003ccode\u003estructureType\u003c/code\u003e - the type of structure to find"
        ],
        "return": [
          "a newly created item stack"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExplorerMap",
      "comment": "Create a new explorer map targeting the closest nearby structure of a given StructureType. This method uses implementation default values for radius and findUnexplored (usually 100, true).",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/World.html#locateNearestStructure(org.bukkit.Location,org.bukkit.StructureType,int,boolean)\"\u003e\u003ccode\u003eWorld.locateNearestStructure(org.bukkit.Location, org.bukkit.StructureType, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world the map will belong to",
          "\u003ccode\u003elocation\u003c/code\u003e - the origin location to find the nearest structure",
          "\u003ccode\u003estructureType\u003c/code\u003e - the type of structure to find",
          "\u003ccode\u003eradius\u003c/code\u003e - radius to search, see World#locateNearestStructure for more information",
          "\u003ccode\u003efindUnexplored\u003c/code\u003e - whether to find unexplored structures"
        ],
        "return": [
          "the newly created item stack"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reload",
      "comment": "Reloads the server, refreshing settings and plugin information.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reloadData",
      "comment": "Reload only the Minecraft data for the server. This includes custom advancements and loot tables.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLogger",
      "comment": "Returns the primary logger associated with this server instance.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Logger associated with this server"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.command.PluginCommand",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPluginCommand",
      "comment": "Gets a PluginCommand with the given name or alias.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the command to retrieve"
        ],
        "return": [
          "a plugin command if found, null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "savePlayers",
      "comment": "Writes loaded players to disk.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dispatchCommand",
      "comment": "Dispatches a command on this server, and executes it if found.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - the apparent sender of the command",
          "\u003ccode\u003ecommandLine\u003c/code\u003e - the command + arguments. Example: \n\u003ccode\u003etest abc 123\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandException.html\" title\u003d\"class in org.bukkit.command\"\u003eCommandException\u003c/a\u003e\u003c/code\u003e - thrown when the executor for the given command fails with an unhandled exception"
        ],
        "return": [
          "returns false if no target is found"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addRecipe",
      "comment": "Adds a recipe to the crafting manager.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "null -\u003e false"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipe\u003c/code\u003e - the recipe to add"
        ],
        "return": [
          "true if the recipe was added, false if it wasn\u0027t for some reason"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.inventory.Recipe",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRecipesFor",
      "comment": "Get a list of all recipes for a given item. The stack size is ignored in comparisons. If the durability is -1, it will match any data value.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eresult\u003c/code\u003e - the item to match against recipe results"
        ],
        "return": [
          "a list of recipes with the given result"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Recipe",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRecipe",
      "comment": "Get the Recipe for the given key.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erecipeKey\u003c/code\u003e - the key of the recipe to return"
        ],
        "return": [
          "the recipe for the given key or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Recipe",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCraftingRecipe",
      "comment": "Get the Recipe for the list of ItemStacks provided. The list is formatted as a crafting matrix where the index follow the pattern below:  [ 0 1 2 ]\n [ 3 4 5 ]\n [ 6 7 8 ]\n NOTE: This method will not modify the provided ItemStack array, for that, use craftItem(ItemStack[], World, Player).",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecraftingMatrix\u003c/code\u003e - list of items to be crafted from. Must not contain more than 9 items.",
          "\u003ccode\u003eworld\u003c/code\u003e - The world the crafting takes place in."
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/Recipe.html\" title\u003d\"interface in org.bukkit.inventory\"\u003e\u003ccode\u003eRecipe\u003c/code\u003e\u003c/a\u003e resulting from the given crafting matrix."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "craftItem",
      "comment": "Get the crafted item using the list of ItemStack provided. The list is formatted as a crafting matrix where the index follow the pattern below:  [ 0 1 2 ]\n [ 3 4 5 ]\n [ 6 7 8 ]\n The World and Player arguments are required to fulfill the Bukkit Crafting events. Calls PrepareItemCraftEvent to imitate the Player initiating the crafting event.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecraftingMatrix\u003c/code\u003e - list of items to be crafted from. Must not contain more than 9 items.",
          "\u003ccode\u003eworld\u003c/code\u003e - The world the crafting takes place in.",
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to imitate the crafting event on."
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e resulting from the given crafting matrix, if no recipe is found an ItemStack of \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Material.html#AIR\"\u003e\u003ccode\u003eMaterial.AIR\u003c/code\u003e\u003c/a\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "org.bukkit.inventory.Recipe",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "recipeIterator",
      "comment": "Get an iterator through the list of crafting recipes.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearRecipes",
      "comment": "Clears the list of crafting recipes.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetRecipes",
      "comment": "Resets the list of crafting recipes to the default.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeRecipe",
      "comment": "Remove a recipe from the server. Note that removing a recipe may cause permanent loss of data associated with that recipe (eg whether it has been discovered by players).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - NamespacedKey of recipe to remove."
        ],
        "return": [
          "True if recipe was removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCommandAliases",
      "comment": "Gets a list of command aliases defined in the server properties.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a map of aliases to command names"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpawnRadius",
      "comment": "Gets the radius, in blocks, around each worlds spawn point to protect.",
      "annotations": [],
      "tagMap": {
        "return": [
          "spawn radius, or 0 if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSpawnRadius",
      "comment": "Sets the radius, in blocks, around each worlds spawn point to protect.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - new spawn radius, or 0 if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOnlineMode",
      "comment": "Gets whether the Server is in online mode or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server authenticates clients, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllowFlight",
      "comment": "Gets whether this server allows flying or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server allows flight, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isHardcore",
      "comment": "Gets whether the server is in hardcore mode or not.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the server mode is hardcore, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shutdown",
      "comment": "Shutdowns the server, stopping everything.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcast",
      "comment": "Broadcasts the specified message to every user with the given permission name.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - message to broadcast",
          "\u003ccode\u003epermission\u003c/code\u003e - the required permission \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003epermissibles\u003c/code\u003e\u003c/a\u003e must have to receive the broadcast"
        ],
        "return": [
          "number of message recipients"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcast",
      "comment": "Broadcast a message to all players. This is the same as calling broadcast(net.kyori.adventure.text.Component, java.lang.String) with the BROADCAST_CHANNEL_USERS permission.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - the message"
        ],
        "return": [
          "the number of players"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "broadcast",
      "comment": "Broadcasts the specified message to every user with the given permission name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - message to broadcast",
          "\u003ccode\u003epermission\u003c/code\u003e - the required permission \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003epermissibles\u003c/code\u003e\u003c/a\u003e must have to receive the broadcast"
        ],
        "return": [
          "number of message recipients"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.OfflinePlayer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOfflinePlayer",
      "comment": "Gets the player by the given name, regardless if they are offline or online. This method may involve a blocking web request to get the UUID for the given name. This will return an object even if the player does not exist. To this method, all players will exist.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Server.html#getOfflinePlayer(java.util.UUID)\"\u003e\u003ccode\u003egetOfflinePlayer(java.util.UUID)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name the player to retrieve"
        ],
        "return": [
          "an offline player"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.OfflinePlayer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOfflinePlayerIfCached",
      "comment": "Gets the player by the given name, regardless if they are offline or online. This will not make a web request to get the UUID for the given name, thus this method will not block. However this method will return null if the player is not cached.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Server.html#getOfflinePlayer(java.lang.String)\"\u003e\u003ccode\u003egetOfflinePlayer(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Server.html#getOfflinePlayer(java.util.UUID)\"\u003e\u003ccode\u003egetOfflinePlayer(java.util.UUID)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the player to retrieve"
        ],
        "return": [
          "an offline player if cached, \n\u003ccode\u003enull\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.OfflinePlayer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOfflinePlayer",
      "comment": "Gets the player by the given UUID, regardless if they are offline or online. This will return an object even if the player does not exist. To this method, all players will exist.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - the UUID of the player to retrieve"
        ],
        "return": [
          "an offline player"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getIPBans",
      "comment": "Gets a set containing all current IPs that are banned.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a set containing banned IP addresses"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "banIP",
      "comment": "Bans the specified address from the server.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the IP address to ban"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unbanIP",
      "comment": "Unbans the specified address from the server.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - the IP address to unban"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.OfflinePlayer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBannedPlayers",
      "comment": "Gets a set containing all banned players.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a set containing banned players"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.BanList",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBanList",
      "comment": "Gets a ban list for the supplied type. Bans by name are no longer supported and this method will return null when trying to request them. The replacement is bans by UUID.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of list to fetch, cannot be null"
        ],
        "return": [
          "a ban list of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "org.bukkit.OfflinePlayer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOperators",
      "comment": "Gets a set containing all player operators.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a set containing player operators"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.GameMode",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultGameMode",
      "comment": "Gets the default GameMode for new players.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the default game mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDefaultGameMode",
      "comment": "Sets the default GameMode for new players.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emode\u003c/code\u003e - the new game mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.command.ConsoleCommandSender",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConsoleSender",
      "comment": "Gets a ConsoleCommandSender that may be used as an input source for this server.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a console command sender"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorldContainer",
      "comment": "Gets the folder that contains all of the various Worlds.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "folder that contains all worlds"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.OfflinePlayer",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOfflinePlayers",
      "comment": "Gets every player that has ever played on this server. This method can be expensive as it loads all the player data files from the disk.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "an array containing all previous players"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.plugin.messaging.Messenger",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMessenger",
      "comment": "Gets the Messenger responsible for this server.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "messenger responsible for this server"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.help.HelpMap",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHelpMap",
      "comment": "Gets the HelpMap providing help topics for this server.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a help map for this server"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createInventory",
      "comment": "Creates an empty inventory with the specified type. If the type is InventoryType.CHEST, the new inventory has a size of 27; otherwise the new inventory has the normal size for its type. InventoryType.WORKBENCH will not process crafting recipes if created with this method. Use HumanEntity.openWorkbench(Location, boolean) instead. InventoryType.ENCHANTING will not process ItemStacks for possible enchanting results. Use HumanEntity.openEnchanting(Location, boolean) instead.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryType.html#isCreatable()\"\u003e\u003ccode\u003eInventoryType.isCreatable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the holder of the inventory, or null to indicate no holder",
          "\u003ccode\u003etype\u003c/code\u003e - the type of inventory to create"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryType.html\" title\u003d\"enum class in org.bukkit.event.inventory\"\u003e\u003ccode\u003eInventoryType\u003c/code\u003e\u003c/a\u003e cannot be viewed."
        ],
        "return": [
          "a new inventory"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createInventory",
      "comment": "Creates an empty inventory with the specified type and title. If the type is InventoryType.CHEST, the new inventory has a size of 27; otherwise the new inventory has the normal size for its type. It should be noted that some inventory types do not support titles and may not render with said titles on the Minecraft client. InventoryType.WORKBENCH will not process crafting recipes if created with this method. Use HumanEntity.openWorkbench(Location, boolean) instead. InventoryType.ENCHANTING will not process ItemStacks for possible enchanting results. Use HumanEntity.openEnchanting(Location, boolean) instead.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryType.html#isCreatable()\"\u003e\u003ccode\u003eInventoryType.isCreatable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - The holder of the inventory; can be null if there\u0027s no holder.",
          "\u003ccode\u003etype\u003c/code\u003e - The type of inventory to create.",
          "\u003ccode\u003etitle\u003c/code\u003e - The title of the inventory, to be displayed when it is viewed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryType.html\" title\u003d\"enum class in org.bukkit.event.inventory\"\u003e\u003ccode\u003eInventoryType\u003c/code\u003e\u003c/a\u003e cannot be viewed."
        ],
        "return": [
          "The new inventory."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createInventory",
      "comment": "Creates an empty inventory with the specified type and title. If the type is InventoryType.CHEST, the new inventory has a size of 27; otherwise the new inventory has the normal size for its type. It should be noted that some inventory types do not support titles and may not render with said titles on the Minecraft client. InventoryType.WORKBENCH will not process crafting recipes if created with this method. Use HumanEntity.openWorkbench(Location, boolean) instead. InventoryType.ENCHANTING will not process ItemStacks for possible enchanting results. Use HumanEntity.openEnchanting(Location, boolean) instead.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryType.html#isCreatable()\"\u003e\u003ccode\u003eInventoryType.isCreatable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - The holder of the inventory; can be null if there\u0027s no holder.",
          "\u003ccode\u003etype\u003c/code\u003e - The type of inventory to create.",
          "\u003ccode\u003etitle\u003c/code\u003e - The title of the inventory, to be displayed when it is viewed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/inventory/InventoryType.html\" title\u003d\"enum class in org.bukkit.event.inventory\"\u003e\u003ccode\u003eInventoryType\u003c/code\u003e\u003c/a\u003e cannot be viewed."
        ],
        "return": [
          "The new inventory."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createInventory",
      "comment": "Creates an empty inventory of type InventoryType.CHEST with the specified size.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the holder of the inventory, or null to indicate no holder",
          "\u003ccode\u003esize\u003c/code\u003e - a multiple of 9 as the size of inventory to create"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size is not a multiple of 9"
        ],
        "return": [
          "a new inventory"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createInventory",
      "comment": "Creates an empty inventory of type InventoryType.CHEST with the specified size and title.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the holder of the inventory, or null to indicate no holder",
          "\u003ccode\u003esize\u003c/code\u003e - a multiple of 9 as the size of inventory to create",
          "\u003ccode\u003etitle\u003c/code\u003e - the title of the inventory, displayed when inventory is viewed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size is not a multiple of 9"
        ],
        "return": [
          "a new inventory"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Inventory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createInventory",
      "comment": "Creates an empty inventory of type InventoryType.CHEST with the specified size and title.",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the holder of the inventory, or null to indicate no holder",
          "\u003ccode\u003esize\u003c/code\u003e - a multiple of 9 as the size of inventory to create",
          "\u003ccode\u003etitle\u003c/code\u003e - the title of the inventory, displayed when inventory is viewed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size is not a multiple of 9"
        ],
        "return": [
          "a new inventory"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Merchant",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createMerchant",
      "comment": "Creates an empty merchant.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - the title of the corresponding merchant inventory, displayed when the merchant inventory is viewed"
        ],
        "return": [
          "a new merchant"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.Merchant",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createMerchant",
      "comment": "Creates an empty merchant.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - the title of the corresponding merchant inventory, displayed when the merchant inventory is viewed"
        ],
        "return": [
          "a new merchant"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMonsterSpawnLimit",
      "comment": "Gets user-specified limit for number of monsters that can spawn in a chunk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the monster spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnimalSpawnLimit",
      "comment": "Gets user-specified limit for number of animals that can spawn in a chunk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the animal spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWaterAnimalSpawnLimit",
      "comment": "Gets user-specified limit for number of water animals that can spawn in a chunk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the water animal spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWaterAmbientSpawnLimit",
      "comment": "Gets user-specified limit for number of water ambient mobs that can spawn in a chunk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the water ambient spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAmbientSpawnLimit",
      "comment": "Gets user-specified limit for number of ambient mobs that can spawn in a chunk.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the ambient spawn limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPrimaryThread",
      "comment": "Checks the current thread against the expected primary thread for the server. Note: this method should not be used to indicate the current synchronized state of the runtime. A current thread matching the main thread indicates that it is synchronized, but a mismatch does not preclude the same assumption.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the current thread matches the expected primary thread, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "motd",
      "comment": "Gets the message that is displayed on the server list.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the server\u0027s MOTD"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMotd",
      "comment": "Gets the message that is displayed on the server list.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the servers MOTD"
        ]
      }
    },
    {
      "returnType": {
        "name": "net.kyori.adventure.text.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shutdownMessage",
      "comment": "Gets the default message that is displayed when the server is stopped.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the shutdown message"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShutdownMessage",
      "comment": "Gets the default message that is displayed when the server is stopped.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the shutdown message"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Warning$WarningState",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWarningState",
      "comment": "Gets the current warning state for the server.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the configured warning state"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemFactory",
      "comment": "Gets the instance of the item factory (for ItemMeta).",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/inventory/ItemFactory.html\" title\u003d\"interface in org.bukkit.inventory\"\u003e\u003ccode\u003eItemFactory\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the item factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.scoreboard.ScoreboardManager",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScoreboardManager",
      "comment": "Gets the instance of the scoreboard manager. This will only exist after the first world has loaded.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the scoreboard manager or null if no worlds are loaded."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.CachedServerIcon",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getServerIcon",
      "comment": "Gets an instance of the server\u0027s default server-icon.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the default server-icon; null values may be used by the implementation to indicate no defined icon, but this behavior is not guaranteed"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.CachedServerIcon",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadServerIcon",
      "comment": "Loads an image from a file, and returns a cached image for the specific server-icon. Size and type are implementation defined. An incompatible file is guaranteed to throw an implementation-defined Exception.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the file to load the from"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if image is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eException\u003c/a\u003e\u003c/code\u003e - if the image does not meet current server server-icon specifications"
        ],
        "return": [
          "a cached server-icon that can be used for a \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/server/ServerListPingEvent.html#setServerIcon(org.bukkit.util.CachedServerIcon)\"\u003e\u003ccode\u003eServerListPingEvent.setServerIcon(CachedServerIcon)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.CachedServerIcon",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loadServerIcon",
      "comment": "Creates a cached server-icon for the specific image. Size and type are implementation defined. An incompatible file is guaranteed to throw an implementation-defined Exception.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - the image to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if image is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eException\u003c/a\u003e\u003c/code\u003e - if the image does not meet current server server-icon specifications"
        ],
        "return": [
          "a cached server-icon that can be used for a \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/server/ServerListPingEvent.html#setServerIcon(org.bukkit.util.CachedServerIcon)\"\u003e\u003ccode\u003eServerListPingEvent.setServerIcon(CachedServerIcon)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setIdleTimeout",
      "comment": "Set the idle kick timeout. Any players idle for the specified amount of time will be automatically kicked. A value of 0 will disable the idle kick timeout.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethreshold\u003c/code\u003e - the idle timeout in minutes"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getIdleTimeout",
      "comment": "Gets the idle kick timeout.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the idle timeout in minutes"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator$ChunkData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createChunkData",
      "comment": "Create a ChunkData for use in a generator. See ChunkGenerator.generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world to create the ChunkData for"
        ],
        "return": [
          "a new ChunkData for the world"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.generator.ChunkGenerator$ChunkData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createVanillaChunkData",
      "comment": "Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eworld\u003c/code\u003e - the world to create the ChunkData for",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the chunk",
          "\u003ccode\u003ez\u003c/code\u003e - the z coordinate of the chunk"
        ],
        "return": [
          "a new ChunkData for the world"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.boss.BossBar",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBossBar",
      "comment": "Creates a boss bar instance to display to players. The progress defaults to 1.0",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etitle\u003c/code\u003e - the title of the boss bar",
          "\u003ccode\u003ecolor\u003c/code\u003e - the color of the boss bar",
          "\u003ccode\u003estyle\u003c/code\u003e - the style of the boss bar",
          "\u003ccode\u003eflags\u003c/code\u003e - an optional list of flags to set on the boss bar"
        ],
        "return": [
          "the created boss bar"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.boss.KeyedBossBar",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBossBar",
      "comment": "Creates a boss bar instance to display to players. The progress defaults to 1.0. This instance is added to the persistent storage of the server and will be editable by commands and restored after restart.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key of the boss bar that is used to access the boss bar",
          "\u003ccode\u003etitle\u003c/code\u003e - the title of the boss bar",
          "\u003ccode\u003ecolor\u003c/code\u003e - the color of the boss bar",
          "\u003ccode\u003estyle\u003c/code\u003e - the style of the boss bar",
          "\u003ccode\u003eflags\u003c/code\u003e - an optional list of flags to set on the boss bar"
        ],
        "return": [
          "the created boss bar"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "org.bukkit.boss.KeyedBossBar",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBossBars",
      "comment": "Gets an unmodifiable iterator through all persistent bossbars. not bound to a Boss not created using createBossBar(String, BarColor, BarStyle, BarFlag...) e.g. bossbars created using the bossbar command",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a bossbar iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.boss.KeyedBossBar",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBossBar",
      "comment": "Gets the KeyedBossBar specified by this key. not bound to a Boss not created using createBossBar(String, BarColor, BarStyle, BarFlag...) e.g. bossbars created using the bossbar command",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - unique bossbar key"
        ],
        "return": [
          "bossbar or null if not exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeBossBar",
      "comment": "Removes a KeyedBossBar specified by this key. not bound to a Boss not created using createBossBar(String, BarColor, BarStyle, BarFlag...) e.g. bossbars created using the bossbar command",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - unique bossbar key"
        ],
        "return": [
          "true if removal succeeded or false"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntity",
      "comment": "Gets an entity on the server by its UUID",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003euuid\u003c/code\u003e - the UUID of the entity"
        ],
        "return": [
          "the entity with the given UUID, or null if it isn\u0027t found"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTPS",
      "comment": "Gets the current server TPS",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "current server TPS (1m, 5m, 15m in Paper-Server)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTickTimes",
      "comment": "Get a sample of the servers last tick times (in nanos)",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "A sample of the servers last tick times (in nanos)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAverageTickTime",
      "comment": "Get the average tick time (in millis)",
      "annotations": [],
      "tagMap": {
        "return": [
          "Average tick time (in millis)"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.command.CommandMap",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCommandMap",
      "comment": "Gets the active CommandMap",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the active command map"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.advancement.Advancement",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAdvancement",
      "comment": "Get the advancement specified by this key.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - unique advancement key"
        ],
        "return": [
          "advancement or null if not exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "org.bukkit.advancement.Advancement",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "advancementIterator",
      "comment": "Get an iterator through all advancements. Advancements cannot be removed from this iterator,",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "an advancement iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance for the specified Material, with all properties initialized to unspecified defaults.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ematerial\u003c/code\u003e - the material"
        ],
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance for the specified Material, with all properties initialized to unspecified defaults.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ematerial\u003c/code\u003e - the material",
          "\u003ccode\u003econsumer\u003c/code\u003e - consumer to run on new instance before returning"
        ],
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance with material and properties parsed from provided data.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - data string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified data is not valid"
        ],
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance for the specified Material, with all properties initialized to unspecified defaults, except for those provided in data. If material is specified, then the data string must not also contain the material.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "null, null -\u003e fail"
            }
          ]
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ematerial\u003c/code\u003e - the material",
          "\u003ccode\u003edata\u003c/code\u003e - data string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified data is not valid"
        ],
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Tag",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.Keyed",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTag",
      "comment": "Gets a tag which has already been defined within the server. Plugins are suggested to use the concrete tags in Tag rather than this method which makes no guarantees about which tags are available, and may also be less performant due to lack of caching. Tags will be searched for in an implementation specific manner, but a path consisting of namespace/tags/registry/key is expected. Server implementations are allowed to handle only the registries indicated in Tag.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of the tag"
        ],
        "param": [
          "\u003ccode\u003eregistry\u003c/code\u003e - the tag registry to look at",
          "\u003ccode\u003etag\u003c/code\u003e - the name of the tag",
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the tag entries"
        ],
        "return": [
          "the tag or null"
        ]
      }
    },
    {
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.Keyed",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "comment": "Gets a all tags which have been defined within the server. Server implementations are allowed to handle only the registries indicated in Tag. No guarantees are made about the mutability of the returned iterator.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of the tag"
        ],
        "param": [
          "\u003ccode\u003eregistry\u003c/code\u003e - the tag registry to look at",
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the tag entries"
        ],
        "return": [
          "all defined tags"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.loot.LootTable",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLootTable",
      "comment": "Gets the specified LootTable.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the name of the LootTable"
        ],
        "return": [
          "the LootTable, or null if no LootTable is found with that name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "selectEntities",
      "comment": "Selects entities using the given Vanilla selector. No guarantees are made about the selector format, other than they match the Vanilla format for the active Minecraft version. Usually a selector will start with \u0027@\u0027, unless selecting a Player in which case it may simply be the Player\u0027s name or UUID. Note that in Vanilla, elevated permissions are usually required to use \u0027@\u0027 selectors, but this method should not check such permissions from the sender.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - the sender to execute as, must be provided",
          "\u003ccode\u003eselector\u003c/code\u003e - the selection string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the selector is malformed in any way or a parameter is null"
        ],
        "return": [
          "a list of the selected entities. The list will not be null, but no further guarantees are made."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.UnsafeValues",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUnsafe",
      "annotations": [
        {
          "type": {
            "name": "java.lang.Deprecated",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/UnsafeValues.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eUnsafeValues\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the unsafe values instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Server$Spigot",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spigot",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reloadPermissions",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reloadCommandAliases",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "suggestPlayerNamesWhenNullTabCompletions",
      "comment": "Checks if player names should be suggested when a command returns null as their tab completion result.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if player names should be suggested"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPermissionMessage",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the default no permission message used on the server"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.profile.PlayerProfile",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createProfile",
      "comment": "Creates a PlayerProfile for the specified uuid, with name as null",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003euuid\u003c/code\u003e - UUID to create profile for"
        ],
        "return": [
          "A PlayerProfile object"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.profile.PlayerProfile",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createProfile",
      "comment": "Creates a PlayerProfile for the specified name, with UUID as null",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name to create profile for"
        ],
        "return": [
          "A PlayerProfile object"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.profile.PlayerProfile",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createProfile",
      "comment": "Creates a PlayerProfile for the specified name/uuid Both UUID and Name can not be null at same time. One must be supplied.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003euuid\u003c/code\u003e - UUID to create profile for",
          "\u003ccode\u003ename\u003c/code\u003e - Name to create profile for"
        ],
        "return": [
          "A PlayerProfile object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCurrentTick",
      "comment": "Get the current internal server tick",
      "annotations": [],
      "tagMap": {
        "return": [
          "Current tick"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isStopping",
      "comment": "Checks if the server is in the process of being shutdown.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if server is in the process of being shutdown"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.destroystokyo.paper.entity.ai.MobGoals",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMobGoals",
      "comment": "Returns the MobGoals manager",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the mob goals manager"
        ]
      }
    },
    {
      "returnType": {
        "name": "io.papermc.paper.datapack.DatapackManager",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDatapackManager",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the datapack manager"
        ]
      }
    }
  ],
  "innerClasses": [
    "org.bukkit.Server$Spigot"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.Server",
  "comment": "Represents a server implementation.",
  "tagMap": {}
}