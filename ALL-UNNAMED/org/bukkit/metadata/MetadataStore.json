{
  "packageName": "org.bukkit.metadata",
  "simpleName": "MetadataStore",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMetadata",
      "comment": "Adds a metadata value to an object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - The object receiving the metadata.",
          "\u003ccode\u003emetadataKey\u003c/code\u003e - A unique key to identify this metadata.",
          "\u003ccode\u003enewMetadataValue\u003c/code\u003e - The metadata value to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If value is null, or the owning plugin is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "org.bukkit.metadata.MetadataValue",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMetadata",
      "comment": "Returns all metadata values attached to an object. If multiple plugins have attached metadata, each will value will be included.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the object being interrogated.",
          "\u003ccode\u003emetadataKey\u003c/code\u003e - the unique metadata key being sought."
        ],
        "return": [
          "A list of values, one for each plugin that has set the requested value."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasMetadata",
      "comment": "Tests to see if a metadata attribute has been set on an object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the object upon which the has-metadata test is performed.",
          "\u003ccode\u003emetadataKey\u003c/code\u003e - the unique metadata key being queried."
        ],
        "return": [
          "the existence of the metadataKey within subject."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeMetadata",
      "comment": "Removes a metadata item owned by a plugin from a subject.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - the object to remove the metadata from.",
          "\u003ccode\u003emetadataKey\u003c/code\u003e - the unique metadata key identifying the metadata to remove.",
          "\u003ccode\u003eowningPlugin\u003c/code\u003e - the plugin attempting to remove a metadata item."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If plugin is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "invalidateAll",
      "comment": "Invalidates all metadata in the metadata store that originates from the given plugin. Doing this will force each invalidated metadata item to be recalculated the next time it is accessed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eowningPlugin\u003c/code\u003e - the plugin requesting the invalidation."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If plugin is null"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.metadata.MetadataStore",
  "tagMap": {}
}