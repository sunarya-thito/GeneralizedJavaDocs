{
  "packageName": "org.bukkit",
  "simpleName": "Material",
  "moduleName": "ALL-UNNAMED",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "org.bukkit.Material",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LEGACY_PREFIX",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/constant-values.html#org.bukkit.Material.LEGACY_PREFIX\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 17,
      "name": "data",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "tagMap": {
        "return": [
          "If the type is either AIR, CAVE_AIR or VOID_AIR"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTranslationKey",
      "comment": "Return the translation key for the Material, so the client can translate it into the active locale when using a TranslatableComponent.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the translation key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "translationKey",
      "comment": "Description copied from interface: net.kyori.adventure.translation.Translatable",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/translation/Translatable.html#translationKey()\" title\u003d\"class or interface in net.kyori.adventure.translation\" class\u003d\"external-link\"\u003etranslationKey\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://jd.adventure.kyori.net/api/4.8.1/net/kyori/adventure/translation/Translatable.html\" title\u003d\"class or interface in net.kyori.adventure.translation\" class\u003d\"external-link\"\u003eTranslatable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the translation key"
        ]
      }
    },
    {
      "returnType": {
        "name": "io.papermc.paper.inventory.ItemRarity",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getItemRarity",
      "comment": "Returns the item rarity for the item. The Material MUST be an Item not a block. Use isItem() before this.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the item rarity"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.google.common.collect.Multimap",
        "parameters": [
          {
            "name": "org.bukkit.attribute.Attribute",
            "type": "Class"
          },
          {
            "name": "org.bukkit.attribute.AttributeModifier",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.EquipmentSlot",
            "type": "Class"
          },
          "field": {
            "name": "equipmentSlot"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getItemAttributes",
      "comment": "Returns an immutable multimap of attributes for the slot. isItem() must be true for this material.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eequipmentSlot\u003c/code\u003e - the slot to get the attributes for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Material.html#isItem()\"\u003e\u003ccode\u003eisItem()\u003c/code\u003e\u003c/a\u003e is false"
        ],
        "return": [
          "an immutable multimap of attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getId",
      "comment": "Do not use for any reason.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "return": [
          "ID of this material"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLegacy",
      "comment": "Do not use for any reason.",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "return": [
          "legacy status"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.NamespacedKey",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKey",
      "comment": "Description copied from interface: Keyed",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Keyed.html#getKey()\"\u003egetKey\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Keyed.html\" title\u003d\"interface in org.bukkit\"\u003eKeyed\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this object\u0027s key"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxStackSize",
      "comment": "Gets the maximum amount of this material that can be held in a stack",
      "tagMap": {
        "return": [
          "Maximum stack size for this material"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxDurability",
      "comment": "Gets the maximum durability of this material",
      "tagMap": {
        "return": [
          "Maximum durability for this material"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance for this Material, with all properties initialized to unspecified defaults.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "org.bukkit.block.data.BlockData",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "consumer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance for this Material, with all properties initialized to unspecified defaults.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003econsumer\u003c/code\u003e - consumer to run on new instance before returning"
        ],
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBlockData",
      "comment": "Creates a new BlockData instance for this Material, with all properties initialized to unspecified defaults, except for those provided in data.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - data string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified data is not valid"
        ],
        "return": [
          "new data instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "org.bukkit.material.MaterialData",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getData",
      "comment": "Gets the MaterialData class associated with this Material",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "MaterialData associated with this Material"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.material.MaterialData",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "raw"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNewData",
      "comment": "Constructs a new MaterialData relevant for this Material, with the given initial data",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eraw\u003c/code\u003e - Initial data to construct the MaterialData with"
        ],
        "return": [
          "New MaterialData with the given data"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBlock",
      "comment": "Checks if this Material is a placable block",
      "tagMap": {
        "return": [
          "true if this material is a block"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEdible",
      "comment": "Checks if this Material is edible.",
      "tagMap": {
        "return": [
          "true if this Material is edible."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMaterial",
      "comment": "Attempts to get the Material with the given name. This is a normal lookup, names must be the precise name they are given in the enum.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the material to get"
        ],
        "return": [
          "Material if found, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "legacyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMaterial",
      "comment": "Attempts to get the Material with the given name. This is a normal lookup, names must be the precise name they are given in the enum (but optionally including the LEGACY_PREFIX if legacyName is true). If legacyName is true, then the lookup will be against legacy materials, but the returned Material will be a modern material (ie this method is useful for updating stored data).",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the material to get",
          "\u003ccode\u003elegacyName\u003c/code\u003e - whether this is a legacy name lookup"
        ],
        "return": [
          "Material if found, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "matchMaterial",
      "comment": "Attempts to match the Material with the given name. This is a match lookup; names will be stripped of the \"minecraft:\" namespace, converted to uppercase, then stripped of special characters in an attempt to format it like the enum.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the material to get"
        ],
        "return": [
          "Material if found, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "legacyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "matchMaterial",
      "comment": "Attempts to match the Material with the given name. This is a match lookup; names will be stripped of the \"minecraft:\" namespace, converted to uppercase, then stripped of special characters in an attempt to format it like the enum.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Name of the material to get",
          "\u003ccode\u003elegacyName\u003c/code\u003e - whether this is a legacy name (see \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/Material.html#getMaterial(java.lang.String,boolean)\"\u003e\u003ccode\u003egetMaterial(java.lang.String, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "Material if found, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRecord",
      "tagMap": {
        "return": [
          "True if this material represents a playable music disk."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSolid",
      "comment": "Check if the material is a block and solid (can be built upon)",
      "tagMap": {
        "return": [
          "True if this material is a block and solid"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAir",
      "comment": "Check if the material is an air block.",
      "tagMap": {
        "return": [
          "True if this material is an air block."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTransparent",
      "comment": "Check if the material is a block and does not block any light",
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {
        "return": [
          "True if this material is a block and does not block any light"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFlammable",
      "comment": "Check if the material is a block and can catch fire",
      "tagMap": {
        "return": [
          "True if this material is a block and can catch fire"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBurnable",
      "comment": "Check if the material is a block and can burn away",
      "tagMap": {
        "return": [
          "True if this material is a block and can burn away"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFuel",
      "comment": "Checks if this Material can be used as fuel in a Furnace",
      "tagMap": {
        "return": [
          "true if this Material can be used as fuel."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOccluding",
      "comment": "Check if the material is a block and completely blocks vision",
      "tagMap": {
        "return": [
          "True if this material is a block and completely blocks vision"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasGravity",
      "tagMap": {
        "return": [
          "True if this material is affected by gravity."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isItem",
      "comment": "Checks if this Material is an obtainable item.",
      "tagMap": {
        "return": [
          "true if this material is an item"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInteractable",
      "comment": "Checks if this Material can be interacted with. Interactable materials include those with functionality when they are interacted with by a player such as chests, furnaces, etc. Some blocks such as piston heads and stairs are considered interactable though may not perform any additional functionality. Note that the interactability of some materials may be dependant on their state as well. This method will return true if there is at least one state in which additional interact handling is performed for the material.",
      "tagMap": {
        "return": [
          "true if this material can be interacted with."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHardness",
      "comment": "Obtains the block\u0027s hardness level (also known as \"strength\"). This number is used to calculate the time required to break each block. Only available when isBlock() is true.",
      "tagMap": {
        "return": [
          "the hardness of that material."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlastResistance",
      "comment": "Obtains the blast resistance value (also known as block \"durability\"). This value is used in explosions to calculate whether a block should be broken or not. Only available when isBlock() is true.",
      "tagMap": {
        "return": [
          "the blast resistance of that material."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSlipperiness",
      "comment": "Returns a value that represents how \u0027slippery\u0027 the block is. Blocks with higher slipperiness, like ICE can be slid on further by the player and other entities. Most blocks have a default slipperiness of 0.6f. Only available when isBlock() is true.",
      "tagMap": {
        "return": [
          "the slipperiness of this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Material",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCraftingRemainingItem",
      "comment": "Determines the remaining item in a crafting grid after crafting with this ingredient. Only available when isItem() is true.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "the item left behind when crafting, or null if nothing is."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.EquipmentSlot",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEquipmentSlot",
      "comment": "Get the best suitable slot for this Material. For most items this will be EquipmentSlot.HAND.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the best EquipmentSlot for this Material"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.bukkit.Material",
  "comment": "An enum of all material IDs accepted by the official server and client",
  "tagMap": {}
}