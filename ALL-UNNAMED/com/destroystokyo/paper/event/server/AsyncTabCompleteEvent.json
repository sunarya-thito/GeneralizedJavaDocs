{
  "packageName": "com.destroystokyo.paper.event.server",
  "simpleName": "AsyncTabCompleteEvent",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "org.bukkit.event.Event",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.bukkit.command.CommandSender",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSender",
      "comment": "Get the sender completing this command.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCompletions",
      "comment": "The list of completions which will be offered to the sender, in order. This list is mutable and reflects what will be offered. If this collection is not empty after the event is fired, then the standard process of calling Command.tabComplete(CommandSender, String, String[]) or current player names will not be called.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a list of offered completions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "completions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCompletions",
      "comment": "Set the completions offered, overriding any already set. If this collection is not empty after the event is fired, then the standard process of calling Command.tabComplete(CommandSender, String, String[]) or current player names will not be called. The passed collection will be cloned to a new List. You must call {getCompletions()} to mutate from here",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompletions\u003c/code\u003e - the new completions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.destroystokyo.paper.event.server.AsyncTabCompleteEvent$Completion",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "completions",
      "comment": "The list of completions which will be offered to the sender, in order. This list is mutable and reflects what will be offered. If this collection is not empty after the event is fired, then the standard process of calling Command.tabComplete(CommandSender, String, String[]) or current player names will not be called.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "a list of offered completions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "com.destroystokyo.paper.event.server.AsyncTabCompleteEvent$Completion",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "newCompletions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "completions",
      "comment": "Set the completions offered, overriding any already set. If this collection is not empty after the event is fired, then the standard process of calling Command.tabComplete(CommandSender, String, String[]) or current player names will not be called. The passed collection will be cloned to a new List. You must call {completions()} to mutate from here",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewCompletions\u003c/code\u003e - the new completions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBuffer",
      "comment": "Return the entire buffer which formed the basis of this completion.",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "return": [
          "command buffer, as entered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCommand",
      "tagMap": {
        "return": [
          "True if it is a command being tab completed, false if it is a chat message."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocation",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "return": [
          "The position looked at by the sender, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHandled",
      "comment": "If true, the standard process of calling Command.tabComplete(CommandSender, String, String[]) or current player names will not be called.",
      "tagMap": {
        "return": [
          "Is completions considered handled. Always true if completions is not empty."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "handled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHandled",
      "comment": "Sets whether or not to consider the completion request handled. If true, the standard process of calling Command.tabComplete(CommandSender, String, String[]) or current player names will not be called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehandled\u003c/code\u003e - if this completion should be marked as being handled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCancelled",
      "comment": "Description copied from interface: Cancellable",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Cancellable.html#isCancelled()\"\u003eisCancelled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Cancellable.html\" title\u003d\"interface in org.bukkit.event\"\u003eCancellable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this event is cancelled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "cancelled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCancelled",
      "comment": "Will provide no completions, and will not fire the synchronous process",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Cancellable.html#setCancelled(boolean)\"\u003esetCancelled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Cancellable.html\" title\u003d\"interface in org.bukkit.event\"\u003eCancellable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecancelled\u003c/code\u003e - true if you wish to cancel this event"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHandlers",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Event.html#getHandlers()\"\u003egetHandlers\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Event.html\" title\u003d\"class in org.bukkit.event\"\u003eEvent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHandlerList",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.NotNull"
        },
        {
          "type": "org.jetbrains.annotations.NotNull"
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "field": {
            "name": "sender"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "buffer"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isCommand"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.command.CommandSender",
            "type": "Class"
          },
          "field": {
            "name": "sender"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "completions"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "buffer"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isCommand"
          }
        },
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.Nullable"
            },
            {
              "type": "org.jetbrains.annotations.Nullable"
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [
        {
          "type": "java.lang.Deprecated"
        }
      ],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "com.destroystokyo.paper.event.server.AsyncTabCompleteEvent$Completion"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.destroystokyo.paper.event.server.AsyncTabCompleteEvent",
  "comment": "Allows plugins to compute tab completion results asynchronously. If this event provides completions, then the standard synchronous process will not be fired to populate the results. However, the synchronous TabCompleteEvent will fire with the Async results. Only 1 process will be allowed to provide completions, the Async Event, or the standard process.",
  "tagMap": {}
}