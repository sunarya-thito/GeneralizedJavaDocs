{
  "packageName": "com.destroystokyo.paper.event.player",
  "simpleName": "PlayerConnectionCloseEvent",
  "moduleName": "ALL-UNNAMED",
  "type": "CLASS",
  "superClass": {
    "name": "org.bukkit.event.Event",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.UUID",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPlayerUniqueId",
      "comment": "Returns the UUID of the player disconnecting.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPlayerName",
      "comment": "Returns the name of the player disconnecting.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.net.InetAddress",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIpAddress",
      "comment": "Returns the player\u0027s IP address.",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHandlers",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Event.html#getHandlers()\"\u003egetHandlers\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://papermc.io/javadocs/paper/1.17/org/bukkit/event/Event.html\" title\u003d\"class in org.bukkit.event\"\u003eEvent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.event.HandlerList",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHandlerList",
      "annotations": [
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        },
        {
          "type": {
            "name": "org.jetbrains.annotations.NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.util.UUID",
            "type": "Class"
          },
          "name": "playerUniqueId",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "playerName",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            },
            {
              "type": {
                "name": "org.jetbrains.annotations.NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "java.net.InetAddress",
            "type": "Class"
          },
          "name": "ipAddress",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "async",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent",
  "comment": "\u003cp\u003e This event is invoked when a player has disconnected. It is guaranteed that, if the server is in online-mode, that the provided uuid and username have been validated. \u003c/p\u003e \n\u003cp\u003e The event is invoked for players who have not yet logged into the world, whereas \u003ca href\u003d\"../../../../../org/bukkit/event/player/PlayerQuitEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerQuitEvent\u003c/code\u003e\u003c/a\u003e is only invoked on players who have logged into the world. \u003c/p\u003e \n\u003cp\u003e The event is invoked for players who have already logged into the world, although whether or not the player exists in the world at the time of firing is undefined. (That is, whether the plugin can retrieve a Player object using the event parameters is undefined). However, it is guaranteed that this event is invoked AFTER \u003ca href\u003d\"../../../../../org/bukkit/event/player/PlayerQuitEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerQuitEvent\u003c/code\u003e\u003c/a\u003e, if the player has already logged into the world. \u003c/p\u003e \n\u003cp\u003e This event is guaranteed to never fire unless \u003ca href\u003d\"../../../../../org/bukkit/event/player/AsyncPlayerPreLoginEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003eAsyncPlayerPreLoginEvent\u003c/code\u003e\u003c/a\u003e has been fired beforehand, and this event may not be called in parallel with \u003ca href\u003d\"../../../../../org/bukkit/event/player/AsyncPlayerPreLoginEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003eAsyncPlayerPreLoginEvent\u003c/code\u003e\u003c/a\u003e for the same connection. \u003c/p\u003e \n\u003cp\u003e Cancelling the \u003ca href\u003d\"../../../../../org/bukkit/event/player/AsyncPlayerPreLoginEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003eAsyncPlayerPreLoginEvent\u003c/code\u003e\u003c/a\u003e guarantees the corresponding \u003ccode\u003ePlayerConnectionCloseEvent\u003c/code\u003e is never called. \u003c/p\u003e \n\u003cp\u003e The event may be invoked asynchronously or synchronously. Plugins should check \u003ca href\u003d\"../../../../../org/bukkit/event/Event.html#isAsynchronous()\"\u003e\u003ccode\u003eEvent.isAsynchronous()\u003c/code\u003e\u003c/a\u003e and handle accordingly. \u003c/p\u003e",
  "tagMap": {}
}