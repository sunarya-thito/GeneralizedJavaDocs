{
  "packageName": "com.destroystokyo.paper.loottable",
  "simpleName": "LootableInventory",
  "moduleName": "ALL-UNNAMED",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.loot.Lootable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRefillEnabled",
      "comment": "Server owners have to enable whether or not an object in a world should refill",
      "tagMap": {
        "return": [
          "If the world this inventory is currently in has Replenishable Lootables enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasBeenFilled",
      "comment": "Whether or not this object has ever been filled",
      "tagMap": {
        "return": [
          "Has ever been filled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasPlayerLooted",
      "comment": "Has this player ever looted this block",
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to check"
        ],
        "return": [
          "Whether or not this player has looted this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.UUID",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasPlayerLooted",
      "comment": "Has this player ever looted this block",
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to check"
        ],
        "return": [
          "Whether or not this player has looted this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastLooted",
      "comment": "Gets the timestamp, in milliseconds, of when the player last looted this object",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to check"
        ],
        "return": [
          "Timestamp last looted, or null if player has not looted this object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.UUID",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastLooted",
      "comment": "Gets the timestamp, in milliseconds, of when the player last looted this object",
      "annotations": [
        {
          "type": "org.jetbrains.annotations.Nullable"
        },
        {
          "type": "org.jetbrains.annotations.Nullable"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to check"
        ],
        "return": [
          "Timestamp last looted, or null if player has not looted this object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "looted"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHasPlayerLooted",
      "comment": "Change the state of whether or not a player has looted this block",
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to change state for",
          "\u003ccode\u003elooted\u003c/code\u003e - true to add player to looted list, false to remove"
        ],
        "return": [
          "The previous state of whether the player had looted this or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": "org.jetbrains.annotations.NotNull"
            },
            {
              "type": "org.jetbrains.annotations.NotNull"
            }
          ],
          "type": {
            "name": "java.util.UUID",
            "type": "Class"
          },
          "field": {
            "name": "player"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "looted"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHasPlayerLooted",
      "comment": "Change the state of whether or not a player has looted this block",
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - The player to change state for",
          "\u003ccode\u003elooted\u003c/code\u003e - true to add player to looted list, false to remove"
        ],
        "return": [
          "The previous state of whether the player had looted this or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasPendingRefill",
      "comment": "Returns Whether or not this object has been filled and now has a pending refill",
      "tagMap": {
        "return": [
          "Has pending refill"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastFilled",
      "comment": "Gets the timestamp in milliseconds that the Lootable object was last refilled",
      "tagMap": {
        "return": [
          "-1 if it was never refilled, or timestamp in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNextRefill",
      "comment": "Gets the timestamp in milliseconds that the Lootable object will refill",
      "tagMap": {
        "return": [
          "-1 if it is not scheduled for refill, or timestamp in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "refillAt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNextRefill",
      "comment": "Sets the timestamp in milliseconds of the next refill for this object",
      "tagMap": {
        "param": [
          "\u003ccode\u003erefillAt\u003c/code\u003e - timestamp in milliseconds. -1 to clear next refill"
        ],
        "return": [
          "The previous scheduled time to refill, or -1 if was not scheduled"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.destroystokyo.paper.loottable.LootableInventory",
  "comment": "Represents an Inventory that contains a Loot Table associated to it that will automatically fill on first open. A new feature and API is provided to support automatically refreshing the contents of the inventory based on that Loot Table after a configurable amount of time has passed. The behavior of how the Inventory is filled based on the loot table may vary based on Minecraft versions and the Loot Table feature.",
  "tagMap": {}
}