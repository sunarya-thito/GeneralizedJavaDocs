{
  "packageName": "javax.naming",
  "simpleName": "CompositeName",
  "moduleName": "java.naming",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Generates the string representation of this composite name. The string representation consists of enumerating in order each component of the composite name and separating each component by a forward slash character. Quoting and escape characters are applied where necessary according to the JNDI syntax, which is described in the class description. An empty component is represented by an empty string. The string representation thus generated can be passed to the CompositeName constructor to create a new equivalent composite name.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-null string representation of this composite name."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Determines whether two composite names are equal. If obj is null or not a composite name, false is returned. Two composite names are equal if each component in one is equal to the corresponding component in the other. This implies both have the same number of components, and each component\u0027s equals() test against the corresponding component in the other name returns true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/CompositeName.html#hashCode()\"\u003e\u003ccode\u003ehashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The possibly null object to compare against."
        ],
        "return": [
          "true if obj is equal to this composite name, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Computes the hash code of this composite name. The hash code is the sum of the hash codes of individual components of this composite name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/CompositeName.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An int representing the hash code of this name."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this CompositeName with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object. If obj is null or not an instance of CompositeName, ClassCastException is thrown. See equals() for what it means for two composite names to be equal. If two composite names are equal, 0 is returned. Ordering of composite names follows the lexicographical rules for string comparison, with the extension that this applies to all the components in the composite name. The effect is as if all the components were lined up in their specified ordered and the lexicographical rules applied over the two line-ups. If this composite name is \"lexicographically\" lesser than obj, a negative number is returned. If this composite name is \"lexicographically\" greater than obj, a positive number is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003e\u003ccode\u003eComparable.compareTo(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#compareTo(java.lang.Object)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The non-null object to compare against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if obj is not a CompositeName."
        ],
        "return": [
          "a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Generates a copy of this composite name. Changes to the components of this composite name won\u0027t affect the new copy and vice versa.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-null copy of this composite name."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "size",
      "comment": "Retrieves the number of components in this composite name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The nonnegative number of components in this composite name."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Determines whether this composite name is empty. A composite name is empty if it has zero components.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this composite name is empty, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAll",
      "comment": "Retrieves the components of this composite name as an enumeration of strings. The effects of updates to this composite name on this enumeration is undefined.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#getAll()\"\u003egetAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-null enumeration of the components of this composite name. Each element of the enumeration is of class String."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Retrieves a component of this composite name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#get(int)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The 0-based index of the component to retrieve. Must be in the range [0,size())."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range."
        ],
        "return": [
          "The non-null component at index posn."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrefix",
      "comment": "Creates a composite name whose components consist of a prefix of the components in this composite name. Subsequent changes to this composite name does not affect the name that is returned.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#getPrefix(int)\"\u003egetPrefix\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The 0-based index of the component at which to stop. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range."
        ],
        "return": [
          "A composite name consisting of the components at indexes in the range [0,posn)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSuffix",
      "comment": "Creates a composite name whose components consist of a suffix of the components in this composite name. Subsequent changes to this composite name does not affect the name that is returned.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#getSuffix(int)\"\u003egetSuffix\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The 0-based index of the component at which to start. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range."
        ],
        "return": [
          "A composite name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty composite name is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "startsWith",
      "comment": "Determines whether a composite name is a prefix of this composite name. A composite name \u0027n\u0027 is a prefix if it is equal to getPrefix(n.size())--in other words, this composite name starts with \u0027n\u0027. If \u0027n\u0027 is null or not a composite name, false is returned.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#startsWith(javax.naming.Name)\"\u003estartsWith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The possibly null name to check."
        ],
        "return": [
          "true if n is a CompositeName and is a prefix of this composite name, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "endsWith",
      "comment": "Determines whether a composite name is a suffix of this composite name. A composite name \u0027n\u0027 is a suffix if it is equal to getSuffix(size()-n.size())--in other words, this composite name ends with \u0027n\u0027. If n is null or not a composite name, false is returned.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#endsWith(javax.naming.Name)\"\u003eendsWith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The possibly null name to check."
        ],
        "return": [
          "true if n is a CompositeName and is a suffix of this composite name, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "suffix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAll",
      "comment": "Adds the components of a composite name -- in order -- to the end of this composite name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#addAll(javax.naming.Name)\"\u003eaddAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esuffix\u003c/code\u003e - The non-null components to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If suffix is not a composite name."
        ],
        "return": [
          "The updated CompositeName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAll",
      "comment": "Adds the components of a composite name -- in order -- at a specified position within this composite name. Components of this composite name at or after the index of the first new component are shifted up (away from index 0) to accommodate the new components.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#addAll(int,javax.naming.Name)\"\u003eaddAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The non-null components to add.",
          "\u003ccode\u003eposn\u003c/code\u003e - The index in this name at which to add the new components. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If n is not a composite name.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range."
        ],
        "return": [
          "The updated CompositeName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds a single component to the end of this composite name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#add(java.lang.String)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - The non-null component to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If adding comp at end of the name would violate the name\u0027s syntax."
        ],
        "return": [
          "The updated CompositeName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds a single component at a specified position within this composite name. Components of this composite name at or after the index of the new component are shifted up by one (away from index 0) to accommodate the new component.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#add(int,java.lang.String)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - The non-null component to add.",
          "\u003ccode\u003eposn\u003c/code\u003e - The index at which to add the new component. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If adding comp at the specified position would violate the name\u0027s syntax."
        ],
        "return": [
          "The updated CompositeName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Deletes a component from this composite name. The component of this composite name at position \u0027posn\u0027 is removed, and components at indices greater than \u0027posn\u0027 are shifted down (towards index 0) by one.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#remove(int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The index of the component to delete. Must be in the range [0,size())."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range (includes case where composite name is empty).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If deleting the component would violate the name\u0027s syntax."
        ],
        "return": [
          "The component removed (a String)."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Enumeration",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "comps",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new composite name instance using the components specified by \u0027comps\u0027. This protected method is intended to be used by subclasses of CompositeName when they override methods such as clone(), getPrefix(), getSuffix().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomps\u003c/code\u003e - A non-null enumeration containing the components for the new composite name. Each element is of class String. The enumeration will be consumed to extract its elements."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new composite name instance by parsing the string n using the composite name syntax (left-to-right, slash separated). The composite name syntax is described in detail in the class description.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The non-null string to parse."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If n has invalid composite name syntax."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new empty composite name. Such a name returns true when isEmpty() is invoked on it.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.naming.CompositeName",
  "comment": "This class represents a composite name -- a sequence of component names spanning multiple namespaces. Each component is a string name from the namespace of a naming system. If the component comes from a hierarchical namespace, that component can be further parsed into its atomic parts by using the CompoundName class. \n\u003cp\u003e The components of a composite name are numbered. The indexes of a composite name with N components range from 0 up to, but not including, N. This range may be written as [0,N). The most significant component is at index 0. An empty composite name has no components. \u003c/p\u003e\n\u003ch2\u003eJNDI Composite Name Syntax\u003c/h2\u003e JNDI defines a standard string representation for composite names. This representation is the concatenation of the components of a composite name from left to right using the component separator (a forward slash character (/)) to separate each component. The JNDI syntax defines the following meta characters: \n\u003cul\u003e \n \u003cli\u003eescape (backward slash \\), \u003c/li\u003e\n \u003cli\u003equote characters (single (\u0027) and double quotes (\")), and \u003c/li\u003e\n \u003cli\u003ecomponent separator (forward slash character (/)). \u003c/li\u003e\n\u003c/ul\u003e Any occurrence of a leading quote, an escape preceding any meta character, an escape at the end of a component, or a component separator character in an unquoted component must be preceded by an escape character when that component is being composed into a composite name string. Alternatively, to avoid adding escape characters as described, the entire component can be quoted using matching single quotes or matching double quotes. A single quote occurring within a double-quoted component is not considered a meta character (and need not be escaped), and vice versa. \n\u003cp\u003e When two composite names are compared, the case of the characters is significant. \u003c/p\u003e\n\u003cp\u003e A leading component separator (the composite name string begins with a separator) denotes a leading empty component (a component consisting of an empty string). A trailing component separator (the composite name string ends with a separator) denotes a trailing empty component. Adjacent component separators denote an empty component. \u003c/p\u003e\n\u003ch2\u003eComposite Name Examples\u003c/h2\u003e This table shows examples of some composite names. Each row shows the string form of a composite name and its corresponding structural form (\n\u003ccode\u003eCompositeName\u003c/code\u003e). \n\u003ctable class\u003d\"striped\"\u003e\n \u003ccaption style\u003d\"display:none\"\u003e\n  examples showing string form of composite name and its corresponding structural form (CompositeName)\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eString Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eCompositeName\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"\" \u003c/th\u003e \n   \u003ctd\u003e{} (the empty name \u003d\u003d new CompositeName(\"\") \u003d\u003d new CompositeName()) \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"x\" \u003c/th\u003e \n   \u003ctd\u003e{\"x\"} \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"x/y\" \u003c/th\u003e \n   \u003ctd\u003e{\"x\", \"y\"}\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\"x/\"\u003c/th\u003e \n   \u003ctd\u003e{\"x\", \"\"}\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\"/x\"\u003c/th\u003e \n   \u003ctd\u003e{\"\", \"x\"}\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\"/\"\u003c/th\u003e \n   \u003ctd\u003e{\"\"}\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\"//\"\u003c/th\u003e \n   \u003ctd\u003e{\"\", \"\"}\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\"/x/\"\u003c/th\u003e \n   \u003ctd\u003e{\"\", \"x\", \"\"}\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\"x//y\"\u003c/th\u003e \n   \u003ctd\u003e{\"x\", \"\", \"y\"}\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003ch2\u003eComposition Examples\u003c/h2\u003e Here are some composition examples. The right column shows composing string composite names while the left column shows composing the corresponding \n\u003ccode\u003eCompositeName\u003c/code\u003es. Notice that composing the string forms of two composite names simply involves concatenating their string forms together. \n\u003ctable class\u003d\"striped\"\u003e\n \u003ccaption style\u003d\"display:none\"\u003e\n  composition examples showing string names and composite names\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eString Names\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eCompositeNames\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"x/y\" + \"/\" \u003d x/y/ \u003c/th\u003e \n   \u003ctd\u003e {\"x\", \"y\"} + {\"\"} \u003d {\"x\", \"y\", \"\"} \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"\" + \"x\" \u003d \"x\" \u003c/th\u003e \n   \u003ctd\u003e {} + {\"x\"} \u003d {\"x\"} \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"/\" + \"x\" \u003d \"/x\" \u003c/th\u003e \n   \u003ctd\u003e {\"\"} + {\"x\"} \u003d {\"\", \"x\"} \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \"x\" + \"\" + \"\" \u003d \"x\" \u003c/th\u003e \n   \u003ctd\u003e {\"x\"} + {} + {} \u003d {\"x\"} \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003ch2\u003eMultithreaded Access\u003c/h2\u003e A \n\u003ccode\u003eCompositeName\u003c/code\u003e instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a \n\u003ccode\u003eCompositeName\u003c/code\u003e should lock the object.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.naming.CompositeName\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}