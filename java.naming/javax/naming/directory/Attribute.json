{
  "packageName": "javax.naming.directory",
  "simpleName": "Attribute",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.lang.Cloneable",
      "type": "Class"
    },
    {
      "name": "java.io.Serializable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "serialVersionUID",
      "comment": "Use serialVersionUID from JNDI 1.1.1 for interoperability.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.directory.Attribute.serialVersionUID\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAll",
      "comment": "Retrieves an enumeration of the attribute\u0027s values. The behaviour of this enumeration is unspecified if the attribute\u0027s values are added, changed, or removed while the enumeration is in progress. If the attribute values are ordered, the enumeration\u0027s items will be ordered.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/Attribute.html#isOrdered()\"\u003e\u003ccode\u003eisOrdered()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a naming exception was encountered while retrieving the values."
        ],
        "return": [
          "A non-null enumeration of the attribute\u0027s values. Each element of the enumeration is a possibly null Object. The object\u0027s class is the class of the attribute value. The element is null if the attribute\u0027s value is null. If the attribute has zero values, an empty enumeration is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Retrieves one of this attribute\u0027s values. If the attribute has more than one value and is unordered, any one of the values is returned. If the attribute has more than one value and is ordered, the first value is returned.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a naming exception was encountered while retrieving the value.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - If this attribute has no values."
        ],
        "return": [
          "A possibly null object representing one of the attribute\u0027s value. It is null if the attribute\u0027s value is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "size",
      "comment": "Retrieves the number of values in this attribute.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The nonnegative number of values in this attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getID",
      "comment": "Retrieves the id of this attribute.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The id of this attribute. It cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "attrVal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Determines whether a value is in the attribute. Equality is determined by the implementation, which may use Object.equals() or schema information to determine equality.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/BasicAttribute.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eBasicAttribute.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eattrVal\u003c/code\u003e - The possibly null value to check. If null, check whether the attribute has an attribute value whose value is null."
        ],
        "return": [
          "true if attrVal is one of this attribute\u0027s values; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "attrVal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Adds a new value to the attribute. If the attribute values are unordered and attrVal is already in the attribute, this method does nothing. If the attribute values are ordered, attrVal is added to the end of the list of attribute values. Equality is determined by the implementation, which may use Object.equals() or schema information to determine equality.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattrVal\u003c/code\u003e - The new possibly null value to add. If null, null is added as an attribute value."
        ],
        "return": [
          "true if a value was added; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "attrval",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes a specified value from the attribute. If attrval is not in the attribute, this method does nothing. If the attribute values are ordered, the first occurrence of attrVal is removed and attribute values at indices greater than the removed value are shifted up towards the head of the list (and their indices decremented by one). Equality is determined by the implementation, which may use Object.equals() or schema information to determine equality.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattrval\u003c/code\u003e - The possibly null value to remove from this attribute. If null, remove the attribute value that is null."
        ],
        "return": [
          "true if the value was removed; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clear",
      "comment": "Removes all values from this attribute.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeSyntaxDefinition",
      "comment": "Retrieves the syntax definition associated with the attribute. An attribute\u0027s syntax definition specifies the format of the attribute\u0027s value(s). Note that this is different from the attribute value\u0027s representation as a Java object. Syntax definition refers to the directory\u0027s notion of syntax. For example, even though a value might be a Java String object, its directory syntax might be \"Printable String\" or \"Telephone Number\". Or a value might be a byte array, and its directory syntax is \"JPEG\" or \"Certificate\". For example, if this attribute\u0027s syntax is \"JPEG\", this method would return the syntax definition for \"JPEG\". The information that you can retrieve from a syntax definition is directory-dependent. If an implementation does not support schemas, it should throw OperationNotSupportedException. If an implementation does support schemas, it should define this method to return the appropriate information.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - If getting the schema is not supported.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a naming exception occurs while getting the schema."
        ],
        "return": [
          "The attribute\u0027s syntax definition. Null if the implementation supports schemas but this particular attribute does not have any schema information."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeDefinition",
      "comment": "Retrieves the attribute\u0027s schema definition. An attribute\u0027s schema definition contains information such as whether the attribute is multivalued or single-valued, the matching rules to use when comparing the attribute\u0027s values. The information that you can retrieve from an attribute definition is directory-dependent. If an implementation does not support schemas, it should throw OperationNotSupportedException. If an implementation does support schemas, it should define this method to return the appropriate information.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - If getting the schema is not supported.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a naming exception occurs while getting the schema."
        ],
        "return": [
          "This attribute\u0027s schema definition. Null if the implementation supports schemas but this particular attribute does not have any schema information."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clone",
      "comment": "Makes a copy of the attribute. The copy contains the same attribute values as the original attribute: the attribute values are not themselves cloned. Changes to the copy will not affect the original and vice versa.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A non-null copy of the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOrdered",
      "comment": "Determines whether this attribute\u0027s values are ordered. If an attribute\u0027s values are ordered, duplicate values are allowed. If an attribute\u0027s values are unordered, they are presented in any order and there are no duplicate values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/Attribute.html#get(int)\"\u003e\u003ccode\u003eget(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/Attribute.html#remove(int)\"\u003e\u003ccode\u003eremove(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/Attribute.html#add(int,java.lang.Object)\"\u003e\u003ccode\u003eadd(int, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/Attribute.html#set(int,java.lang.Object)\"\u003e\u003ccode\u003eset(int, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if this attribute\u0027s values are ordered; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Retrieves the attribute value from the ordered list of attribute values. This method returns the value at the ix index of the list of attribute values. If the attribute values are unordered, this method returns the value that happens to be at that index.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eix\u003c/code\u003e - The index of the value in the ordered list of attribute values. \n\u003ccode\u003e0 \u0026lt;\u003d ix \u0026lt; size()\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a naming exception was encountered while retrieving the value.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eix\u003c/code\u003e is outside the specified range."
        ],
        "return": [
          "The possibly null attribute value at index \n\u003ccode\u003eix\u003c/code\u003e; null if the attribute value is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes an attribute value from the ordered list of attribute values. This method removes the value at the ix index of the list of attribute values. If the attribute values are unordered, this method removes the value that happens to be at that index. Values located at indices greater than ix are shifted up towards the front of the list (and their indices decremented by one).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eix\u003c/code\u003e - The index of the value to remove. \n\u003ccode\u003e0 \u0026lt;\u003d ix \u0026lt; size()\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eix\u003c/code\u003e is outside the specified range."
        ],
        "return": [
          "The possibly null attribute value at index \n\u003ccode\u003eix\u003c/code\u003e that was removed; null if the attribute value is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ix",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "attrVal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Adds an attribute value to the ordered list of attribute values. This method adds attrVal to the list of attribute values at index ix. Values located at indices at or greater than ix are shifted down towards the end of the list (and their indices incremented by one). If the attribute values are unordered and already have attrVal, IllegalStateException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eix\u003c/code\u003e - The index in the ordered list of attribute values to add the new value. \n\u003ccode\u003e0 \u0026lt;\u003d ix \u0026lt;\u003d size()\u003c/code\u003e.",
          "\u003ccode\u003eattrVal\u003c/code\u003e - The possibly null attribute value to add; if null, null is the value added."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eix\u003c/code\u003e is outside the specified range.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If the attribute values are unordered and \n\u003ccode\u003eattrVal\u003c/code\u003e is one of those values."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "ix",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "attrVal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "set",
      "comment": "Sets an attribute value in the ordered list of attribute values. This method sets the value at the ix index of the list of attribute values to be attrVal. The old value is removed. If the attribute values are unordered, this method sets the value that happens to be at that index to attrVal, unless attrVal is already one of the values. In that case, IllegalStateException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eix\u003c/code\u003e - The index of the value in the ordered list of attribute values. \n\u003ccode\u003e0 \u0026lt;\u003d ix \u0026lt; size()\u003c/code\u003e.",
          "\u003ccode\u003eattrVal\u003c/code\u003e - The possibly null attribute value to use. If null, \u0027null\u0027 replaces the old value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eix\u003c/code\u003e is outside the specified range.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eattrVal\u003c/code\u003e already exists and the attribute values are unordered."
        ],
        "return": [
          "The possibly null attribute value at index ix that was replaced. Null if the attribute value was null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.directory.Attribute",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/BasicAttribute.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eBasicAttribute\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}