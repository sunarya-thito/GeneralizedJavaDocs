{
  "packageName": "javax.naming.directory",
  "simpleName": "DirContext",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.naming.Context",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ADD_ATTRIBUTE",
      "comment": "This constant specifies to add an attribute with the specified values. If attribute does not exist, create the attribute. The resulting attribute has a union of the specified value set and the prior value set. Adding an attribute with no value will throw InvalidAttributeValueException if the attribute must have at least one value. For a single-valued attribute where that attribute already exists, throws AttributeInUseException. If attempting to add more than one value to a single-valued attribute, throws InvalidAttributeValueException. The value of this constant is 1.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/ModificationItem.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eModificationItem\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#modifyAttributes(javax.naming.Name,int,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003emodifyAttributes(javax.naming.Name, int, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.directory.DirContext.ADD_ATTRIBUTE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "REPLACE_ATTRIBUTE",
      "comment": "This constant specifies to replace an attribute with specified values. If attribute already exists, replaces all existing values with new specified values. If the attribute does not exist, creates it. If no value is specified, deletes all the values of the attribute. Removal of the last value will remove the attribute if the attribute is required to have at least one value. If attempting to add more than one value to a single-valued attribute, throws InvalidAttributeValueException. The value of this constant is 2.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/ModificationItem.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eModificationItem\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#modifyAttributes(javax.naming.Name,int,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003emodifyAttributes(javax.naming.Name, int, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.directory.DirContext.REPLACE_ATTRIBUTE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "REMOVE_ATTRIBUTE",
      "comment": "This constant specifies to delete the specified attribute values from the attribute. The resulting attribute has the set difference of its prior value set and the specified value set. If no values are specified, deletes the entire attribute. If the attribute does not exist, or if some or all members of the specified value set do not exist, this absence may be ignored and the operation succeeds, or a NamingException may be thrown to indicate the absence. Removal of the last value will remove the attribute if the attribute is required to have at least one value. The value of this constant is 3.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/ModificationItem.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eModificationItem\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#modifyAttributes(javax.naming.Name,int,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003emodifyAttributes(javax.naming.Name, int, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.directory.DirContext.REMOVE_ATTRIBUTE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.Attributes",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "Retrieves all of the attributes associated with a named object. See the class description regarding attribute models, attribute type names, and operational attributes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#getAttributes(java.lang.String)\"\u003e\u003ccode\u003egetAttributes(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#getAttributes(javax.naming.Name,java.lang.String%5B%5D)\"\u003e\u003ccode\u003egetAttributes(Name, String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object from which to retrieve attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the set of attributes associated with \n\u003ccode\u003ename\u003c/code\u003e. Returns an empty attribute set if name has no attributes; never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.Attributes",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "Retrieves all of the attributes associated with a named object. See getAttributes(Name) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object from which to retrieve attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the set of attributes associated with \n\u003ccode\u003ename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.Attributes",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "attrIds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "Retrieves selected attributes associated with a named object. See the class description regarding attribute models, attribute type names, and operational attributes. If the object does not have an attribute specified, the directory will ignore the nonexistent attribute and return those requested attributes that the object does have. A directory might return more attributes than was requested (see Attribute Type Names in the class description), but is not allowed to return arbitrary, unrelated attributes. See also Operational Attributes in the class description.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object from which to retrieve attributes",
          "\u003ccode\u003eattrIds\u003c/code\u003e - the identifiers of the attributes to retrieve. null indicates that all attributes should be retrieved; an empty array indicates that none should be retrieved."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the requested attributes; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.Attributes",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "attrIds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "Retrieves selected attributes associated with a named object. See getAttributes(Name, String[]) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the object from which to retrieve attributes",
          "\u003ccode\u003eattrIds\u003c/code\u003e - the identifiers of the attributes to retrieve. null indicates that all attributes should be retrieved; an empty array indicates that none should be retrieved."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the requested attributes; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mod_op"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "modifyAttributes",
      "comment": "Modifies the attributes associated with a named object. The order of the modifications is not specified. Where possible, the modifications are performed atomically.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#modifyAttributes(javax.naming.Name,javax.naming.directory.ModificationItem%5B%5D)\"\u003e\u003ccode\u003emodifyAttributes(Name, ModificationItem[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose attributes will be updated",
          "\u003ccode\u003emod_op\u003c/code\u003e - the modification operation, one of: \n\u003ccode\u003eADD_ATTRIBUTE\u003c/code\u003e, \n\u003ccode\u003eREPLACE_ATTRIBUTE\u003c/code\u003e, \n\u003ccode\u003eREMOVE_ATTRIBUTE\u003c/code\u003e.",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to be used for the modification; may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/AttributeModificationException.html\" title\u003d\"class in javax.naming.directory\"\u003eAttributeModificationException\u003c/a\u003e\u003c/code\u003e - if the modification cannot be completed successfully",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mod_op"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "modifyAttributes",
      "comment": "Modifies the attributes associated with a named object. See modifyAttributes(Name, int, Attributes) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose attributes will be updated",
          "\u003ccode\u003emod_op\u003c/code\u003e - the modification operation, one of: \n\u003ccode\u003eADD_ATTRIBUTE\u003c/code\u003e, \n\u003ccode\u003eREPLACE_ATTRIBUTE\u003c/code\u003e, \n\u003ccode\u003eREMOVE_ATTRIBUTE\u003c/code\u003e.",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to be used for the modification; may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/AttributeModificationException.html\" title\u003d\"class in javax.naming.directory\"\u003eAttributeModificationException\u003c/a\u003e\u003c/code\u003e - if the modification cannot be completed successfully",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.ModificationItem",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "mods"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "modifyAttributes",
      "comment": "Modifies the attributes associated with a named object using an ordered list of modifications. The modifications are performed in the order specified. Each modification specifies a modification operation code and an attribute on which to operate. Where possible, the modifications are performed atomically.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#modifyAttributes(javax.naming.Name,int,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003emodifyAttributes(Name, int, Attributes)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/ModificationItem.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eModificationItem\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose attributes will be updated",
          "\u003ccode\u003emods\u003c/code\u003e - an ordered sequence of modifications to be performed; may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/AttributeModificationException.html\" title\u003d\"class in javax.naming.directory\"\u003eAttributeModificationException\u003c/a\u003e\u003c/code\u003e - if the modifications cannot be completed successfully",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.ModificationItem",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "mods"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "modifyAttributes",
      "comment": "Modifies the attributes associated with a named object using an ordered list of modifications. See modifyAttributes(Name, ModificationItem[]) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose attributes will be updated",
          "\u003ccode\u003emods\u003c/code\u003e - an ordered sequence of modifications to be performed; may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/AttributeModificationException.html\" title\u003d\"class in javax.naming.directory\"\u003eAttributeModificationException\u003c/a\u003e\u003c/code\u003e - if the modifications cannot be completed successfully",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "bind",
      "comment": "Binds a name to an object, along with associated attributes. If attrs is null, the resulting binding will have the attributes associated with obj if obj is a DirContext, and no attributes otherwise. If attrs is non-null, the resulting binding will have attrs as its attributes; any attributes associated with obj are ignored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#bind(javax.naming.Name,java.lang.Object)\"\u003e\u003ccode\u003eContext.bind(Name, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#rebind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003erebind(Name, Object, Attributes)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to associate with the binding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if some \"mandatory\" attributes of the binding are not supplied",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "bind",
      "comment": "Binds a name to an object, along with associated attributes. See bind(Name, Object, Attributes) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to associate with the binding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if some \"mandatory\" attributes of the binding are not supplied",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rebind",
      "comment": "Binds a name to an object, along with associated attributes, overwriting any existing binding. If attrs is null and obj is a DirContext, the attributes from obj are used. If attrs is null and obj is not a DirContext, any existing attributes associated with the object already bound in the directory remain unchanged. If attrs is non-null, any existing attributes associated with the object already bound in the directory are removed and attrs is associated with the named object. If obj is a DirContext and attrs is non-null, the attributes of obj are ignored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#bind(javax.naming.Name,java.lang.Object)\"\u003e\u003ccode\u003eContext.bind(Name, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#bind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003ebind(Name, Object, Attributes)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to associate with the binding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if some \"mandatory\" attributes of the binding are not supplied",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rebind",
      "comment": "Binds a name to an object, along with associated attributes, overwriting any existing binding. See rebind(Name, Object, Attributes) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to associate with the binding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if some \"mandatory\" attributes of the binding are not supplied",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSubcontext",
      "comment": "Creates and binds a new context, along with associated attributes. This method creates a new subcontext with the given name, binds it in the target context (that named by all but terminal atomic component of the name), and associates the supplied attributes with the newly created object. All intermediate and target contexts must already exist. If attrs is null, this method is equivalent to Context.createSubcontext().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#createSubcontext(javax.naming.Name)\"\u003e\u003ccode\u003eContext.createSubcontext(Name)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to create; may not be empty",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to associate with the newly created context"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if the name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrs\u003c/code\u003e does not contain all the mandatory attributes required for creation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the newly created context"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSubcontext",
      "comment": "Creates and binds a new context, along with associated attributes. See createSubcontext(Name, Attributes) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to create; may not be empty",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes to associate with the newly created context"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if the name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrs\u003c/code\u003e does not contain all the mandatory attributes required for creation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the newly created context"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchema",
      "comment": "Retrieves the schema associated with the named object. The schema describes rules regarding the structure of the namespace and the attributes stored within it. The schema specifies what types of objects can be added to the directory and where they can be added; what mandatory and optional attributes an object can have. The range of support for schemas is directory-specific. This method returns the root of the schema information tree that is applicable to the named object. Several named objects (or even an entire directory) might share the same schema. Issues such as structure and contents of the schema tree, permission to modify to the contents of the schema tree, and the effect of such modifications on the directory are dependent on the underlying directory.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose schema is to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - if schema not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the schema associated with the context; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchema",
      "comment": "Retrieves the schema associated with the named object. See getSchema(Name) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose schema is to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - if schema not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the schema associated with the context; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchemaClassDefinition",
      "comment": "Retrieves a context containing the schema objects of the named object\u0027s class definitions. One category of information found in directory schemas is class definitions. An \"object class\" definition specifies the object\u0027s type and what attributes (mandatory and optional) the object must/can have. Note that the term \"object class\" being referred to here is in the directory sense rather than in the Java sense. For example, if the named object is a directory object of \"Person\" class, getSchemaClassDefinition() would return a DirContext representing the (directory\u0027s) object class definition of \"Person\". The information that can be retrieved from an object class definition is directory-dependent. Prior to JNDI 1.2, this method returned a single schema object representing the class definition of the named object. Since JNDI 1.2, this method returns a DirContext containing all of the named object\u0027s class definitions.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose object class definition is to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - if schema not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the \n\u003ccode\u003eDirContext\u003c/code\u003e containing the named object\u0027s class definitions; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.DirContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchemaClassDefinition",
      "comment": "Retrieves a context containing the schema objects of the named object\u0027s class definitions. See getSchemaClassDefinition(Name) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object whose object class definition is to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - if schema not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the \n\u003ccode\u003eDirContext\u003c/code\u003e containing the named object\u0027s class definitions; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "matchingAttributes"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "attributesToReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in a single context for objects that contain a specified set of attributes, and retrieves selected attributes. The search is performed using the default SearchControls settings. For an object to be selected, each attribute in matchingAttributes must match some attribute of the object. If matchingAttributes is empty or null, all objects in the target context are returned. An attribute A1 in matchingAttributes is considered to match an attribute A2 of an object if A1 and A2 have the same identifier, and each value of A1 is equal to some value of A2. This implies that the order of values is not significant, and that A2 may contain \"extra\" values not found in A1 without affecting the comparison. It also implies that if A1 has no values, then testing for a match is equivalent to testing for the presence of an attribute A2 with the same identifier. The precise definition of \"equality\" used in comparing attribute values is defined by the underlying directory service. It might use the Object.equals method, for example, or might use a schema to specify a different equality operation. For matching based on operations other than equality (such as substring comparison) use the version of the search method that takes a filter argument. When changes are made to this DirContext, the effect on enumerations returned by prior calls to this method is undefined. If the object does not have the attribute specified, the directory will ignore the nonexistent attribute and return the requested attributes that the object does have. A directory might return more attributes than was requested (see Attribute Type Names in the class description), but is not allowed to return arbitrary, unrelated attributes. See also Operational Attributes in the class description.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/SearchControls.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eSearchControls\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/SearchResult.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eSearchResult\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#search(javax.naming.Name,java.lang.String,java.lang.Object%5B%5D,javax.naming.directory.SearchControls)\"\u003e\u003ccode\u003esearch(Name, String, Object[], SearchControls)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to search",
          "\u003ccode\u003ematchingAttributes\u003c/code\u003e - the attributes to search for. If empty or null, all objects in the target context are returned.",
          "\u003ccode\u003eattributesToReturn\u003c/code\u003e - the attributes to return. null indicates that all attributes are to be returned; an empty array indicates that none are to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "a non-null enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003e objects. Each \n\u003ccode\u003eSearchResult\u003c/code\u003e contains the attributes identified by \n\u003ccode\u003eattributesToReturn\u003c/code\u003e and the name of the corresponding object, named relative to the context named by \n\u003ccode\u003ename\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "matchingAttributes"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "attributesToReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in a single context for objects that contain a specified set of attributes, and retrieves selected attributes. See search(Name, Attributes, String[]) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to search",
          "\u003ccode\u003ematchingAttributes\u003c/code\u003e - the attributes to search for",
          "\u003ccode\u003eattributesToReturn\u003c/code\u003e - the attributes to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "a non-null enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "matchingAttributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in a single context for objects that contain a specified set of attributes. This method returns all the attributes of such objects. It is equivalent to supplying null as the attributesToReturn parameter to the method search(Name, Attributes, String[]). See search(Name, Attributes, String[]) for a full description.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#search(javax.naming.Name,javax.naming.directory.Attributes,java.lang.String%5B%5D)\"\u003e\u003ccode\u003esearch(Name, Attributes, String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to search",
          "\u003ccode\u003ematchingAttributes\u003c/code\u003e - the attributes to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "matchingAttributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in a single context for objects that contain a specified set of attributes. See search(Name, Attributes) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to search",
          "\u003ccode\u003ematchingAttributes\u003c/code\u003e - the attributes to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.SearchControls",
            "type": "Class"
          },
          "field": {
            "name": "cons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in the named context or object for entries that satisfy the given search filter. Performs the search as specified by the search controls. The format and interpretation of filter follows RFC 2254 with the following interpretations for attr and value mentioned in the RFC. attr is the attribute\u0027s identifier. value is the string representation the attribute\u0027s value. The translation of this string representation into the attribute\u0027s value is directory-specific. For the assertion \"someCount\u003d127\", for example, attr is \"someCount\" and value is \"127\". The provider determines, based on the attribute ID (\"someCount\") (and possibly its schema), that the attribute\u0027s value is an integer. It then parses the string \"127\" appropriately. Any non-ASCII characters in the filter string should be represented by the appropriate Java (Unicode) characters, and not encoded as UTF-8 octets. Alternately, the \"backslash-hexcode\" notation described in RFC 2254 may be used. If the directory does not support a string representation of some or all of its attributes, the form of search that accepts filter arguments in the form of Objects can be used instead. The service provider for such a directory would then translate the filter arguments to its service-specific representation for filter evaluation. See search(Name, String, Object[], SearchControls). RFC 2254 defines certain operators for the filter, including substring matches, equality, approximate match, greater than, less than. These operators are mapped to operators with corresponding semantics in the underlying directory. For example, for the equals operator, suppose the directory has a matching rule defining \"equality\" of the attributes in the filter. This rule would be used for checking equality of the attributes specified in the filter with the attributes of objects in the directory. Similarly, if the directory has a matching rule for ordering, this rule would be used for making \"greater than\" and \"less than\" comparisons. Not all of the operators defined in RFC 2254 are applicable to all attributes. When an operator is not applicable, the exception InvalidSearchFilterException is thrown. The result is returned in an enumeration of SearchResults. Each SearchResult contains the name of the object and other information about the object (see SearchResult). The name is either relative to the target context of the search (which is named by the name parameter), or it is a URL string. If the target context is included in the enumeration (as is possible when cons specifies a search scope of SearchControls.OBJECT_SCOPE or SearchControls.SUBSTREE_SCOPE), its name is the empty string. The SearchResult may also contain attributes of the matching object if the cons argument specified that attributes be returned. If the object does not have a requested attribute, that nonexistent attribute will be ignored. Those requested attributes that the object does have will be returned. A directory might return more attributes than were requested (see Attribute Type Names in the class description) but is not allowed to return arbitrary, unrelated attributes. See also Operational Attributes in the class description.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#search(javax.naming.Name,java.lang.String,java.lang.Object%5B%5D,javax.naming.directory.SearchControls)\"\u003e\u003ccode\u003esearch(Name, String, Object[], SearchControls)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/SearchControls.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eSearchControls\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/SearchResult.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eSearchResult\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context or object to search",
          "\u003ccode\u003efilter\u003c/code\u003e - the filter expression to use for the search; may not be null",
          "\u003ccode\u003econs\u003c/code\u003e - the search controls that control the search. If null, the default search controls are used (equivalent to \n\u003ccode\u003e(new SearchControls())\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchFilterException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchFilterException\u003c/a\u003e\u003c/code\u003e - if the search filter specified is not supported or understood by the underlying directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchControlsException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchControlsException\u003c/a\u003e\u003c/code\u003e - if the search controls contain invalid settings",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003es of the objects that satisfy the filter; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.SearchControls",
            "type": "Class"
          },
          "field": {
            "name": "cons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in the named context or object for entries that satisfy the given search filter. Performs the search as specified by the search controls. See search(Name, String, SearchControls) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context or object to search",
          "\u003ccode\u003efilter\u003c/code\u003e - the filter expression to use for the search; may not be null",
          "\u003ccode\u003econs\u003c/code\u003e - the search controls that control the search. If null, the default search controls are used (equivalent to \n\u003ccode\u003e(new SearchControls())\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchFilterException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchFilterException\u003c/a\u003e\u003c/code\u003e - if the search filter specified is not supported or understood by the underlying directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchControlsException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchControlsException\u003c/a\u003e\u003c/code\u003e - if the search controls contain invalid settings",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003es for the objects that satisfy the filter."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filterExpr"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "filterArgs"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.SearchControls",
            "type": "Class"
          },
          "field": {
            "name": "cons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in the named context or object for entries that satisfy the given search filter. Performs the search as specified by the search controls. The interpretation of filterExpr is based on RFC 2254. It may additionally contain variables of the form {i} -- where i is an integer -- that refer to objects in the filterArgs array. The interpretation of filterExpr is otherwise identical to that of the filter parameter of the method search(Name, String, SearchControls). When a variable {i} appears in a search filter, it indicates that the filter argument filterArgs[i] is to be used in that place. Such variables may be used wherever an attr, value, or matchingrule production appears in the filter grammar of RFC 2254, section 4. When a string-valued filter argument is substituted for a variable, the filter is interpreted as if the string were given in place of the variable, with any characters having special significance within filters (such as \u0027*\u0027) having been escaped according to the rules of RFC 2254. For directories that do not use a string representation for some or all of their attributes, the filter argument corresponding to an attribute value may be of a type other than String. Directories that support unstructured binary-valued attributes, for example, should accept byte arrays as filter arguments. The interpretation (if any) of filter arguments of any other type is determined by the service provider for that directory, which maps the filter operations onto operations with corresponding semantics in the underlying directory. This method returns an enumeration of the results. Each element in the enumeration contains the name of the object and other information about the object (see SearchResult). The name is either relative to the target context of the search (which is named by the name parameter), or it is a URL string. If the target context is included in the enumeration (as is possible when cons specifies a search scope of SearchControls.OBJECT_SCOPE or SearchControls.SUBSTREE_SCOPE), its name is the empty string. The SearchResult may also contain attributes of the matching object if the cons argument specifies that attributes be returned. If the object does not have a requested attribute, that nonexistent attribute will be ignored. Those requested attributes that the object does have will be returned. A directory might return more attributes than were requested (see Attribute Type Names in the class description) but is not allowed to return arbitrary, unrelated attributes. If a search filter with invalid variable substitutions is provided to this method, the result is undefined. When changes are made to this DirContext, the effect on enumerations returned by prior calls to this method is undefined. See also Operational Attributes in the class description.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#search(javax.naming.Name,javax.naming.directory.Attributes,java.lang.String%5B%5D)\"\u003e\u003ccode\u003esearch(Name, Attributes, String[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/MessageFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eMessageFormat\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context or object to search",
          "\u003ccode\u003efilterExpr\u003c/code\u003e - the filter expression to use for the search. The expression may contain variables of the form \"\n\u003ccode\u003e{i}\u003c/code\u003e\" where \n\u003ccode\u003ei\u003c/code\u003e is a nonnegative integer. May not be null.",
          "\u003ccode\u003efilterArgs\u003c/code\u003e - the array of arguments to substitute for the variables in \n\u003ccode\u003efilterExpr\u003c/code\u003e. The value of \n\u003ccode\u003efilterArgs[i]\u003c/code\u003e will replace each occurrence of \"\n\u003ccode\u003e{i}\u003c/code\u003e\". If null, equivalent to an empty array.",
          "\u003ccode\u003econs\u003c/code\u003e - the search controls that control the search. If null, the default search controls are used (equivalent to \n\u003ccode\u003e(new SearchControls())\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilterExpr\u003c/code\u003e contains \n\u003ccode\u003e{i}\u003c/code\u003e expressions where \n\u003ccode\u003ei\u003c/code\u003e is outside the bounds of the array \n\u003ccode\u003efilterArgs\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchControlsException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchControlsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econs\u003c/code\u003e contains invalid settings",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchFilterException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchFilterException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilterExpr\u003c/code\u003e with \n\u003ccode\u003efilterArgs\u003c/code\u003e represents an invalid search filter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003es of the objects that satisfy the filter; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.directory.SearchResult",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filterExpr"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "filterArgs"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.SearchControls",
            "type": "Class"
          },
          "field": {
            "name": "cons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "search",
      "comment": "Searches in the named context or object for entries that satisfy the given search filter. Performs the search as specified by the search controls. See search(Name, String, Object[], SearchControls) for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context or object to search",
          "\u003ccode\u003efilterExpr\u003c/code\u003e - the filter expression to use for the search. The expression may contain variables of the form \"\n\u003ccode\u003e{i}\u003c/code\u003e\" where \n\u003ccode\u003ei\u003c/code\u003e is a nonnegative integer. May not be null.",
          "\u003ccode\u003efilterArgs\u003c/code\u003e - the array of arguments to substitute for the variables in \n\u003ccode\u003efilterExpr\u003c/code\u003e. The value of \n\u003ccode\u003efilterArgs[i]\u003c/code\u003e will replace each occurrence of \"\n\u003ccode\u003e{i}\u003c/code\u003e\". If null, equivalent to an empty array.",
          "\u003ccode\u003econs\u003c/code\u003e - the search controls that control the search. If null, the default search controls are used (equivalent to \n\u003ccode\u003e(new SearchControls())\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilterExpr\u003c/code\u003e contains \n\u003ccode\u003e{i}\u003c/code\u003e expressions where \n\u003ccode\u003ei\u003c/code\u003e is outside the bounds of the array \n\u003ccode\u003efilterArgs\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchControlsException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchControlsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econs\u003c/code\u003e contains invalid settings",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidSearchFilterException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidSearchFilterException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilterExpr\u003c/code\u003e with \n\u003ccode\u003efilterArgs\u003c/code\u003e represents an invalid search filter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of \n\u003ccode\u003eSearchResult\u003c/code\u003es of the objects that satisfy the filter; never null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.directory.DirContext",
  "comment": "The directory service interface, containing methods for examining and updating attributes associated with objects, and for searching the directory. \n\u003ch2\u003eNames\u003c/h2\u003e Each name passed as an argument to a \n\u003ccode\u003eDirContext\u003c/code\u003e method is relative to that context. The empty name is used to name the context itself. The name parameter may never be null. \n\u003cp\u003e Most of the methods have overloaded versions with one taking a \u003ccode\u003eName\u003c/code\u003e parameter and one taking a \u003ccode\u003eString\u003c/code\u003e. These overloaded versions are equivalent in that if the \u003ccode\u003eName\u003c/code\u003e and \u003ccode\u003eString\u003c/code\u003e parameters are just different representations of the same name, then the overloaded versions of the same methods behave the same. In the method descriptions below, only one version is documented. The second version instead has a link to the first: the same documentation applies to both. \u003c/p\u003e\n\u003cp\u003e See \u003ccode\u003eContext\u003c/code\u003e for a discussion on the interpretation of the name argument to the \u003ccode\u003eContext\u003c/code\u003e methods. These same rules apply to the name argument to the \u003ccode\u003eDirContext\u003c/code\u003e methods. \u003c/p\u003e\n\u003ch2\u003eAttribute Models\u003c/h2\u003e There are two basic models of what attributes should be associated with. First, attributes may be directly associated with a DirContext object. In this model, an attribute operation on the named object is roughly equivalent to a lookup on the name (which returns the DirContext object), followed by the attribute operation invoked on the DirContext object in which the caller supplies an empty name. The attributes can be viewed as being stored along with the object (note that this does not imply that the implementation must do so). \n\u003cp\u003e The second model is that attributes are associated with a name (typically an atomic name) in a DirContext. In this model, an attribute operation on the named object is roughly equivalent to a lookup on the name of the parent DirContext of the named object, followed by the attribute operation invoked on the parent in which the caller supplies the terminal atomic name. The attributes can be viewed as being stored in the parent DirContext (again, this does not imply that the implementation must do so). Objects that are not DirContexts can have attributes, as long as their parents are DirContexts. \u003c/p\u003e\n\u003cp\u003e JNDI support both of these models. It is up to the individual service providers to decide where to \"store\" attributes. JNDI clients are safest when they do not make assumptions about whether an object\u0027s attributes are stored as part of the object, or stored within the parent object and associated with the object\u0027s name. \u003c/p\u003e\n\u003ch2\u003eAttribute Type Names\u003c/h2\u003e In the \n\u003ccode\u003egetAttributes()\u003c/code\u003e and \n\u003ccode\u003esearch()\u003c/code\u003e methods, you can supply the attributes to return by supplying a list of attribute names (strings). The attributes that you get back might not have the same names as the attribute names you have specified. This is because some directories support features that cause them to return other attributes. Such features include attribute subclassing, attribute name synonyms, and attribute language codes. \n\u003cp\u003e In attribute subclassing, attributes are defined in a class hierarchy. In some directories, for example, the \"name\" attribute might be the superclass of all name-related attributes, including \"commonName\" and \"surName\". Asking for the \"name\" attribute might return both the \"commonName\" and \"surName\" attributes. \u003c/p\u003e\n\u003cp\u003e With attribute type synonyms, a directory can assign multiple names to the same attribute. For example, \"cn\" and \"commonName\" might both refer to the same attribute. Asking for \"cn\" might return the \"commonName\" attribute. \u003c/p\u003e\n\u003cp\u003e Some directories support the language codes for attributes. Asking such a directory for the \"description\" attribute, for example, might return all of the following attributes: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003edescription \u003c/li\u003e\n \u003cli\u003edescription;lang-en \u003c/li\u003e\n \u003cli\u003edescription;lang-de \u003c/li\u003e\n \u003cli\u003edescription;lang-fr \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eOperational Attributes\u003c/h2\u003e \n\u003cp\u003e Some directories have the notion of \"operational attributes\" which are attributes associated with a directory object for administrative purposes. An example of operational attributes is the access control list for an object. \u003c/p\u003e\n\u003cp\u003e In the \u003ccode\u003egetAttributes()\u003c/code\u003e and \u003ccode\u003esearch()\u003c/code\u003e methods, you can specify that all attributes associated with the requested objects be returned by supply \u003ccode\u003enull\u003c/code\u003e as the list of attributes to return. The attributes returned do \u003cem\u003enot\u003c/em\u003e include operational attributes. In order to retrieve operational attributes, you must name them explicitly. \u003c/p\u003e\n\u003ch2\u003eNamed Context\u003c/h2\u003e \n\u003cp\u003e There are certain methods in which the name must resolve to a context (for example, when searching a single level context). The documentation of such methods use the term \u003cem\u003enamed context\u003c/em\u003e to describe their name parameter. For these methods, if the named object is not a DirContext, \u003ccode\u003eNotContextException\u003c/code\u003e is thrown. Aside from these methods, there is no requirement that the \u003cem\u003enamed object\u003c/em\u003e be a DirContext. \u003c/p\u003e\n\u003ch2\u003eParameters\u003c/h2\u003e \n\u003cp\u003e An \u003ccode\u003eAttributes\u003c/code\u003e, \u003ccode\u003eSearchControls\u003c/code\u003e, or array object passed as a parameter to any method will not be modified by the service provider. The service provider may keep a reference to it for the duration of the operation, including any enumeration of the method\u0027s results and the processing of any referrals generated. The caller should not modify the object during this time. An \u003ccode\u003eAttributes\u003c/code\u003e object returned by any method is owned by the caller. The caller may subsequently modify it; the service provider will not. \u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e \n\u003cp\u003e All the methods in this interface can throw a NamingException or any of its subclasses. See NamingException and their subclasses for details on each exception.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html\" title\u003d\"interface in javax.naming\"\u003e\u003ccode\u003eContext\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}