{
  "packageName": "javax.naming.spi",
  "simpleName": "DirStateFactory",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.naming.spi.StateFactory",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.naming.spi.DirStateFactory$Result",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.naming.Context",
            "type": "Class"
          },
          "field": {
            "name": "nameCtx"
          }
        },
        {
          "type": {
            "name": "java.util.Hashtable",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "environment"
          }
        },
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "inAttrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStateToBind",
      "comment": "Retrieves the state of an object for binding given the object and attributes to be transformed. DirectoryManager.getStateToBind() successively loads in state factories. If a factory implements DirStateFactory, DirectoryManager invokes this method; otherwise, it invokes StateFactory.getStateToBind(). It does this until a factory produces a non-null answer. When an exception is thrown by a factory, the exception is passed on to the caller of DirectoryManager.getStateToBind(). The search for other factories that may produce a non-null answer is halted. A factory should only throw an exception if it is sure that it is the only intended factory and that no other factories should be tried. If this factory cannot create an object using the arguments supplied, it should return null. The name and nameCtx parameters may optionally be used to specify the name of the object being created. See the description of \"Name and Context Parameters\" in ObjectFactory.getObjectInstance() for details. If a factory uses nameCtx it should synchronize its use against concurrent access, since context implementations are not guaranteed to be thread-safe. The name, inAttrs, and environment parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies. The object returned by this method is owned by the caller. The implementation will not subsequently modify it. It will contain either a new Attributes object that is likewise owned by the caller, or a reference to the original inAttrs parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/DirectoryManager.html#getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003eDirectoryManager.getStateToBind(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable\u0026lt;?, ?\u0026gt;, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - A possibly null object whose state is to be retrieved.",
          "\u003ccode\u003ename\u003c/code\u003e - The name of this object relative to \n\u003ccode\u003enameCtx\u003c/code\u003e, or null if no name is specified.",
          "\u003ccode\u003enameCtx\u003c/code\u003e - The context relative to which the \n\u003ccode\u003ename\u003c/code\u003e parameter is specified, or null if \n\u003ccode\u003ename\u003c/code\u003e is relative to the default initial context.",
          "\u003ccode\u003eenvironment\u003c/code\u003e - The possibly null environment to be used in the creation of the object\u0027s state.",
          "\u003ccode\u003einAttrs\u003c/code\u003e - The possibly null attributes to be bound with the object. The factory must not modify \n\u003ccode\u003einAttrs\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If this factory encountered an exception while attempting to get the object\u0027s state, and no other factories are to be tried."
        ],
        "return": [
          "A \n\u003ccode\u003eResult\u003c/code\u003e containing the object\u0027s state for binding and the corresponding attributes to be bound; null if the object don\u0027t use this factory."
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.naming.spi.DirStateFactory$Result"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.spi.DirStateFactory",
  "comment": "This interface represents a factory for obtaining the state of an object and corresponding attributes for binding. \n\u003cp\u003e The JNDI framework allows for object implementations to be loaded in dynamically via \u003ccode\u003eobject factories\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eDirStateFactory\u003c/code\u003e extends \u003ccode\u003eStateFactory\u003c/code\u003e by allowing an \u003ccode\u003eAttributes\u003c/code\u003e instance to be supplied to and be returned by the \u003ccode\u003egetStateToBind()\u003c/code\u003e method. \u003ccode\u003eDirStateFactory\u003c/code\u003e implementations are intended to be used by \u003ccode\u003eDirContext\u003c/code\u003e service providers. When a caller binds an object using \u003ccode\u003eDirContext.bind()\u003c/code\u003e, he might also specify a set of attributes to be bound with the object. The object and attributes to be bound are passed to the \u003ccode\u003egetStateToBind()\u003c/code\u003e method of a factory. If the factory processes the object and attributes, it returns a corresponding pair of object and attributes to be bound. If the factory does not process the object, it must return null. \u003c/p\u003e\n\u003cp\u003e For example, a caller might bind a printer object with some printer-related attributes. \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e ctx.rebind(\"inky\", printer, printerAttrs);\n\u003c/pre\u003e\n\u003c/blockquote\u003e An LDAP service provider for \n\u003ccode\u003ectx\u003c/code\u003e uses a \n\u003ccode\u003eDirStateFactory\u003c/code\u003e (indirectly via \n\u003ccode\u003eDirectoryManager.getStateToBind()\u003c/code\u003e) and gives it \n\u003ccode\u003eprinter\u003c/code\u003e and \n\u003ccode\u003eprinterAttrs\u003c/code\u003e. A factory for an LDAP directory might turn \n\u003ccode\u003eprinter\u003c/code\u003e into a set of attributes and merge that with \n\u003ccode\u003eprinterAttrs\u003c/code\u003e. The service provider then uses the resulting attributes to create an LDAP entry and updates the directory. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Since \u003ccode\u003eDirStateFactory\u003c/code\u003e extends \u003ccode\u003eStateFactory\u003c/code\u003e, it has two \u003ccode\u003egetStateToBind()\u003c/code\u003e methods, where one differs from the other by the attributes argument. \u003ccode\u003eDirectoryManager.getStateToBind()\u003c/code\u003e will only use the form that accepts the attributes argument, while \u003ccode\u003eNamingManager.getStateToBind()\u003c/code\u003e will only use the form that does not accept the attributes argument. \u003c/p\u003e\n\u003cp\u003e Either form of the \u003ccode\u003egetStateToBind()\u003c/code\u003e method of a DirStateFactory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/DirectoryManager.html#getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003eDirectoryManager.getStateToBind(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable\u0026lt;?, ?\u0026gt;, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/DirObjectFactory.html\" title\u003d\"interface in javax.naming.spi\"\u003e\u003ccode\u003eDirObjectFactory\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}