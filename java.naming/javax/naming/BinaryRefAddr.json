{
  "packageName": "javax.naming",
  "simpleName": "BinaryRefAddr",
  "moduleName": "java.naming",
  "type": "CLASS",
  "superClass": {
    "name": "javax.naming.RefAddr",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContent",
      "comment": "Retrieves the contents of this address as an Object. The result is a byte array. Changes to this array will affect this BinaryRefAddr\u0027s contents. Programs are recommended against changing this array\u0027s contents and to lock the buffer if they need to change it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html#getContent()\"\u003egetContent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html\" title\u003d\"class in javax.naming\"\u003eRefAddr\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The non-null buffer containing this address\u0027s contents."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Determines whether obj is equal to this address. It is equal if it contains the same address type and their contents are byte-wise equivalent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html#getContent()\"\u003e\u003ccode\u003eRefAddr.getContent()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html#getType()\"\u003e\u003ccode\u003eRefAddr.getType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html\" title\u003d\"class in javax.naming\"\u003eRefAddr\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The possibly null object to check."
        ],
        "return": [
          "true if the object is equal; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Computes the hash code of this address using its address type and contents. Two BinaryRefAddrs have the same hash code if they have the same address type and the same contents. It is also possible for different BinaryRefAddrs to have the same hash code.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html\" title\u003d\"class in javax.naming\"\u003eRefAddr\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The hash code of this address as an int."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Generates the string representation of this address. The string consists of the address\u0027s type and contents with labels. The first 32 bytes of contents are displayed (in hexadecimal). If there are more than 32 bytes, \"...\" is used to indicate more. This string is meant to used for debugging purposes and not meant to be interpreted programmatically.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html\" title\u003d\"class in javax.naming\"\u003eRefAddr\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The non-null string representation of this address."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "addrType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "src",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new instance of BinaryRefAddr using its address type and a byte array for contents.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddrType\u003c/code\u003e - A non-null string describing the type of the address.",
          "\u003ccode\u003esrc\u003c/code\u003e - The non-null contents of the address as a byte array. The contents of src is copied into the new BinaryRefAddr."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "addrType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "src",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new instance of BinaryRefAddr using its address type and a region of a byte array for contents.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddrType\u003c/code\u003e - A non-null string describing the type of the address.",
          "\u003ccode\u003esrc\u003c/code\u003e - The non-null contents of the address as a byte array. The contents of src is copied into the new BinaryRefAddr.",
          "\u003ccode\u003eoffset\u003c/code\u003e - The starting index in src to get the bytes. \n\u003ccode\u003e0 \u0026lt;\u003d offset \u0026lt;\u003d src.length\u003c/code\u003e.",
          "\u003ccode\u003ecount\u003c/code\u003e - The number of bytes to extract from src. \n\u003ccode\u003e0 \u0026lt;\u003d count \u0026lt;\u003d src.length-offset\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.naming.BinaryRefAddr",
  "comment": "This class represents the binary form of the address of a communications end-point. \n\u003cp\u003e A BinaryRefAddr consists of a type that describes the communication mechanism and an opaque buffer containing the address description specific to that communication mechanism. The format and interpretation of the address type and the contents of the opaque buffer are based on the agreement of three parties: the client that uses the address, the object/server that can be reached using the address, and the administrator or program that creates the address. \u003c/p\u003e\n\u003cp\u003e An example of a binary reference address is an BER X.500 presentation address. Another example of a binary reference address is a serialized form of a service\u0027s object handle. \u003c/p\u003e\n\u003cp\u003e A binary reference address is immutable in the sense that its fields once created, cannot be replaced. However, it is possible to access the byte array used to hold the opaque buffer. Programs are strongly recommended against changing this byte array. Changes to this byte array need to be explicitly synchronized.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/RefAddr.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eRefAddr\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/StringRefAddr.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eStringRefAddr\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.naming.BinaryRefAddr\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}