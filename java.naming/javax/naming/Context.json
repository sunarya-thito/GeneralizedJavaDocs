{
  "packageName": "javax.naming",
  "simpleName": "Context",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "INITIAL_CONTEXT_FACTORY",
      "comment": "Constant that holds the name of the environment property for specifying the initial context factory to use. The value of the property should be the fully qualified class name of the factory class that will create an initial context. This property may be specified in the environment parameter passed to the initial context constructor, a system property, or an application resource file. If it is not specified in any of these sources, NoInitialContextException is thrown when an initial context is required to complete an operation. The value of this constant is \"java.naming.factory.initial\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InitialContext.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eInitialContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InitialDirContext.html\" title\u003d\"class in javax.naming.directory\"\u003e\u003ccode\u003eInitialDirContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/NamingManager.html#getInitialContext(java.util.Hashtable)\"\u003e\u003ccode\u003eNamingManager.getInitialContext(java.util.Hashtable\u0026lt;?, ?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/InitialContextFactory.html\" title\u003d\"interface in javax.naming.spi\"\u003e\u003ccode\u003eInitialContextFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NoInitialContextException.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eNoInitialContextException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.INITIAL_CONTEXT_FACTORY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "OBJECT_FACTORIES",
      "comment": "Constant that holds the name of the environment property for specifying the list of object factories to use. The value of the property should be a colon-separated list of the fully qualified class names of factory classes that will create an object given information about the object. This property may be specified in the environment, a system property, or one or more resource files. The value of this constant is \"java.naming.factory.object\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/NamingManager.html#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)\"\u003e\u003ccode\u003eNamingManager.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable\u0026lt;?, ?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/ObjectFactory.html\" title\u003d\"interface in javax.naming.spi\"\u003e\u003ccode\u003eObjectFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.OBJECT_FACTORIES\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "STATE_FACTORIES",
      "comment": "Constant that holds the name of the environment property for specifying the list of state factories to use. The value of the property should be a colon-separated list of the fully qualified class names of state factory classes that will be used to get an object\u0027s state given the object itself. This property may be specified in the environment, a system property, or one or more resource files. The value of this constant is \"java.naming.factory.state\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/NamingManager.html#getStateToBind(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)\"\u003e\u003ccode\u003eNamingManager.getStateToBind(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable\u0026lt;?, ?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/StateFactory.html\" title\u003d\"interface in javax.naming.spi\"\u003e\u003ccode\u003eStateFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.STATE_FACTORIES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "URL_PKG_PREFIXES",
      "comment": "Constant that holds the name of the environment property for specifying the list of package prefixes to use when loading in URL context factories. The value of the property should be a colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory. This property may be specified in the environment, a system property, or one or more resource files. The prefix com.sun.jndi.url is always appended to the possibly empty list of package prefixes. The value of this constant is \"java.naming.factory.url.pkgs\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/NamingManager.html#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)\"\u003e\u003ccode\u003eNamingManager.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable\u0026lt;?, ?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/NamingManager.html#getURLContext(java.lang.String,java.util.Hashtable)\"\u003e\u003ccode\u003eNamingManager.getURLContext(java.lang.String, java.util.Hashtable\u0026lt;?, ?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/spi/ObjectFactory.html\" title\u003d\"interface in javax.naming.spi\"\u003e\u003ccode\u003eObjectFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.URL_PKG_PREFIXES\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "PROVIDER_URL",
      "comment": "Constant that holds the name of the environment property for specifying configuration information for the service provider to use. The value of the property should contain a URL string (e.g. \"ldap://somehost:389\"). This property may be specified in the environment, a system property, or a resource file. If it is not specified in any of these sources, the default configuration is determined by the service provider. The value of this constant is \"java.naming.provider.url\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.PROVIDER_URL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DNS_URL",
      "comment": "Constant that holds the name of the environment property for specifying the DNS host and domain names to use for the JNDI URL context (for example, \"dns://somehost/wiz.com\"). This property may be specified in the environment, a system property, or a resource file. If it is not specified in any of these sources and the program attempts to use a JNDI URL containing a DNS name, a ConfigurationException will be thrown. The value of this constant is \"java.naming.dns.url\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.DNS_URL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "AUTHORITATIVE",
      "comment": "Constant that holds the name of the environment property for specifying the authoritativeness of the service requested. If the value of the property is the string \"true\", it means that the access is to the most authoritative source (i.e. bypass any cache or replicas). If the value is anything else, the source need not be (but may be) authoritative. If unspecified, the value defaults to \"false\". The value of this constant is \"java.naming.authoritative\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.AUTHORITATIVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "BATCHSIZE",
      "comment": "Constant that holds the name of the environment property for specifying the batch size to use when returning data via the service\u0027s protocol. This is a hint to the provider to return the results of operations in batches of the specified size, so the provider can optimize its performance and usage of resources. The value of the property is the string representation of an integer. If unspecified, the batch size is determined by the service provider. The value of this constant is \"java.naming.batchsize\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.BATCHSIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "REFERRAL",
      "comment": "Constant that holds the name of the environment property for specifying how referrals encountered by the service provider are to be processed. The value of the property is one of the following strings: \"follow\" follow referrals automatically \"ignore\" ignore referrals \"throw\" throw ReferralException when a referral is encountered. If this property is not specified, the default is determined by the provider. The value of this constant is \"java.naming.referral\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.REFERRAL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SECURITY_PROTOCOL",
      "comment": "Constant that holds the name of the environment property for specifying the security protocol to use. Its value is a string determined by the service provider (e.g. \"ssl\"). If this property is unspecified, the behaviour is determined by the service provider. The value of this constant is \"java.naming.security.protocol\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.SECURITY_PROTOCOL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SECURITY_AUTHENTICATION",
      "comment": "Constant that holds the name of the environment property for specifying the security level to use. Its value is one of the following strings: \"none\", \"simple\", \"strong\". If this property is unspecified, the behaviour is determined by the service provider. The value of this constant is \"java.naming.security.authentication\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.SECURITY_AUTHENTICATION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SECURITY_PRINCIPAL",
      "comment": "Constant that holds the name of the environment property for specifying the identity of the principal for authenticating the caller to the service. The format of the principal depends on the authentication scheme. If this property is unspecified, the behaviour is determined by the service provider. The value of this constant is \"java.naming.security.principal\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.SECURITY_PRINCIPAL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SECURITY_CREDENTIALS",
      "comment": "Constant that holds the name of the environment property for specifying the credentials of the principal for authenticating the caller to the service. The value of the property depends on the authentication scheme. For example, it could be a hashed password, clear-text password, key, certificate, and so on. If this property is unspecified, the behaviour is determined by the service provider. The value of this constant is \"java.naming.security.credentials\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.SECURITY_CREDENTIALS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LANGUAGE",
      "comment": "Constant that holds the name of the environment property for specifying the preferred language to use with the service. The value of the property is a colon-separated list of language tags as defined in RFC 1766. If this property is unspecified, the language preference is determined by the service provider. The value of this constant is \"java.naming.language\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.LANGUAGE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "APPLET",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Context.APPLET\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lookup",
      "comment": "Retrieves the named object. If name is empty, returns a new instance of this context (which represents the same naming context as this context, but its environment may be modified independently and it may be accessed concurrently).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#lookup(java.lang.String)\"\u003e\u003ccode\u003elookup(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#lookupLink(javax.naming.Name)\"\u003e\u003ccode\u003elookupLink(Name)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the object bound to \n\u003ccode\u003ename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lookup",
      "comment": "Retrieves the named object. See lookup(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the object bound to \n\u003ccode\u003ename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "bind",
      "comment": "Binds a name to an object. All intermediate contexts and the target context (that named by all but terminal atomic component of the name) must already exist.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#bind(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003ebind(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#rebind(javax.naming.Name,java.lang.Object)\"\u003e\u003ccode\u003erebind(Name, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#bind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003eDirContext.bind(Name, Object, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if object did not supply all mandatory attributes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "bind",
      "comment": "Binds a name to an object. See bind(Name, Object) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if object did not supply all mandatory attributes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rebind",
      "comment": "Binds a name to an object, overwriting any existing binding. All intermediate contexts and the target context (that named by all but terminal atomic component of the name) must already exist. If the object is a DirContext, any existing attributes associated with the name are replaced with those of the object. Otherwise, any existing attributes associated with the name remain unchanged.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#rebind(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003erebind(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#bind(javax.naming.Name,java.lang.Object)\"\u003e\u003ccode\u003ebind(Name, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#rebind(javax.naming.Name,java.lang.Object,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003eDirContext.rebind(Name, Object, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html\" title\u003d\"interface in javax.naming.directory\"\u003e\u003ccode\u003eDirContext\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if object did not supply all mandatory attributes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rebind",
      "comment": "Binds a name to an object, overwriting any existing binding. See rebind(Name, Object) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to bind; may not be empty",
          "\u003ccode\u003eobj\u003c/code\u003e - the object to bind; possibly null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if object did not supply all mandatory attributes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unbind",
      "comment": "Unbinds the named object. Removes the terminal atomic name in name from the target context--that named by all but the terminal atomic part of name. This method is idempotent. It succeeds even if the terminal atomic name is not bound in the target context, but throws NameNotFoundException if any of the intermediate contexts do not exist. Any attributes associated with the name are removed. Intermediate contexts are not changed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#unbind(java.lang.String)\"\u003e\u003ccode\u003eunbind(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to unbind; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameNotFoundException.html\" title\u003d\"class in javax.naming\"\u003eNameNotFoundException\u003c/a\u003e\u003c/code\u003e - if an intermediate context does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unbind",
      "comment": "Unbinds the named object. See unbind(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name to unbind; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameNotFoundException.html\" title\u003d\"class in javax.naming\"\u003eNameNotFoundException\u003c/a\u003e\u003c/code\u003e - if an intermediate context does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rename",
      "comment": "Binds a new name to the object bound to an old name, and unbinds the old name. Both names are relative to this context. Any attributes associated with the old name become associated with the new name. Intermediate contexts of the old name are not changed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#rename(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003erename(String, String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#bind(javax.naming.Name,java.lang.Object)\"\u003e\u003ccode\u003ebind(Name, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#rebind(javax.naming.Name,java.lang.Object)\"\u003e\u003ccode\u003erebind(Name, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoldName\u003c/code\u003e - the name of the existing binding; may not be empty",
          "\u003ccode\u003enewName\u003c/code\u003e - the name of the new binding; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewName\u003c/code\u003e is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rename",
      "comment": "Binds a new name to the object bound to an old name, and unbinds the old name. See rename(Name, Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoldName\u003c/code\u003e - the name of the existing binding; may not be empty",
          "\u003ccode\u003enewName\u003c/code\u003e - the name of the new binding; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewName\u003c/code\u003e is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.NameClassPair",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "list",
      "comment": "Enumerates the names bound in the named context, along with the class names of objects bound to them. The contents of any subcontexts are not included. If a binding is added to or removed from this context, its effect on an enumeration previously returned is undefined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#list(java.lang.String)\"\u003e\u003ccode\u003elist(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#listBindings(javax.naming.Name)\"\u003e\u003ccode\u003elistBindings(Name)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameClassPair.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eNameClassPair\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of the names and class names of the bindings in this context. Each element of the enumeration is of type \n\u003ccode\u003eNameClassPair\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.NameClassPair",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "list",
      "comment": "Enumerates the names bound in the named context, along with the class names of objects bound to them. See list(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of the names and class names of the bindings in this context. Each element of the enumeration is of type \n\u003ccode\u003eNameClassPair\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.Binding",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "listBindings",
      "comment": "Enumerates the names bound in the named context, along with the objects bound to them. The contents of any subcontexts are not included. If a binding is added to or removed from this context, its effect on an enumeration previously returned is undefined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#listBindings(java.lang.String)\"\u003e\u003ccode\u003elistBindings(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#list(javax.naming.Name)\"\u003e\u003ccode\u003elist(Name)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Binding.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eBinding\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of the bindings in this context. Each element of the enumeration is of type \n\u003ccode\u003eBinding\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NamingEnumeration",
        "parameters": [
          {
            "name": "javax.naming.Binding",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "listBindings",
      "comment": "Enumerates the names bound in the named context, along with the objects bound to them. See listBindings(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "an enumeration of the bindings in this context. Each element of the enumeration is of type \n\u003ccode\u003eBinding\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "destroySubcontext",
      "comment": "Destroys the named context and removes it from the namespace. Any attributes associated with the name are also removed. Intermediate contexts are not destroyed. This method is idempotent. It succeeds even if the terminal atomic name is not bound in the target context, but throws NameNotFoundException if any of the intermediate contexts do not exist. In a federated naming system, a context from one naming system may be bound to a name in another. One can subsequently look up and perform operations on the foreign context using a composite name. However, an attempt destroy the context using this composite name will fail with NotContextException, because the foreign context is not a \"subcontext\" of the context in which it is bound. Instead, use unbind() to remove the binding of the foreign context. Destroying the foreign context requires that the destroySubcontext() be performed on a context from the foreign context\u0027s \"native\" naming system.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#destroySubcontext(java.lang.String)\"\u003e\u003ccode\u003edestroySubcontext(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to be destroyed; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameNotFoundException.html\" title\u003d\"class in javax.naming\"\u003eNameNotFoundException\u003c/a\u003e\u003c/code\u003e - if an intermediate context does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NotContextException.html\" title\u003d\"class in javax.naming\"\u003eNotContextException\u003c/a\u003e\u003c/code\u003e - if the name is bound but does not name a context, or does not name a context of the appropriate type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ContextNotEmptyException.html\" title\u003d\"class in javax.naming\"\u003eContextNotEmptyException\u003c/a\u003e\u003c/code\u003e - if the named context is not empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "destroySubcontext",
      "comment": "Destroys the named context and removes it from the namespace. See destroySubcontext(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to be destroyed; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameNotFoundException.html\" title\u003d\"class in javax.naming\"\u003eNameNotFoundException\u003c/a\u003e\u003c/code\u003e - if an intermediate context does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NotContextException.html\" title\u003d\"class in javax.naming\"\u003eNotContextException\u003c/a\u003e\u003c/code\u003e - if the name is bound but does not name a context, or does not name a context of the appropriate type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ContextNotEmptyException.html\" title\u003d\"class in javax.naming\"\u003eContextNotEmptyException\u003c/a\u003e\u003c/code\u003e - if the named context is not empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Context",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSubcontext",
      "comment": "Creates and binds a new context. Creates a new context with the given name and binds it in the target context (that named by all but terminal atomic component of the name). All intermediate contexts and the target context must already exist.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#createSubcontext(java.lang.String)\"\u003e\u003ccode\u003ecreateSubcontext(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/DirContext.html#createSubcontext(javax.naming.Name,javax.naming.directory.Attributes)\"\u003e\u003ccode\u003eDirContext.createSubcontext(javax.naming.Name, javax.naming.directory.Attributes)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to create; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if creation of the subcontext requires specification of mandatory attributes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the newly created context"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Context",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSubcontext",
      "comment": "Creates and binds a new context. See createSubcontext(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context to create; may not be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NameAlreadyBoundException.html\" title\u003d\"class in javax.naming\"\u003eNameAlreadyBoundException\u003c/a\u003e\u003c/code\u003e - if name is already bound",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/directory/InvalidAttributesException.html\" title\u003d\"class in javax.naming.directory\"\u003eInvalidAttributesException\u003c/a\u003e\u003c/code\u003e - if creation of the subcontext requires specification of mandatory attributes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the newly created context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lookupLink",
      "comment": "Retrieves the named object, following links except for the terminal atomic component of the name. If the object bound to name is not a link, returns the object itself.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#lookupLink(java.lang.String)\"\u003e\u003ccode\u003elookupLink(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the object bound to \n\u003ccode\u003ename\u003c/code\u003e, not following the terminal link (if any)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lookupLink",
      "comment": "Retrieves the named object, following links except for the terminal atomic component of the name. See lookupLink(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the object to look up"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the object bound to \n\u003ccode\u003ename\u003c/code\u003e, not following the terminal link (if any)"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NameParser",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNameParser",
      "comment": "Retrieves the parser associated with the named context. In a federation of namespaces, different naming systems will parse names differently. This method allows an application to get a parser for parsing names into their atomic components using the naming convention of a particular naming system. Within any single naming system, NameParser objects returned by this method must be equal (using the equals() test).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#getNameParser(java.lang.String)\"\u003e\u003ccode\u003egetNameParser(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/CompoundName.html\" title\u003d\"class in javax.naming\"\u003e\u003ccode\u003eCompoundName\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context from which to get the parser"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "a name parser that can parse compound names into their atomic components"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.NameParser",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNameParser",
      "comment": "Retrieves the parser associated with the named context. See getNameParser(Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the context from which to get the parser"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "a name parser that can parse compound names into their atomic components"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "composeName",
      "comment": "Composes the name of this context with a name relative to this context. Given a name (name) relative to this context, and the name (prefix) of this context relative to one of its ancestors, this method returns the composition of the two names using the syntax appropriate for the naming system(s) involved. That is, if name names an object relative to this context, the result is the name of the same object, but relative to the ancestor context. None of the names may be null. For example, if this context is named \"wiz.com\" relative to the initial context, then   composeName(\"east\", \"wiz.com\")  might return \"east.wiz.com\". If instead this context is named \"org/research\", then   composeName(\"user/jane\", \"org/research\")        might return \"org/research/user/jane\" while   composeName(\"user/jane\", \"research\")    returns \"research/user/jane\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#composeName(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003ecomposeName(String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a name relative to this context",
          "\u003ccode\u003eprefix\u003c/code\u003e - the name of this context relative to one of its ancestors"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the composition of \n\u003ccode\u003eprefix\u003c/code\u003e and \n\u003ccode\u003ename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "composeName",
      "comment": "Composes the name of this context with a name relative to this context. See composeName(Name, Name) for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a name relative to this context",
          "\u003ccode\u003eprefix\u003c/code\u003e - the name of this context relative to one of its ancestors"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the composition of \n\u003ccode\u003eprefix\u003c/code\u003e and \n\u003ccode\u003ename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addToEnvironment",
      "comment": "Adds a new environment property to the environment of this context. If the property already exists, its value is overwritten. See class description for more details on environment properties.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#getEnvironment()\"\u003e\u003ccode\u003egetEnvironment()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropName\u003c/code\u003e - the name of the environment property to add; may not be null",
          "\u003ccode\u003epropVal\u003c/code\u003e - the value of the property to add; may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the previous value of the property, or null if the property was not in the environment before"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeFromEnvironment",
      "comment": "Removes an environment property from the environment of this context. See class description for more details on environment properties.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#getEnvironment()\"\u003e\u003ccode\u003egetEnvironment()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropName\u003c/code\u003e - the name of the environment property to remove; may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the previous value of the property, or null if the property was not in the environment"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "type": "Wildcard"
          },
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEnvironment",
      "comment": "Retrieves the environment in effect for this context. See class description for more details on environment properties. The caller should not make any changes to the object returned: their effect on the context is undefined. The environment of this context may be changed using addToEnvironment() and removeFromEnvironment().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eaddToEnvironment(String, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eremoveFromEnvironment(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "the environment of this context; never null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Closes this context. This method releases this context\u0027s resources immediately, instead of waiting for them to be released automatically by the garbage collector. This method is idempotent: invoking it on a context that has already been closed has no effect. Invoking any other method on a closed context is not allowed, and results in undefined behaviour.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNameInNamespace",
      "comment": "Retrieves the full name of this context within its own namespace. Many naming services have a notion of a \"full name\" for objects in their respective namespaces. For example, an LDAP entry has a distinguished name, and a DNS record has a fully qualified name. This method allows the client application to retrieve this name. The string returned by this method is not a JNDI composite name and should not be passed directly to context methods. In naming systems for which the notion of full name does not make sense, OperationNotSupportedException is thrown.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/OperationNotSupportedException.html\" title\u003d\"class in javax.naming\"\u003eOperationNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the naming system does not have the notion of a full name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if a naming exception is encountered"
        ],
        "return": [
          "this context\u0027s name in its own namespace; never null"
        ],
        "since": [
          "1.3"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.Context",
  "comment": "This interface represents a naming context, which consists of a set of name-to-object bindings. It contains methods for examining and updating these bindings. \n\u003ch2\u003eNames\u003c/h2\u003e Each name passed as an argument to a \n\u003ccode\u003eContext\u003c/code\u003e method is relative to that context. The empty name is used to name the context itself. A name parameter may never be null. \n\u003cp\u003e Most of the methods have overloaded versions with one taking a \u003ccode\u003eName\u003c/code\u003e parameter and one taking a \u003ccode\u003eString\u003c/code\u003e. These overloaded versions are equivalent in that if the \u003ccode\u003eName\u003c/code\u003e and \u003ccode\u003eString\u003c/code\u003e parameters are just different representations of the same name, then the overloaded versions of the same methods behave the same. In the method descriptions below, only one version is fully documented. The second version instead has a link to the first: the same documentation applies to both. \u003c/p\u003e\n\u003cp\u003e For systems that support federation, \u003ccode\u003eString\u003c/code\u003e name arguments to \u003ccode\u003eContext\u003c/code\u003e methods are composite names. Name arguments that are instances of \u003ccode\u003eCompositeName\u003c/code\u003e are treated as composite names, while \u003ccode\u003eName\u003c/code\u003e arguments that are not instances of \u003ccode\u003eCompositeName\u003c/code\u003e are treated as compound names (which might be instances of \u003ccode\u003eCompoundName\u003c/code\u003e or other implementations of compound names). This allows the results of \u003ccode\u003eNameParser.parse()\u003c/code\u003e to be used as arguments to the \u003ccode\u003eContext\u003c/code\u003e methods. Prior to JNDI 1.2, all name arguments were treated as composite names. \u003c/p\u003e\n\u003cp\u003e Furthermore, for systems that support federation, all names returned in a \u003ccode\u003eNamingEnumeration\u003c/code\u003e from \u003ccode\u003elist()\u003c/code\u003e and \u003ccode\u003elistBindings()\u003c/code\u003e are composite names represented as strings. See \u003ccode\u003eCompositeName\u003c/code\u003e for the string syntax of names. \u003c/p\u003e\n\u003cp\u003e For systems that do not support federation, the name arguments (in either \u003ccode\u003eName\u003c/code\u003e or \u003ccode\u003eString\u003c/code\u003e forms) and the names returned in \u003ccode\u003eNamingEnumeration\u003c/code\u003e may be names in their own namespace rather than names in a composite namespace, at the discretion of the service provider. \u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e All the methods in this interface can throw a \n\u003ccode\u003eNamingException\u003c/code\u003e or any of its subclasses. See \n\u003ccode\u003eNamingException\u003c/code\u003e and their subclasses for details on each exception. \n\u003ch2\u003eConcurrent Access\u003c/h2\u003e A Context instance is not guaranteed to be synchronized against concurrent access by multiple threads. Threads that need to access a single Context instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different Context instance need not synchronize. Note that the \n\u003ca href\u003d\"#lookup(javax.naming.Name)\"\u003e\u003ccode\u003elookup\u003c/code\u003e\u003c/a\u003e method, when passed an empty name, will return a new Context instance representing the same naming context. \n\u003cp\u003e For purposes of concurrency control, a Context operation that returns a \u003ccode\u003eNamingEnumeration\u003c/code\u003e is not considered to have completed while the enumeration is still in use, or while any referrals generated by that operation are still being followed. \u003c/p\u003e\n\u003ch2\u003eParameters\u003c/h2\u003e A \n\u003ccode\u003eName\u003c/code\u003e parameter passed to any method of the \n\u003ccode\u003eContext\u003c/code\u003e interface or one of its subinterfaces will not be modified by the service provider. The service provider may keep a reference to it for the duration of the operation, including any enumeration of the method\u0027s results and the processing of any referrals generated. The caller should not modify the object during this time. A \n\u003ccode\u003eName\u003c/code\u003e returned by any such method is owned by the caller. The caller may subsequently modify it; the service provider may not. \n\u003ch2\u003eEnvironment Properties\u003c/h2\u003e \n\u003cp\u003e JNDI applications need a way to communicate various preferences and properties that define the environment in which naming and directory services are accessed. For example, a context might require specification of security credentials in order to access the service. Another context might require that server configuration information be supplied. These are referred to as the \u003cem\u003eenvironment\u003c/em\u003e of a context. The \u003ccode\u003eContext\u003c/code\u003e interface provides methods for retrieving and updating this environment. \u003c/p\u003e\n\u003cp\u003e The environment is inherited from the parent context as context methods proceed from one context to the next. Changes to the environment of one context do not directly affect those of other contexts. \u003c/p\u003e\n\u003cp\u003e It is implementation-dependent when environment properties are used and/or verified for validity. For example, some of the security-related properties are used by service providers to \"log in\" to the directory. This login process might occur at the time the context is created, or the first time a method is invoked on the context. When, and whether this occurs at all, is implementation-dependent. When environment properties are added or removed from the context, verifying the validity of the changes is again implementation-dependent. For example, verification of some properties might occur at the time the change is made, or at the time the next operation is performed on the context, or not at all. \u003c/p\u003e\n\u003cp\u003e Any object with a reference to a context may examine that context\u0027s environment. Sensitive information such as clear-text passwords should not be stored there unless the implementation is known to protect it. \u003c/p\u003e\n\u003cp\u003e \u003ca id\u003d\"RESOURCEFILES\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003ch2\u003eResource Files\u003c/h2\u003e \n\u003cp\u003e To simplify the task of setting up the environment required by a JNDI application, application components and service providers may be distributed along with \u003cem\u003eresource files.\u003c/em\u003e A JNDI resource file is a file in the properties file format (see \u003ca href\u003d\"../../../java.base/java/util/Properties.html#load(java.io.Reader)\"\u003e\u003ccode\u003ejava.util.Properties\u003c/code\u003e\u003c/a\u003e), containing a list of key/value pairs. The key is the name of the property (e.g. \"java.naming.factory.object\") and the value is a string in the format defined for that property. Here is an example of a JNDI resource file: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003ccode\u003e java.naming.factory.object\u003dcom.sun.jndi.ldap.AttrsToCorba:com.wiz.from.Person java.naming.factory.state\u003dcom.sun.jndi.ldap.CorbaToAttrs:com.wiz.from.Person java.naming.factory.control\u003dcom.sun.jndi.ldap.ResponseControlFactory \u003c/code\u003e\n\u003c/blockquote\u003e The JNDI class library reads the resource files and makes the property values freely available. Thus JNDI resource files should be considered to be \"world readable\", and sensitive information such as clear-text passwords should not be stored there. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e There are two kinds of JNDI resource files: \u003cem\u003eprovider\u003c/em\u003e and \u003cem\u003eapplication\u003c/em\u003e. \u003c/p\u003e\n\u003ch3\u003eProvider Resource Files\u003c/h3\u003e Each service provider has an optional resource that lists properties specific to that provider. The name of this resource is: \n\u003cblockquote\u003e\n  [\n \u003cem\u003eprefix\u003c/em\u003e/]\n \u003ccode\u003ejndiprovider.properties\u003c/code\u003e \n\u003c/blockquote\u003e where \n\u003cem\u003eprefix\u003c/em\u003e is the package name of the provider\u0027s context implementation(s), with each period (\".\") converted to a slash (\"/\"). For example, suppose a service provider defines a context implementation with class name \n\u003ccode\u003ecom.sun.jndi.ldap.LdapCtx\u003c/code\u003e. The provider resource for this provider is named \n\u003ccode\u003ecom/sun/jndi/ldap/jndiprovider.properties\u003c/code\u003e. If the class is not in a package, the resource\u0027s name is simply \n\u003ccode\u003ejndiprovider.properties\u003c/code\u003e. \n\u003cp\u003e \u003ca id\u003d\"LISTPROPS\"\u003e\u003c/a\u003e Certain methods in the JNDI class library make use of the standard JNDI properties that specify lists of JNDI factories: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003ejava.naming.factory.object \u003c/li\u003e\n \u003cli\u003ejava.naming.factory.state \u003c/li\u003e\n \u003cli\u003ejava.naming.factory.control \u003c/li\u003e\n \u003cli\u003ejava.naming.factory.url.pkgs \u003c/li\u003e\n\u003c/ul\u003e The JNDI library will consult the provider resource file when determining the values of these properties. Properties other than these may be set in the provider resource file at the discretion of the service provider. The service provider\u0027s documentation should clearly state which properties are allowed; other properties in the file will be ignored. \n\u003cp\u003e\u003c/p\u003e\n\u003ch3\u003eApplication Resource Files\u003c/h3\u003e When an application is deployed, it will generally have several codebase directories and JARs in its classpath. JNDI locates (using \n\u003ca href\u003d\"../../../java.base/java/lang/ClassLoader.html#getResources(java.lang.String)\"\u003e\u003ccode\u003eClassLoader.getResources()\u003c/code\u003e\u003c/a\u003e) all \n\u003cem\u003eapplication resource files\u003c/em\u003e named \n\u003ccode\u003ejndi.properties\u003c/code\u003e in the classpath. In addition, if the Java installation directory contains a built-in properties file, typically \n\u003ccode\u003econf/jndi.properties\u003c/code\u003e, JNDI treats it as an additional application resource file. All of the properties contained in these files are placed into the environment of the initial context. This environment is then inherited by other contexts. \n\u003cp\u003e For each property found in more than one application resource file, JNDI uses the first value found or, in a few cases where it makes sense to do so, it concatenates all of the values (details are given below). For example, if the \"java.naming.factory.object\" property is found in three \u003ccode\u003ejndi.properties\u003c/code\u003e resource files, the list of object factories is a concatenation of the property values from all three files. Using this scheme, each deployable component is responsible for listing the factories that it exports. JNDI automatically collects and uses all of these export lists when searching for factory classes. \u003c/p\u003e\n\u003ch3\u003eSearch Algorithm for Properties\u003c/h3\u003e When JNDI constructs an initial context, the context\u0027s environment is initialized with properties defined in the environment parameter passed to the constructor, the system properties, and the application resource files. See \n\u003ca href\u003d\"InitialContext.html#ENVIRONMENT\"\u003e\u003ccode\u003eInitialContext\u003c/code\u003e\u003c/a\u003e for details. This initial environment is then inherited by other context instances. \n\u003cp\u003e When the JNDI class library needs to determine the value of a property, it does so by merging the values from the following two sources, in order: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eThe environment of the context being operated on. \u003c/li\u003e\n \u003cli\u003eThe provider resource file (\u003ccode\u003ejndiprovider.properties\u003c/code\u003e) for the context being operated on. \u003c/li\u003e\n\u003c/ol\u003e For each property found in both of these two sources, JNDI determines the property\u0027s value as follows. If the property is one of the standard JNDI properties that specify a list of JNDI factories (listed \n\u003ca href\u003d\"#LISTPROPS\"\u003eabove\u003c/a\u003e), the values are concatenated into a single colon-separated list. For other properties, only the first value found is used. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e When a service provider needs to determine the value of a property, it will generally take that value directly from the environment. A service provider may define provider-specific properties to be placed in its own provider resource file. In that case it should merge values as described in the previous paragraph. \u003c/p\u003e\n\u003cp\u003e In this way, each service provider developer can specify a list of factories to use with that service provider. These can be modified by the application resources specified by the deployer of the application, which in turn can be modified by the user.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}