{
  "packageName": "javax.naming",
  "simpleName": "Name",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.lang.Cloneable",
      "type": "Class"
    },
    {
      "name": "java.io.Serializable",
      "type": "Class"
    },
    {
      "name": "java.lang.Comparable",
      "parameters": [
        {
          "name": "java.lang.Object",
          "type": "Class"
        }
      ],
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "serialVersionUID",
      "comment": "The class fingerprint that is set to indicate serialization compatibility with a previous version of the class.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.Name.serialVersionUID\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clone",
      "comment": "Generates a new copy of this name. Subsequent changes to the components of this name will not affect the new copy, and vice versa.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003e\u003ccode\u003eObject.clone()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a copy of this name"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compareTo",
      "comment": "Compares this name with another name for order. Returns a negative integer, zero, or a positive integer as this name is less than, equal to, or greater than the given name. As with Object.equals(), the notion of ordering for names depends on the class that implements this interface. For example, the ordering may be based on lexicographical ordering of the name components. Specific attributes of the name, such as how it treats case, may affect the ordering. In general, two names of different classes may not be compared.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003e\u003ccode\u003eComparable.compareTo(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the non-null object to compare against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if obj is not a \n\u003ccode\u003eName\u003c/code\u003e of a type that may be compared with this name"
        ],
        "return": [
          "a negative integer, zero, or a positive integer as this name is less than, equal to, or greater than the given name"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "size",
      "comment": "Returns the number of components in this name.",
      "tagMap": {
        "return": [
          "the number of components in this name"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Determines whether this name is empty. An empty name is one with zero components.",
      "tagMap": {
        "return": [
          "true if this name is empty, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAll",
      "comment": "Retrieves the components of this name as an enumeration of strings. The effect on the enumeration of updates to this name is undefined. If the name has zero components, an empty (non-null) enumeration is returned.",
      "tagMap": {
        "return": [
          "an enumeration of the components of this name, each a string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "posn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Retrieves a component of this name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - the 0-based index of the component to retrieve. Must be in the range [0,size())."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range"
        ],
        "return": [
          "the component at index posn"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "posn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPrefix",
      "comment": "Creates a name whose components consist of a prefix of the components of this name. Subsequent changes to this name will not affect the name that is returned and vice versa.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - the 0-based index of the component at which to stop. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range"
        ],
        "return": [
          "a name consisting of the components at indexes in the range [0,posn)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "posn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSuffix",
      "comment": "Creates a name whose components consist of a suffix of the components in this name. Subsequent changes to this name do not affect the name that is returned and vice versa.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - the 0-based index of the component at which to start. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range"
        ],
        "return": [
          "a name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty name is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startsWith",
      "comment": "Determines whether this name starts with a specified prefix. A name n is a prefix if it is equal to getPrefix(n.size()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the name to check"
        ],
        "return": [
          "true if \n\u003ccode\u003en\u003c/code\u003e is a prefix of this name, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "endsWith",
      "comment": "Determines whether this name ends with a specified suffix. A name n is a suffix if it is equal to getSuffix(size()-n.size()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the name to check"
        ],
        "return": [
          "true if \n\u003ccode\u003en\u003c/code\u003e is a suffix of this name, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "suffix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addAll",
      "comment": "Adds the components of a name -- in order -- to the end of this name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esuffix\u003c/code\u003e - the components to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esuffix\u003c/code\u003e is not a valid name, or if the addition of the components would violate the syntax rules of this name"
        ],
        "return": [
          "the updated name (not a new one)"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "posn"
          }
        },
        {
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addAll",
      "comment": "Adds the components of a name -- in order -- at a specified position within this name. Components of this name at or after the index of the first new component are shifted up (away from 0) to accommodate the new components.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the components to add",
          "\u003ccode\u003eposn\u003c/code\u003e - the index in this name at which to add the new components. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003en\u003c/code\u003e is not a valid name, or if the addition of the components would violate the syntax rules of this name"
        ],
        "return": [
          "the updated name (not a new one)"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Adds a single component to the end of this name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - if adding \n\u003ccode\u003ecomp\u003c/code\u003e would violate the syntax rules of this name"
        ],
        "return": [
          "the updated name (not a new one)"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "posn"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Adds a single component at a specified position within this name. Components of this name at or after the index of the new component are shifted up by one (away from index 0) to accommodate the new component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to add",
          "\u003ccode\u003eposn\u003c/code\u003e - the index at which to add the new component. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - if adding \n\u003ccode\u003ecomp\u003c/code\u003e would violate the syntax rules of this name"
        ],
        "return": [
          "the updated name (not a new one)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "posn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes a component from this name. The component of this name at the specified position is removed. Components with indexes greater than this position are shifted down (toward index 0) by one.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - the index of the component to remove. Must be in the range [0,size())."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - if deleting the component would violate the syntax rules of the name"
        ],
        "return": [
          "the component removed (a String)"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.Name",
  "comment": "The \n\u003ccode\u003eName\u003c/code\u003e interface represents a generic name -- an ordered sequence of components. It can be a composite name (names that span multiple namespaces), or a compound name (names that are used within individual hierarchical naming systems). \n\u003cp\u003e There can be different implementations of \u003ccode\u003eName\u003c/code\u003e; for example, composite names, URLs, or namespace-specific compound names. \u003c/p\u003e\n\u003cp\u003e The components of a name are numbered. The indexes of a name with N components range from 0 up to, but not including, N. This range may be written as [0,N). The most significant component is at index 0. An empty name has no components. \u003c/p\u003e\n\u003cp\u003e None of the methods in this interface accept null as a valid value for a parameter that is a name or a name component. Likewise, methods that return a name or name component never return null. \u003c/p\u003e\n\u003cp\u003e An instance of a \u003ccode\u003eName\u003c/code\u003e may not be synchronized against concurrent multithreaded access if that access is not read-only.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}