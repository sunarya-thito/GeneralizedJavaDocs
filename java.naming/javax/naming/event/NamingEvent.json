{
  "packageName": "javax.naming.event",
  "simpleName": "NamingEvent",
  "moduleName": "java.naming",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.EventObject",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OBJECT_ADDED",
      "comment": "Naming event type for indicating that a new object has been added. The value of this constant is 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.NamingEvent.OBJECT_ADDED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OBJECT_REMOVED",
      "comment": "Naming event type for indicating that an object has been removed. The value of this constant is 1.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.NamingEvent.OBJECT_REMOVED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OBJECT_RENAMED",
      "comment": "Naming event type for indicating that an object has been renamed. Note that some services might fire multiple events for a single logical rename operation. For example, the rename operation might be implemented by adding a binding with the new name and removing the old binding. The old/new binding in NamingEvent may be null if the old name or new name is outside of the scope for which the listener has registered. When an interior node in the namespace tree has been renamed, the topmost node which is part of the listener\u0027s scope should used to generate a rename event. The extent to which this can be supported is provider-specific. For example, a service might generate rename notifications for all descendants of the changed interior node and the corresponding provider might not be able to prevent those notifications from being propagated to the listeners. The value of this constant is 2.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.NamingEvent.OBJECT_RENAMED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OBJECT_CHANGED",
      "comment": "Naming event type for indicating that an object has been changed. The changes might include the object\u0027s attributes, or the object itself. Note that some services might fire multiple events for a single modification. For example, the modification might be implemented by first removing the old binding and adding a new binding containing the same name but a different object. The value of this constant is 3.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.NamingEvent.OBJECT_CHANGED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "changeInfo",
      "comment": "Contains information about the change that generated this event.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "type",
      "comment": "Contains the type of this event.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_ADDED\"\u003e\u003ccode\u003eOBJECT_ADDED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_REMOVED\"\u003e\u003ccode\u003eOBJECT_REMOVED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_RENAMED\"\u003e\u003ccode\u003eOBJECT_RENAMED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_CHANGED\"\u003e\u003ccode\u003eOBJECT_CHANGED\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.naming.Binding",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "oldBinding",
      "comment": "Contains information about the object before the change.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.naming.Binding",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "newBinding",
      "comment": "Contains information about the object after the change.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Returns the type of this event.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_ADDED\"\u003e\u003ccode\u003eOBJECT_ADDED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_REMOVED\"\u003e\u003ccode\u003eOBJECT_REMOVED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_RENAMED\"\u003e\u003ccode\u003eOBJECT_RENAMED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_CHANGED\"\u003e\u003ccode\u003eOBJECT_CHANGED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The type of this event."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.event.EventContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEventContext",
      "comment": "Retrieves the event source that fired this event. This returns the same object as EventObject.getSource(). If the result of this method is used to access the event source, for example, to look up the object or get its attributes, then it needs to be locked because implementations of Context are not guaranteed to be thread-safe (and EventContext is a subinterface of Context). See the package description for more information on threading issues.",
      "tagMap": {
        "return": [
          "The non-null context that fired this event."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Binding",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOldBinding",
      "comment": "Retrieves the binding of the object before the change. The binding must be nonnull if the object existed before the change relative to the source context (getEventContext()). That is, it must be nonnull for OBJECT_REMOVED and OBJECT_CHANGED. For OBJECT_RENAMED, it is null if the object before the rename is outside of the scope for which the listener has registered interest; it is nonnull if the object is inside the scope before the rename. The name in the binding is to be resolved relative to the event source getEventContext(). The object returned by Binding.getObject() may be null if such information is unavailable.",
      "tagMap": {
        "return": [
          "The possibly null binding of the object before the change."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Binding",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNewBinding",
      "comment": "Retrieves the binding of the object after the change. The binding must be nonnull if the object existed after the change relative to the source context (getEventContext()). That is, it must be nonnull for OBJECT_ADDED and OBJECT_CHANGED. For OBJECT_RENAMED, it is null if the object after the rename is outside the scope for which the listener registered interest; it is nonnull if the object is inside the scope after the rename. The name in the binding is to be resolved relative to the event source getEventContext(). The object returned by Binding.getObject() may be null if such information is unavailable.",
      "tagMap": {
        "return": [
          "The possibly null binding of the object after the change."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChangeInfo",
      "comment": "Retrieves the change information for this event. The value of the change information is service-specific. For example, it could be an ID that identifies the change in a change log on the server.",
      "tagMap": {
        "return": [
          "The possibly null change information of this event."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.naming.event.NamingListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dispatch",
      "comment": "Invokes the appropriate listener method on this event. The default implementation of this method handles the following event types: OBJECT_ADDED, OBJECT_REMOVED, OBJECT_RENAMED, OBJECT_CHANGED. The listener method is executed in the same thread as this method. See the package description for more information on threading issues.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The nonnull listener."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.naming.event.EventContext",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "javax.naming.Binding",
            "type": "Class"
          },
          "field": {
            "name": "newBd"
          }
        },
        {
          "type": {
            "name": "javax.naming.Binding",
            "type": "Class"
          },
          "field": {
            "name": "oldBd"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "changeInfo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an instance of NamingEvent. The names in newBd and oldBd are to be resolved relative to the event source source. For an OBJECT_ADDED event type, newBd must not be null. For an OBJECT_REMOVED event type, oldBd must not be null. For an OBJECT_CHANGED event type, newBd and oldBd must not be null. For an OBJECT_RENAMED event type, one of newBd or oldBd may be null if the new or old binding is outside of the scope for which the listener has registered.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_ADDED\"\u003e\u003ccode\u003eOBJECT_ADDED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_REMOVED\"\u003e\u003ccode\u003eOBJECT_REMOVED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_RENAMED\"\u003e\u003ccode\u003eOBJECT_RENAMED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html#OBJECT_CHANGED\"\u003e\u003ccode\u003eOBJECT_CHANGED\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The non-null context that fired this event.",
          "\u003ccode\u003etype\u003c/code\u003e - The type of the event.",
          "\u003ccode\u003enewBd\u003c/code\u003e - A possibly null binding before the change. See method description.",
          "\u003ccode\u003eoldBd\u003c/code\u003e - A possibly null binding after the change. See method description.",
          "\u003ccode\u003echangeInfo\u003c/code\u003e - A possibly null object containing information about the change."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.naming.event.NamingEvent",
  "comment": "This class represents an event fired by a naming/directory service. \n\u003cp\u003e The \u003ccode\u003eNamingEvent\u003c/code\u003e\u0027s state consists of \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe event source: the \u003ccode\u003eEventContext\u003c/code\u003e which fired this event. \u003c/li\u003e\n \u003cli\u003eThe event type. \u003c/li\u003e\n \u003cli\u003eThe new binding: information about the object after the change. \u003c/li\u003e\n \u003cli\u003eThe old binding: information about the object before the change. \u003c/li\u003e\n \u003cli\u003eChange information: information about the change that triggered this event; usually service provider-specific or server-specific information. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Note that the event source is always the same \u003ccode\u003eEventContext\u003c/code\u003e \u003cem\u003einstance\u003c/em\u003e that the listener has registered with. Furthermore, the names of the bindings in the \u003ccode\u003eNamingEvent\u003c/code\u003e are always relative to that instance. For example, suppose a listener makes the following registration: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     NamespaceChangeListener listener \u003d ...;\n     src.addNamingListener(\"x\", SUBTREE_SCOPE, listener);\n\u003c/pre\u003e\n\u003c/blockquote\u003e When an object named \"x/y\" is subsequently deleted, the corresponding \n\u003ccode\u003eNamingEvent\u003c/code\u003e (\n\u003ccode\u003eevt\u003c/code\u003e) must contain: \n\u003cblockquote\u003e\n \u003cpre\u003e     evt.getEventContext() \u003d\u003d src\n     evt.getOldBinding().getName().equals(\"x/y\")\n\u003c/pre\u003e\n\u003c/blockquote\u003e Care must be taken when multiple threads are accessing the same \n\u003ccode\u003eEventContext\u003c/code\u003e concurrently. See the \n\u003ca href\u003d\"package-summary.html#THREADING\"\u003epackage description\u003c/a\u003e for more information on threading issues.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingListener.html\" title\u003d\"interface in javax.naming.event\"\u003e\u003ccode\u003eNamingListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/EventContext.html\" title\u003d\"interface in javax.naming.event\"\u003e\u003ccode\u003eEventContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.naming.event.NamingEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}