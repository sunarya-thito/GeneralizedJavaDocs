{
  "packageName": "javax.naming.event",
  "simpleName": "EventContext",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.naming.Context",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "OBJECT_SCOPE",
      "comment": "Constant for expressing interest in events concerning the object named by the target. The value of this constant is 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.EventContext.OBJECT_SCOPE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ONELEVEL_SCOPE",
      "comment": "Constant for expressing interest in events concerning objects in the context named by the target, excluding the context named by the target. The value of this constant is 1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.EventContext.ONELEVEL_SCOPE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SUBTREE_SCOPE",
      "comment": "Constant for expressing interest in events concerning objects in the subtree of the object named by the target, including the object named by the target. The value of this constant is 2.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.event.EventContext.SUBTREE_SCOPE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.event.NamingListener",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addNamingListener",
      "comment": "Adds a listener for receiving naming events fired when the object(s) identified by a target and scope changes. The event source of those events is this context. See the class description for a discussion on event source and target. See the descriptions of the constants OBJECT_SCOPE, ONELEVEL_SCOPE, and SUBTREE_SCOPE to see how scope affects the registration. target needs to name a context only when scope is ONELEVEL_SCOPE. target may name a non-context if scope is either OBJECT_SCOPE or SUBTREE_SCOPE. Using SUBTREE_SCOPE for a non-context might be useful, for example, if the caller does not know in advance whether target is a context and just wants to register interest in the (possibly degenerate subtree) rooted at target. When the listener is notified of an event, the listener may in invoked in a thread other than the one in which addNamingListener() is executed. Care must be taken when multiple threads are accessing the same EventContext concurrently. See the package description for more information on threading issues.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/EventContext.html#removeNamingListener(javax.naming.event.NamingListener)\"\u003e\u003ccode\u003eremoveNamingListener(javax.naming.event.NamingListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - A nonnull name to be resolved relative to this context.",
          "\u003ccode\u003escope\u003c/code\u003e - One of \n\u003ccode\u003eOBJECT_SCOPE\u003c/code\u003e, \n\u003ccode\u003eONELEVEL_SCOPE\u003c/code\u003e, or \n\u003ccode\u003eSUBTREE_SCOPE\u003c/code\u003e.",
          "\u003ccode\u003el\u003c/code\u003e - The nonnull listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a problem was encountered while adding the listener."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.event.NamingListener",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addNamingListener",
      "comment": "Adds a listener for receiving naming events fired when the object named by the string target name and scope changes. See the overload that accepts a Name for details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/EventContext.html#removeNamingListener(javax.naming.event.NamingListener)\"\u003e\u003ccode\u003eremoveNamingListener(javax.naming.event.NamingListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - The nonnull string name of the object resolved relative to this context.",
          "\u003ccode\u003escope\u003c/code\u003e - One of \n\u003ccode\u003eOBJECT_SCOPE\u003c/code\u003e, \n\u003ccode\u003eONELEVEL_SCOPE\u003c/code\u003e, or \n\u003ccode\u003eSUBTREE_SCOPE\u003c/code\u003e.",
          "\u003ccode\u003el\u003c/code\u003e - The nonnull listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a problem was encountered while adding the listener."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.event.NamingListener",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeNamingListener",
      "comment": "Removes a listener from receiving naming events fired by this EventContext. The listener may have registered more than once with this EventContext, perhaps with different target/scope arguments. After this method is invoked, the listener will no longer receive events with this EventContext instance as the event source (except for those events already in the process of being dispatched). If the listener was not, or is no longer, registered with this EventContext instance, this method does not do anything.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/EventContext.html#addNamingListener(javax.naming.Name,int,javax.naming.event.NamingListener)\"\u003e\u003ccode\u003eaddNamingListener(javax.naming.Name, int, javax.naming.event.NamingListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The nonnull listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If a problem was encountered while removing the listener."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "targetMustExist",
      "comment": "Determines whether a listener can register interest in a target that does not exist.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If the context\u0027s behavior in this regard cannot be determined."
        ],
        "return": [
          "true if the target must exist; false if the target need not exist."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.event.EventContext",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}