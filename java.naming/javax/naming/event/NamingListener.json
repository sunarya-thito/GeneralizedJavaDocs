{
  "packageName": "javax.naming.event",
  "simpleName": "NamingListener",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.EventListener",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.naming.event.NamingExceptionEvent",
            "type": "Class"
          },
          "field": {
            "name": "evt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "namingExceptionThrown",
      "comment": "Called when a naming exception is thrown while attempting to fire a NamingEvent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevt\u003c/code\u003e - The nonnull event."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.event.NamingListener",
  "comment": "This interface is the root of listener interfaces that handle \n\u003ccode\u003eNamingEvent\u003c/code\u003es. It does not make sense for a listener to implement just this interface. A listener typically implements a subinterface of \n\u003ccode\u003eNamingListener\u003c/code\u003e, such as \n\u003ccode\u003eObjectChangeListener\u003c/code\u003e or \n\u003ccode\u003eNamespaceChangeListener\u003c/code\u003e. \n\u003cp\u003e This interface contains a single method, \u003ccode\u003enamingExceptionThrown()\u003c/code\u003e, that must be implemented so that the listener can be notified of exceptions that are thrown (by the service provider) while gathering information about the events that they\u0027re interested in. When this method is invoked, the listener has been automatically deregistered from the \u003ccode\u003eEventContext\u003c/code\u003e with which it has registered. \u003c/p\u003e\n\u003cp\u003e For example, suppose a listener implements \u003ccode\u003eObjectChangeListener\u003c/code\u003e and registers with an \u003ccode\u003eEventContext\u003c/code\u003e. Then, if the connection to the server is subsequently broken, the listener will receive a \u003ccode\u003eNamingExceptionEvent\u003c/code\u003e and may take some corrective action, such as notifying the user of the application.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingEvent.html\" title\u003d\"class in javax.naming.event\"\u003e\u003ccode\u003eNamingEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/NamingExceptionEvent.html\" title\u003d\"class in javax.naming.event\"\u003e\u003ccode\u003eNamingExceptionEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/EventContext.html\" title\u003d\"interface in javax.naming.event\"\u003e\u003ccode\u003eEventContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/event/EventDirContext.html\" title\u003d\"interface in javax.naming.event\"\u003e\u003ccode\u003eEventDirContext\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}