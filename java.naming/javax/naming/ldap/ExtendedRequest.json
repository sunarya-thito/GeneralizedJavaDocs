{
  "packageName": "javax.naming.ldap",
  "simpleName": "ExtendedRequest",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.io.Serializable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getID",
      "comment": "Retrieves the object identifier of the request.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The non-null object identifier string representing the LDAP \n\u003ccode\u003eExtendedRequest.requestName\u003c/code\u003e component."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEncodedValue",
      "comment": "Retrieves the ASN.1 BER encoded value of the LDAP extended operation request. Null is returned if the value is absent. The result is the raw BER bytes including the tag and length of the request value. It does not include the request OID. This method is called by the service provider to get the bits to put into the extended operation to be sent to the LDAP server.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If the encoded value cannot be retrieved because the request contains insufficient or invalid data/state."
        ],
        "return": [
          "A possibly null byte array representing the ASN.1 BER encoded contents of the LDAP \n\u003ccode\u003eExtendedRequest.requestValue\u003c/code\u003e component."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.ldap.ExtendedResponse",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createExtendedResponse",
      "comment": "Creates the response object that corresponds to this request. After the service provider has sent the extended operation request to the LDAP server, it will receive a response from the server. If the operation failed, the provider will throw a NamingException. If the operation succeeded, the provider will invoke this method using the data that it got back in the response. It is the job of this method to return a class that implements the ExtendedResponse interface that is appropriate for the extended operation request. For example, a Start TLS extended request class would need to know how to process a Start TLS extended response. It does this by creating a class that implements ExtendedResponse.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/ExtendedResponse.html\" title\u003d\"interface in javax.naming.ldap\"\u003e\u003ccode\u003eExtendedResponse\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - The possibly null object identifier of the response control.",
          "\u003ccode\u003eberValue\u003c/code\u003e - The possibly null ASN.1 BER encoded value of the response control. This is the raw BER bytes including the tag and length of the response value. It does not include the response OID.",
          "\u003ccode\u003eoffset\u003c/code\u003e - The starting position in berValue of the bytes to use.",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes in berValue to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - if cannot create extended response due to an error."
        ],
        "return": [
          "A non-null object."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.ldap.ExtendedRequest",
  "comment": "This interface represents an LDAPv3 extended operation request as defined in \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2251.txt\"\u003eRFC 2251\u003c/a\u003e. \n\u003cpre\u003e     ExtendedRequest ::\u003d [APPLICATION 23] SEQUENCE {\n              requestName      [0] LDAPOID,\n              requestValue     [1] OCTET STRING OPTIONAL }\n \u003c/pre\u003e It comprises an object identifier string and an optional ASN.1 BER encoded value. \n\u003cp\u003e The methods in this class are used by the service provider to construct the bits to send to the LDAP server. Applications typically only deal with the classes that implement this interface, supplying them with any information required for a particular extended operation request. It would then pass such a class as an argument to the \u003ccode\u003eLdapContext.extendedOperation()\u003c/code\u003e method for performing the LDAPv3 extended operation. \u003c/p\u003e\n\u003cp\u003e For example, suppose the LDAP server supported a \u0027get time\u0027 extended operation. It would supply GetTimeRequest and GetTimeResponse classes: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e public class GetTimeRequest implements ExtendedRequest {\n     public GetTimeRequest() {... };\n     public ExtendedResponse createExtendedResponse(String id,\n         byte[] berValue, int offset, int length)\n         throws NamingException {\n         return new GetTimeResponse(id, berValue, offset, length);\n     }\n     ...\n }\n public class GetTimeResponse implements ExtendedResponse {\n     long time;\n     public GetTimeResponse(String id, byte[] berValue, int offset,\n         int length) throws NamingException {\n         time \u003d      ... // decode berValue to get time\n     }\n     public java.util.Date getDate() { return new java.util.Date(time) };\n     public long getTime() { return time };\n     ...\n }\n\u003c/pre\u003e\n\u003c/blockquote\u003e A program would use then these classes as follows: \n\u003cblockquote\u003e\n \u003cpre\u003e GetTimeResponse resp \u003d\n     (GetTimeResponse) ectx.extendedOperation(new GetTimeRequest());\n long time \u003d resp.getTime();\n\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/ExtendedResponse.html\" title\u003d\"interface in javax.naming.ldap\"\u003e\u003ccode\u003eExtendedResponse\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/LdapContext.html#extendedOperation(javax.naming.ldap.ExtendedRequest)\"\u003e\u003ccode\u003eLdapContext.extendedOperation(javax.naming.ldap.ExtendedRequest)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}