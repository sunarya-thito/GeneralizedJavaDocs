{
  "packageName": "javax.naming.ldap",
  "simpleName": "Rdn",
  "moduleName": "java.naming",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Retrieves one of this Rdn\u0027s value. This is a convenience method for obtaining the value, when the RDN contains a single type and value mapping, which is the common RDN usage. For a multi-valued RDN, this method returns value corresponding to the type returned by getType() method.",
      "tagMap": {
        "return": [
          "The non-null attribute value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Retrieves one of this Rdn\u0027s type. This is a convenience method for obtaining the type, when the RDN contains a single type and value mapping, which is the common RDN usage. For a multi-valued RDN, the type/value pairs have no specific order defined on them. In that case, this method returns type of one of the type/value pairs. The getValue() method returns the value corresponding to the type returned by this method.",
      "tagMap": {
        "return": [
          "The non-null attribute type."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns this Rdn as a string represented in a format defined by RFC 2253 and described in the class description for LdapName.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The string representation of the Rdn."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this Rdn with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Rdn is less than, equal to, or greater than the given Object. If obj is null or not an instance of Rdn, ClassCastException is thrown. The attribute type and value pairs of the RDNs are lined up against each other and compared lexicographically. The order of components in multi-valued Rdns (such as \"ou\u003dSales+cn\u003dBob\") is not significant.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The non-null object to compare against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if obj is null or not a Rdn."
        ],
        "return": [
          "A negative integer, zero, or a positive integer as this Rdn is less than, equal to, or greater than the given Object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified Object with this Rdn for equality. Returns true if the given object is also a Rdn and the two Rdns represent the same attribute type and value mappings. The order of components in multi-valued Rdns (such as \"ou\u003dSales+cn\u003dBob\") is not significant. Type and value equality matching is done as below: The types are compared for equality with their case ignored. String values with different but equivalent usage of quoting, escaping, or UTF8-hex-encoding are considered equal. The case of the values is ignored during the comparison. If obj is null or not an instance of Rdn, false is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/Rdn.html#hashCode()\"\u003e\u003ccode\u003ehashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - object to be compared for equality with this Rdn."
        ],
        "return": [
          "true if the specified object is equal to this Rdn."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code of this RDN. Two RDNs that are equal (according to the equals method) will have the same hash code.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/Rdn.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An int representing the hash code of this Rdn."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.directory.Attributes",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toAttributes",
      "comment": "Retrieves the Attributes view of the type/value mappings contained in this Rdn.",
      "tagMap": {
        "return": [
          "The non-null attributes containing the type/value mappings of this Rdn."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "size",
      "comment": "Retrieves the number of attribute type/value pairs in this Rdn.",
      "tagMap": {
        "return": [
          "The non-negative number of type/value pairs in this Rdn."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "escapeValue",
      "comment": "Given the value of an attribute, returns a string escaped according to the rules specified in RFC 2253. For example, if the val is \"Sue, Grabbit and Runn\", the escaped value returned by this method is \"Sue\\, Grabbit and Runn\". A string value is represented as a String and binary value as a byte array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - The non-null object to be escaped."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if val is not a String or byte array."
        ],
        "return": [
          "Escaped string value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unescapeValue",
      "comment": "Given an attribute value string formatted according to the rules specified in RFC 2253, returns the unformatted value. Escapes and quotes are stripped away, and hex-encoded UTF-8 is converted to equivalent UTF-16 characters. Returns a string value as a String, and a binary value as a byte array. Legal and illegal values are defined in RFC 2253. This method is generous in accepting the values and does not catch all illegal values. Therefore, passing in an illegal value might not necessarily trigger an IllegalArgumentException.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - The non-null string to be unescaped."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When an Illegal value is provided."
        ],
        "return": [
          "Unescaped value."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.naming.directory.Attributes",
            "type": "Class"
          },
          "field": {
            "name": "attrSet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an Rdn from the given attribute set. See Attributes. The string attribute values are not interpreted as RFC 2253 formatted RDN strings. That is, the values are used literally (not parsed) and assumed to be unescaped.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattrSet\u003c/code\u003e - The non-null and non-empty attributes containing type/value mappings."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If contents of \n\u003ccode\u003eattrSet\u003c/code\u003e cannot be used to construct a valid RDN."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "rdnString"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an Rdn from the given string. This constructor takes a string formatted according to the rules defined in RFC 2253 and described in the class description for LdapName.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erdnString\u003c/code\u003e - The non-null and non-empty RFC2253 formatted string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If a syntax error occurs during parsing of the rdnString."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.naming.ldap.Rdn",
            "type": "Class"
          },
          "field": {
            "name": "rdn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an Rdn from the given rdn. The contents of the rdn are simply copied into the newly created Rdn.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erdn\u003c/code\u003e - The non-null Rdn to be copied."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an Rdn from the given attribute type and value. The string attribute values are not interpreted as RFC 2253 formatted RDN strings. That is, the values are used literally (not parsed) and assumed to be unescaped.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/Rdn.html#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - The non-null and non-empty string attribute type.",
          "\u003ccode\u003evalue\u003c/code\u003e - The non-null and non-empty attribute value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If type/value cannot be used to construct a valid RDN."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.naming.ldap.Rdn",
  "comment": "This class represents a relative distinguished name, or RDN, which is a component of a distinguished name as specified by \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2253.txt\"\u003eRFC 2253\u003c/a\u003e. An example of an RDN is \"OU\u003dSales+CN\u003dJ.Smith\". In this example, the RDN consist of multiple attribute type/value pairs. The RDN is parsed as described in the class description for \n\u003ca href\u003d\"LdapName.html\" title\u003d\"class in javax.naming.ldap\"\u003e\u003ccode\u003eLdapName\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e The Rdn class represents an RDN as attribute type/value mappings, which can be viewed using \u003ca href\u003d\"../directory/Attributes.html\" title\u003d\"interface in javax.naming.directory\"\u003e\u003ccode\u003eAttributes\u003c/code\u003e\u003c/a\u003e. In addition, it contains convenience methods that allow easy retrieval of type and value when the Rdn consist of a single type/value pair, which is how it appears in a typical usage. It also contains helper methods that allow escaping of the unformatted attribute value and unescaping of the value formatted according to the escaping syntax defined in RFC2253. For methods that take or return attribute value as an Object, the value is either a String (in unescaped form) or a byte array. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eRdn\u003c/code\u003e will properly parse all valid RDNs, but does not attempt to detect all possible violations when parsing invalid RDNs. It is \"generous\" in accepting invalid RDNs. The \"validity\" of a name is determined ultimately when it is supplied to an LDAP server, which may accept or reject the name based on factors such as its schema information and interoperability considerations. \u003c/p\u003e\n\u003cp\u003e The following code example shows how to construct an Rdn using the constructor that takes type and value as arguments: \u003c/p\u003e\n\u003cpre\u003e      Rdn rdn \u003d new Rdn(\"cn\", \"Juicy, Fruit\");\n      System.out.println(rdn.toString());\n \u003c/pre\u003e The last line will print \n\u003ccode\u003ecn\u003dJuicy\\, Fruit\u003c/code\u003e. The \n\u003ca href\u003d\"#unescapeValue(java.lang.String)\"\u003e\u003ccode\u003eunescapeValue()\u003c/code\u003e\u003c/a\u003e method can be used to unescape the escaped comma resulting in the original value \n\u003ccode\u003e\"Juicy, Fruit\"\u003c/code\u003e. The \n\u003ca href\u003d\"#escapeValue(java.lang.Object)\"\u003e\u003ccode\u003eescapeValue()\u003c/code\u003e\u003c/a\u003e method adds the escape back preceding the comma. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This class can be instantiated by a string representation of the RDN defined in RFC 2253 as shown in the following code example: \u003c/p\u003e\n\u003cpre\u003e      Rdn rdn \u003d new Rdn(\"cn\u003dJuicy\\\\, Fruit\");\n      System.out.println(rdn.toString());\n \u003c/pre\u003e The last line will print \n\u003ccode\u003ecn\u003dJuicy\\, Fruit\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Concurrent multithreaded read-only access of an instance of \u003ccode\u003eRdn\u003c/code\u003e need not be synchronized. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, the behavior of passing a null argument to a constructor or method in this class will cause NullPointerException to be thrown.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.naming.ldap.Rdn\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}