{
  "packageName": "javax.naming.ldap",
  "simpleName": "LdapContext",
  "moduleName": "java.naming",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.naming.directory.DirContext",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CONTROL_FACTORIES",
      "comment": "Constant that holds the name of the environment property for specifying the list of control factories to use. The value of the property should be a colon-separated list of the fully qualified class names of factory classes that will create a control given another control. See ControlFactory.getControlInstance() for details. This property may be specified in the environment, a system property, or one or more resource files. The value of this constant is \"java.naming.factory.control\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/ControlFactory.html\" title\u003d\"class in javax.naming.ldap\"\u003e\u003ccode\u003eControlFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#addToEnvironment(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eContext.addToEnvironment(java.lang.String, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Context.html#removeFromEnvironment(java.lang.String)\"\u003e\u003ccode\u003eContext.removeFromEnvironment(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.naming.ldap.LdapContext.CONTROL_FACTORIES\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.ldap.ExtendedResponse",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.ldap.ExtendedRequest",
            "type": "Class"
          },
          "name": "request",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "extendedOperation",
      "comment": "Performs an extended operation. This method is used to support LDAPv3 extended operations.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erequest\u003c/code\u003e - The non-null request to be performed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while performing the extended operation."
        ],
        "return": [
          "The possibly null response of the operation. null means the operation did not generate any response."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.ldap.LdapContext",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.ldap.Control",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "requestControls",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "newInstance",
      "comment": "Creates a new instance of this context initialized using request controls. This method is a convenience method for creating a new instance of this context for the purposes of multithreaded access. For example, if multiple threads want to use different context request controls, each thread may use this method to get its own copy of this context and set/get context request controls without having to synchronize with other threads. The new context has the same environment properties and connection request controls as this context. See the class description for details. Implementations might also allow this context and the new context to share the same network connection or other resources if doing so does not impede the independence of either context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/InitialLdapContext.html\" title\u003d\"class in javax.naming.ldap\"\u003e\u003ccode\u003eInitialLdapContext\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erequestControls\u003c/code\u003e - The possibly null request controls to use for the new context. If null, the context is initialized with no request controls."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while creating the new instance."
        ],
        "return": [
          "A non-null \n\u003ccode\u003eLdapContext\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.ldap.Control",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "connCtls",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reconnect",
      "comment": "Reconnects to the LDAP server using the supplied controls and this context\u0027s environment. This method is a way to explicitly initiate an LDAP \"bind\" operation. For example, you can use this method to set request controls for the LDAP \"bind\" operation, or to explicitly connect to the server to get response controls returned by the LDAP \"bind\" operation. This method sets this context\u0027s connCtls to be its new connection request controls. This context\u0027s context request controls are not affected. After this method has been invoked, any subsequent implicit reconnections will be done using connCtls. connCtls are also used as connection request controls for new context instances derived from this context. These connection request controls are not affected by setRequestControls(). Service provider implementors should read the \"Service Provider\" section in the class description for implementation details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/LdapContext.html#getConnectControls()\"\u003e\u003ccode\u003egetConnectControls()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/LdapContext.html#newInstance(javax.naming.ldap.Control%5B%5D)\"\u003e\u003ccode\u003enewInstance(javax.naming.ldap.Control[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econnCtls\u003c/code\u003e - The possibly null controls to use. If null, no controls are used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while reconnecting."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.ldap.Control",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConnectControls",
      "comment": "Retrieves the connection request controls in effect for this context. The controls are owned by the JNDI implementation and are immutable. Neither the array nor the controls may be modified by the caller.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while getting the request controls."
        ],
        "return": [
          "A possibly-null array of controls. null means no connect controls have been set for this context."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.ldap.Control",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "requestControls",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRequestControls",
      "comment": "Sets the request controls for methods subsequently invoked on this context. The request controls are owned by the JNDI implementation and are immutable. Neither the array nor the controls may be modified by the caller. This removes any previous request controls and adds requestControls for use by subsequent methods invoked on this context. This method does not affect this context\u0027s connection request controls. Note that requestControls will be in effect until the next invocation of setRequestControls(). You need to explicitly invoke setRequestControls() with null or an empty array to clear the controls if you don\u0027t want them to affect the context methods any more. To check what request controls are in effect for this context, use getRequestControls().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/LdapContext.html#getRequestControls()\"\u003e\u003ccode\u003egetRequestControls()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erequestControls\u003c/code\u003e - The possibly null controls to use. If null, no controls are used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while setting the request controls."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.ldap.Control",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRequestControls",
      "comment": "Retrieves the request controls in effect for this context. The request controls are owned by the JNDI implementation and are immutable. Neither the array nor the controls may be modified by the caller.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/LdapContext.html#setRequestControls(javax.naming.ldap.Control%5B%5D)\"\u003e\u003ccode\u003esetRequestControls(javax.naming.ldap.Control[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while getting the request controls."
        ],
        "return": [
          "A possibly-null array of controls. null means no request controls have been set for this context."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.ldap.Control",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "javax.naming.NamingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResponseControls",
      "comment": "Retrieves the response controls produced as a result of the last method invoked on this context. The response controls are owned by the JNDI implementation and are immutable. Neither the array nor the controls may be modified by the caller. These response controls might have been generated by a successful or failed operation. When a context method that may return response controls is invoked, response controls from the previous method invocation are cleared. getResponseControls() returns all of the response controls generated by LDAP operations used by the context method in the order received from the LDAP server. Invoking getResponseControls() does not clear the response controls. You can call it many times (and get back the same controls) until the next context method that may return controls is invoked.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/NamingException.html\" title\u003d\"class in javax.naming\"\u003eNamingException\u003c/a\u003e\u003c/code\u003e - If an error occurred while getting the response controls."
        ],
        "return": [
          "A possibly null array of controls. If null, the previous method invoked on this context did not produce any controls."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.naming.ldap.LdapContext",
  "comment": "This interface represents a context in which you can perform operations with LDAPv3-style controls and perform LDAPv3-style extended operations. For applications that do not require such controls or extended operations, the more generic \n\u003ccode\u003ejavax.naming.directory.DirContext\u003c/code\u003e should be used instead. \n\u003ch2\u003eUsage Details About Controls\u003c/h2\u003e This interface provides support for LDAP v3 controls. At a high level, this support allows a user program to set request controls for LDAP operations that are executed in the course of the user program\u0027s invocation of \n\u003ccode\u003eContext\u003c/code\u003e/\n\u003ccode\u003eDirContext\u003c/code\u003e methods, and read response controls resulting from LDAP operations. At the implementation level, there are some details that developers of both the user program and service providers need to understand in order to correctly use request and response controls. \n\u003ch2\u003eRequest Controls\u003c/h2\u003e \n\u003cp\u003e There are two types of request controls: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eRequest controls that affect how a connection is created \u003c/li\u003e\n \u003cli\u003eRequest controls that affect context methods \u003c/li\u003e\n\u003c/ul\u003e The former is used whenever a connection needs to be established or re-established with an LDAP server. The latter is used when all other LDAP operations are sent to the LDAP server. The reason why a distinction between these two types of request controls is necessary is because JNDI is a high-level API that does not deal directly with connections. It is the job of service providers to do any necessary connection management. Consequently, a single connection may be shared by multiple context instances, and a service provider is free to use its own algorithms to conserve connection and network usage. Thus, when a method is invoked on the context instance, the service provider might need to do some connection management in addition to performing the corresponding LDAP operations. For connection management, it uses the \n\u003cem\u003econnection request controls\u003c/em\u003e, while for the normal LDAP operations, it uses the \n\u003cem\u003econtext request controls\u003c/em\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eUnless explicitly qualified, the term \"request controls\" refers to context request controls. \u003c/p\u003e\n\u003ch3\u003eContext Request Controls\u003c/h3\u003e There are two ways in which a context instance gets its request controls: \n\u003col\u003e \n \u003cli\u003e\u003ccode\u003eldapContext.newInstance(\u003cstrong\u003ereqCtls\u003c/strong\u003e)\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eldapContext.setRequestControls(\u003cstrong\u003ereqCtls\u003c/strong\u003e)\u003c/code\u003e \u003c/li\u003e\n\u003c/ol\u003e where \n\u003ccode\u003eldapContext\u003c/code\u003e is an instance of \n\u003ccode\u003eLdapContext\u003c/code\u003e. Specifying \n\u003ccode\u003enull\u003c/code\u003e or an empty array for \n\u003ccode\u003ereqCtls\u003c/code\u003e means no request controls. \n\u003ccode\u003enewInstance()\u003c/code\u003e creates a new instance of a context using \n\u003ccode\u003ereqCtls\u003c/code\u003e, while \n\u003ccode\u003esetRequestControls()\u003c/code\u003e updates an existing context instance\u0027s request controls to \n\u003ccode\u003ereqCtls\u003c/code\u003e. \n\u003cp\u003e Unlike environment properties, request controls of a context instance \u003cem\u003eare not inherited\u003c/em\u003e by context instances that are derived from it. Derived context instances have \u003ccode\u003enull\u003c/code\u003e as their context request controls. You must set the request controls of a derived context instance explicitly using \u003ccode\u003esetRequestControls()\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A context instance\u0027s request controls are retrieved using the method \u003ccode\u003egetRequestControls()\u003c/code\u003e. \u003c/p\u003e\n\u003ch3\u003eConnection Request Controls\u003c/h3\u003e There are three ways in which connection request controls are set: \n\u003col\u003e \n \u003cli\u003e\u003ccode\u003e new InitialLdapContext(env, \u003cstrong\u003econnCtls\u003c/strong\u003e)\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003erefException.getReferralContext(env, \u003cstrong\u003econnCtls\u003c/strong\u003e)\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eldapContext.reconnect(\u003cstrong\u003econnCtls\u003c/strong\u003e);\u003c/code\u003e \u003c/li\u003e\n\u003c/ol\u003e where \n\u003ccode\u003erefException\u003c/code\u003e is an instance of \n\u003ccode\u003eLdapReferralException\u003c/code\u003e, and \n\u003ccode\u003eldapContext\u003c/code\u003e is an instance of \n\u003ccode\u003eLdapContext\u003c/code\u003e. Specifying \n\u003ccode\u003enull\u003c/code\u003e or an empty array for \n\u003ccode\u003econnCtls\u003c/code\u003e means no connection request controls. \n\u003cp\u003e Like environment properties, connection request controls of a context \u003cem\u003eare inherited\u003c/em\u003e by contexts that are derived from it. Typically, you initialize the connection request controls using the \u003ccode\u003eInitialLdapContext\u003c/code\u003e constructor or \u003ccode\u003eLdapReferralContext.getReferralContext()\u003c/code\u003e. These connection request controls are inherited by contexts that share the same connection--that is, contexts derived from the initial or referral contexts. \u003c/p\u003e\n\u003cp\u003e Use \u003ccode\u003ereconnect()\u003c/code\u003e to change the connection request controls of a context. Invoking \u003ccode\u003eldapContext.reconnect()\u003c/code\u003e affects only the connection used by \u003ccode\u003eldapContext\u003c/code\u003e and any new contexts instances that are derived form \u003ccode\u003eldapContext\u003c/code\u003e. Contexts that previously shared the connection with \u003ccode\u003eldapContext\u003c/code\u003e remain unchanged. That is, a context\u0027s connection request controls must be explicitly changed and is not affected by changes to another context\u0027s connection request controls. \u003c/p\u003e\n\u003cp\u003e A context instance\u0027s connection request controls are retrieved using the method \u003ccode\u003egetConnectControls()\u003c/code\u003e. \u003c/p\u003e\n\u003ch3\u003eService Provider Requirements\u003c/h3\u003e A service provider supports connection and context request controls in the following ways. Context request controls must be associated on a per context instance basis while connection request controls must be associated on a per connection instance basis. The service provider must look for the connection request controls in the environment property \"java.naming.ldap.control.connect\" and pass this environment property on to context instances that it creates. \n\u003ch2\u003eResponse Controls\u003c/h2\u003e The method \n\u003ccode\u003eLdapContext.getResponseControls()\u003c/code\u003e is used to retrieve the response controls generated by LDAP operations executed as the result of invoking a \n\u003ccode\u003eContext\u003c/code\u003e/\n\u003ccode\u003eDirContext\u003c/code\u003e operation. The result is all of the responses controls generated by the underlying LDAP operations, including any implicit reconnection. To get only the reconnection response controls, use \n\u003ccode\u003ereconnect()\u003c/code\u003e followed by \n\u003ccode\u003egetResponseControls()\u003c/code\u003e. \n\u003ch2\u003eParameters\u003c/h2\u003e A \n\u003ccode\u003eControl[]\u003c/code\u003e array passed as a parameter to any method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual \n\u003ccode\u003eControl\u003c/code\u003e objects in the array. A \n\u003ccode\u003eControl[]\u003c/code\u003e array returned by any method is immutable, and may not subsequently be modified by either the caller or the service provider.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/InitialLdapContext.html\" title\u003d\"class in javax.naming.ldap\"\u003e\u003ccode\u003eInitialLdapContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/ldap/LdapReferralException.html#getReferralContext(java.util.Hashtable,javax.naming.ldap.Control%5B%5D)\"\u003e\u003ccode\u003eLdapReferralException.getReferralContext(java.util.Hashtable,javax.naming.ldap.Control[])\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}