{
  "packageName": "javax.naming",
  "simpleName": "CompoundName",
  "moduleName": "java.naming",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Properties",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "mySyntax",
      "comment": "Syntax properties for this compound name. This field is initialized by the constructors and cannot be null. It should be treated as a read-only variable by subclasses. Any necessary changes to mySyntax should be made within constructors and not after the compound name has been instantiated.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Generates the string representation of this compound name, using the syntax rules of the compound name. The syntax rules are described in the class description. An empty component is represented by an empty string. The string representation thus generated can be passed to the CompoundName constructor with the same syntax properties to create a new equivalent compound name.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-null string representation of this compound name."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Determines whether obj is syntactically equal to this compound name. If obj is null or not a CompoundName, false is returned. Two compound names are equal if each component in one is \"equal\" to the corresponding component in the other. Equality is also defined in terms of the syntax of this compound name. The default implementation of CompoundName uses the syntax properties jndi.syntax.ignorecase and jndi.syntax.trimblanks when comparing two components for equality. If case is ignored, two strings with the same sequence of characters but with different cases are considered equal. If blanks are being trimmed, leading and trailing blanks are ignored for the purpose of the comparison. Both compound names must have the same number of components. Implementation note: Currently the syntax properties of the two compound names are not compared for equality. They might be in the future.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/CompoundName.html#compareTo(java.lang.Object)\"\u003e\u003ccode\u003ecompareTo(java.lang.Object obj)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The possibly null object to compare against."
        ],
        "return": [
          "true if obj is equal to this compound name, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Computes the hash code of this compound name. The hash code is the sum of the hash codes of the \"canonicalized\" forms of individual components of this compound name. Each component is \"canonicalized\" according to the compound name\u0027s syntax before its hash code is computed. For a case-insensitive name, for example, the uppercased form of a name has the same hash code as its lowercased equivalent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An int representing the hash code of this name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of this compound name. Changes to the components of this compound name won\u0027t affect the new copy and vice versa. The clone and this compound name share the same syntax.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-null copy of this compound name."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this CompoundName with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object. If obj is null or not an instance of CompoundName, ClassCastException is thrown. See equals() for what it means for two compound names to be equal. If two compound names are equal, 0 is returned. Ordering of compound names depend on the syntax of the compound name. By default, they follow lexicographical rules for string comparison with the extension that this applies to all the components in the compound name and that comparison of individual components is affected by the jndi.syntax.ignorecase and jndi.syntax.trimblanks properties, identical to how they affect equals(). If this compound name is \"lexicographically\" lesser than obj, a negative number is returned. If this compound name is \"lexicographically\" greater than obj, a positive number is returned. Implementation note: Currently the syntax properties of the two compound names are not compared when checking order. They might be in the future.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/CompoundName.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#compareTo(java.lang.Object)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The non-null object to compare against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if obj is not a CompoundName."
        ],
        "return": [
          "a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "size",
      "comment": "Retrieves the number of components in this compound name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The nonnegative number of components in this compound name."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Determines whether this compound name is empty. A compound name is empty if it has zero components.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this compound name is empty, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAll",
      "comment": "Retrieves the components of this compound name as an enumeration of strings. The effects of updates to this compound name on this enumeration is undefined.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#getAll()\"\u003egetAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-null enumeration of the components of this compound name. Each element of the enumeration is of class String."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Retrieves a component of this compound name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#get(int)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The 0-based index of the component to retrieve. Must be in the range [0,size())."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if posn is outside the specified range."
        ],
        "return": [
          "The component at index posn."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrefix",
      "comment": "Creates a compound name whose components consist of a prefix of the components in this compound name. The result and this compound name share the same syntax. Subsequent changes to this compound name do not affect the name that is returned and vice versa.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#getPrefix(int)\"\u003egetPrefix\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The 0-based index of the component at which to stop. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range."
        ],
        "return": [
          "A compound name consisting of the components at indexes in the range [0,posn)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSuffix",
      "comment": "Creates a compound name whose components consist of a suffix of the components in this compound name. The result and this compound name share the same syntax. Subsequent changes to this compound name do not affect the name that is returned.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#getSuffix(int)\"\u003egetSuffix\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The 0-based index of the component at which to start. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range."
        ],
        "return": [
          "A compound name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty compound name is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "startsWith",
      "comment": "Determines whether a compound name is a prefix of this compound name. A compound name \u0027n\u0027 is a prefix if it is equal to getPrefix(n.size())--in other words, this compound name starts with \u0027n\u0027. If n is null or not a compound name, false is returned. Implementation note: Currently the syntax properties of n are not used when doing the comparison. They might be in the future.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#startsWith(javax.naming.Name)\"\u003estartsWith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The possibly null compound name to check."
        ],
        "return": [
          "true if n is a CompoundName and is a prefix of this compound name, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "endsWith",
      "comment": "Determines whether a compound name is a suffix of this compound name. A compound name \u0027n\u0027 is a suffix if it is equal to getSuffix(size()-n.size())--in other words, this compound name ends with \u0027n\u0027. If n is null or not a compound name, false is returned. Implementation note: Currently the syntax properties of n are not used when doing the comparison. They might be in the future.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#endsWith(javax.naming.Name)\"\u003eendsWith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The possibly null compound name to check."
        ],
        "return": [
          "true if n is a CompoundName and is a suffix of this compound name, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "suffix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAll",
      "comment": "Adds the components of a compound name -- in order -- to the end of this compound name. Implementation note: Currently the syntax properties of suffix is not used or checked. They might be in the future.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#addAll(javax.naming.Name)\"\u003eaddAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esuffix\u003c/code\u003e - The non-null components to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If suffix is not a compound name, or if the addition of the components violates the syntax of this compound name (e.g. exceeding number of components)."
        ],
        "return": [
          "The updated CompoundName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.naming.Name",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAll",
      "comment": "Adds the components of a compound name -- in order -- at a specified position within this compound name. Components of this compound name at or after the index of the first new component are shifted up (away from index 0) to accommodate the new components. Implementation note: Currently the syntax properties of suffix is not used or checked. They might be in the future.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#addAll(int,javax.naming.Name)\"\u003eaddAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The non-null components to add.",
          "\u003ccode\u003eposn\u003c/code\u003e - The index in this name at which to add the new components. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If n is not a compound name, or if the addition of the components violates the syntax of this compound name (e.g. exceeding number of components)."
        ],
        "return": [
          "The updated CompoundName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds a single component to the end of this compound name.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#add(java.lang.String)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - The non-null component to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If adding comp at end of the name would violate the compound name\u0027s syntax."
        ],
        "return": [
          "The updated CompoundName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.naming.Name",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds a single component at a specified position within this compound name. Components of this compound name at or after the index of the new component are shifted up by one (away from index 0) to accommodate the new component.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#add(int,java.lang.String)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - The non-null component to add.",
          "\u003ccode\u003eposn\u003c/code\u003e - The index at which to add the new component. Must be in the range [0,size()]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If adding comp at the specified position would violate the compound name\u0027s syntax."
        ],
        "return": [
          "The updated CompoundName, not a new one. Cannot be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "posn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Deletes a component from this compound name. The component of this compound name at position \u0027posn\u0027 is removed, and components at indices greater than \u0027posn\u0027 are shifted down (towards index 0) by one.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html#remove(int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/Name.html\" title\u003d\"interface in javax.naming\"\u003eName\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposn\u003c/code\u003e - The index of the component to delete. Must be in the range [0,size())."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If posn is outside the specified range (includes case where compound name is empty).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If deleting the component would violate the compound name\u0027s syntax."
        ],
        "return": [
          "The component removed (a String)."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Enumeration",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "comps",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Properties",
            "type": "Class"
          },
          "name": "syntax",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new compound name instance using the components specified in comps and syntax. This protected method is intended to be used by subclasses of CompoundName when they override methods such as clone(), getPrefix(), getSuffix().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomps\u003c/code\u003e - A non-null enumeration of the components to add. Each element of the enumeration is of class String. The enumeration will be consumed to extract its elements.",
          "\u003ccode\u003esyntax\u003c/code\u003e - A non-null properties that specify the syntax of this compound name. See class description for contents of properties."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.naming.InvalidNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Properties",
            "type": "Class"
          },
          "name": "syntax",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new compound name instance by parsing the string n using the syntax specified by the syntax properties supplied.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The non-null string to parse.",
          "\u003ccode\u003esyntax\u003c/code\u003e - A non-null list of properties that specify the syntax of this compound name. See class description for contents of properties."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.naming/javax/naming/InvalidNameException.html\" title\u003d\"class in javax.naming\"\u003eInvalidNameException\u003c/a\u003e\u003c/code\u003e - If \u0027n\u0027 violates the syntax specified by \n\u003ccode\u003esyntax\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.naming.CompoundName",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.naming.CompoundName\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}