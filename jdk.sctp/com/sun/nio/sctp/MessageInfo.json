{
  "packageName": "com.sun.nio.sctp",
  "simpleName": "MessageInfo",
  "moduleName": "jdk.sctp",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "streamNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createOutgoing",
      "comment": "Creates a MessageInfo instance suitable for use when sending a message. The returned instance will have its unordered value set to false, its timeToLive value set to 0, its complete value set to true, and its payloadProtocolID value set to 0. These values, if required, can be set through the appropriate setter method before sending the message.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - For a connected \n\u003ccode\u003eSctpChannel\u003c/code\u003e the address is the preferred peer address of the association to send the message to, or \n\u003ccode\u003enull\u003c/code\u003e to use the peer primary address. For an \n\u003ccode\u003eSctpMultiChannel\u003c/code\u003e the address is used to determine the association, or if no association exists with a peer of that address then one is setup.",
          "\u003ccode\u003estreamNumber\u003c/code\u003e - The stream number that the message will be sent on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the streamNumber is negative or greater than \n\u003ccode\u003e65536\u003c/code\u003e"
        ],
        "return": [
          "The outgoing message info"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "com.sun.nio.sctp.Association",
            "type": "Class"
          },
          "field": {
            "name": "association"
          }
        },
        {
          "type": {
            "name": "java.net.SocketAddress",
            "type": "Class"
          },
          "field": {
            "name": "address"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "streamNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createOutgoing",
      "comment": "Creates a MessageInfo instance suitable for use when sending a message to a given association. Typically used for SctpMultiChannel when an association has already been setup. The returned instance will have its unordered value set to false, its timeToLive value set to 0, its complete value set to true, and its payloadProtocolID value set to 0. These values, if required, can be set through the appropriate setter method before sending the message.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eassociation\u003c/code\u003e - The association to send the message on",
          "\u003ccode\u003eaddress\u003c/code\u003e - The preferred peer address of the association to send the message to, or \n\u003ccode\u003enull\u003c/code\u003e to use the peer primary address",
          "\u003ccode\u003estreamNumber\u003c/code\u003e - The stream number that the message will be sent on."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eassociation\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the streamNumber is negative or greater than \n\u003ccode\u003e65536\u003c/code\u003e"
        ],
        "return": [
          "The outgoing message info"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.SocketAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "address",
      "comment": "Returns the source socket address if the message has been received, otherwise the preferred destination of the message to be sent.",
      "tagMap": {
        "return": [
          "The socket address, or \n\u003ccode\u003enull\u003c/code\u003e if this instance is to be used for sending a message and has been construced without specifying a preferred destination address"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.Association",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "association",
      "comment": "Returns the association that the message was received on, if the message has been received, otherwise the association that the message is to be sent on.",
      "tagMap": {
        "return": [
          "The association, or \n\u003ccode\u003enull\u003c/code\u003e if this instance is to be used for sending a message and has been construced using the the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.sctp/com/sun/nio/sctp/MessageInfo.html#createOutgoing(java.net.SocketAddress,int)\"\u003e\u003ccode\u003ecreateOutgoing(SocketAddress,int)\u003c/code\u003e\u003c/a\u003e static factory method"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "bytes",
      "comment": "Returns the number of bytes read for the received message. This method is only appicable for received messages, it has no meaning for messages being sent.",
      "tagMap": {
        "return": [
          "The number of bytes read, \n\u003ccode\u003e-1\u003c/code\u003e if the channel is an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.sctp/com/sun/nio/sctp/SctpChannel.html\" title\u003d\"class in com.sun.nio.sctp\"\u003e\u003ccode\u003eSctpChannel\u003c/code\u003e\u003c/a\u003e that has reached end-of-stream, otherwise \n\u003ccode\u003e0\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isComplete",
      "comment": "Tells whether or not the message is complete. For received messages true indicates that the message was completely received. For messages being sent true indicates that the message is complete, false indicates that the message is not complete. How the send channel interprets this value depends on the value of its SCTP_EXPLICIT_COMPLETE socket option.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the message is complete"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "complete"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "complete",
      "comment": "Sets whether or not the message is complete. For messages being sent true indicates that the message is complete, false indicates that the message is not complete. How the send channel interprets this value depends on the value of its SCTP_EXPLICIT_COMPLETE socket option.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.sctp/com/sun/nio/sctp/MessageInfo.html#isComplete()\"\u003e\u003ccode\u003eisComplete()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomplete\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if, and only if, the message is complete"
        ],
        "return": [
          "This MessageInfo"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isUnordered",
      "comment": "Tells whether or not the message is unordered. For received messages true indicates that the message was sent non-ordered. For messages being sent true requests the un-ordered delivery of the message, false indicates that the message is ordered.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the message is unordered, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "unordered"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "unordered",
      "comment": "Sets whether or not the message is unordered.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.sctp/com/sun/nio/sctp/MessageInfo.html#isUnordered()\"\u003e\u003ccode\u003eisUnordered()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eunordered\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e requests the un-ordered delivery of the message, \n\u003ccode\u003efalse\u003c/code\u003e indicates that the message is ordered."
        ],
        "return": [
          "This MessageInfo"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "payloadProtocolID",
      "comment": "Returns the payload protocol Identifier. A value indicating the type of payload protocol data being transmitted/received. This value is passed as opaque data by SCTP. 0 indicates an unspecified payload protocol identifier.",
      "tagMap": {
        "return": [
          "The Payload Protocol Identifier"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ppid"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "payloadProtocolID",
      "comment": "Sets the payload protocol Identifier. A value indicating the type of payload protocol data being transmitted. This value is passed as opaque data by SCTP.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.sctp/com/sun/nio/sctp/MessageInfo.html#payloadProtocolID()\"\u003e\u003ccode\u003epayloadProtocolID()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eppid\u003c/code\u003e - The Payload Protocol Identifier, or \n\u003ccode\u003e0\u003c/code\u003e indicate an unspecified payload protocol identifier."
        ],
        "return": [
          "This MessageInfo"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "streamNumber",
      "comment": "Returns the stream number that the message was received on, if the message has been received, otherwise the stream number that the message is to be sent on.",
      "tagMap": {
        "return": [
          "The stream number"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "streamNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "streamNumber",
      "comment": "Sets the stream number that the message is to be sent on.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamNumber\u003c/code\u003e - The stream number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the streamNumber is negative or greater than \n\u003ccode\u003e65536\u003c/code\u003e"
        ],
        "return": [
          "This MessageInfo"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "timeToLive",
      "comment": "The time period that the sending side may expire the message if it has not been sent, or 0 to indicate that no timeout should occur. This value is only applicable for messages being sent, it has no meaning for received messages.",
      "tagMap": {
        "return": [
          "The time period in milliseconds, or \n\u003ccode\u003e0\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.nio.sctp.MessageInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "timeToLive",
      "comment": "Sets the time period that the sending side may expire the message if it has not been sent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.sctp/com/sun/nio/sctp/MessageInfo.html#timeToLive()\"\u003e\u003ccode\u003etimeToLive()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - The time period in milliseconds, or \n\u003ccode\u003e0\u003c/code\u003e to indicate that no timeout should occur"
        ],
        "return": [
          "This MessageInfo"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.nio.sctp.MessageInfo",
  "comment": "The \n\u003ccode\u003eMessageInfo\u003c/code\u003e class provides additional ancillary information about messages. \n\u003cp\u003e Received SCTP messages, returned by \u003ca href\u003d\"SctpChannel.html#receive(java.nio.ByteBuffer,T,com.sun.nio.sctp.NotificationHandler)\"\u003e\u003ccode\u003eSctpChannel.receive\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SctpMultiChannel.html#receive(java.nio.ByteBuffer,T,com.sun.nio.sctp.NotificationHandler)\"\u003e\u003ccode\u003eSctpMultiChannel.receive\u003c/code\u003e\u003c/a\u003e, return a \u003ccode\u003eMessageInfo\u003c/code\u003e instance that can be queried to determine ancillary information about the received message. Messages being sent should use one of the \u003ca href\u003d\"#createOutgoing(java.net.SocketAddress,int)\"\u003e\u003ccode\u003ecreateOutgoing\u003c/code\u003e\u003c/a\u003e methods to provide ancillary data for the message being sent, and may use the appropriate setter methods to override the default values provided for \u003ca href\u003d\"#isUnordered()\"\u003e\u003ccode\u003eunordered\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#timeToLive()\"\u003e\u003ccode\u003etimeToLive\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#isComplete()\"\u003e\u003ccode\u003ecomplete\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#payloadProtocolID()\"\u003e\u003ccode\u003epayloadProtocolID\u003c/code\u003e\u003c/a\u003e, before sending the message. \u003c/p\u003e\n\u003cp\u003e For out going messages the \u003ccode\u003etimeToLive\u003c/code\u003e parameter is a time period that the sending side SCTP stack may expire the message if it has not been sent. This time period is an indication to the stack that the message is no longer required to be sent after the time period expires. It is not a hard timeout and may be influenced by whether the association supports the partial reliability extension, \u003ca href\u003d\"http://www.ietf.org/rfc/rfc3758.txt\"\u003eRFC 3758 \u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eMessageInfo\u003c/code\u003e instances are not safe for use by multiple concurrent threads. If a MessageInfo is to be used by more than one thread then access to the MessageInfo should be controlled by appropriate synchronization.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}