{
  "packageName": "jdk.net",
  "simpleName": "ExtendedSocketOptions",
  "moduleName": "jdk.net",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.net.SocketOption",
        "parameters": [
          {
            "name": "java.lang.Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TCP_QUICKACK",
      "comment": "Disable Delayed Acknowledgements. This socket option can be used to reduce or disable delayed acknowledgments (ACKs). When TCP_QUICKACK is enabled, ACKs are sent immediately, rather than delayed if needed in accordance to normal TCP operation. This option is not permanent, it only enables a switch to or from TCP_QUICKACK mode. Subsequent operations of the TCP protocol will once again disable/enable TCP_QUICKACK mode depending on internal protocol processing and factors such as delayed ACK timeouts occurring and data transfer, therefore this option needs to be set with setOption after each operation of TCP on a given socket. The value of this socket option is a Boolean that represents whether the option is enabled or disabled. The socket option is specific to stream-oriented sockets using the TCP/IP protocol. The exact semantics of this socket option are socket type and system dependent.",
      "annotations": [],
      "tagMap": {
        "since": [
          "10"
        ]
      }
    },
    {
      "type": {
        "name": "java.net.SocketOption",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TCP_KEEPIDLE",
      "comment": "Keep-Alive idle time. The value of this socket option is an Integer that is the number of seconds of idle time before keep-alive initiates a probe. The socket option is specific to stream-oriented sockets using the TCP/IP protocol. The exact semantics of this socket option are system dependent. When the SO_KEEPALIVE option is enabled, TCP probes a connection that has been idle for some amount of time. The default value for this idle period is system dependent, but is typically 2 hours. The TCP_KEEPIDLE option can be used to affect this value for a given socket.",
      "annotations": [],
      "tagMap": {
        "since": [
          "11"
        ]
      }
    },
    {
      "type": {
        "name": "java.net.SocketOption",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TCP_KEEPINTERVAL",
      "comment": "Keep-Alive retransmission interval time. The value of this socket option is an Integer that is the number of seconds to wait before retransmitting a keep-alive probe. The socket option is specific to stream-oriented sockets using the TCP/IP protocol. The exact semantics of this socket option are system dependent. When the SO_KEEPALIVE option is enabled, TCP probes a connection that has been idle for some amount of time. If the remote system does not respond to a keep-alive probe, TCP retransmits the probe after some amount of time. The default value for this retransmission interval is system dependent, but is typically 75 seconds. The TCP_KEEPINTERVAL option can be used to affect this value for a given socket.",
      "annotations": [],
      "tagMap": {
        "since": [
          "11"
        ]
      }
    },
    {
      "type": {
        "name": "java.net.SocketOption",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TCP_KEEPCOUNT",
      "comment": "Keep-Alive retransmission maximum limit. The value of this socket option is an Integer that is the maximum number of keep-alive probes to be sent. The socket option is specific to stream-oriented sockets using the TCP/IP protocol. The exact semantics of this socket option are system dependent. When the SO_KEEPALIVE option is enabled, TCP probes a connection that has been idle for some amount of time. If the remote system does not respond to a keep-alive probe, TCP retransmits the probe a certain number of times before a connection is considered to be broken. The default value for this keep-alive probe retransmit limit is system dependent, but is typically 8. The TCP_KEEPCOUNT option can be used to affect this value for a given socket.",
      "annotations": [],
      "tagMap": {
        "since": [
          "11"
        ]
      }
    },
    {
      "type": {
        "name": "java.net.SocketOption",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SO_INCOMING_NAPI_ID",
      "comment": "Identifies the receive queue that the last incoming packet for the socket was received on. The value of this socket option is a positive Integer that identifies a receive queue that the application can use to split the incoming flows among threads based on the queue identifier. The value is 0 when the socket is not bound, a packet has not been received, or more generally, when there is no receive queue to identify. The socket option is supported by both stream-oriented and datagram-oriented sockets. The socket option is read-only and an attempt to set the socket option will throw SocketException.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "Network devices may have multiple queues or channels to transmit and receive network packets. The \n\u003ccode\u003eSO_INCOMING_NAPI_ID\u003c/code\u003e socket option provides a hint to the application to indicate the receive queue on which an incoming socket connection or packets for that connection are directed to. An application may take advantage of this by handling all socket connections assigned to a specific queue on one thread."
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "type": {
        "name": "java.net.SocketOption",
        "parameters": [
          {
            "name": "jdk.net.UnixDomainPrincipal",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SO_PEERCRED",
      "comment": "Unix Domain peer credentials. The value of this socket option is a UnixDomainPrincipal that represents the credentials of a peer connected to a Unix Domain socket. The credentials are those that applied at the time the socket was first connected or accepted. The socket option is read-only and an attempt to set the socket option will throw SocketException. SocketException is also thrown when attempting to get the value of the socket option on an unconnected Unix Domain socket.",
      "annotations": [],
      "tagMap": {
        "since": [
          "16"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.net.ExtendedSocketOptions",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}