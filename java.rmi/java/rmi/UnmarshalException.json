{
  "packageName": "java.rmi",
  "simpleName": "UnmarshalException",
  "moduleName": "java.rmi",
  "type": "CLASS",
  "superClass": {
    "name": "java.rmi.RemoteException",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an UnmarshalException with the specified detail message.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the detail message"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.lang.Exception",
            "type": "Class"
          },
          "field": {
            "name": "ex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an UnmarshalException with the specified detail message and nested exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the detail message",
          "\u003ccode\u003eex\u003c/code\u003e - the nested exception"
        ],
        "since": [
          "1.1"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.rmi.UnmarshalException",
  "comment": "An \n\u003ccode\u003eUnmarshalException\u003c/code\u003e can be thrown while unmarshalling the parameters or results of a remote method call if any of the following conditions occur: \n\u003cul\u003e \n \u003cli\u003e if an exception occurs while unmarshalling the call header \u003c/li\u003e\n \u003cli\u003e if the protocol for the return value is invalid \u003c/li\u003e\n \u003cli\u003e if a \u003ccode\u003ejava.io.IOException\u003c/code\u003e occurs unmarshalling parameters (on the server side) or the return value (on the client side). \u003c/li\u003e\n \u003cli\u003e if a \u003ccode\u003ejava.lang.ClassNotFoundException\u003c/code\u003e occurs during unmarshalling parameters or return values \u003c/li\u003e\n \u003cli\u003e if no skeleton can be loaded on the server-side; note that skeletons are required in the 1.1 stub protocol, but not in the 1.2 stub protocol. \u003c/li\u003e\n \u003cli\u003e if the method hash is invalid (i.e., missing method). \u003c/li\u003e\n \u003cli\u003e if there is a failure to create a remote reference object for a remote object\u0027s stub when it is unmarshalled. \u003c/li\u003e\n\u003c/ul\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.rmi.UnmarshalException\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}