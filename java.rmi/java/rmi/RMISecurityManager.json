{
  "packageName": "java.rmi",
  "simpleName": "RMISecurityManager",
  "moduleName": "java.rmi",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.SecurityManager",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new RMISecurityManager.",
      "tagMap": {
        "since": [
          "1.1"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.rmi.RMISecurityManager",
  "comment": "\u003ccode\u003eRMISecurityManager\u003c/code\u003e implements a policy identical to the policy implemented by \n\u003ca href\u003d\"../../../java.base/java/lang/SecurityManager.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e\u003c/a\u003e. RMI applications should use the \n\u003ccode\u003eSecurityManager\u003c/code\u003e class or another appropriate \n\u003ccode\u003eSecurityManager\u003c/code\u003e implementation instead of this class. RMI\u0027s class loader will download classes from remote locations only if a security manager has been set.",
  "tagMap": {
    "implNote": [
      "\u003cp\u003eApplets typically run in a container that already has a security manager, so there is generally no need for applets to set a security manager. If you have a standalone application, you might need to set a \u003ccode\u003eSecurityManager\u003c/code\u003e in order to enable class downloading. This can be done by adding the following to your code. (It needs to be executed before RMI can download code from remote hosts, so it most likely needs to appear in the \u003ccode\u003emain\u003c/code\u003e method of your application.) \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    if (System.getSecurityManager() \u003d\u003d null) {\n        System.setSecurityManager(new SecurityManager());\n    }\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}