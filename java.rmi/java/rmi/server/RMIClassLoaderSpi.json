{
  "packageName": "java.rmi.server",
  "simpleName": "RMIClassLoaderSpi",
  "moduleName": "java.rmi",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "defaultLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "loadClass",
      "comment": "Provides the implementation for RMIClassLoader.loadClass(URL,String), RMIClassLoader.loadClass(String,String), and RMIClassLoader.loadClass(String,String,ClassLoader). Loads a class from a codebase URL path, optionally using the supplied loader. Typically, a provider implementation will attempt to resolve the named class using the given defaultLoader, if specified, before attempting to resolve the class from the codebase URL path. An implementation of this method must either return a class with the given name or throw an exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (separated by spaces) to load the class from, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the class to load",
          "\u003ccode\u003edefaultLoader\u003c/code\u003e - additional contextual class loader to use, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for the class could not be found at the specified location"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object representing the loaded class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "interfaces"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "defaultLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "loadProxyClass",
      "comment": "Provides the implementation for RMIClassLoader.loadProxyClass(String,String[],ClassLoader). Loads a dynamic proxy class (see Proxy that implements a set of interfaces with the given names from a codebase URL path, optionally using the supplied loader. An implementation of this method must either return a proxy class that implements the named interfaces or throw an exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (space-separated) to load classes from, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003einterfaces\u003c/code\u003e - the names of the interfaces for the proxy class to implement",
          "\u003ccode\u003edefaultLoader\u003c/code\u003e - additional contextual class loader to use, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for one of the named interfaces could not be found at the specified location, or if creation of the dynamic proxy class failed (such as if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#getProxyClass(java.lang.ClassLoader,java.lang.Class...)\"\u003e\u003ccode\u003eProxy.getProxyClass(ClassLoader,Class[])\u003c/code\u003e\u003c/a\u003e would throw an \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e for the given interface list)"
        ],
        "return": [
          "a dynamic proxy class that implements the named interfaces"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ClassLoader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getClassLoader",
      "comment": "Provides the implementation for RMIClassLoader.getClassLoader(String). Returns a class loader that loads classes from the given codebase URL path. If there is a security manger, its checkPermission method will be invoked with a RuntimePermission(\"getClassLoader\") permission; this could result in a SecurityException. The implementation of this method may also perform further security checks to verify that the calling context has permission to connect to all of the URLs in the codebase URL path.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (space-separated) from which the returned class loader will load classes from, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to identify the class loader is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if there is a security manager and the invocation of its \n\u003ccode\u003echeckPermission\u003c/code\u003e method fails, or if the caller does not have permission to connect to all of the URLs in the codebase URL path"
        ],
        "return": [
          "a class loader that loads classes from the given codebase URL path"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "cl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getClassAnnotation",
      "comment": "Provides the implementation for RMIClassLoader.getClassAnnotation(Class). Returns the annotation string (representing a location for the class definition) that RMI will use to annotate the class descriptor when marshalling objects of the given class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecl\u003c/code\u003e - the class to obtain the annotation for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecl\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a string to be used to annotate the given class when it gets marshalled, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.rmi.server.RMIClassLoaderSpi",
  "comment": "\u003ccode\u003eRMIClassLoaderSpi\u003c/code\u003e is the service provider interface for \n\u003ccode\u003eRMIClassLoader\u003c/code\u003e. In particular, an \n\u003ccode\u003eRMIClassLoaderSpi\u003c/code\u003e instance provides an implementation of the following static methods of \n\u003ccode\u003eRMIClassLoader\u003c/code\u003e: \n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"RMIClassLoader.html#loadClass(java.net.URL,java.lang.String)\"\u003e\u003ccode\u003eRMIClassLoader.loadClass(URL,String)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"RMIClassLoader.html#loadClass(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eRMIClassLoader.loadClass(String,String)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"RMIClassLoader.html#loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)\"\u003e\u003ccode\u003eRMIClassLoader.loadClass(String,String,ClassLoader)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"RMIClassLoader.html#loadProxyClass(java.lang.String,java.lang.String%5B%5D,java.lang.ClassLoader)\"\u003e\u003ccode\u003eRMIClassLoader.loadProxyClass(String,String[],ClassLoader)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"RMIClassLoader.html#getClassLoader(java.lang.String)\"\u003e\u003ccode\u003eRMIClassLoader.getClassLoader(String)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"RMIClassLoader.html#getClassAnnotation(java.lang.Class)\"\u003e\u003ccode\u003eRMIClassLoader.getClassAnnotation(Class)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e When one of those methods is invoked, its behavior is to delegate to a corresponding method on an instance of this class. The details of how each method delegates to the provider instance is described in the documentation for each particular method. See the documentation for \n\u003ca href\u003d\"RMIClassLoader.html\" title\u003d\"class in java.rmi.server\"\u003e\u003ccode\u003eRMIClassLoader\u003c/code\u003e\u003c/a\u003e for a description of how a provider instance is chosen.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.rmi/java/rmi/server/RMIClassLoader.html\" title\u003d\"class in java.rmi.server\"\u003e\u003ccode\u003eRMIClassLoader\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}