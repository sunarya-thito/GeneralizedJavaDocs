{
  "packageName": "java.rmi.server",
  "simpleName": "RMIClassLoader",
  "moduleName": "java.rmi",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadClass",
      "comment": "Loads the class with the specified name. This method delegates to loadClass(String,String), passing null as the first argument and name as the second argument.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.rmi/java/rmi/server/RMIClassLoader.html#loadClass(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eloadClass(String,String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the class to load"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for the class could not be found at the codebase location"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object representing the loaded class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadClass",
      "comment": "Loads a class from a codebase URL. If codebase is null, then this method will behave the same as loadClass(String,String) with a null codebase and the given class name. This method delegates to the RMIClassLoaderSpi.loadClass(String,String,ClassLoader) method of the provider instance, passing the result of invoking URL.toString() on the given URL (or null if codebase is null) as the first argument, name as the second argument, and null as the third argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the URL to load the class from, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the class to load"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for the class could not be found at the specified URL"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object representing the loaded class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadClass",
      "comment": "Loads a class from a codebase URL path. This method delegates to the RMIClassLoaderSpi.loadClass(String,String,ClassLoader) method of the provider instance, passing codebase as the first argument, name as the second argument, and null as the third argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (separated by spaces) to load the class from, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the class to load"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for the class could not be found at the specified location"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object representing the loaded class"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "defaultLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadClass",
      "comment": "Loads a class from a codebase URL path, optionally using the supplied loader. This method should be used when the caller would like to make available to the provider implementation an additional contextual class loader to consider, such as the loader of a caller on the stack. Typically, a provider implementation will attempt to resolve the named class using the given defaultLoader, if specified, before attempting to resolve the class from the codebase URL path. This method delegates to the RMIClassLoaderSpi.loadClass(String,String,ClassLoader) method of the provider instance, passing codebase as the first argument, name as the second argument, and defaultLoader as the third argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (separated by spaces) to load the class from, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the class to load",
          "\u003ccode\u003edefaultLoader\u003c/code\u003e - additional contextual class loader to use, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for the class could not be found at the specified location"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object representing the loaded class"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "interfaces"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "defaultLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadProxyClass",
      "comment": "Loads a dynamic proxy class (see Proxy) that implements a set of interfaces with the given names from a codebase URL path. The interfaces will be resolved similar to classes loaded via the loadClass(String,String) method using the given codebase. This method delegates to the RMIClassLoaderSpi.loadProxyClass(String,String[],ClassLoader) method of the provider instance, passing codebase as the first argument, interfaces as the second argument, and defaultLoader as the third argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (space-separated) to load classes from, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003einterfaces\u003c/code\u003e - the names of the interfaces for the proxy class to implement",
          "\u003ccode\u003edefaultLoader\u003c/code\u003e - additional contextual class loader to use, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to load classes is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if a definition for one of the named interfaces could not be found at the specified location, or if creation of the dynamic proxy class failed (such as if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#getProxyClass(java.lang.ClassLoader,java.lang.Class...)\"\u003e\u003ccode\u003eProxy.getProxyClass(ClassLoader,Class[])\u003c/code\u003e\u003c/a\u003e would throw an \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e for the given interface list)"
        ],
        "return": [
          "a dynamic proxy class that implements the named interfaces"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ClassLoader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        },
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getClassLoader",
      "comment": "Returns a class loader that loads classes from the given codebase URL path. The class loader returned is the class loader that the loadClass(String,String) method would use to load classes for the same codebase argument. This method delegates to the RMIClassLoaderSpi.getClassLoader(String) method of the provider instance, passing codebase as the argument. If there is a security manger, its checkPermission method will be invoked with a RuntimePermission(\"getClassLoader\") permission; this could result in a SecurityException. The provider implementation of this method may also perform further security checks to verify that the calling context has permission to connect to all of the URLs in the codebase URL path.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodebase\u003c/code\u003e - the list of URLs (space-separated) from which the returned class loader will load classes from, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecodebase\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and contains an invalid URL, or if \n\u003ccode\u003ecodebase\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and a provider-specific URL used to identify the class loader is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if there is a security manager and the invocation of its \n\u003ccode\u003echeckPermission\u003c/code\u003e method fails, or if the caller does not have permission to connect to all of the URLs in the codebase URL path"
        ],
        "return": [
          "a class loader that loads classes from the given codebase URL path"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "cl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getClassAnnotation",
      "comment": "Returns the annotation string (representing a location for the class definition) that RMI will use to annotate the class descriptor when marshalling objects of the given class. This method delegates to the RMIClassLoaderSpi.getClassAnnotation(Class) method of the provider instance, passing cl as the argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecl\u003c/code\u003e - the class to obtain the annotation for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecl\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a string to be used to annotate the given class when it gets marshalled, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.rmi.server.RMIClassLoaderSpi",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultProviderInstance",
      "comment": "Returns the canonical instance of the default provider for the service provider interface RMIClassLoaderSpi. If the system property java.rmi.server.RMIClassLoaderSpi is not defined, then the RMIClassLoader static methods loadClass(URL,String) loadClass(String,String) loadClass(String,String,ClassLoader) loadProxyClass(String,String[],ClassLoader) getClassLoader(String) getClassAnnotation(Class) will use the canonical instance of the default provider as the service provider instance. If there is a security manager, its checkPermission method will be invoked with a RuntimePermission(\"setFactory\") permission; this could result in a SecurityException. The default service provider instance implements RMIClassLoaderSpi as follows: The getClassAnnotation method returns a String representing the codebase URL path that a remote party should use to download the definition for the specified class. The format of the returned string is a path of URLs separated by spaces. The codebase string returned depends on the defining class loader of the specified class: If the class loader is the system class loader (see ClassLoader.getSystemClassLoader()), a parent of the system class loader such as the loader used for installed extensions, or the bootstrap class loader (which may be represented by null), then the value of the java.rmi.server.codebase property (or possibly an earlier cached value) is returned, or null is returned if that property is not set. Otherwise, if the class loader is an instance of URLClassLoader, then the returned string is a space-separated list of the external forms of the URLs returned by invoking the getURLs methods of the loader. If the URLClassLoader was created by this provider to service an invocation of its loadClass or loadProxyClass methods, then no permissions are required to get the associated codebase string. If it is an arbitrary other URLClassLoader instance, then if there is a security manager, its checkPermission method will be invoked once for each URL returned by the getURLs method, with the permission returned by invoking openConnection().getPermission() on each URL; if any of those invocations throws a SecurityException or an IOException, then the value of the java.rmi.server.codebase property (or possibly an earlier cached value) is returned, or null is returned if that property is not set. Finally, if the class loader is not an instance of URLClassLoader, then the value of the java.rmi.server.codebase property (or possibly an earlier cached value) is returned, or null is returned if that property is not set. For the implementations of the methods described below, which all take a String parameter named codebase that is a space-separated list of URLs, each invocation has an associated codebase loader that is identified using the codebase argument in conjunction with the current thread\u0027s context class loader (see Thread.getContextClassLoader()). When there is a security manager, this provider maintains an internal table of class loader instances (which are at least instances of URLClassLoader) keyed by the pair of their parent class loader and their codebase URL path (an ordered list of URLs). If the codebase argument is null, the codebase URL path is the value of the system property java.rmi.server.codebase or possibly an earlier cached value. For a given codebase URL path passed as the codebase argument to an invocation of one of the below methods in a given context, the codebase loader is the loader in the table with the specified codebase URL path and the current thread\u0027s context class loader as its parent. If no such loader exists, then one is created and added to the table. The table does not maintain strong references to its contained loaders, in order to allow them and their defined classes to be garbage collected when not otherwise reachable. In order to prevent arbitrary untrusted code from being implicitly loaded into a virtual machine with no security manager, if there is no security manager set, the codebase loader is just the current thread\u0027s context class loader (the supplied codebase URL path is ignored, so remote class loading is disabled). The getClassLoader method returns the codebase loader for the specified codebase URL path. If there is a security manager, then if the calling context does not have permission to connect to all of the URLs in the codebase URL path, a SecurityException will be thrown. The loadClass method attempts to load the class with the specified name as follows: If the defaultLoader argument is non-null, it first attempts to load the class with the specified name using the defaultLoader, such as by evaluating      Class.forName(name, false, defaultLoader)\n If the class is successfully loaded from the defaultLoader, that class is returned. If an exception other than ClassNotFoundException is thrown, that exception is thrown to the caller. Next, the loadClass method attempts to load the class with the specified name using the codebase loader for the specified codebase URL path. If there is a security manager, then the calling context must have permission to connect to all of the URLs in the codebase URL path; otherwise, the current thread\u0027s context class loader will be used instead of the codebase loader. The loadProxyClass method attempts to return a dynamic proxy class with the named interface as follows: If the defaultLoader argument is non-null and all of the named interfaces can be resolved through that loader, then, if all of the resolved interfaces are public, then it first attempts to obtain a dynamic proxy class (using Proxy.getProxyClass) for the resolved interfaces defined in the codebase loader; if that attempt throws an IllegalArgumentException, it then attempts to obtain a dynamic proxy class for the resolved interfaces defined in the defaultLoader. If both attempts throw IllegalArgumentException, then this method throws a ClassNotFoundException. If any other exception is thrown, that exception is thrown to the caller. if all of the non-public resolved interfaces are defined in the same class loader, then it attempts to obtain a dynamic proxy class for the resolved interfaces defined in that loader. otherwise, a LinkageError is thrown (because a class that implements all of the specified interfaces cannot be defined in any loader). Otherwise, if all of the named interfaces can be resolved through the codebase loader, then, if all of the resolved interfaces are public, then it attempts to obtain a dynamic proxy class for the resolved interfaces in the codebase loader. If the attempt throws an IllegalArgumentException, then this method throws a ClassNotFoundException. if all of the non-public resolved interfaces are defined in the same class loader, then it attempts to obtain a dynamic proxy class for the resolved interfaces defined in that loader. otherwise, a LinkageError is thrown (because a class that implements all of the specified interfaces cannot be defined in any loader). Otherwise, a ClassNotFoundException is thrown for one of the named interfaces that could not be resolved.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if there is a security manager and the invocation of its \n\u003ccode\u003echeckPermission\u003c/code\u003e method fails"
        ],
        "return": [
          "the canonical instance of the default service provider"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSecurityContext",
      "comment": "Returns the security context of the given class loader.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#getSecurityContext()\"\u003e\u003ccode\u003eSecurityManager.getSecurityContext()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eloader\u003c/code\u003e - a class loader from which to get the security context"
        ],
        "return": [
          "the security context"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.rmi.server.RMIClassLoader",
  "comment": "\u003ccode\u003eRMIClassLoader\u003c/code\u003e comprises static methods to support dynamic class loading with RMI. Included are methods for loading classes from a network location (one or more URLs) and obtaining the location from which an existing class should be loaded by remote parties. These methods are used by the RMI runtime when marshalling and unmarshalling classes contained in the arguments and return values of remote method calls, and they also may be invoked directly by applications in order to mimic RMI\u0027s dynamic class loading behavior. \n\u003cp\u003eThe implementation of the following static methods \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"#loadClass(java.net.URL,java.lang.String)\"\u003e\u003ccode\u003eloadClass(URL,String)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#loadClass(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eloadClass(String,String)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#loadClass(java.lang.String,java.lang.String,java.lang.ClassLoader)\"\u003e\u003ccode\u003eloadClass(String,String,ClassLoader)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#loadProxyClass(java.lang.String,java.lang.String%5B%5D,java.lang.ClassLoader)\"\u003e\u003ccode\u003eloadProxyClass(String,String[],ClassLoader)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getClassLoader(java.lang.String)\"\u003e\u003ccode\u003egetClassLoader(String)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getClassAnnotation(java.lang.Class)\"\u003e\u003ccode\u003egetClassAnnotation(Class)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e is provided by an instance of \n\u003ca href\u003d\"RMIClassLoaderSpi.html\" title\u003d\"class in java.rmi.server\"\u003e\u003ccode\u003eRMIClassLoaderSpi\u003c/code\u003e\u003c/a\u003e, the service provider interface for those methods. When one of the methods is invoked, its behavior is to delegate to a corresponding method on the service provider instance. The details of how each method delegates to the provider instance is described in the documentation for each particular method. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe service provider instance is chosen as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eIf the system property \u003ccode\u003e\u003cspan id\u003d\"java.rmi.server.RMIClassLoaderSpi\" class\u003d\"search-tag-result\"\u003ejava.rmi.server.RMIClassLoaderSpi\u003c/span\u003e\u003c/code\u003e is defined, then if its value equals the string \u003ccode\u003e\"default\"\u003c/code\u003e, the provider instance will be the value returned by an invocation of the \u003ca href\u003d\"#getDefaultProviderInstance()\"\u003e\u003ccode\u003egetDefaultProviderInstance()\u003c/code\u003e\u003c/a\u003e method, and for any other value, if a class named with the value of the property can be loaded by the system class loader (see \u003ca href\u003d\"../../../../java.base/java/lang/ClassLoader.html#getSystemClassLoader()\"\u003e\u003ccode\u003eClassLoader.getSystemClassLoader()\u003c/code\u003e\u003c/a\u003e) and that class is assignable to \u003ca href\u003d\"RMIClassLoaderSpi.html\" title\u003d\"class in java.rmi.server\"\u003e\u003ccode\u003eRMIClassLoaderSpi\u003c/code\u003e\u003c/a\u003e and has a public no-argument constructor, then that constructor will be invoked to create the provider instance. If the property is defined but any other of those conditions are not true, then an unspecified \u003ccode\u003eError\u003c/code\u003e will be thrown to code that attempts to use \u003ccode\u003eRMIClassLoader\u003c/code\u003e, indicating the failure to obtain a provider instance. \u003c/li\u003e\n \u003cli\u003eIf a resource named \u003ccode\u003eMETA-INF/services/java.rmi.server.RMIClassLoaderSpi\u003c/code\u003e is visible to the system class loader, then the contents of that resource are interpreted as a provider-configuration file, and the first class name specified in that file is used as the provider class name. If a class with that name can be loaded by the system class loader and that class is assignable to \u003ca href\u003d\"RMIClassLoaderSpi.html\" title\u003d\"class in java.rmi.server\"\u003e\u003ccode\u003eRMIClassLoaderSpi\u003c/code\u003e\u003c/a\u003e and has a public no-argument constructor, then that constructor will be invoked to create the provider instance. If the resource is found but a provider cannot be instantiated as described, then an unspecified \u003ccode\u003eError\u003c/code\u003e will be thrown to code that attempts to use \u003ccode\u003eRMIClassLoader\u003c/code\u003e, indicating the failure to obtain a provider instance. \u003c/li\u003e\n \u003cli\u003eOtherwise, the provider instance will be the value returned by an invocation of the \u003ca href\u003d\"#getDefaultProviderInstance()\"\u003e\u003ccode\u003egetDefaultProviderInstance()\u003c/code\u003e\u003c/a\u003e method. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.rmi/java/rmi/server/RMIClassLoaderSpi.html\" title\u003d\"class in java.rmi.server\"\u003e\u003ccode\u003eRMIClassLoaderSpi\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}