{
  "packageName": "java.rmi.dgc",
  "simpleName": "DGC",
  "moduleName": "java.rmi",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.rmi.Remote",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.rmi.dgc.Lease",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.rmi.RemoteException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.rmi.server.ObjID",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "ids"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "sequenceNum"
          }
        },
        {
          "type": {
            "name": "java.rmi.dgc.Lease",
            "type": "Class"
          },
          "field": {
            "name": "lease"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dirty",
      "comment": "The dirty call requests leases for the remote object references associated with the object identifiers contained in the array \u0027ids\u0027. The \u0027lease\u0027 contains a client\u0027s unique VM identifier (VMID) and a requested lease period. For each remote object exported in the local VM, the garbage collector maintains a reference list-a list of clients that hold references to it. If the lease is granted, the garbage collector adds the client\u0027s VMID to the reference list for each remote object indicated in \u0027ids\u0027. The \u0027sequenceNum\u0027 parameter is a sequence number that is used to detect and discard late calls to the garbage collector. The sequence number should always increase for each subsequent call to the garbage collector. Some clients are unable to generate a VMID, since a VMID is a universally unique identifier that contains a host address which some clients are unable to obtain due to security restrictions. In this case, a client can use a VMID of null, and the distributed garbage collector will assign a VMID for the client. The dirty call returns a Lease object that contains the VMID used and the lease period granted for the remote references (a server may decide to grant a smaller lease period than the client requests). A client must use the VMID the garbage collector uses in order to make corresponding clean calls when the client drops remote object references. A client VM need only make one initial dirty call for each remote reference referenced in the VM (even if it has multiple references to the same remote object). The client must also make a dirty call to renew leases on remote references before such leases expire. When the client no longer has any references to a specific remote object, it must schedule a clean call for the object ID associated with the reference.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eids\u003c/code\u003e - IDs of objects to mark as referenced by calling client",
          "\u003ccode\u003esequenceNum\u003c/code\u003e - sequence number",
          "\u003ccode\u003elease\u003c/code\u003e - requested lease"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.rmi/java/rmi/RemoteException.html\" title\u003d\"class in java.rmi\"\u003eRemoteException\u003c/a\u003e\u003c/code\u003e - if dirty call fails"
        ],
        "return": [
          "granted lease"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.rmi.RemoteException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.rmi.server.ObjID",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "ids"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "sequenceNum"
          }
        },
        {
          "type": {
            "name": "java.rmi.dgc.VMID",
            "type": "Class"
          },
          "field": {
            "name": "vmid"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "strong"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clean",
      "comment": "The clean call removes the \u0027vmid\u0027 from the reference list of each remote object indicated in \u0027id\u0027s. The sequence number is used to detect late clean calls. If the argument \u0027strong\u0027 is true, then the clean call is a result of a failed dirty call, thus the sequence number for the client \u0027vmid\u0027 needs to be remembered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eids\u003c/code\u003e - IDs of objects to mark as unreferenced by calling client",
          "\u003ccode\u003esequenceNum\u003c/code\u003e - sequence number",
          "\u003ccode\u003evmid\u003c/code\u003e - client VMID",
          "\u003ccode\u003estrong\u003c/code\u003e - make \u0027strong\u0027 clean call"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.rmi/java/rmi/RemoteException.html\" title\u003d\"class in java.rmi\"\u003eRemoteException\u003c/a\u003e\u003c/code\u003e - if clean call fails"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.rmi.dgc.DGC",
  "comment": "The DGC abstraction is used for the server side of the distributed garbage collection algorithm. This interface contains the two methods: dirty and clean. A dirty call is made when a remote reference is unmarshaled in a client (the client is indicated by its VMID). A corresponding clean call is made when no more references to the remote reference exist in the client. A failed dirty call must schedule a strong clean call so that the call\u0027s sequence number can be retained in order to detect future calls received out of order by the distributed garbage collector. A reference to a remote object is leased for a period of time by the client holding the reference. The lease period starts when the dirty call is received. It is the client\u0027s responsibility to renew the leases, by making additional dirty calls, on the remote references it holds before such leases expire. If the client does not renew the lease before it expires, the distributed garbage collector assumes that the remote object is no longer referenced by that client.",
  "tagMap": {}
}