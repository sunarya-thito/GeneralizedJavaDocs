{
  "packageName": "javax.sound.midi.spi",
  "simpleName": "MidiFileWriter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMidiFileTypes",
      "comment": "Obtains the set of MIDI file types for which file writing support is provided by this file writer.",
      "tagMap": {
        "return": [
          "array of file types. If no file types are supported, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Sequence",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMidiFileTypes",
      "comment": "Obtains the file types that this file writer can write from the sequence specified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esequence\u003c/code\u003e - the sequence for which MIDI file type support is queried"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esequence\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "array of file types. If no file types are supported, returns an array of length 0."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fileType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFileTypeSupported",
      "comment": "Indicates whether file writing support for the specified MIDI file type is provided by this file writer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efileType\u003c/code\u003e - the file type for which write capabilities are queried"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file type is supported, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fileType"
          }
        },
        {
          "type": {
            "name": "javax.sound.midi.Sequence",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFileTypeSupported",
      "comment": "Indicates whether a MIDI file of the file type specified can be written from the sequence indicated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efileType\u003c/code\u003e - the file type for which write capabilities are queried",
          "\u003ccode\u003esequence\u003c/code\u003e - the sequence for which file writing support is queried"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esequence\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file type is supported for this sequence, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Sequence",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fileType"
          }
        },
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "write",
      "comment": "Writes a stream of bytes representing a MIDI file of the file type indicated to the output stream provided.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/spi/MidiFileWriter.html#isFileTypeSupported(int,javax.sound.midi.Sequence)\"\u003e\u003ccode\u003eisFileTypeSupported(int, Sequence)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/spi/MidiFileWriter.html#getMidiFileTypes(javax.sound.midi.Sequence)\"\u003e\u003ccode\u003egetMidiFileTypes(Sequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - sequence containing MIDI data to be written to the file",
          "\u003ccode\u003efileType\u003c/code\u003e - type of the file to be written to the output stream",
          "\u003ccode\u003eout\u003c/code\u003e - stream to which the file data should be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the file type is not supported by this file writer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ein\u003c/code\u003e or \n\u003ccode\u003eout\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the number of bytes written to the output stream"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Sequence",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fileType"
          }
        },
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "write",
      "comment": "Writes a stream of bytes representing a MIDI file of the file type indicated to the external file provided.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/spi/MidiFileWriter.html#isFileTypeSupported(int,javax.sound.midi.Sequence)\"\u003e\u003ccode\u003eisFileTypeSupported(int, Sequence)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/spi/MidiFileWriter.html#getMidiFileTypes(javax.sound.midi.Sequence)\"\u003e\u003ccode\u003egetMidiFileTypes(Sequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - sequence containing MIDI data to be written to the external file",
          "\u003ccode\u003efileType\u003c/code\u003e - type of the file to be written to the external file",
          "\u003ccode\u003eout\u003c/code\u003e - external file to which the file data should be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the file type is not supported by this file writer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ein\u003c/code\u003e or \n\u003ccode\u003eout\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the number of bytes written to the file"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.sound.midi.spi.MidiFileWriter",
  "comment": "A \n\u003ccode\u003eMidiFileWriter\u003c/code\u003e supplies MIDI file-writing services. Classes that implement this interface can write one or more types of MIDI file from a \n\u003ca href\u003d\"../Sequence.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eSequence\u003c/code\u003e\u003c/a\u003e object.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}