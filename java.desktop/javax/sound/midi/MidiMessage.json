{
  "packageName": "javax.sound.midi",
  "simpleName": "MidiMessage",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "data",
      "comment": "The MIDI message data. The first byte is the status byte for the message; subsequent bytes up to the length of the message are data bytes for this message.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiMessage.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "length",
      "comment": "The number of bytes in the MIDI message, including the status byte and any data bytes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiMessage.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sound.midi.InvalidMidiDataException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setMessage",
      "comment": "Sets the data for the MIDI message. This protected method is called by concrete subclasses, which should ensure that the data array specifies a complete, valid MIDI message.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the data bytes in the MIDI message",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the data byte array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/InvalidMidiDataException.html\" title\u003d\"class in javax.sound.midi\"\u003eInvalidMidiDataException\u003c/a\u003e\u003c/code\u003e - if the parameter values do not specify a valid MIDI meta message"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMessage",
      "comment": "Obtains the MIDI message data. The first byte of the returned byte array is the status byte of the message. Any subsequent bytes up to the length of the message are data bytes. The byte array may have a length which is greater than that of the actual message; the total length of the message in bytes is reported by the getLength() method.",
      "tagMap": {
        "return": [
          "the byte array containing the complete \n\u003ccode\u003eMidiMessage\u003c/code\u003e data"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStatus",
      "comment": "Obtains the status byte for the MIDI message. The status \"byte\" is represented as an integer; see the discussion in the MidiMessage class description.",
      "tagMap": {
        "return": [
          "the integer representation of this event\u0027s status byte"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLength",
      "comment": "Obtains the total length of the MIDI message in bytes. A MIDI message consists of one status byte and zero or more data bytes. The return value ranges from 1 for system real-time messages, to 2 or 3 for channel messages, to any value for meta and system exclusive messages.",
      "tagMap": {
        "return": [
          "the length of the message in bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "clone",
      "comment": "Creates a new object of the same class and with the same contents as this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new MidiMessage. This protected constructor is called by concrete subclasses, which should ensure that the data array specifies a complete, valid MIDI message.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiMessage.html#setMessage(byte%5B%5D,int)\"\u003e\u003ccode\u003esetMessage(byte[], int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - an array of bytes containing the complete message. The message data may be changed using the \n\u003ccode\u003esetMessage\u003c/code\u003e method."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.sound.midi.MidiMessage",
  "comment": "\u003ccode\u003eMidiMessage\u003c/code\u003e is the base class for MIDI messages. They include not only the standard MIDI messages that a synthesizer can respond to, but also \"meta-events\" that can be used by sequencer programs. There are meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer\u0027s Association (\n\u003ca href\u003d\"http://www.midi.org\"\u003ehttp://www.midi.org\u003c/a\u003e). \n\u003cp\u003e The base \u003ccode\u003eMidiMessage\u003c/code\u003e class provides access to three types of information about a MIDI message: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe messages\u0027s status byte \u003c/li\u003e\n \u003cli\u003eThe total length of the message in bytes (the status byte plus any data bytes) \u003c/li\u003e\n \u003cli\u003eA byte array containing the complete message \u003c/li\u003e\n\u003c/ul\u003e \n\u003ccode\u003eMidiMessage\u003c/code\u003e includes methods to get, but not set, these values. Setting them is a subclass responsibility. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ca id\u003d\"integersVsBytes\"\u003e\u003c/a\u003eThe MIDI standard expresses MIDI data in bytes. However, because Java uses signed bytes, the Java Sound API uses integers instead of bytes when expressing MIDI data. For example, the \u003ca href\u003d\"#getStatus()\"\u003e\u003ccode\u003egetStatus()\u003c/code\u003e\u003c/a\u003e method of \u003ccode\u003eMidiMessage\u003c/code\u003e returns MIDI status bytes as integers. If you are processing MIDI data that originated outside Java Sound and now is encoded as signed bytes, the bytes can be converted to integers using this conversion: \u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e \u003ccode\u003eint i \u003d (int)(byte \u0026amp; 0xFF)\u003c/code\u003e \u003c/p\u003e\n\u003cp\u003e If you simply need to pass a known MIDI byte value as a method parameter, it can be expressed directly as an integer, using (for example) decimal or hexadecimal notation. For instance, to pass the \"active sensing\" status byte as the first argument to \u003ccode\u003eShortMessage\u003c/code\u003e\u0027s \u003ca href\u003d\"ShortMessage.html#setMessage(int)\"\u003e\u003ccode\u003esetMessage(int)\u003c/code\u003e\u003c/a\u003e method, you can express it as 254 or 0xFE.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Track.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eTrack\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequence.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eSequence\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Receiver.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eReceiver\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}