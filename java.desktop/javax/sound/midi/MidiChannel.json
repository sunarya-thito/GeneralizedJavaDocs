{
  "packageName": "javax.sound.midi",
  "simpleName": "MidiChannel",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "noteNumber"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "velocity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "noteOn",
      "comment": "Starts the specified note sounding. The key-down velocity usually controls the note\u0027s volume and/or brightness. If velocity is zero, this method instead acts like noteOff(int), terminating the note.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#noteOff(int,int)\"\u003e\u003ccode\u003enoteOff(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enoteNumber\u003c/code\u003e - the MIDI note number, from 0 to 127 (60 \u003d Middle C)",
          "\u003ccode\u003evelocity\u003c/code\u003e - the speed with which the key was depressed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "noteNumber"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "velocity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "noteOff",
      "comment": "Turns the specified note off. The key-up velocity, if not ignored, can be used to affect how quickly the note decays. In any case, the note might not die away instantaneously; its decay rate is determined by the internals of the Instrument. If the Hold Pedal (a controller; see controlChange) is down, the effect of this method is deferred until the pedal is released.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#noteOff(int)\"\u003e\u003ccode\u003enoteOff(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#noteOn(int,int)\"\u003e\u003ccode\u003enoteOn(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#allNotesOff()\"\u003e\u003ccode\u003eallNotesOff()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#allSoundOff()\"\u003e\u003ccode\u003eallSoundOff()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enoteNumber\u003c/code\u003e - the MIDI note number, from 0 to 127 (60 \u003d Middle C)",
          "\u003ccode\u003evelocity\u003c/code\u003e - the speed with which the key was released"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "noteNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "noteOff",
      "comment": "Turns the specified note off.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#noteOff(int,int)\"\u003e\u003ccode\u003enoteOff(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enoteNumber\u003c/code\u003e - the MIDI note number, from 0 to 127 (60 \u003d Middle C)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "noteNumber"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pressure"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPolyPressure",
      "comment": "Reacts to a change in the specified note\u0027s key pressure. Polyphonic key pressure allows a keyboard player to press multiple keys simultaneously, each with a different amount of pressure. The pressure, if not ignored, is typically used to vary such features as the volume, brightness, or vibrato of the note. It is possible that the underlying synthesizer does not support this MIDI message. In order to verify that setPolyPressure was successful, use getPolyPressure.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getPolyPressure(int)\"\u003e\u003ccode\u003egetPolyPressure(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enoteNumber\u003c/code\u003e - the MIDI note number, from 0 to 127 (60 \u003d Middle C)",
          "\u003ccode\u003epressure\u003c/code\u003e - value for the specified key, from 0 to 127 (127 \u003d maximum pressure)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "noteNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPolyPressure",
      "comment": "Obtains the pressure with which the specified key is being depressed. If the device does not support setting poly pressure, this method always returns 0. Calling setPolyPressure will have no effect then.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setPolyPressure(int,int)\"\u003e\u003ccode\u003esetPolyPressure(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enoteNumber\u003c/code\u003e - the MIDI note number, from 0 to 127 (60 \u003d Middle C)"
        ],
        "return": [
          "the amount of pressure for that note, from 0 to 127 (127 \u003d maximum pressure)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pressure"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setChannelPressure",
      "comment": "Reacts to a change in the keyboard pressure. Channel pressure indicates how hard the keyboard player is depressing the entire keyboard. This can be the maximum or average of the per-key pressure-sensor values, as set by setPolyPressure. More commonly, it is a measurement of a single sensor on a device that doesn\u0027t implement polyphonic key pressure. Pressure can be used to control various aspects of the sound, as described under setPolyPressure. It is possible that the underlying synthesizer does not support this MIDI message. In order to verify that setChannelPressure was successful, use getChannelPressure.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setPolyPressure(int,int)\"\u003e\u003ccode\u003esetPolyPressure(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getChannelPressure()\"\u003e\u003ccode\u003egetChannelPressure()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epressure\u003c/code\u003e - the pressure with which the keyboard is being depressed, from 0 to 127 (127 \u003d maximum pressure)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChannelPressure",
      "comment": "Obtains the channel\u0027s keyboard pressure. If the device does not support setting channel pressure, this method always returns 0. Calling setChannelPressure will have no effect then.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setChannelPressure(int)\"\u003e\u003ccode\u003esetChannelPressure(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the amount of pressure for that note, from 0 to 127 (127 \u003d maximum pressure)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "controller"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "controlChange",
      "comment": "Reacts to a change in the specified controller\u0027s value. A controller is some control other than a keyboard key, such as a switch, slider, pedal, wheel, or breath-pressure sensor. The MIDI 1.0 Specification provides standard numbers for typical controllers on MIDI devices, and describes the intended effect for some of the controllers. The way in which an Instrument reacts to a controller change may be specific to the Instrument. The MIDI 1.0 Specification defines both 7-bit controllers and 14-bit controllers. Continuous controllers, such as wheels and sliders, typically have 14 bits (two MIDI bytes), while discrete controllers, such as switches, typically have 7 bits (one MIDI byte). Refer to the specification to see the expected resolution for each type of control. Controllers 64 through 95 (0x40 - 0x5F) allow 7-bit precision. The value of a 7-bit controller is set completely by the value argument. An additional set of controllers provide 14-bit precision by using two controller numbers, one for the most significant 7 bits and another for the least significant 7 bits. Controller numbers 0 through 31 (0x00 - 0x1F) control the most significant 7 bits of 14-bit controllers; controller numbers 32 through 63 (0x20 - 0x3F) control the least significant 7 bits of these controllers. For example, controller number 7 (0x07) controls the upper 7 bits of the channel volume controller, and controller number 39 (0x27) controls the lower 7 bits. The value of a 14-bit controller is determined by the interaction of the two halves. When the most significant 7 bits of a controller are set (using controller numbers 0 through 31), the lower 7 bits are automatically set to 0. The corresponding controller number for the lower 7 bits may then be used to further modulate the controller value. It is possible that the underlying synthesizer does not support a specific controller message. In order to verify that a call to controlChange was successful, use getController.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getController(int)\"\u003e\u003ccode\u003egetController(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtroller\u003c/code\u003e - the controller number (0 to 127; see the MIDI 1.0 Specification for the interpretation)",
          "\u003ccode\u003evalue\u003c/code\u003e - the value to which the specified controller is changed (0 to 127)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "controller"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getController",
      "comment": "Obtains the current value of the specified controller. The return value is represented with 7 bits. For 14-bit controllers, the MSB and LSB controller value needs to be obtained separately. For example, the 14-bit value of the volume controller can be calculated by multiplying the value of controller 7 (0x07, channel volume MSB) with 128 and adding the value of controller 39 (0x27, channel volume LSB). If the device does not support setting a specific controller, this method returns 0 for that controller. Calling controlChange will have no effect then.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#controlChange(int,int)\"\u003e\u003ccode\u003econtrolChange(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtroller\u003c/code\u003e - the number of the controller whose value is desired. The allowed range is 0-127; see the MIDI 1.0 Specification for the interpretation."
        ],
        "return": [
          "the current value of the specified controller (0 to 127)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "program"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "programChange",
      "comment": "Changes a program (patch). This selects a specific instrument from the currently selected bank of instruments. The MIDI specification does not dictate whether notes that are already sounding should switch to the new instrument (timbre) or continue with their original timbre until terminated by a note-off. The program number is zero-based (expressed from 0 to 127). Note that MIDI hardware displays and literature about MIDI typically use the range 1 to 128 instead. It is possible that the underlying synthesizer does not support a specific program. In order to verify that a call to programChange was successful, use getProgram.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#programChange(int,int)\"\u003e\u003ccode\u003eprogramChange(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getProgram()\"\u003e\u003ccode\u003egetProgram()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprogram\u003c/code\u003e - the program number to switch to (0 to 127)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bank"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "program"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "programChange",
      "comment": "Changes the program using bank and program (patch) numbers. It is possible that the underlying synthesizer does not support a specific bank, or program. In order to verify that a call to programChange was successful, use getProgram and getController. Since banks are changed by way of control changes, you can verify the current bank with the following statement:    int bank \u003d (getController(0) * 128) + getController(32);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#programChange(int)\"\u003e\u003ccode\u003eprogramChange(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getProgram()\"\u003e\u003ccode\u003egetProgram()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebank\u003c/code\u003e - the bank number to switch to (0 to 16383)",
          "\u003ccode\u003eprogram\u003c/code\u003e - the program (patch) to use in the specified bank (0 to 127)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProgram",
      "comment": "Obtains the current program number for this channel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Patch.html#getProgram()\"\u003e\u003ccode\u003ePatch.getProgram()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Synthesizer.html#loadInstrument(javax.sound.midi.Instrument)\"\u003e\u003ccode\u003eSynthesizer.loadInstrument(javax.sound.midi.Instrument)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#programChange(int)\"\u003e\u003ccode\u003eprogramChange(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the program number of the currently selected patch"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bend"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPitchBend",
      "comment": "Changes the pitch offset for all notes on this channel. This affects all currently sounding notes as well as subsequent ones. (For pitch bend to cease, the value needs to be reset to the center position.) The MIDI specification stipulates that pitch bend be a 14-bit value, where zero is maximum downward bend, 16383 is maximum upward bend, and 8192 is the center (no pitch bend). The actual amount of pitch change is not specified; it can be changed by a pitch-bend sensitivity setting. However, the General MIDI specification says that the default range should be two semitones up and down from center. It is possible that the underlying synthesizer does not support this MIDI message. In order to verify that setPitchBend was successful, use getPitchBend.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getPitchBend()\"\u003e\u003ccode\u003egetPitchBend()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebend\u003c/code\u003e - the amount of pitch change, as a nonnegative 14-bit value (8192 \u003d no bend)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPitchBend",
      "comment": "Obtains the upward or downward pitch offset for this channel. If the device does not support setting pitch bend, this method always returns 8192. Calling setPitchBend will have no effect then.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setPitchBend(int)\"\u003e\u003ccode\u003esetPitchBend(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "bend amount, as a nonnegative 14-bit value (8192 \u003d no bend)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetAllControllers",
      "comment": "Resets all the implemented controllers to their default values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#controlChange(int,int)\"\u003e\u003ccode\u003econtrolChange(int, int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "allNotesOff",
      "comment": "Turns off all notes that are currently sounding on this channel. The notes might not die away instantaneously; their decay rate is determined by the internals of the Instrument. If the Hold Pedal controller (see controlChange) is down, the effect of this method is deferred until the pedal is released.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#allSoundOff()\"\u003e\u003ccode\u003eallSoundOff()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#noteOff(int)\"\u003e\u003ccode\u003enoteOff(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "allSoundOff",
      "comment": "Immediately turns off all sounding notes on this channel, ignoring the state of the Hold Pedal and the internal decay rate of the current Instrument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#allNotesOff()\"\u003e\u003ccode\u003eallNotesOff()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "localControl",
      "comment": "Turns local control on or off. The default is for local control to be on. The \"on\" setting means that if a device is capable of both synthesizing sound and transmitting MIDI messages, it will synthesize sound in response to the note-on and note-off messages that it itself transmits. It will also respond to messages received from other transmitting devices. The \"off\" setting means that the synthesizer will ignore its own transmitted MIDI messages, but not those received from other devices. It is possible that the underlying synthesizer does not support local control. In order to verify that a call to localControl was successful, check the return value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to turn local control on, \n\u003ccode\u003efalse\u003c/code\u003e to turn local control off"
        ],
        "return": [
          "the new local-control value, or false if local control is not supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMono",
      "comment": "Turns mono mode on or off. In mono mode, the channel synthesizes only one note at a time. In poly mode (identical to mono mode off), the channel can synthesize multiple notes simultaneously. The default is mono off (poly mode on). \"Mono\" is short for the word \"monophonic,\" which in this context is opposed to the word \"polyphonic\" and refers to a single synthesizer voice per MIDI channel. It has nothing to do with how many audio channels there might be (as in \"monophonic\" versus \"stereophonic\" recordings). It is possible that the underlying synthesizer does not support mono mode. In order to verify that a call to setMono was successful, use getMono.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getMono()\"\u003e\u003ccode\u003egetMono()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/VoiceStatus.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eVoiceStatus\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to turn mono mode on, \n\u003ccode\u003efalse\u003c/code\u003e to turn it off (which means turning poly mode on)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMono",
      "comment": "Obtains the current mono/poly mode. Synthesizers that do not allow changing mono/poly mode will always return the same value, regardless of calls to setMono.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setMono(boolean)\"\u003e\u003ccode\u003esetMono(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if mono mode is on, otherwise \n\u003ccode\u003efalse\u003c/code\u003e (meaning poly mode is on)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setOmni",
      "comment": "Turns omni mode on or off. In omni mode, the channel responds to messages sent on all channels. When omni is off, the channel responds only to messages sent on its channel number. The default is omni off. It is possible that the underlying synthesizer does not support omni mode. In order to verify that setOmni was successful, use getOmni.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getOmni()\"\u003e\u003ccode\u003egetOmni()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/VoiceStatus.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eVoiceStatus\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to turn omni mode on, \n\u003ccode\u003efalse\u003c/code\u003e to turn it off"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOmni",
      "comment": "Obtains the current omni mode. Synthesizers that do not allow changing the omni mode will always return the same value, regardless of calls to setOmni.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setOmni(boolean)\"\u003e\u003ccode\u003esetOmni(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if omni mode is on, otherwise \n\u003ccode\u003efalse\u003c/code\u003e (meaning omni mode is off)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "mute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMute",
      "comment": "Sets the mute state for this channel. A value of true means the channel is to be muted, false means the channel can sound (if other channels are not soloed). Unlike allSoundOff(), this method applies to only a specific channel, not to all channels. Further, it silences not only currently sounding notes, but also subsequently received notes. It is possible that the underlying synthesizer does not support muting channels. In order to verify that a call to setMute was successful, use getMute.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getMute()\"\u003e\u003ccode\u003egetMute()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setSolo(boolean)\"\u003e\u003ccode\u003esetSolo(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emute\u003c/code\u003e - the new mute state"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMute",
      "comment": "Obtains the current mute state for this channel. If the underlying synthesizer does not support muting this channel, this method always returns false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setMute(boolean)\"\u003e\u003ccode\u003esetMute(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e the channel is muted, or \n\u003ccode\u003efalse\u003c/code\u003e if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "soloState"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSolo",
      "comment": "Sets the solo state for this channel. If solo is true only this channel and other soloed channels will sound. If solo is false then only other soloed channels will sound, unless no channels are soloed, in which case all unmuted channels will sound. It is possible that the underlying synthesizer does not support solo channels. In order to verify that a call to setSolo was successful, use getSolo.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#getSolo()\"\u003e\u003ccode\u003egetSolo()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esoloState\u003c/code\u003e - new solo state for the channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSolo",
      "comment": "Obtains the current solo state for this channel. If the underlying synthesizer does not support solo on this channel, this method always returns false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiChannel.html#setSolo(boolean)\"\u003e\u003ccode\u003esetSolo(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e the channel is solo, or \n\u003ccode\u003efalse\u003c/code\u003e if not"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sound.midi.MidiChannel",
  "comment": "A \n\u003ccode\u003eMidiChannel\u003c/code\u003e object represents a single MIDI channel. Generally, each \n\u003ccode\u003eMidiChannel\u003c/code\u003e method processes a like-named MIDI \"channel voice\" or \"channel mode\" message as defined by the MIDI specification. However, \n\u003ccode\u003eMidiChannel\u003c/code\u003e adds some \"get\" methods that retrieve the value most recently set by one of the standard MIDI channel messages. Similarly, methods for per-channel solo and mute have been added. \n\u003cp\u003e A \u003ca href\u003d\"Synthesizer.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eSynthesizer\u003c/code\u003e\u003c/a\u003e object has a collection of \u003ccode\u003eMidiChannels\u003c/code\u003e, usually one for each of the 16 channels prescribed by the MIDI 1.0 specification. The \u003ccode\u003eSynthesizer\u003c/code\u003e generates sound when its \u003ccode\u003eMidiChannels\u003c/code\u003e receive \u003ccode\u003enoteOn\u003c/code\u003e messages. \u003c/p\u003e\n\u003cp\u003e See the MIDI 1.0 Specification for more information about the prescribed behavior of the MIDI channel messages, which are not exhaustively documented here. The specification is titled \u003ccode\u003eMIDI Reference: The Complete MIDI 1.0 Detailed Specification\u003c/code\u003e, and is published by the MIDI Manufacturer\u0027s Association (\u003ca href\u003d\"http://www.midi.org\"\u003ehttp://www.midi.org\u003c/a\u003e). \u003c/p\u003e\n\u003cp\u003e MIDI was originally a protocol for reporting the gestures of a keyboard musician. This genesis is visible in the \u003ccode\u003eMidiChannel\u003c/code\u003e API, which preserves such MIDI concepts as key number, key velocity, and key pressure. It should be understood that the MIDI data does not necessarily originate with a keyboard player (the source could be a different kind of musician, or software). Some devices might generate constant values for velocity and pressure, regardless of how the note was performed. Also, the MIDI specification often leaves it up to the synthesizer to use the data in the way the implementor sees fit. For example, velocity data need not always be mapped to volume and/or brightness.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Synthesizer.html#getChannels()\"\u003e\u003ccode\u003eSynthesizer.getChannels()\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}