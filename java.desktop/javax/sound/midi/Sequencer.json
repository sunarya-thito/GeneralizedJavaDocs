{
  "packageName": "javax.sound.midi",
  "simpleName": "Sequencer",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.sound.midi.MidiDevice",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOOP_CONTINUOUSLY",
      "comment": "A value indicating that looping should continue indefinitely rather than complete after a specific number of loops.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopCount(int)\"\u003e\u003ccode\u003esetLoopCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sound.midi.Sequencer.LOOP_CONTINUOUSLY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sound.midi.InvalidMidiDataException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Sequence",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSequence",
      "comment": "Sets the current sequence on which the sequencer operates. This method can be called even if the Sequencer is closed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esequence\u003c/code\u003e - the sequence to be loaded"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/InvalidMidiDataException.html\" title\u003d\"class in javax.sound.midi\"\u003eInvalidMidiDataException\u003c/a\u003e\u003c/code\u003e - if the sequence contains invalid MIDI data, or is not supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "javax.sound.midi.InvalidMidiDataException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "stream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSequence",
      "comment": "Sets the current sequence on which the sequencer operates. The stream must point to MIDI file data. This method can be called even if the Sequencer is closed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - stream containing MIDI file data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs during reading of the stream",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/InvalidMidiDataException.html\" title\u003d\"class in javax.sound.midi\"\u003eInvalidMidiDataException\u003c/a\u003e\u003c/code\u003e - if invalid data is encountered in the stream, or the stream is not supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.midi.Sequence",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSequence",
      "comment": "Obtains the sequence on which the Sequencer is currently operating. This method can be called even if the Sequencer is closed.",
      "tagMap": {
        "return": [
          "the current sequence, or \n\u003ccode\u003enull\u003c/code\u003e if no sequence is currently set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "start",
      "comment": "Starts playback of the MIDI data in the currently loaded sequence. Playback will begin from the current position. If the playback position reaches the loop end point, and the loop count is greater than 0, playback will resume at the loop start point for the number of repetitions set with setLoopCount. After that, or if the loop count is 0, playback will continue to play to the end of the sequence. The implementation ensures that the synthesizer is brought to a consistent state when jumping to the loop start point by sending appropriate controllers, pitch bend, and program change events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopStartPoint(long)\"\u003e\u003ccode\u003esetLoopStartPoint(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopEndPoint(long)\"\u003e\u003ccode\u003esetLoopEndPoint(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopCount(int)\"\u003e\u003ccode\u003esetLoopCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#stop()\"\u003e\u003ccode\u003estop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSequencer\u003c/code\u003e is closed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stop",
      "comment": "Stops recording, if active, and playback of the currently loaded sequence, if any.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#isRunning()\"\u003e\u003ccode\u003eisRunning()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSequencer\u003c/code\u003e is closed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRunning",
      "comment": "Indicates whether the Sequencer is currently running. The default is false. The Sequencer starts running when eitherstart() or startRecording() is called. isRunning then returns true until playback of the sequence completes or stop() is called.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the Sequencer is running, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startRecording",
      "comment": "Starts recording and playback of MIDI data. Data is recorded to all enabled tracks, on the channel(s) for which they were enabled. Recording begins at the current position of the sequencer. Any events already in the track are overwritten for the duration of the recording session. Events from the currently loaded sequence, if any, are delivered to the sequencer\u0027s transmitter(s) along with messages received during recording. Note that tracks are not by default enabled for recording. In order to record MIDI data, at least one track must be specifically enabled for recording.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#recordEnable(javax.sound.midi.Track,int)\"\u003e\u003ccode\u003erecordEnable(javax.sound.midi.Track, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#recordDisable(javax.sound.midi.Track)\"\u003e\u003ccode\u003erecordDisable(javax.sound.midi.Track)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSequencer\u003c/code\u003e is closed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopRecording",
      "comment": "Stops recording, if active. Playback of the current sequence continues.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#startRecording()\"\u003e\u003ccode\u003estartRecording()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#isRecording()\"\u003e\u003ccode\u003eisRecording()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSequencer\u003c/code\u003e is closed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRecording",
      "comment": "Indicates whether the Sequencer is currently recording. The default is false. The Sequencer begins recording when startRecording() is called, and then returns true until stop() or stopRecording() is called.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the Sequencer is recording, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Track",
            "type": "Class"
          },
          "field": {
            "name": "track"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "channel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "recordEnable",
      "comment": "Prepares the specified track for recording events received on a particular channel. Once enabled, a track will receive events when recording is active.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etrack\u003c/code\u003e - the track to which events will be recorded",
          "\u003ccode\u003echannel\u003c/code\u003e - the channel on which events will be received. If -1 is specified for the channel value, the track will receive data from all channels."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - thrown if the track is not part of the current sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Track",
            "type": "Class"
          },
          "field": {
            "name": "track"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "recordDisable",
      "comment": "Disables recording to the specified track. Events will no longer be recorded into this track.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etrack\u003c/code\u003e - the track to disable for recording, or \n\u003ccode\u003enull\u003c/code\u003e to disable recording for all tracks"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTempoInBPM",
      "comment": "Obtains the current tempo, expressed in beats per minute. The actual tempo of playback is the product of the returned value and the tempo factor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoFactor()\"\u003e\u003ccode\u003egetTempoFactor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setTempoInBPM(float)\"\u003e\u003ccode\u003esetTempoInBPM(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoInMPQ()\"\u003e\u003ccode\u003egetTempoInMPQ()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current tempo in beats per minute"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "bpm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTempoInBPM",
      "comment": "Sets the tempo in beats per minute. The actual tempo of playback is the product of the specified value and the tempo factor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoFactor()\"\u003e\u003ccode\u003egetTempoFactor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setTempoInMPQ(float)\"\u003e\u003ccode\u003esetTempoInMPQ(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoInBPM()\"\u003e\u003ccode\u003egetTempoInBPM()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebpm\u003c/code\u003e - desired new tempo in beats per minute"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTempoInMPQ",
      "comment": "Obtains the current tempo, expressed in microseconds per quarter note. The actual tempo of playback is the product of the returned value and the tempo factor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoFactor()\"\u003e\u003ccode\u003egetTempoFactor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setTempoInMPQ(float)\"\u003e\u003ccode\u003esetTempoInMPQ(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoInBPM()\"\u003e\u003ccode\u003egetTempoInBPM()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current tempo in microseconds per quarter note"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "mpq"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTempoInMPQ",
      "comment": "Sets the tempo in microseconds per quarter note. The actual tempo of playback is the product of the specified value and the tempo factor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoFactor()\"\u003e\u003ccode\u003egetTempoFactor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setTempoInBPM(float)\"\u003e\u003ccode\u003esetTempoInBPM(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoInMPQ()\"\u003e\u003ccode\u003egetTempoInMPQ()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003empq\u003c/code\u003e - desired new tempo in microseconds per quarter note"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "factor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTempoFactor",
      "comment": "Scales the sequencer\u0027s actual playback tempo by the factor provided. The default is 1.0. A value of 1.0 represents the natural rate (the tempo specified in the sequence), 2.0 means twice as fast, etc. The tempo factor does not affect the values returned by getTempoInMPQ() and getTempoInBPM(). Those values indicate the tempo prior to scaling. Note that the tempo factor cannot be adjusted when external synchronization is used. In that situation, setTempoFactor always sets the tempo factor to 1.0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTempoFactor()\"\u003e\u003ccode\u003egetTempoFactor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efactor\u003c/code\u003e - the requested tempo scalar"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTempoFactor",
      "comment": "Returns the current tempo factor for the sequencer. The default is 1.0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setTempoFactor(float)\"\u003e\u003ccode\u003esetTempoFactor(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "tempo factor"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTickLength",
      "comment": "Obtains the length of the current sequence, expressed in MIDI ticks, or 0 if no sequence is set.",
      "tagMap": {
        "return": [
          "length of the sequence in ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTickPosition",
      "comment": "Obtains the current position in the sequence, expressed in MIDI ticks. (The duration of a tick in seconds is determined both by the tempo and by the timing resolution stored in the Sequence.)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setTickPosition(long)\"\u003e\u003ccode\u003esetTickPosition(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "current tick"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "tick"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTickPosition",
      "comment": "Sets the current sequencer position in MIDI ticks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getTickPosition()\"\u003e\u003ccode\u003egetTickPosition()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etick\u003c/code\u003e - the desired tick position"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMicrosecondLength",
      "comment": "Obtains the length of the current sequence, expressed in microseconds, or 0 if no sequence is set.",
      "tagMap": {
        "return": [
          "length of the sequence in microseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMicrosecondPosition",
      "comment": "Obtains the current position in the sequence, expressed in microseconds.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setMicrosecondPosition(long)\"\u003e\u003ccode\u003esetMicrosecondPosition(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiDevice.html#getMicrosecondPosition()\"\u003egetMicrosecondPosition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiDevice.html\" title\u003d\"interface in javax.sound.midi\"\u003eMidiDevice\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the current position in microseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "microseconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMicrosecondPosition",
      "comment": "Sets the current position in the sequence, expressed in microseconds.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getMicrosecondPosition()\"\u003e\u003ccode\u003egetMicrosecondPosition()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emicroseconds\u003c/code\u003e - desired position in microseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Sequencer$SyncMode",
            "type": "Class"
          },
          "field": {
            "name": "sync"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMasterSyncMode",
      "comment": "Sets the source of timing information used by this sequencer. The sequencer synchronizes to the master, which is the internal clock, MIDI clock, or MIDI time code, depending on the value of sync. The sync argument must be one of the supported modes, as returned by getMasterSyncModes().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#INTERNAL_CLOCK\"\u003e\u003ccode\u003eSequencer.SyncMode.INTERNAL_CLOCK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_SYNC\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_SYNC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_TIME_CODE\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_TIME_CODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getMasterSyncMode()\"\u003e\u003ccode\u003egetMasterSyncMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esync\u003c/code\u003e - the desired master synchronization mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.midi.Sequencer$SyncMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMasterSyncMode",
      "comment": "Obtains the current master synchronization mode for this sequencer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setMasterSyncMode(javax.sound.midi.Sequencer.SyncMode)\"\u003e\u003ccode\u003esetMasterSyncMode(SyncMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getMasterSyncModes()\"\u003e\u003ccode\u003egetMasterSyncModes()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current master synchronization mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.midi.Sequencer$SyncMode",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMasterSyncModes",
      "comment": "Obtains the set of master synchronization modes supported by this sequencer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#INTERNAL_CLOCK\"\u003e\u003ccode\u003eSequencer.SyncMode.INTERNAL_CLOCK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_SYNC\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_SYNC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_TIME_CODE\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_TIME_CODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getMasterSyncMode()\"\u003e\u003ccode\u003egetMasterSyncMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setMasterSyncMode(javax.sound.midi.Sequencer.SyncMode)\"\u003e\u003ccode\u003esetMasterSyncMode(SyncMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the available master synchronization modes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.Sequencer$SyncMode",
            "type": "Class"
          },
          "field": {
            "name": "sync"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSlaveSyncMode",
      "comment": "Sets the slave synchronization mode for the sequencer. This indicates the type of timing information sent by the sequencer to its receiver. The sync argument must be one of the supported modes, as returned by getSlaveSyncModes().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_SYNC\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_SYNC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_TIME_CODE\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_TIME_CODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#NO_SYNC\"\u003e\u003ccode\u003eSequencer.SyncMode.NO_SYNC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getSlaveSyncModes()\"\u003e\u003ccode\u003egetSlaveSyncModes()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esync\u003c/code\u003e - the desired slave synchronization mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.midi.Sequencer$SyncMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSlaveSyncMode",
      "comment": "Obtains the current slave synchronization mode for this sequencer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setSlaveSyncMode(javax.sound.midi.Sequencer.SyncMode)\"\u003e\u003ccode\u003esetSlaveSyncMode(SyncMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getSlaveSyncModes()\"\u003e\u003ccode\u003egetSlaveSyncModes()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current slave synchronization mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.midi.Sequencer$SyncMode",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSlaveSyncModes",
      "comment": "Obtains the set of slave synchronization modes supported by the sequencer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_SYNC\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_SYNC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#MIDI_TIME_CODE\"\u003e\u003ccode\u003eSequencer.SyncMode.MIDI_TIME_CODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html#NO_SYNC\"\u003e\u003ccode\u003eSequencer.SyncMode.NO_SYNC\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the available slave synchronization modes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "track"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "mute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTrackMute",
      "comment": "Sets the mute state for a track. This method may fail for a number of reasons. For example, the track number specified may not be valid for the current sequence, or the sequencer may not support this functionality. An application which needs to verify whether this operation succeeded should follow this call with a call to getTrackMute(int).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getSequence()\"\u003e\u003ccode\u003egetSequence()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etrack\u003c/code\u003e - the track number. Tracks in the current sequence are numbered from 0 to the number of tracks in the sequence minus 1.",
          "\u003ccode\u003emute\u003c/code\u003e - the new mute state for the track. \n\u003ccode\u003etrue\u003c/code\u003e implies the track should be muted, \n\u003ccode\u003efalse\u003c/code\u003e implies the track should be unmuted."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "track"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTrackMute",
      "comment": "Obtains the current mute state for a track. The default mute state for all tracks which have not been muted is false. In any case where the specified track has not been muted, this method should return false. This applies if the sequencer does not support muting of tracks, and if the specified track index is not valid.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etrack\u003c/code\u003e - the track number. Tracks in the current sequence are numbered from 0 to the number of tracks in the sequence minus 1."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if muted, \n\u003ccode\u003efalse\u003c/code\u003e if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "track"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "solo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTrackSolo",
      "comment": "Sets the solo state for a track. If solo is true only this track and other solo\u0027d tracks will sound. If solo is false then only other solo\u0027d tracks will sound, unless no tracks are solo\u0027d in which case all un-muted tracks will sound. This method may fail for a number of reasons. For example, the track number specified may not be valid for the current sequence, or the sequencer may not support this functionality. An application which needs to verify whether this operation succeeded should follow this call with a call to getTrackSolo(int).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getSequence()\"\u003e\u003ccode\u003egetSequence()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etrack\u003c/code\u003e - the track number. Tracks in the current sequence are numbered from 0 to the number of tracks in the sequence minus 1.",
          "\u003ccode\u003esolo\u003c/code\u003e - the new solo state for the track. \n\u003ccode\u003etrue\u003c/code\u003e implies the track should be solo\u0027d, \n\u003ccode\u003efalse\u003c/code\u003e implies the track should not be solo\u0027d."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "track"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTrackSolo",
      "comment": "Obtains the current solo state for a track. The default mute state for all tracks which have not been solo\u0027d is false. In any case where the specified track has not been solo\u0027d, this method should return false. This applies if the sequencer does not support soloing of tracks, and if the specified track index is not valid.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etrack\u003c/code\u003e - the track number. Tracks in the current sequence are numbered from 0 to the number of tracks in the sequence minus 1."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if solo\u0027d, \n\u003ccode\u003efalse\u003c/code\u003e if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.MetaEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addMetaEventListener",
      "comment": "Registers a meta-event listener to receive notification whenever a meta-event is encountered in the sequence and processed by the sequencer. This method can fail if, for instance,this class of sequencer does not support meta-event notification.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#removeMetaEventListener(javax.sound.midi.MetaEventListener)\"\u003e\u003ccode\u003eremoveMetaEventListener(javax.sound.midi.MetaEventListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MetaEventListener.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eMetaEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MetaMessage.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eMetaMessage\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - listener to add"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the listener was successfully added, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.MetaEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeMetaEventListener",
      "comment": "Removes the specified meta-event listener from this sequencer\u0027s list of registered listeners, if in fact the listener is registered.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#addMetaEventListener(javax.sound.midi.MetaEventListener)\"\u003e\u003ccode\u003eaddMetaEventListener(javax.sound.midi.MetaEventListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the meta-event listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.ControllerEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "controllers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addControllerEventListener",
      "comment": "Registers a controller event listener to receive notification whenever the sequencer processes a control-change event of the requested type or types. The types are specified by the controllers argument, which should contain an array of MIDI controller numbers. (Each number should be between 0 and 127, inclusive. See the MIDI 1.0 Specification for the numbers that correspond to various types of controllers.) The returned array contains the MIDI controller numbers for which the listener will now receive events. Some sequencers might not support controller event notification, in which case the array has a length of 0. Other sequencers might support notification for some controllers but not all. This method may be invoked repeatedly. Each time, the returned array indicates all the controllers that the listener will be notified about, not only the controllers requested in that particular invocation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#removeControllerEventListener(javax.sound.midi.ControllerEventListener,int%5B%5D)\"\u003e\u003ccode\u003eremoveControllerEventListener(javax.sound.midi.ControllerEventListener, int[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/ControllerEventListener.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eControllerEventListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the controller event listener to add to the list of registered listeners",
          "\u003ccode\u003econtrollers\u003c/code\u003e - the MIDI controller numbers for which change notification is requested"
        ],
        "return": [
          "the numbers of all the MIDI controllers whose changes will now be reported to the specified listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.midi.ControllerEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "controllers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeControllerEventListener",
      "comment": "Removes a controller event listener\u0027s interest in one or more types of controller event. The controllers argument is an array of MIDI numbers corresponding to the controllers for which the listener should no longer receive change notifications. To completely remove this listener from the list of registered listeners, pass in null for controllers. The returned array contains the MIDI controller numbers for which the listener will now receive events. The array has a length of 0 if the listener will not receive change notifications for any controllers.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#addControllerEventListener(javax.sound.midi.ControllerEventListener,int%5B%5D)\"\u003e\u003ccode\u003eaddControllerEventListener(javax.sound.midi.ControllerEventListener, int[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - old listener",
          "\u003ccode\u003econtrollers\u003c/code\u003e - the MIDI controller numbers for which change notification should be cancelled, or \n\u003ccode\u003enull\u003c/code\u003e to cancel for all controllers"
        ],
        "return": [
          "the numbers of all the MIDI controllers whose changes will now be reported to the specified listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "tick"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLoopStartPoint",
      "comment": "Sets the first MIDI tick that will be played in the loop. If the loop count is greater than 0, playback will jump to this point when reaching the loop end point. A value of 0 for the starting point means the beginning of the loaded sequence. The starting point must be lower than or equal to the ending point, and it must fall within the size of the loaded sequence. A sequencer\u0027s loop start point defaults to start of the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopEndPoint(long)\"\u003e\u003ccode\u003esetLoopEndPoint(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopCount(int)\"\u003e\u003ccode\u003esetLoopCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getLoopStartPoint()\"\u003e\u003ccode\u003egetLoopStartPoint()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etick\u003c/code\u003e - the loop\u0027s starting position, in MIDI ticks (zero-based)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the requested loop start point cannot be set, usually because it falls outside the sequence\u0027s duration or because the start point is after the end point"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLoopStartPoint",
      "comment": "Obtains the start position of the loop, in MIDI ticks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopStartPoint(long)\"\u003e\u003ccode\u003esetLoopStartPoint(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the start position of the loop, in MIDI ticks (zero-based)"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "tick"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLoopEndPoint",
      "comment": "Sets the last MIDI tick that will be played in the loop. If the loop count is 0, the loop end point has no effect and playback continues to play when reaching the loop end point. A value of -1 for the ending point indicates the last tick of the sequence. Otherwise, the ending point must be greater than or equal to the starting point, and it must fall within the size of the loaded sequence. A sequencer\u0027s loop end point defaults to -1, meaning the end of the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopStartPoint(long)\"\u003e\u003ccode\u003esetLoopStartPoint(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopCount(int)\"\u003e\u003ccode\u003esetLoopCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getLoopEndPoint()\"\u003e\u003ccode\u003egetLoopEndPoint()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etick\u003c/code\u003e - the loop\u0027s ending position, in MIDI ticks (zero-based), or -1 to indicate the final tick"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the requested loop point cannot be set, usually because it falls outside the sequence\u0027s duration or because the ending point is before the starting point"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLoopEndPoint",
      "comment": "Obtains the end position of the loop, in MIDI ticks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopEndPoint(long)\"\u003e\u003ccode\u003esetLoopEndPoint(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the end position of the loop, in MIDI ticks (zero-based), or -1 to indicate the end of the sequence"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLoopCount",
      "comment": "Sets the number of repetitions of the loop for playback. When the playback position reaches the loop end point, it will loop back to the loop start point count times, after which playback will continue to play to the end of the sequence. If the current position when this method is invoked is greater than the loop end point, playback continues to the end of the sequence without looping, unless the loop end point is changed subsequently. A count value of 0 disables looping: playback will continue at the loop end point, and it will not loop back to the loop start point. This is a sequencer\u0027s default. If playback is stopped during looping, the current loop status is cleared; subsequent start requests are not affected by an interrupted loop operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopStartPoint(long)\"\u003e\u003ccode\u003esetLoopStartPoint(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopEndPoint(long)\"\u003e\u003ccode\u003esetLoopEndPoint(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#getLoopCount()\"\u003e\u003ccode\u003egetLoopCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - the number of times playback should loop back from the loop\u0027s end position to the loop\u0027s start position, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#LOOP_CONTINUOUSLY\"\u003e\u003ccode\u003eLOOP_CONTINUOUSLY\u003c/code\u003e\u003c/a\u003e to indicate that looping should continue until interrupted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecount\u003c/code\u003e is negative and not equal to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#LOOP_CONTINUOUSLY\"\u003e\u003ccode\u003eLOOP_CONTINUOUSLY\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLoopCount",
      "comment": "Obtains the number of repetitions for playback.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#setLoopCount(int)\"\u003e\u003ccode\u003esetLoopCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of loops after which playback plays to the end of the sequence"
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.sound.midi.Sequencer$SyncMode"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sound.midi.Sequencer",
  "comment": "A hardware or software device that plays back a MIDI \n\u003ca href\u003d\"Sequence.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003esequence\u003c/code\u003e\u003c/a\u003e is known as a \n\u003cem\u003esequencer\u003c/em\u003e. A MIDI sequence contains lists of time-stamped MIDI data, such as might be read from a standard MIDI file. Most sequencers also provide functions for creating and editing sequences. \n\u003cp\u003e The \u003ccode\u003eSequencer\u003c/code\u003e interface includes methods for the following basic MIDI sequencer operations: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eobtaining a sequence from MIDI file data \u003c/li\u003e\n \u003cli\u003estarting and stopping playback \u003c/li\u003e\n \u003cli\u003emoving to an arbitrary position in the sequence \u003c/li\u003e\n \u003cli\u003echanging the tempo (speed) of playback \u003c/li\u003e\n \u003cli\u003esynchronizing playback to an internal clock or to received MIDI messages \u003c/li\u003e\n \u003cli\u003econtrolling the timing of another device \u003c/li\u003e\n\u003c/ul\u003e In addition, the following operations are supported, either directly, or indirectly through objects that the \n\u003ccode\u003eSequencer\u003c/code\u003e has access to: \n\u003cul\u003e \n \u003cli\u003eediting the data by adding or deleting individual MIDI events or entire tracks \u003c/li\u003e\n \u003cli\u003emuting or soloing individual tracks in the sequence \u003c/li\u003e\n \u003cli\u003enotifying listener objects about any meta-events or control-change events encountered while playing back the sequence \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.SyncMode.html\" title\u003d\"class in javax.sound.midi\"\u003e\u003ccode\u003eSequencer.SyncMode\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Sequencer.html#addMetaEventListener(javax.sound.midi.MetaEventListener)\"\u003e\u003ccode\u003eaddMetaEventListener(javax.sound.midi.MetaEventListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/ControllerEventListener.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eControllerEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Receiver.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eReceiver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/Transmitter.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eTransmitter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/midi/MidiDevice.html\" title\u003d\"interface in javax.sound.midi\"\u003e\u003ccode\u003eMidiDevice\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}