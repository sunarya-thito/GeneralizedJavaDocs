{
  "packageName": "javax.sound.sampled",
  "simpleName": "Mixer",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.sound.sampled.Line",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.sound.sampled.Mixer$Info",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMixerInfo",
      "comment": "Obtains information about this mixer, including the product\u0027s name, version, vendor, etc.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Mixer.Info.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eMixer.Info\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a mixer info object that describes this mixer"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line$Info",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSourceLineInfo",
      "comment": "Obtains information about the set of source lines supported by this mixer. Some source lines may only be available when this mixer is open.",
      "tagMap": {
        "return": [
          "array of \n\u003ccode\u003eLine.Info\u003c/code\u003e objects representing source lines for this mixer. If no source lines are supported, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line$Info",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetLineInfo",
      "comment": "Obtains information about the set of target lines supported by this mixer. Some target lines may only be available when this mixer is open.",
      "tagMap": {
        "return": [
          "array of \n\u003ccode\u003eLine.Info\u003c/code\u003e objects representing target lines for this mixer. If no target lines are supported, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line$Info",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line$Info",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSourceLineInfo",
      "comment": "Obtains information about source lines of a particular type supported by the mixer. Some source lines may only be available when this mixer is open.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - a \n\u003ccode\u003eLine.Info\u003c/code\u003e object describing lines about which information is queried"
        ],
        "return": [
          "an array of \n\u003ccode\u003eLine.Info\u003c/code\u003e objects describing source lines matching the type requested. If no matching source lines are supported, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line$Info",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line$Info",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetLineInfo",
      "comment": "Obtains information about target lines of a particular type supported by the mixer. Some target lines may only be available when this mixer is open.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - a \n\u003ccode\u003eLine.Info\u003c/code\u003e object describing lines about which information is queried"
        ],
        "return": [
          "an array of \n\u003ccode\u003eLine.Info\u003c/code\u003e objects describing target lines matching the type requested. If no matching target lines are supported, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line$Info",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLineSupported",
      "comment": "Indicates whether the mixer supports a line (or lines) that match the specified Line.Info object. Some lines may only be supported when this mixer is open.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - describes the line for which support is queried"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if at least one matching line is supported, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sound.sampled.LineUnavailableException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line$Info",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLine",
      "comment": "Obtains a line that is available for use and that matches the description in the specified Line.Info object. If a DataLine is requested, and info is an instance of DataLine.Info specifying at least one fully qualified audio format, the last one will be used as the default format of the returned DataLine.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - describes the desired line"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineUnavailableException.html\" title\u003d\"class in javax.sound.sampled\"\u003eLineUnavailableException\u003c/a\u003e\u003c/code\u003e - if a matching line is not available due to resource restrictions",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this mixer does not support any lines matching the description",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a matching line is not available due to security restrictions"
        ],
        "return": [
          "a line that is available for use and that matches the description in the specified \n\u003ccode\u003eLine.Info\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line$Info",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxLines",
      "comment": "Obtains the approximate maximum number of lines of the requested type that can be open simultaneously on the mixer. Certain types of mixers do not have a hard bound and may allow opening more lines. Since certain lines are a shared resource, a mixer may not be able to open the maximum number of lines if another process has opened lines of this mixer. The requested type is any line that matches the description in the provided Line.Info object. For example, if the info object represents a speaker port, and the mixer supports exactly one speaker port, this method should return 1. If the info object represents a source data line and the mixer supports the use of 32 source data lines simultaneously, the return value should be 32. If there is no limit, this function returns AudioSystem.NOT_SPECIFIED.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - a \n\u003ccode\u003eLine.Info\u003c/code\u003e that describes the line for which the number of supported instances is queried"
        ],
        "return": [
          "the maximum number of matching lines supported, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSourceLines",
      "comment": "Obtains the set of all source lines currently open to this mixer.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the matching lines are not available due to security restrictions"
        ],
        "return": [
          "the source lines currently open to the mixer. If no source lines are currently open to this mixer, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Line",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTargetLines",
      "comment": "Obtains the set of all target lines currently open from this mixer.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the matching lines are not available due to security restrictions"
        ],
        "return": [
          "target lines currently open from the mixer. If no target lines are currently open from this mixer, an array of length 0 is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "lines"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "maintainSync"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "synchronize",
      "comment": "Synchronizes two or more lines. Any subsequent command that starts or stops audio playback or capture for one of these lines will exert the same effect on the other lines in the group, so that they start or stop playing or capturing data simultaneously.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elines\u003c/code\u003e - the lines that should be synchronized",
          "\u003ccode\u003emaintainSync\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the synchronization must be precisely maintained (i.e., the synchronization must be sample-accurate) at all times during operation of the lines, or \n\u003ccode\u003efalse\u003c/code\u003e if precise synchronization is required only during start and stop operations"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the lines cannot be synchronized. This may occur if the lines are of different types or have different formats for which this mixer does not support synchronization, or if all lines specified do not belong to this mixer."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "lines"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsynchronize",
      "comment": "Releases synchronization for the specified lines. The array must be identical to one for which synchronization has already been established; otherwise an exception may be thrown. However, null may be specified, in which case all currently synchronized lines that belong to this mixer are unsynchronized.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elines\u003c/code\u003e - the synchronized lines for which synchronization should be released, or \n\u003ccode\u003enull\u003c/code\u003e for all this mixer\u0027s synchronized lines"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the lines cannot be unsynchronized. This may occur if the argument specified does not exactly match a set of lines for which synchronization has already been established."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sound.sampled.Line",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "lines"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "maintainSync"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSynchronizationSupported",
      "comment": "Reports whether this mixer supports synchronization of the specified set of lines.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elines\u003c/code\u003e - the set of lines for which synchronization support is queried",
          "\u003ccode\u003emaintainSync\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the synchronization must be precisely maintained (i.e., the synchronization must be sample-accurate) at all times during operation of the lines, or \n\u003ccode\u003efalse\u003c/code\u003e if precise synchronization is required only during start and stop operations"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lines can be synchronized, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.sound.sampled.Mixer$Info"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sound.sampled.Mixer",
  "comment": "A mixer is an audio device with one or more lines. It need not be designed for mixing audio signals. A mixer that actually mixes audio has multiple input (source) lines and at least one output (target) line. The former are often instances of classes that implement \n\u003ca href\u003d\"SourceDataLine.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eSourceDataLine\u003c/code\u003e\u003c/a\u003e, and the latter, \n\u003ca href\u003d\"TargetDataLine.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eTargetDataLine\u003c/code\u003e\u003c/a\u003e. \n\u003ca href\u003d\"Port.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003ePort\u003c/code\u003e\u003c/a\u003e objects, too, are either source lines or target lines. A mixer can accept prerecorded, loopable sound as input, by having some of its source lines be instances of objects that implement the \n\u003ca href\u003d\"Clip.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eClip\u003c/code\u003e\u003c/a\u003e interface. \n\u003cp\u003e Through methods of the \u003ccode\u003eLine\u003c/code\u003e interface, which \u003ccode\u003eMixer\u003c/code\u003e extends, a mixer might provide a set of controls that are global to the mixer. For example, the mixer can have a master gain control. These global controls are distinct from the controls belonging to each of the mixer\u0027s individual lines. \u003c/p\u003e\n\u003cp\u003e Some mixers, especially those with internal digital mixing capabilities, may provide additional capabilities by implementing the \u003ccode\u003eDataLine\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003e A mixer can support synchronization of its lines. When one line in a synchronized group is started or stopped, the other lines in the group automatically start or stop simultaneously with the explicitly affected one.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}