{
  "packageName": "javax.sound.sampled",
  "simpleName": "AudioFormat",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.sound.sampled.AudioFormat$Encoding",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "encoding",
      "comment": "The audio encoding technique used by this format.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sampleRate",
      "comment": "The number of samples played or recorded per second, for sounds that have this format.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sampleSizeInBits",
      "comment": "The number of bits in each sample of a sound that has this format.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "channels",
      "comment": "The number of audio channels in this format (1 for mono, 2 for stereo).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "frameSize",
      "comment": "The number of bytes in each frame of a sound that has this format.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "frameRate",
      "comment": "The number of frames played or recorded per second, for sounds that have this format.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "bigEndian",
      "comment": "Indicates whether the audio data is stored in big-endian or little-endian order.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.AudioFormat$Encoding",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEncoding",
      "comment": "Obtains the type of encoding for sounds in this format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.Encoding.html#PCM_SIGNED\"\u003e\u003ccode\u003eAudioFormat.Encoding.PCM_SIGNED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.Encoding.html#PCM_UNSIGNED\"\u003e\u003ccode\u003eAudioFormat.Encoding.PCM_UNSIGNED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.Encoding.html#ULAW\"\u003e\u003ccode\u003eAudioFormat.Encoding.ULAW\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.Encoding.html#ALAW\"\u003e\u003ccode\u003eAudioFormat.Encoding.ALAW\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the encoding type"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleRate",
      "comment": "Obtains the sample rate. For compressed formats, the return value is the sample rate of the uncompressed audio data. When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a sample rate of AudioSystem.NOT_SPECIFIED means that any sample rate is acceptable. AudioSystem.NOT_SPECIFIED is also returned when the sample rate is not defined for this audio format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html#getFrameRate()\"\u003e\u003ccode\u003egetFrameRate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of samples per second, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleSizeInBits",
      "comment": "Obtains the size of a sample. For compressed formats, the return value is the sample size of the uncompressed audio data. When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a sample size of AudioSystem.NOT_SPECIFIED means that any sample size is acceptable. AudioSystem.NOT_SPECIFIED is also returned when the sample size is not defined for this audio format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html#getFrameSize()\"\u003e\u003ccode\u003egetFrameSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of bits in each sample, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChannels",
      "comment": "Obtains the number of channels. When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a return value of AudioSystem.NOT_SPECIFIED means that any (positive) number of channels is acceptable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The number of channels (1 for mono, 2 for stereo, etc.), or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFrameSize",
      "comment": "Obtains the frame size in bytes. When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a frame size of AudioSystem.NOT_SPECIFIED means that any frame size is acceptable. AudioSystem.NOT_SPECIFIED is also returned when the frame size is not defined for this audio format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html#getSampleSizeInBits()\"\u003e\u003ccode\u003egetSampleSizeInBits()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of bytes per frame, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFrameRate",
      "comment": "Obtains the frame rate in frames per second. When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a frame rate of AudioSystem.NOT_SPECIFIED means that any frame rate is acceptable. AudioSystem.NOT_SPECIFIED is also returned when the frame rate is not defined for this audio format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html#getSampleRate()\"\u003e\u003ccode\u003egetSampleRate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of frames per second, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBigEndian",
      "comment": "Indicates whether the audio data is stored in big-endian or little-endian byte order. If the sample size is not more than one byte, the return value is irrelevant.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the data is stored in big-endian byte order, \n\u003ccode\u003efalse\u003c/code\u003e if little-endian"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "properties",
      "comment": "Obtain an unmodifiable map of properties. The concept of properties is further explained in the class description.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003egetProperty(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u0026lt;String, Object\u0026gt;\u003c/code\u003e object containing all properties. If no properties are recognized, an empty map is returned."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProperty",
      "comment": "Obtain the property value specified by the key. The concept of properties is further explained in the class description. If the specified property is not defined for a particular file format, this method returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFormat.html#properties()\"\u003e\u003ccode\u003eproperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key of the desired property"
        ],
        "return": [
          "the value of the property with the specified key, or \n\u003ccode\u003enull\u003c/code\u003e if the property does not exist"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.AudioFormat",
            "type": "Class"
          },
          "name": "format",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "matches",
      "comment": "Indicates whether this format matches the one specified. To match, two formats must have the same encoding, and consistent values of the number of channels, sample rate, sample size, frame rate, and frame size. The values of the property are consistent if they are equal or the specified format has the property value AudioSystem.NOT_SPECIFIED. The byte order (big-endian or little-endian) must be the same if the sample size is greater than one byte.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - format to test for match"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this format matches the one specified, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string that describes the audio format, such as: \"PCM SIGNED 22050 Hz 16 bit mono big-endian\". The contents of the string may vary between implementations of Java Sound.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the audio format"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.AudioFormat$Encoding",
            "type": "Class"
          },
          "name": "encoding",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "sampleRate",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sampleSizeInBits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "channels",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "frameSize",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "frameRate",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "bigEndian",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an AudioFormat with the given parameters. The encoding specifies the convention used to represent the data. The other parameters are further explained in the class description.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eencoding\u003c/code\u003e - the audio encoding technique",
          "\u003ccode\u003esampleRate\u003c/code\u003e - the number of samples per second",
          "\u003ccode\u003esampleSizeInBits\u003c/code\u003e - the number of bits in each sample",
          "\u003ccode\u003echannels\u003c/code\u003e - the number of channels (1 for mono, 2 for stereo, and so on)",
          "\u003ccode\u003eframeSize\u003c/code\u003e - the number of bytes in each frame",
          "\u003ccode\u003eframeRate\u003c/code\u003e - the number of frames per second",
          "\u003ccode\u003ebigEndian\u003c/code\u003e - indicates whether the data for a single sample is stored in big-endian byte order (\n\u003ccode\u003efalse\u003c/code\u003e means little-endian)"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.AudioFormat$Encoding",
            "type": "Class"
          },
          "name": "encoding",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "sampleRate",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sampleSizeInBits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "channels",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "frameSize",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "frameRate",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "bigEndian",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Object",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "properties",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an AudioFormat with the given parameters. The encoding specifies the convention used to represent the data. The other parameters are further explained in the class description.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eencoding\u003c/code\u003e - the audio encoding technique",
          "\u003ccode\u003esampleRate\u003c/code\u003e - the number of samples per second",
          "\u003ccode\u003esampleSizeInBits\u003c/code\u003e - the number of bits in each sample",
          "\u003ccode\u003echannels\u003c/code\u003e - the number of channels (1 for mono, 2 for stereo, and so on)",
          "\u003ccode\u003eframeSize\u003c/code\u003e - the number of bytes in each frame",
          "\u003ccode\u003eframeRate\u003c/code\u003e - the number of frames per second",
          "\u003ccode\u003ebigEndian\u003c/code\u003e - indicates whether the data for a single sample is stored in big-endian byte order (\n\u003ccode\u003efalse\u003c/code\u003e means little-endian)",
          "\u003ccode\u003eproperties\u003c/code\u003e - a \n\u003ccode\u003eMap\u0026lt;String, Object\u0026gt;\u003c/code\u003e object containing format properties"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "sampleRate",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sampleSizeInBits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "channels",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "signed",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "bigEndian",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an AudioFormat with a linear PCM encoding and the given parameters. The frame size is set to the number of bytes required to contain one sample from each channel, and the frame rate is set to the sample rate.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esampleRate\u003c/code\u003e - the number of samples per second",
          "\u003ccode\u003esampleSizeInBits\u003c/code\u003e - the number of bits in each sample",
          "\u003ccode\u003echannels\u003c/code\u003e - the number of channels (1 for mono, 2 for stereo, and so on)",
          "\u003ccode\u003esigned\u003c/code\u003e - indicates whether the data is signed or unsigned",
          "\u003ccode\u003ebigEndian\u003c/code\u003e - indicates whether the data for a single sample is stored in big-endian byte order (\n\u003ccode\u003efalse\u003c/code\u003e means little-endian)"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.sound.sampled.AudioFormat$Encoding"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.sound.sampled.AudioFormat",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/DataLine.html#getFormat()\"\u003e\u003ccode\u003eDataLine.getFormat()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioInputStream.html#getFormat()\"\u003e\u003ccode\u003eAudioInputStream.getFormat()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioFileFormat.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eAudioFileFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/spi/FormatConversionProvider.html\" title\u003d\"class in javax.sound.sampled.spi\"\u003e\u003ccode\u003eFormatConversionProvider\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}