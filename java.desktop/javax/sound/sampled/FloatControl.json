{
  "packageName": "javax.sound.sampled",
  "simpleName": "FloatControl",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.sound.sampled.Control",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValue",
      "comment": "Sets the current value for the control. The default implementation simply sets the value as indicated. If the value indicated is greater than the maximum value, or smaller than the minimum value, an IllegalArgumentException is thrown. Some controls require that their line be open before they can be affected by setting a value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - desired new value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value indicated does not fall within the allowable range"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Obtains this control\u0027s current value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current value"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximum",
      "comment": "Obtains the maximum value permitted.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum allowable value"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimum",
      "comment": "Obtains the minimum value permitted.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum allowable value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnits",
      "comment": "Obtains the label for the units in which the control\u0027s values are expressed, such as \"dB\" or \"frames per second.\"",
      "annotations": [],
      "tagMap": {
        "return": [
          "the units label, or a zero-length string if no label"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinLabel",
      "comment": "Obtains the label for the minimum value, such as \"Left\" or \"Off\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "the minimum value label, or a zero-length string if no label has been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMidLabel",
      "comment": "Obtains the label for the mid-point value, such as \"Center\" or \"Default\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "the mid-point value label, or a zero-length string if no label has been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxLabel",
      "comment": "Obtains the label for the maximum value, such as \"Right\" or \"Full\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum value label, or a zero-length string if no label has been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrecision",
      "comment": "Obtains the resolution or granularity of the control, in the units that the control measures. The precision is the size of the increment between discrete valid values for this control, over the set of supported floating-point values.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the control\u0027s precision"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUpdatePeriod",
      "comment": "Obtains the smallest time interval, in microseconds, over which the control\u0027s value can change during a shift. The update period is the inverse of the frequency with which the control updates its value during a shift. If the implementation does not support value shifting over time, it should set the control\u0027s value to the final value immediately and return -1 from this method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/FloatControl.html#shift(float,float,int)\"\u003e\u003ccode\u003eshift(float, float, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "update period in microseconds, or -1 if shifting over time is unsupported"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "from",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "to",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "microseconds",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shift",
      "comment": "Changes the control value from the initial value to the final value linearly over the specified time period, specified in microseconds. This method returns without blocking; it does not wait for the shift to complete. An implementation should complete the operation within the time specified. The default implementation simply changes the value to the final value immediately.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/FloatControl.html#getUpdatePeriod()\"\u003e\u003ccode\u003egetUpdatePeriod()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efrom\u003c/code\u003e - initial value at the beginning of the shift",
          "\u003ccode\u003eto\u003c/code\u003e - final value after the shift",
          "\u003ccode\u003emicroseconds\u003c/code\u003e - maximum duration of the shift in microseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003efrom\u003c/code\u003e or \n\u003ccode\u003eto\u003c/code\u003e value does not fall within the allowable range"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of the float control.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Control.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Control.html\" title\u003d\"class in javax.sound.sampled\"\u003eControl\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the float control"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.FloatControl$Type",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "minimum",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "maximum",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "precision",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "updatePeriod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "initialValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "units",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "minLabel",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "midLabel",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "maxLabel",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new float control object with the given parameters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the kind of control represented by this float control object",
          "\u003ccode\u003eminimum\u003c/code\u003e - the smallest value permitted for the control",
          "\u003ccode\u003emaximum\u003c/code\u003e - the largest value permitted for the control",
          "\u003ccode\u003eprecision\u003c/code\u003e - the resolution or granularity of the control. This is the size of the increment between discrete valid values.",
          "\u003ccode\u003eupdatePeriod\u003c/code\u003e - the smallest time interval, in microseconds, over which the control can change from one discrete value to the next during a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/FloatControl.html#shift(float,float,int)\"\u003e\u003ccode\u003eshift\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003einitialValue\u003c/code\u003e - the value that the control starts with when constructed",
          "\u003ccode\u003eunits\u003c/code\u003e - the label for the units in which the control\u0027s values are expressed, such as \"dB\" or \"frames per second\"",
          "\u003ccode\u003eminLabel\u003c/code\u003e - the label for the minimum value, such as \"Left\" or \"Off\"",
          "\u003ccode\u003emidLabel\u003c/code\u003e - the label for the midpoint value, such as \"Center\" or \"Default\"",
          "\u003ccode\u003emaxLabel\u003c/code\u003e - the label for the maximum value, such as \"Right\" or \"Full\""
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eminimum\u003c/code\u003e is greater than \n\u003ccode\u003emaximum\u003c/code\u003e or \n\u003ccode\u003einitialValue\u003c/code\u003e does not fall within the allowable range"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.FloatControl$Type",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "minimum",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "maximum",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "precision",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "updatePeriod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "initialValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "units",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new float control object with the given parameters. The labels for the minimum, maximum, and mid-point values are set to zero-length strings.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the kind of control represented by this float control object",
          "\u003ccode\u003eminimum\u003c/code\u003e - the smallest value permitted for the control",
          "\u003ccode\u003emaximum\u003c/code\u003e - the largest value permitted for the control",
          "\u003ccode\u003eprecision\u003c/code\u003e - the resolution or granularity of the control. This is the size of the increment between discrete valid values.",
          "\u003ccode\u003eupdatePeriod\u003c/code\u003e - the smallest time interval, in microseconds, over which the control can change from one discrete value to the next during a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/FloatControl.html#shift(float,float,int)\"\u003e\u003ccode\u003eshift\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003einitialValue\u003c/code\u003e - the value that the control starts with when constructed",
          "\u003ccode\u003eunits\u003c/code\u003e - the label for the units in which the control\u0027s values are expressed, such as \"dB\" or \"frames per second\""
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eminimum\u003c/code\u003e is greater than \n\u003ccode\u003emaximum\u003c/code\u003e or \n\u003ccode\u003einitialValue\u003c/code\u003e does not fall within the allowable range"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.sound.sampled.FloatControl$Type"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.sound.sampled.FloatControl",
  "comment": "A \n\u003ccode\u003eFloatControl\u003c/code\u003e object provides control over a range of floating-point values. Float controls are often represented in graphical user interfaces by continuously adjustable objects such as sliders or rotary knobs. Concrete subclasses of \n\u003ccode\u003eFloatControl\u003c/code\u003e implement controls, such as gain and pan, that affect a line\u0027s audio signal in some way that an application can manipulate. The \n\u003ca href\u003d\"FloatControl.Type.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eFloatControl.Type\u003c/code\u003e\u003c/a\u003e inner class provides static instances of types that are used to identify some common kinds of float control. \n\u003cp\u003e The \u003ccode\u003eFloatControl\u003c/code\u003e abstract class provides methods to set and get the control\u0027s current floating-point value. Other methods obtain the possible range of values and the control\u0027s resolution (the smallest increment between returned values). Some float controls allow ramping to a new value over a specified period of time. \u003ccode\u003eFloatControl\u003c/code\u003e also includes methods that return string labels for the minimum, maximum, and midpoint positions of the control.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#getControls()\"\u003e\u003ccode\u003eLine.getControls()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#isControlSupported(javax.sound.sampled.Control.Type)\"\u003e\u003ccode\u003eLine.isControlSupported(javax.sound.sampled.Control.Type)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}