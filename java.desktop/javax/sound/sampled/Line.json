{
  "packageName": "javax.sound.sampled",
  "simpleName": "Line",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.AutoCloseable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.sound.sampled.Line$Info",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLineInfo",
      "comment": "Obtains the Line.Info object describing this line.",
      "annotations": [],
      "tagMap": {
        "return": [
          "description of the line"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sound.sampled.LineUnavailableException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "open",
      "comment": "Opens the line, indicating that it should acquire any required system resources and become operational. If this operation succeeds, the line is marked as open, and an OPEN event is dispatched to the line\u0027s listeners. Note that some lines, once closed, cannot be reopened. Attempts to reopen such a line will always result in an LineUnavailableException. Some types of lines have configurable properties that may affect resource allocation. For example, a DataLine must be opened with a particular format and buffer size. Such lines should provide a mechanism for configuring these properties, such as an additional open method or methods which allow an application to specify the desired settings. This method takes no arguments, and opens the line with the current settings. For SourceDataLine and TargetDataLine objects, this means that the line is opened with default settings. For a Clip, however, the buffer size is determined when data is loaded. Since this method does not allow the application to specify any data to load, an IllegalArgumentException is thrown. Therefore, you should instead use one of the open methods provided in the Clip interface to load data into the Clip. For DataLine\u0027s, if the DataLine.Info object which was used to retrieve the line, specifies at least one fully qualified audio format, the last one will be used as the default format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#isOpen()\"\u003e\u003ccode\u003eisOpen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineEvent.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eLineEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/DataLine.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eDataLine\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Clip.html#open(javax.sound.sampled.AudioFormat,byte%5B%5D,int,int)\"\u003e\u003ccode\u003eClip.open(AudioFormat, byte[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Clip.html#open(javax.sound.sampled.AudioInputStream)\"\u003e\u003ccode\u003eClip.open(AudioInputStream)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this method is called on a Clip instance",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineUnavailableException.html\" title\u003d\"class in javax.sound.sampled\"\u003eLineUnavailableException\u003c/a\u003e\u003c/code\u003e - if the line cannot be opened due to resource restrictions",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the line cannot be opened due to security restrictions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Closes the line, indicating that any system resources in use by the line can be released. If this operation succeeds, the line is marked closed and a CLOSE event is dispatched to the line\u0027s listeners.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#open()\"\u003e\u003ccode\u003eopen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#isOpen()\"\u003e\u003ccode\u003eisOpen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineEvent.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eLineEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the line cannot be closed due to security restrictions"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOpen",
      "comment": "Indicates whether the line is open, meaning that it has reserved system resources and is operational, although it might not currently be playing or capturing sound.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#open()\"\u003e\u003ccode\u003eopen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the line is open, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Control",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getControls",
      "comment": "Obtains the set of controls associated with this line. Some controls may only be available when the line is open. If there are no controls, this method returns an array of length 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#getControl(javax.sound.sampled.Control.Type)\"\u003e\u003ccode\u003egetControl(javax.sound.sampled.Control.Type)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the array of controls"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.Control$Type",
            "type": "Class"
          },
          "name": "control",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isControlSupported",
      "comment": "Indicates whether the line supports a control of the specified type. Some controls may only be available when the line is open.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econtrol\u003c/code\u003e - the type of the control for which support is queried"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if at least one control of the specified type is supported, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sound.sampled.Control",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.Control$Type",
            "type": "Class"
          },
          "name": "control",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getControl",
      "comment": "Obtains a control of the specified type, if there is any. Some controls may only be available when the line is open.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#getControls()\"\u003e\u003ccode\u003egetControls()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#isControlSupported(javax.sound.sampled.Control.Type)\"\u003e\u003ccode\u003eisControlSupported(Control.Type control)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtrol\u003c/code\u003e - the type of the requested control"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if a control of the specified type is not supported"
        ],
        "return": [
          "a control of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.LineListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addLineListener",
      "comment": "Adds a listener to this line. Whenever the line\u0027s status changes, the listener\u0027s update() method is called with a LineEvent object that describes the change.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#removeLineListener(javax.sound.sampled.LineListener)\"\u003e\u003ccode\u003eremoveLineListener(javax.sound.sampled.LineListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineListener.html#update(javax.sound.sampled.LineEvent)\"\u003e\u003ccode\u003eLineListener.update(javax.sound.sampled.LineEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineEvent.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eLineEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the object to add as a listener to this line"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.LineListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeLineListener",
      "comment": "Removes the specified listener from this line\u0027s list of listeners.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#addLineListener(javax.sound.sampled.LineListener)\"\u003e\u003ccode\u003eaddLineListener(javax.sound.sampled.LineListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - listener to remove"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.sound.sampled.Line$Info"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sound.sampled.Line",
  "comment": "The \n\u003ccode\u003eLine\u003c/code\u003e interface represents a mono or multi-channel audio feed. A line is an element of the digital audio \"pipeline,\" such as a mixer, an input or output port, or a data path into or out of a mixer. \n\u003cp\u003e A line can have controls, such as gain, pan, and reverb. The controls themselves are instances of classes that extend the base \u003ca href\u003d\"Control.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eControl\u003c/code\u003e\u003c/a\u003e class. The \u003ccode\u003eLine\u003c/code\u003e interface provides two accessor methods for obtaining the line\u0027s controls: \u003ca href\u003d\"#getControls()\"\u003e\u003ccode\u003egetControls\u003c/code\u003e\u003c/a\u003e returns the entire set, and \u003ca href\u003d\"#getControl(javax.sound.sampled.Control.Type)\"\u003e\u003ccode\u003egetControl\u003c/code\u003e\u003c/a\u003e returns a single control of specified type. \u003c/p\u003e\n\u003cp\u003e Lines exist in various states at different times. When a line opens, it reserves system resources for itself, and when it closes, these resources are freed for other objects or applications. The \u003ca href\u003d\"#isOpen()\"\u003e\u003ccode\u003eisOpen()\u003c/code\u003e\u003c/a\u003e method lets you discover whether a line is open or closed. An open line need not be processing data, however. Such processing is typically initiated by subinterface methods such as \u003ca href\u003d\"SourceDataLine.html#write(byte%5B%5D,int,int)\"\u003e\u003ccode\u003eSourceDataLine.write\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"TargetDataLine.html#read(byte%5B%5D,int,int)\"\u003e\u003ccode\u003eTargetDataLine.read\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e You can register an object to receive notifications whenever the line\u0027s state changes. The object must implement the \u003ca href\u003d\"LineListener.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eLineListener\u003c/code\u003e\u003c/a\u003e interface, which consists of the single method \u003ca href\u003d\"LineListener.html#update(javax.sound.sampled.LineEvent)\"\u003e\u003ccode\u003eupdate\u003c/code\u003e\u003c/a\u003e. This method will be invoked when a line opens and closes (and, if it\u0027s a \u003ca href\u003d\"DataLine.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eDataLine\u003c/code\u003e\u003c/a\u003e , when it starts and stops). \u003c/p\u003e\n\u003cp\u003e An object can be registered to listen to multiple lines. The event it receives in its \u003ccode\u003eupdate\u003c/code\u003e method will specify which line created the event, what type of event it was (\u003ccode\u003eOPEN\u003c/code\u003e, \u003ccode\u003eCLOSE\u003c/code\u003e, \u003ccode\u003eSTART\u003c/code\u003e, or \u003ccode\u003eSTOP\u003c/code\u003e), and how many sample frames the line had processed at the time the event occurred. \u003c/p\u003e\n\u003cp\u003e Certain line operations, such as open and close, can generate security exceptions if invoked by unprivileged code when the line is a shared audio resource.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineEvent.html\" title\u003d\"class in javax.sound.sampled\"\u003e\u003ccode\u003eLineEvent\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}