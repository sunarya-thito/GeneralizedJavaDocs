{
  "packageName": "javax.sound.sampled",
  "simpleName": "Clip",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.sound.sampled.DataLine",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOOP_CONTINUOUSLY",
      "comment": "A value indicating that looping should continue indefinitely rather than complete after a specific number of loops.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Clip.html#loop(int)\"\u003e\u003ccode\u003eloop(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sound.sampled.Clip.LOOP_CONTINUOUSLY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sound.sampled.LineUnavailableException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.AudioFormat",
            "type": "Class"
          },
          "name": "format",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bufferSize",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "open",
      "comment": "Opens the clip, meaning that it should acquire any required system resources and become operational. The clip is opened with the format and audio data indicated. If this operation succeeds, the line is marked as open and an OPEN event is dispatched to the line\u0027s listeners. Invoking this method on a line which is already open is illegal and may result in an IllegalStateException. Note that some lines, once closed, cannot be reopened. Attempts to reopen such a line will always result in a LineUnavailableException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#close()\"\u003e\u003ccode\u003eLine.close()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#isOpen()\"\u003e\u003ccode\u003eLine.isOpen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineListener.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eLineListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - the format of the supplied audio data",
          "\u003ccode\u003edata\u003c/code\u003e - a byte array containing audio data to load into the clip",
          "\u003ccode\u003eoffset\u003c/code\u003e - the point at which to start copying, expressed in \n\u003cem\u003ebytes\u003c/em\u003e from the beginning of the array",
          "\u003ccode\u003ebufferSize\u003c/code\u003e - the number of \n\u003cem\u003ebytes\u003c/em\u003e of data to load into the clip from the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineUnavailableException.html\" title\u003d\"class in javax.sound.sampled\"\u003eLineUnavailableException\u003c/a\u003e\u003c/code\u003e - if the line cannot be opened due to resource restrictions",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the buffer size does not represent an integral number of sample frames, or if \n\u003ccode\u003eformat\u003c/code\u003e is not fully specified or invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the line is already open",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the line cannot be opened due to security restrictions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sound.sampled.LineUnavailableException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.sound.sampled.AudioInputStream",
            "type": "Class"
          },
          "name": "stream",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "open",
      "comment": "Opens the clip with the format and audio data present in the provided audio input stream. Opening a clip means that it should acquire any required system resources and become operational. If this operation input stream. If this operation succeeds, the line is marked open and an OPEN event is dispatched to the line\u0027s listeners. Invoking this method on a line which is already open is illegal and may result in an IllegalStateException. Note that some lines, once closed, cannot be reopened. Attempts to reopen such a line will always result in a LineUnavailableException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#close()\"\u003e\u003ccode\u003eLine.close()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Line.html#isOpen()\"\u003e\u003ccode\u003eLine.isOpen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineListener.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eLineListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - an audio input stream from which audio data will be read into the clip"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/LineUnavailableException.html\" title\u003d\"class in javax.sound.sampled\"\u003eLineUnavailableException\u003c/a\u003e\u003c/code\u003e - if the line cannot be opened due to resource restrictions",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs during reading of the stream",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the stream\u0027s audio format is not fully specified or invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the line is already open",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the line cannot be opened due to security restrictions"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFrameLength",
      "comment": "Obtains the media length in sample frames.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the media length, expressed in sample frames, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e if the line is not open"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMicrosecondLength",
      "comment": "Obtains the media duration in microseconds.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/AudioSystem.html#NOT_SPECIFIED\"\u003e\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the media duration, expressed in microseconds, or \n\u003ccode\u003eAudioSystem.NOT_SPECIFIED\u003c/code\u003e if the line is not open"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "frames",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFramePosition",
      "comment": "Sets the media position in sample frames. The position is zero-based; the first frame is frame number zero. When the clip begins playing the next time, it will start by playing the frame at this position. To obtain the current position in sample frames, use the getFramePosition method of DataLine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eframes\u003c/code\u003e - the desired new media position, expressed in sample frames"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "microseconds",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMicrosecondPosition",
      "comment": "Sets the media position in microseconds. When the clip begins playing the next time, it will start at this position. The level of precision is not guaranteed. For example, an implementation might calculate the microsecond position from the current frame position and the audio sample frame rate. The precision in microseconds would then be limited to the number of microseconds per sample frame. To obtain the current position in microseconds, use the getMicrosecondPosition method of DataLine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emicroseconds\u003c/code\u003e - the desired new media position, expressed in microseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "end",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLoopPoints",
      "comment": "Sets the first and last sample frames that will be played in the loop. The ending point must be greater than or equal to the starting point, and both must fall within the size of the loaded media. A value of 0 for the starting point means the beginning of the loaded media. Similarly, a value of -1 for the ending point indicates the last frame of the media.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the loop\u0027s starting position, in sample frames (zero-based)",
          "\u003ccode\u003eend\u003c/code\u003e - the loop\u0027s ending position, in sample frames (zero-based), or -1 to indicate the final frame"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the requested loop points cannot be set, usually because one or both falls outside the media\u0027s duration or because the ending point is before the starting point"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "loop",
      "comment": "Starts looping playback from the current position. Playback will continue to the loop\u0027s end point, then loop back to the loop start point count times, and finally continue playback to the end of the clip. If the current position when this method is invoked is greater than the loop end point, playback simply continues to the end of the clip without looping. A count value of 0 indicates that any current looping should cease and playback should continue to the end of the clip. The behavior is undefined when this method is invoked with any other value during a loop operation. If playback is stopped during looping, the current loop status is cleared; the behavior of subsequent loop and start requests is not affected by an interrupted loop operation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - the number of times playback should loop back from the loop\u0027s end position to the loop\u0027s start position, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/sound/sampled/Clip.html#LOOP_CONTINUOUSLY\"\u003e\u003ccode\u003eLOOP_CONTINUOUSLY\u003c/code\u003e\u003c/a\u003e to indicate that looping should continue until interrupted"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sound.sampled.Clip",
  "comment": "The \n\u003ccode\u003eClip\u003c/code\u003e interface represents a special kind of data line whose audio data can be loaded prior to playback, instead of being streamed in real time. \n\u003cp\u003e Because the data is pre-loaded and has a known length, you can set a clip to start playing at any position in its audio data. You can also create a loop, so that when the clip is played it will cycle repeatedly. Loops are specified with a starting and ending sample frame, along with the number of times that the loop should be played. \u003c/p\u003e\n\u003cp\u003e Clips may be obtained from a \u003ca href\u003d\"Mixer.html\" title\u003d\"interface in javax.sound.sampled\"\u003e\u003ccode\u003eMixer\u003c/code\u003e\u003c/a\u003e that supports lines of this type. Data is loaded into a clip when it is opened. \u003c/p\u003e\n\u003cp\u003e Playback of an audio clip may be started and stopped using the \u003ca href\u003d\"DataLine.html#start()\"\u003e\u003ccode\u003estart\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"DataLine.html#stop()\"\u003e\u003ccode\u003estop\u003c/code\u003e\u003c/a\u003e methods. These methods do not reset the media position; \u003ccode\u003estart\u003c/code\u003e causes playback to continue from the position where playback was last stopped. To restart playback from the beginning of the clip\u0027s audio data, simply follow the invocation of \u003ccode\u003estop\u003c/code\u003e with \u003ccode\u003esetFramePosition(0)\u003c/code\u003e, which rewinds the media to the beginning of the clip.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}