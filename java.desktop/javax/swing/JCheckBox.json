{
  "packageName": "javax.swing",
  "simpleName": "JCheckBox",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JToggleButton",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BORDER_PAINTED_FLAT_CHANGED_PROPERTY",
      "comment": "Identifies a change to the flat property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JCheckBox.BORDER_PAINTED_FLAT_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBorderPaintedFlat",
      "comment": "Sets the borderPaintedFlat property, which gives a hint to the look and feel as to the appearance of the check box border. This is usually set to true when a JCheckBox instance is used as a renderer in a component such as a JTable or JTree. The default value for the borderPaintedFlat property is false. This method fires a property changed event. Some look and feels might not implement flat borders; they will ignore this property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether the border is painted flat."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JCheckBox.html#isBorderPaintedFlat()\"\u003e\u003ccode\u003eisBorderPaintedFlat()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e requests that the border be painted flat; \n\u003ccode\u003efalse\u003c/code\u003e requests normal borders"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBorderPaintedFlat",
      "comment": "Gets the value of the borderPaintedFlat property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JCheckBox.html#setBorderPaintedFlat(boolean)\"\u003e\u003ccode\u003esetBorderPaintedFlat(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eborderPaintedFlat\u003c/code\u003e property"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the UI property to a value from the current look and feel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html\" title\u003d\"class in javax.swing\"\u003eJToggleButton\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns a string that specifies the name of the L\u0026F class that renders this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "A string that specifies the name of the L\u0026F class"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html\" title\u003d\"class in javax.swing\"\u003eJToggleButton\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"CheckBoxUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JCheckBox. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null. specific new aspects of the JFC components.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html\" title\u003d\"class in javax.swing\"\u003eJToggleButton\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this JCheckBox."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JCheckBox. For JCheckBoxes, the AccessibleContext takes the form of an AccessibleJCheckBox. A new AccessibleJCheckBox instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "The AccessibleContext associated with this CheckBox."
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JToggleButton.html\" title\u003d\"class in javax.swing\"\u003eJToggleButton\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJCheckBox that serves as the AccessibleContext of this JCheckBox"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box button with no text, no icon.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box with an icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the Icon image to display"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "selected"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a check box with an icon and specifies whether or not it is initially selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the Icon image to display",
          "\u003ccode\u003eselected\u003c/code\u003e - a boolean value indicating the initial selection state. If \n\u003ccode\u003etrue\u003c/code\u003e the check box is selected"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box with text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the check box."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a check box where properties are taken from the Action supplied.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e used to specify the new check box"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "selected"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a check box with text and specifies whether or not it is initially selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the check box.",
          "\u003ccode\u003eselected\u003c/code\u003e - a boolean value indicating the initial selection state. If \n\u003ccode\u003etrue\u003c/code\u003e the check box is selected"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box with the specified text and icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the check box.",
          "\u003ccode\u003eicon\u003c/code\u003e - the Icon image to display"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "selected"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a check box with text and icon, and specifies whether or not it is initially selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the check box.",
          "\u003ccode\u003eicon\u003c/code\u003e - the Icon image to display",
          "\u003ccode\u003eselected\u003c/code\u003e - a boolean value indicating the initial selection state. If \n\u003ccode\u003etrue\u003c/code\u003e the check box is selected"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JCheckBox$AccessibleJCheckBox"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JCheckBox",
  "comment": "An implementation of a check box -- an item that can be selected or deselected, and which displays its state to the user. By convention, any number of check boxes in a group can be selected. See \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/button.html\"\u003eHow to Use Buttons, Check Boxes, and Radio Buttons\u003c/a\u003e in \n\u003cem\u003eThe Java Tutorial\u003c/em\u003e for examples and information on using check boxes. \n\u003cp\u003e Buttons can be configured, and to some degree controlled, by \u003ccode\u003e\u003ca href\u003d\"Action.html\"\u003eAction\u003c/a\u003e\u003c/code\u003es. Using an \u003ccode\u003eAction\u003c/code\u003e with a button has many benefits beyond directly configuring a button. Refer to \u003ca href\u003d\"Action.html#buttonActions\"\u003e Swing Components Supporting \u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e for more details, and you can find more information in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/action.html\"\u003eHow to Use Actions\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRadioButton.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJRadioButton\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}