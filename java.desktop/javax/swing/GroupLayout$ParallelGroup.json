{
  "packageName": "javax.swing",
  "simpleName": "ParallelGroup",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.GroupLayout$Group",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Group",
            "type": "Class"
          },
          "name": "group",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addGroup",
      "comment": "Adds a Group to this Group.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html#addGroup(javax.swing.GroupLayout.Group)\"\u003eaddGroup\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003eGroupLayout.Group\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the \n\u003ccode\u003eGroup\u003c/code\u003e to add"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addComponent",
      "comment": "Adds a Component to this Group.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html#addComponent(java.awt.Component)\"\u003eaddComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003eGroupLayout.Group\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to add"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "min",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pref",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addComponent",
      "comment": "Adds a Component to this Group with the specified size.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html#addComponent(java.awt.Component,int,int,int)\"\u003eaddComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003eGroupLayout.Group\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to add",
          "\u003ccode\u003emin\u003c/code\u003e - the minimum size or one of \n\u003ccode\u003eDEFAULT_SIZE\u003c/code\u003e or \n\u003ccode\u003ePREFERRED_SIZE\u003c/code\u003e",
          "\u003ccode\u003epref\u003c/code\u003e - the preferred size or one of \n\u003ccode\u003eDEFAULT_SIZE\u003c/code\u003e or \n\u003ccode\u003ePREFERRED_SIZE\u003c/code\u003e",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum size or one of \n\u003ccode\u003eDEFAULT_SIZE\u003c/code\u003e or \n\u003ccode\u003ePREFERRED_SIZE\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pref",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addGap",
      "comment": "Adds a rigid gap to this Group.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html#addGap(int)\"\u003eaddGap\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003eGroupLayout.Group\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epref\u003c/code\u003e - the size of the gap"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "min",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pref",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addGap",
      "comment": "Adds a gap to this Group with the specified size.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html#addGap(int,int,int)\"\u003eaddGap\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003eGroupLayout.Group\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - the minimum size of the gap",
          "\u003ccode\u003epref\u003c/code\u003e - the preferred size of the gap",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum size of the gap"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Alignment",
            "type": "Class"
          },
          "name": "alignment",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Group",
            "type": "Class"
          },
          "name": "group",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addGroup",
      "comment": "Adds a Group to this ParallelGroup with the specified alignment. If the child is smaller than the Group it is aligned based on the specified alignment.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment",
          "\u003ccode\u003egroup\u003c/code\u003e - the \n\u003ccode\u003eGroup\u003c/code\u003e to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealignment\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eParallelGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Alignment",
            "type": "Class"
          },
          "name": "alignment",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addComponent",
      "comment": "Adds a Component to this ParallelGroup with the specified alignment.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment",
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealignment\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Alignment",
            "type": "Class"
          },
          "name": "alignment",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "min",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pref",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addComponent",
      "comment": "Adds a Component to this ParallelGroup with the specified alignment and size.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment",
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to add",
          "\u003ccode\u003emin\u003c/code\u003e - the minimum size",
          "\u003ccode\u003epref\u003c/code\u003e - the preferred size",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealignment\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eGroup\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.GroupLayout$ParallelGroup",
  "comment": "A \n\u003ccode\u003eGroup\u003c/code\u003e that aligns and sizes its children. \n\u003ccode\u003eParallelGroup\u003c/code\u003e aligns its children in four possible ways: along the baseline, centered, anchored to the leading edge, or anchored to the trailing edge. \n\u003ch2\u003eBaseline\u003c/h2\u003e A \n\u003ccode\u003eParallelGroup\u003c/code\u003e that aligns its children along the baseline must first decide where the baseline is anchored. The baseline can either be anchored to the top, or anchored to the bottom of the group. That is, the distance between the baseline and the beginning of the group can be a constant distance, or the distance between the end of the group and the baseline can be a constant distance. The possible choices correspond to the \n\u003ccode\u003eBaselineResizeBehavior\u003c/code\u003e constants \n\u003ca href\u003d\"../../java/awt/Component.BaselineResizeBehavior.html#CONSTANT_ASCENT\"\u003e\u003ccode\u003eCONSTANT_ASCENT\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"../../java/awt/Component.BaselineResizeBehavior.html#CONSTANT_DESCENT\"\u003e\u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e The baseline anchor may be explicitly specified by the \u003ccode\u003ecreateBaselineGroup\u003c/code\u003e method, or determined based on the elements. If not explicitly specified, the baseline will be anchored to the bottom if all the elements with a baseline, and that are aligned to the baseline, have a baseline resize behavior of \u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e; otherwise the baseline is anchored to the top of the group. \u003c/p\u003e\n\u003cp\u003e Elements aligned to the baseline are resizable if they have a baseline resize behavior of \u003ccode\u003eCONSTANT_ASCENT\u003c/code\u003e or \u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e. Elements with a baseline resize behavior of \u003ccode\u003eOTHER\u003c/code\u003e or \u003ccode\u003eCENTER_OFFSET\u003c/code\u003e are not resizable. \u003c/p\u003e\n\u003cp\u003e The baseline is calculated based on the preferred height of each of the elements that have a baseline. The baseline is calculated using the following algorithm: \u003ccode\u003emax(maxNonBaselineHeight, maxAscent + maxDescent)\u003c/code\u003e, where the \u003ccode\u003emaxNonBaselineHeight\u003c/code\u003e is the maximum height of all elements that do not have a baseline, or are not aligned along the baseline. \u003ccode\u003emaxAscent\u003c/code\u003e is the maximum ascent (baseline) of all elements that have a baseline and are aligned along the baseline. \u003ccode\u003emaxDescent\u003c/code\u003e is the maximum descent (preferred height - baseline) of all elements that have a baseline and are aligned along the baseline. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eParallelGroup\u003c/code\u003e that aligns its elements along the baseline is only useful along the vertical axis. If you create a baseline group and use it along the horizontal axis an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown when you ask \u003ccode\u003eGroupLayout\u003c/code\u003e for the minimum, preferred or maximum size or attempt to layout the components. \u003c/p\u003e\n\u003cp\u003e Elements that are not aligned to the baseline and smaller than the size of the \u003ccode\u003eParallelGroup\u003c/code\u003e are positioned in one of three ways: centered, anchored to the leading edge, or anchored to the trailing edge. \u003c/p\u003e\n\u003ch2\u003eNon-baseline \u003ccode\u003eParallelGroup\u003c/code\u003e\u003c/h2\u003e \n\u003ccode\u003eParallelGroup\u003c/code\u003es created with an alignment other than \n\u003ccode\u003eBASELINE\u003c/code\u003e align elements that are smaller than the size of the group in one of three ways: centered, anchored to the leading edge, or anchored to the trailing edge. \n\u003cp\u003e The leading edge is based on the axis and \u003ccode\u003e ComponentOrientation\u003c/code\u003e. For the vertical axis the top edge is always the leading edge, and the bottom edge is always the trailing edge. When the \u003ccode\u003eComponentOrientation\u003c/code\u003e is \u003ccode\u003e LEFT_TO_RIGHT\u003c/code\u003e, the leading edge is the left edge and the trailing edge the right edge. A \u003ccode\u003eComponentOrientation\u003c/code\u003e of \u003ccode\u003eRIGHT_TO_LEFT\u003c/code\u003e flips the left and right edges. Child elements are aligned based on the specified alignment the element was added with. If you do not specify an alignment, the alignment specified for the \u003ccode\u003eParallelGroup\u003c/code\u003e is used. \u003c/p\u003e\n\u003cp\u003e To align elements along the baseline you \u003ccode\u003ecreateBaselineGroup\u003c/code\u003e, or \u003ccode\u003ecreateParallelGroup\u003c/code\u003e with an alignment of \u003ccode\u003eBASELINE\u003c/code\u003e. If the group was not created with a baseline alignment, and you attempt to add an element specifying a baseline alignment, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#createParallelGroup()\"\u003e\u003ccode\u003eGroupLayout.createParallelGroup()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#createBaselineGroup(boolean,boolean)\"\u003e\u003ccode\u003eGroupLayout.createBaselineGroup(boolean,boolean)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}