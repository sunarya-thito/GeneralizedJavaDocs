{
  "packageName": "javax.swing",
  "simpleName": "RowFilter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "name": "M",
            "type": "Class"
          },
          {
            "name": "I",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "indices"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "M",
          "type": "Variable"
        },
        {
          "name": "I",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "regexFilter",
      "comment": "Returns a RowFilter that uses a regular expression to determine which entries to include. Only entries with at least one matching value are included. For example, the following creates a RowFilter that includes entries with at least one value starting with \"a\":    RowFilter.regexFilter(\"^a\");\n The returned filter uses Matcher.find() to test for inclusion. To test for exact matches use the characters \u0027^\u0027 and \u0027$\u0027 to match the beginning and end of the string respectively. For example, \"^foo$\" includes only rows whose string is exactly \"foo\" and not, for example, \"food\". See Pattern for a complete description of the supported regular-expression constructs.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eM\u003c/code\u003e - the type of the model to which the \n\u003ccode\u003eRowFilter\u003c/code\u003e applies",
          "\u003ccode\u003eI\u003c/code\u003e - the type of the identifier passed to the \n\u003ccode\u003eRowFilter\u003c/code\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003ePattern\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - the regular expression to filter on",
          "\u003ccode\u003eindices\u003c/code\u003e - the indices of the values to check. If not supplied all values are evaluated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eregex\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the \n\u003ccode\u003eindices\u003c/code\u003e are \u0026lt; 0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eregex\u003c/code\u003e is not a valid regular expression."
        ],
        "return": [
          "a \n\u003ccode\u003eRowFilter\u003c/code\u003e implementing the specified criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "name": "M",
            "type": "Class"
          },
          {
            "name": "I",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.RowFilter$ComparisonType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "indices"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "M",
          "type": "Variable"
        },
        {
          "name": "I",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "dateFilter",
      "comment": "Returns a RowFilter that includes entries that have at least one Date value meeting the specified criteria. For example, the following RowFilter includes only entries with at least one date value after the current date:    RowFilter.dateFilter(ComparisonType.AFTER, new Date());",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eM\u003c/code\u003e - the type of the model to which the \n\u003ccode\u003eRowFilter\u003c/code\u003e applies",
          "\u003ccode\u003eI\u003c/code\u003e - the type of the identifier passed to the \n\u003ccode\u003eRowFilter\u003c/code\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of comparison to perform",
          "\u003ccode\u003edate\u003c/code\u003e - the date to compare against",
          "\u003ccode\u003eindices\u003c/code\u003e - the indices of the values to check. If not supplied all values are evaluated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edate\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the \n\u003ccode\u003eindices\u003c/code\u003e are \u0026lt; 0 or \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRowFilter\u003c/code\u003e implementing the specified criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "name": "M",
            "type": "Class"
          },
          {
            "name": "I",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.RowFilter$ComparisonType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "number"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "indices"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "M",
          "type": "Variable"
        },
        {
          "name": "I",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "numberFilter",
      "comment": "Returns a RowFilter that includes entries that have at least one Number value meeting the specified criteria. For example, the following filter will only include entries with at least one number value equal to 10:    RowFilter.numberFilter(ComparisonType.EQUAL, 10);",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eM\u003c/code\u003e - the type of the model to which the \n\u003ccode\u003eRowFilter\u003c/code\u003e applies",
          "\u003ccode\u003eI\u003c/code\u003e - the type of the identifier passed to the \n\u003ccode\u003eRowFilter\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of comparison to perform",
          "\u003ccode\u003enumber\u003c/code\u003e - a \n\u003ccode\u003eNumber\u003c/code\u003e value to compare against",
          "\u003ccode\u003eindices\u003c/code\u003e - the indices of the values to check. If not supplied all values are evaluated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the \n\u003ccode\u003eindices\u003c/code\u003e are \u0026lt; 0, \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or \n\u003ccode\u003enumber\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRowFilter\u003c/code\u003e implementing the specified criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "name": "M",
            "type": "Class"
          },
          {
            "name": "I",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.swing.RowFilter",
                    "parameters": [
                      {
                        "lowerBounds": [
                          {
                            "name": "M",
                            "type": "Class"
                          }
                        ],
                        "type": "Wildcard"
                      },
                      {
                        "lowerBounds": [
                          {
                            "name": "I",
                            "type": "Class"
                          }
                        ],
                        "type": "Wildcard"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "filters"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "M",
          "type": "Variable"
        },
        {
          "name": "I",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "orFilter",
      "comment": "Returns a RowFilter that includes entries if any of the supplied filters includes the entry. The following example creates a RowFilter that will include any entries containing the string \"foo\" or the string \"bar\":    List\u003cRowFilter\u003cObject,Object\u003e\u003e filters \u003d new ArrayList\u003cRowFilter\u003cObject,Object\u003e\u003e(2);\n   filters.add(RowFilter.regexFilter(\"foo\"));\n   filters.add(RowFilter.regexFilter(\"bar\"));\n   RowFilter\u003cObject,Object\u003e fooBarFilter \u003d RowFilter.orFilter(filters);",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eM\u003c/code\u003e - the type of the model to which the \n\u003ccode\u003eRowFilter\u003c/code\u003e applies",
          "\u003ccode\u003eI\u003c/code\u003e - the type of the identifier passed to the \n\u003ccode\u003eRowFilter\u003c/code\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#asList(T...)\"\u003e\u003ccode\u003eArrays.asList(T...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilters\u003c/code\u003e - the \n\u003ccode\u003eRowFilter\u003c/code\u003es to test"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the filters are \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilters\u003c/code\u003e is null"
        ],
        "return": [
          "a \n\u003ccode\u003eRowFilter\u003c/code\u003e implementing the specified criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "name": "M",
            "type": "Class"
          },
          {
            "name": "I",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.swing.RowFilter",
                    "parameters": [
                      {
                        "lowerBounds": [
                          {
                            "name": "M",
                            "type": "Class"
                          }
                        ],
                        "type": "Wildcard"
                      },
                      {
                        "lowerBounds": [
                          {
                            "name": "I",
                            "type": "Class"
                          }
                        ],
                        "type": "Wildcard"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "filters"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "M",
          "type": "Variable"
        },
        {
          "name": "I",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "andFilter",
      "comment": "Returns a RowFilter that includes entries if all of the supplied filters include the entry. The following example creates a RowFilter that will include any entries containing the string \"foo\" and the string \"bar\":    List\u003cRowFilter\u003cObject,Object\u003e\u003e filters \u003d new ArrayList\u003cRowFilter\u003cObject,Object\u003e\u003e(2);\n   filters.add(RowFilter.regexFilter(\"foo\"));\n   filters.add(RowFilter.regexFilter(\"bar\"));\n   RowFilter\u003cObject,Object\u003e fooBarFilter \u003d RowFilter.andFilter(filters);",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eM\u003c/code\u003e - the type of the model the \n\u003ccode\u003eRowFilter\u003c/code\u003e applies to",
          "\u003ccode\u003eI\u003c/code\u003e - the type of the identifier passed to the \n\u003ccode\u003eRowFilter\u003c/code\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#asList(T...)\"\u003e\u003ccode\u003eArrays.asList(T...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilters\u003c/code\u003e - the \n\u003ccode\u003eRowFilter\u003c/code\u003es to test"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the filters are \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilters\u003c/code\u003e is null"
        ],
        "return": [
          "a \n\u003ccode\u003eRowFilter\u003c/code\u003e implementing the specified criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "name": "M",
            "type": "Class"
          },
          {
            "name": "I",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.RowFilter",
            "parameters": [
              {
                "name": "M",
                "type": "Class"
              },
              {
                "name": "I",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "M",
          "type": "Variable"
        },
        {
          "name": "I",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "notFilter",
      "comment": "Returns a RowFilter that includes entries if the supplied filter does not include the entry.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eM\u003c/code\u003e - the type of the model to which the \n\u003ccode\u003eRowFilter\u003c/code\u003e applies",
          "\u003ccode\u003eI\u003c/code\u003e - the type of the identifier passed to the \n\u003ccode\u003eRowFilter\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - the \n\u003ccode\u003eRowFilter\u003c/code\u003e to negate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilter\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRowFilter\u003c/code\u003e implementing the specified criteria"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.RowFilter$Entry",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "javax.swing.RowFilter",
                    "name": "M",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "javax.swing.RowFilter",
                    "name": "I",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "entry"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "include",
      "comment": "Returns true if the specified entry should be shown; returns false if the entry should be hidden. The entry argument is valid only for the duration of the invocation. Using entry after the call returns results in undefined behavior.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eentry\u003c/code\u003e - a non-\n\u003ccode\u003enull\u003c/code\u003e object that wraps the underlying object from the model"
        ],
        "return": [
          "true if the entry should be shown"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.RowFilter$Entry",
    "javax.swing.RowFilter$ComparisonType"
  ],
  "genericParameters": [
    {
      "name": "M",
      "type": "Variable"
    },
    {
      "name": "I",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.RowFilter",
  "comment": "\u003ccode\u003eRowFilter\u003c/code\u003e is used to filter out entries from the model so that they are not shown in the view. For example, a \n\u003ccode\u003eRowFilter\u003c/code\u003e associated with a \n\u003ccode\u003eJTable\u003c/code\u003e might only allow rows that contain a column with a specific string. The meaning of \n\u003cem\u003eentry\u003c/em\u003e depends on the component type. For example, when a filter is associated with a \n\u003ccode\u003eJTable\u003c/code\u003e, an entry corresponds to a row; when associated with a \n\u003ccode\u003eJTree\u003c/code\u003e, an entry corresponds to a node. \n\u003cp\u003e Subclasses must override the \u003ccode\u003einclude\u003c/code\u003e method to indicate whether the entry should be shown in the view. The \u003ccode\u003eEntry\u003c/code\u003e argument can be used to obtain the values in each of the columns in that entry. The following example shows an \u003ccode\u003einclude\u003c/code\u003e method that allows only entries containing one or more values starting with the string \"a\": \u003c/p\u003e\n\u003cpre\u003e RowFilter\u0026lt;Object,Object\u0026gt; startsWithAFilter \u003d new RowFilter\u0026lt;Object,Object\u0026gt;() {\n   public boolean include(Entry\u0026lt;? extends Object, ? extends Object\u0026gt; entry) {\n     for (int i \u003d entry.getValueCount() - 1; i \u0026gt;\u003d 0; i--) {\n       if (entry.getStringValue(i).startsWith(\"a\")) {\n         // The value starts with \"a\", include it\n         return true;\n       }\n     }\n     // None of the columns start with \"a\"; return false so that this\n     // entry is not shown\n     return false;\n   }\n };\n \u003c/pre\u003e \n\u003ccode\u003eRowFilter\u003c/code\u003e has two formal type parameters that allow you to create a \n\u003ccode\u003eRowFilter\u003c/code\u003e for a specific model. For example, the following assumes a specific model that is wrapping objects of type \n\u003ccode\u003ePerson\u003c/code\u003e. Only \n\u003ccode\u003ePerson\u003c/code\u003es with an age over 20 will be shown: \n\u003cpre\u003e RowFilter\u0026lt;PersonModel,Integer\u0026gt; ageFilter \u003d new RowFilter\u0026lt;PersonModel,Integer\u0026gt;() {\n   public boolean include(Entry\u0026lt;? extends PersonModel, ? extends Integer\u0026gt; entry) {\n     PersonModel personModel \u003d entry.getModel();\n     Person person \u003d personModel.getPerson(entry.getIdentifier());\n     if (person.getAge() \u0026gt; 20) {\n       // Returning true indicates this row should be shown.\n       return true;\n     }\n     // Age is \u0026lt;\u003d 20, don\u0027t show it.\n     return false;\n   }\n };\n PersonModel model \u003d createPersonModel();\n TableRowSorter\u0026lt;PersonModel\u0026gt; sorter \u003d new TableRowSorter\u0026lt;PersonModel\u0026gt;(model);\n sorter.setRowFilter(ageFilter);\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}