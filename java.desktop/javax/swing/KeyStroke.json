{
  "packageName": "javax.swing",
  "simpleName": "KeyStroke",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.AWTKeyStroke",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "keyChar",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStroke",
      "comment": "Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified character.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeyChar\u003c/code\u003e - the character value for a keyboard key"
        ],
        "return": [
          "a KeyStroke object for that key"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "keyChar",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "onKeyRelease",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStroke",
      "comment": "Returns an instance of a KeyStroke, specifying whether the key is considered to be activated when it is pressed or released. Unlike all other factory methods in this class, the instances returned by this method are not necessarily cached or shared.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeyChar\u003c/code\u003e - the character value for a keyboard key",
          "\u003ccode\u003eonKeyRelease\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if this KeyStroke corresponds to a key release; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "return": [
          "a KeyStroke object for that key"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Character",
            "type": "Class"
          },
          "name": "keyChar",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modifiers",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStroke",
      "comment": "Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers. Note that the first parameter is of type Character rather than char. This is to avoid inadvertent clashes with calls to getKeyStroke(int keyCode, int modifiers). The modifiers consist of any combination of following: java.awt.event.InputEvent.SHIFT_DOWN_MASK java.awt.event.InputEvent.CTRL_DOWN_MASK java.awt.event.InputEvent.META_DOWN_MASK java.awt.event.InputEvent.ALT_DOWN_MASK java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK The old modifiers listed below also can be used, but they are mapped to _DOWN_ modifiers. java.awt.event.InputEvent.SHIFT_MASK java.awt.event.InputEvent.CTRL_MASK java.awt.event.InputEvent.META_MASK java.awt.event.InputEvent.ALT_MASK java.awt.event.InputEvent.ALT_GRAPH_MASK also can be used, but they are mapped to _DOWN_ modifiers. Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInputEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyChar\u003c/code\u003e - the Character object for a keyboard character",
          "\u003ccode\u003emodifiers\u003c/code\u003e - a bitwise-ored combination of any modifiers"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if keyChar is null"
        ],
        "return": [
          "an KeyStroke object for that key"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "keyCode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modifiers",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "onKeyRelease",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStroke",
      "comment": "Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released. The \"virtual key\" constants defined in java.awt.event.KeyEvent can be used to specify the key code. For example: java.awt.event.KeyEvent.VK_ENTER java.awt.event.KeyEvent.VK_TAB java.awt.event.KeyEvent.VK_SPACE Alternatively, the key code may be obtained by calling java.awt.event.KeyEvent.getExtendedKeyCodeForChar. The modifiers consist of any combination of: java.awt.event.InputEvent.SHIFT_DOWN_MASK java.awt.event.InputEvent.CTRL_DOWN_MASK java.awt.event.InputEvent.META_DOWN_MASK java.awt.event.InputEvent.ALT_DOWN_MASK java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK The old modifiers java.awt.event.InputEvent.SHIFT_MASK java.awt.event.InputEvent.CTRL_MASK java.awt.event.InputEvent.META_MASK java.awt.event.InputEvent.ALT_MASK java.awt.event.InputEvent.ALT_GRAPH_MASK also can be used, but they are mapped to _DOWN_ modifiers. Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInputEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyCode\u003c/code\u003e - an int specifying the numeric code for a keyboard key",
          "\u003ccode\u003emodifiers\u003c/code\u003e - a bitwise-ored combination of any modifiers",
          "\u003ccode\u003eonKeyRelease\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the KeyStroke should represent a key release; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "return": [
          "a KeyStroke object for that key"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "keyCode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modifiers",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStroke",
      "comment": "Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers. The returned KeyStroke will correspond to a key press. The \"virtual key\" constants defined in java.awt.event.KeyEvent can be used to specify the key code. For example: java.awt.event.KeyEvent.VK_ENTER java.awt.event.KeyEvent.VK_TAB java.awt.event.KeyEvent.VK_SPACE Alternatively, the key code may be obtained by calling java.awt.event.KeyEvent.getExtendedKeyCodeForChar. The modifiers consist of any combination of: java.awt.event.InputEvent.SHIFT_DOWN_MASK java.awt.event.InputEvent.CTRL_DOWN_MASK java.awt.event.InputEvent.META_DOWN_MASK java.awt.event.InputEvent.ALT_DOWN_MASK java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK The old modifiers java.awt.event.InputEvent.SHIFT_MASK java.awt.event.InputEvent.CTRL_MASK java.awt.event.InputEvent.META_MASK java.awt.event.InputEvent.ALT_MASK java.awt.event.InputEvent.ALT_GRAPH_MASK also can be used, but they are mapped to _DOWN_ modifiers. Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInputEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyCode\u003c/code\u003e - an int specifying the numeric code for a keyboard key",
          "\u003ccode\u003emodifiers\u003c/code\u003e - a bitwise-ored combination of any modifiers"
        ],
        "return": [
          "a KeyStroke object for that key"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "name": "anEvent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStrokeForEvent",
      "comment": "Returns a KeyStroke which represents the stroke which generated a given KeyEvent. This method obtains the keyChar from a KeyTyped event, and the keyCode from a KeyPressed or KeyReleased event. The KeyEvent modifiers are obtained for all three types of KeyEvent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eanEvent\u003c/code\u003e - the KeyEvent from which to obtain the KeyStroke"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eanEvent\u003c/code\u003e is null"
        ],
        "return": [
          "the KeyStroke that precipitated the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeyStroke",
      "comment": "Parses a string and returns a KeyStroke. The string must have the following syntax:     \u003cmodifiers\u003e* (\u003ctypedID\u003e | \u003cpressedReleasedID\u003e)\n\n    modifiers :\u003d shift | control | ctrl | meta | alt | altGraph\n    typedID :\u003d typed \u003ctypedKey\u003e\n    typedKey :\u003d string of length 1 giving Unicode character.\n    pressedReleasedID :\u003d (pressed | released) key\n    key :\u003d KeyEvent key code name, i.e. the name following \"VK_\".\n If typed, pressed or released is not specified, pressed is assumed. Here are some examples:      \"INSERT\" \u003d\u003e getKeyStroke(KeyEvent.VK_INSERT, 0);\n     \"control DELETE\" \u003d\u003e getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);\n     \"alt shift X\" \u003d\u003e getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);\n     \"alt shift released X\" \u003d\u003e getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);\n     \"typed a\" \u003d\u003e getKeyStroke(\u0027a\u0027);\n In order to maintain backward-compatibility, specifying a null String, or a String which is formatted incorrectly, returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a String formatted as described above"
        ],
        "return": [
          "a KeyStroke object for that String, or null if the specified String is null, or is formatted incorrectly"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.KeyStroke",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Keymap.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eKeymap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/KeyStroke.html#getKeyStroke(char)\"\u003e\u003ccode\u003egetKeyStroke(char)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}