{
  "packageName": "javax.swing.undo",
  "simpleName": "UndoableEdit",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.undo.CannotUndoException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "undo",
      "comment": "Undo the edit.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/undo/CannotUndoException.html\" title\u003d\"class in javax.swing.undo\"\u003eCannotUndoException\u003c/a\u003e\u003c/code\u003e - if this edit can not be undone"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canUndo",
      "comment": "Returns true if this edit may be undone.",
      "tagMap": {
        "return": [
          "true if this edit may be undone"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.undo.CannotRedoException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "redo",
      "comment": "Re-applies the edit.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/undo/CannotRedoException.html\" title\u003d\"class in javax.swing.undo\"\u003eCannotRedoException\u003c/a\u003e\u003c/code\u003e - if this edit can not be redone"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canRedo",
      "comment": "Returns true if this edit may be redone.",
      "tagMap": {
        "return": [
          "true if this edit may be redone"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "die",
      "comment": "Informs the edit that it should no longer be used. Once an UndoableEdit has been marked as dead it can no longer be undone or redone. This is a useful hook for cleaning up state no longer needed once undoing or redoing is impossible--for example, deleting file resources used by objects that can no longer be undeleted. UndoManager calls this before it dequeues edits. Note that this is a one-way operation. There is no \"un-die\" method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/undo/CompoundEdit.html#die()\"\u003e\u003ccode\u003eCompoundEdit.die()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.undo.UndoableEdit",
            "type": "Class"
          },
          "field": {
            "name": "anEdit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addEdit",
      "comment": "Adds an UndoableEdit to this UndoableEdit. This method can be used to coalesce smaller edits into a larger compound edit. For example, text editors typically allow undo operations to apply to words or sentences. The text editor may choose to generate edits on each key event, but allow those edits to be coalesced into a more user-friendly unit, such as a word. In this case, the UndoableEdit would override addEdit to return true when the edits may be coalesced. A return value of true indicates anEdit was incorporated into this edit. A return value of false indicates anEdit may not be incorporated into this edit. Typically the receiver is already in the queue of a UndoManager (or other UndoableEditListener), and is being given a chance to incorporate anEdit rather than letting it be added to the queue in turn. If true is returned, from now on anEdit must return false from canUndo and canRedo, and must throw the appropriate exception on undo or redo.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eanEdit\u003c/code\u003e - the edit to be added"
        ],
        "return": [
          "true if \n\u003ccode\u003eanEdit\u003c/code\u003e may be incorporated into this edit"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.undo.UndoableEdit",
            "type": "Class"
          },
          "field": {
            "name": "anEdit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replaceEdit",
      "comment": "Returns true if this UndoableEdit should replace anEdit. This method is used by CompoundEdit and the UndoManager; it is called if anEdit could not be added to the current edit (addEdit returns false). This method provides a way for an edit to replace an existing edit. This message is the opposite of addEdit--anEdit has typically already been queued in an UndoManager (or other UndoableEditListener), and the receiver is being given a chance to take its place. If true is returned, from now on anEdit must return false from canUndo() and canRedo(), and must throw the appropriate exception on undo() or redo().",
      "tagMap": {
        "param": [
          "\u003ccode\u003eanEdit\u003c/code\u003e - the edit that replaces the current edit"
        ],
        "return": [
          "true if this edit should replace \n\u003ccode\u003eanEdit\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSignificant",
      "comment": "Returns true if this edit is considered significant. A significant edit is typically an edit that should be presented to the user, perhaps on a menu item or tooltip. The UndoManager will undo, or redo, all insignificant edits to the next significant edit.",
      "tagMap": {
        "return": [
          "true if this edit is significant"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPresentationName",
      "comment": "Returns a localized, human-readable description of this edit, suitable for use in a change log, for example.",
      "tagMap": {
        "return": [
          "description of this edit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUndoPresentationName",
      "comment": "Returns a localized, human-readable description of the undoable form of this edit, suitable for use as an Undo menu item, for example. This is typically derived from getPresentationName.",
      "tagMap": {
        "return": [
          "a description of the undoable form of this edit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRedoPresentationName",
      "comment": "Returns a localized, human-readable description of the redoable form of this edit, suitable for use as a Redo menu item, for example. This is typically derived from getPresentationName.",
      "tagMap": {
        "return": [
          "a description of the redoable form of this edit"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.undo.UndoableEdit",
  "comment": "An \n\u003ccode\u003eUndoableEdit\u003c/code\u003e represents an edit. The edit may be undone, or if already undone the edit may be redone. \n\u003cp\u003e \u003ccode\u003eUndoableEdit\u003c/code\u003e is designed to be used with the \u003ccode\u003eUndoManager\u003c/code\u003e. As \u003ccode\u003eUndoableEdit\u003c/code\u003es are generated by an \u003ccode\u003eUndoableEditListener\u003c/code\u003e they are typically added to the \u003ccode\u003eUndoManager\u003c/code\u003e. When an \u003ccode\u003eUndoableEdit\u003c/code\u003e is added to an \u003ccode\u003eUndoManager\u003c/code\u003e the following occurs (assuming \u003ccode\u003eend\u003c/code\u003e has not been called on the \u003ccode\u003eUndoManager\u003c/code\u003e): \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eIf the \u003ccode\u003eUndoManager\u003c/code\u003e contains edits it will call \u003ccode\u003eaddEdit\u003c/code\u003e on the current edit passing in the new edit as the argument. If \u003ccode\u003eaddEdit\u003c/code\u003e returns true the new edit is assumed to have been incorporated into the current edit and the new edit will not be added to the list of current edits. Edits can use \u003ccode\u003eaddEdit\u003c/code\u003e as a way for smaller edits to be incorporated into a larger edit and treated as a single edit. \u003c/li\u003e\n \u003cli\u003eIf \u003ccode\u003eaddEdit\u003c/code\u003e returns false \u003ccode\u003ereplaceEdit\u003c/code\u003e is called on the new edit with the current edit passed in as the argument. This is the inverse of \u003ccode\u003eaddEdit\u003c/code\u003e — if the new edit returns true from \u003ccode\u003ereplaceEdit\u003c/code\u003e, the new edit replaces the current edit. \u003c/li\u003e\n\u003c/ol\u003e The \n\u003ccode\u003eUndoManager\u003c/code\u003e makes use of \n\u003ccode\u003eisSignificant\u003c/code\u003e to determine how many edits should be undone or redone. The \n\u003ccode\u003eUndoManager\u003c/code\u003e will undo or redo all insignificant edits (\n\u003ccode\u003eisSignificant\u003c/code\u003e returns false) between the current edit and the last or next significant edit. \n\u003ccode\u003eaddEdit\u003c/code\u003e and \n\u003ccode\u003ereplaceEdit\u003c/code\u003e can be used to treat multiple edits as a single edit, returning false from \n\u003ccode\u003eisSignificant\u003c/code\u003e allows for treating can be used to have many smaller edits undone or redone at once. Similar functionality can also be done using the \n\u003ccode\u003eaddEdit\u003c/code\u003e method.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}