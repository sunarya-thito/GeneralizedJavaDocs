{
  "packageName": "javax.swing",
  "simpleName": "TransferHandler",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NONE",
      "comment": "An int representing no transfer action.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.TransferHandler.NONE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COPY",
      "comment": "An int representing a \"copy\" transfer action. This value is used when data is copied to a clipboard or copied elsewhere in a drag and drop operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.TransferHandler.COPY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOVE",
      "comment": "An int representing a \"move\" transfer action. This value is used when data is moved to a clipboard (i.e. a cut) or moved elsewhere in a drag and drop operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.TransferHandler.MOVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COPY_OR_MOVE",
      "comment": "An int representing a source action capability of either \"copy\" or \"move\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.TransferHandler.COPY_OR_MOVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LINK",
      "comment": "An int representing a \"link\" transfer action. This value is used to specify that data should be linked in a drag and drop operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/dnd/DnDConstants.html#ACTION_LINK\"\u003e\u003ccode\u003eDnDConstants.ACTION_LINK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.TransferHandler.LINK\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCutAction",
      "comment": "Returns an Action that performs cut operations to the clipboard. When performed, this action operates on the JComponent source of the ActionEvent by invoking exportToClipboard, with a MOVE action, on the component\u0027s TransferHandler.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eAction\u003c/code\u003e for performing cuts to the clipboard"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCopyAction",
      "comment": "Returns an Action that performs copy operations to the clipboard. When performed, this action operates on the JComponent source of the ActionEvent by invoking exportToClipboard, with a COPY action, on the component\u0027s TransferHandler.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eAction\u003c/code\u003e for performing copies to the clipboard"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPasteAction",
      "comment": "Returns an Action that performs paste operations from the clipboard. When performed, this action operates on the JComponent source of the ActionEvent by invoking importData, with the clipboard contents, on the component\u0027s TransferHandler.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eAction\u003c/code\u003e for performing pastes from the clipboard"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragImage",
      "comment": "Sets the drag image parameter. The image has to be prepared for rendering by the moment of the call. The image is stored by reference because of some performance reasons.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - an image to drag"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragImage",
      "comment": "Returns the drag image. If there is no image to drag, the returned value is null.",
      "tagMap": {
        "return": [
          "the reference to the drag image"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragImageOffset",
      "comment": "Sets an anchor offset for the image to drag. It can not be null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - a \n\u003ccode\u003ePoint\u003c/code\u003e object that corresponds to coordinates of an anchor offset of the image relative to the upper left corner of the image"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragImageOffset",
      "comment": "Returns an anchor offset for the image to drag.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint\u003c/code\u003e object that corresponds to coordinates of an anchor offset of the image relative to the upper left corner of the image. The point \n\u003ccode\u003e(0,0)\u003c/code\u003e returns by default."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.awt.event.InputEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exportAsDrag",
      "comment": "Causes the Swing drag support to be initiated. This is called by the various UI implementations in the javax.swing.plaf.basic package if the dragEnabled property is set on the component. This can be called by custom UI implementations to use the Swing drag support. This method can also be called by a Swing extension written as a subclass of JComponent to take advantage of the Swing drag support. The transfer will not necessarily have been completed at the return of this call (i.e. the call does not block waiting for the drop). The transfer will take place through the Swing implementation of the java.awt.dnd mechanism, requiring no further effort from the developer. The exportDone method will be called when the transfer has completed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component holding the data to be transferred; provided to enable sharing of \n\u003ccode\u003eTransferHandler\u003c/code\u003es",
          "\u003ccode\u003ee\u003c/code\u003e - the event that triggered the transfer",
          "\u003ccode\u003eaction\u003c/code\u003e - the transfer action initially requested; either \n\u003ccode\u003eCOPY\u003c/code\u003e, \n\u003ccode\u003eMOVE\u003c/code\u003e or \n\u003ccode\u003eLINK\u003c/code\u003e; the DnD system may change the action used during the course of the drag operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalStateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.Clipboard",
            "type": "Class"
          },
          "field": {
            "name": "clip"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exportToClipboard",
      "comment": "Causes a transfer from the given component to the given clipboard. This method is called by the default cut and copy actions registered in a component\u0027s action map. The transfer will take place using the java.awt.datatransfer mechanism, requiring no further effort from the developer. Any data transfer will be complete and the exportDone method will be called with the action that occurred, before this method returns. Should the clipboard be unavailable when attempting to place data on it, the IllegalStateException thrown by Clipboard.setContents(Transferable, ClipboardOwner) will be propagated through this method. However, exportDone will first be called with an action of NONE for consistency.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html#setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)\"\u003e\u003ccode\u003eClipboard.setContents(Transferable, ClipboardOwner)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component holding the data to be transferred; provided to enable sharing of \n\u003ccode\u003eTransferHandler\u003c/code\u003es",
          "\u003ccode\u003eclip\u003c/code\u003e - the clipboard to transfer the data into",
          "\u003ccode\u003eaction\u003c/code\u003e - the transfer action requested; this should be a value of either \n\u003ccode\u003eCOPY\u003c/code\u003e or \n\u003ccode\u003eMOVE\u003c/code\u003e; the operation performed is the intersection of the transfer capabilities given by getSourceActions and the requested action; the intersection may result in an action of \n\u003ccode\u003eNONE\u003c/code\u003e if the requested action isn\u0027t supported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the clipboard is currently unavailable"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.TransferHandler$TransferSupport",
            "type": "Class"
          },
          "field": {
            "name": "support"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "importData",
      "comment": "Causes a transfer to occur from a clipboard or a drag and drop operation. The Transferable to be imported and the component to transfer to are contained within the TransferSupport. While the drag and drop implementation calls canImport to determine the suitability of a transfer before calling this method, the implementation of paste does not. As such, it cannot be assumed that the transfer is acceptable upon a call to this method for paste. It is recommended that canImport be explicitly called to cover this case. Note: The TransferSupport object passed to this method is only valid for the duration of the method call. It is undefined what values it may contain after this method returns.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003ecanImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esupport\u003c/code\u003e - the object containing the details of the transfer, not \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esupport\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "true if the data was inserted into the component, false otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.Transferable",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "importData",
      "comment": "Causes a transfer to a component from a clipboard or a DND drop operation. The Transferable represents the data to be imported into the component. Note: Swing now calls the newer version of importData that takes a TransferSupport, which in turn calls this method (if the component in the TransferSupport is a JComponent). Developers are encouraged to call and override the newer version as it provides more information (and is the only version that supports use with a TransferHandler set directly on a JFrame or other non-JComponent).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#importData(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eimportData(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to receive the transfer; provided to enable sharing of \n\u003ccode\u003eTransferHandler\u003c/code\u003es",
          "\u003ccode\u003et\u003c/code\u003e - the data to import"
        ],
        "return": [
          "true if the data was inserted into the component, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.TransferHandler$TransferSupport",
            "type": "Class"
          },
          "field": {
            "name": "support"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canImport",
      "comment": "This method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of true indicating that the transfer represented by the given TransferSupport (which contains all of the details of the transfer) is acceptable at the current time, and a value of false rejecting the transfer. For those components that automatically display a drop location during drag and drop, accepting the transfer, by default, tells them to show the drop location. This can be changed by calling setShowDropLocation on the TransferSupport. By default, when the transfer is accepted, the chosen drop action is that picked by the user via their drag gesture. The developer can override this and choose a different action, from the supported source actions, by calling setDropAction on the TransferSupport. On every call to canImport, the TransferSupport contains fresh state. As such, any properties set on it must be set on every call. Upon a drop, canImport is called one final time before calling into importData. Any state set on the TransferSupport during that last call will be available in importData. This method is not called internally in response to paste operations. As such, it is recommended that implementations of importData explicitly call this method for such cases and that this method be prepared to return the suitability of paste operations as well. Note: The TransferSupport object passed to this method is only valid for the duration of the method call. It is undefined what values it may contain after this method returns.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#importData(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eimportData(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#setShowDropLocation(boolean)\"\u003e\u003ccode\u003eTransferHandler.TransferSupport.setShowDropLocation(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#setDropAction(int)\"\u003e\u003ccode\u003eTransferHandler.TransferSupport.setDropAction(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esupport\u003c/code\u003e - the object containing the details of the transfer, not \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esupport\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the import can happen, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "transferFlavors"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canImport",
      "comment": "Indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it. Note: Swing now calls the newer version of canImport that takes a TransferSupport, which in turn calls this method (only if the component in the TransferSupport is a JComponent). Developers are encouraged to call and override the newer version as it provides more information (and is the only version that supports use with a TransferHandler set directly on a JFrame or other non-JComponent).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003ecanImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to receive the transfer; provided to enable sharing of \n\u003ccode\u003eTransferHandler\u003c/code\u003es",
          "\u003ccode\u003etransferFlavors\u003c/code\u003e - the data formats available"
        ],
        "return": [
          "true if the data can be inserted into the component, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceActions",
      "comment": "Returns the type of transfer actions supported by the source; any bitwise-OR combination of COPY, MOVE and LINK. Some models are not mutable, so a transfer operation of MOVE should not be advertised in that case. Returning NONE disables transfers from the component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component holding the data to be transferred; provided to enable sharing of \n\u003ccode\u003eTransferHandler\u003c/code\u003es"
        ],
        "return": [
          "\u003ccode\u003eCOPY\u003c/code\u003e if the transfer property can be found, otherwise returns \n\u003ccode\u003eNONE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.Transferable",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVisualRepresentation",
      "comment": "Returns an object that establishes the look of a transfer. This is useful for both providing feedback while performing a drag operation and for representing the transfer in a clipboard implementation that has a visual appearance. The implementation of the Icon interface should not alter the graphics clip or alpha level. The icon implementation need not be rectangular or paint all of the bounding rectangle and logic that calls the icons paint method should not assume the all bits are painted. null is a valid return value for this method and indicates there is no visual representation provided. In that case, the calling logic is free to represent the transferable however it wants. The default Swing logic will not do an alpha blended drag animation if the return is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the data to be transferred; this value is expected to have been created by the \n\u003ccode\u003ecreateTransferable\u003c/code\u003e method"
        ],
        "return": [
          "\u003ccode\u003enull\u003c/code\u003e, indicating there is no default visual representation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.Transferable",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTransferable",
      "comment": "Creates a Transferable to use as the source for a data transfer. Returns the representation of the data to be transferred, or null if the component\u0027s property is null",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component holding the data to be transferred; provided to enable sharing of \n\u003ccode\u003eTransferHandler\u003c/code\u003es"
        ],
        "return": [
          "the representation of the data to be transferred, or \n\u003ccode\u003enull\u003c/code\u003e if the property associated with \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.Transferable",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "exportDone",
      "comment": "Invoked after data has been exported. This method should remove the data that was transferred if the action was MOVE. This method is implemented to do nothing since MOVE is not a supported action of this implementation (getSourceActions does not include MOVE).",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the component that was the source of the data",
          "\u003ccode\u003edata\u003c/code\u003e - The data that was transferred or possibly null if the action is \n\u003ccode\u003eNONE\u003c/code\u003e.",
          "\u003ccode\u003eaction\u003c/code\u003e - the actual action that was performed"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "property"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a transfer handler that can transfer a Java Bean property from one component to another via the clipboard or a drag and drop operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eproperty\u003c/code\u003e - the name of the property to transfer; this can be \n\u003ccode\u003enull\u003c/code\u003e if there is no property associated with the transfer handler (a subclass that performs some other kind of transfer, for example)"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Convenience constructor for subclasses.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.TransferHandler$DropLocation",
    "javax.swing.TransferHandler$TransferSupport"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.TransferHandler",
  "comment": "This class is used to handle the transfer of a \n\u003ccode\u003eTransferable\u003c/code\u003e to and from Swing components. The \n\u003ccode\u003eTransferable\u003c/code\u003e is used to represent data that is exchanged via a cut, copy, or paste to/from a clipboard. It is also used in drag-and-drop operations to represent a drag from a component, and a drop to a component. Swing provides functionality that automatically supports cut, copy, and paste keyboard bindings that use the functionality provided by an implementation of this class. Swing also provides functionality that automatically supports drag and drop that uses the functionality provided by an implementation of this class. The Swing developer can concentrate on specifying the semantics of a transfer primarily by setting the \n\u003ccode\u003etransferHandler\u003c/code\u003e property on a Swing component. \n\u003cp\u003e This class is implemented to provide a default behavior of transferring a component property simply by specifying the name of the property in the constructor. For example, to transfer the foreground color from one component to another either via the clipboard or a drag and drop operation a \u003ccode\u003eTransferHandler\u003c/code\u003e can be constructed with the string \"foreground\". The built in support will use the color returned by \u003ccode\u003egetForeground\u003c/code\u003e as the source of the transfer, and \u003ccode\u003esetForeground\u003c/code\u003e for the target of a transfer. \u003c/p\u003e\n\u003cp\u003e Please see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/dnd/index.html\"\u003e How to Use Drag and Drop and Data Transfer\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e, for more information.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}