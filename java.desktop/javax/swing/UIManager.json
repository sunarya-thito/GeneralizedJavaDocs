{
  "packageName": "javax.swing",
  "simpleName": "UIManager",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.UIManager$LookAndFeelInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstalledLookAndFeels",
      "comment": "Returns an array of LookAndFeelInfos representing the LookAndFeel implementations currently available. The LookAndFeelInfo objects can be used by an application to construct a menu of look and feel options for the user, or to determine which look and feel to set at startup time. To avoid the penalty of creating numerous LookAndFeel objects, LookAndFeelInfo maintains the class name of the LookAndFeel class, not the actual LookAndFeel instance. The following example illustrates setting the current look and feel from an instance of LookAndFeelInfo:    UIManager.setLookAndFeel(info.getClassName());",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eLookAndFeelInfo\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.UIManager$LookAndFeelInfo",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "infos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setInstalledLookAndFeels",
      "comment": "Sets the set of available look and feels. While this method does not check to ensure all of the LookAndFeelInfos are non-null, it is strongly recommended that only non-null values are supplied in the infos array.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getInstalledLookAndFeels()\"\u003e\u003ccode\u003egetInstalledLookAndFeels()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einfos\u003c/code\u003e - set of \n\u003ccode\u003eLookAndFeelInfo\u003c/code\u003e objects specifying the available look and feels"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einfos\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.UIManager$LookAndFeelInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "installLookAndFeel",
      "comment": "Adds the specified look and feel to the set of available look and feels. While this method allows a null info, it is strongly recommended that a non-null value be used.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo%5B%5D)\"\u003e\u003ccode\u003esetInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - a \n\u003ccode\u003eLookAndFeelInfo\u003c/code\u003e object that names the look and feel and identifies the class that implements it"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "installLookAndFeel",
      "comment": "Adds the specified look and feel to the set of available look and feels. While this method does not check the arguments in any way, it is strongly recommended that non-null values be supplied.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo%5B%5D)\"\u003e\u003ccode\u003esetInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - descriptive name of the look and feel",
          "\u003ccode\u003eclassName\u003c/code\u003e - name of the class that implements the look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.LookAndFeel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLookAndFeel",
      "comment": "Returns the current look and feel or null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "current look and feel, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.LookAndFeel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.UnsupportedLookAndFeelException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createLookAndFeel",
      "comment": "Creates a supported built-in Java LookAndFeel specified by the given L\u0026F name name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getName()\"\u003e\u003ccode\u003eLookAndFeel.getName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#isSupportedLookAndFeel()\"\u003e\u003ccode\u003eLookAndFeel.isSupportedLookAndFeel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e specifying the name of the built-in look and feel"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UnsupportedLookAndFeelException.html\" title\u003d\"class in javax.swing\"\u003eUnsupportedLookAndFeelException\u003c/a\u003e\u003c/code\u003e - if the built-in Java \n\u003ccode\u003eL\u0026amp;F\u003c/code\u003e is not found for the given name or it is not supported by the underlying platform"
        ],
        "return": [
          "the built-in \n\u003ccode\u003eLookAndFeel\u003c/code\u003e object"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.UnsupportedLookAndFeelException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.LookAndFeel",
            "type": "Class"
          },
          "field": {
            "name": "newLookAndFeel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLookAndFeel",
      "comment": "Sets the current look and feel to newLookAndFeel. If the current look and feel is non-null uninitialize is invoked on it. If newLookAndFeel is non-null, initialize is invoked on it followed by getDefaults. The defaults returned from newLookAndFeel.getDefaults() replace those of the defaults from the previous look and feel. If the newLookAndFeel is null, the look and feel defaults are set to null. A value of null can be used to set the look and feel to null. As the LookAndFeel is required for most of Swing to function, setting the LookAndFeel to null is strongly discouraged. This is a JavaBeans bound property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getLookAndFeel()\"\u003e\u003ccode\u003egetLookAndFeel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewLookAndFeel\u003c/code\u003e - \n\u003ccode\u003eLookAndFeel\u003c/code\u003e to install"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UnsupportedLookAndFeelException.html\" title\u003d\"class in javax.swing\"\u003eUnsupportedLookAndFeelException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewLookAndFeel\u003c/code\u003e is \n\u003ccode\u003enon-null\u003c/code\u003e and \n\u003ccode\u003enewLookAndFeel.isSupportedLookAndFeel()\u003c/code\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.lang.InstantiationException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalAccessException",
          "type": "Class"
        },
        {
          "name": "javax.swing.UnsupportedLookAndFeelException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLookAndFeel",
      "comment": "Loads the LookAndFeel specified by the given class name, using the current thread\u0027s context class loader, and passes it to setLookAndFeel(LookAndFeel).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclassName\u003c/code\u003e - a string specifying the name of the class that implements the look and feel"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eLookAndFeel\u003c/code\u003e class could not be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InstantiationException.html\" title\u003d\"class in java.lang\"\u003eInstantiationException\u003c/a\u003e\u003c/code\u003e - if a new instance of the class couldn\u0027t be created",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessException.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessException\u003c/a\u003e\u003c/code\u003e - if the class or initializer isn\u0027t accessible",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UnsupportedLookAndFeelException.html\" title\u003d\"class in javax.swing\"\u003eUnsupportedLookAndFeelException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elnf.isSupportedLookAndFeel()\u003c/code\u003e is false",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eclassName\u003c/code\u003e does not identify a class that extends \n\u003ccode\u003eLookAndFeel\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eclassName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSystemLookAndFeelClassName",
      "comment": "Returns the name of the LookAndFeel class that implements the native system look and feel if there is one, otherwise the name of the default cross platform LookAndFeel class. This value can be overriden by setting the swing.systemlaf system property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getCrossPlatformLookAndFeelClassName()\"\u003e\u003ccode\u003egetCrossPlatformLookAndFeelClassName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e of the \n\u003ccode\u003eLookAndFeel\u003c/code\u003e class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCrossPlatformLookAndFeelClassName",
      "comment": "Returns the name of the LookAndFeel class that implements the default cross platform look and feel -- the Java Look and Feel (JLF). This value can be overriden by setting the swing.crossplatformlaf system property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getSystemLookAndFeelClassName()\"\u003e\u003ccode\u003egetSystemLookAndFeelClassName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a string with the JLF implementation-class"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.UIDefaults",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaults",
      "comment": "Returns the defaults. The returned defaults resolve using the logic specified in the class documentation.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eUIDefaults\u003c/code\u003e object containing the default values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFont",
      "comment": "Returns a font from the defaults. If the value for key is not a Font, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the font"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eFont\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFont",
      "comment": "Returns a font from the defaults that is appropriate for the given locale. If the value for key is not a Font, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the font",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the font is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eFont\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getColor",
      "comment": "Returns a color from the defaults. If the value for key is not a Color, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the color"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eColor\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getColor",
      "comment": "Returns a color from the defaults that is appropriate for the given locale. If the value for key is not a Color, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the color",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the color is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eColor\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIcon",
      "comment": "Returns an Icon from the defaults. If the value for key is not an Icon, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the icon"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eIcon\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIcon",
      "comment": "Returns an Icon from the defaults that is appropriate for the given locale. If the value for key is not an Icon, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the icon",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the icon is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eIcon\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBorder",
      "comment": "Returns a border from the defaults. If the value for key is not a Border, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the border"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eBorder\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBorder",
      "comment": "Returns a border from the defaults that is appropriate for the given locale. If the value for key is not a Border, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the border",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the border is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eBorder\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getString",
      "comment": "Returns a string from the defaults. If the value for key is not a String, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getString",
      "comment": "Returns a string from the defaults that is appropriate for the given locale. If the value for key is not a String, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the string",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the string is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInt",
      "comment": "Returns an integer from the defaults. If the value for key is not an Integer, or does not exist, 0 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the int"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the int"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInt",
      "comment": "Returns an integer from the defaults that is appropriate for the given locale. If the value for key is not an Integer, or does not exist, 0 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the int",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the int is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the int"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBoolean",
      "comment": "Returns a boolean from the defaults which is associated with the key value. If the key is not found or the key doesn\u0027t represent a boolean value then false is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the key for the desired boolean value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the boolean value corresponding to the key"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBoolean",
      "comment": "Returns a boolean from the defaults which is associated with the key value and the given Locale. If the key is not found or the key doesn\u0027t represent a boolean value then false will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the key for the desired boolean value",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the boolean is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the boolean value corresponding to the key"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInsets",
      "comment": "Returns an Insets object from the defaults. If the value for key is not an Insets, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the \n\u003ccode\u003eInsets\u003c/code\u003e object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eInsets\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInsets",
      "comment": "Returns an Insets object from the defaults that is appropriate for the given locale. If the value for key is not an Insets, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the \n\u003ccode\u003eInsets\u003c/code\u003e object",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the object is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eInsets\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDimension",
      "comment": "Returns a dimension from the defaults. If the value for key is not a Dimension, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the dimension object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eDimension\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDimension",
      "comment": "Returns a dimension from the defaults that is appropriate for the given locale. If the value for key is not a Dimension, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the dimension object",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the object is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eDimension\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "get",
      "comment": "Returns an object from the defaults.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the desired object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eObject\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "get",
      "comment": "Returns an object from the defaults that is appropriate for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the desired object",
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which the object is desired; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eLocale\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eObject\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "put",
      "comment": "Stores an object in the developer defaults. This is a cover method for getDefaults().put(key, value). This only effects the developer defaults, not the system or look and feel defaults.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#put(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eUIDefaults.put(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e specifying the retrieval key",
          "\u003ccode\u003evalue\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to store; refer to \n\u003ccode\u003eUIDefaults\u003c/code\u003e for details on how \n\u003ccode\u003enull\u003c/code\u003e is handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eObject\u003c/code\u003e returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#put(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eUIDefaults.put(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUI",
      "comment": "Returns the appropriate ComponentUI implementation for target. Typically, this is a cover for getDefaults().getUI(target). However, if an auxiliary look and feel has been installed, this first invokes getUI(target) on the multiplexing look and feel\u0027s defaults, and returns that value if it is non-null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the \n\u003ccode\u003eJComponent\u003c/code\u003e to return the \n\u003ccode\u003eComponentUI\u003c/code\u003e for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etarget\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eComponentUI\u003c/code\u003e object for \n\u003ccode\u003etarget\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.UIDefaults",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLookAndFeelDefaults",
      "comment": "Returns the UIDefaults from the current look and feel, that were obtained at the time the look and feel was installed. In general, developers should use the UIDefaults returned from getDefaults(). As the current look and feel may expect certain values to exist, altering the UIDefaults returned from this method could have unexpected results.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getDefaults()\"\u003e\u003ccode\u003egetDefaults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getDefaults()\"\u003e\u003ccode\u003eLookAndFeel.getDefaults()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003eUIDefaults\u003c/code\u003e from the current look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.LookAndFeel",
            "type": "Class"
          },
          "field": {
            "name": "laf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addAuxiliaryLookAndFeel",
      "comment": "Adds a LookAndFeel to the list of auxiliary look and feels. The auxiliary look and feels tell the multiplexing look and feel what other LookAndFeel classes for a component instance are to be used in addition to the default LookAndFeel class when creating a multiplexing UI. The change will only take effect when a new UI class is created or when the default look and feel is changed on a component instance. Note these are not the same as the installed look and feels.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eremoveAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getAuxiliaryLookAndFeels()\"\u003e\u003ccode\u003egetAuxiliaryLookAndFeels()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getInstalledLookAndFeels()\"\u003e\u003ccode\u003egetInstalledLookAndFeels()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elaf\u003c/code\u003e - the \n\u003ccode\u003eLookAndFeel\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.LookAndFeel",
            "type": "Class"
          },
          "field": {
            "name": "laf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "removeAuxiliaryLookAndFeel",
      "comment": "Removes a LookAndFeel from the list of auxiliary look and feels. The auxiliary look and feels tell the multiplexing look and feel what other LookAndFeel classes for a component instance are to be used in addition to the default LookAndFeel class when creating a multiplexing UI. The change will only take effect when a new UI class is created or when the default look and feel is changed on a component instance. Note these are not the same as the installed look and feels.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eremoveAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getAuxiliaryLookAndFeels()\"\u003e\u003ccode\u003egetAuxiliaryLookAndFeels()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getInstalledLookAndFeels()\"\u003e\u003ccode\u003egetInstalledLookAndFeels()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elaf\u003c/code\u003e - the \n\u003ccode\u003eLookAndFeel\u003c/code\u003e to be removed"
        ],
        "return": [
          "true if the \n\u003ccode\u003eLookAndFeel\u003c/code\u003e was removed from the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.LookAndFeel",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAuxiliaryLookAndFeels",
      "comment": "Returns the list of auxiliary look and feels (can be null). The auxiliary look and feels tell the multiplexing look and feel what other LookAndFeel classes for a component instance are to be used in addition to the default LookAndFeel class when creating a multiplexing UI. Note these are not the same as the installed look and feels.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#addAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eaddAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eremoveAuxiliaryLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003esetLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getInstalledLookAndFeels()\"\u003e\u003ccode\u003egetInstalledLookAndFeels()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "list of auxiliary \n\u003ccode\u003eLookAndFeel\u003c/code\u003es or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list. The listener is registered for all properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeSupport.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003ePropertyChangeSupport\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "removePropertyChangeListener",
      "comment": "Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeSupport.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003ePropertyChangeSupport\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the PropertyChangeListeners added to this UIManager with addPropertyChangeListener().",
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a UIManager.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.UIManager$LookAndFeelInfo"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.UIManager",
  "comment": "\u003ccode\u003eUIManager\u003c/code\u003e manages the current look and feel, the set of available look and feels, \n\u003ccode\u003ePropertyChangeListeners\u003c/code\u003e that are notified when the look and feel changes, look and feel defaults, and convenience methods for obtaining various default values. \n\u003ch2\u003eSpecifying the look and feel\u003c/h2\u003e The look and feel can be specified in two distinct ways: by specifying the fully qualified name of the class for the look and feel, or by creating an instance of \n\u003ccode\u003eLookAndFeel\u003c/code\u003e and passing it to \n\u003ccode\u003esetLookAndFeel\u003c/code\u003e. The following example illustrates setting the look and feel to the system look and feel: \n\u003cpre\u003e   UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n \u003c/pre\u003e The following example illustrates setting the look and feel based on class name: \n\u003cpre\u003e   UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n \u003c/pre\u003e Once the look and feel has been changed it is imperative to invoke \n\u003ccode\u003eupdateUI\u003c/code\u003e on all \n\u003ccode\u003eJComponents\u003c/code\u003e. The method \n\u003ca href\u003d\"SwingUtilities.html#updateComponentTreeUI(java.awt.Component)\"\u003e\u003ccode\u003eSwingUtilities.updateComponentTreeUI(java.awt.Component)\u003c/code\u003e\u003c/a\u003e makes it easy to apply \n\u003ccode\u003e updateUI\u003c/code\u003e to a containment hierarchy. Refer to it for details. The exact behavior of not invoking \n\u003ccode\u003e updateUI\u003c/code\u003e after changing the look and feel is unspecified. It is very possible to receive unexpected exceptions, painting problems, or worse. \n\u003ch2\u003eDefault look and feel\u003c/h2\u003e The class used for the default look and feel is chosen in the following manner: \n\u003col\u003e \n \u003cli\u003eIf the system property \u003ccode\u003eswing.defaultlaf\u003c/code\u003e is \u003ccode\u003enon-null\u003c/code\u003e, use its value as the default look and feel class name. \u003c/li\u003e\n \u003cli\u003eIf the \u003ca href\u003d\"../../../java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eProperties\u003c/code\u003e\u003c/a\u003e file \u003ccode\u003eswing.properties\u003c/code\u003e exists and contains the key \u003ccode\u003eswing.defaultlaf\u003c/code\u003e, use its value as the default look and feel class name. The location that is checked for \u003ccode\u003eswing.properties\u003c/code\u003e may vary depending upon the implementation of the Java platform. Typically the \u003ccode\u003eswing.properties\u003c/code\u003e file is located in the \u003ccode\u003econf\u003c/code\u003e subdirectory of the Java installation directory. Refer to the release notes of the implementation being used for further details. \u003c/li\u003e\n \u003cli\u003eOtherwise use the cross platform look and feel. \u003c/li\u003e\n\u003c/ol\u003e \n\u003ch2\u003eDefaults\u003c/h2\u003e \n\u003ccode\u003eUIManager\u003c/code\u003e manages three sets of \n\u003ccode\u003eUIDefaults\u003c/code\u003e. In order, they are: \n\u003col\u003e \n \u003cli\u003eDeveloper defaults. With few exceptions Swing does not alter the developer defaults; these are intended to be modified and used by the developer. \u003c/li\u003e\n \u003cli\u003eLook and feel defaults. The look and feel defaults are supplied by the look and feel at the time it is installed as the current look and feel (\u003ccode\u003esetLookAndFeel()\u003c/code\u003e is invoked). The look and feel defaults can be obtained using the \u003ccode\u003e getLookAndFeelDefaults()\u003c/code\u003e method. \u003c/li\u003e\n \u003cli\u003eSystem defaults. The system defaults are provided by Swing. \u003c/li\u003e\n\u003c/ol\u003e Invoking any of the various \n\u003ccode\u003eget\u003c/code\u003e methods results in checking each of the defaults, in order, returning the first \n\u003ccode\u003enon-null\u003c/code\u003e value. For example, invoking \n\u003ccode\u003eUIManager.getString(\"Table.foreground\")\u003c/code\u003e results in first checking developer defaults. If the developer defaults contain a value for \n\u003ccode\u003e\"Table.foreground\"\u003c/code\u003e it is returned, otherwise the look and feel defaults are checked, followed by the system defaults. \n\u003cp\u003e It\u0027s important to note that \u003ccode\u003egetDefaults\u003c/code\u003e returns a custom instance of \u003ccode\u003eUIDefaults\u003c/code\u003e with this resolution logic built into it. For example, \u003ccode\u003eUIManager.getDefaults().getString(\"Table.foreground\")\u003c/code\u003e is equivalent to \u003ccode\u003eUIManager.getString(\"Table.foreground\")\u003c/code\u003e. Both resolve using the algorithm just described. In many places the documentation uses the word defaults to refer to the custom instance of \u003ccode\u003eUIDefaults\u003c/code\u003e with the resolution logic as previously described. \u003c/p\u003e\n\u003cp\u003e When the look and feel is changed, \u003ccode\u003eUIManager\u003c/code\u003e alters only the look and feel defaults; the developer and system defaults are not altered by the \u003ccode\u003eUIManager\u003c/code\u003e in any way. \u003c/p\u003e\n\u003cp\u003e The set of defaults a particular look and feel supports is defined and documented by that look and feel. In addition, each look and feel, or \u003ccode\u003eComponentUI\u003c/code\u003e provided by a look and feel, may access the defaults at different times in their life cycle. Some look and feels may aggressively look up defaults, so that changing a default may not have an effect after installing the look and feel. Other look and feels may lazily access defaults so that a change to the defaults may effect an existing look and feel. Finally, other look and feels might not configure themselves from the defaults table in any way. None-the-less it is usually the case that a look and feel expects certain defaults, so that in general a \u003ccode\u003eComponentUI\u003c/code\u003e provided by one look and feel will not work with another look and feel. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}