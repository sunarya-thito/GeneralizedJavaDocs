{
  "packageName": "javax.swing",
  "simpleName": "LookAndFeel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "defaultBgName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "defaultFgName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "installColors",
      "comment": "Convenience method for setting a component\u0027s foreground and background color properties with values from the defaults. The properties are only set if the current value is either null or a UIResource.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#installColorsAndFont(javax.swing.JComponent,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003einstallColorsAndFont(javax.swing.JComponent, java.lang.String, java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getColor(java.lang.Object)\"\u003e\u003ccode\u003eUIManager.getColor(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component to set the colors on",
          "\u003ccode\u003edefaultBgName\u003c/code\u003e - key for the background",
          "\u003ccode\u003edefaultFgName\u003c/code\u003e - key for the foreground"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#exceptions\"\u003eexceptions\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "defaultBgName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "defaultFgName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "defaultFontName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "installColorsAndFont",
      "comment": "Convenience method for setting a component\u0027s foreground, background and font properties with values from the defaults. The properties are only set if the current value is either null or a UIResource.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#installColors(javax.swing.JComponent,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003einstallColors(javax.swing.JComponent, java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getColor(java.lang.Object)\"\u003e\u003ccode\u003eUIManager.getColor(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getFont(java.lang.Object)\"\u003e\u003ccode\u003eUIManager.getFont(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component set to the colors and font on",
          "\u003ccode\u003edefaultBgName\u003c/code\u003e - key for the background",
          "\u003ccode\u003edefaultFgName\u003c/code\u003e - key for the foreground",
          "\u003ccode\u003edefaultFontName\u003c/code\u003e - key for the font"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#exceptions\"\u003eexceptions\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "defaultBorderName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "installBorder",
      "comment": "Convenience method for setting a component\u0027s border property with a value from the defaults. The border is only set if the border is null or an instance of UIResource.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component to set the border on",
          "\u003ccode\u003edefaultBorderName\u003c/code\u003e - key specifying the border"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#exceptions\"\u003eexceptions\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "uninstallBorder",
      "comment": "Convenience method for uninstalling a border. If the border of the component is a UIResource, it is set to null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component to uninstall the border on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "propertyValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "installProperty",
      "comment": "Convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer. This method is intended to be used by ui delegate instances that need to specify a default value for a property of primitive type (boolean, int, ..), but do not wish to override a value set by the client. Since primitive property values cannot be wrapped with the UIResource marker, this method uses private state to determine whether the property has been set by the client.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - target component to set the property on",
          "\u003ccode\u003epropertyName\u003c/code\u003e - name of the property to set",
          "\u003ccode\u003epropertyValue\u003c/code\u003e - value of the property"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified property is not one which can be set using this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the property value has not been set by the developer and the type does not match the property\u0027s type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the named property has not been set by the developer and \n\u003ccode\u003epropertyValue\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.JTextComponent$KeyBinding",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "keyBindingList",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "makeKeyBindings",
      "comment": "Convenience method for building an array of KeyBindings. While this method is not deprecated, developers should instead use ActionMap and InputMap for supplying key bindings. This method returns an array of KeyBindings, one for each alternating key-action pair in keyBindingList. A key can either be a String in the format specified by the KeyStroke.getKeyStroke method, or a KeyStroke. The action part of the pair is a String that corresponds to the name of the Action. The following example illustrates creating a KeyBinding array from six alternating key-action pairs:   JTextComponent.KeyBinding[] multilineBindings \u003d makeKeyBindings( new Object[] {\n          \"UP\", DefaultEditorKit.upAction,\n        \"DOWN\", DefaultEditorKit.downAction,\n     \"PAGE_UP\", DefaultEditorKit.pageUpAction,\n   \"PAGE_DOWN\", DefaultEditorKit.pageDownAction,\n       \"ENTER\", DefaultEditorKit.insertBreakAction,\n         \"TAB\", DefaultEditorKit.insertTabAction\n  });\n If keyBindingList\u0027s length is odd, the last element is ignored. Supplying a null value for either the key or action part of the key-action pair results in creating a KeyBinding with the corresponding value null. As other parts of Swing\u0027s expect non-null values in a KeyBinding, you should avoid supplying null as either the key or action part of the key-action pair.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ActionMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eActionMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/InputMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/KeyStroke.html#getKeyStroke(char)\"\u003e\u003ccode\u003eKeyStroke.getKeyStroke(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyBindingList\u003c/code\u003e - an array of \n\u003ccode\u003ekey-action\u003c/code\u003e pairs"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekeyBindingList\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ekey\u003c/code\u003e part of the pair is not a \n\u003ccode\u003eKeyStroke\u003c/code\u003e or \n\u003ccode\u003eString\u003c/code\u003e, or the \n\u003ccode\u003eaction\u003c/code\u003e part of the pair is not a \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eKeyBindings\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.InputMap",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "keys",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "makeInputMap",
      "comment": "Creates an InputMapUIResource from keys. This is a convenience method for creating a new InputMapUIResource, invoking loadKeyBindings(map, keys), and returning the InputMapUIResource.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#loadKeyBindings(javax.swing.InputMap,java.lang.Object%5B%5D)\"\u003e\u003ccode\u003eloadKeyBindings(javax.swing.InputMap, java.lang.Object[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeys\u003c/code\u003e - alternating pairs of \n\u003ccode\u003ekeystroke-action key\u003c/code\u003e pairs as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#loadKeyBindings(javax.swing.InputMap,java.lang.Object%5B%5D)\"\u003e\u003ccode\u003eloadKeyBindings(javax.swing.InputMap, java.lang.Object[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "newly created and populated \n\u003ccode\u003eInputMapUIResource\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ComponentInputMap",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "keys",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "makeComponentInputMap",
      "comment": "Creates a ComponentInputMapUIResource from keys. This is a convenience method for creating a new ComponentInputMapUIResource, invoking loadKeyBindings(map, keys), and returning the ComponentInputMapUIResource.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#loadKeyBindings(javax.swing.InputMap,java.lang.Object%5B%5D)\"\u003e\u003ccode\u003eloadKeyBindings(javax.swing.InputMap, java.lang.Object[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentInputMapUIResource.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentInputMapUIResource\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component to create the \n\u003ccode\u003eComponentInputMapUIResource\u003c/code\u003e with",
          "\u003ccode\u003ekeys\u003c/code\u003e - alternating pairs of \n\u003ccode\u003ekeystroke-action key\u003c/code\u003e pairs as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#loadKeyBindings(javax.swing.InputMap,java.lang.Object%5B%5D)\"\u003e\u003ccode\u003eloadKeyBindings(javax.swing.InputMap, java.lang.Object[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "newly created and populated \n\u003ccode\u003eInputMapUIResource\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.InputMap",
            "type": "Class"
          },
          "name": "retMap",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "keys",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadKeyBindings",
      "comment": "Populates an InputMap with the specified bindings. The bindings are supplied as a list of alternating keystroke-action key pairs. The keystroke is either an instance of KeyStroke, or a String that identifies the KeyStroke for the binding. Refer to KeyStroke.getKeyStroke(String) for the specific format. The action key part of the pair is the key registered in the InputMap for the KeyStroke. The following illustrates loading an InputMap with two key-action pairs:    LookAndFeel.loadKeyBindings(inputMap, new Object[] {\n     \"control X\", \"cut\",\n     \"control V\", \"paste\"\n   });\n Supplying a null list of bindings (keys) does not change retMap in any way. Specifying a null action key results in removing the keystroke\u0027s entry from the InputMap. A null keystroke is ignored.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)\"\u003e\u003ccode\u003eKeyStroke.getKeyStroke(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/InputMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eretMap\u003c/code\u003e - \n\u003ccode\u003eInputMap\u003c/code\u003e to add the \n\u003ccode\u003ekey-action\u003c/code\u003e pairs to",
          "\u003ccode\u003ekeys\u003c/code\u003e - bindings to add to \n\u003ccode\u003eretMap\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekeys\u003c/code\u003e is \n\u003ccode\u003enon-null\u003c/code\u003e, not empty, and \n\u003ccode\u003eretMap\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "baseClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "gifFile",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "makeIcon",
      "comment": "Creates and returns a UIDefault.LazyValue that loads an image. The returned value is an implementation of UIDefaults.LazyValue. When createValue is invoked on the returned object, the image is loaded. If the image is non-null, it is then wrapped in an Icon that implements UIResource. The image is loaded using Class.getResourceAsStream(gifFile). This method does not check the arguments in any way. It is strongly recommended that non-null values are supplied else exceptions may occur when createValue is invoked on the returned object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.LazyValue.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eUIDefaults.LazyValue\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Icon.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eIcon\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eClass.getResourceAsStream(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseClass\u003c/code\u003e - \n\u003ccode\u003eClass\u003c/code\u003e used to load the resource",
          "\u003ccode\u003egifFile\u003c/code\u003e - path to the image to load"
        ],
        "return": [
          "a \n\u003ccode\u003eUIDefaults.LazyValue\u003c/code\u003e; when resolved the \n\u003ccode\u003eLazyValue\u003c/code\u003e loads the specified image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.LayoutStyle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutStyle",
      "comment": "Returns the LayoutStyle for this look and feel. This never returns null. You generally don\u0027t use the LayoutStyle from the look and feel, instead use the LayoutStyle method getInstance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LayoutStyle.html#getInstance()\"\u003e\u003ccode\u003eLayoutStyle.getInstance()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eLayoutStyle\u003c/code\u003e for this look and feel"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "provideErrorFeedback",
      "comment": "Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus. The default implementation beeps. Subclasses that wish different behavior should override this and provide the additional feedback.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e the error occurred in, may be \n\u003ccode\u003enull\u003c/code\u003e indicating the error condition is not directly associated with a \n\u003ccode\u003eComponent\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "systemPropertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "fallbackValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDesktopPropertyValue",
      "comment": "Returns the value of the specified system desktop property by invoking Toolkit.getDefaultToolkit().getDesktopProperty(). If the value of the specified property is null, fallbackValue is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getDesktopProperty(java.lang.String)\"\u003e\u003ccode\u003eToolkit.getDesktopProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esystemPropertyName\u003c/code\u003e - the name of the system desktop property being queried",
          "\u003ccode\u003efallbackValue\u003c/code\u003e - the object to be returned as the value if the system value is null"
        ],
        "return": [
          "the current value of the desktop property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "name": "icon",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisabledIcon",
      "comment": "Returns an Icon with a disabled appearance. This method is used to generate a disabled Icon when one has not been specified. For example, if you create a JButton and only specify an Icon via setIcon this method will be called to generate the disabled Icon. If null is passed as icon this method returns null. Some look and feels might not render the disabled Icon, in which case they will ignore this.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e that will display the \n\u003ccode\u003eIcon\u003c/code\u003e, may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eicon\u003c/code\u003e - \n\u003ccode\u003eIcon\u003c/code\u003e to generate the disabled icon from"
        ],
        "return": [
          "disabled \n\u003ccode\u003eIcon\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if a suitable \n\u003ccode\u003eIcon\u003c/code\u003e can not be generated"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "name": "icon",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisabledSelectedIcon",
      "comment": "Returns an Icon for use by disabled components that are also selected. This method is used to generate an Icon for components that are in both the disabled and selected states but do not have a specific Icon for this state. For example, if you create a JButton and only specify an Icon via setIcon this method will be called to generate the disabled and selected Icon. If null is passed as icon this methods returns null. Some look and feels might not render the disabled and selected Icon, in which case they will ignore this.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e that will display the \n\u003ccode\u003eIcon\u003c/code\u003e, may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eicon\u003c/code\u003e - \n\u003ccode\u003eIcon\u003c/code\u003e to generate disabled and selected icon from"
        ],
        "return": [
          "disabled and selected icon, or \n\u003ccode\u003enull\u003c/code\u003e if a suitable \n\u003ccode\u003eIcon\u003c/code\u003e can not be generated."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getName",
      "comment": "Return a short string that identifies this look and feel, e.g. \"CDE/Motif\". This string should be appropriate for a menu item. Distinct look and feels should have different names, e.g. a subclass of MotifLookAndFeel that changes the way a few components are rendered should be called \"CDE/Motif My Way\"; something that would be useful to a user trying to select a L\u0026F from a list of names.",
      "annotations": [],
      "tagMap": {
        "return": [
          "short identifier for the look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getID",
      "comment": "Return a string that identifies this look and feel. This string will be used by applications/services that want to recognize well known look and feel implementations. Presently the well known names are \"Motif\", \"Windows\", \"Mac\", \"Metal\". Note that a LookAndFeel derived from a well known superclass that doesn\u0027t make any fundamental changes to the look or feel shouldn\u0027t override this method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "identifier for the look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDescription",
      "comment": "Return a one line description of this look and feel implementation, e.g. \"The CDE/Motif Look and Feel\". This string is intended for the user, e.g. in the title of a window or in a ToolTip message.",
      "annotations": [],
      "tagMap": {
        "return": [
          "short description for the look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSupportsWindowDecorations",
      "comment": "Returns true if the LookAndFeel returned RootPaneUI instances support providing Window decorations in a JRootPane. The default implementation returns false, subclasses that support Window decorations should override this and return true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDialog.html#setDefaultLookAndFeelDecorated(boolean)\"\u003e\u003ccode\u003eJDialog.setDefaultLookAndFeelDecorated(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html#setDefaultLookAndFeelDecorated(boolean)\"\u003e\u003ccode\u003eJFrame.setDefaultLookAndFeelDecorated(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#setWindowDecorationStyle(int)\"\u003e\u003ccode\u003eJRootPane.setWindowDecorationStyle(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eRootPaneUI\u003c/code\u003e instances created by this look and feel support client side decorations"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isNativeLookAndFeel",
      "comment": "If the underlying platform has a \"native\" look and feel, and this is an implementation of it, return true. For example, when the underlying platform is Solaris running CDE a CDE/Motif look and feel implementation would return true.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this look and feel represents the underlying platform look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isSupportedLookAndFeel",
      "comment": "Return true if the underlying platform supports and or permits this look and feel. This method returns false if the look and feel depends on special resources or legal agreements that aren\u0027t defined for the current platform.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a supported look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initializes the look and feel. While this method is public, it should only be invoked by the UIManager when a look and feel is installed as the current look and feel. This method is invoked before the UIManager invokes getDefaults. This method is intended to perform any initialization for the look and feel. Subclasses should do any one-time setup they need here, rather than in a static initializer, because look and feel class objects may be loaded just to discover that isSupportedLookAndFeel() returns false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#uninitialize()\"\u003e\u003ccode\u003euninitialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninitialize",
      "comment": "Uninitializes the look and feel. While this method is public, it should only be invoked by the UIManager when the look and feel is uninstalled. For example, UIManager.setLookAndFeel invokes this when the look and feel is changed. Subclasses may choose to free up some resources here.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#initialize()\"\u003e\u003ccode\u003einitialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.UIDefaults",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaults",
      "comment": "Returns the look and feel defaults. While this method is public, it should only be invoked by the UIManager when the look and feel is set as the current look and feel and after initialize has been invoked.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#initialize()\"\u003e\u003ccode\u003einitialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#uninitialize()\"\u003e\u003ccode\u003euninitialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the look and feel defaults"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string that displays and identifies this object\u0027s properties.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a String representation of this object"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.LookAndFeel",
  "comment": "\u003ccode\u003eLookAndFeel\u003c/code\u003e, as the name implies, encapsulates a look and feel. Beyond installing a look and feel most developers never need to interact directly with \n\u003ccode\u003eLookAndFeel\u003c/code\u003e. In general only developers creating a custom look and feel need to concern themselves with this class. \n\u003cp\u003e Swing is built upon the foundation that each \u003ccode\u003eJComponent\u003c/code\u003e subclass has an implementation of a specific \u003ccode\u003eComponentUI\u003c/code\u003e subclass. The \u003ccode\u003eComponentUI\u003c/code\u003e is often referred to as \"the ui\", \"component ui\", or \"look and feel delegate\". The \u003ccode\u003eComponentUI\u003c/code\u003e subclass is responsible for providing the look and feel specific functionality of the component. For example, \u003ccode\u003eJTree\u003c/code\u003e requires an implementation of the \u003ccode\u003eComponentUI\u003c/code\u003e subclass \u003ccode\u003e TreeUI\u003c/code\u003e. The implementation of the specific \u003ccode\u003e ComponentUI\u003c/code\u003e subclass is provided by the \u003ccode\u003eLookAndFeel\u003c/code\u003e. Each \u003ccode\u003eJComponent\u003c/code\u003e subclass identifies the \u003ccode\u003eComponentUI\u003c/code\u003e subclass it requires by way of the \u003ccode\u003eJComponent\u003c/code\u003e method \u003ccode\u003e getUIClassID\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Each \u003ccode\u003eLookAndFeel\u003c/code\u003e implementation must provide an implementation of the appropriate \u003ccode\u003eComponentUI\u003c/code\u003e subclass by specifying a value for each of Swing\u0027s ui class ids in the \u003ccode\u003e UIDefaults\u003c/code\u003e object returned from \u003ccode\u003egetDefaults\u003c/code\u003e. For example, \u003ccode\u003eBasicLookAndFeel\u003c/code\u003e uses \u003ccode\u003eBasicTreeUI\u003c/code\u003e as the concrete implementation for \u003ccode\u003eTreeUI\u003c/code\u003e. This is accomplished by \u003ccode\u003e BasicLookAndFeel\u003c/code\u003e providing the key-value pair \u003ccode\u003e \"TreeUI\"-\"javax.swing.plaf.basic.BasicTreeUI\"\u003c/code\u003e, in the \u003ccode\u003eUIDefaults\u003c/code\u003e returned from \u003ccode\u003egetDefaults\u003c/code\u003e. Refer to \u003ca href\u003d\"UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(JComponent)\u003c/code\u003e\u003c/a\u003e for details on how the implementation of the \u003ccode\u003eComponentUI\u003c/code\u003e subclass is obtained. \u003c/p\u003e\n\u003cp\u003e When a \u003ccode\u003eLookAndFeel\u003c/code\u003e is installed the \u003ccode\u003eUIManager\u003c/code\u003e does not check that an entry exists for all ui class ids. As such, random exceptions will occur if the current look and feel has not provided a value for a particular ui class id and an instance of the \u003ccode\u003eJComponent\u003c/code\u003e subclass is created. \u003c/p\u003e\n\u003ch2\u003eRecommendations for Look and Feels\u003c/h2\u003e As noted in \n\u003ccode\u003eUIManager\u003c/code\u003e each \n\u003ccode\u003eLookAndFeel\u003c/code\u003e has the opportunity to provide a set of defaults that are layered in with developer and system defaults. Some of Swing\u0027s components require the look and feel to provide a specific set of defaults. These are documented in the classes that require the specific default. \n\u003ch3\u003e\u003ca id\u003d\"defaultRecommendation\"\u003eComponentUIs and defaults\u003c/a\u003e\u003c/h3\u003e All \n\u003ccode\u003eComponentUIs\u003c/code\u003e typically need to set various properties on the \n\u003ccode\u003eJComponent\u003c/code\u003e the \n\u003ccode\u003eComponentUI\u003c/code\u003e is providing the look and feel for. This is typically done when the \n\u003ccode\u003e ComponentUI\u003c/code\u003e is installed on the \n\u003ccode\u003eJComponent\u003c/code\u003e. Setting a property should only be done if the developer has not set the property. For non-primitive values it is recommended that the \n\u003ccode\u003eComponentUI\u003c/code\u003e only change the property on the \n\u003ccode\u003e JComponent\u003c/code\u003e if the current value is \n\u003ccode\u003enull\u003c/code\u003e or implements \n\u003ccode\u003eUIResource\u003c/code\u003e. If the current value is \n\u003ccode\u003enull\u003c/code\u003e or implements \n\u003ccode\u003eUIResource\u003c/code\u003e it indicates the property has not been set by the developer, and the ui is free to change it. For example, \n\u003ccode\u003eBasicButtonUI.installDefaults\u003c/code\u003e only changes the font on the \n\u003ccode\u003eJButton\u003c/code\u003e if the return value from \n\u003ccode\u003e button.getFont()\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or implements \n\u003ccode\u003e UIResource\u003c/code\u003e. On the other hand if \n\u003ccode\u003ebutton.getFont()\u003c/code\u003e returned a \n\u003ccode\u003enon-null\u003c/code\u003e value that did not implement \n\u003ccode\u003eUIResource\u003c/code\u003e then \n\u003ccode\u003eBasicButtonUI.installDefaults\u003c/code\u003e would not change the \n\u003ccode\u003eJButton\u003c/code\u003e\u0027s font. \n\u003cp\u003e For primitive values, such as \u003ccode\u003eopaque\u003c/code\u003e, the method \u003ccode\u003e installProperty\u003c/code\u003e should be invoked. \u003ccode\u003einstallProperty\u003c/code\u003e only changes the corresponding property if the value has not been changed by the developer. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eComponentUI\u003c/code\u003e implementations should use the various install methods provided by this class as they handle the necessary checking and install the property using the recommended guidelines. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"exceptions\"\u003e\u003c/a\u003eExceptions\u003c/h3\u003e All of the install methods provided by \n\u003ccode\u003eLookAndFeel\u003c/code\u003e need to access the defaults if the value of the property being changed is \n\u003ccode\u003enull\u003c/code\u003e or a \n\u003ccode\u003eUIResource\u003c/code\u003e. For example, installing the font does the following: \n\u003cpre\u003e   JComponent c;\n   Font font \u003d c.getFont();\n   if (font \u003d\u003d null || (font instanceof UIResource)) {\n       c.setFont(UIManager.getFont(\"fontKey\"));\n   }\n \u003c/pre\u003e If the font is \n\u003ccode\u003enull\u003c/code\u003e or a \n\u003ccode\u003eUIResource\u003c/code\u003e, the defaults table is queried with the key \n\u003ccode\u003efontKey\u003c/code\u003e. All of \n\u003ccode\u003eUIDefault\u0027s\u003c/code\u003e get methods throw a \n\u003ccode\u003e NullPointerException\u003c/code\u003e if passed in \n\u003ccode\u003enull\u003c/code\u003e. As such, unless otherwise noted each of the various install methods of \n\u003ccode\u003e LookAndFeel\u003c/code\u003e throw a \n\u003ccode\u003eNullPointerException\u003c/code\u003e if the current value is \n\u003ccode\u003enull\u003c/code\u003e or a \n\u003ccode\u003eUIResource\u003c/code\u003e and the supplied defaults key is \n\u003ccode\u003enull\u003c/code\u003e. In addition, unless otherwise specified all of the \n\u003ccode\u003einstall\u003c/code\u003e methods throw a \n\u003ccode\u003eNullPointerException\u003c/code\u003e if a \n\u003ccode\u003enull\u003c/code\u003e component is passed in.",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}