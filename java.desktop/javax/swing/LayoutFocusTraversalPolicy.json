{
  "packageName": "javax.swing",
  "simpleName": "LayoutFocusTraversalPolicy",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.SortingFocusTraversalPolicy",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentAfter",
      "comment": "Returns the Component that should receive the focus after aComponent. aContainer must be a focus cycle root of aComponent. By default, LayoutFocusTraversalPolicy implicitly transfers focus down- cycle. That is, during normal focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root\u0027s default Component to focus. This behavior can be disabled using the setImplicitDownCycleTraversal method. If aContainer is focus traversal policy provider, the focus is always transferred down-cycle.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getComponentAfter(java.awt.Container,java.awt.Component)\"\u003egetComponentAfter\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html\" title\u003d\"class in javax.swing\"\u003eSortingFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider",
          "\u003ccode\u003eaComponent\u003c/code\u003e - a (possibly indirect) child of aContainer, or aContainer itself"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is not a focus cycle root of aComponent or a focus traversal policy provider, or if either aContainer or aComponent is null"
        ],
        "return": [
          "the Component that should receive the focus after aComponent, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentBefore",
      "comment": "Returns the Component that should receive the focus before aComponent. aContainer must be a focus cycle root of aComponent. By default, LayoutFocusTraversalPolicy implicitly transfers focus down- cycle. That is, during normal focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root\u0027s default Component to focus. This behavior can be disabled using the setImplicitDownCycleTraversal method. If aContainer is focus traversal policy provider, the focus is always transferred down-cycle.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getComponentBefore(java.awt.Container,java.awt.Component)\"\u003egetComponentBefore\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html\" title\u003d\"class in javax.swing\"\u003eSortingFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider",
          "\u003ccode\u003eaComponent\u003c/code\u003e - a (possibly indirect) child of aContainer, or aContainer itself"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is not a focus cycle root of aComponent or a focus traversal policy provider, or if either aContainer or aComponent is null"
        ],
        "return": [
          "the Component that should receive the focus before aComponent, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFirstComponent",
      "comment": "Returns the first Component in the traversal cycle. This method is used to determine the next Component to focus when traversal wraps in the forward direction.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getFirstComponent(java.awt.Container)\"\u003egetFirstComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html\" title\u003d\"class in javax.swing\"\u003eSortingFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider whose first Component is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is null"
        ],
        "return": [
          "the first Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLastComponent",
      "comment": "Returns the last Component in the traversal cycle. This method is used to determine the next Component to focus when traversal wraps in the reverse direction.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getLastComponent(java.awt.Container)\"\u003egetLastComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html\" title\u003d\"class in javax.swing\"\u003eSortingFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider whose last Component is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is null"
        ],
        "return": [
          "the last Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "accept",
      "comment": "Determines whether the specified Component is an acceptable choice as the new focus owner. This method performs the following sequence of operations: Checks whether aComponent is visible, displayable, enabled, and focusable. If any of these properties is false, this method returns false. If aComponent is an instance of JTable, returns true. If aComponent is an instance of JComboBox, then returns the value of aComponent.getUI().isFocusTraversable(aComponent). If aComponent is a JComponent with a JComponent.WHEN_FOCUSED InputMap that is neither null nor empty, returns true. Returns the value of DefaultFocusTraversalPolicy.accept(aComponent).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isVisible()\"\u003e\u003ccode\u003eComponent.isVisible()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isEnabled()\"\u003e\u003ccode\u003eComponent.isEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isFocusable()\"\u003e\u003ccode\u003eComponent.isFocusable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html#isFocusTraversable(javax.swing.JComboBox)\"\u003e\u003ccode\u003eComboBoxUI.isFocusTraversable(javax.swing.JComboBox\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputMap(int)\"\u003e\u003ccode\u003eJComponent.getInputMap(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/DefaultFocusTraversalPolicy.html#accept(java.awt.Component)\"\u003e\u003ccode\u003eDefaultFocusTraversalPolicy.accept(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#accept(java.awt.Component)\"\u003eaccept\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html\" title\u003d\"class in javax.swing\"\u003eSortingFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e whose fitness as a focus owner is to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eaComponent\u003c/code\u003e is a valid choice for a focus owner; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a LayoutFocusTraversalPolicy.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.LayoutFocusTraversalPolicy",
  "comment": "A SortingFocusTraversalPolicy which sorts Components based on their size, position, and orientation. Based on their size and position, Components are roughly categorized into rows and columns. For a Container with horizontal orientation, columns run left-to-right or right-to-left, and rows run top- to-bottom. For a Container with vertical orientation, columns run top-to- bottom and rows run left-to-right or right-to-left. See \n\u003ccode\u003eComponentOrientation\u003c/code\u003e for more information. All columns in a row are fully traversed before proceeding to the next row.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ComponentOrientation.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponentOrientation\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}