{
  "packageName": "javax.swing",
  "simpleName": "OverlayLayout",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getTarget",
      "comment": "Returns the container that uses this layout manager.",
      "tagMap": {
        "return": [
          "the container that uses this layout manager"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invalidateLayout",
      "comment": "Indicates a child has changed its layout related information, which causes any cached calculations to be flushed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#invalidateLayout(java.awt.Container)\"\u003einvalidateLayout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the container"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addLayoutComponent",
      "comment": "Adds the specified component to the layout. Used by this class to know when to invalidate layout.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#addLayoutComponent(java.lang.String,java.awt.Component)\"\u003eaddLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the component",
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeLayoutComponent",
      "comment": "Removes the specified component from the layout. Used by this class to know when to invalidate layout.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#removeLayoutComponent(java.awt.Component)\"\u003eremoveLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addLayoutComponent",
      "comment": "Adds the specified component to the layout, using the specified constraint object. Used by this class to know when to invalidate layout.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#addLayoutComponent(java.awt.Component,java.lang.Object)\"\u003eaddLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be added",
          "\u003ccode\u003econstraints\u003c/code\u003e - where/how the component is added to the layout."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferredLayoutSize",
      "comment": "Returns the preferred dimensions for this layout given the components in the specified target container. Recomputes the layout if it has been invalidated. Factors in the current inset setting returned by getInsets().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/OverlayLayout.html#minimumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eminimumLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003epreferredLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the component which needs to be laid out"
        ],
        "return": [
          "a Dimension object containing the preferred dimensions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minimumLayoutSize",
      "comment": "Returns the minimum dimensions needed to lay out the components contained in the specified target container. Recomputes the layout if it has been invalidated, and factors in the current inset setting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/OverlayLayout.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003epreferredLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)\"\u003eminimumLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the component which needs to be laid out"
        ],
        "return": [
          "a Dimension object containing the minimum dimensions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "maximumLayoutSize",
      "comment": "Returns the maximum dimensions needed to lay out the components contained in the specified target container. Recomputes the layout if it has been invalidated, and factors in the inset setting returned by getInset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/OverlayLayout.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003epreferredLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#maximumLayoutSize(java.awt.Container)\"\u003emaximumLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the component that needs to be laid out"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object containing the maximum dimensions"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutAlignmentX",
      "comment": "Returns the alignment along the x axis for the container.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#getLayoutAlignmentX(java.awt.Container)\"\u003egetLayoutAlignmentX\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the container"
        ],
        "return": [
          "the alignment \u0026gt;\u003d 0.0f \u0026amp;\u0026amp; \u0026lt;\u003d 1.0f"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutAlignmentY",
      "comment": "Returns the alignment along the y axis for the container.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#getLayoutAlignmentY(java.awt.Container)\"\u003egetLayoutAlignmentY\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the container"
        ],
        "return": [
          "the alignment \u0026gt;\u003d 0.0f \u0026amp;\u0026amp; \u0026lt;\u003d 1.0f"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layoutContainer",
      "comment": "Called by the AWT when the specified container needs to be laid out.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#layoutContainer(java.awt.Container)\"\u003elayoutContainer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the container to lay out"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTError.html\" title\u003d\"class in java.awt\"\u003eAWTError\u003c/a\u003e\u003c/code\u003e - if the target isn\u0027t the container specified to the constructor"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a layout manager that performs overlay arrangement of the children. The layout manager created is dedicated to the given container.",
      "annotations": [
        {
          "type": "ConstructorProperties",
          "values": [
            {
              "name": "value",
              "value": "target"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the container to do layout against"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.OverlayLayout",
  "comment": "A layout manager to arrange components over the top of each other. The requested size of the container will be the largest requested size of the children, taking alignment needs into consideration. The alignment is based upon what is needed to properly fit the children in the allocation area. The children will be placed such that their alignment points are all on top of each other. \n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}