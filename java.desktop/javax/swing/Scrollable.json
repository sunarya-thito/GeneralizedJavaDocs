{
  "packageName": "javax.swing",
  "simpleName": "Scrollable",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPreferredScrollableViewportSize",
      "comment": "Returns the preferred size of the viewport for a view component. For example, the preferred size of a JList component is the size required to accommodate all of the cells in its list. However, the value of preferredScrollableViewportSize is the size required for JList.getVisibleRowCount rows. A component without any properties that would affect the viewport size should just return getPreferredSize here.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the preferredSize of a \n\u003ccode\u003eJViewport\u003c/code\u003e whose view is this \n\u003ccode\u003eScrollable\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScrollableUnitIncrement",
      "comment": "Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation. Ideally, components should handle a partially exposed row or column by returning the distance required to completely expose the item. Scrolling containers, like JScrollPane, will use this method each time the user requests a unit scroll.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html#setUnitIncrement(int)\"\u003e\u003ccode\u003eJScrollBar.setUnitIncrement(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - The view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.",
          "\u003ccode\u003edirection\u003c/code\u003e - Less than zero to scroll up/left, greater than zero for down/right."
        ],
        "return": [
          "The \"unit\" increment for scrolling in the specified direction. This value should always be positive."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScrollableBlockIncrement",
      "comment": "Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation. Scrolling containers, like JScrollPane, will use this method each time the user requests a block scroll.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html#setBlockIncrement(int)\"\u003e\u003ccode\u003eJScrollBar.setBlockIncrement(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - The view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.",
          "\u003ccode\u003edirection\u003c/code\u003e - Less than zero to scroll up/left, greater than zero for down/right."
        ],
        "return": [
          "The \"block\" increment for scrolling in the specified direction. This value should always be positive."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScrollableTracksViewportWidth",
      "comment": "Return true if a viewport should always force the width of this Scrollable to match the width of the viewport. For example a normal text view that supported line wrapping would return true here, since it would be undesirable for wrapped lines to disappear beyond the right edge of the viewport. Note that returning true for a Scrollable whose ancestor is a JScrollPane effectively disables horizontal scrolling. Scrolling containers, like JViewport, will use this method each time they are validated.",
      "tagMap": {
        "return": [
          "True if a viewport should force the Scrollables width to match its own."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScrollableTracksViewportHeight",
      "comment": "Return true if a viewport should always force the height of this Scrollable to match the height of the viewport. For example a columnar text view that flowed text in left to right columns could effectively disable vertical scrolling by returning true here. Scrolling containers, like JViewport, will use this method each time they are validated.",
      "tagMap": {
        "return": [
          "True if a viewport should force the Scrollables height to match its own."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.Scrollable",
  "comment": "An interface that provides information to a scrolling container like JScrollPane. A complex component that\u0027s likely to be used as a viewing a JScrollPane viewport (or other scrolling container) should implement this interface.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJViewport\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJScrollPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJScrollBar\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}