{
  "packageName": "javax.swing",
  "simpleName": "SwingUtilities",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "isRectangleContainingRectangle",
      "comment": "Return true if @{code a} contains b",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first rectangle",
          "\u003ccode\u003eb\u003c/code\u003e - the second rectangle"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if @{code a} contains \n\u003ccode\u003eb\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLocalBounds",
      "comment": "Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - a component"
        ],
        "return": [
          "the local bounds for the component \n\u003ccode\u003eaComponent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getWindowAncestor",
      "comment": "Returns the first Window ancestor of c, or null if c is not contained inside a Window.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eComponent\u003c/code\u003e to get \n\u003ccode\u003eWindow\u003c/code\u003e ancestor of."
        ],
        "return": [
          "the first \n\u003ccode\u003eWindow \u003c/code\u003e ancestor of \n\u003ccode\u003ec\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003ec\u003c/code\u003e is not contained inside a \n\u003ccode\u003eWindow\u003c/code\u003e."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "aPoint"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "convertPoint",
      "comment": "Convert a aPoint in source coordinate system to destination coordinate system. If source is null, aPoint is assumed to be in destination\u0027s root component coordinate system. If destination is null, aPoint will be converted to source\u0027s root component coordinate system. If both source and destination are null, return aPoint without any conversion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source component",
          "\u003ccode\u003eaPoint\u003c/code\u003e - the point",
          "\u003ccode\u003edestination\u003c/code\u003e - the destination component"
        ],
        "return": [
          "the converted coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "convertPoint",
      "comment": "Convert the point (x,y) in source coordinate system to destination coordinate system. If source is null, (x,y) is assumed to be in destination\u0027s root component coordinate system. If destination is null, (x,y) will be converted to source\u0027s root component coordinate system. If both source and destination are null, return (x,y) without any conversion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source component",
          "\u003ccode\u003ex\u003c/code\u003e - the x-coordinate of the point",
          "\u003ccode\u003ey\u003c/code\u003e - the y-coordinate of the point",
          "\u003ccode\u003edestination\u003c/code\u003e - the destination component"
        ],
        "return": [
          "the converted coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "aRectangle"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "convertRectangle",
      "comment": "Convert the rectangle aRectangle in source coordinate system to destination coordinate system. If source is null, aRectangle is assumed to be in destination\u0027s root component coordinate system. If destination is null, aRectangle will be converted to source\u0027s root component coordinate system. If both source and destination are null, return aRectangle without any conversion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source component",
          "\u003ccode\u003eaRectangle\u003c/code\u003e - a rectangle",
          "\u003ccode\u003edestination\u003c/code\u003e - the destination component"
        ],
        "return": [
          "the converted rectangle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAncestorOfClass",
      "comment": "Convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds. Can return null, if a class c cannot be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the class of a component",
          "\u003ccode\u003ecomp\u003c/code\u003e - the component"
        ],
        "return": [
          "the ancestor of the \n\u003ccode\u003ecomp\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003ec\u003c/code\u003e cannot be found."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAncestorNamed",
      "comment": "Convenience method for searching above comp in the component hierarchy and returns the first object of name it finds. Can return null, if name cannot be found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of a component",
          "\u003ccode\u003ecomp\u003c/code\u003e - the component"
        ],
        "return": [
          "the ancestor of the \n\u003ccode\u003ecomp\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003ename\u003c/code\u003e cannot be found."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDeepestComponentAt",
      "comment": "Returns the deepest visible descendent Component of parent that contains the location x, y. If parent does not contain the specified location, then null is returned. If parent is not a container, or none of parent\u0027s visible descendents contain the specified location, parent is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the root component to begin the search",
          "\u003ccode\u003ex\u003c/code\u003e - the x target location",
          "\u003ccode\u003ey\u003c/code\u003e - the y target location"
        ],
        "return": [
          "the deepest component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.MouseEvent",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "sourceEvent"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "convertMouseEvent",
      "comment": "Returns a MouseEvent similar to sourceEvent except that its x and y members have been converted to destination\u0027s coordinate system. If source is null, sourceEvent x and y members are assumed to be into destination\u0027s root component coordinate system. If destination is null, the returned MouseEvent will be in source\u0027s coordinate system. sourceEvent will not be changed. A new event is returned. the source field of the returned event will be set to destination if destination is non-null use the translateMouseEvent() method to translate a mouse event from one component to another without changing the source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source component",
          "\u003ccode\u003esourceEvent\u003c/code\u003e - the source mouse event",
          "\u003ccode\u003edestination\u003c/code\u003e - the destination component"
        ],
        "return": [
          "the new mouse event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "convertPointToScreen",
      "comment": "Convert a point from a component\u0027s coordinate system to screen coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - a Point object (converted to the new coordinate system)",
          "\u003ccode\u003ec\u003c/code\u003e - a Component object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "convertPointFromScreen",
      "comment": "Convert a point from a screen coordinates to a component\u0027s coordinate system",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - a Point object (converted to the new coordinate system)",
          "\u003ccode\u003ec\u003c/code\u003e - a Component object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "windowForComponent",
      "comment": "Returns the first Window ancestor of c, or null if c is not contained inside a Window. Note: This method provides the same functionality as getWindowAncestor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eComponent\u003c/code\u003e to get \n\u003ccode\u003eWindow\u003c/code\u003e ancestor of."
        ],
        "return": [
          "the first \n\u003ccode\u003eWindow \u003c/code\u003e ancestor of \n\u003ccode\u003ec\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003ec\u003c/code\u003e is not contained inside a \n\u003ccode\u003eWindow\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDescendingFrom",
      "comment": "Return true if a component a descends from a component b",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first component",
          "\u003ccode\u003eb\u003c/code\u003e - the second component"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a component \n\u003ccode\u003ea\u003c/code\u003e descends from a component \n\u003ccode\u003eb\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "dest"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "computeIntersection",
      "comment": "Convenience to calculate the intersection of two rectangles without allocating a new rectangle. If the two rectangles don\u0027t intersect, then the returned rectangle begins at (0,0) and has zero width and height.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the first rectangle\u0027s top-left point",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the first rectangle\u0027s top-left point",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the first rectangle",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the first rectangle",
          "\u003ccode\u003edest\u003c/code\u003e - the second rectangle"
        ],
        "return": [
          "\u003ccode\u003edest\u003c/code\u003e, modified to specify the intersection"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "dest"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "computeUnion",
      "comment": "Convenience method that calculates the union of two rectangles without allocating a new rectangle.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x-coordinate of the first rectangle",
          "\u003ccode\u003ey\u003c/code\u003e - the y-coordinate of the first rectangle",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the first rectangle",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the first rectangle",
          "\u003ccode\u003edest\u003c/code\u003e - the coordinates of the second rectangle; the union of the two rectangles is returned in this rectangle"
        ],
        "return": [
          "the \n\u003ccode\u003edest\u003c/code\u003e \n\u003ccode\u003eRectangle\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "rectA"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "rectB"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "computeDifference",
      "comment": "Convenience returning an array of rect representing the regions within rectA that do not overlap with rectB. If the two Rects do not overlap, returns an empty array",
      "tagMap": {
        "param": [
          "\u003ccode\u003erectA\u003c/code\u003e - the first rectangle",
          "\u003ccode\u003erectB\u003c/code\u003e - the second rectangle"
        ],
        "return": [
          "an array of rectangles representing the regions within \n\u003ccode\u003erectA\u003c/code\u003e that do not overlap with \n\u003ccode\u003erectB\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "anEvent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLeftMouseButton",
      "comment": "Returns true if the mouse event specifies the left mouse button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eanEvent\u003c/code\u003e - a MouseEvent object"
        ],
        "return": [
          "true if the left mouse button was active"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "anEvent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isMiddleMouseButton",
      "comment": "Returns true if the mouse event specifies the middle mouse button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eanEvent\u003c/code\u003e - a MouseEvent object"
        ],
        "return": [
          "true if the middle mouse button was active"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "anEvent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isRightMouseButton",
      "comment": "Returns true if the mouse event specifies the right mouse button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eanEvent\u003c/code\u003e - a MouseEvent object"
        ],
        "return": [
          "true if the right mouse button was active"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "fm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "computeStringWidth",
      "comment": "Compute the width of the string using a font with the specified \"metrics\" (sizes).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efm\u003c/code\u003e - a FontMetrics object to compute with",
          "\u003ccode\u003estr\u003c/code\u003e - the String to compute"
        ],
        "return": [
          "an int containing the string width"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "fm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "verticalAlignment"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "horizontalAlignment"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "verticalTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "horizontalTextPosition"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "viewR"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "iconR"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "textR"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "textIconGap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "layoutCompoundLabel",
      "comment": "Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string. Locations are computed relative to the viewR rectangle. The JComponents orientation (LEADING/TRAILING) will also be taken into account and translated into LEFT/RIGHT values accordingly.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component",
          "\u003ccode\u003efm\u003c/code\u003e - the instance of \n\u003ccode\u003eFontMetrics\u003c/code\u003e",
          "\u003ccode\u003etext\u003c/code\u003e - the text",
          "\u003ccode\u003eicon\u003c/code\u003e - the icon",
          "\u003ccode\u003everticalAlignment\u003c/code\u003e - the vertical alignment",
          "\u003ccode\u003ehorizontalAlignment\u003c/code\u003e - the horizontal alignment",
          "\u003ccode\u003everticalTextPosition\u003c/code\u003e - the vertical text position",
          "\u003ccode\u003ehorizontalTextPosition\u003c/code\u003e - the horizontal text position",
          "\u003ccode\u003eviewR\u003c/code\u003e - the available rectangle",
          "\u003ccode\u003eiconR\u003c/code\u003e - the rectangle for the icon",
          "\u003ccode\u003etextR\u003c/code\u003e - the rectangle for the text",
          "\u003ccode\u003etextIconGap\u003c/code\u003e - the gap between text and icon"
        ],
        "return": [
          "the possibly clipped version of the compound labels string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "fm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "verticalAlignment"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "horizontalAlignment"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "verticalTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "horizontalTextPosition"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "viewR"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "iconR"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "textR"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "textIconGap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "layoutCompoundLabel",
      "comment": "Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string. Locations are computed relative to the viewR rectangle. This layoutCompoundLabel() does not know how to handle LEADING/TRAILING values in horizontalTextPosition (they will default to RIGHT) and in horizontalAlignment (they will default to CENTER). Use the other version of layoutCompoundLabel() instead.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efm\u003c/code\u003e - the instance of \n\u003ccode\u003eFontMetrics\u003c/code\u003e",
          "\u003ccode\u003etext\u003c/code\u003e - the text",
          "\u003ccode\u003eicon\u003c/code\u003e - the icon",
          "\u003ccode\u003everticalAlignment\u003c/code\u003e - the vertical alignment",
          "\u003ccode\u003ehorizontalAlignment\u003c/code\u003e - the horizontal alignment",
          "\u003ccode\u003everticalTextPosition\u003c/code\u003e - the vertical text position",
          "\u003ccode\u003ehorizontalTextPosition\u003c/code\u003e - the horizontal text position",
          "\u003ccode\u003eviewR\u003c/code\u003e - the available rectangle",
          "\u003ccode\u003eiconR\u003c/code\u003e - the rectangle for the icon",
          "\u003ccode\u003etextR\u003c/code\u003e - the rectangle for the text",
          "\u003ccode\u003etextIconGap\u003c/code\u003e - the gap between text and icon"
        ],
        "return": [
          "the possibly clipped version of the compound labels string"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "paintComponent",
      "comment": "Paints a component to the specified Graphics. This method is primarily useful to render Components that don\u0027t exist as part of the visible containment hierarchy, but are used for rendering. For example, if you are doing your own rendering and want to render some text (or even HTML), you could make use of JLabel\u0027s text rendering support and have it paint directly by way of this method, without adding the label to the visible containment hierarchy. This method makes use of CellRendererPane to handle the actual painting, and is only recommended if you use one component for rendering. If you make use of multiple components to handle the rendering, as JTable does, use CellRendererPane directly. Otherwise, as described below, you could end up with a CellRendererPane per Component. If c\u0027s parent is not a CellRendererPane, a new CellRendererPane is created, c is added to it, and the CellRendererPane is added to p. If c\u0027s parent is a CellRendererPane and the CellRendererPanes parent is not p, it is added to p. The component should either descend from JComponent or be another kind of lightweight component. A lightweight component is one whose \"lightweight\" property (returned by the Component isLightweight method) is true. If the Component is not lightweight, bad things map happen: crashes, exceptions, painting problems...",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/CellRendererPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eCellRendererPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isLightweight()\"\u003e\u003ccode\u003eComponent.isLightweight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e object to draw on",
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to draw",
          "\u003ccode\u003ep\u003c/code\u003e - the intermediate \n\u003ccode\u003eContainer\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an int specifying the left side of the area draw in, in pixels, measured from the left edge of the graphics context",
          "\u003ccode\u003ey\u003c/code\u003e - an int specifying the top of the area to draw in, in pixels measured down from the top edge of the graphics context",
          "\u003ccode\u003ew\u003c/code\u003e - an int specifying the width of the area draw in, in pixels",
          "\u003ccode\u003eh\u003c/code\u003e - an int specifying the height of the area draw in, in pixels"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "paintComponent",
      "comment": "Paints a component to the specified Graphics. This is a cover method for paintComponent(Graphics,Component,Container,int,int,int,int). Refer to it for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingUtilities.html#paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,int,int,int,int)\"\u003e\u003ccode\u003epaintComponent(Graphics,Component,Container,int,int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/CellRendererPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eCellRendererPane\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e object to draw on",
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to draw",
          "\u003ccode\u003ep\u003c/code\u003e - the intermediate \n\u003ccode\u003eContainer\u003c/code\u003e",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eRectangle\u003c/code\u003e to draw in"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "updateComponentTreeUI",
      "comment": "A simple minded look and feel change: ask each node in the tree to updateUI() -- that is, to initialize its UI property with the current look and feel.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "doRun"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeLater",
      "comment": "Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread. This will happen after all pending AWT events have been processed. This method should be used when an application thread needs to update the GUI. In the following example the invokeLater call queues the Runnable object doHelloWorld on the event dispatching thread and then prints a message.  Runnable doHelloWorld \u003d new Runnable() {\n     public void run() {\n         System.out.println(\"Hello World on \" + Thread.currentThread());\n     }\n };\n\n SwingUtilities.invokeLater(doHelloWorld);\n System.out.println(\"This might well be displayed before the other message.\");\n If invokeLater is called from the event dispatching thread -- for example, from a JButton\u0027s ActionListener -- the doRun.run() will still be deferred until all pending events have been processed. Note that if the doRun.run() throws an uncaught exception the event dispatching thread will unwind (not the current thread). Additional documentation and examples for this method can be found in Concurrency in Swing. As of 1.3 this method is just a cover for java.awt.EventQueue.invokeLater(). Unlike the rest of Swing, this method can be invoked from any thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingUtilities.html#invokeAndWait(java.lang.Runnable)\"\u003e\u003ccode\u003einvokeAndWait(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edoRun\u003c/code\u003e - the instance of \n\u003ccode\u003eRunnable\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.lang.reflect.InvocationTargetException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "doRun"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeAndWait",
      "comment": "Causes doRun.run() to be executed synchronously on the AWT event dispatching thread. This call blocks until all pending AWT events have been processed and (then) doRun.run() returns. This method should be used when an application thread needs to update the GUI. It shouldn\u0027t be called from the event dispatching thread. Here\u0027s an example that creates a new application thread that uses invokeAndWait to print a string from the event dispatching thread and then, when that\u0027s finished, print a string from the application thread.  final Runnable doHelloWorld \u003d new Runnable() {\n     public void run() {\n         System.out.println(\"Hello World on \" + Thread.currentThread());\n     }\n };\n\n Thread appThread \u003d new Thread() {\n     public void run() {\n         try {\n             SwingUtilities.invokeAndWait(doHelloWorld);\n         }\n         catch (Exception e) {\n             e.printStackTrace();\n         }\n         System.out.println(\"Finished on \" + Thread.currentThread());\n     }\n };\n appThread.start();\n Note that if the Runnable.run method throws an uncaught exception (on the event dispatching thread) it\u0027s caught and rethrown, as an InvocationTargetException, on the caller\u0027s thread. Additional documentation and examples for this method can be found in Concurrency in Swing. As of 1.3 this method is just a cover for java.awt.EventQueue.invokeAndWait().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable)\"\u003e\u003ccode\u003einvokeLater(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edoRun\u003c/code\u003e - the instance of \n\u003ccode\u003eRunnable\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if we\u0027re interrupted while waiting for the event dispatching thread to finish executing \n\u003ccode\u003edoRun.run()\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationTargetException.html\" title\u003d\"class in java.lang.reflect\"\u003eInvocationTargetException\u003c/a\u003e\u003c/code\u003e - if an exception is thrown while running \n\u003ccode\u003edoRun\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isEventDispatchThread",
      "comment": "Returns true if the current thread is an AWT event dispatching thread. As of 1.3 this method is just a cover for java.awt.EventQueue.isDispatchThread().",
      "tagMap": {
        "return": [
          "true if the current thread is an AWT event dispatching thread"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAccessibleIndexInParent",
      "comment": "Get the index of this object in its accessible parent. Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component"
        ],
        "return": [
          "-1 of this object does not have an accessible parent. Otherwise, the index of the child in its accessible parent."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.Accessible",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAccessibleAt",
      "comment": "Returns the Accessible child contained at the local coordinate Point, if one exists. Otherwise returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component",
          "\u003ccode\u003ep\u003c/code\u003e - the local coordinate"
        ],
        "return": [
          "the \n\u003ccode\u003eAccessible\u003c/code\u003e at the specified location, if it exists; otherwise \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleStateSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAccessibleStateSet",
      "comment": "Get the state of this object. Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/AccessibleState.html\" title\u003d\"class in javax.accessibility\"\u003e\u003ccode\u003eAccessibleState\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component"
        ],
        "return": [
          "an instance of AccessibleStateSet containing the current state set of the object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAccessibleChildrenCount",
      "comment": "Returns the number of accessible children in the object. If all of the children of this object implement Accessible, than this method should return the number of children of this object. Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component"
        ],
        "return": [
          "the number of accessible children in the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.Accessible",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAccessibleChild",
      "comment": "Return the nth Accessible child of the object. Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component",
          "\u003ccode\u003ei\u003c/code\u003e - zero-based index of child"
        ],
        "return": [
          "the nth Accessible child of the object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "findFocusOwner",
      "comment": "Return the child Component of the specified Component that is the focus owner, if any.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getFocusOwner()\"\u003e\u003ccode\u003eKeyboardFocusManager.getFocusOwner()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the root of the \n\u003ccode\u003eComponent\u003c/code\u003e hierarchy to search for the focus owner"
        ],
        "return": [
          "the focus owner, or \n\u003ccode\u003enull\u003c/code\u003e if there is no focus owner, or if the focus owner is not \n\u003ccode\u003ecomp\u003c/code\u003e, or a descendant of \n\u003ccode\u003ecomp\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JRootPane",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getRootPane",
      "comment": "If c is a JRootPane descendant return its JRootPane ancestor. If c is a RootPaneContainer then return its JRootPane.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component"
        ],
        "return": [
          "the JRootPane for Component c or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getRoot",
      "comment": "Returns the root component for the current component tree.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component"
        ],
        "return": [
          "the first ancestor of c that\u0027s a Window or the last Applet ancestor"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "processKeyBindings",
      "comment": "Process the key bindings for the Component associated with event. This method is only useful if event.getComponent() does not descend from JComponent, or your are not invoking super.processKeyEvent from within your JComponent subclass. JComponent automatically processes bindings from within its processKeyEvent method, hence you rarely need to directly invoke this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - KeyEvent used to identify which bindings to process, as well as which Component has focus."
        ],
        "return": [
          "true if a binding has found and processed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        },
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "ks"
          }
        },
        {
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "sender"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "notifyAction",
      "comment": "Invokes actionPerformed on action if action is non-null and accepts the sender object. The command for the ActionEvent is determined by: If the action was registered via registerKeyboardAction, then the command string passed in (null will be used if null was passed in). Action value with name Action.ACTION_COMMAND_KEY, unless null. String value of the KeyEvent, unless getKeyChar returns KeyEvent.CHAR_UNDEFINED.. This will return true if action is non-null and actionPerformed is invoked on it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#accept(java.lang.Object)\"\u003e\u003ccode\u003eAction.accept(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - an action",
          "\u003ccode\u003eks\u003c/code\u003e - a key stroke",
          "\u003ccode\u003eevent\u003c/code\u003e - a key event",
          "\u003ccode\u003esender\u003c/code\u003e - a sender",
          "\u003ccode\u003emodifiers\u003c/code\u003e - action modifiers"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eaction\u003c/code\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and actionPerformed is invoked on it."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "javax.swing.InputMap",
            "type": "Class"
          },
          "field": {
            "name": "uiInputMap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "replaceUIInputMap",
      "comment": "Convenience method to change the UI InputMap for component to uiInputMap. If uiInputMap is null, this removes any previously installed UI InputMap.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - a component",
          "\u003ccode\u003etype\u003c/code\u003e - a type",
          "\u003ccode\u003euiInputMap\u003c/code\u003e - an \n\u003ccode\u003eInputMap\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        },
        {
          "type": {
            "name": "javax.swing.ActionMap",
            "type": "Class"
          },
          "field": {
            "name": "uiActionMap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "replaceUIActionMap",
      "comment": "Convenience method to change the UI ActionMap for component to uiActionMap. If uiActionMap is null, this removes any previously installed UI ActionMap.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - a component",
          "\u003ccode\u003euiActionMap\u003c/code\u003e - an \n\u003ccode\u003eActionMap\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.InputMap",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUIInputMap",
      "comment": "Returns the InputMap provided by the UI for condition condition in component component. This will return null if the UI has not installed an InputMap of the specified type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - a component",
          "\u003ccode\u003econdition\u003c/code\u003e - a condition"
        ],
        "return": [
          "the \n\u003ccode\u003eActionMap\u003c/code\u003e provided by the UI for \n\u003ccode\u003econdition\u003c/code\u003e in the component, or \n\u003ccode\u003enull\u003c/code\u003e if the UI has not installed an InputMap of the specified type."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ActionMap",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUIActionMap",
      "comment": "Returns the ActionMap provided by the UI in component component. This will return null if the UI has not installed an ActionMap.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - a component"
        ],
        "return": [
          "the \n\u003ccode\u003eActionMap\u003c/code\u003e provided by the UI in the component, or \n\u003ccode\u003enull\u003c/code\u003e if the UI has not installed an ActionMap."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "calculateInnerArea",
      "comment": "Stores the position and size of the inner painting area of the specified component in r and returns r. The position and size specify the bounds of the component, adjusted so as not to include the border area (the insets). This method is useful for classes that implement painting code.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JComponent in question; if \n\u003ccode\u003enull\u003c/code\u003e, this method returns \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003er\u003c/code\u003e - the Rectangle instance to be modified; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003enull\u003c/code\u003e if the Component is \n\u003ccode\u003enull\u003c/code\u003e; otherwise, returns the passed-in rectangle (if non-\n\u003ccode\u003enull\u003c/code\u003e) or a new rectangle specifying position and size information"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUnwrappedParent",
      "comment": "Returns the first ancestor of the component which is not an instance of JLayer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJLayer\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - \n\u003ccode\u003eComponent\u003c/code\u003e to get the first ancestor of, which is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJLayer\u003c/code\u003e\u003c/a\u003e instance."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecomponent\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the first ancestor of the \n\u003ccode\u003ecomponent\u003c/code\u003e which is not an instance of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJLayer\u003c/code\u003e\u003c/a\u003e. If such an ancestor can not be found, \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JViewport",
            "type": "Class"
          },
          "field": {
            "name": "viewport"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUnwrappedView",
      "comment": "Returns the first JViewport\u0027s descendant which is not an instance of JLayer. If such a descendant can not be found, null is returned. If the viewport\u0027s view component is not a JLayer, this method is equivalent to JViewport.getView() otherwise JLayer.getView() will be recursively called on all descending JLayers.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html#getView()\"\u003e\u003ccode\u003eJViewport.getView()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJLayer\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eviewport\u003c/code\u003e - \n\u003ccode\u003eJViewport\u003c/code\u003e to get the first descendant of, which in not a \n\u003ccode\u003eJLayer\u003c/code\u003e instance."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eviewport\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the first \n\u003ccode\u003eJViewport\u003c/code\u003e\u0027s descendant which is not an instance of \n\u003ccode\u003eJLayer\u003c/code\u003e. If such a descendant can not be found, \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.7"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.SwingUtilities",
  "comment": "A collection of utility methods for Swing.",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}