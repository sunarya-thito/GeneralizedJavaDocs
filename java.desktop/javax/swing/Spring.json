{
  "packageName": "javax.swing",
  "simpleName": "Spring",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNSET",
      "comment": "An integer value signifying that a property value has not yet been calculated.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Spring.UNSET\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMinimumValue",
      "comment": "Returns the minimum value of this Spring.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eminimumValue\u003c/code\u003e property of this \n\u003ccode\u003eSpring\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPreferredValue",
      "comment": "Returns the preferred value of this Spring.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003epreferredValue\u003c/code\u003e of this \n\u003ccode\u003eSpring\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMaximumValue",
      "comment": "Returns the maximum value of this Spring.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003emaximumValue\u003c/code\u003e property of this \n\u003ccode\u003eSpring\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getValue",
      "comment": "Returns the current value of this Spring.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#setValue(int)\"\u003e\u003ccode\u003esetValue(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003evalue\u003c/code\u003e property of this \n\u003ccode\u003eSpring\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setValue",
      "comment": "Sets the current value of this Spring to value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#getValue()\"\u003e\u003ccode\u003egetValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the new setting of the \n\u003ccode\u003evalue\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pref"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "constant",
      "comment": "Returns a strut -- a spring whose minimum, preferred, and maximum values each have the value pref.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpring\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epref\u003c/code\u003e - the \n\u003cem\u003eminimum\u003c/em\u003e, \n\u003cem\u003epreferred\u003c/em\u003e, and \n\u003cem\u003emaximum\u003c/em\u003e values of the new spring"
        ],
        "return": [
          "a spring whose \n\u003cem\u003eminimum\u003c/em\u003e, \n\u003cem\u003epreferred\u003c/em\u003e, and \n\u003cem\u003emaximum\u003c/em\u003e values each have the value \n\u003ccode\u003epref\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "min"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pref"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "constant",
      "comment": "Returns a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpring\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - the \n\u003cem\u003eminimum\u003c/em\u003e value of the new spring",
          "\u003ccode\u003epref\u003c/code\u003e - the \n\u003cem\u003epreferred\u003c/em\u003e value of the new spring",
          "\u003ccode\u003emax\u003c/code\u003e - the \n\u003cem\u003emaximum\u003c/em\u003e value of the new spring"
        ],
        "return": [
          "a spring whose \n\u003cem\u003eminimum\u003c/em\u003e, \n\u003cem\u003epreferred\u003c/em\u003e, and \n\u003cem\u003emaximum\u003c/em\u003e values have the values: \n\u003ccode\u003emin\u003c/code\u003e, \n\u003ccode\u003epref\u003c/code\u003e, and \n\u003ccode\u003emax\u003c/code\u003e respectively"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Spring",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "minus",
      "comment": "Returns -s: a spring running in the opposite direction to s.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpring\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eSpring\u003c/code\u003e object"
        ],
        "return": [
          "\u003ccode\u003e-s\u003c/code\u003e: a spring running in the opposite direction to \n\u003ccode\u003es\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Spring",
            "type": "Class"
          },
          "field": {
            "name": "s1"
          }
        },
        {
          "type": {
            "name": "javax.swing.Spring",
            "type": "Class"
          },
          "field": {
            "name": "s2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sum",
      "comment": "Returns s1+s2: a spring representing s1 and s2 in series. In a sum, s3, of two springs, s1 and s2, the strains of s1, s2, and s3 are maintained at the same level (to within the precision implied by their integer values). The strain of a spring in compression is:          value - pref\n         ------------\n          pref - min\n and the strain of a spring in tension is:          value - pref\n         ------------\n          max - pref\n When setValue is called on the sum spring, s3, the strain in s3 is calculated using one of the formulas above. Once the strain of the sum is known, the values of s1 and s2 are then set so that they are have a strain equal to that of the sum. The formulas are evaluated so as to take rounding errors into account and ensure that the sum of the values of s1 and s2 is exactly equal to the value of s3.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpring\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es1\u003c/code\u003e - a \n\u003ccode\u003eSpring\u003c/code\u003e object",
          "\u003ccode\u003es2\u003c/code\u003e - a \n\u003ccode\u003eSpring\u003c/code\u003e object"
        ],
        "return": [
          "\u003ccode\u003es1+s2\u003c/code\u003e: a spring representing \n\u003ccode\u003es1\u003c/code\u003e and \n\u003ccode\u003es2\u003c/code\u003e in series"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Spring",
            "type": "Class"
          },
          "field": {
            "name": "s1"
          }
        },
        {
          "type": {
            "name": "javax.swing.Spring",
            "type": "Class"
          },
          "field": {
            "name": "s2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns max(s1, s2): a spring whose value is always greater than (or equal to) the values of both s1 and s2.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpring\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es1\u003c/code\u003e - a \n\u003ccode\u003eSpring\u003c/code\u003e object",
          "\u003ccode\u003es2\u003c/code\u003e - a \n\u003ccode\u003eSpring\u003c/code\u003e object"
        ],
        "return": [
          "\u003ccode\u003emax(s1, s2)\u003c/code\u003e: a spring whose value is always greater than (or equal to) the values of both \n\u003ccode\u003es1\u003c/code\u003e and \n\u003ccode\u003es2\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Spring",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "factor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "scale",
      "comment": "Returns a spring whose minimum, preferred, maximum and value properties are each multiples of the properties of the argument spring, s. Minimum and maximum properties are swapped when factor is negative (in accordance with the rules of interval arithmetic). When factor is, for example, 0.5f the result represents \u0027the mid-point\u0027 of its input - an operation that is useful for centering components in a container.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the spring to scale",
          "\u003ccode\u003efactor\u003c/code\u003e - amount to scale by."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is null"
        ],
        "return": [
          "a spring whose properties are those of the input spring \n\u003ccode\u003es\u003c/code\u003e multiplied by \n\u003ccode\u003efactor\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "width",
      "comment": "Returns a spring whose minimum, preferred, maximum and value properties are defined by the widths of the minimumSize, preferredSize, maximumSize and size properties of the supplied component. The returned spring is a \u0027wrapper\u0027 implementation whose methods call the appropriate size methods of the supplied component. The minimum, preferred, maximum and value properties of the returned spring therefore report the current state of the appropriate properties in the component and track them as they change.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - Component used for calculating size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is null"
        ],
        "return": [
          "a spring whose properties are defined by the horizontal component of the component\u0027s size methods."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Spring",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "height",
      "comment": "Returns a spring whose minimum, preferred, maximum and value properties are defined by the heights of the minimumSize, preferredSize, maximumSize and size properties of the supplied component. The returned spring is a \u0027wrapper\u0027 implementation whose methods call the appropriate size methods of the supplied component. The minimum, preferred, maximum and value properties of the returned spring therefore report the current state of the appropriate properties in the component and track them as they change.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - Component used for calculating size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is null"
        ],
        "return": [
          "a spring whose properties are defined by the vertical component of the component\u0027s size methods."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Used by factory methods to create a Spring.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#constant(int)\"\u003e\u003ccode\u003econstant(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#constant(int,int,int)\"\u003e\u003ccode\u003econstant(int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#max(javax.swing.Spring,javax.swing.Spring)\"\u003e\u003ccode\u003emax(javax.swing.Spring, javax.swing.Spring)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#minus(javax.swing.Spring)\"\u003e\u003ccode\u003eminus(javax.swing.Spring)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Spring.html#sum(javax.swing.Spring,javax.swing.Spring)\"\u003e\u003ccode\u003esum(javax.swing.Spring, javax.swing.Spring)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpringLayout.Constraints.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpringLayout.Constraints\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.Spring",
  "comment": "An instance of the \n\u003ccode\u003eSpring\u003c/code\u003e class holds three properties that characterize its behavior: the \n\u003cem\u003eminimum\u003c/em\u003e, \n\u003cem\u003epreferred\u003c/em\u003e, and \n\u003cem\u003emaximum\u003c/em\u003e values. Each of these properties may be involved in defining its fourth, \n\u003cem\u003evalue\u003c/em\u003e, property based on a series of rules. \n\u003cp\u003e An instance of the \u003ccode\u003eSpring\u003c/code\u003e class can be visualized as a mechanical spring that provides a corrective force as the spring is compressed or stretched away from its preferred value. This force is modelled as linear function of the distance from the preferred value, but with two different constants -- one for the compressional force and one for the tensional one. Those constants are specified by the minimum and maximum values of the spring such that a spring at its minimum value produces an equal and opposite force to that which is created when it is at its maximum value. The difference between the \u003cem\u003epreferred\u003c/em\u003e and \u003cem\u003eminimum\u003c/em\u003e values, therefore, represents the ease with which the spring can be compressed and the difference between its \u003cem\u003emaximum\u003c/em\u003e and \u003cem\u003epreferred\u003c/em\u003e values, indicates the ease with which the \u003ccode\u003eSpring\u003c/code\u003e can be extended. See the \u003ca href\u003d\"#sum(javax.swing.Spring,javax.swing.Spring)\"\u003e\u003ccode\u003esum(javax.swing.Spring, javax.swing.Spring)\u003c/code\u003e\u003c/a\u003e method for details. \u003c/p\u003e\n\u003cp\u003e By defining simple arithmetic operations on \u003ccode\u003eSpring\u003c/code\u003es, the behavior of a collection of \u003ccode\u003eSpring\u003c/code\u003es can be reduced to that of an ordinary (non-compound) \u003ccode\u003eSpring\u003c/code\u003e. We define the \"+\", \"-\", \u003cem\u003emax\u003c/em\u003e, and \u003cem\u003emin\u003c/em\u003e operators on \u003ccode\u003eSpring\u003c/code\u003es so that, in each case, the result is a \u003ccode\u003eSpring\u003c/code\u003e whose characteristics bear a useful mathematical relationship to its constituent springs. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eSpring\u003c/code\u003e can be treated as a pair of intervals with a single common point: the preferred value. The following rules define some of the arithmetic operators that can be applied to intervals (\u003ccode\u003e[a, b]\u003c/code\u003e refers to the interval from \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003eb\u003c/code\u003e, where \u003ccode\u003ea \u0026lt;\u003d b\u003c/code\u003e). \u003c/p\u003e\n\u003cpre\u003e          [a1, b1] + [a2, b2] \u003d [a1 + a2, b1 + b2]\n\n                      -[a, b] \u003d [-b, -a]\n\n      max([a1, b1], [a2, b2]) \u003d [max(a1, a2), max(b1, b2)]\n  \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If we denote \u003ccode\u003eSpring\u003c/code\u003es as \u003ccode\u003e[a, b, c]\u003c/code\u003e, where \u003ccode\u003ea \u0026lt;\u003d b \u0026lt;\u003d c\u003c/code\u003e, we can define the same arithmetic operators on \u003ccode\u003eSpring\u003c/code\u003es: \u003c/p\u003e\n\u003cpre\u003e          [a1, b1, c1] + [a2, b2, c2] \u003d [a1 + a2, b1 + b2, c1 + c2]\n\n                           -[a, b, c] \u003d [-c, -b, -a]\n\n      max([a1, b1, c1], [a2, b2, c2]) \u003d [max(a1, a2), max(b1, b2), max(c1, c2)]\n  \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e With both intervals and \u003ccode\u003eSpring\u003c/code\u003es we can define \"-\" and \u003cem\u003emin\u003c/em\u003e in terms of negation: \u003c/p\u003e\n\u003cpre\u003e      X - Y \u003d X + (-Y)\n\n      min(X, Y) \u003d -max(-X, -Y)\n  \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For the static methods in this class that embody the arithmetic operators, we do not actually perform the operation in question as that would snapshot the values of the properties of the method\u0027s arguments at the time the static method is called. Instead, the static methods create a new \u003ccode\u003eSpring\u003c/code\u003e instance containing references to the method\u0027s arguments so that the characteristics of the new spring track the potentially changing characteristics of the springs from which it was made. This is a little like the idea of a \u003cem\u003elazy value\u003c/em\u003e in a functional language. \u003c/p\u003e\n\u003cp\u003e If you are implementing a \u003ccode\u003eSpringLayout\u003c/code\u003e you can find further information and examples in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html\"\u003eHow to Use SpringLayout\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpringLayout.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpringLayout\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpringLayout.Constraints.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpringLayout.Constraints\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}