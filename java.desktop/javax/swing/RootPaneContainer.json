{
  "packageName": "javax.swing",
  "simpleName": "RootPaneContainer",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.JRootPane",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRootPane",
      "comment": "Return this component\u0027s single JRootPane child. A conventional implementation of this interface will have all of the other methods indirect through this one. The rootPane has two children: the glassPane and the layeredPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJRootPane\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this components single JRootPane child."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "contentPane"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setContentPane",
      "comment": "The \"contentPane\" is the primary container for application specific components. Applications should add children to the contentPane, set its layout manager, and so on. The contentPane may not be null. Generally implemented with getRootPane().setContentPane(contentPane);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#getContentPane()\"\u003e\u003ccode\u003eJRootPane.getContentPane()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RootPaneContainer.html#getContentPane()\"\u003e\u003ccode\u003egetContentPane()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtentPane\u003c/code\u003e - the Container to use for the contents of this JRootPane"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - (a runtime exception) if the content pane parameter is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getContentPane",
      "comment": "Returns the contentPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RootPaneContainer.html#setContentPane(java.awt.Container)\"\u003e\u003ccode\u003esetContentPane(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the contentPane property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JLayeredPane",
            "type": "Class"
          },
          "field": {
            "name": "layeredPane"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLayeredPane",
      "comment": "A Container that manages the contentPane and in some cases a menu bar. The layeredPane can be used by descendants that want to add a child to the RootPaneContainer that isn\u0027t layout managed. For example an internal dialog or a drag and drop effect component. The layeredPane may not be null. Generally implemented with     getRootPane().setLayeredPane(layeredPane);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RootPaneContainer.html#getLayeredPane()\"\u003e\u003ccode\u003egetLayeredPane()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#getLayeredPane()\"\u003e\u003ccode\u003eJRootPane.getLayeredPane()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elayeredPane\u003c/code\u003e - the layered pane"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - (a runtime exception) if the layered pane parameter is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JLayeredPane",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLayeredPane",
      "comment": "Returns the layeredPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RootPaneContainer.html#setLayeredPane(javax.swing.JLayeredPane)\"\u003e\u003ccode\u003esetLayeredPane(javax.swing.JLayeredPane)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the layeredPane property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "glassPane"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setGlassPane",
      "comment": "The glassPane is always the first child of the rootPane and the rootPanes layout manager ensures that it\u0027s always as big as the rootPane. By default it\u0027s transparent and not visible. It can be used to temporarily grab all keyboard and mouse input by adding listeners and then making it visible. by default it\u0027s not visible. The glassPane may not be null. Generally implemented with getRootPane().setGlassPane(glassPane);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RootPaneContainer.html#getGlassPane()\"\u003e\u003ccode\u003egetGlassPane()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#setGlassPane(java.awt.Component)\"\u003e\u003ccode\u003eJRootPane.setGlassPane(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglassPane\u003c/code\u003e - the glass pane"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGlassPane",
      "comment": "Returns the glassPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RootPaneContainer.html#setGlassPane(java.awt.Component)\"\u003e\u003ccode\u003esetGlassPane(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the glassPane property."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.RootPaneContainer",
  "comment": "This interface is implemented by components that have a single JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame. The methods in this interface are just \n\u003ci\u003ecovers\u003c/i\u003e for the JRootPane properties, e.g. \n\u003ccode\u003egetContentPane()\u003c/code\u003e is generally implemented like this:\n\u003cpre\u003e     public Container getContentPane() {\n         return getRootPane().getContentPane();\n     }\n \u003c/pre\u003e This interface serves as a \n\u003ci\u003emarker\u003c/i\u003e for Swing GUI builders that need to treat components like JFrame, that contain a single JRootPane, specially. For example in a GUI builder, dropping a component on a RootPaneContainer would be interpreted as \n\u003ccode\u003eframe.getContentPane().add(child)\u003c/code\u003e. \n\u003cp\u003e As a convenience, the standard classes that implement this interface (such as \u003ccode\u003eJFrame\u003c/code\u003e, \u003ccode\u003eJDialog\u003c/code\u003e, \u003ccode\u003eJWindow\u003c/code\u003e, \u003ccode\u003eJApplet\u003c/code\u003e, and \u003ccode\u003eJInternalFrame\u003c/code\u003e) have their \u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003eremove\u003c/code\u003e, and \u003ccode\u003esetLayout\u003c/code\u003e methods overridden, so that they delegate calls to the corresponding methods of the \u003ccode\u003eContentPane\u003c/code\u003e. For example, you can add a child component to a frame as follows: \u003c/p\u003e\n\u003cpre\u003e       frame.add(child);\n \u003c/pre\u003e instead of: \n\u003cpre\u003e       frame.getContentPane().add(child);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The behavior of the \u003ccode\u003eadd\u003c/code\u003e and \u003ccode\u003esetLayout\u003c/code\u003e methods for \u003ccode\u003eJFrame\u003c/code\u003e, \u003ccode\u003eJDialog\u003c/code\u003e, \u003ccode\u003eJWindow\u003c/code\u003e, \u003ccode\u003eJApplet\u003c/code\u003e and \u003ccode\u003eJInternalFrame\u003c/code\u003e is controlled by the \u003ccode\u003erootPaneCheckingEnabled\u003c/code\u003e property. If this property is true (the default), then calls to these methods are forwarded to the \u003ccode\u003econtentPane\u003c/code\u003e; if false, these methods operate directly on the \u003ccode\u003eRootPaneContainer\u003c/code\u003e. This property is only intended for subclasses, and is therefore protected.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJRootPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDialog.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJDialog\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JWindow.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJWindow\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JApplet.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJApplet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JInternalFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJInternalFrame\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}