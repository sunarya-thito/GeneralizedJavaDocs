{
  "packageName": "javax.swing.table",
  "simpleName": "TableCellRenderer",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable",
            "type": "Class"
          },
          "field": {
            "name": "table"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isSelected"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hasFocus"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTableCellRendererComponent",
      "comment": "Returns the component used for drawing the cell. This method is used to configure the renderer appropriately before drawing. The TableCellRenderer is also responsible for rendering the the cell representing the table\u0027s current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location:      JTable.DropLocation dropLocation \u003d table.getDropLocation();\n     if (dropLocation !\u003d null\n             \u0026\u0026 !dropLocation.isInsertRow()\n             \u0026\u0026 !dropLocation.isInsertColumn()\n             \u0026\u0026 dropLocation.getRow() \u003d\u003d row\n             \u0026\u0026 dropLocation.getColumn() \u003d\u003d column) {\n\n         // this cell represents the current drop location\n         // so render it specially, perhaps with a different color\n     }\n During a printing operation, this method will be called with isSelected and hasFocus values of false to prevent selection and focus from appearing in the printed output. To do other customization based on whether or not the table is being printed, check the return value from JComponent.isPaintingForPrint().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isPaintingForPrint()\"\u003e\u003ccode\u003eJComponent.isPaintingForPrint()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etable\u003c/code\u003e - the \n\u003ccode\u003eJTable\u003c/code\u003e that is asking the renderer to draw; can be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003evalue\u003c/code\u003e - the value of the cell to be rendered. It is up to the specific renderer to interpret and draw the value. For example, if \n\u003ccode\u003evalue\u003c/code\u003e is the string \"true\", it could be rendered as a string or it could be rendered as a check box that is checked. \n\u003ccode\u003enull\u003c/code\u003e is a valid value",
          "\u003ccode\u003eisSelected\u003c/code\u003e - true if the cell is to be rendered with the selection highlighted; otherwise false",
          "\u003ccode\u003ehasFocus\u003c/code\u003e - if true, render cell appropriately. For example, put a special border on the cell, if the cell can be edited, render in the color used to indicate editing",
          "\u003ccode\u003erow\u003c/code\u003e - the row index of the cell being drawn. When drawing the header, the value of \n\u003ccode\u003erow\u003c/code\u003e is -1",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column index of the cell being drawn"
        ],
        "return": [
          "the component used for drawing the cell."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.table.TableCellRenderer",
  "comment": "This interface defines the method required by any object that would like to be a renderer for cells in a \n\u003ccode\u003eJTable\u003c/code\u003e.",
  "tagMap": {}
}