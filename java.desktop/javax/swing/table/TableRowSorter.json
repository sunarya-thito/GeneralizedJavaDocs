{
  "packageName": "javax.swing.table",
  "simpleName": "TableRowSorter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.DefaultRowSorter",
    "parameters": [
      {
        "name": "M",
        "type": "Class"
      },
      {
        "name": "java.lang.Integer",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "javax.swing.table.TableRowSorter",
            "name": "M",
            "type": "Variable"
          },
          "field": {
            "name": "model"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the TableModel to use as the underlying model for this TableRowSorter. A value of null can be used to set an empty model.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emodel\u003c/code\u003e - the underlying model to use, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableStringConverter",
            "type": "Class"
          },
          "field": {
            "name": "stringConverter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStringConverter",
      "comment": "Sets the object responsible for converting values from the model to strings. If non-null this is used to convert any object values, that do not have a registered Comparator, to strings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estringConverter\u003c/code\u003e - the object responsible for converting values from the model to strings"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableStringConverter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringConverter",
      "comment": "Returns the object responsible for converting values from the model to strings.",
      "tagMap": {
        "return": [
          "object responsible for converting values to strings."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComparator",
      "comment": "Returns the Comparator for the specified column. If a Comparator has not been specified using the setComparator method a Comparator will be returned based on the column class (TableModel.getColumnClass) of the specified column. If the column class is String, Collator.getInstance is returned. If the column class implements Comparable a private Comparator is returned that invokes the compareTo method. Otherwise Collator.getInstance is returned.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#getComparator(int)\"\u003egetComparator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"class in javax.swing\"\u003eDefaultRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"type parameter in TableRowSorter\"\u003eM\u003c/a\u003e extends \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableModel.html\" title\u003d\"interface in javax.swing.table\"\u003eTableModel\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003eInteger\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to fetch the \n\u003ccode\u003eComparator\u003c/code\u003e for, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if column is outside the range of the underlying model"
        ],
        "return": [
          "the \n\u003ccode\u003eComparator\u003c/code\u003e for the specified column"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "useToString",
      "comment": "Returns whether or not to convert the value to a string before doing comparisons when sorting. If true ModelWrapper.getStringValueAt will be used, otherwise ModelWrapper.getValueAt will be used. It is up to subclasses, such as TableRowSorter, to honor this value in their ModelWrapper implementation.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#useToString(int)\"\u003euseToString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"class in javax.swing\"\u003eDefaultRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"type parameter in TableRowSorter\"\u003eM\u003c/a\u003e extends \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableModel.html\" title\u003d\"interface in javax.swing.table\"\u003eTableModel\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003eInteger\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the index of the column to test, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumn\u003c/code\u003e is not valid"
        ],
        "return": [
          "true if values are to be converted to strings before doing comparisons when sorting"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a TableRowSorter with an empty model.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "owner": "javax.swing.table.TableRowSorter",
            "name": "M",
            "type": "Variable"
          },
          "field": {
            "name": "model"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a TableRowSorter using model as the underlying TableModel.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emodel\u003c/code\u003e - the underlying \n\u003ccode\u003eTableModel\u003c/code\u003e to use, \n\u003ccode\u003enull\u003c/code\u003e is treated as an empty model"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "M",
      "upperBounds": [
        {
          "name": "javax.swing.table.TableModel",
          "type": "Class"
        }
      ],
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.table.TableRowSorter",
  "comment": "An implementation of \n\u003ccode\u003eRowSorter\u003c/code\u003e that provides sorting and filtering using a \n\u003ccode\u003eTableModel\u003c/code\u003e. The following example shows adding sorting to a \n\u003ccode\u003eJTable\u003c/code\u003e: \n\u003cpre\u003e   TableModel myModel \u003d createMyTableModel();\n   JTable table \u003d new JTable(myModel);\n   table.setRowSorter(new TableRowSorter(myModel));\n \u003c/pre\u003e This will do all the wiring such that when the user does the appropriate gesture, such as clicking on the column header, the table will visually sort. \n\u003cp\u003e \u003ccode\u003eJTable\u003c/code\u003e\u0027s row-based methods and \u003ccode\u003eJTable\u003c/code\u003e\u0027s selection model refer to the view and not the underlying model. Therefore, it is necessary to convert between the two. For example, to get the selection in terms of \u003ccode\u003emyModel\u003c/code\u003e you need to convert the indices: \u003c/p\u003e\n\u003cpre\u003e   int[] selection \u003d table.getSelectedRows();\n   for (int i \u003d 0; i \u0026lt; selection.length; i++) {\n     selection[i] \u003d table.convertRowIndexToModel(selection[i]);\n   }\n \u003c/pre\u003e Similarly to select a row in \n\u003ccode\u003eJTable\u003c/code\u003e based on a coordinate from the underlying model do the inverse: \n\u003cpre\u003e   table.setRowSelectionInterval(table.convertRowIndexToView(row),\n                                 table.convertRowIndexToView(row));\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The previous example assumes you have not enabled filtering. If you have enabled filtering \u003ccode\u003econvertRowIndexToView\u003c/code\u003e will return -1 for locations that are not visible in the view. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eTableRowSorter\u003c/code\u003e uses \u003ccode\u003eComparator\u003c/code\u003es for doing comparisons. The following defines how a \u003ccode\u003eComparator\u003c/code\u003e is chosen for a column: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eIf a \u003ccode\u003eComparator\u003c/code\u003e has been specified for the column by the \u003ccode\u003esetComparator\u003c/code\u003e method, use it. \u003c/li\u003e\n \u003cli\u003eIf the column class as returned by \u003ccode\u003egetColumnClass\u003c/code\u003e is \u003ccode\u003eString\u003c/code\u003e, use the \u003ccode\u003eComparator\u003c/code\u003e returned by \u003ccode\u003eCollator.getInstance()\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eIf the column class implements \u003ccode\u003eComparable\u003c/code\u003e, use a \u003ccode\u003eComparator\u003c/code\u003e that invokes the \u003ccode\u003ecompareTo\u003c/code\u003e method. \u003c/li\u003e\n \u003cli\u003eIf a \u003ccode\u003eTableStringConverter\u003c/code\u003e has been specified, use it to convert the values to \u003ccode\u003eString\u003c/code\u003es and then use the \u003ccode\u003eComparator\u003c/code\u003e returned by \u003ccode\u003eCollator.getInstance()\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eOtherwise use the \u003ccode\u003eComparator\u003c/code\u003e returned by \u003ccode\u003eCollator.getInstance()\u003c/code\u003e on the results from calling \u003ccode\u003etoString\u003c/code\u003e on the objects. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e In addition to sorting \u003ccode\u003eTableRowSorter\u003c/code\u003e provides the ability to filter. A filter is specified using the \u003ccode\u003esetFilter\u003c/code\u003e method. The following example will only show rows containing the string \"foo\": \u003c/p\u003e\n\u003cpre\u003e   TableModel myModel \u003d createMyTableModel();\n   TableRowSorter sorter \u003d new TableRowSorter(myModel);\n   sorter.setRowFilter(RowFilter.regexFilter(\".*foo.*\"));\n   JTable table \u003d new JTable(myModel);\n   table.setRowSorter(sorter);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the underlying model structure changes (the \u003ccode\u003emodelStructureChanged\u003c/code\u003e method is invoked) the following are reset to their default values: \u003ccode\u003eComparator\u003c/code\u003es by column, current sort order, and whether each column is sortable. The default sort order is natural (the same as the model), and columns are sortable by default. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eTableRowSorter\u003c/code\u003e has one formal type parameter: the type of the model. Passing in a type that corresponds exactly to your model allows you to filter based on your model without casting. Refer to the documentation of \u003ccode\u003eRowFilter\u003c/code\u003e for an example of this. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eWARNING:\u003c/b\u003e \u003ccode\u003eDefaultTableModel\u003c/code\u003e returns a column class of \u003ccode\u003eObject\u003c/code\u003e. As such all comparisons will be done using \u003ccode\u003etoString\u003c/code\u003e. This may be unnecessarily expensive. If the column only contains one type of value, such as an \u003ccode\u003eInteger\u003c/code\u003e, you should override \u003ccode\u003egetColumnClass\u003c/code\u003e and return the appropriate \u003ccode\u003eClass\u003c/code\u003e. This will dramatically increase the performance of this class.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJTable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowFilter.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eRowFilter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}