{
  "packageName": "javax.swing.table",
  "simpleName": "TableColumn",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COLUMN_WIDTH_PROPERTY",
      "comment": "Obsolete as of Java 2 platform v1.3. Please use string literals to identify properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.table.TableColumn.COLUMN_WIDTH_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HEADER_VALUE_PROPERTY",
      "comment": "Obsolete as of Java 2 platform v1.3. Please use string literals to identify properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.table.TableColumn.HEADER_VALUE_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HEADER_RENDERER_PROPERTY",
      "comment": "Obsolete as of Java 2 platform v1.3. Please use string literals to identify properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.table.TableColumn.HEADER_RENDERER_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CELL_RENDERER_PROPERTY",
      "comment": "Obsolete as of Java 2 platform v1.3. Please use string literals to identify properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.table.TableColumn.CELL_RENDERER_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "modelIndex",
      "comment": "The index of the column in the model which is to be displayed by this TableColumn. As columns are moved around in the view modelIndex remains constant.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "identifier",
      "comment": "This object is not used internally by the drawing machinery of the JTable; identifiers may be set in the TableColumn as an optional way to tag and locate table columns. The table package does not modify or invoke any methods in these identifier objects other than the equals method which is used in the getColumnIndex() method in the DefaultTableColumnModel.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "width",
      "comment": "The width of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "minWidth",
      "comment": "The minimum width of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "maxWidth",
      "comment": "The maximum width of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "headerRenderer",
      "comment": "The renderer used to draw the header of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "headerValue",
      "comment": "The header value of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cellRenderer",
      "comment": "The renderer used to draw the data cells of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.table.TableCellEditor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cellEditor",
      "comment": "The editor used to edit the data cells of the column.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "isResizable",
      "comment": "If true, the user is allowed to resize the column; the default is true.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "resizedPostingDisableCount",
      "comment": "This field was not used in previous releases and there are currently no plans to support it in the future.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modelIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModelIndex",
      "comment": "Sets the model index for this column. The model index is the index of the column in the model that will be displayed by this TableColumn. As the TableColumn is moved around in the view the model index remains constant.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The model index."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emodelIndex\u003c/code\u003e - the new modelIndex"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModelIndex",
      "comment": "Returns the model index for this column.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003emodelIndex\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "identifier"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIdentifier",
      "comment": "Sets the TableColumn\u0027s identifier to anIdentifier. Note: identifiers are not used by the JTable, they are purely a convenience for the external tagging and location of columns.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "A unique identifier for this column."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getIdentifier()\"\u003e\u003ccode\u003egetIdentifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eidentifier\u003c/code\u003e - an identifier for this column"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIdentifier",
      "comment": "Returns the identifier object for this column. Note identifiers are not used by JTable, they are purely a convenience for external use. If the identifier is null, getIdentifier() returns getHeaderValue as a default.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setIdentifier(java.lang.Object)\"\u003e\u003ccode\u003esetIdentifier(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eidentifier\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "headerValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHeaderValue",
      "comment": "Sets the Object whose string representation will be used as the value for the headerRenderer. When the TableColumn is created, the default headerValue is null.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The text to be used by the header renderer."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getHeaderValue()\"\u003e\u003ccode\u003egetHeaderValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eheaderValue\u003c/code\u003e - the new headerValue"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHeaderValue",
      "comment": "Returns the Object used as the value for the header renderer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setHeaderValue(java.lang.Object)\"\u003e\u003ccode\u003esetHeaderValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eheaderValue\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "headerRenderer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHeaderRenderer",
      "comment": "Sets the TableCellRenderer used to draw the TableColumn\u0027s header to headerRenderer. It is the header renderers responsibility to render the sorting indicator. If you are using sorting and specify a renderer your renderer must render the sorting indication.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The header renderer."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getHeaderRenderer()\"\u003e\u003ccode\u003egetHeaderRenderer()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eheaderRenderer\u003c/code\u003e - the new headerRenderer"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHeaderRenderer",
      "comment": "Returns the TableCellRenderer used to draw the header of the TableColumn. When the headerRenderer is null, the JTableHeader uses its defaultRenderer. The default value for a headerRenderer is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setHeaderRenderer(javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003esetHeaderRenderer(javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setHeaderValue(java.lang.Object)\"\u003e\u003ccode\u003esetHeaderValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/JTableHeader.html#getDefaultRenderer()\"\u003e\u003ccode\u003eJTableHeader.getDefaultRenderer()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eheaderRenderer\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "cellRenderer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellRenderer",
      "comment": "Sets the TableCellRenderer used by JTable to draw individual values for this column.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The renderer to use for cell values."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getCellRenderer()\"\u003e\u003ccode\u003egetCellRenderer()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecellRenderer\u003c/code\u003e - the new cellRenderer"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellRenderer",
      "comment": "Returns the TableCellRenderer used by the JTable to draw values for this column. The cellRenderer of the column not only controls the visual look for the column, but is also used to interpret the value object supplied by the TableModel. When the cellRenderer is null, the JTable uses a default renderer based on the class of the cells in that column. The default value for a cellRenderer is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setCellRenderer(javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003esetCellRenderer(javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003eJTable.setDefaultRenderer(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003ecellRenderer\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "cellEditor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellEditor",
      "comment": "Sets the editor to used by when a cell in this column is edited.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The editor to use for cell values."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getCellEditor()\"\u003e\u003ccode\u003egetCellEditor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecellEditor\u003c/code\u003e - the new cellEditor"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellEditor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellEditor",
      "comment": "Returns the TableCellEditor used by the JTable to edit values for this column. When the cellEditor is null, the JTable uses a default editor based on the class of the cells in that column. The default value for a cellEditor is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setCellEditor(javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003esetCellEditor(javax.swing.table.TableCellEditor)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultEditor(java.lang.Class,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003eJTable.setDefaultEditor(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellEditor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003ecellEditor\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWidth",
      "comment": "This method should not be used to set the widths of columns in the JTable, use setPreferredWidth instead. Like a layout manager in the AWT, the JTable adjusts a column\u0027s width automatically whenever the table itself changes size, or a column\u0027s preferred width is changed. Setting widths programmatically therefore has no long term effect. This method sets this column\u0027s width to width. If width exceeds the minimum or maximum width, it is adjusted to the appropriate limiting value.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The width of the column."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getWidth()\"\u003e\u003ccode\u003egetWidth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setMinWidth(int)\"\u003e\u003ccode\u003esetMinWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setMaxWidth(int)\"\u003e\u003ccode\u003esetMaxWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setPreferredWidth(int)\"\u003e\u003ccode\u003esetPreferredWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#doLayout()\"\u003e\u003ccode\u003eJTable.doLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the new width"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWidth",
      "comment": "Returns the width of the TableColumn. The default width is 75.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setWidth(int)\"\u003e\u003ccode\u003esetWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003ewidth\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "preferredWidth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPreferredWidth",
      "comment": "Sets this column\u0027s preferred width to preferredWidth. If preferredWidth exceeds the minimum or maximum width, it is adjusted to the appropriate limiting value. For details on how the widths of columns in the JTable (and JTableHeader) are calculated from the preferredWidth, see the doLayout method in JTable.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The preferred width of the column."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getPreferredWidth()\"\u003e\u003ccode\u003egetPreferredWidth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#doLayout()\"\u003e\u003ccode\u003eJTable.doLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epreferredWidth\u003c/code\u003e - the new preferred width"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredWidth",
      "comment": "Returns the preferred width of the TableColumn. The default preferred width is 75.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setPreferredWidth(int)\"\u003e\u003ccode\u003esetPreferredWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003epreferredWidth\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minWidth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinWidth",
      "comment": "Sets the TableColumn\u0027s minimum width to minWidth, adjusting the new minimum width if necessary to ensure that 0 \u003c\u003d minWidth \u003c\u003d maxWidth. For example, if the minWidth argument is negative, this method sets the minWidth property to 0. If the value of the width or preferredWidth property is less than the new minimum width, this method sets that property to the new minimum width.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The minimum width of the column."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getMinWidth()\"\u003e\u003ccode\u003egetMinWidth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setPreferredWidth(int)\"\u003e\u003ccode\u003esetPreferredWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setMaxWidth(int)\"\u003e\u003ccode\u003esetMaxWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eminWidth\u003c/code\u003e - the new minimum width"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinWidth",
      "comment": "Returns the minimum width for the TableColumn. The TableColumn\u0027s width can\u0027t be made less than this either by the user or programmatically.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setMinWidth(int)\"\u003e\u003ccode\u003esetMinWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#%3Cinit%3E(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003eTableColumn(int, int, TableCellRenderer, TableCellEditor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eminWidth\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxWidth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaxWidth",
      "comment": "Sets the TableColumn\u0027s maximum width to maxWidth or, if maxWidth is less than the minimum width, to the minimum width. If the value of the width or preferredWidth property is more than the new maximum width, this method sets that property to the new maximum width.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The maximum width of the column."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getMaxWidth()\"\u003e\u003ccode\u003egetMaxWidth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setPreferredWidth(int)\"\u003e\u003ccode\u003esetPreferredWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setMinWidth(int)\"\u003e\u003ccode\u003esetMinWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaxWidth\u003c/code\u003e - the new maximum width"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxWidth",
      "comment": "Returns the maximum width for the TableColumn. The TableColumn\u0027s width can\u0027t be made larger than this either by the user or programmatically. The default maxWidth is Integer.MAX_VALUE.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setMaxWidth(int)\"\u003e\u003ccode\u003esetMaxWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003emaxWidth\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isResizable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setResizable",
      "comment": "Sets whether this column can be resized.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether or not this column can be resized."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getResizable()\"\u003e\u003ccode\u003egetResizable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eisResizable\u003c/code\u003e - if true, resizing is allowed; otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResizable",
      "comment": "Returns true if the user is allowed to resize the TableColumn\u0027s width, false otherwise. You can change the width programmatically regardless of this setting. The default is true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setResizable(boolean)\"\u003e\u003ccode\u003esetResizable(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eisResizable\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sizeWidthToFit",
      "comment": "Resizes the TableColumn to fit the width of its header cell. This method does nothing if the header renderer is null (the default case). Otherwise, it sets the minimum, maximum and preferred widths of this column to the widths of the minimum, maximum and preferred sizes of the Component delivered by the header renderer. The transient \"width\" property of this TableColumn is also set to the preferred width. Note this method is not used internally by the table package.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setPreferredWidth(int)\"\u003e\u003ccode\u003esetPreferredWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "disableResizedPosting",
      "comment": "This field was not used in previous releases and there are currently no plans to support it in the future.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "enableResizedPosting",
      "comment": "This field was not used in previous releases and there are currently no plans to support it in the future.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list. The listener is registered for all bound properties of this class, including the following: this TableColumn\u0027s modelIndex (\"modelIndex\") this TableColumn\u0027s identifier (\"identifier\") this TableColumn\u0027s header value (\"headerValue\") this TableColumn\u0027s header renderer (\"headerRenderer\") this TableColumn\u0027s cell renderer (\"cellRenderer\") this TableColumn\u0027s cell editor (\"cellEditor\") this TableColumn\u0027s width (\"width\") this TableColumn\u0027s preferred width (\"preferredWidth\") this TableColumn\u0027s minimum width (\"minWidth\") this TableColumn\u0027s maximum width (\"maxWidth\") this TableColumn\u0027s resizable state (\"isResizable\")",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#removePropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removePropertyChangeListener",
      "comment": "Removes a PropertyChangeListener from the listener list. The PropertyChangeListener to be removed was registered for all properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the PropertyChangeListeners added to this TableColumn with addPropertyChangeListener().",
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultHeaderRenderer",
      "comment": "As of Java 2 platform v1.3, this method is not called by the TableColumn constructor. Previously this method was used by the TableColumn to create a default header renderer. As of Java 2 platform v1.3, the default header renderer is null. JTableHeader now provides its own shared default renderer, just as the JTable does for its cell renderers.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/JTableHeader.html#createDefaultRenderer()\"\u003e\u003ccode\u003eJTableHeader.createDefaultRenderer()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default header renderer"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Cover method, using a default model index of 0, default width of 75, a null renderer and a null editor. This method is intended for serialization.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#%3Cinit%3E(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003eTableColumn(int, int, TableCellRenderer, TableCellEditor)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modelIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Cover method, using a default width of 75, a null renderer and a null editor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#%3Cinit%3E(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003eTableColumn(int, int, TableCellRenderer, TableCellEditor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodelIndex\u003c/code\u003e - the index of the column in the model that supplies the data for this column in the table; the model index remains the same even when columns are reordered in the view"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modelIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Cover method, using a null renderer and a null editor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#%3Cinit%3E(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003eTableColumn(int, int, TableCellRenderer, TableCellEditor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodelIndex\u003c/code\u003e - the index of the column in the model that supplies the data for this column in the table; the model index remains the same even when columns are reordered in the view",
          "\u003ccode\u003ewidth\u003c/code\u003e - this column\u0027s preferred width and initial width"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modelIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "javax.swing.table.TableCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "cellRenderer"
          }
        },
        {
          "type": {
            "name": "javax.swing.table.TableCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "cellEditor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates and initializes an instance of TableColumn with the specified model index, width, cell renderer, and cell editor; all TableColumn constructors delegate to this one. The value of width is used for both the initial and preferred width; if width is negative, they\u0027re set to 0. The minimum width is set to 15 unless the initial width is less, in which case the minimum width is set to the initial width. When the cellRenderer or cellEditor parameter is null, a default value provided by the JTable getDefaultRenderer or getDefaultEditor method, respectively, is used to provide defaults based on the type of the data in this column. This column-centric rendering strategy can be circumvented by overriding the getCellRenderer methods in JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#getMinWidth()\"\u003e\u003ccode\u003egetMinWidth()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDefaultRenderer(java.lang.Class)\"\u003e\u003ccode\u003eJTable.getDefaultRenderer(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDefaultEditor(java.lang.Class)\"\u003e\u003ccode\u003eJTable.getDefaultEditor(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getCellRenderer(int,int)\"\u003e\u003ccode\u003eJTable.getCellRenderer(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getCellEditor(int,int)\"\u003e\u003ccode\u003eJTable.getCellEditor(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodelIndex\u003c/code\u003e - the index of the column in the model that supplies the data for this column in the table; the model index remains the same even when columns are reordered in the view",
          "\u003ccode\u003ewidth\u003c/code\u003e - this column\u0027s preferred width and initial width",
          "\u003ccode\u003ecellRenderer\u003c/code\u003e - the object used to render values in this column",
          "\u003ccode\u003ecellEditor\u003c/code\u003e - the object used to edit values in this column"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.table.TableColumn",
  "comment": "A \n\u003ccode\u003eTableColumn\u003c/code\u003e represents all the attributes of a column in a \n\u003ccode\u003eJTable\u003c/code\u003e, such as width, resizability, minimum and maximum width. In addition, the \n\u003ccode\u003eTableColumn\u003c/code\u003e provides slots for a renderer and an editor that can be used to display and edit the values in this column. \n\u003cp\u003e It is also possible to specify renderers and editors on a per type basis rather than a per column basis - see the \u003ccode\u003esetDefaultRenderer\u003c/code\u003e method in the \u003ccode\u003eJTable\u003c/code\u003e class. This default mechanism is only used when the renderer (or editor) in the \u003ccode\u003eTableColumn\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eTableColumn\u003c/code\u003e stores the link between the columns in the \u003ccode\u003eJTable\u003c/code\u003e and the columns in the \u003ccode\u003eTableModel\u003c/code\u003e. The \u003ccode\u003emodelIndex\u003c/code\u003e is the column in the \u003ccode\u003eTableModel\u003c/code\u003e, which will be queried for the data values for the cells in this column. As the column moves around in the view this \u003ccode\u003emodelIndex\u003c/code\u003e does not change. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e Some implementations may assume that all \u003ccode\u003eTableColumnModel\u003c/code\u003es are unique, therefore we would recommend that the same \u003ccode\u003eTableColumn\u003c/code\u003e instance not be added more than once to a \u003ccode\u003eTableColumnModel\u003c/code\u003e. To show \u003ccode\u003eTableColumn\u003c/code\u003es with the same column of data from the model, create a new instance with the same \u003ccode\u003emodelIndex\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumnModel.html\" title\u003d\"interface in javax.swing.table\"\u003e\u003ccode\u003eTableColumnModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableColumnModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableColumnModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/JTableHeader.html#getDefaultRenderer()\"\u003e\u003ccode\u003eJTableHeader.getDefaultRenderer()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDefaultRenderer(java.lang.Class)\"\u003e\u003ccode\u003eJTable.getDefaultRenderer(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDefaultEditor(java.lang.Class)\"\u003e\u003ccode\u003eJTable.getDefaultEditor(Class)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getCellRenderer(int,int)\"\u003e\u003ccode\u003eJTable.getCellRenderer(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getCellEditor(int,int)\"\u003e\u003ccode\u003eJTable.getCellEditor(int, int)\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}