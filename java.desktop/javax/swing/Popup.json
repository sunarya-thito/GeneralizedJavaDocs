{
  "packageName": "javax.swing",
  "simpleName": "Popup",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "show",
      "comment": "Makes the Popup visible. If the Popup is currently visible, this has no effect.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hide",
      "comment": "Hides and disposes of the Popup. Once a Popup has been disposed you should no longer invoke methods on it. A disposed Popup may be reclaimed and later used based on the PopupFactory. As such, if you invoke methods on a disposed Popup, indeterminate behavior will result.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "owner"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "contents"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a Popup for the Component owner containing the Component contents. owner is used to determine which Window the new Popup will parent the Component the Popup creates to. A null owner implies there is no valid parent. x and y specify the preferred initial location to place the Popup at. Based on screen size, or other paramaters, the Popup may not display at x and y.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - Component mouse coordinates are relative to, may be null",
          "\u003ccode\u003econtents\u003c/code\u003e - Contents of the Popup",
          "\u003ccode\u003ex\u003c/code\u003e - Initial x screen coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - Initial y screen coordinate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if contents is null"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a Popup. This is provided for subclasses.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.Popup",
  "comment": "Popups are used to display a \n\u003ccode\u003eComponent\u003c/code\u003e to the user, typically on top of all the other \n\u003ccode\u003eComponent\u003c/code\u003es in a particular containment hierarchy. \n\u003ccode\u003ePopup\u003c/code\u003es have a very small life cycle. Once you have obtained a \n\u003ccode\u003ePopup\u003c/code\u003e, and hidden it (invoked the \n\u003ccode\u003ehide\u003c/code\u003e method), you should no longer invoke any methods on it. This allows the \n\u003ccode\u003ePopupFactory\u003c/code\u003e to cache \n\u003ccode\u003ePopup\u003c/code\u003es for later use. \n\u003cp\u003e The general contract is that if you need to change the size of the \u003ccode\u003eComponent\u003c/code\u003e, or location of the \u003ccode\u003ePopup\u003c/code\u003e, you should obtain a new \u003ccode\u003ePopup\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003ePopup\u003c/code\u003e does not descend from \u003ccode\u003eComponent\u003c/code\u003e, rather implementations of \u003ccode\u003ePopup\u003c/code\u003e are responsible for creating and maintaining their own \u003ccode\u003eComponent\u003c/code\u003es to render the requested \u003ccode\u003eComponent\u003c/code\u003e to the user. \u003c/p\u003e\n\u003cp\u003e You typically do not explicitly create an instance of \u003ccode\u003ePopup\u003c/code\u003e, instead obtain one from a \u003ccode\u003ePopupFactory\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/PopupFactory.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003ePopupFactory\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}