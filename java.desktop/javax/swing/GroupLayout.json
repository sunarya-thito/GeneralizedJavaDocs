{
  "packageName": "javax.swing",
  "simpleName": "GroupLayout",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_SIZE",
      "comment": "Indicates the size from the component or gap should be used for a particular range value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eGroupLayout.Group\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.GroupLayout.DEFAULT_SIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PREFERRED_SIZE",
      "comment": "Indicates the preferred size from the component or gap should be used for a particular range value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eGroupLayout.Group\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.GroupLayout.PREFERRED_SIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "honorsVisibility",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHonorsVisibility",
      "comment": "Sets whether component visibility is considered when sizing and positioning components. A value of true indicates that non-visible components should not be treated as part of the layout. A value of false indicates that components should be positioned and sized regardless of visibility. A value of false is useful when the visibility of components is dynamically adjusted and you don\u0027t want surrounding components and the sizing to change. The specified value is used for components that do not have an explicit visibility specified. The default is true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#setHonorsVisibility(java.awt.Component,java.lang.Boolean)\"\u003e\u003ccode\u003esetHonorsVisibility(Component,Boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehonorsVisibility\u003c/code\u003e - whether component visibility is considered when sizing and positioning components"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHonorsVisibility",
      "comment": "Returns whether component visibility is considered when sizing and positioning components.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether component visibility is considered when sizing and positioning components"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "name": "honorsVisibility",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHonorsVisibility",
      "comment": "Sets whether the component\u0027s visibility is considered for sizing and positioning. A value of Boolean.TRUE indicates that if component is not visible it should not be treated as part of the layout. A value of false indicates that component is positioned and sized regardless of its visibility. A value of null indicates the value specified by the single argument method setHonorsVisibility should be used. If component is not a child of the Container this GroupLayout is managing, it will be added to the Container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#setHonorsVisibility(java.awt.Component,java.lang.Boolean)\"\u003e\u003ccode\u003esetHonorsVisibility(Component,Boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the component",
          "\u003ccode\u003ehonorsVisibility\u003c/code\u003e - whether visibility of this \n\u003ccode\u003ecomponent\u003c/code\u003e should be considered for sizing and positioning"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecomponent\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "autoCreatePadding",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoCreateGaps",
      "comment": "Sets whether a gap between components should automatically be created. For example, if this is true and you add two components to a SequentialGroup a gap between the two components is automatically be created. The default is false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eautoCreatePadding\u003c/code\u003e - whether a gap between components is automatically created"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoCreateGaps",
      "comment": "Returns true if gaps between components are automatically created.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if gaps between components are automatically created"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "autoCreateContainerPadding",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoCreateContainerGaps",
      "comment": "Sets whether a gap between the container and components that touch the border of the container should automatically be created. The default is false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eautoCreateContainerPadding\u003c/code\u003e - whether a gap between the container and components that touch the border of the container should automatically be created"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoCreateContainerGaps",
      "comment": "Returns true if gaps between the container and components that border the container are automatically created.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if gaps between the container and components that border the container are automatically created"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Group",
            "type": "Class"
          },
          "name": "group",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHorizontalGroup",
      "comment": "Sets the Group that positions and sizes components along the horizontal axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the \n\u003ccode\u003eGroup\u003c/code\u003e that positions and sizes components along the horizontal axis"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if group is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Group",
            "type": "Class"
          },
          "name": "group",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVerticalGroup",
      "comment": "Sets the Group that positions and sizes components along the vertical axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the \n\u003ccode\u003eGroup\u003c/code\u003e that positions and sizes components along the vertical axis"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if group is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$SequentialGroup",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createSequentialGroup",
      "comment": "Creates and returns a SequentialGroup.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a new \n\u003ccode\u003eSequentialGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createParallelGroup",
      "comment": "Creates and returns a ParallelGroup with an alignment of Alignment.LEADING. This is a cover method for the more general createParallelGroup(Alignment) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#createParallelGroup(javax.swing.GroupLayout.Alignment)\"\u003e\u003ccode\u003ecreateParallelGroup(Alignment)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eParallelGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Alignment",
            "type": "Class"
          },
          "name": "alignment",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createParallelGroup",
      "comment": "Creates and returns a ParallelGroup with the specified alignment. This is a cover method for the more general createParallelGroup(Alignment,boolean) method with true supplied for the second argument.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#createBaselineGroup(boolean,boolean)\"\u003e\u003ccode\u003ecreateBaselineGroup(boolean, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.ParallelGroup.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eGroupLayout.ParallelGroup\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment for the elements of the group"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealignment\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eParallelGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.GroupLayout$Alignment",
            "type": "Class"
          },
          "name": "alignment",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "resizable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createParallelGroup",
      "comment": "Creates and returns a ParallelGroup with the specified alignment and resize behavior. The alignment argument specifies how children elements are positioned that do not fill the group. For example, if a ParallelGroup with an alignment of TRAILING is given 100 and a child only needs 50, the child is positioned at the position 50 (with a component orientation of left-to-right). Baseline alignment is only useful when used along the vertical axis. A ParallelGroup created with a baseline alignment along the horizontal axis is treated as LEADING. Refer to ParallelGroup for details on the behavior of baseline groups.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#createBaselineGroup(boolean,boolean)\"\u003e\u003ccode\u003ecreateBaselineGroup(boolean, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.ParallelGroup.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eGroupLayout.ParallelGroup\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment for the elements of the group",
          "\u003ccode\u003eresizable\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the group is resizable; if the group is not resizable the preferred size is used for the minimum and maximum size of the group"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealignment\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eParallelGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.GroupLayout$ParallelGroup",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "resizable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "anchorBaselineToTop",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBaselineGroup",
      "comment": "Creates and returns a ParallelGroup that aligns its elements along the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#createBaselineGroup(boolean,boolean)\"\u003e\u003ccode\u003ecreateBaselineGroup(boolean, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.ParallelGroup.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eGroupLayout.ParallelGroup\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eresizable\u003c/code\u003e - whether the group is resizable",
          "\u003ccode\u003eanchorBaselineToTop\u003c/code\u003e - whether the baseline is anchored to the top or bottom of the group"
        ],
        "return": [
          "the \n\u003ccode\u003eParallelGroup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "components",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "linkSize",
      "comment": "Forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes. Components that are linked are given the maximum of the preferred size of each of the linked components. For example, if you link two components with a preferred width of 10 and 20, both components are given a width of 20. This can be used multiple times to force any number of components to share the same size. Linked Components are not be resizable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/GroupLayout.html#linkSize(int,java.awt.Component...)\"\u003e\u003ccode\u003elinkSize(int,Component[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponents\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003es that are to have the same size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecomponents\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or contains \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "components",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "linkSize",
      "comment": "Forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes. Components that are linked are given the maximum of the preferred size of each of the linked components. For example, if you link two components along the horizontal axis and the preferred width is 10 and 20, both components are given a width of 20. This can be used multiple times to force any number of components to share the same size. Linked Components are not be resizable.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis to link the size along; one of \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e",
          "\u003ccode\u003ecomponents\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003es that are to have the same size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecomponents\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or contains \n\u003ccode\u003enull\u003c/code\u003e; or \n\u003ccode\u003eaxis\u003c/code\u003e is not \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "existingComponent",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "newComponent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Replaces an existing component with a new one.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexistingComponent\u003c/code\u003e - the component that should be removed and replaced with \n\u003ccode\u003enewComponent\u003c/code\u003e",
          "\u003ccode\u003enewComponent\u003c/code\u003e - the component to put in \n\u003ccode\u003eexistingComponent\u003c/code\u003e\u0027s place"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either of the components are \n\u003ccode\u003enull\u003c/code\u003e or \n\u003ccode\u003eexistingComponent\u003c/code\u003e is not being managed by this layout manager"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.LayoutStyle",
            "type": "Class"
          },
          "name": "layoutStyle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLayoutStyle",
      "comment": "Sets the LayoutStyle used to calculate the preferred gaps between components. A value of null indicates the shared instance of LayoutStyle should be used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LayoutStyle.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eLayoutStyle\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elayoutStyle\u003c/code\u003e - the \n\u003ccode\u003eLayoutStyle\u003c/code\u003e to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.LayoutStyle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutStyle",
      "comment": "Returns the LayoutStyle used for calculating the preferred gap between components. This returns the value specified to setLayoutStyle, which may be null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eLayoutStyle\u003c/code\u003e used for calculating the preferred gap between components"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addLayoutComponent",
      "comment": "Notification that a Component has been added to the parent container. You should not invoke this method directly, instead you should use one of the Group methods to add a Component.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#addLayoutComponent(java.lang.String,java.awt.Component)\"\u003eaddLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the string to be associated with the component",
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeLayoutComponent",
      "comment": "Notification that a Component has been removed from the parent container. You should not invoke this method directly, instead invoke remove on the parent Container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#remove(java.awt.MenuComponent)\"\u003e\u003ccode\u003eComponent.remove(java.awt.MenuComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#removeLayoutComponent(java.awt.Component)\"\u003eremoveLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the component to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferredLayoutSize",
      "comment": "Returns the preferred size for the specified container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getPreferredSize()\"\u003e\u003ccode\u003eContainer.getPreferredSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003epreferredLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container to return the preferred size for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is not the same \n\u003ccode\u003eContainer\u003c/code\u003e this was created with",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if any of the components added to this layout are not in both a horizontal and vertical group"
        ],
        "return": [
          "the preferred size for \n\u003ccode\u003eparent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minimumLayoutSize",
      "comment": "Returns the minimum size for the specified container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getMinimumSize()\"\u003e\u003ccode\u003eContainer.getMinimumSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)\"\u003eminimumLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container to return the size for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is not the same \n\u003ccode\u003eContainer\u003c/code\u003e that this was created with",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if any of the components added to this layout are not in both a horizontal and vertical group"
        ],
        "return": [
          "the minimum size for \n\u003ccode\u003eparent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layoutContainer",
      "comment": "Lays out the specified container.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#layoutContainer(java.awt.Container)\"\u003elayoutContainer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container to be laid out"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if any of the components added to this layout are not in both a horizontal and vertical group"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "component",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "constraints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addLayoutComponent",
      "comment": "Notification that a Component has been added to the parent container. You should not invoke this method directly, instead you should use one of the Group methods to add a Component.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#addLayoutComponent(java.awt.Component,java.lang.Object)\"\u003eaddLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the component added",
          "\u003ccode\u003econstraints\u003c/code\u003e - description of where to place the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "maximumLayoutSize",
      "comment": "Returns the maximum size for the specified container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getMaximumSize()\"\u003e\u003ccode\u003eContainer.getMaximumSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#maximumLayoutSize(java.awt.Container)\"\u003emaximumLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container to return the size for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is not the same \n\u003ccode\u003eContainer\u003c/code\u003e that this was created with",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if any of the components added to this layout are not in both a horizontal and vertical group"
        ],
        "return": [
          "the maximum size for \n\u003ccode\u003eparent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutAlignmentX",
      "comment": "Returns the alignment along the x axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#getLayoutAlignmentX(java.awt.Container)\"\u003egetLayoutAlignmentX\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the \n\u003ccode\u003eContainer\u003c/code\u003e hosting this \n\u003ccode\u003eLayoutManager\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is not the same \n\u003ccode\u003eContainer\u003c/code\u003e that this was created with"
        ],
        "return": [
          "the alignment; this implementation returns \n\u003ccode\u003e.5\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutAlignmentY",
      "comment": "Returns the alignment along the y axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#getLayoutAlignmentY(java.awt.Container)\"\u003egetLayoutAlignmentY\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the \n\u003ccode\u003eContainer\u003c/code\u003e hosting this \n\u003ccode\u003eLayoutManager\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is not the same \n\u003ccode\u003eContainer\u003c/code\u003e that this was created with"
        ],
        "return": [
          "alignment; this implementation returns \n\u003ccode\u003e.5\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invalidateLayout",
      "comment": "Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#invalidateLayout(java.awt.Container)\"\u003einvalidateLayout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the \n\u003ccode\u003eContainer\u003c/code\u003e hosting this LayoutManager"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparent\u003c/code\u003e is not the same \n\u003ccode\u003eContainer\u003c/code\u003e that this was created with"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this GroupLayout. This method is intended to be used for debugging purposes, and the content and format of the returned string may vary between implementations.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eGroupLayout\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "host",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a GroupLayout for the specified Container.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehost\u003c/code\u003e - the \n\u003ccode\u003eContainer\u003c/code\u003e the \n\u003ccode\u003eGroupLayout\u003c/code\u003e is the \n\u003ccode\u003eLayoutManager\u003c/code\u003e for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if host is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.GroupLayout$SequentialGroup",
    "javax.swing.GroupLayout$Alignment",
    "javax.swing.GroupLayout$Group",
    "javax.swing.GroupLayout$ParallelGroup"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.GroupLayout",
  "comment": "\u003ccode\u003eGroupLayout\u003c/code\u003e is a \n\u003ccode\u003eLayoutManager\u003c/code\u003e that hierarchically groups components in order to position them in a \n\u003ccode\u003eContainer\u003c/code\u003e. \n\u003ccode\u003eGroupLayout\u003c/code\u003e is intended for use by builders, but may be hand-coded as well. Grouping is done by instances of the \n\u003ca href\u003d\"GroupLayout.Group.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eGroup\u003c/code\u003e\u003c/a\u003e class. \n\u003ccode\u003e GroupLayout\u003c/code\u003e supports two types of groups. A sequential group positions its child elements sequentially, one after another. A parallel group aligns its child elements in one of four ways. \n\u003cp\u003e Each group may contain any number of elements, where an element is a \u003ccode\u003eGroup\u003c/code\u003e, \u003ccode\u003eComponent\u003c/code\u003e, or gap. A gap can be thought of as an invisible component with a minimum, preferred and maximum size. In addition \u003ccode\u003eGroupLayout\u003c/code\u003e supports a preferred gap, whose value comes from \u003ccode\u003eLayoutStyle\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Elements are similar to a spring. Each element has a range as specified by a minimum, preferred and maximum. Gaps have either a developer-specified range, or a range determined by \u003ccode\u003e LayoutStyle\u003c/code\u003e. The range for \u003ccode\u003eComponent\u003c/code\u003es is determined from the \u003ccode\u003eComponent\u003c/code\u003e\u0027s \u003ccode\u003egetMinimumSize\u003c/code\u003e, \u003ccode\u003e getPreferredSize\u003c/code\u003e and \u003ccode\u003egetMaximumSize\u003c/code\u003e methods. In addition, when adding \u003ccode\u003eComponent\u003c/code\u003es you may specify a particular range to use instead of that from the component. The range for a \u003ccode\u003e Group\u003c/code\u003e is determined by the type of group. A \u003ccode\u003eParallelGroup\u003c/code\u003e\u0027s range is the maximum of the ranges of its elements. A \u003ccode\u003e SequentialGroup\u003c/code\u003e\u0027s range is the sum of the ranges of its elements. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eGroupLayout\u003c/code\u003e treats each axis independently. That is, there is a group representing the horizontal axis, and a group representing the vertical axis. The horizontal group is responsible for determining the minimum, preferred and maximum size along the horizontal axis as well as setting the x and width of the components contained in it. The vertical group is responsible for determining the minimum, preferred and maximum size along the vertical axis as well as setting the y and height of the components contained in it. Each \u003ccode\u003eComponent\u003c/code\u003e must exist in both a horizontal and vertical group, otherwise an \u003ccode\u003eIllegalStateException\u003c/code\u003e is thrown during layout, or when the minimum, preferred or maximum size is requested. \u003c/p\u003e\n\u003cp\u003e The following diagram shows a sequential group along the horizontal axis. The sequential group contains three components. A parallel group was used along the vertical axis. \u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e \u003cimg src\u003d\"doc-files/groupLayout.1.gif\" alt\u003d\"Sequential group along the horizontal axis in three components\"\u003e \u003c/p\u003e\n\u003cp\u003e To reinforce that each axis is treated independently the diagram shows the range of each group and element along each axis. The range of each component has been projected onto the axes, and the groups are rendered in blue (horizontal) and red (vertical). For readability there is a gap between each of the elements in the sequential group. \u003c/p\u003e\n\u003cp\u003e The sequential group along the horizontal axis is rendered as a solid blue line. Notice the sequential group is the sum of the children elements it contains. \u003c/p\u003e\n\u003cp\u003e Along the vertical axis the parallel group is the maximum of the height of each of the components. As all three components have the same height, the parallel group has the same height. \u003c/p\u003e\n\u003cp\u003e The following diagram shows the same three components, but with the parallel group along the horizontal axis and the sequential group along the vertical axis. \u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e \u003cimg src\u003d\"doc-files/groupLayout.2.gif\" alt\u003d\"Sequential group along the vertical axis in three components\"\u003e \u003c/p\u003e\n\u003cp\u003e As \u003ccode\u003ec1\u003c/code\u003e is the largest of the three components, the parallel group is sized to \u003ccode\u003ec1\u003c/code\u003e. As \u003ccode\u003ec2\u003c/code\u003e and \u003ccode\u003ec3\u003c/code\u003e are smaller than \u003ccode\u003ec1\u003c/code\u003e they are aligned based on the alignment specified for the component (if specified) or the default alignment of the parallel group. In the diagram \u003ccode\u003ec2\u003c/code\u003e and \u003ccode\u003ec3\u003c/code\u003e were created with an alignment of \u003ccode\u003eLEADING\u003c/code\u003e. If the component orientation were right-to-left then \u003ccode\u003ec2\u003c/code\u003e and \u003ccode\u003ec3\u003c/code\u003e would be positioned on the opposite side. \u003c/p\u003e\n\u003cp\u003e The following diagram shows a sequential group along both the horizontal and vertical axis. \u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e \u003cimg src\u003d\"doc-files/groupLayout.3.gif\" alt\u003d\"Sequential group along both the horizontal and vertical axis in three components\"\u003e \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eGroupLayout\u003c/code\u003e provides the ability to insert gaps between \u003ccode\u003eComponent\u003c/code\u003es. The size of the gap is determined by an instance of \u003ccode\u003eLayoutStyle\u003c/code\u003e. This may be turned on using the \u003ccode\u003esetAutoCreateGaps\u003c/code\u003e method. Similarly, you may use the \u003ccode\u003esetAutoCreateContainerGaps\u003c/code\u003e method to insert gaps between components that touch the edge of the parent container and the container. \u003c/p\u003e\n\u003cp\u003e The following builds a panel consisting of two labels in one column, followed by two textfields in the next column: \u003c/p\u003e\n\u003cpre\u003e   JComponent panel \u003d ...;\n   GroupLayout layout \u003d new GroupLayout(panel);\n   panel.setLayout(layout);\n\n   // Turn on automatically adding gaps between components\n   layout.setAutoCreateGaps(true);\n\n   // Turn on automatically creating gaps between components that touch\n   // the edge of the container and the container.\n   layout.setAutoCreateContainerGaps(true);\n\n   // Create a sequential group for the horizontal axis.\n\n   GroupLayout.SequentialGroup hGroup \u003d layout.createSequentialGroup();\n\n   // The sequential group in turn contains two parallel groups.\n   // One parallel group contains the labels, the other the text fields.\n   // Putting the labels in a parallel group along the horizontal axis\n   // positions them at the same x location.\n   //\n   // Variable indentation is used to reinforce the level of grouping.\n   hGroup.addGroup(layout.createParallelGroup().\n            addComponent(label1).addComponent(label2));\n   hGroup.addGroup(layout.createParallelGroup().\n            addComponent(tf1).addComponent(tf2));\n   layout.setHorizontalGroup(hGroup);\n\n   // Create a sequential group for the vertical axis.\n   GroupLayout.SequentialGroup vGroup \u003d layout.createSequentialGroup();\n\n   // The sequential group contains two parallel groups that align\n   // the contents along the baseline. The first parallel group contains\n   // the first label and text field, and the second parallel group contains\n   // the second label and text field. By using a sequential group\n   // the labels and text fields are positioned vertically after one another.\n   vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).\n            addComponent(label1).addComponent(tf1));\n   vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).\n            addComponent(label2).addComponent(tf2));\n   layout.setVerticalGroup(vGroup);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e When run the following is produced. \u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e \u003cimg src\u003d\"doc-files/groupLayout.example.png\" alt\u003d\"Produced horizontal/vertical form\"\u003e \u003c/p\u003e\n\u003cp\u003e This layout consists of the following. \u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003eThe horizontal axis consists of a sequential group containing two parallel groups. The first parallel group contains the labels, and the second parallel group contains the text fields. \u003c/li\u003e\n \u003cli\u003eThe vertical axis consists of a sequential group containing two parallel groups. The parallel groups are configured to align their components along the baseline. The first parallel group contains the first label and first text field, and the second group consists of the second label and second text field. \u003c/li\u003e\n\u003c/ul\u003e There are a couple of things to notice in this code: \n\u003cul\u003e \n \u003cli\u003eYou need not explicitly add the components to the container; this is indirectly done by using one of the \u003ccode\u003eadd\u003c/code\u003e methods of \u003ccode\u003eGroup\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eThe various \u003ccode\u003eadd\u003c/code\u003e methods return the caller. This allows for easy chaining of invocations. For example, \u003ccode\u003egroup.addComponent(label1).addComponent(label2);\u003c/code\u003e is equivalent to \u003ccode\u003egroup.addComponent(label1); group.addComponent(label2);\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eThere are no public constructors for \u003ccode\u003eGroup\u003c/code\u003es; instead use the create methods of \u003ccode\u003eGroupLayout\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}