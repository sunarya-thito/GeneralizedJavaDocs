{
  "packageName": "javax.swing",
  "simpleName": "JTable",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUTO_RESIZE_OFF",
      "comment": "Do not adjust column widths automatically; use a horizontal scrollbar instead.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTable.AUTO_RESIZE_OFF\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUTO_RESIZE_NEXT_COLUMN",
      "comment": "When a column is adjusted in the UI, adjust the next column the opposite way.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUTO_RESIZE_SUBSEQUENT_COLUMNS",
      "comment": "During UI adjustment, change subsequent columns to preserve the total width; this is the default behavior.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUTO_RESIZE_LAST_COLUMN",
      "comment": "During all resize operations, apply adjustments to the last column only.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUTO_RESIZE_ALL_COLUMNS",
      "comment": "During all resize operations, proportionately resize all columns.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.table.TableModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dataModel",
      "comment": "The TableModel of the table.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.table.TableColumnModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "columnModel",
      "comment": "The TableColumnModel of the table.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.ListSelectionModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "selectionModel",
      "comment": "The ListSelectionModel of the table, used to keep track of row selections.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.table.JTableHeader",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "tableHeader",
      "comment": "The TableHeader working with the table.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rowHeight",
      "comment": "The height in pixels of each row in the table.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rowMargin",
      "comment": "The height in pixels of the margin between the cells in each row.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "gridColor",
      "comment": "The color of the grid.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "showHorizontalLines",
      "comment": "The table draws horizontal lines between cells if showHorizontalLines is true.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "showVerticalLines",
      "comment": "The table draws vertical lines between cells if showVerticalLines is true.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "autoResizeMode",
      "comment": "Determines if the table automatically resizes the width of the table\u0027s columns to take up the entire width of the table, and how it does the resizing.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "autoCreateColumnsFromModel",
      "comment": "The table will query the TableModel to build the default set of columns if this is true.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "preferredViewportSize",
      "comment": "Used by the Scrollable interface to determine the initial visible area.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rowSelectionAllowed",
      "comment": "True if row selection is allowed in this table.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cellSelectionEnabled",
      "comment": "Obsolete as of Java 2 platform v1.3. Please use the rowSelectionAllowed property and the columnSelectionAllowed property of the columnModel instead. Or use the method getCellSelectionEnabled.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "editorComp",
      "comment": "If editing, the Component that is handling the editing.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.table.TableCellEditor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "cellEditor",
      "comment": "The active cell editor object, that overwrites the screen real estate occupied by the current cell and allows the user to change its contents. null if the table isn\u0027t currently editing.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "editingColumn",
      "comment": "Identifies the column of the cell being edited.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "editingRow",
      "comment": "Identifies the row of the cell being edited.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "defaultRenderersByColumnClass",
      "comment": "A table of objects that display the contents of a cell, indexed by class as declared in getColumnClass in the TableModel interface.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "defaultEditorsByColumnClass",
      "comment": "A table of objects that display and edit the contents of a cell, indexed by class as declared in getColumnClass in the TableModel interface.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "selectionForeground",
      "comment": "The foreground color of selected cells.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "selectionBackground",
      "comment": "The background color of selected cells.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addNotify",
      "comment": "Calls the configureEnclosingScrollPane method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#configureEnclosingScrollPane()\"\u003e\u003ccode\u003econfigureEnclosingScrollPane()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#addNotify()\"\u003eaddNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "configureEnclosingScrollPane",
      "comment": "If this JTable is the viewportView of an enclosing JScrollPane (the usual situation), configure this ScrollPane by, amongst other things, installing the table\u0027s tableHeader as the columnHeaderView of the scroll pane. When a JTable is added to a JScrollPane in the usual way, using new JScrollPane(myTable), addNotify is called in the JTable (when the table is added to the viewport). JTable\u0027s addNotify method in turn calls this method, which is protected so that this default installation procedure can be overridden by a subclass.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#addNotify()\"\u003e\u003ccode\u003eaddNotify()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotify",
      "comment": "Calls the unconfigureEnclosingScrollPane method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#unconfigureEnclosingScrollPane()\"\u003e\u003ccode\u003eunconfigureEnclosingScrollPane()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#removeNotify()\"\u003eremoveNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "unconfigureEnclosingScrollPane",
      "comment": "Reverses the effect of configureEnclosingScrollPane by replacing the columnHeaderView of the enclosing scroll pane with null. JTable\u0027s removeNotify method calls this method, which is protected so that this default uninstallation procedure can be overridden by a subclass.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#removeNotify()\"\u003e\u003ccode\u003eremoveNotify()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#configureEnclosingScrollPane()\"\u003e\u003ccode\u003econfigureEnclosingScrollPane()\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JScrollPane",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable",
            "type": "Class"
          },
          "field": {
            "name": "aTable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createScrollPaneForTable",
      "comment": "Equivalent to new JScrollPane(aTable).",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaTable\u003c/code\u003e - a \n\u003ccode\u003eJTable\u003c/code\u003e to be used for the scroll pane"
        ],
        "return": [
          "a \n\u003ccode\u003eJScrollPane\u003c/code\u003e created using \n\u003ccode\u003eaTable\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.JTableHeader",
            "type": "Class"
          },
          "field": {
            "name": "tableHeader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTableHeader",
      "comment": "Sets the tableHeader working with this JTable to newHeader. It is legal to have a null tableHeader.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The JTableHeader instance which renders the column headers."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getTableHeader()\"\u003e\u003ccode\u003egetTableHeader()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etableHeader\u003c/code\u003e - new tableHeader"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.JTableHeader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTableHeader",
      "comment": "Returns the tableHeader used by this JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setTableHeader(javax.swing.table.JTableHeader)\"\u003e\u003ccode\u003esetTableHeader(javax.swing.table.JTableHeader)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003etableHeader\u003c/code\u003e used by this table"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowHeight",
      "comment": "Sets the height, in pixels, of all cells to rowHeight, revalidates, and repaints. The height of the cells will be equal to the row height minus the row margin.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The height of the specified row."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getRowHeight()\"\u003e\u003ccode\u003egetRowHeight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erowHeight\u003c/code\u003e - new row height"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erowHeight\u003c/code\u003e is less than 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowHeight",
      "comment": "Returns the height of a table row, in pixels.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setRowHeight(int)\"\u003e\u003ccode\u003esetRowHeight(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the height in pixels of a table row"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowHeight",
      "comment": "Sets the height for row to rowHeight, revalidates, and repaints. The height of the cells in this row will be equal to the row height minus the row margin.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The height in pixels of the cells in \u003ccode\u003erow\u003c/code\u003e"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row whose height is being changed",
          "\u003ccode\u003erowHeight\u003c/code\u003e - new row height, in pixels"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erowHeight\u003c/code\u003e is less than 1"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowHeight",
      "comment": "Returns the height, in pixels, of the cells in row.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row whose height is to be returned"
        ],
        "return": [
          "the height, in pixels, of the cells in the row"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowMargin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowMargin",
      "comment": "Sets the amount of empty space between cells in adjacent rows.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The amount of space between cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getRowMargin()\"\u003e\u003ccode\u003egetRowMargin()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erowMargin\u003c/code\u003e - the number of pixels between cells in a row"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowMargin",
      "comment": "Gets the amount of empty space, in pixels, between cells. Equivalent to: getIntercellSpacing().height.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setRowMargin(int)\"\u003e\u003ccode\u003esetRowMargin(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of pixels between cells in a row"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "intercellSpacing"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIntercellSpacing",
      "comment": "Sets the rowMargin and the columnMargin -- the height and width of the space between cells -- to intercellSpacing.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "The spacing between the cells, drawn in the background color of the JTable."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getIntercellSpacing()\"\u003e\u003ccode\u003egetIntercellSpacing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eintercellSpacing\u003c/code\u003e - a \n\u003ccode\u003eDimension\u003c/code\u003e specifying the new width and height between cells"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIntercellSpacing",
      "comment": "Returns the horizontal and vertical space between cells. The default spacing is look and feel dependent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setIntercellSpacing(java.awt.Dimension)\"\u003e\u003ccode\u003esetIntercellSpacing(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the horizontal and vertical spacing between cells"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "gridColor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGridColor",
      "comment": "Sets the color used to draw grid lines to gridColor and redisplays. The default color is look and feel dependent.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The grid color."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getGridColor()\"\u003e\u003ccode\u003egetGridColor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003egridColor\u003c/code\u003e - the new color of the grid lines"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003egridColor\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGridColor",
      "comment": "Returns the color used to draw grid lines. The default color is look and feel dependent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setGridColor(java.awt.Color)\"\u003e\u003ccode\u003esetGridColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the color used to draw grid lines"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showGrid"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShowGrid",
      "comment": "Sets whether the table draws grid lines around cells. If showGrid is true it does; if it is false it doesn\u0027t. There is no getShowGrid method as this state is held in two variables -- showHorizontalLines and showVerticalLines -- each of which can be queried independently.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The color used to draw the grid lines."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowVerticalLines(boolean)\"\u003e\u003ccode\u003esetShowVerticalLines(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowHorizontalLines(boolean)\"\u003e\u003ccode\u003esetShowHorizontalLines(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eshowGrid\u003c/code\u003e - true if table view should draw grid lines"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showHorizontalLines"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShowHorizontalLines",
      "comment": "Sets whether the table draws horizontal lines between cells. If showHorizontalLines is true it does; if it is false it doesn\u0027t.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether horizontal lines should be drawn in between the cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getShowHorizontalLines()\"\u003e\u003ccode\u003egetShowHorizontalLines()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowGrid(boolean)\"\u003e\u003ccode\u003esetShowGrid(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowVerticalLines(boolean)\"\u003e\u003ccode\u003esetShowVerticalLines(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eshowHorizontalLines\u003c/code\u003e - true if table view should draw horizontal lines"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showVerticalLines"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShowVerticalLines",
      "comment": "Sets whether the table draws vertical lines between cells. If showVerticalLines is true it does; if it is false it doesn\u0027t.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether vertical lines should be drawn in between the cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getShowVerticalLines()\"\u003e\u003ccode\u003egetShowVerticalLines()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowGrid(boolean)\"\u003e\u003ccode\u003esetShowGrid(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowHorizontalLines(boolean)\"\u003e\u003ccode\u003esetShowHorizontalLines(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eshowVerticalLines\u003c/code\u003e - true if table view should draw vertical lines"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getShowHorizontalLines",
      "comment": "Returns true if the table draws horizontal lines between cells, false if it doesn\u0027t. The default value is look and feel dependent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowHorizontalLines(boolean)\"\u003e\u003ccode\u003esetShowHorizontalLines(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the table draws horizontal lines between cells, false if it doesn\u0027t"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getShowVerticalLines",
      "comment": "Returns true if the table draws vertical lines between cells, false if it doesn\u0027t. The default value is look and feel dependent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setShowVerticalLines(boolean)\"\u003e\u003ccode\u003esetShowVerticalLines(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the table draws vertical lines between cells, false if it doesn\u0027t"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoResizeMode",
      "comment": "Sets the table\u0027s auto resize mode when the table is resized. For further information on how the different resize modes work, see doLayout().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "enumerationValues",
              "value": [
                "JTable.AUTO_RESIZE_OFF",
                "JTable.AUTO_RESIZE_NEXT_COLUMN",
                "JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS",
                "JTable.AUTO_RESIZE_LAST_COLUMN",
                "JTable.AUTO_RESIZE_ALL_COLUMNS"
              ]
            },
            {
              "name": "escription",
              "value": "Whether the columns should adjust themselves automatically."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getAutoResizeMode()\"\u003e\u003ccode\u003egetAutoResizeMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#doLayout()\"\u003e\u003ccode\u003edoLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emode\u003c/code\u003e - One of 5 legal values: AUTO_RESIZE_OFF, AUTO_RESIZE_NEXT_COLUMN, AUTO_RESIZE_SUBSEQUENT_COLUMNS, AUTO_RESIZE_LAST_COLUMN, AUTO_RESIZE_ALL_COLUMNS"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoResizeMode",
      "comment": "Returns the auto resize mode of the table. The default mode is AUTO_RESIZE_SUBSEQUENT_COLUMNS.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setAutoResizeMode(int)\"\u003e\u003ccode\u003esetAutoResizeMode(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#doLayout()\"\u003e\u003ccode\u003edoLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the autoResizeMode of the table"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoCreateColumnsFromModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoCreateColumnsFromModel",
      "comment": "Sets this table\u0027s autoCreateColumnsFromModel flag. This method calls createDefaultColumnsFromModel if autoCreateColumnsFromModel changes from false to true.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Automatically populates the columnModel when a new TableModel is submitted."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getAutoCreateColumnsFromModel()\"\u003e\u003ccode\u003egetAutoCreateColumnsFromModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultColumnsFromModel()\"\u003e\u003ccode\u003ecreateDefaultColumnsFromModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eautoCreateColumnsFromModel\u003c/code\u003e - true if \n\u003ccode\u003eJTable\u003c/code\u003e should automatically create columns"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoCreateColumnsFromModel",
      "comment": "Determines whether the table will create default columns from the model. If true, setModel will clear any existing columns and create new columns from the new model. Also, if the event in the tableChanged notification specifies that the entire table changed, then the columns will be rebuilt. The default is true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setAutoCreateColumnsFromModel(boolean)\"\u003e\u003ccode\u003esetAutoCreateColumnsFromModel(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultColumnsFromModel()\"\u003e\u003ccode\u003ecreateDefaultColumnsFromModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the autoCreateColumnsFromModel of the table"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createDefaultColumnsFromModel",
      "comment": "Creates default columns for the table from the data model using the getColumnCount method defined in the TableModel interface. Clears any existing columns before creating the new columns based on information from the model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getAutoCreateColumnsFromModel()\"\u003e\u003ccode\u003egetAutoCreateColumnsFromModel()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "columnClass"
          }
        },
        {
          "type": {
            "name": "javax.swing.table.TableCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "renderer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultRenderer",
      "comment": "Sets a default cell renderer to be used if no renderer has been set in a TableColumn. If renderer is null, removes the default renderer for this column class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDefaultRenderer(java.lang.Class)\"\u003e\u003ccode\u003egetDefaultRenderer(java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultEditor(java.lang.Class,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003esetDefaultEditor(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellEditor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnClass\u003c/code\u003e - set the default cell renderer for this columnClass",
          "\u003ccode\u003erenderer\u003c/code\u003e - default cell renderer to be used for this columnClass"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "columnClass"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultRenderer",
      "comment": "Returns the cell renderer to be used when no renderer has been set in a TableColumn. During the rendering of cells the renderer is fetched from a Hashtable of entries according to the class of the cells in the column. If there is no entry for this columnClass the method returns the entry for the most specific superclass. The JTable installs entries for Object, Number, and Boolean, all of which can be modified or replaced.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003esetDefaultRenderer(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getColumnClass(int)\"\u003e\u003ccode\u003egetColumnClass(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnClass\u003c/code\u003e - return the default cell renderer for this columnClass"
        ],
        "return": [
          "the renderer for this columnClass"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "columnClass"
          }
        },
        {
          "type": {
            "name": "javax.swing.table.TableCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "editor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultEditor",
      "comment": "Sets a default cell editor to be used if no editor has been set in a TableColumn. If no editing is required in a table, or a particular column in a table, uses the isCellEditable method in the TableModel interface to ensure that this JTable will not start an editor in these columns. If editor is null, removes the default editor for this column class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableModel.html#isCellEditable(int,int)\"\u003e\u003ccode\u003eTableModel.isCellEditable(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDefaultEditor(java.lang.Class)\"\u003e\u003ccode\u003egetDefaultEditor(java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003esetDefaultRenderer(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnClass\u003c/code\u003e - set the default cell editor for this columnClass",
          "\u003ccode\u003eeditor\u003c/code\u003e - default cell editor to be used for this columnClass"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellEditor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "columnClass"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultEditor",
      "comment": "Returns the editor to be used when no editor has been set in a TableColumn. During the editing of cells the editor is fetched from a Hashtable of entries according to the class of the cells in the column. If there is no entry for this columnClass the method returns the entry for the most specific superclass. The JTable installs entries for Object, Number, and Boolean, all of which can be modified or replaced.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultEditor(java.lang.Class,javax.swing.table.TableCellEditor)\"\u003e\u003ccode\u003esetDefaultEditor(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellEditor)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getColumnClass(int)\"\u003e\u003ccode\u003egetColumnClass(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnClass\u003c/code\u003e - return the default cell editor for this columnClass"
        ],
        "return": [
          "the default cell editor to be used for this columnClass"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragEnabled",
      "comment": "Turns on or off automatic drag handling. In order to enable automatic drag handling, this property should be set to true, and the table\u0027s TransferHandler needs to be non-null. The default value of the dragEnabled property is false. The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the table\u0027s TableUI. When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel) begin a drag and drop operation whenever the user presses the mouse button over an item (in single selection mode) or a selection (in other selection modes) and then moves the mouse a few pixels. Setting this property to true can therefore have a subtle effect on how selections behave. If a look and feel is used that ignores this property, you can still begin a drag and drop operation by calling exportAsDrag on the table\u0027s TransferHandler.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "determines whether automatic drag handling is enabled"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDragEnabled()\"\u003e\u003ccode\u003egetDragEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not to enable automatic drag handling"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e and \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragEnabled",
      "comment": "Returns whether or not automatic drag handling is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDragEnabled(boolean)\"\u003e\u003ccode\u003esetDragEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003edragEnabled\u003c/code\u003e property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.DropMode",
            "type": "Class"
          },
          "field": {
            "name": "dropMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setDropMode",
      "comment": "Sets the drop mode for this component. For backward compatibility, the default for this property is DropMode.USE_SELECTION. Usage of one of the other modes is recommended, however, for an improved user experience. DropMode.ON, for instance, offers similar behavior of showing items as selected, but does so without affecting the actual selection in the table. JTable supports the following drop modes: DropMode.USE_SELECTION DropMode.ON DropMode.INSERT DropMode.INSERT_ROWS DropMode.INSERT_COLS DropMode.ON_OR_INSERT DropMode.ON_OR_INSERT_ROWS DropMode.ON_OR_INSERT_COLS The drop mode is only meaningful if this component has a TransferHandler that accepts drops.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDropMode()\"\u003e\u003ccode\u003egetDropMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getDropLocation()\"\u003e\u003ccode\u003egetDropLocation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edropMode\u003c/code\u003e - the drop mode to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the drop mode is unsupported or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.DropMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropMode",
      "comment": "Returns the drop mode for this component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop mode for this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JTable$DropLocation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropLocation",
      "comment": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown. This method is not meant for querying the drop location from a TransferHandler, as the drop location is only set after the TransferHandler\u0027s canImport has returned and has allowed for the location to be shown. When this property changes, a property change event with name \"dropLocation\" is fired by the component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eTransferHandler.canImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop location"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoCreateRowSorter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoCreateRowSorter",
      "comment": "Specifies whether a RowSorter should be created for the table whenever its model changes. When setAutoCreateRowSorter(true) is invoked, a TableRowSorter is immediately created and installed on the table. While the autoCreateRowSorter property remains true, every time the model is changed, a new TableRowSorter is created and set as the table\u0027s row sorter. The default value for the autoCreateRowSorter property is false.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether or not to turn on sorting by default."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eautoCreateRowSorter\u003c/code\u003e - whether or not a \n\u003ccode\u003eRowSorter\u003c/code\u003e should be automatically created"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoCreateRowSorter",
      "comment": "Returns true if whenever the model changes, a new RowSorter should be created and installed as the table\u0027s sorter; otherwise, returns false.",
      "tagMap": {
        "return": [
          "true if a \n\u003ccode\u003eRowSorter\u003c/code\u003e should be created when the model changes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "update"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUpdateSelectionOnSort",
      "comment": "Specifies whether the selection should be updated after sorting. If true, on sorting the selection is reset such that the same rows, in terms of the model, remain selected. The default is true.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether or not to update the selection on sorting"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eupdate\u003c/code\u003e - whether or not to update the selection on sorting"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUpdateSelectionOnSort",
      "comment": "Returns true if the selection should be updated after sorting.",
      "tagMap": {
        "return": [
          "whether to update the selection on a sort"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.RowSorter",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.swing.table.TableModel",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "sorter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowSorter",
      "comment": "Sets the RowSorter. RowSorter is used to provide sorting and filtering to a JTable. This method clears the selection and resets any variable row heights. This method fires a PropertyChangeEvent when appropriate, with the property name \"rowSorter\". For backward-compatibility, this method fires an additional event with the property name \"sorter\". If the underlying model of the RowSorter differs from that of this JTable undefined behavior will result.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The table\u0027s RowSorter"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esorter\u003c/code\u003e - the \n\u003ccode\u003eRowSorter\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e turns sorting off"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowSorter",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.swing.table.TableModel",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowSorter",
      "comment": "Returns the object responsible for sorting.",
      "tagMap": {
        "return": [
          "the object responsible for sorting"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "selectionMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionMode",
      "comment": "Sets the table\u0027s selection mode to allow only single selections, a single contiguous interval, or multiple intervals. Note: JTable provides all the methods for handling column and row selection. When setting states, such as setSelectionMode, it not only updates the mode for the row selection model but also sets similar values in the selection model of the columnModel. If you want to have the row and column selection models operating in different modes, set them both directly. Both the row and column selection models for JTable default to using a DefaultListSelectionModel so that JTable works the same way as the JList. See the setSelectionMode method in JList for details about the modes.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "enumerationValues",
              "value": [
                "ListSelectionModel.SINGLE_SELECTION",
                "ListSelectionModel.SINGLE_INTERVAL_SELECTION",
                "ListSelectionModel.MULTIPLE_INTERVAL_SELECTION"
              ]
            },
            {
              "name": "escription",
              "value": "The selection mode used by the row and column selection models."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionMode(int)\"\u003e\u003ccode\u003eJList.setSelectionMode(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionMode\u003c/code\u003e - the mode used by the row and column selection models"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "rowSelectionAllowed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowSelectionAllowed",
      "comment": "Sets whether the rows in this model can be selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If true, an entire row is selected for each selected cell."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getRowSelectionAllowed()\"\u003e\u003ccode\u003egetRowSelectionAllowed()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erowSelectionAllowed\u003c/code\u003e - true if this model will allow row selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowSelectionAllowed",
      "comment": "Returns true if rows can be selected.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setRowSelectionAllowed(boolean)\"\u003e\u003ccode\u003esetRowSelectionAllowed(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if rows can be selected, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "columnSelectionAllowed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setColumnSelectionAllowed",
      "comment": "Sets whether the columns in this model can be selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If true, an entire column is selected for each selected cell."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getColumnSelectionAllowed()\"\u003e\u003ccode\u003egetColumnSelectionAllowed()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnSelectionAllowed\u003c/code\u003e - true if this model will allow column selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumnSelectionAllowed",
      "comment": "Returns true if columns can be selected.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setColumnSelectionAllowed(boolean)\"\u003e\u003ccode\u003esetColumnSelectionAllowed(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if columns can be selected, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "cellSelectionEnabled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellSelectionEnabled",
      "comment": "Sets whether this table allows both a column selection and a row selection to exist simultaneously. When set, the table treats the intersection of the row and column selection models as the selected cells. Override isCellSelected to change this default behavior. This method is equivalent to setting both the rowSelectionAllowed property and columnSelectionAllowed property of the columnModel to the supplied value.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Select a rectangular region of cells rather than rows or columns."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getCellSelectionEnabled()\"\u003e\u003ccode\u003egetCellSelectionEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#isCellSelected(int,int)\"\u003e\u003ccode\u003eisCellSelected(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecellSelectionEnabled\u003c/code\u003e - true if simultaneous row and column selection is allowed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellSelectionEnabled",
      "comment": "Returns true if both row and column selection models are enabled. Equivalent to getRowSelectionAllowed() \u0026\u0026 getColumnSelectionAllowed().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setCellSelectionEnabled(boolean)\"\u003e\u003ccode\u003esetCellSelectionEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if both row and column selection models are enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "selectAll",
      "comment": "Selects all rows, columns, and cells in the table.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearSelection",
      "comment": "Deselects all selected columns and rows.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowSelectionInterval",
      "comment": "Selects the rows from index0 to index1, inclusive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - one end of the interval",
          "\u003ccode\u003eindex1\u003c/code\u003e - the other end of the interval"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex0\u003c/code\u003e or \n\u003ccode\u003eindex1\u003c/code\u003e lie outside [0, \n\u003ccode\u003egetRowCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setColumnSelectionInterval",
      "comment": "Selects the columns from index0 to index1, inclusive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - one end of the interval",
          "\u003ccode\u003eindex1\u003c/code\u003e - the other end of the interval"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex0\u003c/code\u003e or \n\u003ccode\u003eindex1\u003c/code\u003e lie outside [0, \n\u003ccode\u003egetColumnCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addRowSelectionInterval",
      "comment": "Adds the rows from index0 to index1, inclusive, to the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - one end of the interval",
          "\u003ccode\u003eindex1\u003c/code\u003e - the other end of the interval"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex0\u003c/code\u003e or \n\u003ccode\u003eindex1\u003c/code\u003e lie outside [0, \n\u003ccode\u003egetRowCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addColumnSelectionInterval",
      "comment": "Adds the columns from index0 to index1, inclusive, to the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - one end of the interval",
          "\u003ccode\u003eindex1\u003c/code\u003e - the other end of the interval"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex0\u003c/code\u003e or \n\u003ccode\u003eindex1\u003c/code\u003e lie outside [0, \n\u003ccode\u003egetColumnCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeRowSelectionInterval",
      "comment": "Deselects the rows from index0 to index1, inclusive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - one end of the interval",
          "\u003ccode\u003eindex1\u003c/code\u003e - the other end of the interval"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex0\u003c/code\u003e or \n\u003ccode\u003eindex1\u003c/code\u003e lie outside [0, \n\u003ccode\u003egetRowCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeColumnSelectionInterval",
      "comment": "Deselects the columns from index0 to index1, inclusive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - one end of the interval",
          "\u003ccode\u003eindex1\u003c/code\u003e - the other end of the interval"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex0\u003c/code\u003e or \n\u003ccode\u003eindex1\u003c/code\u003e lie outside [0, \n\u003ccode\u003egetColumnCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedRow",
      "comment": "Returns the index of the first selected row, -1 if no row is selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the index of the first selected row"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedColumn",
      "comment": "Returns the index of the first selected column, -1 if no column is selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the index of the first selected column"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedRows",
      "comment": "Returns the indices of all selected rows.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getSelectedRow()\"\u003e\u003ccode\u003egetSelectedRow()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of integers containing the indices of all selected rows, or an empty array if no row is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedColumns",
      "comment": "Returns the indices of all selected columns.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getSelectedColumn()\"\u003e\u003ccode\u003egetSelectedColumn()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of integers containing the indices of all selected columns, or an empty array if no column is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedRowCount",
      "comment": "Returns the number of selected rows.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the number of selected rows, 0 if no rows are selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedColumnCount",
      "comment": "Returns the number of selected columns.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the number of selected columns, 0 if no columns are selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRowSelected",
      "comment": "Returns true if the specified index is in the valid range of rows, and the row at that index is selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - a row in the row model"
        ],
        "return": [
          "true if \n\u003ccode\u003erow\u003c/code\u003e is a valid index and the row at that index is selected (where 0 is the first row)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isColumnSelected",
      "comment": "Returns true if the specified index is in the valid range of columns, and the column at that index is selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column in the column model"
        ],
        "return": [
          "true if \n\u003ccode\u003ecolumn\u003c/code\u003e is a valid index and the column at that index is selected (where 0 is the first column)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCellSelected",
      "comment": "Returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row being queried",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column being queried"
        ],
        "return": [
          "true if \n\u003ccode\u003erow\u003c/code\u003e and \n\u003ccode\u003ecolumn\u003c/code\u003e are valid indices and the cell at index \n\u003ccode\u003e(row, column)\u003c/code\u003e is selected, where the first row and first column are at index 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "columnIndex"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "toggle"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "extend"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "changeSelection",
      "comment": "Updates the selection models of the table, depending on the state of the two flags: toggle and extend. Most changes to the selection that are the result of keyboard or mouse events received by the UI are channeled through this method so that the behavior may be overridden by a subclass. Some UIs may need more functionality than this method provides, such as when manipulating the lead for discontiguous selection, and may not call into this method for some selection changes. This implementation uses the following conventions: toggle: false, extend: false. Clear the previous selection and ensure the new cell is selected. toggle: false, extend: true. Extend the previous selection from the anchor to the specified cell, clearing all other selections. toggle: true, extend: false. If the specified cell is selected, deselect it. If it is not selected, select it. toggle: true, extend: true. Apply the selection state of the anchor to all cells between it and the specified cell.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erowIndex\u003c/code\u003e - affects the selection at \n\u003ccode\u003erow\u003c/code\u003e",
          "\u003ccode\u003ecolumnIndex\u003c/code\u003e - affects the selection at \n\u003ccode\u003ecolumn\u003c/code\u003e",
          "\u003ccode\u003etoggle\u003c/code\u003e - see description above",
          "\u003ccode\u003eextend\u003c/code\u003e - if true, extend the current selection"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionForeground",
      "comment": "Returns the foreground color for selected cells.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionForeground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionBackground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eColor\u003c/code\u003e object for the foreground property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "selectionForeground"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionForeground",
      "comment": "Sets the foreground color for selected cells. Cell renderers can use this color to render text and graphics for selected cells. The default value of this property is defined by the look and feel implementation. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "A default foreground color for selected cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getSelectionForeground()\"\u003e\u003ccode\u003egetSelectionForeground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionBackground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setForeground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003eJComponent.setFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionForeground\u003c/code\u003e - the \n\u003ccode\u003eColor\u003c/code\u003e to use in the foreground for selected list items"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionBackground",
      "comment": "Returns the background color for selected cells.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionBackground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionForeground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eColor\u003c/code\u003e used for the background of selected list items"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "selectionBackground"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionBackground",
      "comment": "Sets the background color for selected cells. Cell renderers can use this color to the fill selected cells. The default value of this property is defined by the look and feel implementation. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "A default background color for selected cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getSelectionBackground()\"\u003e\u003ccode\u003egetSelectionBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionForeground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setForeground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003eJComponent.setFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionBackground\u003c/code\u003e - the \n\u003ccode\u003eColor\u003c/code\u003e to use for the background of selected cells"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableColumn",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "identifier"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumn",
      "comment": "Returns the TableColumn object for the column in the table whose identifier is equal to identifier, when compared using equals.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eidentifier\u003c/code\u003e - the identifier object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eidentifier\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or no \n\u003ccode\u003eTableColumn\u003c/code\u003e has this identifier"
        ],
        "return": [
          "the \n\u003ccode\u003eTableColumn\u003c/code\u003e object that matches the identifier"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "viewColumnIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertColumnIndexToModel",
      "comment": "Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model. Returns the index of the corresponding column in the model. If viewColumnIndex is less than zero, returns viewColumnIndex.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#convertColumnIndexToView(int)\"\u003e\u003ccode\u003econvertColumnIndexToView(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eviewColumnIndex\u003c/code\u003e - the index of the column in the view"
        ],
        "return": [
          "the index of the corresponding column in the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modelColumnIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertColumnIndexToView",
      "comment": "Maps the index of the column in the table model at modelColumnIndex to the index of the column in the view. Returns the index of the corresponding column in the view; returns -1 if this column is not being displayed. If modelColumnIndex is less than zero, returns modelColumnIndex.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#convertColumnIndexToModel(int)\"\u003e\u003ccode\u003econvertColumnIndexToModel(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodelColumnIndex\u003c/code\u003e - the index of the column in the model"
        ],
        "return": [
          "the index of the corresponding column in the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modelRowIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertRowIndexToView",
      "comment": "Maps the index of the row in terms of the TableModel to the view. If the contents of the model are not sorted the model and view indices are the same.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodelRowIndex\u003c/code\u003e - the index of the row in terms of the model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if sorting is enabled and passed an index outside the number of rows of the \n\u003ccode\u003eTableModel\u003c/code\u003e"
        ],
        "return": [
          "the index of the corresponding row in the view, or -1 if the row isn\u0027t visible"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "viewRowIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertRowIndexToModel",
      "comment": "Maps the index of the row in terms of the view to the underlying TableModel. If the contents of the model are not sorted the model and view indices are the same.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getRowCount()\"\u003e\u003ccode\u003egetRowCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eviewRowIndex\u003c/code\u003e - the index of the row in the view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if sorting is enabled and passed an index outside the range of the \n\u003ccode\u003eJTable\u003c/code\u003e as determined by the method \n\u003ccode\u003egetRowCount\u003c/code\u003e"
        ],
        "return": [
          "the index of the corresponding row in the model"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowCount",
      "comment": "Returns the number of rows that can be shown in the JTable, given unlimited space. If a RowSorter with a filter has been specified, the number of rows returned may differ from that of the underlying TableModel.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getColumnCount()\"\u003e\u003ccode\u003egetColumnCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of rows shown in the \n\u003ccode\u003eJTable\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumnCount",
      "comment": "Returns the number of columns in the column model. Note that this may be different from the number of columns in the table model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getRowCount()\"\u003e\u003ccode\u003egetRowCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#removeColumn(javax.swing.table.TableColumn)\"\u003e\u003ccode\u003eremoveColumn(javax.swing.table.TableColumn)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of columns in the table"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumnName",
      "comment": "Returns the name of the column appearing in the view at column position column.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column in the view being queried"
        ],
        "return": [
          "the name of the column at position \n\u003ccode\u003ecolumn\u003c/code\u003e in the view where the first column is column 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumnClass",
      "comment": "Returns the type of the column appearing in the view at column position column.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column in the view being queried"
        ],
        "return": [
          "the type of the column at position \n\u003ccode\u003ecolumn\u003c/code\u003e in the view where the first column is column 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValueAt",
      "comment": "Returns the cell value at row and column. Note: The column is specified in the table view\u0027s display order, and not in the TableModel\u0027s column order. This is an important distinction because as the user rearranges the columns in the table, the column at a given index in the view will change. Meanwhile the user\u0027s actions never affect the model\u0027s column ordering.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row whose value is to be queried",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column whose value is to be queried"
        ],
        "return": [
          "the Object at the specified cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "aValue"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValueAt",
      "comment": "Sets the value for the cell in the table model at row and column. Note: The column is specified in the table view\u0027s display order, and not in the TableModel\u0027s column order. This is an important distinction because as the user rearranges the columns in the table, the column at a given index in the view will change. Meanwhile the user\u0027s actions never affect the model\u0027s column ordering. aValue is the new value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getValueAt(int,int)\"\u003e\u003ccode\u003egetValueAt(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaValue\u003c/code\u003e - the new value",
          "\u003ccode\u003erow\u003c/code\u003e - the row of the cell to be changed",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column of the cell to be changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCellEditable",
      "comment": "Returns true if the cell at row and column is editable. Otherwise, invoking setValueAt on the cell will have no effect. Note: The column is specified in the table view\u0027s display order, and not in the TableModel\u0027s column order. This is an important distinction because as the user rearranges the columns in the table, the column at a given index in the view will change. Meanwhile the user\u0027s actions never affect the model\u0027s column ordering.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setValueAt(java.lang.Object,int,int)\"\u003e\u003ccode\u003esetValueAt(java.lang.Object, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row whose value is to be queried",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column whose value is to be queried"
        ],
        "return": [
          "true if the cell is editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableColumn",
            "type": "Class"
          },
          "field": {
            "name": "aColumn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addColumn",
      "comment": "Appends aColumn to the end of the array of columns held by this JTable\u0027s column model. If the column name of aColumn is null, sets the column name of aColumn to the name returned by getModel().getColumnName(). To add a column to this JTable to display the modelColumn\u0027th column of data in the model with a given width, cellRenderer, and cellEditor you can use: \n      addColumn(new TableColumn(modelColumn, width, cellRenderer, cellEditor));\n\n  [Any of the TableColumn constructors can be used instead of this one.] The model column number is stored inside the TableColumn and is used during rendering and editing to locate the appropriates data values in the model. The model column number does not change when columns are reordered in the view.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#removeColumn(javax.swing.table.TableColumn)\"\u003e\u003ccode\u003eremoveColumn(javax.swing.table.TableColumn)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaColumn\u003c/code\u003e - the \n\u003ccode\u003eTableColumn\u003c/code\u003e to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableColumn",
            "type": "Class"
          },
          "field": {
            "name": "aColumn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeColumn",
      "comment": "Removes aColumn from this JTable\u0027s array of columns. Note: this method does not remove the column of data from the model; it just removes the TableColumn that was responsible for displaying it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#addColumn(javax.swing.table.TableColumn)\"\u003e\u003ccode\u003eaddColumn(javax.swing.table.TableColumn)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaColumn\u003c/code\u003e - the \n\u003ccode\u003eTableColumn\u003c/code\u003e to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetColumn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "moveColumn",
      "comment": "Moves the column column to the position currently occupied by the column targetColumn in the view. The old column at targetColumn is shifted left or right to make room.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the index of column to be moved",
          "\u003ccode\u003etargetColumn\u003c/code\u003e - the new index of the column"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "point"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "columnAtPoint",
      "comment": "Returns the index of the column that point lies in, or -1 if the result is not in the range [0, getColumnCount()-1].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#rowAtPoint(java.awt.Point)\"\u003e\u003ccode\u003erowAtPoint(java.awt.Point)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epoint\u003c/code\u003e - the location of interest"
        ],
        "return": [
          "the index of the column that \n\u003ccode\u003epoint\u003c/code\u003e lies in, or -1 if the result is not in the range [0, \n\u003ccode\u003egetColumnCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "point"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rowAtPoint",
      "comment": "Returns the index of the row that point lies in, or -1 if the result is not in the range [0, getRowCount()-1].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#columnAtPoint(java.awt.Point)\"\u003e\u003ccode\u003ecolumnAtPoint(java.awt.Point)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epoint\u003c/code\u003e - the location of interest"
        ],
        "return": [
          "the index of the row that \n\u003ccode\u003epoint\u003c/code\u003e lies in, or -1 if the result is not in the range [0, \n\u003ccode\u003egetRowCount()\u003c/code\u003e-1]"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "includeSpacing"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellRect",
      "comment": "Returns a rectangle for the cell that lies at the intersection of row and column. If includeSpacing is true then the value returned has the full height and width of the row and column specified. If it is false, the returned rectangle is inset by the intercell spacing to return the true bounds of the rendering or editing component as it will be set during rendering. If the column index is valid but the row index is less than zero the method returns a rectangle with the y and height values set appropriately and the x and width values both set to zero. In general, when either the row or column indices indicate a cell outside the appropriate range, the method returns a rectangle depicting the closest edge of the closest cell that is within the table\u0027s range. When both row and column indices are out of range the returned rectangle covers the closest point of the closest cell. In all cases, calculations that use this method to calculate results along one axis will not fail because of anomalies in calculations along the other axis. When the cell is not valid the includeSpacing parameter is ignored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getIntercellSpacing()\"\u003e\u003ccode\u003egetIntercellSpacing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row index where the desired cell is located",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column index where the desired cell is located in the display; this is not necessarily the same as the column index in the data model for the table; the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#convertColumnIndexToView(int)\"\u003e\u003ccode\u003econvertColumnIndexToView(int)\u003c/code\u003e\u003c/a\u003e method may be used to convert a data model column index to a display column index",
          "\u003ccode\u003eincludeSpacing\u003c/code\u003e - if false, return the true cell bounds - computed by subtracting the intercell spacing from the height and widths of the column and row models"
        ],
        "return": [
          "the rectangle containing the cell at location \n\u003ccode\u003erow\u003c/code\u003e,\n\u003ccode\u003ecolumn\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doLayout",
      "comment": "Causes this table to lay out its rows and columns. Overridden so that columns can be resized to accommodate a change in the size of a containing parent. Resizes one or more of the columns in the table so that the total width of all of this JTable\u0027s columns is equal to the width of the table. Before the layout begins the method gets the resizingColumn of the tableHeader. When the method is called as a result of the resizing of an enclosing window, the resizingColumn is null. This means that resizing has taken place \"outside\" the JTable and the change - or \"delta\" - should be distributed to all of the columns regardless of this JTable\u0027s automatic resize mode. If the resizingColumn is not null, it is one of the columns in the table that has changed size rather than the table itself. In this case the auto-resize modes govern the way the extra (or deficit) space is distributed amongst the available columns. The modes are: AUTO_RESIZE_OFF: Don\u0027t automatically adjust the column\u0027s widths at all. Use a horizontal scrollbar to accommodate the columns when their sum exceeds the width of the Viewport. If the JTable is not enclosed in a JScrollPane this may leave parts of the table invisible. AUTO_RESIZE_NEXT_COLUMN: Use just the column after the resizing column. This results in the \"boundary\" or divider between adjacent cells being independently adjustable. AUTO_RESIZE_SUBSEQUENT_COLUMNS: Use all columns after the one being adjusted to absorb the changes. This is the default behavior. AUTO_RESIZE_LAST_COLUMN: Automatically adjust the size of the last column only. If the bounds of the last column prevent the desired size from being allocated, set the width of the last column to the appropriate limit and make no further adjustments. AUTO_RESIZE_ALL_COLUMNS: Spread the delta amongst all the columns in the JTable, including the one that is being adjusted. Note: When a JTable makes adjustments to the widths of the columns it respects their minimum and maximum values absolutely. It is therefore possible that, even after this method is called, the total width of the columns is still not equal to the width of the table. When this happens the JTable does not put itself in AUTO_RESIZE_OFF mode to bring up a scroll bar, or break other commitments of its current auto-resize mode -- instead it allows its bounds to be set larger (or smaller) than the total of the column minimum or maximum, meaning, either that there will not be enough room to display all of the columns, or that the columns will not fill the JTable\u0027s bounds. These respectively, result in the clipping of some columns or an area being painted in the JTable\u0027s background color during painting. The mechanism for distributing the delta amongst the available columns is provided in a private method in the JTable class:    adjustSizes(long targetSize, final Resizable3 r, boolean inverse)\n an explanation of which is provided in the following section. Resizable3 is a private interface that allows any data structure containing a collection of elements with a size, preferred size, maximum size and minimum size to have its elements manipulated by the algorithm. Distributing the delta Overview Call \"DELTA\" the difference between the target size and the sum of the preferred sizes of the elements in r. The individual sizes are calculated by taking the original preferred sizes and adding a share of the DELTA - that share being based on how far each preferred size is from its limiting bound (minimum or maximum). Definition Call the individual constraints min[i], max[i], and pref[i]. Call their respective sums: MIN, MAX, and PREF. Each new size will be calculated using:           size[i] \u003d pref[i] + delta[i]\n where each individual delta[i] is calculated according to: If (DELTA \u003c 0) we are in shrink mode where:                         DELTA\n          delta[i] \u003d ------------ * (pref[i] - min[i])\n                     (PREF - MIN)\n If (DELTA \u003e 0) we are in expand mode where:                         DELTA\n          delta[i] \u003d ------------ * (max[i] - pref[i])\n                      (MAX - PREF)\n The overall effect is that the total size moves that same percentage, k, towards the total minimum or maximum and that percentage guarantees accommodation of the required space, DELTA. Details Naive evaluation of the formulae presented here would be subject to the aggregated rounding errors caused by doing this operation in finite precision (using ints). To deal with this, the multiplying factor above, is constantly recalculated and this takes account of the rounding errors in the previous iterations. The result is an algorithm that produces a set of integers whose values exactly sum to the supplied targetSize, and does so by spreading the rounding errors evenly over the given elements. When the MAX and MIN bounds are hit When targetSize is outside the [MIN, MAX] range, the algorithm sets all sizes to their appropriate limiting value (maximum or minimum).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#layoutContainer(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.layoutContainer(java.awt.Container)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setLayout(java.awt.LayoutManager)\"\u003e\u003ccode\u003eContainer.setLayout(java.awt.LayoutManager)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#validate()\"\u003e\u003ccode\u003eContainer.validate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#doLayout()\"\u003edoLayout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "lastColumnOnly"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sizeColumnsToFit",
      "comment": "Sizes the table columns to fit the available space.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#doLayout()\"\u003e\u003ccode\u003edoLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elastColumnOnly\u003c/code\u003e - determines whether to resize last column only"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "resizingColumn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sizeColumnsToFit",
      "comment": "Obsolete as of Java 2 platform v1.4. Please use the doLayout() method instead.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#doLayout()\"\u003e\u003ccode\u003edoLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eresizingColumn\u003c/code\u003e - the column whose resizing made this adjustment necessary or -1 if there is no such column"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Overrides JComponent\u0027s getToolTipText method in order to allow the renderer\u0027s tips to be used if it has text set. Note: For JTable to properly display tooltips of its renderers JTable must be a registered component with the ToolTipManager. This is done automatically in initializeLocalVars, but if at a later point JTable is told setToolTipText(null) it will unregister the table component, and no tips from renderers will display anymore.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getToolTipText()\"\u003e\u003ccode\u003eJComponent.getToolTipText()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getToolTipText(java.awt.event.MouseEvent)\"\u003egetToolTipText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e that initiated the \n\u003ccode\u003eToolTip\u003c/code\u003e display"
        ],
        "return": [
          "a string containing the tooltip"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "surrendersFocusOnKeystroke"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSurrendersFocusOnKeystroke",
      "comment": "Sets whether editors in this JTable get the keyboard focus when an editor is activated as a result of the JTable forwarding keyboard events for a cell. By default, this property is false, and the JTable retains the focus unless the cell is clicked.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getSurrendersFocusOnKeystroke()\"\u003e\u003ccode\u003egetSurrendersFocusOnKeystroke()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esurrendersFocusOnKeystroke\u003c/code\u003e - true if the editor should get the focus when keystrokes cause the editor to be activated"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSurrendersFocusOnKeystroke",
      "comment": "Returns true if the editor should get the focus when keystrokes cause the editor to be activated",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSurrendersFocusOnKeystroke(boolean)\"\u003e\u003ccode\u003esetSurrendersFocusOnKeystroke(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the editor should get the focus when keystrokes cause the editor to be activated"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "editCellAt",
      "comment": "Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable. Note that this is a convenience method for editCellAt(int, int, null).",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to be edited",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to be edited"
        ],
        "return": [
          "false if for any reason the cell cannot be edited, or if the indices are invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        },
        {
          "type": {
            "name": "java.util.EventObject",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "editCellAt",
      "comment": "Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable. To prevent the JTable from editing a particular table, column or cell value, return false from the isCellEditable method in the TableModel interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to be edited",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to be edited",
          "\u003ccode\u003ee\u003c/code\u003e - event to pass into \n\u003ccode\u003eshouldSelectCell\u003c/code\u003e; note that as of Java 2 platform v1.2, the call to \n\u003ccode\u003eshouldSelectCell\u003c/code\u003e is no longer made"
        ],
        "return": [
          "false if for any reason the cell cannot be edited, or if the indices are invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEditing",
      "comment": "Returns true if a cell is being edited.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#editingColumn\"\u003e\u003ccode\u003eeditingColumn\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#editingRow\"\u003e\u003ccode\u003eeditingRow\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the table is editing a cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditorComponent",
      "comment": "Returns the component that is handling the editing session. If nothing is being edited, returns null.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "Component handling editing session"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditingColumn",
      "comment": "Returns the index of the column that contains the cell currently being edited. If nothing is being edited, returns -1.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#editingRow\"\u003e\u003ccode\u003eeditingRow\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the index of the column that contains the cell currently being edited; returns -1 if nothing being edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditingRow",
      "comment": "Returns the index of the row that contains the cell currently being edited. If nothing is being edited, returns -1.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#editingColumn\"\u003e\u003ccode\u003eeditingColumn\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the index of the row that contains the cell currently being edited; returns -1 if nothing being edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.TableUI",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the L\u0026F object that renders this component.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eTableUI\u003c/code\u003e object that renders this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.TableUI",
            "type": "Class"
          },
          "field": {
            "name": "ui"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the L\u0026F object that renders this component and repaints.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the Component\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the TableUI L\u0026amp;F object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Notification from the UIManager that the L\u0026F has changed. Replaces the current UI object with the latest version from the UIManager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the suffix used to construct the name of the L\u0026F class used to render this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"TableUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableModel",
            "type": "Class"
          },
          "field": {
            "name": "dataModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the data model for this table to dataModel and registers with it for listener notifications from the new data model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The model that is the source of the data for this view."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edataModel\u003c/code\u003e - the new data source for this table"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataModel\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModel",
      "comment": "Returns the TableModel that provides the data displayed by this JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setModel(javax.swing.table.TableModel)\"\u003e\u003ccode\u003esetModel(javax.swing.table.TableModel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eTableModel\u003c/code\u003e that provides the data displayed by this \n\u003ccode\u003eJTable\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableColumnModel",
            "type": "Class"
          },
          "field": {
            "name": "columnModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setColumnModel",
      "comment": "Sets the column model for this table to columnModel and registers for listener notifications from the new column model. Also sets the column model of the JTableHeader to columnModel.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The object governing the way columns appear in the view."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getColumnModel()\"\u003e\u003ccode\u003egetColumnModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnModel\u003c/code\u003e - the new data source for this table"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumnModel\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableColumnModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumnModel",
      "comment": "Returns the TableColumnModel that contains all column information of this table.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setColumnModel(javax.swing.table.TableColumnModel)\"\u003e\u003ccode\u003esetColumnModel(javax.swing.table.TableColumnModel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the object that provides the column state of the table"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ListSelectionModel",
            "type": "Class"
          },
          "field": {
            "name": "selectionModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionModel",
      "comment": "Sets the row selection model for this table to selectionModel and registers for listener notifications from the new selection model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The selection model for rows."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getSelectionModel()\"\u003e\u003ccode\u003egetSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionModel\u003c/code\u003e - the new selection model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eselectionModel\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionModel",
      "comment": "Returns the ListSelectionModel that is used to maintain row selection state.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setSelectionModel(javax.swing.ListSelectionModel)\"\u003e\u003ccode\u003esetSelectionModel(javax.swing.ListSelectionModel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the object that provides row selection state, \n\u003ccode\u003enull\u003c/code\u003e if row selection is not allowed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.RowSorterEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sorterChanged",
      "comment": "RowSorterListener notification that the RowSorter has changed in some way.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/RowSorterListener.html#sorterChanged(javax.swing.event.RowSorterEvent)\"\u003esorterChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/RowSorterListener.html\" title\u003d\"interface in javax.swing.event\"\u003eRowSorterListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eRowSorterEvent\u003c/code\u003e describing the change"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ee\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TableModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tableChanged",
      "comment": "Invoked when this table\u0027s TableModel generates a TableModelEvent. The TableModelEvent should be constructed in the coordinate system of the model; the appropriate mapping to the view coordinate system is performed by this JTable when it receives the event. Application code will not use these methods explicitly, they are used internally by JTable. Note that as of 1.3, this method clears the selection, if any.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableModelListener.html#tableChanged(javax.swing.event.TableModelEvent)\"\u003etableChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003eTableModelListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - a \n\u003ccode\u003eTableModelEvent\u003c/code\u003e to notify listener that a table model has changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TableColumnModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "columnAdded",
      "comment": "Invoked when a column is added to the table column model. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eTableColumnModelListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html#columnAdded(javax.swing.event.TableColumnModelEvent)\"\u003ecolumnAdded\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003eTableColumnModelListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - a \n\u003ccode\u003eTableColumnModelEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TableColumnModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "columnRemoved",
      "comment": "Invoked when a column is removed from the table column model. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eTableColumnModelListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html#columnRemoved(javax.swing.event.TableColumnModelEvent)\"\u003ecolumnRemoved\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003eTableColumnModelListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - a \n\u003ccode\u003eTableColumnModelEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TableColumnModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "columnMoved",
      "comment": "Invoked when a column is repositioned. If a cell is being edited, then editing is stopped and the cell is redrawn. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eTableColumnModelListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html#columnMoved(javax.swing.event.TableColumnModelEvent)\"\u003ecolumnMoved\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003eTableColumnModelListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event received"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "columnMarginChanged",
      "comment": "Invoked when a column is moved due to a margin change. If a cell is being edited, then editing is stopped and the cell is redrawn. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eTableColumnModelListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html#columnMarginChanged(javax.swing.event.ChangeEvent)\"\u003ecolumnMarginChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003eTableColumnModelListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event received"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ListSelectionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "columnSelectionChanged",
      "comment": "Invoked when the selection model of the TableColumnModel is changed. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eTableColumnModelListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html#columnSelectionChanged(javax.swing.event.ListSelectionEvent)\"\u003ecolumnSelectionChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/TableColumnModelListener.html\" title\u003d\"interface in javax.swing.event\"\u003eTableColumnModelListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event received"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ListSelectionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "valueChanged",
      "comment": "Invoked when the row selection changes -- repaints to show the new selection. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ListSelectionListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eListSelectionListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ListSelectionListener.html#valueChanged(javax.swing.event.ListSelectionEvent)\"\u003evalueChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ListSelectionListener.html\" title\u003d\"interface in javax.swing.event\"\u003eListSelectionListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event received"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "editingStopped",
      "comment": "Invoked when editing is finished. The changes are saved and the editor is discarded. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eCellEditorListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html#editingStopped(javax.swing.event.ChangeEvent)\"\u003eeditingStopped\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html\" title\u003d\"interface in javax.swing.event\"\u003eCellEditorListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event received"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "editingCanceled",
      "comment": "Invoked when editing is canceled. The editor object is discarded and the cell is rendered once again. Application code will not use these methods explicitly, they are used internally by JTable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eCellEditorListener\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html#editingCanceled(javax.swing.event.ChangeEvent)\"\u003eeditingCanceled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html\" title\u003d\"interface in javax.swing.event\"\u003eCellEditorListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event received"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPreferredScrollableViewportSize",
      "comment": "Sets the preferred size of the viewport for this table.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "The preferred size of the viewport."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()\"\u003e\u003ccode\u003eScrollable.getPreferredScrollableViewportSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - a \n\u003ccode\u003eDimension\u003c/code\u003e object specifying the \n\u003ccode\u003epreferredSize\u003c/code\u003e of a \n\u003ccode\u003eJViewport\u003c/code\u003e whose view is this table"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredScrollableViewportSize",
      "comment": "Returns the preferred size of the viewport for this table.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()\"\u003e\u003ccode\u003eScrollable.getPreferredScrollableViewportSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()\"\u003egetPreferredScrollableViewportSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object containing the \n\u003ccode\u003epreferredSize\u003c/code\u003e of the \n\u003ccode\u003eJViewport\u003c/code\u003e which displays this table"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableUnitIncrement",
      "comment": "Returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation). This method is called each time the user requests a unit scroll.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableUnitIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - either \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less than zero to scroll up/left, greater than zero for down/right"
        ],
        "return": [
          "the \"unit\" increment for scrolling in the specified direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableBlockIncrement",
      "comment": "Returns visibleRect.height or visibleRect.width, depending on this table\u0027s orientation. Note that as of Swing 1.1.1 (Java 2 v 1.2.2) the value returned will ensure that the viewport is cleanly aligned on a row boundary.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableBlockIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - The view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.",
          "\u003ccode\u003edirection\u003c/code\u003e - Less than zero to scroll up/left, greater than zero for down/right."
        ],
        "return": [
          "\u003ccode\u003evisibleRect.height\u003c/code\u003e or \n\u003ccode\u003evisibleRect.width\u003c/code\u003e per the orientation"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportWidth",
      "comment": "Returns false if autoResizeMode is set to AUTO_RESIZE_OFF, which indicates that the width of the viewport does not determine the width of the table. Otherwise returns true.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003e\u003ccode\u003eScrollable.getScrollableTracksViewportWidth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003egetScrollableTracksViewportWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "false if \n\u003ccode\u003eautoResizeMode\u003c/code\u003e is set to \n\u003ccode\u003eAUTO_RESIZE_OFF\u003c/code\u003e, otherwise returns true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportHeight",
      "comment": "Returns false to indicate that the height of the viewport does not determine the height of the table, unless getFillsViewportHeight is true and the preferred height of the table is smaller than the viewport\u0027s height.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003e\u003ccode\u003eScrollable.getScrollableTracksViewportHeight()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setFillsViewportHeight(boolean)\"\u003e\u003ccode\u003esetFillsViewportHeight(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getFillsViewportHeight()\"\u003e\u003ccode\u003egetFillsViewportHeight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003egetScrollableTracksViewportHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e unless \n\u003ccode\u003egetFillsViewportHeight\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e and the table needs to be stretched to fill the viewport"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fillsViewportHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFillsViewportHeight",
      "comment": "Sets whether or not this table is always made large enough to fill the height of an enclosing viewport. If the preferred height of the table is smaller than the viewport, then the table will be stretched to fill the viewport. In other words, this ensures the table is never smaller than the viewport. The default for this property is false.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether or not this table is always made large enough to fill the height of an enclosing viewport"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getFillsViewportHeight()\"\u003e\u003ccode\u003egetFillsViewportHeight()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getScrollableTracksViewportHeight()\"\u003e\u003ccode\u003egetScrollableTracksViewportHeight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efillsViewportHeight\u003c/code\u003e - whether or not this table is always made large enough to fill the height of an enclosing viewport"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFillsViewportHeight",
      "comment": "Returns whether or not this table is always made large enough to fill the height of an enclosing viewport.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setFillsViewportHeight(boolean)\"\u003e\u003ccode\u003esetFillsViewportHeight(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether or not this table is always made large enough to fill the height of an enclosing viewport"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultRenderers",
      "comment": "Creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableCellRenderer.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableCellRenderer\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultEditors",
      "comment": "Creates default cell editors for objects, numbers, and boolean values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultCellEditor.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultCellEditor\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "initializeLocalVars",
      "comment": "Initializes table properties to their default values.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultDataModel",
      "comment": "Returns the default table model object, which is a DefaultTableModel. A subclass can override this method to return a different table model object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default table model object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableColumnModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultColumnModel",
      "comment": "Returns the default column model object, which is a DefaultTableColumnModel. A subclass can override this method to return a different column model object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableColumnModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableColumnModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default column model object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultSelectionModel",
      "comment": "Returns the default selection model object, which is a DefaultListSelectionModel. A subclass can override this method to return a different selection model object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListSelectionModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default selection model object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.JTableHeader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultTableHeader",
      "comment": "Returns the default table header object, which is a JTableHeader. A subclass can override this method to return a different table header object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/JTableHeader.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eJTableHeader\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default table header object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "resizeAndRepaint",
      "comment": "Equivalent to revalidate followed by repaint.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellEditor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellEditor",
      "comment": "Returns the active cell editor, which is null if the table is not currently editing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#cellEditor\"\u003e\u003ccode\u003ecellEditor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getCellEditor(int,int)\"\u003e\u003ccode\u003egetCellEditor(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eTableCellEditor\u003c/code\u003e that does the editing, or \n\u003ccode\u003enull\u003c/code\u003e if the table is not currently editing."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "anEditor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellEditor",
      "comment": "Sets the active cell editor.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The table\u0027s active cell editor."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#cellEditor\"\u003e\u003ccode\u003ecellEditor\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanEditor\u003c/code\u003e - the active cell editor"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "aColumn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditingColumn",
      "comment": "Sets the editingColumn variable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#editingColumn\"\u003e\u003ccode\u003eeditingColumn\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaColumn\u003c/code\u003e - the column of the cell to be edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "aRow"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditingRow",
      "comment": "Sets the editingRow variable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#editingRow\"\u003e\u003ccode\u003eeditingRow\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaRow\u003c/code\u003e - the row of the cell to be edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellRenderer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellRenderer",
      "comment": "Returns an appropriate renderer for the cell specified by this row and column. If the TableColumn for this column has a non-null renderer, returns that. If not, finds the class of the data in this column (using getColumnClass) and returns the default renderer for this type of data. Note: Throughout the table package, the internal implementations always use this method to provide renderers so that this default behavior can be safely overridden by a subclass.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableCellRenderer.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableCellRenderer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableColumn.html#setCellRenderer(javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003eTableColumn.setCellRenderer(javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)\"\u003e\u003ccode\u003esetDefaultRenderer(java.lang.Class\u0026lt;?\u0026gt;, javax.swing.table.TableCellRenderer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row of the cell to render, where 0 is the first row",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column of the cell to render, where 0 is the first column"
        ],
        "return": [
          "the assigned renderer; if \n\u003ccode\u003enull\u003c/code\u003e returns the default renderer for this type of object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "renderer"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "prepareRenderer",
      "comment": "Prepares the renderer by querying the data model for the value and selection state of the cell at row, column. Returns the component (may be a Component or a JComponent) under the event location. During a printing operation, this method will configure the renderer without indicating selection or focus, to prevent them from appearing in the printed output. To do other customizations based on whether or not the table is being printed, you can check the value of JComponent.isPaintingForPrint(), either here or within custom renderers. Note: Throughout the table package, the internal implementations always use this method to prepare renderers so that this default behavior can be safely overridden by a subclass.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erenderer\u003c/code\u003e - the \n\u003ccode\u003eTableCellRenderer\u003c/code\u003e to prepare",
          "\u003ccode\u003erow\u003c/code\u003e - the row of the cell to render, where 0 is the first row",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column of the cell to render, where 0 is the first column"
        ],
        "return": [
          "the \n\u003ccode\u003eComponent\u003c/code\u003e under the event location"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.table.TableCellEditor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellEditor",
      "comment": "Returns an appropriate editor for the cell specified by row and column. If the TableColumn for this column has a non-null editor, returns that. If not, finds the class of the data in this column (using getColumnClass) and returns the default editor for this type of data. Note: Throughout the table package, the internal implementations always use this method to provide editors so that this default behavior can be safely overridden by a subclass.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultCellEditor.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultCellEditor\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row of the cell to edit, where 0 is the first row",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column of the cell to edit, where 0 is the first column"
        ],
        "return": [
          "the editor for this cell; if \n\u003ccode\u003enull\u003c/code\u003e return the default editor for this type of cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "editor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "prepareEditor",
      "comment": "Prepares the editor by querying the data model for the value and selection state of the cell at row, column. Note: Throughout the table package, the internal implementations always use this method to prepare editors so that this default behavior can be safely overridden by a subclass.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeditor\u003c/code\u003e - the \n\u003ccode\u003eTableCellEditor\u003c/code\u003e to set up",
          "\u003ccode\u003erow\u003c/code\u003e - the row of the cell to edit, where 0 is the first row",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column of the cell to edit, where 0 is the first column"
        ],
        "return": [
          "the \n\u003ccode\u003eComponent\u003c/code\u003e being edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeEditor",
      "comment": "Discards the editor object and frees the real estate it used for cell rendering.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this table. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this table"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "A convenience method that displays a printing dialog, and then prints this JTable in mode PrintMode.FIT_WIDTH, with no header or footer text. A modal progress dialog, with an abort option, will be shown for the duration of printing. Note: In headless mode, no dialogs are shown and printing occurs on the default printer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean,javax.print.PrintService)\"\u003e\u003ccode\u003eprint(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted"
        ],
        "return": [
          "true, unless printing is cancelled by the user"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable$PrintMode",
            "type": "Class"
          },
          "field": {
            "name": "printMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with no header or footer text. A modal progress dialog, with an abort option, will be shown for the duration of printing. Note: In headless mode, no dialogs are shown and printing occurs on the default printer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean,javax.print.PrintService)\"\u003e\u003ccode\u003eprint(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprintMode\u003c/code\u003e - the printing mode that the printable should use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted"
        ],
        "return": [
          "true, unless printing is cancelled by the user"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable$PrintMode",
            "type": "Class"
          },
          "field": {
            "name": "printMode"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with the specified header and footer text. A modal progress dialog, with an abort option, will be shown for the duration of printing. Note: In headless mode, no dialogs are shown and printing occurs on the default printer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean,javax.print.PrintService)\"\u003e\u003ccode\u003eprint(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprintMode\u003c/code\u003e - the printing mode that the printable should use",
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a header, or null for none",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a footer, or null for none"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted"
        ],
        "return": [
          "true, unless printing is cancelled by the user"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        },
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable$PrintMode",
            "type": "Class"
          },
          "field": {
            "name": "printMode"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showPrintDialog"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.PrintRequestAttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "interactive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints this table, as specified by the fully featured print method, with the default printer specified as the print service.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean,javax.print.PrintService)\"\u003e\u003ccode\u003eprint(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprintMode\u003c/code\u003e - the printing mode that the printable should use",
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a header, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a footer, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003eshowPrintDialog\u003c/code\u003e - whether or not to display a print dialog",
          "\u003ccode\u003eattr\u003c/code\u003e - a \n\u003ccode\u003ePrintRequestAttributeSet\u003c/code\u003e specifying any printing attributes, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003einteractive\u003c/code\u003e - whether or not to print in an interactive mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if the method is asked to show a printing dialog or run interactively, and \n\u003ccode\u003eGraphicsEnvironment.isHeadless\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted"
        ],
        "return": [
          "true, unless printing is cancelled by the user"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        },
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable$PrintMode",
            "type": "Class"
          },
          "field": {
            "name": "printMode"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showPrintDialog"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.PrintRequestAttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "interactive"
          }
        },
        {
          "type": {
            "name": "javax.print.PrintService",
            "type": "Class"
          },
          "field": {
            "name": "service"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints this JTable. Takes steps that the majority of developers would take in order to print a JTable. In short, it prepares the table, calls getPrintable to fetch an appropriate Printable, and then sends it to the printer. A boolean parameter allows you to specify whether or not a printing dialog is displayed to the user. When it is, the user may use the dialog to change the destination printer or printing attributes, or even to cancel the print. Another two parameters allow for a PrintService and printing attributes to be specified. These parameters can be used either to provide initial values for the print dialog, or to specify values when the dialog is not shown. A second boolean parameter allows you to specify whether or not to perform printing in an interactive mode. If true, a modal progress dialog, with an abort option, is displayed for the duration of printing . This dialog also prevents any user action which may affect the table. However, it can not prevent the table from being modified by code (for example, another thread that posts updates using SwingUtilities.invokeLater). It is therefore the responsibility of the developer to ensure that no other code modifies the table in any way during printing (invalid modifications include changes in: size, renderers, or underlying data). Printing behavior is undefined when the table is changed during printing. If false is specified for this parameter, no dialog will be displayed and printing will begin immediately on the event-dispatch thread. This blocks any other events, including repaints, from being processed until printing is complete. Although this effectively prevents the table from being changed, it doesn\u0027t provide a good user experience. For this reason, specifying false is only recommended when printing from an application with no visible GUI. Note: Attempting to show the printing dialog or run interactively, while in headless mode, will result in a HeadlessException. Before fetching the printable, this method will gracefully terminate editing, if necessary, to prevent an editor from showing in the printed result. Additionally, JTable will prepare its renderers during printing such that selection and focus are not indicated. As far as customizing further how the table looks in the printout, developers can provide custom renderers or paint code that conditionalize on the value of JComponent.isPaintingForPrint(). See getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat) for more description on how the table is printed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprintMode\u003c/code\u003e - the printing mode that the printable should use",
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a header, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a footer, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003eshowPrintDialog\u003c/code\u003e - whether or not to display a print dialog",
          "\u003ccode\u003eattr\u003c/code\u003e - a \n\u003ccode\u003ePrintRequestAttributeSet\u003c/code\u003e specifying any printing attributes, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003einteractive\u003c/code\u003e - whether or not to print in an interactive mode",
          "\u003ccode\u003eservice\u003c/code\u003e - the destination \n\u003ccode\u003ePrintService\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e to use the default printer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if the method is asked to show a printing dialog or run interactively, and \n\u003ccode\u003eGraphicsEnvironment.isHeadless\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPrintJobAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPrintJobAccess()\u003c/code\u003e\u003c/a\u003e method disallows this thread from creating a print job request",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted"
        ],
        "return": [
          "true, unless printing is cancelled by the user"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.print.Printable",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTable$PrintMode",
            "type": "Class"
          },
          "field": {
            "name": "printMode"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrintable",
      "comment": "Return a Printable for use in printing this JTable. This method is meant for those wishing to customize the default Printable implementation used by JTable\u0027s print methods. Developers wanting simply to print the table should use one of those methods directly. The Printable can be requested in one of two printing modes. In both modes, it spreads table rows naturally in sequence across multiple pages, fitting as many rows as possible per page. PrintMode.NORMAL specifies that the table be printed at its current size. In this mode, there may be a need to spread columns across pages in a similar manner to that of the rows. When the need arises, columns are distributed in an order consistent with the table\u0027s ComponentOrientation. PrintMode.FIT_WIDTH specifies that the output be scaled smaller, if necessary, to fit the table\u0027s entire width (and thereby all columns) on each page. Width and height are scaled equally, maintaining the aspect ratio of the output. The Printable heads the portion of table on each page with the appropriate section from the table\u0027s JTableHeader, if it has one. Header and footer text can be added to the output by providing MessageFormat arguments. The printing code requests Strings from the formats, providing a single item which may be included in the formatted string: an Integer representing the current page number. You are encouraged to read the documentation for MessageFormat as some characters, such as single-quote, are special and need to be escaped. Here\u0027s an example of creating a MessageFormat that can be used to print \"Duke\u0027s Table: Page - \" and the current page number:      // notice the escaping of the single quote\n     // notice how the page number is included with \"{0}\"\n     MessageFormat format \u003d new MessageFormat(\"Duke\u0027\u0027s Table: Page - {0}\");\n The Printable constrains what it draws to the printable area of each page that it prints. Under certain circumstances, it may find it impossible to fit all of a page\u0027s content into that area. In these cases the output may be clipped, but the implementation makes an effort to do something reasonable. Here are a few situations where this is known to occur, and how they may be handled by this particular implementation: In any mode, when the header or footer text is too wide to fit completely in the printable area -- print as much of the text as possible starting from the beginning, as determined by the table\u0027s ComponentOrientation. In any mode, when a row is too tall to fit in the printable area -- print the upper-most portion of the row and paint no lower border on the table. In PrintMode.NORMAL when a column is too wide to fit in the printable area -- print the center portion of the column and leave the left and right borders off the table. It is entirely valid for this Printable to be wrapped inside another in order to create complex reports and documents. You may even request that different pages be rendered into different sized printable areas. The implementation must be prepared to handle this (possibly by doing its layout calculations on the fly). However, providing different heights to each page will likely not work well with PrintMode.NORMAL when it has to spread columns across pages. As far as customizing how the table looks in the printed result, JTable itself will take care of hiding the selection and focus during printing. For additional customizations, your renderers or painting code can customize the look based on the value of JComponent.isPaintingForPrint() Also, before calling this method you may wish to first modify the state of the table, such as to cancel cell editing or have the user size the table appropriately. However, you must not modify the state of the table after this Printable has been fetched (invalid modifications include changes in size or underlying data). The behavior of the returned Printable is undefined once the table has been changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#print(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.attribute.PrintRequestAttributeSet,boolean)\"\u003e\u003ccode\u003eprint(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/Printable.html\" title\u003d\"interface in java.awt.print\"\u003e\u003ccode\u003ePrintable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterJob.html\" title\u003d\"class in java.awt.print\"\u003e\u003ccode\u003ePrinterJob\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprintMode\u003c/code\u003e - the printing mode that the printable should use",
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a header, or null for none",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - a \n\u003ccode\u003eMessageFormat\u003c/code\u003e specifying the text to be used in printing a footer, or null for none"
        ],
        "return": [
          "a \n\u003ccode\u003ePrintable\u003c/code\u003e for printing this JTable"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JTable. For tables, the AccessibleContext takes the form of an AccessibleJTable. A new AccessibleJTable instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJTable that serves as the AccessibleContext of this JTable"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a default JTable that is initialized with a default data model, a default column model, and a default selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultDataModel()\"\u003e\u003ccode\u003ecreateDefaultDataModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultColumnModel()\"\u003e\u003ccode\u003ecreateDefaultColumnModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultSelectionModel()\"\u003e\u003ccode\u003ecreateDefaultSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableModel",
            "type": "Class"
          },
          "field": {
            "name": "dm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JTable that is initialized with dm as the data model, a default column model, and a default selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultColumnModel()\"\u003e\u003ccode\u003ecreateDefaultColumnModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultSelectionModel()\"\u003e\u003ccode\u003ecreateDefaultSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edm\u003c/code\u003e - the data model for the table"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableModel",
            "type": "Class"
          },
          "field": {
            "name": "dm"
          }
        },
        {
          "type": {
            "name": "javax.swing.table.TableColumnModel",
            "type": "Class"
          },
          "field": {
            "name": "cm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JTable that is initialized with dm as the data model, cm as the column model, and a default selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultSelectionModel()\"\u003e\u003ccode\u003ecreateDefaultSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edm\u003c/code\u003e - the data model for the table",
          "\u003ccode\u003ecm\u003c/code\u003e - the column model for the table"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.table.TableModel",
            "type": "Class"
          },
          "field": {
            "name": "dm"
          }
        },
        {
          "type": {
            "name": "javax.swing.table.TableColumnModel",
            "type": "Class"
          },
          "field": {
            "name": "cm"
          }
        },
        {
          "type": {
            "name": "javax.swing.ListSelectionModel",
            "type": "Class"
          },
          "field": {
            "name": "sm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JTable that is initialized with dm as the data model, cm as the column model, and sm as the selection model. If any of the parameters are null this method will initialize the table with the corresponding default model. The autoCreateColumnsFromModel flag is set to false if cm is non-null, otherwise it is set to true and the column model is populated with suitable TableColumns for the columns in dm.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultDataModel()\"\u003e\u003ccode\u003ecreateDefaultDataModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultColumnModel()\"\u003e\u003ccode\u003ecreateDefaultColumnModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTable.html#createDefaultSelectionModel()\"\u003e\u003ccode\u003ecreateDefaultSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edm\u003c/code\u003e - the data model for the table",
          "\u003ccode\u003ecm\u003c/code\u003e - the column model for the table",
          "\u003ccode\u003esm\u003c/code\u003e - the row selection model for the table"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numRows"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numColumns"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JTable with numRows and numColumns of empty cells using DefaultTableModel. The columns will have names of the form \"A\", \"B\", \"C\", etc.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumRows\u003c/code\u003e - the number of rows the table holds",
          "\u003ccode\u003enumColumns\u003c/code\u003e - the number of columns the table holds"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Vector",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.Vector",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rowData"
          }
        },
        {
          "type": {
            "name": "java.util.Vector",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "columnNames"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JTable to display the values in the Vector of Vectors, rowData, with column names, columnNames. The Vectors contained in rowData should contain the values for that row. In other words, the value of the cell at row 1, column 5 can be obtained with the following code: ((Vector)rowData.elementAt(1)).elementAt(5);",
      "tagMap": {
        "param": [
          "\u003ccode\u003erowData\u003c/code\u003e - the data for the new table",
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - names of each column"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {},
              {}
            ]
          },
          "field": {
            "name": "rowData"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnNames"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JTable to display the values in the two dimensional array, rowData, with column names, columnNames. rowData is an array of rows, so the value of the cell at row 1, column 5 can be obtained with the following code:  rowData[1][5]; All rows must be of the same length as columnNames.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erowData\u003c/code\u003e - the data for the new table",
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - names of each column"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JTable$DropLocation",
    "javax.swing.JTable$PrintMode",
    "javax.swing.JTable$AccessibleJTable"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JTable",
  "comment": "The \n\u003ccode\u003eJTable\u003c/code\u003e is used to display and edit regular two-dimensional tables of cells. See \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/table.html\"\u003eHow to Use Tables\u003c/a\u003e in \n\u003cem\u003eThe Java Tutorial\u003c/em\u003e for task-oriented documentation and examples of using \n\u003ccode\u003eJTable\u003c/code\u003e. \n\u003cp\u003e The \u003ccode\u003eJTable\u003c/code\u003e has many facilities that make it possible to customize its rendering and editing but provides defaults for these features so that simple tables can be set up easily. For example, to set up a table with 10 rows and 10 columns of numbers: \u003c/p\u003e\n\u003cpre\u003e      TableModel dataModel \u003d new AbstractTableModel() {\n          public int getColumnCount() { return 10; }\n          public int getRowCount() { return 10;}\n          public Object getValueAt(int row, int col) { return Integer.valueOf(row*col); }\n      };\n      JTable table \u003d new JTable(dataModel);\n      JScrollPane scrollpane \u003d new JScrollPane(table);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eJTable\u003c/code\u003es are typically placed inside of a \u003ccode\u003eJScrollPane\u003c/code\u003e. By default, a \u003ccode\u003eJTable\u003c/code\u003e will adjust its width such that a horizontal scrollbar is unnecessary. To allow for a horizontal scrollbar, invoke \u003ca href\u003d\"#setAutoResizeMode(int)\"\u003e\u003ccode\u003esetAutoResizeMode(int)\u003c/code\u003e\u003c/a\u003e with \u003ccode\u003eAUTO_RESIZE_OFF\u003c/code\u003e. Note that if you wish to use a \u003ccode\u003eJTable\u003c/code\u003e in a standalone view (outside of a \u003ccode\u003eJScrollPane\u003c/code\u003e) and want the header displayed, you can get it using \u003ca href\u003d\"#getTableHeader()\"\u003e\u003ccode\u003egetTableHeader()\u003c/code\u003e\u003c/a\u003e and display it separately. \u003c/p\u003e\n\u003cp\u003e To enable sorting and filtering of rows, use a \u003ccode\u003eRowSorter\u003c/code\u003e. You can set up a row sorter in either of two ways: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eDirectly set the \u003ccode\u003eRowSorter\u003c/code\u003e. For example: \u003ccode\u003etable.setRowSorter(new TableRowSorter(model))\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eSet the \u003ccode\u003eautoCreateRowSorter\u003c/code\u003e property to \u003ccode\u003etrue\u003c/code\u003e, so that the \u003ccode\u003eJTable\u003c/code\u003e creates a \u003ccode\u003eRowSorter\u003c/code\u003e for you. For example: \u003ccode\u003esetAutoCreateRowSorter(true)\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e When designing applications that use the \u003ccode\u003eJTable\u003c/code\u003e it is worth paying close attention to the data structures that will represent the table\u0027s data. The \u003ccode\u003eDefaultTableModel\u003c/code\u003e is a model implementation that uses a \u003ccode\u003eVector\u003c/code\u003e of \u003ccode\u003eVector\u003c/code\u003es of \u003ccode\u003eObject\u003c/code\u003es to store the cell values. As well as copying the data from an application into the \u003ccode\u003eDefaultTableModel\u003c/code\u003e, it is also possible to wrap the data in the methods of the \u003ccode\u003eTableModel\u003c/code\u003e interface so that the data can be passed to the \u003ccode\u003eJTable\u003c/code\u003e directly, as in the example above. This often results in more efficient applications because the model is free to choose the internal representation that best suits the data. A good rule of thumb for deciding whether to use the \u003ccode\u003eAbstractTableModel\u003c/code\u003e or the \u003ccode\u003eDefaultTableModel\u003c/code\u003e is to use the \u003ccode\u003eAbstractTableModel\u003c/code\u003e as the base class for creating subclasses and the \u003ccode\u003eDefaultTableModel\u003c/code\u003e when subclassing is not required. \u003c/p\u003e\n\u003cp\u003e The \"TableExample\" directory in the demo area of the source distribution gives a number of complete examples of \u003ccode\u003eJTable\u003c/code\u003e usage, covering how the \u003ccode\u003eJTable\u003c/code\u003e can be used to provide an editable view of data taken from a database and how to modify the columns in the display to use specialized renderers and editors. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eJTable\u003c/code\u003e uses integers exclusively to refer to both the rows and the columns of the model that it displays. The \u003ccode\u003eJTable\u003c/code\u003e simply takes a tabular range of cells and uses \u003ccode\u003egetValueAt(int, int)\u003c/code\u003e to retrieve the values from the model during painting. It is important to remember that the column and row indexes returned by various \u003ccode\u003eJTable\u003c/code\u003e methods are in terms of the \u003ccode\u003eJTable\u003c/code\u003e (the view) and are not necessarily the same indexes used by the model. \u003c/p\u003e\n\u003cp\u003e By default, columns may be rearranged in the \u003ccode\u003eJTable\u003c/code\u003e so that the view\u0027s columns appear in a different order to the columns in the model. This does not affect the implementation of the model at all: when the columns are reordered, the \u003ccode\u003eJTable\u003c/code\u003e maintains the new order of the columns internally and converts its column indices before querying the model. \u003c/p\u003e\n\u003cp\u003e So, when writing a \u003ccode\u003eTableModel\u003c/code\u003e, it is not necessary to listen for column reordering events as the model will be queried in its own coordinate system regardless of what is happening in the view. In the examples area there is a demonstration of a sorting algorithm making use of exactly this technique to interpose yet another coordinate system where the order of the rows is changed, rather than the order of the columns. \u003c/p\u003e\n\u003cp\u003e Similarly when using the sorting and filtering functionality provided by \u003ccode\u003eRowSorter\u003c/code\u003e the underlying \u003ccode\u003eTableModel\u003c/code\u003e does not need to know how to do sorting, rather \u003ccode\u003eRowSorter\u003c/code\u003e will handle it. Coordinate conversions will be necessary when using the row based methods of \u003ccode\u003eJTable\u003c/code\u003e with the underlying \u003ccode\u003eTableModel\u003c/code\u003e. All of \u003ccode\u003eJTable\u003c/code\u003es row based methods are in terms of the \u003ccode\u003eRowSorter\u003c/code\u003e, which is not necessarily the same as that of the underlying \u003ccode\u003eTableModel\u003c/code\u003e. For example, the selection is always in terms of \u003ccode\u003eJTable\u003c/code\u003e so that when using \u003ccode\u003eRowSorter\u003c/code\u003e you will need to convert using \u003ccode\u003econvertRowIndexToView\u003c/code\u003e or \u003ccode\u003econvertRowIndexToModel\u003c/code\u003e. The following shows how to convert coordinates from \u003ccode\u003eJTable\u003c/code\u003e to that of the underlying model: \u003c/p\u003e\n\u003cpre\u003e   int[] selection \u003d table.getSelectedRows();\n   for (int i \u003d 0; i \u0026lt; selection.length; i++) {\n     selection[i] \u003d table.convertRowIndexToModel(selection[i]);\n   }\n   // selection is now in terms of the underlying TableModel\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e By default if sorting is enabled \u003ccode\u003eJTable\u003c/code\u003e will persist the selection and variable row heights in terms of the model on sorting. For example if row 0, in terms of the underlying model, is currently selected, after the sort row 0, in terms of the underlying model will be selected. Visually the selection may change, but in terms of the underlying model it will remain the same. The one exception to that is if the model index is no longer visible or was removed. For example, if row 0 in terms of model was filtered out the selection will be empty after the sort. \u003c/p\u003e\n\u003cp\u003e J2SE 5 adds methods to \u003ccode\u003eJTable\u003c/code\u003e to provide convenient access to some common printing needs. Simple new \u003ca href\u003d\"#print()\"\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003c/a\u003e methods allow for quick and easy addition of printing support to your application. In addition, a new \u003ca href\u003d\"#getPrintable(javax.swing.JTable.PrintMode,java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e method is available for more advanced printing needs. \u003c/p\u003e\n\u003cp\u003e As for all \u003ccode\u003eJComponent\u003c/code\u003e classes, you can use \u003ca href\u003d\"InputMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputMap\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ActionMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eActionMap\u003c/code\u003e\u003c/a\u003e to associate an \u003ca href\u003d\"Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e object with a \u003ca href\u003d\"KeyStroke.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eKeyStroke\u003c/code\u003e\u003c/a\u003e and execute the action under specified conditions. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}