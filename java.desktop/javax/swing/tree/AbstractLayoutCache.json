{
  "packageName": "javax.swing.tree",
  "simpleName": "AbstractLayoutCache",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.tree.AbstractLayoutCache$NodeDimensions",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "nodeDimensions",
      "comment": "Object responsible for getting the size of a node.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "treeModel",
      "comment": "Model providing information.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeSelectionModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "treeSelectionModel",
      "comment": "Selection model.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rootVisible",
      "comment": "True if the root node is displayed, false if its children are the highest visible nodes.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rowHeight",
      "comment": "Height to use for each row. If this is \u003c\u003d 0 the renderer will be used to determine the height for each row.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.AbstractLayoutCache$NodeDimensions",
            "type": "Class"
          },
          "field": {
            "name": "nd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNodeDimensions",
      "comment": "Sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003end\u003c/code\u003e - a \n\u003ccode\u003eNodeDimensions\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.AbstractLayoutCache$NodeDimensions",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNodeDimensions",
      "comment": "Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eNodeDimensions\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeModel",
            "type": "Class"
          },
          "field": {
            "name": "newModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the TreeModel that will provide the data.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewModel\u003c/code\u003e - the \n\u003ccode\u003eTreeModel\u003c/code\u003e that is to provide the data"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModel",
      "comment": "Returns the TreeModel that is providing the data.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTreeModel\u003c/code\u003e that is providing the data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "rootVisible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRootVisible",
      "comment": "Determines whether or not the root node from the TreeModel is visible.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether or not the root node from the TreeModel is visible."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/AbstractLayoutCache.html#rootVisible\"\u003e\u003ccode\u003erootVisible\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erootVisible\u003c/code\u003e - true if the root node of the tree is to be displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRootVisible",
      "comment": "Returns true if the root node of the tree is displayed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/AbstractLayoutCache.html#rootVisible\"\u003e\u003ccode\u003erootVisible\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the root node of the tree is displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowHeight",
      "comment": "Sets the height of each cell. If the specified value is less than or equal to zero the current cell renderer is queried for each row\u0027s height.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The height of each cell."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erowHeight\u003c/code\u003e - the height of each cell, in pixels"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowHeight",
      "comment": "Returns the height of each row. If the returned value is less than or equal to 0 the height for each row is determined by the renderer.",
      "tagMap": {
        "return": [
          "the height of each row"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeSelectionModel",
            "type": "Class"
          },
          "field": {
            "name": "newLSM"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionModel",
      "comment": "Sets the TreeSelectionModel used to manage the selection to new LSM.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewLSM\u003c/code\u003e - the new \n\u003ccode\u003eTreeSelectionModel\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionModel",
      "comment": "Returns the model used to maintain the selection.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003etreeSelectionModel\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredHeight",
      "comment": "Returns the preferred height.",
      "tagMap": {
        "return": [
          "the preferred height"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredWidth",
      "comment": "Returns the preferred width for the passed in region. The region is defined by the path closest to (bounds.x, bounds.y) and ends at bounds.height + bounds.y. If bounds is null, the preferred width for all the nodes will be returned (and this may be a VERY expensive computation).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebounds\u003c/code\u003e - the region being queried"
        ],
        "return": [
          "the preferred width for the passed in region"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isExpanded",
      "comment": "Returns true if the value identified by row is currently expanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - TreePath to check"
        ],
        "return": [
          "whether TreePath is expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "placeIn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBounds",
      "comment": "Returns a rectangle giving the bounds needed to draw path.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a \n\u003ccode\u003eTreePath\u003c/code\u003e specifying a node",
          "\u003ccode\u003eplaceIn\u003c/code\u003e - a \n\u003ccode\u003eRectangle\u003c/code\u003e object giving the available space"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle\u003c/code\u003e object specifying the space to be used"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPathForRow",
      "comment": "Returns the path for passed in row. If row is not visible null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row being queried"
        ],
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e for the given row"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRowForPath",
      "comment": "Returns the row that the last item identified in path is visible at. Will return -1 if any of the elements in path are not currently visible.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e being queried"
        ],
        "return": [
          "the row where the last item in path is visible or -1 if any elements in path aren\u0027t currently visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPathClosestTo",
      "comment": "Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it\u0027ll always return a valid path. If you need to test if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the horizontal component of the desired location",
          "\u003ccode\u003ey\u003c/code\u003e - the vertical component of the desired location"
        ],
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e closest to the specified point"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVisiblePathsFrom",
      "comment": "Returns an Enumerator that increments over the visible paths starting at the passed in location. The ordering of the enumeration is based on how the paths are displayed. The first element of the returned enumeration will be path, unless it isn\u0027t visible, in which case null will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the starting location for the enumeration"
        ],
        "return": [
          "the \n\u003ccode\u003eEnumerator\u003c/code\u003e starting at the desired location"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVisibleChildCount",
      "comment": "Returns the number of visible children for row.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path being queried"
        ],
        "return": [
          "the number of visible children for the specified path"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isExpanded"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setExpandedState",
      "comment": "Marks the path path expanded state to isExpanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path being expanded or collapsed",
          "\u003ccode\u003eisExpanded\u003c/code\u003e - true if the path should be expanded, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getExpandedState",
      "comment": "Returns true if the path is expanded, and visible.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path being queried"
        ],
        "return": [
          "true if the path is expanded and visible, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRowCount",
      "comment": "Number of rows being displayed.",
      "tagMap": {
        "return": [
          "the number of rows being displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "invalidateSizes",
      "comment": "Informs the TreeState that it needs to recalculate all the sizes it is referencing.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "invalidatePathBounds",
      "comment": "Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path being updated"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "treeNodesChanged",
      "comment": "Invoked after a node (or a set of siblings) has changed in some way. The node(s) have not changed locations in the tree or altered their children arrays, but other attributes have changed and may affect presentation. Example: the name of a file has changed, but it is in the same location in the file system. e.path() returns the path the parent of the changed node(s). e.childIndices() returns the index(es) of the changed node(s).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "treeNodesInserted",
      "comment": "Invoked after nodes have been inserted into the tree. e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "treeNodesRemoved",
      "comment": "Invoked after nodes have been removed from the tree. Note that if a subtree is removed from the tree, this method may only be invoked once for the root of the removed subtree, not once for each individual set of siblings removed. e.path() returns the former parent of the deleted nodes. e.childIndices() returns the indices the nodes had before they were deleted in ascending order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeModelEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "treeStructureChanged",
      "comment": "Invoked after the tree has drastically changed structure from a given node down. If the path returned by e.getPath() is of length one and the first element does not identify the current root node the first element should become the new root of the tree. e.path() holds the path to the node. e.childIndices() returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowsForPaths",
      "comment": "Returns the rows that the TreePath instances in path are being displayed at. This method should return an array of the same length as that passed in, and if one of the TreePaths in path is not valid its entry in the array should be set to -1.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/RowMapper.html#getRowsForPaths(javax.swing.tree.TreePath%5B%5D)\"\u003egetRowsForPaths\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/RowMapper.html\" title\u003d\"interface in javax.swing.tree\"\u003eRowMapper\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - the array of \n\u003ccode\u003eTreePath\u003c/code\u003es being queried"
        ],
        "return": [
          "an array of the same length that is passed in containing the rows that each corresponding where each \n\u003ccode\u003eTreePath\u003c/code\u003e is displayed; if \n\u003ccode\u003epaths\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, \n\u003ccode\u003enull\u003c/code\u003e is returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "depth"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "expanded"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "placeIn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getNodeDimensions",
      "comment": "Returns, by reference in placeIn, the size needed to represent value. If inPlace is null, a newly created Rectangle should be returned, otherwise the value should be placed in inPlace and returned. This will return null if there is no renderer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the \n\u003ccode\u003evalue\u003c/code\u003e to be represented",
          "\u003ccode\u003erow\u003c/code\u003e - row being queried",
          "\u003ccode\u003edepth\u003c/code\u003e - the depth of the row",
          "\u003ccode\u003eexpanded\u003c/code\u003e - true if row is expanded, false otherwise",
          "\u003ccode\u003eplaceIn\u003c/code\u003e - a \n\u003ccode\u003eRectangle\u003c/code\u003e containing the size needed to represent \n\u003ccode\u003evalue\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle\u003c/code\u003e containing the node dimensions, or \n\u003ccode\u003enull\u003c/code\u003e if node has no dimension"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isFixedRowHeight",
      "comment": "Returns true if the height of each row is a fixed size.",
      "tagMap": {
        "return": [
          "whether the height of each row is a fixed size"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.tree.AbstractLayoutCache$NodeDimensions"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.tree.AbstractLayoutCache",
  "comment": "\u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \n\u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \n\u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {}
}