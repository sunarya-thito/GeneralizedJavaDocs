{
  "packageName": "javax.swing.tree",
  "simpleName": "DefaultMutableTreeNode",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EMPTY_ENUMERATION",
      "comment": "An enumeration that is always empty. This is used when an enumeration of a leaf node\u0027s children is requested.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.MutableTreeNode",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "parent",
      "comment": "this node\u0027s parent, or null if this node has no parent",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Vector",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "children",
      "comment": "array of children, may be null if this node has no children",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "userObject",
      "comment": "optional user object",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "allowsChildren",
      "comment": "true if the node is able to have children",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.MutableTreeNode",
            "type": "Class"
          },
          "name": "newChild",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "childIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Removes newChild from its present parent (if it has a parent), sets the child\u0027s parent to this node, and then adds the child to this node\u0027s child array at index childIndex. newChild must not be null and must not be an ancestor of this node.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003eisNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html#insert(javax.swing.tree.MutableTreeNode,int)\"\u003einsert\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eMutableTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewChild\u003c/code\u003e - the MutableTreeNode to insert under this node",
          "\u003ccode\u003echildIndex\u003c/code\u003e - the index in this node\u0027s child array where this node is to be inserted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003echildIndex\u003c/code\u003e is out of bounds",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewChild\u003c/code\u003e is null or is an ancestor of this node",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this node does not allow children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "childIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes the child at the specified index from this node\u0027s children and sets that node\u0027s parent to null. The child node to remove must be a MutableTreeNode.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html#remove(int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eMutableTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echildIndex\u003c/code\u003e - the index in this node\u0027s child array of the child to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003echildIndex\u003c/code\u003e is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.MutableTreeNode",
            "type": "Class"
          },
          "name": "newParent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParent",
      "comment": "Sets this node\u0027s parent to newParent but does not change the parent\u0027s child array. This method is called from insert() and remove() to reassign a child\u0027s parent, it should not be messaged from anywhere else.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html#setParent(javax.swing.tree.MutableTreeNode)\"\u003esetParent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eMutableTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewParent\u003c/code\u003e - this node\u0027s new parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParent",
      "comment": "Returns this node\u0027s parent or null if this node has no parent.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#getParent()\"\u003egetParent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this node\u0027s parent TreeNode, or null if this node has no parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildAt",
      "comment": "Returns the child at the specified index in this node\u0027s child array.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#getChildAt(int)\"\u003egetChildAt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - an index into this node\u0027s child array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is out of bounds"
        ],
        "return": [
          "the TreeNode in this node\u0027s child array at the specified index"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildCount",
      "comment": "Returns the number of children of this node.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#getChildCount()\"\u003egetChildCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an int giving the number of children of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "aChild",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIndex",
      "comment": "Returns the index of the specified child in this node\u0027s child array. If the specified node is not a child of this node, returns -1. This method performs a linear search and is O(n) where n is the number of children.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#getIndex(javax.swing.tree.TreeNode)\"\u003egetIndex\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaChild\u003c/code\u003e - the TreeNode to search for among this node\u0027s children"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaChild\u003c/code\u003e is null"
        ],
        "return": [
          "an int giving the index of the node in this node\u0027s child array, or \n\u003ccode\u003e-1\u003c/code\u003e if the specified node is a not a child of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "children",
      "comment": "Creates and returns a forward-order enumeration of this node\u0027s children. Modifying this node\u0027s child array invalidates any child enumerations created before the modification.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#children()\"\u003echildren\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an Enumeration of this node\u0027s children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "allows",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAllowsChildren",
      "comment": "Determines whether or not this node is allowed to have children. If allows is false, all of this node\u0027s children are removed. Note: By default, a node allows children.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eallows\u003c/code\u003e - true if this node is allowed to have children"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAllowsChildren",
      "comment": "Returns true if this node is allowed to have children.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#getAllowsChildren()\"\u003egetAllowsChildren\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this node allows children, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "userObject",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUserObject",
      "comment": "Sets the user object for this node to userObject.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getUserObject()\"\u003e\u003ccode\u003egetUserObject()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html#setUserObject(java.lang.Object)\"\u003esetUserObject\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eMutableTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003euserObject\u003c/code\u003e - the Object that constitutes this node\u0027s user-specified data"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUserObject",
      "comment": "Returns this node\u0027s user object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#setUserObject(java.lang.Object)\"\u003e\u003ccode\u003esetUserObject(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the Object stored at this node by the user"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeFromParent",
      "comment": "Removes the subtree rooted at this node from the tree, giving this node a null parent. Does nothing if this node is the root of its tree.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html#removeFromParent()\"\u003eremoveFromParent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eMutableTreeNode\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.MutableTreeNode",
            "type": "Class"
          },
          "name": "aChild",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes aChild from this node\u0027s child array, giving it a null parent.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html#remove(javax.swing.tree.MutableTreeNode)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eMutableTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaChild\u003c/code\u003e - a child of this node to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaChild\u003c/code\u003e is null or is not a child of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAllChildren",
      "comment": "Removes all of this node\u0027s children, setting their parents to null. If this node has no children, this method does nothing.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.MutableTreeNode",
            "type": "Class"
          },
          "name": "newChild",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Removes newChild from its parent and makes it a child of this node by adding it to the end of this node\u0027s child array.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#insert(javax.swing.tree.MutableTreeNode,int)\"\u003e\u003ccode\u003einsert(javax.swing.tree.MutableTreeNode, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewChild\u003c/code\u003e - node to add as a child of this node"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewChild\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this node does not allow children"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "anotherNode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNodeAncestor",
      "comment": "Returns true if anotherNode is an ancestor of this node -- if it is this node, this node\u0027s parent, or an ancestor of this node\u0027s parent. (Note that a node is considered an ancestor of itself.) If anotherNode is null, this method returns false. This operation is at worst O(h) where h is the distance from the root to this node.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003eisNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003egetSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherNode\u003c/code\u003e - node to test as an ancestor of this node"
        ],
        "return": [
          "true if this node is a descendant of \n\u003ccode\u003eanotherNode\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.DefaultMutableTreeNode",
            "type": "Class"
          },
          "name": "anotherNode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNodeDescendant",
      "comment": "Returns true if anotherNode is a descendant of this node -- if it is this node, one of this node\u0027s children, or a descendant of one of this node\u0027s children. Note that a node is considered a descendant of itself. If anotherNode is null, returns false. This operation is at worst O(h) where h is the distance from the root to anotherNode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeAncestor(javax.swing.tree.TreeNode)\"\u003e\u003ccode\u003eisNodeAncestor(javax.swing.tree.TreeNode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003egetSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherNode\u003c/code\u003e - node to test as descendant of this node"
        ],
        "return": [
          "true if this node is an ancestor of \n\u003ccode\u003eanotherNode\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.DefaultMutableTreeNode",
            "type": "Class"
          },
          "name": "aNode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSharedAncestor",
      "comment": "Returns the nearest common ancestor to this node and aNode. Returns null, if no such ancestor exists -- if this node and aNode are in different trees or if aNode is null. A node is considered an ancestor of itself.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeAncestor(javax.swing.tree.TreeNode)\"\u003e\u003ccode\u003eisNodeAncestor(javax.swing.tree.TreeNode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003eisNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaNode\u003c/code\u003e - node to find common ancestor with"
        ],
        "return": [
          "nearest ancestor common to this node and \n\u003ccode\u003eaNode\u003c/code\u003e, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.DefaultMutableTreeNode",
            "type": "Class"
          },
          "name": "aNode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNodeRelated",
      "comment": "Returns true if and only if aNode is in the same tree as this node. Returns false if aNode is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003egetSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getRoot()\"\u003e\u003ccode\u003egetRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaNode\u003c/code\u003e - node to find common ancestor with"
        ],
        "return": [
          "true if \n\u003ccode\u003eaNode\u003c/code\u003e is in the same tree as this node; false if \n\u003ccode\u003eaNode\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDepth",
      "comment": "Returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf. If this node has no children, returns 0. This operation is much more expensive than getLevel() because it must effectively traverse the entire tree rooted at this node.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getLevel()\"\u003e\u003ccode\u003egetLevel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the depth of the tree whose root is this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLevel",
      "comment": "Returns the number of levels above this node -- the distance from the root to this node. If this node is the root, returns 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getDepth()\"\u003e\u003ccode\u003egetDepth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of levels above this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPath",
      "comment": "Returns the path from the root, to get to this node. The last element in the path is this node.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of TreeNode objects giving the path, where the first element in the path is the root and the last element is this node."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "aNode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "depth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getPathToRoot",
      "comment": "Builds the parents of node up to and including the root node, where the original node is the last element in the returned array. The length of the returned array gives the node\u0027s depth in the tree.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaNode\u003c/code\u003e - the TreeNode to get the path for",
          "\u003ccode\u003edepth\u003c/code\u003e - an int giving the number of steps already taken towards the root (on recursive calls), used to size the returned array"
        ],
        "return": [
          "an array of TreeNodes giving the path from the root to the specified node"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUserObjectPath",
      "comment": "Returns the user object path, from the root, to get to this node. If some of the TreeNodes in the path have null user objects, the returned path will contain nulls.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the user object path, from the root, to get to this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoot",
      "comment": "Returns the root of the tree that contains this node. The root is the ancestor with a null parent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeAncestor(javax.swing.tree.TreeNode)\"\u003e\u003ccode\u003eisNodeAncestor(javax.swing.tree.TreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the root of the tree that contains this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRoot",
      "comment": "Returns true if this node is the root of the tree. The root is the only node in the tree with a null parent; every tree has exactly one root.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this node is the root of its tree"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextNode",
      "comment": "Returns the node that follows this node in a preorder traversal of this node\u0027s tree. Returns null if this node is the last node of the traversal. This is an inefficient way to traverse the entire tree; use an enumeration, instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#preorderEnumeration()\"\u003e\u003ccode\u003epreorderEnumeration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the node that follows this node in a preorder traversal, or null if this node is last"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreviousNode",
      "comment": "Returns the node that precedes this node in a preorder traversal of this node\u0027s tree. Returns null if this node is the first node of the traversal -- the root of the tree. This is an inefficient way to traverse the entire tree; use an enumeration, instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#preorderEnumeration()\"\u003e\u003ccode\u003epreorderEnumeration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the node that precedes this node in a preorder traversal, or null if this node is the first"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preorderEnumeration",
      "comment": "Creates and returns an enumeration that traverses the subtree rooted at this node in preorder. The first node returned by the enumeration\u0027s nextElement() method is this node. Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#postorderEnumeration()\"\u003e\u003ccode\u003epostorderEnumeration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration for traversing the tree in preorder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postorderEnumeration",
      "comment": "Creates and returns an enumeration that traverses the subtree rooted at this node in postorder. The first node returned by the enumeration\u0027s nextElement() method is the leftmost leaf. This is the same as a depth-first traversal. Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#depthFirstEnumeration()\"\u003e\u003ccode\u003edepthFirstEnumeration()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#preorderEnumeration()\"\u003e\u003ccode\u003epreorderEnumeration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration for traversing the tree in postorder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "breadthFirstEnumeration",
      "comment": "Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order. The first node returned by the enumeration\u0027s nextElement() method is this node. Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#depthFirstEnumeration()\"\u003e\u003ccode\u003edepthFirstEnumeration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration for traversing the tree in breadth-first order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "depthFirstEnumeration",
      "comment": "Creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order. The first node returned by the enumeration\u0027s nextElement() method is the leftmost leaf. This is the same as a postorder traversal. Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#breadthFirstEnumeration()\"\u003e\u003ccode\u003ebreadthFirstEnumeration()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#postorderEnumeration()\"\u003e\u003ccode\u003epostorderEnumeration()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration for traversing the tree in depth-first order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "ancestor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pathFromAncestorEnumeration",
      "comment": "Creates and returns an enumeration that follows the path from ancestor to this node. The enumeration\u0027s nextElement() method first returns ancestor, then the child of ancestor that is an ancestor of this node, and so on, and finally returns this node. Creation of the enumeration is O(m) where m is the number of nodes between this node and ancestor, inclusive. Each nextElement() message is O(1). Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeAncestor(javax.swing.tree.TreeNode)\"\u003e\u003ccode\u003eisNodeAncestor(javax.swing.tree.TreeNode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003eisNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eancestor\u003c/code\u003e - the node to start enumeration from"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eancestor\u003c/code\u003e is not an ancestor of this node"
        ],
        "return": [
          "an enumeration for following the path from an ancestor of this node to this one"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "aNode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNodeChild",
      "comment": "Returns true if aNode is a child of this node. If aNode is null, this method returns false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaNode\u003c/code\u003e - the node to determinate whether it is a child"
        ],
        "return": [
          "true if \n\u003ccode\u003eaNode\u003c/code\u003e is a child of this node; false if \n\u003ccode\u003eaNode\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFirstChild",
      "comment": "Returns this node\u0027s first child. If this node has no children, throws NoSuchElementException.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this node has no children"
        ],
        "return": [
          "the first child of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLastChild",
      "comment": "Returns this node\u0027s last child. If this node has no children, throws NoSuchElementException.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this node has no children"
        ],
        "return": [
          "the last child of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "aChild",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildAfter",
      "comment": "Returns the child in this node\u0027s child array that immediately follows aChild, which must be a child of this node. If aChild is the last child, returns null. This method performs a linear search of this node\u0027s children for aChild and is O(n) where n is the number of children; to traverse the entire array of children, use an enumeration instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#children\"\u003e\u003ccode\u003echildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaChild\u003c/code\u003e - the child node to look for next child after it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaChild\u003c/code\u003e is null or is not a child of this node"
        ],
        "return": [
          "the child of this node that immediately follows \n\u003ccode\u003eaChild\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "aChild",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildBefore",
      "comment": "Returns the child in this node\u0027s child array that immediately precedes aChild, which must be a child of this node. If aChild is the first child, returns null. This method performs a linear search of this node\u0027s children for aChild and is O(n) where n is the number of children.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaChild\u003c/code\u003e - the child node to look for previous child before it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaChild\u003c/code\u003e is null or is not a child of this node"
        ],
        "return": [
          "the child of this node that immediately precedes \n\u003ccode\u003eaChild\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "anotherNode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNodeSibling",
      "comment": "Returns true if anotherNode is a sibling of (has the same parent as) this node. A node is its own sibling. If anotherNode is null, returns false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eanotherNode\u003c/code\u003e - node to test as sibling of this node"
        ],
        "return": [
          "true if \n\u003ccode\u003eanotherNode\u003c/code\u003e is a sibling of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSiblingCount",
      "comment": "Returns the number of siblings of this node. A node is its own sibling (if it has no parent or no siblings, this method returns 1).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of siblings of this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextSibling",
      "comment": "Returns the next sibling of this node in the parent\u0027s children array. Returns null if this node has no parent or is the parent\u0027s last child. This method performs a linear search that is O(n) where n is the number of children; to traverse the entire array, use the parent\u0027s child enumeration instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#children\"\u003e\u003ccode\u003echildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the sibling of this node that immediately follows this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreviousSibling",
      "comment": "Returns the previous sibling of this node in the parent\u0027s children array. Returns null if this node has no parent or is the parent\u0027s first child. This method performs a linear search that is O(n) where n is the number of children.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the sibling of this node that immediately precedes this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeaf",
      "comment": "Returns true if this node has no children. To distinguish between nodes that have no children and nodes that cannot have children (e.g. to distinguish files from empty directories), use this method in conjunction with getAllowsChildren",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getAllowsChildren()\"\u003e\u003ccode\u003egetAllowsChildren()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#isLeaf()\"\u003eisLeaf\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeNode\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this node has no children"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFirstLeaf",
      "comment": "Finds and returns the first leaf that is a descendant of this node -- either this node or its first child\u0027s first leaf. Returns this node if it is a leaf.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isLeaf()\"\u003e\u003ccode\u003eisLeaf()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003eisNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the first leaf in the subtree rooted at this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLastLeaf",
      "comment": "Finds and returns the last leaf that is a descendant of this node -- either this node or its last child\u0027s last leaf. Returns this node if it is a leaf.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isLeaf()\"\u003e\u003ccode\u003eisLeaf()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\"\u003e\u003ccode\u003eisNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the last leaf in the subtree rooted at this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextLeaf",
      "comment": "Returns the leaf after this node or null if this node is the last leaf in the tree. In this implementation of the MutableNode interface, this operation is very inefficient. In order to determine the next node, this method first performs a linear search in the parent\u0027s child-list in order to find the current node. That implementation makes the operation suitable for short traversals from a known position. But to traverse all of the leaves in the tree, you should use depthFirstEnumeration to enumerate the nodes in the tree and use isLeaf on each node to determine which are leaves.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#depthFirstEnumeration()\"\u003e\u003ccode\u003edepthFirstEnumeration()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isLeaf()\"\u003e\u003ccode\u003eisLeaf()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "returns the next leaf past this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.DefaultMutableTreeNode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreviousLeaf",
      "comment": "Returns the leaf before this node or null if this node is the first leaf in the tree. In this implementation of the MutableNode interface, this operation is very inefficient. In order to determine the previous node, this method first performs a linear search in the parent\u0027s child-list in order to find the current node. That implementation makes the operation suitable for short traversals from a known position. But to traverse all of the leaves in the tree, you should use depthFirstEnumeration to enumerate the nodes in the tree and use isLeaf on each node to determine which are leaves.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#depthFirstEnumeration()\"\u003e\u003ccode\u003edepthFirstEnumeration()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isLeaf()\"\u003e\u003ccode\u003eisLeaf()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "returns the leaf before this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeafCount",
      "comment": "Returns the total number of leaves that are descendants of this node. If this node is a leaf, returns 1. This method is O(n) where n is the number of descendants of this node.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#isNodeAncestor(javax.swing.tree.TreeNode)\"\u003e\u003ccode\u003eisNodeAncestor(javax.swing.tree.TreeNode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of leaves beneath this node"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the result of sending toString() to this node\u0027s user object, or the empty string if the node has no user object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultMutableTreeNode.html#getUserObject()\"\u003e\u003ccode\u003egetUserObject()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Overridden to make clone public. Returns a shallow copy of this node; the new node has no parent or children and has a reference to the same user object, if any.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a copy of this node"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a tree node that has no parent and no children, but which allows children.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "userObject",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a tree node with no parent, no children, but which allows children, and initializes it with the specified user object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euserObject\u003c/code\u003e - an Object provided by the user that constitutes the node\u0027s data"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "userObject",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "allowsChildren",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a tree node with no parent, no children, initialized with the specified user object, and that allows children only if specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euserObject\u003c/code\u003e - an Object provided by the user that constitutes the node\u0027s data",
          "\u003ccode\u003eallowsChildren\u003c/code\u003e - if true, the node is allowed to have child nodes -- otherwise, it is always a leaf node"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.tree.DefaultMutableTreeNode",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/MutableTreeNode.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eMutableTreeNode\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}