{
  "packageName": "javax.swing.tree",
  "simpleName": "TreeModel",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoot",
      "comment": "Returns the root of the tree. Returns null only if the tree has no nodes.",
      "tagMap": {
        "return": [
          "the root of the tree"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChild",
      "comment": "Returns the child of parent at index index in the parent\u0027s child array. parent must be a node previously obtained from this data source. This should not return null if index is a valid index for parent (that is index \u003e\u003d 0 \u0026\u0026 index \u003c getChildCount(parent)).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a node in the tree, obtained from this data source",
          "\u003ccode\u003eindex\u003c/code\u003e - index of child to be returned"
        ],
        "return": [
          "the child of \n\u003ccode\u003eparent\u003c/code\u003e at index \n\u003ccode\u003eindex\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChildCount",
      "comment": "Returns the number of children of parent. Returns 0 if the node is a leaf or if it has no children. parent must be a node previously obtained from this data source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a node in the tree, obtained from this data source"
        ],
        "return": [
          "the number of children of the node \n\u003ccode\u003eparent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLeaf",
      "comment": "Returns true if node is a leaf. It is possible for this method to return false even if node has no children. A directory in a filesystem, for example, may contain no files; the node representing the directory is not a leaf, but it also has no children.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - a node in the tree, obtained from this data source"
        ],
        "return": [
          "true if \n\u003ccode\u003enode\u003c/code\u003e is a leaf"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "valueForPathChanged",
      "comment": "Messaged when the user has altered the value for the item identified by path to newValue. If newValue signifies a truly new value the model should post a treeNodesChanged event.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - path to the node that the user has altered",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value from the TreeCellEditor"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "child"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getIndexOfChild",
      "comment": "Returns the index of child in parent. If either parent or child is null, returns -1. If either parent or child don\u0027t belong to this tree model, returns -1.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a node in the tree, obtained from this data source",
          "\u003ccode\u003echild\u003c/code\u003e - the node we are interested in"
        ],
        "return": [
          "the index of the child in the parent, or -1 if either \n\u003ccode\u003echild\u003c/code\u003e or \n\u003ccode\u003eparent\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e or don\u0027t belong to this tree model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeModelListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addTreeModelListener",
      "comment": "Adds a listener for the TreeModelEvent posted after the tree changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#removeTreeModelListener(javax.swing.event.TreeModelListener)\"\u003e\u003ccode\u003eremoveTreeModelListener(javax.swing.event.TreeModelListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeModelListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeTreeModelListener",
      "comment": "Removes a listener previously added with addTreeModelListener.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#addTreeModelListener(javax.swing.event.TreeModelListener)\"\u003e\u003ccode\u003eaddTreeModelListener(javax.swing.event.TreeModelListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to remove"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.tree.TreeModel",
  "comment": "The model used by \n\u003ccode\u003eJTree\u003c/code\u003e. \n\u003cp\u003e \u003ccode\u003eJTree\u003c/code\u003e and its related classes make extensive use of \u003ccode\u003eTreePath\u003c/code\u003es for identifying nodes in the \u003ccode\u003eTreeModel\u003c/code\u003e. If a \u003ccode\u003eTreeModel\u003c/code\u003e returns the same object, as compared by \u003ccode\u003eequals\u003c/code\u003e, at two different indices under the same parent then the resulting \u003ccode\u003eTreePath\u003c/code\u003e objects will be considered equal as well. Some implementations may assume that if two \u003ccode\u003eTreePath\u003c/code\u003es are equal, they identify the same node. If this condition is not met, painting problems and other oddities may result. In other words, if \u003ccode\u003egetChild\u003c/code\u003e for a given parent returns the same Object (as determined by \u003ccode\u003eequals\u003c/code\u003e) problems may result, and it is recommended you avoid doing this. \u003c/p\u003e\n\u003cp\u003e Similarly \u003ccode\u003eJTree\u003c/code\u003e and its related classes place \u003ccode\u003eTreePath\u003c/code\u003es in \u003ccode\u003eMap\u003c/code\u003es. As such if a node is requested twice, the return values must be equal (using the \u003ccode\u003eequals\u003c/code\u003e method) and have the same \u003ccode\u003ehashCode\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e For further information on tree models, including an example of a custom implementation, see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\"\u003eHow to Use Trees\u003c/a\u003e in \u003cem\u003eThe Java Tutorial.\u003c/em\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreePath.html\" title\u003d\"class in javax.swing.tree\"\u003e\u003ccode\u003eTreePath\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}