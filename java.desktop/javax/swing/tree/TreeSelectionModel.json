{
  "packageName": "javax.swing.tree",
  "simpleName": "TreeSelectionModel",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SINGLE_TREE_SELECTION",
      "comment": "Selection can only contain one path at a time.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CONTIGUOUS_TREE_SELECTION",
      "comment": "Selection can only be contiguous. This will only be enforced if a RowMapper instance is provided. That is, if no RowMapper is set this behaves the same as DISCONTIGUOUS_TREE_SELECTION.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.tree.TreeSelectionModel.CONTIGUOUS_TREE_SELECTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DISCONTIGUOUS_TREE_SELECTION",
      "comment": "Selection can contain any number of items that are not necessarily contiguous.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.tree.TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSelectionMode",
      "comment": "Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. This may change the selection if the current selection is not valid for the new mode. For example, if three TreePaths are selected when the mode is changed to SINGLE_TREE_SELECTION, only one TreePath will remain selected. It is up to the particular implementation to decide what TreePath remains selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emode\u003c/code\u003e - selection mode to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSelectionMode",
      "comment": "Returns the current selection mode, one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.",
      "tagMap": {
        "return": [
          "the current selection mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSelectionPath",
      "comment": "Sets the selection to path. If this represents a change, then the TreeSelectionListeners are notified. If path is null, this has the same effect as invoking clearSelection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - new path to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSelectionPaths",
      "comment": "Sets the selection to path. If this represents a change, then the TreeSelectionListeners are notified. If paths is null, this has the same effect as invoking clearSelection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - new selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addSelectionPath",
      "comment": "Adds path to the current selection. If path is not currently in the selection the TreeSelectionListeners are notified. This has no effect if path is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the new path to add to the current selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addSelectionPaths",
      "comment": "Adds paths to the current selection. If any of the paths in paths are not currently in the selection the TreeSelectionListeners are notified. This has no effect if paths is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - the new paths to add to the current selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeSelectionPath",
      "comment": "Removes path from the selection. If path is in the selection The TreeSelectionListeners are notified. This has no effect if path is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to remove from the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeSelectionPaths",
      "comment": "Removes paths from the selection. If any of the paths in paths are in the selection, the TreeSelectionListeners are notified. This method has no effect if paths is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - the path to remove from the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSelectionPath",
      "comment": "Returns the first path in the selection. How first is defined is up to implementors, and may not necessarily be the TreePath with the smallest integer value as determined from the RowMapper.",
      "tagMap": {
        "return": [
          "the first path in the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSelectionPaths",
      "comment": "Returns the paths in the selection. This will return null (or an empty array) if nothing is currently selected.",
      "tagMap": {
        "return": [
          "the paths in the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSelectionCount",
      "comment": "Returns the number of paths that are selected.",
      "tagMap": {
        "return": [
          "the number of paths that are selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPathSelected",
      "comment": "Returns true if the path, path, is in the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to be loked for"
        ],
        "return": [
          "whether the \n\u003ccode\u003epath\u003c/code\u003e is in the current selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSelectionEmpty",
      "comment": "Returns true if the selection is currently empty.",
      "tagMap": {
        "return": [
          "whether the selection is currently empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearSelection",
      "comment": "Empties the current selection. If this represents a change in the current selection, the selection listeners are notified.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.RowMapper",
            "type": "Class"
          },
          "field": {
            "name": "newMapper"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRowMapper",
      "comment": "Sets the RowMapper instance. This instance is used to determine the row for a particular TreePath.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewMapper\u003c/code\u003e - RowMapper to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.RowMapper",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRowMapper",
      "comment": "Returns the RowMapper instance that is able to map a TreePath to a row.",
      "tagMap": {
        "return": [
          "the RowMapper instance that is able to map a TreePath to a row"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSelectionRows",
      "comment": "Returns all of the currently selected rows. This will return null (or an empty array) if there are no selected TreePaths or a RowMapper has not been set.",
      "tagMap": {
        "return": [
          "all of the currently selected rows"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinSelectionRow",
      "comment": "Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths. If nothing is selected, or there is no RowMapper, this will return -1.",
      "tagMap": {
        "return": [
          "the smallest value obtained from the RowMapper for the current set of selected TreePaths"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxSelectionRow",
      "comment": "Returns the largest value obtained from the RowMapper for the current set of selected TreePaths. If nothing is selected, or there is no RowMapper, this will return -1.",
      "tagMap": {
        "return": [
          "the largest value obtained from the RowMapper for the current set of selected TreePaths"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRowSelected",
      "comment": "Returns true if the row identified by row is selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - row to check"
        ],
        "return": [
          "whether the row is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resetRowSelection",
      "comment": "Updates this object\u0027s mapping from TreePaths to rows. This should be invoked when the mapping from TreePaths to integers has changed (for example, a node has been expanded). You do not normally have to call this; JTree and its associated listeners will invoke this for you. If you are implementing your own view class, then you will have to invoke this.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLeadSelectionRow",
      "comment": "Returns the lead selection index. That is the last index that was added.",
      "tagMap": {
        "return": [
          "the lead selection index"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLeadSelectionPath",
      "comment": "Returns the last path that was added. This may differ from the leadSelectionPath property maintained by the JTree.",
      "tagMap": {
        "return": [
          "the last path that was added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list. The listener is registered for all properties. A PropertyChangeEvent will get fired when the selection mode changes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePropertyChangeListener",
      "comment": "Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeSelectionListener",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addTreeSelectionListener",
      "comment": "Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the new listener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeSelectionListener",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeTreeSelectionListener",
      "comment": "Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the listener to remove"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.tree.TreeSelectionModel",
  "comment": "This interface represents the current state of the selection for the tree component. For information and examples of using tree selection models, see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\"\u003eHow to Use Trees\u003c/a\u003e in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cp\u003e The state of the tree selection is characterized by a set of TreePaths, and optionally a set of integers. The mapping from TreePath to integer is done by way of an instance of RowMapper. It is not necessary for a TreeSelectionModel to have a RowMapper to correctly operate, but without a RowMapper \u003ccode\u003egetSelectionRows\u003c/code\u003e will return null. \u003c/p\u003e\n\u003cp\u003e A TreeSelectionModel can be configured to allow only one path (\u003ccode\u003eSINGLE_TREE_SELECTION\u003c/code\u003e) a number of contiguous paths (\u003ccode\u003eCONTIGUOUS_TREE_SELECTION\u003c/code\u003e) or a number of discontiguous paths (\u003ccode\u003eDISCONTIGUOUS_TREE_SELECTION\u003c/code\u003e). A \u003ccode\u003eRowMapper\u003c/code\u003e is used to determine if TreePaths are contiguous. In the absence of a RowMapper \u003ccode\u003eCONTIGUOUS_TREE_SELECTION\u003c/code\u003e and \u003ccode\u003eDISCONTIGUOUS_TREE_SELECTION\u003c/code\u003e behave the same, that is they allow any number of paths to be contained in the TreeSelectionModel. \u003c/p\u003e\n\u003cp\u003e For a selection model of \u003ccode\u003eCONTIGUOUS_TREE_SELECTION\u003c/code\u003e any time the paths are changed (\u003ccode\u003esetSelectionPath\u003c/code\u003e, \u003ccode\u003eaddSelectionPath\u003c/code\u003e ...) the TreePaths are again checked to make they are contiguous. A check of the TreePaths can also be forced by invoking \u003ccode\u003eresetRowSelection\u003c/code\u003e. How a set of discontiguous TreePaths is mapped to a contiguous set is left to implementors of this interface to enforce a particular policy. \u003c/p\u003e\n\u003cp\u003e Implementations should combine duplicate TreePaths that are added to the selection. For example, the following code \u003c/p\u003e\n\u003cpre\u003e   TreePath[] paths \u003d new TreePath[] { treePath, treePath };\n   treeSelectionModel.setSelectionPaths(paths);\n \u003c/pre\u003e should result in only one path being selected: \n\u003ccode\u003etreePath\u003c/code\u003e, and not two copies of \n\u003ccode\u003etreePath\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The lead TreePath is the last path that was added (or set). The lead row is then the row that corresponds to the TreePath as determined from the RowMapper.\u003c/p\u003e",
  "tagMap": {}
}