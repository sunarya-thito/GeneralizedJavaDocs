{
  "packageName": "javax.swing.tree",
  "simpleName": "DefaultTreeModel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "root",
      "comment": "Root of the tree.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.EventListenerList",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listenerList",
      "comment": "Listeners.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "asksAllowsChildren",
      "comment": "Determines how the isLeaf method figures out if a node is a leaf node. If true, a node is a leaf node if it does not allow children. (If it allows children, it is not a leaf node, even if no children are present.) That lets you distinguish between folder nodes and file nodes in a file system, for example. If this value is false, then any node which has no children is a leaf node, and any node may acquire children.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeNode.html#getAllowsChildren()\"\u003e\u003ccode\u003eTreeNode.getAllowsChildren()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#isLeaf(java.lang.Object)\"\u003e\u003ccode\u003eTreeModel.isLeaf(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#setAsksAllowsChildren(boolean)\"\u003e\u003ccode\u003esetAsksAllowsChildren(boolean)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAsksAllowsChildren",
      "comment": "Sets whether or not to test leafness by asking getAllowsChildren() or isLeaf() to the TreeNodes. If newvalue is true, getAllowsChildren() is messaged, otherwise isLeaf() is messaged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - if true, getAllowsChildren() is messaged, otherwise isLeaf() is messaged"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asksAllowsChildren",
      "comment": "Tells how leaf nodes are determined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003easksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if only nodes which do not allow children are leaf nodes, false if nodes which have no children (even if allowed) are leaf nodes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRoot",
      "comment": "Sets the root to root. A null root implies the tree is to display nothing, and is legal.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - new value of tree root"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoot",
      "comment": "Returns the root of the tree. Returns null only if the tree has no nodes.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#getRoot()\"\u003egetRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the root of the tree"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIndexOfChild",
      "comment": "Returns the index of child in parent. If either the parent or child is null, returns -1.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#getIndexOfChild(java.lang.Object,java.lang.Object)\"\u003egetIndexOfChild\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a note in the tree, obtained from this data source",
          "\u003ccode\u003echild\u003c/code\u003e - the node we are interested in"
        ],
        "return": [
          "the index of the child in the parent, or -1 if either the parent or the child is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChild",
      "comment": "Returns the child of parent at index index in the parent\u0027s child array. parent must be a node previously obtained from this data source. This should not return null if index is a valid index for parent (that is index \u003e\u003d 0 \u0026\u0026 index \u003c getChildCount(parent)).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#getChild(java.lang.Object,int)\"\u003egetChild\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a node in the tree, obtained from this data source",
          "\u003ccode\u003eindex\u003c/code\u003e - index of child to be returned"
        ],
        "return": [
          "the child of \n\u003ci\u003eparent\u003c/i\u003e at index \n\u003ci\u003eindex\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildCount",
      "comment": "Returns the number of children of parent. Returns 0 if the node is a leaf or if it has no children. parent must be a node previously obtained from this data source.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#getChildCount(java.lang.Object)\"\u003egetChildCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a node in the tree, obtained from this data source"
        ],
        "return": [
          "the number of children of the node \n\u003ci\u003eparent\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeaf",
      "comment": "Returns whether the specified node is a leaf node. The way the test is performed depends on the askAllowsChildren setting.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003easksAllowsChildren\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#isLeaf(java.lang.Object)\"\u003e\u003ccode\u003eTreeModel.isLeaf(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#isLeaf(java.lang.Object)\"\u003eisLeaf\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - the node to check"
        ],
        "return": [
          "true if the node is a leaf node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reload",
      "comment": "Invoke this method if you\u0027ve modified the TreeNodes upon which this model depends. The model will notify all of its listeners that the model has changed.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "valueForPathChanged",
      "comment": "This sets the user object of the TreeNode identified by path and posts a node changed. If you use custom user objects in the TreeModel you\u0027re going to need to subclass this and set the user object of the changed node to something meaningful.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)\"\u003evalueForPathChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - path to the node that the user has altered",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value from the TreeCellEditor"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertNodeInto",
      "comment": "Invoked this to insert newChild at location index in parents children. This will then message nodesWereInserted to create the appropriate event. This is the preferred way to add children as it will create the appropriate event.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewChild\u003c/code\u003e - child node to be inserted",
          "\u003ccode\u003eparent\u003c/code\u003e - node to which children new node will be added",
          "\u003ccode\u003eindex\u003c/code\u003e - index of parent\u0027s children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNodeFromParent",
      "comment": "Message this to remove node from its parent. This will message nodesWereRemoved to create the appropriate event. This is the preferred way to remove a node as it handles the event creation for you.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - the node to be removed from it\u0027s parrent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nodeChanged",
      "comment": "Invoke this method after you\u0027ve changed how node is to be represented in the tree.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - the changed node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reload",
      "comment": "Invoke this method if you\u0027ve modified the TreeNodes upon which this model depends. The model will notify all of its listeners that the model has changed below the given node.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - the node below which the model has changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nodesWereInserted",
      "comment": "Invoke this method after you\u0027ve inserted some TreeNodes into node. childIndices should be the index of the new elements and must be sorted in ascending order.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - parent node which children count been incremented",
          "\u003ccode\u003echildIndices\u003c/code\u003e - indexes of inserted children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nodesWereRemoved",
      "comment": "Invoke this method after you\u0027ve removed some TreeNodes from node. childIndices should be the index of the removed elements and must be sorted in ascending order. And removedChildren should be the array of the children objects that were removed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - parent node which childred were removed",
          "\u003ccode\u003echildIndices\u003c/code\u003e - indexes of removed childs",
          "\u003ccode\u003eremovedChildren\u003c/code\u003e - array of the children objects that were removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nodesChanged",
      "comment": "Invoke this method after you\u0027ve changed how the children identified by childIndicies are to be represented in the tree.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - changed node",
          "\u003ccode\u003echildIndices\u003c/code\u003e - indexes of changed children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nodeStructureChanged",
      "comment": "Invoke this method if you\u0027ve totally changed the children of node and its children\u0027s children... This will post a treeStructureChanged event.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - changed node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathToRoot",
      "comment": "Builds the parents of node up to and including the root node, where the original node is the last element in the returned array. The length of the returned array gives the node\u0027s depth in the tree.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaNode\u003c/code\u003e - the TreeNode to get the path for"
        ],
        "return": [
          "an array of TreeNodes giving the path from the root"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeNode",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getPathToRoot",
      "comment": "Builds the parents of node up to and including the root node, where the original node is the last element in the returned array. The length of the returned array gives the node\u0027s depth in the tree.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaNode\u003c/code\u003e - the TreeNode to get the path for",
          "\u003ccode\u003edepth\u003c/code\u003e - an int giving the number of steps already taken towards the root (on recursive calls), used to size the returned array"
        ],
        "return": [
          "an array of TreeNodes giving the path from the root to the specified node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTreeModelListener",
      "comment": "Adds a listener for the TreeModelEvent posted after the tree changes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#removeTreeModelListener(javax.swing.event.TreeModelListener)\"\u003e\u003ccode\u003eremoveTreeModelListener(javax.swing.event.TreeModelListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#addTreeModelListener(javax.swing.event.TreeModelListener)\"\u003eaddTreeModelListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeTreeModelListener",
      "comment": "Removes a listener previously added with addTreeModelListener().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#addTreeModelListener(javax.swing.event.TreeModelListener)\"\u003e\u003ccode\u003eaddTreeModelListener(javax.swing.event.TreeModelListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html#removeTreeModelListener(javax.swing.event.TreeModelListener)\"\u003eremoveTreeModelListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeModel.html\" title\u003d\"interface in javax.swing.tree\"\u003eTreeModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeModelListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTreeModelListeners",
      "comment": "Returns an array of all the tree model listeners registered on this model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#addTreeModelListener(javax.swing.event.TreeModelListener)\"\u003e\u003ccode\u003eaddTreeModelListener(javax.swing.event.TreeModelListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#removeTreeModelListener(javax.swing.event.TreeModelListener)\"\u003e\u003ccode\u003eremoveTreeModelListener(javax.swing.event.TreeModelListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this model\u0027s \n\u003ccode\u003eTreeModelListener\u003c/code\u003es or an empty array if no tree model listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireTreeNodesChanged",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source of the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e; typically \n\u003ccode\u003ethis\u003c/code\u003e",
          "\u003ccode\u003epath\u003c/code\u003e - the path to the parent of the nodes that changed; use \n\u003ccode\u003enull\u003c/code\u003e to identify the root has changed",
          "\u003ccode\u003echildIndices\u003c/code\u003e - the indices of the changed elements",
          "\u003ccode\u003echildren\u003c/code\u003e - the changed elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireTreeNodesInserted",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source of the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e; typically \n\u003ccode\u003ethis\u003c/code\u003e",
          "\u003ccode\u003epath\u003c/code\u003e - the path to the parent the nodes were added to",
          "\u003ccode\u003echildIndices\u003c/code\u003e - the indices of the new elements",
          "\u003ccode\u003echildren\u003c/code\u003e - the new elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireTreeNodesRemoved",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source of the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e; typically \n\u003ccode\u003ethis\u003c/code\u003e",
          "\u003ccode\u003epath\u003c/code\u003e - the path to the parent the nodes were removed from",
          "\u003ccode\u003echildIndices\u003c/code\u003e - the indices of the removed elements",
          "\u003ccode\u003echildren\u003c/code\u003e - the removed elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireTreeStructureChanged",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source of the \n\u003ccode\u003eTreeModelEvent\u003c/code\u003e; typically \n\u003ccode\u003ethis\u003c/code\u003e",
          "\u003ccode\u003epath\u003c/code\u003e - the path to the parent of the structure that has changed; use \n\u003ccode\u003enull\u003c/code\u003e to identify the root has changed",
          "\u003ccode\u003echildIndices\u003c/code\u003e - the indices of the affected elements",
          "\u003ccode\u003echildren\u003c/code\u003e - the affected elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": 1
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.util.EventListener",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListeners",
      "comment": "Returns an array of all the objects currently registered as FooListeners upon this model. FooListeners are registered using the addFooListener method. You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a DefaultTreeModel m for its tree model listeners with the following code: TreeModelListener[] tmls \u003d (TreeModelListener[])(m.getListeners(TreeModelListener.class)); If no such listeners exist, this method returns an empty array.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the listener type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#getTreeModelListeners()\"\u003e\u003ccode\u003egetTreeModelListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerType\u003c/code\u003e - the type of listeners requested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerType\u003c/code\u003e doesn\u0027t specify a class or interface that implements \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "return": [
          "an array of all objects registered as \n\u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this component, or an empty array if no such listeners have been added"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "root",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a tree in which any node can have children.",
      "annotations": [
        {
          "type": {
            "name": "ConstructorProperties",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "root"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#%3Cinit%3E(javax.swing.tree.TreeNode,boolean)\"\u003e\u003ccode\u003eDefaultTreeModel(TreeNode, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - a TreeNode object that is the root of the tree"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "name": "root",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "asksAllowsChildren",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a tree specifying whether any node can have children, or whether only certain nodes can have children.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003easksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - a TreeNode object that is the root of the tree",
          "\u003ccode\u003easksAllowsChildren\u003c/code\u003e - a boolean, false if any node can have children, true if each node is asked to see if it can have children"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.tree.DefaultTreeModel",
  "comment": "A simple tree data model that uses TreeNodes. For further information and examples that use DefaultTreeModel, see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\"\u003eHow to Use Trees\u003c/a\u003e in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}