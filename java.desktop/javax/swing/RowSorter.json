{
  "packageName": "javax.swing",
  "simpleName": "RowSorter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "javax.swing.RowSorter",
        "name": "M",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getModel",
      "comment": "Returns the underlying model.",
      "tagMap": {
        "return": [
          "the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "toggleSortOrder",
      "comment": "Reverses the sort order of the specified column. It is up to subclasses to provide the exact behavior when invoked. Typically this will reverse the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order. If the specified column is not sortable, this method has no effect. If this results in changing the sort order and sorting, the appropriate RowSorterListener notification will be sent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to toggle the sort ordering of, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if column is outside the range of the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "convertRowIndexToModel",
      "comment": "Returns the location of index in terms of the underlying model. That is, for the row index in the coordinates of the view this returns the row index in terms of the underlying model.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the row index in terms of the underlying view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is outside the range of the view"
        ],
        "return": [
          "row index in terms of the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "convertRowIndexToView",
      "comment": "Returns the location of index in terms of the view. That is, for the row index in the coordinates of the underlying model this returns the row index in terms of the view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the row index in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is outside the range of the model"
        ],
        "return": [
          "row index in terms of the view, or -1 if index has been filtered out of the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.swing.RowSorter$SortKey",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "keys"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setSortKeys",
      "comment": "Sets the current sort keys.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeys\u003c/code\u003e - the new \n\u003ccode\u003eSortKeys\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e is a shorthand for specifying an empty list, indicating that the view should be unsorted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.swing.RowSorter$SortKey",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSortKeys",
      "comment": "Returns the current sort keys. This must return a non-null List and may return an unmodifiable List. If you need to change the sort keys, make a copy of the returned List, mutate the copy and invoke setSortKeys with the new list.",
      "tagMap": {
        "return": [
          "the current sort order"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getViewRowCount",
      "comment": "Returns the number of rows in the view. If the contents have been filtered this might differ from the row count of the underlying model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getModelRowCount()\"\u003e\u003ccode\u003egetModelRowCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "number of rows in the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getModelRowCount",
      "comment": "Returns the number of rows in the underlying model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getViewRowCount()\"\u003e\u003ccode\u003egetViewRowCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "number of rows in the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "modelStructureChanged",
      "comment": "Invoked when the underlying model structure has completely changed. For example, if the number of columns in a TableModel changed, this method would be invoked. You normally do not call this method. This method is public to allow view classes to call it.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "allRowsChanged",
      "comment": "Invoked when the contents of the underlying model have completely changed. The structure of the table is the same, only the contents have changed. This is typically sent when it is too expensive to characterize the change in terms of the other methods. You normally do not call this method. This method is public to allow view classes to call it.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "firstRow"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endRow"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rowsInserted",
      "comment": "Invoked when rows have been inserted into the underlying model in the specified range (inclusive). The arguments give the indices of the effected range. The first argument is in terms of the model before the change, and must be less than or equal to the size of the model before the change. The second argument is in terms of the model after the change and must be less than the size of the model after the change. For example, if you have a 5-row model and add 3 items to the end of the model the indices are 5, 7. You normally do not call this method. This method is public to allow view classes to call it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is invalid, or \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "firstRow"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endRow"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rowsDeleted",
      "comment": "Invoked when rows have been deleted from the underlying model in the specified range (inclusive). The arguments give the indices of the effected range and are in terms of the model before the change. For example, if you have a 5-row model and delete 3 items from the end of the model the indices are 2, 4. You normally do not call this method. This method is public to allow view classes to call it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is outside the range of the model before the change, or \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "firstRow"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endRow"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rowsUpdated",
      "comment": "Invoked when rows have been changed in the underlying model between the specified range (inclusive). You normally do not call this method. This method is public to allow view classes to call it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row, in terms of the underlying model",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is outside the range of the underlying model, or \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "firstRow"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endRow"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "column"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rowsUpdated",
      "comment": "Invoked when the column in the rows have been updated in the underlying model between the specified range. You normally do not call this method. This method is public to allow view classes to call it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row, in terms of the underlying model",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row, in terms of the underlying model",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column that has changed, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is outside the range of the underlying model after the change, \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e, or \n\u003ccode\u003ecolumn\u003c/code\u003e is outside the range of the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.RowSorterListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addRowSorterListener",
      "comment": "Adds a RowSorterListener to receive notification about this RowSorter. If the same listener is added more than once it will receive multiple notifications. If l is null nothing is done.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eRowSorterListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.RowSorterListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeRowSorterListener",
      "comment": "Removes a RowSorterListener. If l is null nothing is done.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eRowSorterListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireSortOrderChanged",
      "comment": "Notifies listener that the sort order has changed.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "lastRowIndexToModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireRowSorterChanged",
      "comment": "Notifies listener that the mapping has changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elastRowIndexToModel\u003c/code\u003e - the mapping from model indices to view indices prior to the sort, may be \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a RowSorter.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.RowSorter$SortKey"
  ],
  "genericParameters": [
    {
      "name": "M",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.RowSorter",
  "comment": "\u003ccode\u003eRowSorter\u003c/code\u003e provides the basis for sorting and filtering. Beyond creating and installing a \n\u003ccode\u003eRowSorter\u003c/code\u003e, you very rarely need to interact with one directly. Refer to \n\u003ca href\u003d\"table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e for a concrete implementation of \n\u003ccode\u003eRowSorter\u003c/code\u003e for \n\u003ccode\u003eJTable\u003c/code\u003e. \n\u003cp\u003e \u003ccode\u003eRowSorter\u003c/code\u003e\u0027s primary role is to provide a mapping between two coordinate systems: that of the view (for example a \u003ccode\u003eJTable\u003c/code\u003e) and that of the underlying data source, typically a model. \u003c/p\u003e\n\u003cp\u003e The view invokes the following methods on the \u003ccode\u003eRowSorter\u003c/code\u003e: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003etoggleSortOrder\u003c/code\u003e — The view invokes this when the appropriate user gesture has occurred to trigger a sort. For example, the user clicked a column header in a table. \u003c/li\u003e\n \u003cli\u003eOne of the model change methods — The view invokes a model change method when the underlying model has changed. There may be order dependencies in how the events are delivered, so a \u003ccode\u003eRowSorter\u003c/code\u003e should not update its mapping until one of these methods is invoked. \u003c/li\u003e\n\u003c/ul\u003e Because the view makes extensive use of the \n\u003ccode\u003econvertRowIndexToModel\u003c/code\u003e, \n\u003ccode\u003econvertRowIndexToView\u003c/code\u003e and \n\u003ccode\u003egetViewRowCount\u003c/code\u003e methods, these methods need to be fast. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eRowSorter\u003c/code\u003e provides notification of changes by way of \u003ccode\u003eRowSorterListener\u003c/code\u003e. Two types of notification are sent: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eRowSorterEvent.Type.SORT_ORDER_CHANGED\u003c/code\u003e — notifies listeners that the sort order has changed. This is typically followed by a notification that the sort has changed. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eRowSorterEvent.Type.SORTED\u003c/code\u003e — notifies listeners that the mapping maintained by the \u003ccode\u003eRowSorter\u003c/code\u003e has changed in some way. \u003c/li\u003e\n\u003c/ul\u003e \n\u003ccode\u003eRowSorter\u003c/code\u003e implementations typically don\u0027t have a one-to-one mapping with the underlying model, but they can. For example, if a database does the sorting, \n\u003ccode\u003etoggleSortOrder\u003c/code\u003e might call through to the database (on a background thread), and override the mapping methods to return the argument that is passed in. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Concrete implementations of \u003ccode\u003eRowSorter\u003c/code\u003e need to reference a model such as \u003ccode\u003eTableModel\u003c/code\u003e or \u003ccode\u003eListModel\u003c/code\u003e. The view classes, such as \u003ccode\u003eJTable\u003c/code\u003e and \u003ccode\u003eJList\u003c/code\u003e, will also have a reference to the model. To avoid ordering dependencies, \u003ccode\u003eRowSorter\u003c/code\u003e implementations should not install a listener on the model. Instead the view class will call into the \u003ccode\u003eRowSorter\u003c/code\u003e when the model changes. For example, if a row is updated in a \u003ccode\u003eTableModel\u003c/code\u003e \u003ccode\u003eJTable\u003c/code\u003e invokes \u003ccode\u003erowsUpdated\u003c/code\u003e. When the model changes, the view may call into any of the following methods: \u003ccode\u003emodelStructureChanged\u003c/code\u003e, \u003ccode\u003eallRowsChanged\u003c/code\u003e, \u003ccode\u003erowsInserted\u003c/code\u003e, \u003ccode\u003erowsDeleted\u003c/code\u003e and \u003ccode\u003erowsUpdated\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}