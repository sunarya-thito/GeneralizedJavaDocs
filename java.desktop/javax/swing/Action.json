{
  "packageName": "javax.swing",
  "simpleName": "Action",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.awt.event.ActionListener",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DEFAULT",
      "comment": "Not currently used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.DEFAULT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "NAME",
      "comment": "The key used for storing the String name for the action, used for a menu or button.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.NAME\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SHORT_DESCRIPTION",
      "comment": "The key used for storing a short String description for the action, used for tooltip text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.SHORT_DESCRIPTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LONG_DESCRIPTION",
      "comment": "The key used for storing a longer String description for the action, could be used for context-sensitive help.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.LONG_DESCRIPTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SMALL_ICON",
      "comment": "The key used for storing a small Icon, such as ImageIcon. This is typically used with menus such as JMenuItem. If the same Action is used with menus and buttons you\u0027ll typically specify both a SMALL_ICON and a LARGE_ICON_KEY. The menu will use the SMALL_ICON and the button will use the LARGE_ICON_KEY.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.SMALL_ICON\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACTION_COMMAND_KEY",
      "comment": "The key used to determine the command String for the ActionEvent that will be created when an Action is going to be notified as the result of residing in a Keymap associated with a JComponent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.ACTION_COMMAND_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACCELERATOR_KEY",
      "comment": "The key used for storing a KeyStroke to be used as the accelerator for the action.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.ACCELERATOR_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "MNEMONIC_KEY",
      "comment": "The key used for storing an Integer that corresponds to one of the KeyEvent key codes. The value is commonly used to specify a mnemonic. For example: myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_A) sets the mnemonic of myAction to \u0027a\u0027, while myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.getExtendedKeyCodeForChar(\u0027Ñ„\u0027)) sets the mnemonic of myAction to Cyrillic letter \"Ef\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.MNEMONIC_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SELECTED_KEY",
      "comment": "The key used for storing a Boolean that corresponds to the selected state. This is typically used only for components that have a meaningful selection state. For example, JRadioButton and JCheckBox make use of this but instances of JMenu don\u0027t. This property differs from the others in that it is both read by the component and set by the component. For example, if an Action is attached to a JCheckBox the selected state of the JCheckBox will be set from that of the Action. If the user clicks on the JCheckBox the selected state of the JCheckBox and the Action will both be updated. Note: the value of this field is prefixed with \u0027Swing\u0027 to avoid possible collisions with existing Actions.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.SELECTED_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DISPLAYED_MNEMONIC_INDEX_KEY",
      "comment": "The key used for storing an Integer that corresponds to the index in the text (identified by the NAME property) that the decoration for a mnemonic should be rendered at. If the value of this property is greater than or equal to the length of the text, it will treated as -1. Note: the value of this field is prefixed with \u0027Swing\u0027 to avoid possible collisions with existing Actions.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setDisplayedMnemonicIndex(int)\"\u003e\u003ccode\u003eAbstractButton.setDisplayedMnemonicIndex(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.DISPLAYED_MNEMONIC_INDEX_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LARGE_ICON_KEY",
      "comment": "The key used for storing an Icon. This is typically used by buttons, such as JButton and JToggleButton. If the same Action is used with menus and buttons you\u0027ll typically specify both a SMALL_ICON and a LARGE_ICON_KEY. The menu will use the SMALL_ICON and the button the LARGE_ICON_KEY. Note: the value of this field is prefixed with \u0027Swing\u0027 to avoid possible collisions with existing Actions.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.Action.LARGE_ICON_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getValue",
      "comment": "Gets one of this object\u0027s properties using the associated key.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#putValue(java.lang.String,java.lang.Object)\"\u003e\u003ccode\u003eputValue(java.lang.String, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the key"
        ],
        "return": [
          "the \n\u003ccode\u003eObject\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "putValue",
      "comment": "Sets one of this object\u0027s properties using the associated key. If the value has changed, a PropertyChangeEvent is sent to listeners.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the key",
          "\u003ccode\u003evalue\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setEnabled",
      "comment": "Sets the enabled state of the Action. When enabled, any component associated with this object is active and able to fire this object\u0027s actionPerformed method. If the value has changed, a PropertyChangeEvent is sent to listeners.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#accept(java.lang.Object)\"\u003e\u003ccode\u003eaccept(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - true to enable this \n\u003ccode\u003eAction\u003c/code\u003e, false to disable it"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEnabled",
      "comment": "Returns the enabled state of the Action. When enabled, any component associated with this object is active and able to fire this object\u0027s actionPerformed method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#accept(java.lang.Object)\"\u003e\u003ccode\u003eaccept(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if this \n\u003ccode\u003eAction\u003c/code\u003e is enabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "sender",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "accept",
      "comment": "Determines whether the action should be performed with the specified sender object. The sender can be null. The method must return false if the action is disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#isEnabled()\"\u003e\u003ccode\u003eisEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#setEnabled(boolean)\"\u003e\u003ccode\u003esetEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esender\u003c/code\u003e - the object to check, can be null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the action should be performed with the sender object, must be false if the action is disabled."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChange listener. Containers and attached components use these methods to register interest in this Action object. When its enabled state or other property changes, the registered listeners are informed of the change.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removePropertyChangeListener",
      "comment": "Removes a PropertyChange listener.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e object"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.Action",
  "comment": "The \n\u003ccode\u003eAction\u003c/code\u003e interface provides a useful extension to the \n\u003ccode\u003eActionListener\u003c/code\u003e interface in cases where the same functionality may be accessed by several controls. \n\u003cp\u003e In addition to the \u003ccode\u003eactionPerformed\u003c/code\u003e method defined by the \u003ccode\u003eActionListener\u003c/code\u003e interface, this interface allows the application to define, in a single place: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eOne or more text strings that describe the function. These strings can be used, for example, to display the flyover text for a button or to set the text in a menu item. \u003c/li\u003e\n \u003cli\u003eOne or more icons that depict the function. These icons can be used for the images in a menu control, or for composite entries in a more sophisticated user interface. \u003c/li\u003e\n \u003cli\u003eThe enabled/disabled state of the functionality. Instead of having to separately disable the menu item and the toolbar button, the application can disable the function that implements this interface. All components which are registered as listeners for the state change then know to disable event generation for that item and to modify the display accordingly. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This interface can be added to an existing class or used to create an adapter (typically, by subclassing \u003ccode\u003eAbstractAction\u003c/code\u003e). The \u003ccode\u003eAction\u003c/code\u003e object can then be added to multiple \u003ccode\u003eAction\u003c/code\u003e-aware containers and connected to \u003ccode\u003eAction\u003c/code\u003e-capable components. The GUI controls can then be activated or deactivated all at once by invoking the \u003ccode\u003eAction\u003c/code\u003e object\u0027s \u003ccode\u003esetEnabled\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e Note that \u003ccode\u003eAction\u003c/code\u003e implementations tend to be more expensive in terms of storage than a typical \u003ccode\u003eActionListener\u003c/code\u003e, which does not offer the benefits of centralized control of functionality and broadcast of property changes. For this reason, you should take care to only use \u003ccode\u003eAction\u003c/code\u003es where their benefits are desired, and use simple \u003ccode\u003eActionListener\u003c/code\u003es elsewhere. \u003cbr\u003e \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"buttonActions\"\u003e\u003c/a\u003eSwing Components Supporting \u003ccode\u003eAction\u003c/code\u003e\u003c/h2\u003e \n\u003cp\u003e Many of Swing\u0027s components have an \u003ccode\u003eAction\u003c/code\u003e property. When an \u003ccode\u003eAction\u003c/code\u003e is set on a component, the following things happen: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe \u003ccode\u003eAction\u003c/code\u003e is added as an \u003ccode\u003eActionListener\u003c/code\u003e to the component. \u003c/li\u003e\n \u003cli\u003eThe component configures some of its properties to match the \u003ccode\u003eAction\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eThe component installs a \u003ccode\u003ePropertyChangeListener\u003c/code\u003e on the \u003ccode\u003eAction\u003c/code\u003e so that the component can change its properties to reflect changes in the \u003ccode\u003eAction\u003c/code\u003e\u0027s properties. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following table describes the properties used by \u003ccode\u003eSwing\u003c/code\u003e components that support \u003ccode\u003eActions\u003c/code\u003e. In the table, \u003cem\u003ebutton\u003c/em\u003e refers to any \u003ccode\u003eAbstractButton\u003c/code\u003e subclass, which includes not only \u003ccode\u003eJButton\u003c/code\u003e but also classes such as \u003ccode\u003eJMenuItem\u003c/code\u003e. Unless otherwise stated, a \u003ccode\u003enull\u003c/code\u003e property value in an \u003ccode\u003eAction\u003c/code\u003e (or a \u003ccode\u003eAction\u003c/code\u003e that is \u003ccode\u003enull\u003c/code\u003e) results in the button\u0027s corresponding property being set to \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Supported Action properties\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eComponent Property \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eComponents \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eAction Key \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eNotes \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eenabled\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll \u003c/td\u003e\n   \u003ctd\u003eThe \u003ccode\u003eisEnabled\u003c/code\u003e method \u003c/td\u003e\n   \u003ctd\u003e\u0026nbsp; \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003etoolTipText\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e\u0026nbsp; \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eactionCommand\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eACTION_COMMAND_KEY\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e\u0026nbsp; \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003emnemonic\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll buttons \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eMNEMONIC_KEY\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003eA \u003ccode\u003enull\u003c/code\u003e value or \u003ccode\u003eAction\u003c/code\u003e results in the button\u0027s \u003ccode\u003emnemonic\u003c/code\u003e property being set to \u003ccode\u003e\u0027\\0\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003etext\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll buttons \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eNAME\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003eIf you do not want the text of the button to mirror that of the \u003ccode\u003eAction\u003c/code\u003e, set the property \u003ccode\u003ehideActionText\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e. If \u003ccode\u003ehideActionText\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, setting the \u003ccode\u003eAction\u003c/code\u003e changes the text of the button to \u003ccode\u003enull\u003c/code\u003e and any changes to \u003ccode\u003eNAME\u003c/code\u003e are ignored. \u003ccode\u003ehideActionText\u003c/code\u003e is useful for tool bar buttons that typically only show an \u003ccode\u003eIcon\u003c/code\u003e. \u003ccode\u003eJToolBar.add(Action)\u003c/code\u003e sets the property to \u003ccode\u003etrue\u003c/code\u003e if the \u003ccode\u003eAction\u003c/code\u003e has a non-\u003ccode\u003enull\u003c/code\u003e value for \u003ccode\u003eLARGE_ICON_KEY\u003c/code\u003e or \u003ccode\u003eSMALL_ICON\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003edisplayedMnemonicIndex\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll buttons \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eDISPLAYED_MNEMONIC_INDEX_KEY\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003eIf the value of \u003ccode\u003eDISPLAYED_MNEMONIC_INDEX_KEY\u003c/code\u003e is beyond the bounds of the text, it is ignored. When \u003ccode\u003esetAction\u003c/code\u003e is called, if the value from the \u003ccode\u003eAction\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, the displayed mnemonic index is not updated. In any subsequent changes to \u003ccode\u003eDISPLAYED_MNEMONIC_INDEX_KEY\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e is treated as -1. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eicon\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll buttons except of \u003ccode\u003eJCheckBox\u003c/code\u003e, \u003ccode\u003eJToggleButton\u003c/code\u003e and \u003ccode\u003eJRadioButton\u003c/code\u003e. \u003c/td\u003e\n   \u003ctd\u003eeither \u003ccode\u003eLARGE_ICON_KEY\u003c/code\u003e or \u003ccode\u003eSMALL_ICON\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003eThe \u003ccode\u003eJMenuItem\u003c/code\u003e subclasses only use \u003ccode\u003eSMALL_ICON\u003c/code\u003e. All other buttons will use \u003ccode\u003eLARGE_ICON_KEY\u003c/code\u003e; if the value is \u003ccode\u003enull\u003c/code\u003e they use \u003ccode\u003eSMALL_ICON\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eaccelerator\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003eAll \u003ccode\u003eJMenuItem\u003c/code\u003e subclasses, with the exception of \u003ccode\u003eJMenu\u003c/code\u003e. \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eACCELERATOR_KEY\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e\u0026nbsp; \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eselected\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ccode\u003eJToggleButton\u003c/code\u003e, \u003ccode\u003eJCheckBox\u003c/code\u003e, \u003ccode\u003eJRadioButton\u003c/code\u003e, \u003ccode\u003eJCheckBoxMenuItem\u003c/code\u003e and \u003ccode\u003eJRadioButtonMenuItem\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e\u003ccode\u003eSELECTED_KEY\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003eComponents that honor this property only use the value if it is \u003ccode\u003enon-null\u003c/code\u003e. For example, if you set an \u003ccode\u003eAction\u003c/code\u003e that has a \u003ccode\u003enull\u003c/code\u003e value for \u003ccode\u003eSELECTED_KEY\u003c/code\u003e on a \u003ccode\u003eJToggleButton\u003c/code\u003e, the \u003ccode\u003eJToggleButton\u003c/code\u003e will not update it\u0027s selected state in any way. Similarly, any time the \u003ccode\u003eJToggleButton\u003c/code\u003e\u0027s selected state changes it will only set the value back on the \u003ccode\u003eAction\u003c/code\u003e if the \u003ccode\u003eAction\u003c/code\u003e has a \u003ccode\u003enon-null\u003c/code\u003e value for \u003ccode\u003eSELECTED_KEY\u003c/code\u003e. \u003cbr\u003e Components that honor this property keep their selected state in sync with this property. When the same \u003ccode\u003eAction\u003c/code\u003e is used with multiple components, all the components keep their selected state in sync with this property. Mutually exclusive buttons, such as \u003ccode\u003eJToggleButton\u003c/code\u003es in a \u003ccode\u003eButtonGroup\u003c/code\u003e, force only one of the buttons to be selected. As such, do not use the same \u003ccode\u003eAction\u003c/code\u003e that defines a value for the \u003ccode\u003eSELECTED_KEY\u003c/code\u003e property with multiple mutually exclusive buttons. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eJPopupMenu\u003c/code\u003e, \u003ccode\u003eJToolBar\u003c/code\u003e and \u003ccode\u003eJMenu\u003c/code\u003e all provide convenience methods for creating a component and setting the \u003ccode\u003eAction\u003c/code\u003e on the corresponding component. Refer to each of these classes for more information. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eAction\u003c/code\u003e uses \u003ccode\u003ePropertyChangeListener\u003c/code\u003e to inform listeners the \u003ccode\u003eAction\u003c/code\u003e has changed. The beans specification indicates that a \u003ccode\u003enull\u003c/code\u003e property name can be used to indicate multiple values have changed. By default Swing components that take an \u003ccode\u003eAction\u003c/code\u003e do not handle such a change. To indicate that Swing should treat \u003ccode\u003enull\u003c/code\u003e according to the beans specification set the system property \u003ccode\u003eswing.actions.reconfigureOnNull\u003c/code\u003e to the \u003ccode\u003eString\u003c/code\u003e value \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractAction.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eAbstractAction\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}