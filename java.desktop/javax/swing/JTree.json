{
  "packageName": "javax.swing",
  "simpleName": "JTree",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "treeModel",
      "comment": "The model that defines the tree displayed by this object.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeSelectionModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "selectionModel",
      "comment": "Models the set of selected nodes in this tree.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rootVisible",
      "comment": "True if the root node is displayed, false if its children are the highest visible nodes.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeCellRenderer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "cellRenderer",
      "comment": "The cell used to draw nodes. If null, the UI uses a default cellRenderer.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rowHeight",
      "comment": "Height to use for each display row. If this is \u003c\u003d 0 the renderer determines the height for each row.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "showsRootHandles",
      "comment": "True if handles are displayed at the topmost level of the tree. A handle is a small icon that displays adjacent to the node which allows the user to click once to expand or collapse the node. A common interface shows a plus sign (+) for a node which can be expanded and a minus sign (-) for a node which can be collapsed. Handles are always shown for nodes below the topmost level. If the rootVisible setting specifies that the root node is to be displayed, then that is the only node at the topmost level. If the root node is not displayed, then all of its children are at the topmost level of the tree. Handles are always displayed for nodes other than the topmost. If the root node isn\u0027t visible, it is generally a good to make this value true. Otherwise, the tree looks exactly like a list, and users may not know that the \"list entries\" are actually tree nodes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#rootVisible\"\u003e\u003ccode\u003erootVisible\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.JTree$TreeSelectionRedirector",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "selectionRedirector",
      "comment": "Creates a new event and passed it off the selectionListeners.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeCellEditor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "cellEditor",
      "comment": "Editor for the entries. Default is null (tree is not editable).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "editable",
      "comment": "Is the tree editable? Default is false.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "largeModel",
      "comment": "Is this tree a large model? This is a code-optimization setting. A large model can be used when the cell height is the same for all nodes. The UI will then cache very little information and instead continually message the model. Without a large model the UI caches most of the information, resulting in fewer method calls to the model. This value is only a suggestion to the UI. Not all UIs will take advantage of it. Default value is false.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "visibleRowCount",
      "comment": "Number of rows to make visible at one time. This value is used for the Scrollable interface. It determines the preferred size of the display area.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "invokesStopCellEditing",
      "comment": "If true, when editing is to be stopped by way of selection changing, data in tree changing or other means stopCellEditing is invoked, and changes are saved. If false, cancelCellEditing is invoked, and changes are discarded. Default is false.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "scrollsOnExpand",
      "comment": "If true, when a node is expanded, as many of the descendants are scrolled to be visible.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "toggleClickCount",
      "comment": "Number of mouse clicks before a node is expanded.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.TreeModelListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "treeModelListener",
      "comment": "Updates the expandedState.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CELL_RENDERER_PROPERTY",
      "comment": "Bound property name for cellRenderer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.CELL_RENDERER_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TREE_MODEL_PROPERTY",
      "comment": "Bound property name for treeModel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.TREE_MODEL_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROOT_VISIBLE_PROPERTY",
      "comment": "Bound property name for rootVisible.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.ROOT_VISIBLE_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SHOWS_ROOT_HANDLES_PROPERTY",
      "comment": "Bound property name for showsRootHandles.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.SHOWS_ROOT_HANDLES_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROW_HEIGHT_PROPERTY",
      "comment": "Bound property name for rowHeight.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.ROW_HEIGHT_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CELL_EDITOR_PROPERTY",
      "comment": "Bound property name for cellEditor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.CELL_EDITOR_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EDITABLE_PROPERTY",
      "comment": "Bound property name for editable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.EDITABLE_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LARGE_MODEL_PROPERTY",
      "comment": "Bound property name for largeModel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.LARGE_MODEL_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SELECTION_MODEL_PROPERTY",
      "comment": "Bound property name for selectionModel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.SELECTION_MODEL_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "VISIBLE_ROW_COUNT_PROPERTY",
      "comment": "Bound property name for visibleRowCount.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.VISIBLE_ROW_COUNT_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INVOKES_STOP_CELL_EDITING_PROPERTY",
      "comment": "Bound property name for messagesStopCellEditing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.INVOKES_STOP_CELL_EDITING_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SCROLLS_ON_EXPAND_PROPERTY",
      "comment": "Bound property name for scrollsOnExpand.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.SCROLLS_ON_EXPAND_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TOGGLE_CLICK_COUNT_PROPERTY",
      "comment": "Bound property name for toggleClickCount.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.TOGGLE_CLICK_COUNT_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LEAD_SELECTION_PATH_PROPERTY",
      "comment": "Bound property name for leadSelectionPath.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.LEAD_SELECTION_PATH_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ANCHOR_SELECTION_PATH_PROPERTY",
      "comment": "Bound property name for anchor selection path.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.ANCHOR_SELECTION_PATH_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EXPANDS_SELECTED_PATHS_PROPERTY",
      "comment": "Bound property name for expands selected paths property",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTree.EXPANDS_SELECTED_PATHS_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "getDefaultTreeModel",
      "comment": "Creates and returns a sample TreeModel. Used primarily for beanbuilders to show something interesting.",
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003eTreeModel\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "createTreeModel",
      "comment": "Returns a TreeModel wrapping the specified object. If the object is: an array of Objects, a Hashtable, or a Vector then a new root node is created with each of the incoming objects as children. Otherwise, a new root is created with a value of \"root\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e used as the foundation for the \n\u003ccode\u003eTreeModel\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eTreeModel\u003c/code\u003e wrapping the specified object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.TreeUI",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the L\u0026F object that renders this component.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eTreeUI\u003c/code\u003e object that renders this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.TreeUI",
            "type": "Class"
          },
          "field": {
            "name": "ui"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the L\u0026F object that renders this component. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the Component\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the \n\u003ccode\u003eTreeUI\u003c/code\u003e L\u0026amp;F object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Notification from the UIManager that the L\u0026F has changed. Replaces the current UI object with the latest version from the UIManager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the name of the L\u0026F class that renders this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"TreeUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeCellRenderer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellRenderer",
      "comment": "Returns the current TreeCellRenderer that is rendering each cell.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTreeCellRenderer\u003c/code\u003e that is rendering each cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellRenderer",
      "comment": "Sets the TreeCellRenderer that will be used to draw each cell. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The TreeCellRenderer that will be used to draw each cell."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003eTreeCellRenderer\u003c/code\u003e that is to render each cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditable",
      "comment": "Determines whether the tree is editable. Fires a property change event if the new setting is different from the existing setting. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether the tree is editable."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - a boolean value, true if the tree is editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEditable",
      "comment": "Returns true if the tree is editable.",
      "tagMap": {
        "return": [
          "true if the tree is editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "cellEditor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellEditor",
      "comment": "Sets the cell editor. A null value implies that the tree cannot be edited. If this represents a change in the cellEditor, the propertyChange method is invoked on all listeners. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The cell editor. A null value implies the tree cannot be edited."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecellEditor\u003c/code\u003e - the \n\u003ccode\u003eTreeCellEditor\u003c/code\u003e to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeCellEditor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellEditor",
      "comment": "Returns the editor used to edit entries in the tree.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTreeCellEditor\u003c/code\u003e in use, or \n\u003ccode\u003enull\u003c/code\u003e if the tree cannot be edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModel",
      "comment": "Returns the TreeModel that is providing the data.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTreeModel\u003c/code\u003e that is providing the data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeModel",
            "type": "Class"
          },
          "field": {
            "name": "newModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the TreeModel that will provide the data. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The TreeModel that will provide the data."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewModel\u003c/code\u003e - the \n\u003ccode\u003eTreeModel\u003c/code\u003e that is to provide the data"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRootVisible",
      "comment": "Returns true if the root node of the tree is displayed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#rootVisible\"\u003e\u003ccode\u003erootVisible\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the root node of the tree is displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "rootVisible"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRootVisible",
      "comment": "Determines whether or not the root node from the TreeModel is visible. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether or not the root node from the TreeModel is visible."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#rootVisible\"\u003e\u003ccode\u003erootVisible\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erootVisible\u003c/code\u003e - true if the root node of the tree is to be displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShowsRootHandles",
      "comment": "Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed. The default value of this property depends on the constructor used to create the JTree. Some look and feels might not support handles; they will ignore this property. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether the node handles are to be displayed."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#showsRootHandles\"\u003e\u003ccode\u003eshowsRootHandles\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getShowsRootHandles()\"\u003e\u003ccode\u003egetShowsRootHandles()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if root handles should be displayed; otherwise, \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getShowsRootHandles",
      "comment": "Returns the value of the showsRootHandles property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#showsRootHandles\"\u003e\u003ccode\u003eshowsRootHandles\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eshowsRootHandles\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowHeight",
      "comment": "Sets the height of each cell, in pixels. If the specified value is less than or equal to zero the current cell renderer is queried for each row\u0027s height. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The height of each cell."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erowHeight\u003c/code\u003e - the height of each cell, in pixels"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowHeight",
      "comment": "Returns the height of each row. If the returned value is less than or equal to 0 the height for each row is determined by the renderer.",
      "tagMap": {
        "return": [
          "the height of each row"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFixedRowHeight",
      "comment": "Returns true if the height of each display row is a fixed size.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "true if the height of each row is a fixed size"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLargeModel",
      "comment": "Specifies whether the UI should use a large model. (Not all UIs will implement this.) Fires a property change for the LARGE_MODEL_PROPERTY. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether the UI should use a large model."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#largeModel\"\u003e\u003ccode\u003elargeModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - true to suggest a large model to the UI"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLargeModel",
      "comment": "Returns true if the tree is configured for a large model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#largeModel\"\u003e\u003ccode\u003elargeModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if a large model is suggested"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInvokesStopCellEditing",
      "comment": "Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree\u0027s data, or by some other means. Setting this property to true causes the changes to be automatically saved when editing is interrupted. Fires a property change for the INVOKES_STOP_CELL_EDITING_PROPERTY.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Determines what happens when editing is interrupted, selecting another node in the tree, a change in the tree\u0027s data, or some other means."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - true means that \n\u003ccode\u003estopCellEditing\u003c/code\u003e is invoked when editing is interrupted, and data is saved; false means that \n\u003ccode\u003ecancelCellEditing\u003c/code\u003e is invoked, and changes are lost"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInvokesStopCellEditing",
      "comment": "Returns the indicator that tells what happens when editing is interrupted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#setInvokesStopCellEditing(boolean)\"\u003e\u003ccode\u003esetInvokesStopCellEditing(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the indicator that tells what happens when editing is interrupted"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setScrollsOnExpand",
      "comment": "Sets the scrollsOnExpand property, which determines whether the tree might scroll to show previously hidden children. If this property is true (the default), when a node expands the tree can use scrolling to make the maximum possible number of the node\u0027s descendants visible. In some look and feels, trees might not need to scroll when expanded; those look and feels will ignore this property. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Indicates if a node descendant should be scrolled when expanded."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getScrollsOnExpand()\"\u003e\u003ccode\u003egetScrollsOnExpand()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - \n\u003ccode\u003efalse\u003c/code\u003e to disable scrolling on expansion; \n\u003ccode\u003etrue\u003c/code\u003e to enable it"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollsOnExpand",
      "comment": "Returns the value of the scrollsOnExpand property.",
      "tagMap": {
        "return": [
          "the value of the \n\u003ccode\u003escrollsOnExpand\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setToggleClickCount",
      "comment": "Sets the number of mouse clicks before a node will expand or close. The default is two. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Number of clicks before a node will expand/collapse."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclickCount\u003c/code\u003e - the number of mouse clicks to get a node expanded or closed"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToggleClickCount",
      "comment": "Returns the number of mouse clicks needed to expand or close a node.",
      "tagMap": {
        "return": [
          "number of mouse clicks before node is expanded"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExpandsSelectedPaths",
      "comment": "Configures the expandsSelectedPaths property. If true, any time the selection is changed, either via the TreeSelectionModel, or the cover methods provided by JTree, the TreePaths parents will be expanded to make them visible (visible meaning the parent path is expanded, not necessarily in the visible rectangle of the JTree). If false, when the selection changes the nodes parent is not made visible (all its parents expanded). This is useful if you wish to have your selection model maintain paths that are not always visible (all parents expanded). This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Indicates whether changes to the selection should make the parent of the path visible."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value for \n\u003ccode\u003eexpandsSelectedPaths\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExpandsSelectedPaths",
      "comment": "Returns the expandsSelectedPaths property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#setExpandsSelectedPaths(boolean)\"\u003e\u003ccode\u003esetExpandsSelectedPaths(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if selection changes result in the parent path being expanded"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragEnabled",
      "comment": "Turns on or off automatic drag handling. In order to enable automatic drag handling, this property should be set to true, and the tree\u0027s TransferHandler needs to be non-null. The default value of the dragEnabled property is false. The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the tree\u0027s TreeUI. When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel) begin a drag and drop operation whenever the user presses the mouse button over an item and then moves the mouse a few pixels. Setting this property to true can therefore have a subtle effect on how selections behave. If a look and feel is used that ignores this property, you can still begin a drag and drop operation by calling exportAsDrag on the tree\u0027s TransferHandler.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "determines whether automatic drag handling is enabled"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getDragEnabled()\"\u003e\u003ccode\u003egetDragEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not to enable automatic drag handling"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e and \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragEnabled",
      "comment": "Returns whether or not automatic drag handling is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#setDragEnabled(boolean)\"\u003e\u003ccode\u003esetDragEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003edragEnabled\u003c/code\u003e property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.DropMode",
            "type": "Class"
          },
          "field": {
            "name": "dropMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setDropMode",
      "comment": "Sets the drop mode for this component. For backward compatibility, the default for this property is DropMode.USE_SELECTION. Usage of one of the other modes is recommended, however, for an improved user experience. DropMode.ON, for instance, offers similar behavior of showing items as selected, but does so without affecting the actual selection in the tree. JTree supports the following drop modes: DropMode.USE_SELECTION DropMode.ON DropMode.INSERT DropMode.ON_OR_INSERT The drop mode is only meaningful if this component has a TransferHandler that accepts drops.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getDropMode()\"\u003e\u003ccode\u003egetDropMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getDropLocation()\"\u003e\u003ccode\u003egetDropLocation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edropMode\u003c/code\u003e - the drop mode to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the drop mode is unsupported or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.DropMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropMode",
      "comment": "Returns the drop mode for this component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop mode for this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JTree$DropLocation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropLocation",
      "comment": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown. This method is not meant for querying the drop location from a TransferHandler, as the drop location is only set after the TransferHandler\u0027s canImport has returned and has allowed for the location to be shown. When this property changes, a property change event with name \"dropLocation\" is fired by the component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eTransferHandler.canImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop location"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPathEditable",
      "comment": "Returns isEditable. This is invoked from the UI before editing begins to insure that the given path can be edited. This is provided as an entry point for subclassers to add filtered editing without having to resort to creating a new editor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#isEditable()\"\u003e\u003ccode\u003eisEditable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ],
        "return": [
          "true if every parent node and the node itself is editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Overrides JComponent\u0027s getToolTipText method in order to allow renderer\u0027s tips to be used if it has text set. NOTE: For JTree to properly display tooltips of its renderers, JTree must be a registered component with the ToolTipManager. This can be done by invoking ToolTipManager.sharedInstance().registerComponent(tree). This is not done automatically!",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getToolTipText(java.awt.event.MouseEvent)\"\u003egetToolTipText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e that initiated the \n\u003ccode\u003eToolTip\u003c/code\u003e display"
        ],
        "return": [
          "a string containing the tooltip or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003eevent\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "selected"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "expanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "leaf"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hasFocus"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertValueToText",
      "comment": "Called by the renderers to convert the specified value to text. This implementation returns value.toString, ignoring all other arguments. To control the conversion, subclass this method and use any of the arguments you need.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to convert to text",
          "\u003ccode\u003eselected\u003c/code\u003e - true if the node is selected",
          "\u003ccode\u003eexpanded\u003c/code\u003e - true if the node is expanded",
          "\u003ccode\u003eleaf\u003c/code\u003e - true if the node is a leaf node",
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying the node\u0027s display row, where 0 is the first row in the display",
          "\u003ccode\u003ehasFocus\u003c/code\u003e - true if the node has the focus"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e representation of the node\u0027s value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowCount",
      "comment": "Returns the number of viewable nodes. A node is viewable if all of its parents are expanded. The root is only included in this count if isRootVisible() is true. This returns 0 if the UI has not been set.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the number of viewable nodes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionPath",
      "comment": "Selects the node identified by the specified path. If any component of the path is hidden (under a collapsed node), and getExpandsSelectedPaths is true it is exposed (made viewable).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e specifying the node to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionPaths",
      "comment": "Selects the nodes identified by the specified array of paths. If any component in any of the paths is hidden (under a collapsed node), and getExpandsSelectedPaths is true it is exposed (made viewable).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - an array of \n\u003ccode\u003eTreePath\u003c/code\u003e objects that specifies the nodes to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "newPath"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLeadSelectionPath",
      "comment": "Sets the path identifies as the lead. The lead may not be selected. The lead is not maintained by JTree, rather the UI will update it. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Lead selection path"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewPath\u003c/code\u003e - the new lead path"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "newPath"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAnchorSelectionPath",
      "comment": "Sets the path identified as the anchor. The anchor is not maintained by JTree, rather the UI will update it. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Anchor selection path"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewPath\u003c/code\u003e - the new anchor path"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionRow",
      "comment": "Selects the node at the specified row in the display.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to select, where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "rows"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionRows",
      "comment": "Selects the nodes corresponding to each of the specified rows in the display. If a particular element of rows is \u003c 0 or \u003e\u003d getRowCount, it will be ignored. If none of the elements in rows are valid rows, the selection will be cleared. That is it will be as if clearSelection was invoked.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erows\u003c/code\u003e - an array of ints specifying the rows to select, where 0 indicates the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSelectionPath",
      "comment": "Adds the node identified by the specified TreePath to the current selection. If any component of the path isn\u0027t viewable, and getExpandsSelectedPaths is true it is made viewable. Note that JTree does not allow duplicate nodes to exist as children under the same parent -- each sibling must be a unique object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSelectionPaths",
      "comment": "Adds each path in the array of paths to the current selection. If any component of any of the paths isn\u0027t viewable and getExpandsSelectedPaths is true, it is made viewable. Note that JTree does not allow duplicate nodes to exist as children under the same parent -- each sibling must be a unique object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - an array of \n\u003ccode\u003eTreePath\u003c/code\u003e objects that specifies the nodes to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSelectionRow",
      "comment": "Adds the path at the specified row to the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying the row of the node to add, where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "rows"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSelectionRows",
      "comment": "Adds the paths at each of the specified rows to the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erows\u003c/code\u003e - an array of ints specifying the rows to add, where 0 indicates the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLastSelectedPathComponent",
      "comment": "Returns the last path component of the selected path. This is a convenience method for getSelectionModel().getSelectionPath().getLastPathComponent(). This is typically only useful if the selection has one path.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreePath.html#getLastPathComponent()\"\u003e\u003ccode\u003eTreePath.getLastPathComponent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the last path component of the selected path, or \n\u003ccode\u003enull\u003c/code\u003e if nothing is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeadSelectionPath",
      "comment": "Returns the path identified as the lead.",
      "tagMap": {
        "return": [
          "path identified as the lead"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnchorSelectionPath",
      "comment": "Returns the path identified as the anchor.",
      "tagMap": {
        "return": [
          "path identified as the anchor"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionPath",
      "comment": "Returns the path to the first selected node.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e for the first selected node, or \n\u003ccode\u003enull\u003c/code\u003e if nothing is currently selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionPaths",
      "comment": "Returns the paths of all selected values.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eTreePath\u003c/code\u003e objects indicating the selected nodes, or \n\u003ccode\u003enull\u003c/code\u003e if nothing is currently selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionRows",
      "comment": "Returns all of the currently selected rows. This method is simply forwarded to the TreeSelectionModel. If nothing is selected null or an empty array will be returned, based on the TreeSelectionModel implementation.",
      "tagMap": {
        "return": [
          "an array of integers that identifies all currently selected rows where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionCount",
      "comment": "Returns the number of nodes selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the number of nodes selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinSelectionRow",
      "comment": "Returns the smallest selected row. If the selection is empty, or none of the selected paths are viewable, -1 is returned.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the smallest selected row"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxSelectionRow",
      "comment": "Returns the largest selected row. If the selection is empty, or none of the selected paths are viewable, -1 is returned.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the largest selected row"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeadSelectionRow",
      "comment": "Returns the row index corresponding to the lead path.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "an integer giving the row index of the lead path, where 0 is the first row in the display; or -1 if \n\u003ccode\u003eleadPath\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPathSelected",
      "comment": "Returns true if the item identified by the path is currently selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ],
        "return": [
          "true if the node is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRowSelected",
      "comment": "Returns true if the node identified by row is selected.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying a display row, where 0 is the first row in the display"
        ],
        "return": [
          "true if the node is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExpandedDescendants",
      "comment": "Returns an Enumeration of the descendants of the path parent that are currently expanded. If parent is not currently expanded, this will return null. If you expand/collapse nodes while iterating over the returned Enumeration this may not return all the expanded paths, or may return paths that are no longer expanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the path which is to be examined"
        ],
        "return": [
          "an \n\u003ccode\u003eEnumeration\u003c/code\u003e of the descendents of \n\u003ccode\u003eparent\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003eparent\u003c/code\u003e is not currently expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasBeenExpanded",
      "comment": "Returns true if the node identified by the path has ever been expanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ],
        "return": [
          "true if the \n\u003ccode\u003epath\u003c/code\u003e has ever been expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isExpanded",
      "comment": "Returns true if the node identified by the path is currently expanded,",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e specifying the node to check"
        ],
        "return": [
          "false if any of the nodes in the node\u0027s path are collapsed, true if all nodes in the path are expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isExpanded",
      "comment": "Returns true if the node at the specified display row is currently expanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to check, where 0 is the first row in the display"
        ],
        "return": [
          "true if the node is currently expanded, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCollapsed",
      "comment": "Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e to check"
        ],
        "return": [
          "true if any of the nodes in the node\u0027s path are collapsed, false if all nodes in the path are expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCollapsed",
      "comment": "Returns true if the node at the specified display row is collapsed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to check, where 0 is the first row in the display"
        ],
        "return": [
          "true if the node is currently collapsed, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "makeVisible",
      "comment": "Ensures that the node identified by path is currently viewable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e to make visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isVisible",
      "comment": "Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded. Otherwise, this method returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ],
        "return": [
          "true if the node is viewable, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathBounds",
      "comment": "Returns the Rectangle that the specified node will be drawn into. Returns null if any component in the path is hidden (under a collapsed parent). Note: This method returns a valid rectangle, even if the specified node is not currently displayed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying the node"
        ],
        "return": [
          "the \n\u003ccode\u003eRectangle\u003c/code\u003e the node is drawn in, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowBounds",
      "comment": "Returns the Rectangle that the node at the specified row is drawn in.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to be drawn, where 0 is the first row in the display"
        ],
        "return": [
          "the \n\u003ccode\u003eRectangle\u003c/code\u003e the node is drawn in"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scrollPathToVisible",
      "comment": "Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed. Only works when this JTree is contained in a JScrollPane.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying the node to bring into view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scrollRowToVisible",
      "comment": "Scrolls the item identified by row until it is displayed. The minimum of amount of scrolling necessary to bring the row into view is performed. Only works when this JTree is contained in a JScrollPane.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying the row to scroll, where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathForRow",
      "comment": "Returns the path for the specified row. If row is not visible, or a TreeUI has not been set, null is returned.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying a row"
        ],
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e to the specified node, \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003erow \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003erow \u0026gt;\u003d getRowCount()\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowForPath",
      "comment": "Returns the row that displays the node identified by the specified path.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ],
        "return": [
          "an integer specifying the display row, where 0 is the first row in the display, or -1 if any of the elements in path are hidden under a collapsed parent."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expandPath",
      "comment": "Ensures that the node identified by the specified path is expanded and viewable. If the last item in the path is a leaf, this will have no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "expandRow",
      "comment": "Ensures that the node in the specified row is expanded and viewable. If row is \u003c 0 or \u003e\u003d getRowCount this will have no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying a display row, where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "collapsePath",
      "comment": "Ensures that the node identified by the specified path is collapsed and viewable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "collapseRow",
      "comment": "Ensures that the node in the specified row is collapsed. If row is \u003c 0 or \u003e\u003d getRowCount this will have no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying a display row, where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathForLocation",
      "comment": "Returns the path for the node at the specified location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin",
          "\u003ccode\u003ey\u003c/code\u003e - an integer giving the number of pixels vertically from the top of the display area, minus any top margin"
        ],
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e for the node at that location"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowForLocation",
      "comment": "Returns the row for the specified location.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getClosestRowForLocation(int,int)\"\u003e\u003ccode\u003egetClosestRowForLocation(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin",
          "\u003ccode\u003ey\u003c/code\u003e - an integer giving the number of pixels vertically from the top of the display area, minus any top margin"
        ],
        "return": [
          "the row corresponding to the location, or -1 if the location is not within the bounds of a displayed cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClosestPathForLocation",
      "comment": "Returns the path to the node that is closest to x,y. If no nodes are currently viewable, or there is no model, returns null, otherwise it always returns a valid path. To test if the node is exactly at x, y, get the node\u0027s bounds and test x, y against that.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getPathForLocation(int,int)\"\u003e\u003ccode\u003egetPathForLocation(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getPathBounds(javax.swing.tree.TreePath)\"\u003e\u003ccode\u003egetPathBounds(javax.swing.tree.TreePath)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin",
          "\u003ccode\u003ey\u003c/code\u003e - an integer giving the number of pixels vertically from the top of the display area, minus any top margin"
        ],
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e for the node closest to that location, \n\u003ccode\u003enull\u003c/code\u003e if nothing is viewable or there is no model"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClosestRowForLocation",
      "comment": "Returns the row to the node that is closest to x,y. If no nodes are viewable or there is no model, returns -1. Otherwise, it always returns a valid row. To test if the returned object is exactly at x, y, get the bounds for the node at the returned row and test x, y against that.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getRowForLocation(int,int)\"\u003e\u003ccode\u003egetRowForLocation(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getRowBounds(int)\"\u003e\u003ccode\u003egetRowBounds(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin",
          "\u003ccode\u003ey\u003c/code\u003e - an integer giving the number of pixels vertically from the top of the display area, minus any top margin"
        ],
        "return": [
          "the row closest to the location, -1 if nothing is viewable or there is no model"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEditing",
      "comment": "Returns true if the tree is being edited. The item that is being edited can be obtained using getSelectionPath.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#getSelectionPath()\"\u003e\u003ccode\u003egetSelectionPath()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the user is currently editing a node"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stopEditing",
      "comment": "Ends the current editing session. (The DefaultTreeCellEditor object saves any edits that are currently in progress on a cell. Other implementations may operate differently.) Has no effect if the tree isn\u0027t being edited. Note: To make edit-saves automatic whenever the user changes their position in the tree, use setInvokesStopCellEditing(boolean).",
      "tagMap": {
        "return": [
          "true if editing was in progress and is now stopped, false if editing was not in progress"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "cancelEditing",
      "comment": "Cancels the current editing session. Has no effect if the tree isn\u0027t being edited.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "startEditingAtPath",
      "comment": "Selects the node identified by the specified path and initiates editing. The edit-attempt fails if the CellEditor does not allow editing for the specified item.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditingPath",
      "comment": "Returns the path to the element that is currently being edited.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e for the node being edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeSelectionModel",
            "type": "Class"
          },
          "field": {
            "name": "selectionModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionModel",
      "comment": "Sets the tree\u0027s selection model. When a null value is specified an empty selectionModel is used, which does not allow selections. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The tree\u0027s selection model."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeSelectionModel.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eTreeSelectionModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionModel\u003c/code\u003e - the \n\u003ccode\u003eTreeSelectionModel\u003c/code\u003e to use, or \n\u003ccode\u003enull\u003c/code\u003e to disable selections"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionModel",
      "comment": "Returns the model for selections. This should always return a non-null value. If you don\u0027t want to allow anything to be selected set the selection model to null, which forces an empty selection model to be used.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTree.html#setSelectionModel(javax.swing.tree.TreeSelectionModel)\"\u003e\u003ccode\u003esetSelectionModel(javax.swing.tree.TreeSelectionModel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the model for selections"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getPathBetweenRows",
      "comment": "Returns the paths (inclusive) between the specified rows. If the specified indices are within the viewable set of rows, or bound the viewable set of rows, then the indices are constrained by the viewable set of rows. If the specified indices are not within the viewable set of rows, or do not bound the viewable set of rows, then an empty array is returned. For example, if the row count is 10, and this method is invoked with -1, 20, then the specified indices are constrained to the viewable set of rows, and this is treated as if invoked with 0, 9. On the other hand, if this were invoked with -10, -1, then the specified indices do not bound the viewable set of rows, and an empty array is returned. The parameters are not order dependent. That is, getPathBetweenRows(x, y) is equivalent to getPathBetweenRows(y, x). An empty array is returned if the row count is 0, or the specified indices do not bound the viewable set of rows.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - the first index in the range",
          "\u003ccode\u003eindex1\u003c/code\u003e - the last index in the range"
        ],
        "return": [
          "the paths (inclusive) between the specified row indices"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionInterval",
      "comment": "Selects the rows in the specified interval (inclusive). If the specified indices are within the viewable set of rows, or bound the viewable set of rows, then the specified rows are constrained by the viewable set of rows. If the specified indices are not within the viewable set of rows, or do not bound the viewable set of rows, then the selection is cleared. For example, if the row count is 10, and this method is invoked with -1, 20, then the specified indices bounds the viewable range, and this is treated as if invoked with 0, 9. On the other hand, if this were invoked with -10, -1, then the specified indices do not bound the viewable set of rows, and the selection is cleared. The parameters are not order dependent. That is, setSelectionInterval(x, y) is equivalent to setSelectionInterval(y, x).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - the first index in the range to select",
          "\u003ccode\u003eindex1\u003c/code\u003e - the last index in the range to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSelectionInterval",
      "comment": "Adds the specified rows (inclusive) to the selection. If the specified indices are within the viewable set of rows, or bound the viewable set of rows, then the specified indices are constrained by the viewable set of rows. If the indices are not within the viewable set of rows, or do not bound the viewable set of rows, then the selection is unchanged. For example, if the row count is 10, and this method is invoked with -1, 20, then the specified indices bounds the viewable range, and this is treated as if invoked with 0, 9. On the other hand, if this were invoked with -10, -1, then the specified indices do not bound the viewable set of rows, and the selection is unchanged. The parameters are not order dependent. That is, addSelectionInterval(x, y) is equivalent to addSelectionInterval(y, x).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - the first index in the range to add to the selection",
          "\u003ccode\u003eindex1\u003c/code\u003e - the last index in the range to add to the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeSelectionInterval",
      "comment": "Removes the specified rows (inclusive) from the selection. If the specified indices are within the viewable set of rows, or bound the viewable set of rows, then the specified indices are constrained by the viewable set of rows. If the specified indices are not within the viewable set of rows, or do not bound the viewable set of rows, then the selection is unchanged. For example, if the row count is 10, and this method is invoked with -1, 20, then the specified range bounds the viewable range, and this is treated as if invoked with 0, 9. On the other hand, if this were invoked with -10, -1, then the specified range does not bound the viewable set of rows, and the selection is unchanged. The parameters are not order dependent. That is, removeSelectionInterval(x, y) is equivalent to removeSelectionInterval(y, x).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - the first row to remove from the selection",
          "\u003ccode\u003eindex1\u003c/code\u003e - the last row to remove from the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeSelectionPath",
      "comment": "Removes the node identified by the specified path from the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "paths"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeSelectionPaths",
      "comment": "Removes the nodes identified by the specified paths from the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epaths\u003c/code\u003e - an array of \n\u003ccode\u003eTreePath\u003c/code\u003e objects that specifies the nodes to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeSelectionRow",
      "comment": "Removes the row at the index row from the current selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - the row to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "rows"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeSelectionRows",
      "comment": "Removes the rows that are selected at each of the specified rows.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erows\u003c/code\u003e - an array of ints specifying display rows, where 0 is the first row in the display"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearSelection",
      "comment": "Clears the selection.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSelectionEmpty",
      "comment": "Returns true if the selection is currently empty.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "true if the selection is currently empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeExpansionListener",
            "type": "Class"
          },
          "field": {
            "name": "tel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTreeExpansionListener",
      "comment": "Adds a listener for TreeExpansion events.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etel\u003c/code\u003e - a TreeExpansionListener that will be notified when a tree node is expanded or collapsed (a \"negative expansion\")"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeExpansionListener",
            "type": "Class"
          },
          "field": {
            "name": "tel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeTreeExpansionListener",
      "comment": "Removes a listener for TreeExpansion events.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etel\u003c/code\u003e - the \n\u003ccode\u003eTreeExpansionListener\u003c/code\u003e to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeExpansionListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTreeExpansionListeners",
      "comment": "Returns an array of all the TreeExpansionListeners added to this JTree with addTreeExpansionListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eTreeExpansionListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeWillExpandListener",
            "type": "Class"
          },
          "field": {
            "name": "tel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTreeWillExpandListener",
      "comment": "Adds a listener for TreeWillExpand events.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etel\u003c/code\u003e - a \n\u003ccode\u003eTreeWillExpandListener\u003c/code\u003e that will be notified when a tree node will be expanded or collapsed (a \"negative expansion\")"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeWillExpandListener",
            "type": "Class"
          },
          "field": {
            "name": "tel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeTreeWillExpandListener",
      "comment": "Removes a listener for TreeWillExpand events.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etel\u003c/code\u003e - the \n\u003ccode\u003eTreeWillExpandListener\u003c/code\u003e to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeWillExpandListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTreeWillExpandListeners",
      "comment": "Returns an array of all the TreeWillExpandListeners added to this JTree with addTreeWillExpandListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eTreeWillExpandListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireTreeExpanded",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e indicating the node that was expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireTreeCollapsed",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e indicating the node that was collapsed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.tree.ExpandVetoException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireTreeWillExpand",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e indicating the node that was expanded"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/ExpandVetoException.html\" title\u003d\"class in javax.swing.tree\"\u003eExpandVetoException\u003c/a\u003e\u003c/code\u003e - if the expansion is prevented from occurring"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.tree.ExpandVetoException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireTreeWillCollapse",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e indicating the node that was expanded"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/ExpandVetoException.html\" title\u003d\"class in javax.swing.tree\"\u003eExpandVetoException\u003c/a\u003e\u003c/code\u003e - if the collapse is prevented from occurring"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeSelectionListener",
            "type": "Class"
          },
          "field": {
            "name": "tsl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTreeSelectionListener",
      "comment": "Adds a listener for TreeSelection events.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etsl\u003c/code\u003e - the \n\u003ccode\u003eTreeSelectionListener\u003c/code\u003e that will be notified when a node is selected or deselected (a \"negative selection\")"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeSelectionListener",
            "type": "Class"
          },
          "field": {
            "name": "tsl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeTreeSelectionListener",
      "comment": "Removes a TreeSelection listener.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etsl\u003c/code\u003e - the \n\u003ccode\u003eTreeSelectionListener\u003c/code\u003e to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeSelectionListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTreeSelectionListeners",
      "comment": "Returns an array of all the TreeSelectionListeners added to this JTree with addTreeSelectionListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eTreeSelectionListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.TreeSelectionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireValueChanged",
      "comment": "Notifies all listeners that have registered interest for notification on this event type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eTreeSelectionEvent\u003c/code\u003e to be fired; generated by the \n\u003ccode\u003eTreeSelectionModel\u003c/code\u003e when a node is selected or deselected"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "treeDidChange",
      "comment": "Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e.g nodes were expanded or collapsed, or nodes were inserted into the tree). You should never have to invoke this, the UI will invoke this as it needs to.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newCount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVisibleRowCount",
      "comment": "Sets the number of rows that are to be displayed. This will only work if the tree is contained in a JScrollPane, and will adjust the preferred size and size of that scrollpane. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The number of rows that are to be displayed."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewCount\u003c/code\u003e - the number of rows to display"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVisibleRowCount",
      "comment": "Returns the number of rows that are displayed in the display area.",
      "tagMap": {
        "return": [
          "the number of rows displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startingRow"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "bias"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextMatch",
      "comment": "Returns the TreePath to the next tree element that begins with a prefix. To handle the conversion of a TreePath into a String, convertValueToText is used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the string to test for a match",
          "\u003ccode\u003estartingRow\u003c/code\u003e - the row for starting the search",
          "\u003ccode\u003ebias\u003c/code\u003e - the search direction, either Position.Bias.Forward or Position.Bias.Backward."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if prefix is null or startingRow is out of bounds"
        ],
        "return": [
          "the TreePath of the next tree element that starts with the prefix; otherwise null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredScrollableViewportSize",
      "comment": "Returns the preferred display size of a JTree. The height is determined from getVisibleRowCount and the width is the current preferred width.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()\"\u003egetPreferredScrollableViewportSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object containing the preferred size"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableUnitIncrement",
      "comment": "Returns the amount to increment when scrolling. The amount is the height of the first displayed row that isn\u0027t completely in view or, if it is totally displayed, the height of the next row in the scrolling direction.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html#setUnitIncrement(int)\"\u003e\u003ccode\u003eJScrollBar.setUnitIncrement(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableUnitIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - either \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less than zero to scroll up/left, greater than zero for down/right"
        ],
        "return": [
          "the \"unit\" increment for scrolling in the specified direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableBlockIncrement",
      "comment": "Returns the amount for a block increment, which is the height or width of visibleRect, based on orientation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html#setBlockIncrement(int)\"\u003e\u003ccode\u003eJScrollBar.setBlockIncrement(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableBlockIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - either \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less than zero to scroll up/left, greater than zero for down/right."
        ],
        "return": [
          "the \"block\" increment for scrolling in the specified direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportWidth",
      "comment": "Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width. In other words: ensure that the tree is never smaller than its viewport.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003e\u003ccode\u003eScrollable.getScrollableTracksViewportWidth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003egetScrollableTracksViewportWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "whether the tree should track the width of the viewport"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportHeight",
      "comment": "Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height. In other words: ensure that the tree is never smaller than its viewport.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003e\u003ccode\u003eScrollable.getScrollableTracksViewportHeight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003egetScrollableTracksViewportHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "whether the tree should track the height of the viewport"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "state"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setExpandedState",
      "comment": "Sets the expanded state of this JTree. If state is true, all parents of path and path are marked as expanded. If state is false, all parents of path are marked EXPANDED, but path itself is marked collapsed. This will fail if a TreeWillExpandListener vetos it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a \n\u003ccode\u003eTreePath\u003c/code\u003e identifying a node",
          "\u003ccode\u003estate\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, all parents of @{code path} and path are marked as expanded. Otherwise, all parents of \n\u003ccode\u003epath\u003c/code\u003e are marked EXPANDED, but \n\u003ccode\u003epath\u003c/code\u003e itself is marked collapsed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescendantToggledPaths",
      "comment": "Returns an Enumeration of TreePaths that have been expanded that are descendants of parent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a path"
        ],
        "return": [
          "the \n\u003ccode\u003eEnumeration\u003c/code\u003e of \n\u003ccode\u003eTreePaths\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Enumeration",
            "parameters": [
              {
                "name": "javax.swing.tree.TreePath",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "toRemove"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "removeDescendantToggledPaths",
      "comment": "Removes any descendants of the TreePaths in toRemove that have been expanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoRemove\u003c/code\u003e - an enumeration of the paths to remove; a value of \n\u003ccode\u003enull\u003c/code\u003e is ignored"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoRemove\u003c/code\u003e contains an element that is not a \n\u003ccode\u003eTreePath\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e values are ignored"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "clearToggledPaths",
      "comment": "Clears the cache of toggled tree paths. This does NOT send out any TreeExpansionListener events.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeModelListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTreeModelListener",
      "comment": "Creates and returns an instance of TreeModelHandler. The returned object is responsible for updating the expanded state when the TreeModel changes. For more information on what expanded state means, see the JTree description above.",
      "tagMap": {
        "return": [
          "the instance of \n\u003ccode\u003eTreeModelHandler\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "includePath"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "removeDescendantSelectedPaths",
      "comment": "Removes any paths in the selection that are descendants of path. If includePath is true and path is selected, it will be removed from the selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a path",
          "\u003ccode\u003eincludePath\u003c/code\u003e - is \n\u003ccode\u003etrue\u003c/code\u003e and \n\u003ccode\u003epath\u003c/code\u003e is selected, it will be removed from the selection."
        ],
        "return": [
          "true if a descendant was selected"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JTree. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJTree\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JTree. For JTrees, the AccessibleContext takes the form of an AccessibleJTree. A new AccessibleJTree instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJTree that serves as the AccessibleContext of this JTree"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns a JTree with a sample model. The default model used by the tree defines a leaf node as any node without children.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003eDefaultTreeModel.asksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns a JTree with each element of the specified array as the child of a new root node which is not displayed. By default, the tree defines a leaf node as any node without children.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003eDefaultTreeModel.asksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - an array of \n\u003ccode\u003eObject\u003c/code\u003es"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Vector",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns a JTree with each element of the specified Vector as the child of a new root node which is not displayed. By default, the tree defines a leaf node as any node without children.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003eDefaultTreeModel.asksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a \n\u003ccode\u003eVector\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Hashtable",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns a JTree created from a Hashtable which does not display with root. Each value-half of the key/value pairs in the HashTable becomes a child of the new root node. By default, the tree defines a leaf node as any node without children.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003eDefaultTreeModel.asksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a \n\u003ccode\u003eHashtable\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "field": {
            "name": "root"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns a JTree with the specified TreeNode as its root, which displays the root node. By default, the tree defines a leaf node as any node without children.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003eDefaultTreeModel.asksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - a \n\u003ccode\u003eTreeNode\u003c/code\u003e object"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeNode",
            "type": "Class"
          },
          "field": {
            "name": "root"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "asksAllowsChildren"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns a JTree with the specified TreeNode as its root, which displays the root node and which decides whether a node is a leaf node in the specified manner.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/DefaultTreeModel.html#asksAllowsChildren\"\u003e\u003ccode\u003eDefaultTreeModel.asksAllowsChildren\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - a \n\u003ccode\u003eTreeNode\u003c/code\u003e object",
          "\u003ccode\u003easksAllowsChildren\u003c/code\u003e - if false, any node without children is a leaf node; if true, only nodes that do not allow children are leaf nodes"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeModel",
            "type": "Class"
          },
          "field": {
            "name": "newModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Returns an instance of JTree which displays the root node -- the tree is created using the specified data model.",
      "annotations": [
        {
          "type": "ConstructorProperties",
          "values": [
            {
              "name": "value",
              "value": "model"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewModel\u003c/code\u003e - the \n\u003ccode\u003eTreeModel\u003c/code\u003e to use as the data model"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JTree$DynamicUtilTreeNode",
    "javax.swing.JTree$AccessibleJTree",
    "javax.swing.JTree$TreeSelectionRedirector",
    "javax.swing.JTree$EmptySelectionModel",
    "javax.swing.JTree$TreeModelHandler",
    "javax.swing.JTree$DropLocation"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JTree",
  "comment": "A control that displays a set of hierarchical data as an outline. You can find task-oriented documentation and examples of using trees in \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\"\u003eHow to Use Trees\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cp\u003e A specific node in a tree can be identified either by a \u003ccode\u003eTreePath\u003c/code\u003e (an object that encapsulates a node and all of its ancestors), or by its display row, where each row in the display area displays one node. An \u003ci\u003eexpanded\u003c/i\u003e node is a non-leaf node (as identified by \u003ccode\u003eTreeModel.isLeaf(node)\u003c/code\u003e returning false) that will displays its children when all its ancestors are \u003ci\u003eexpanded\u003c/i\u003e. A \u003ci\u003ecollapsed\u003c/i\u003e node is one which hides them. A \u003ci\u003ehidden\u003c/i\u003e node is one which is under a collapsed ancestor. All of a \u003ci\u003eviewable\u003c/i\u003e nodes parents are expanded, but may or may not be displayed. A \u003ci\u003edisplayed\u003c/i\u003e node is both viewable and in the display area, where it can be seen. \u003c/p\u003e The following \n\u003ccode\u003eJTree\u003c/code\u003e methods use \"visible\" to mean \"displayed\": \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eisRootVisible()\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003esetRootVisible()\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003escrollPathToVisible()\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003escrollRowToVisible()\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003egetVisibleRowCount()\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003esetVisibleRowCount()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e The next group of \n\u003ccode\u003eJTree\u003c/code\u003e methods use \"visible\" to mean \"viewable\" (under an expanded parent): \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eisVisible()\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003emakeVisible()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e If you are interested in knowing when the selection changes implement the \n\u003ccode\u003eTreeSelectionListener\u003c/code\u003e interface and add the instance using the method \n\u003ccode\u003eaddTreeSelectionListener\u003c/code\u003e. \n\u003ccode\u003evalueChanged\u003c/code\u003e will be invoked when the selection changes, that is if the user clicks twice on the same node \n\u003ccode\u003evalueChanged\u003c/code\u003e will only be invoked once. \n\u003cp\u003e If you are interested in detecting either double-click events or when a user clicks on a node, regardless of whether or not it was selected, we recommend you do the following: \u003c/p\u003e \n\u003cpre\u003e final JTree tree \u003d ...;\n\n MouseListener ml \u003d new MouseAdapter() {\n     public void \u003cb\u003emousePressed\u003c/b\u003e(MouseEvent e) {\n         int selRow \u003d tree.getRowForLocation(e.getX(), e.getY());\n         TreePath selPath \u003d tree.getPathForLocation(e.getX(), e.getY());\n         if(selRow !\u003d -1) {\n             if(e.getClickCount() \u003d\u003d 1) {\n                 mySingleClick(selRow, selPath);\n             }\n             else if(e.getClickCount() \u003d\u003d 2) {\n                 myDoubleClick(selRow, selPath);\n             }\n         }\n     }\n };\n tree.addMouseListener(ml);\n \u003c/pre\u003e NOTE: This example obtains both the path and row, but you only need to get the one you\u0027re interested in. \n\u003cp\u003e To use \u003ccode\u003eJTree\u003c/code\u003e to display compound nodes (for example, nodes containing both a graphic icon and text), subclass \u003ca href\u003d\"tree/TreeCellRenderer.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eTreeCellRenderer\u003c/code\u003e\u003c/a\u003e and use \u003ca href\u003d\"#setCellRenderer(javax.swing.tree.TreeCellRenderer)\"\u003e\u003ccode\u003esetCellRenderer(javax.swing.tree.TreeCellRenderer)\u003c/code\u003e\u003c/a\u003e to tell the tree to use it. To edit such nodes, subclass \u003ca href\u003d\"tree/TreeCellEditor.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eTreeCellEditor\u003c/code\u003e\u003c/a\u003e and use \u003ca href\u003d\"#setCellEditor(javax.swing.tree.TreeCellEditor)\"\u003e\u003ccode\u003esetCellEditor(javax.swing.tree.TreeCellEditor)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e \n\u003cp\u003e Like all \u003ccode\u003eJComponent\u003c/code\u003e classes, you can use \u003ca href\u003d\"InputMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputMap\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ActionMap.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eActionMap\u003c/code\u003e\u003c/a\u003e to associate an \u003ca href\u003d\"Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e object with a \u003ca href\u003d\"KeyStroke.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eKeyStroke\u003c/code\u003e\u003c/a\u003e and execute the action under specified conditions. \u003c/p\u003e \n\u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \n\u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}