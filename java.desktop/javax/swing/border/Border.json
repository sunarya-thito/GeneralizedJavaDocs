{
  "packageName": "javax.swing.border",
  "simpleName": "Border",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "paintBorder",
      "comment": "Paints the border for the specified component with the specified position and size.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component for which this border is being painted",
          "\u003ccode\u003eg\u003c/code\u003e - the paint graphics",
          "\u003ccode\u003ex\u003c/code\u003e - the x position of the painted border",
          "\u003ccode\u003ey\u003c/code\u003e - the y position of the painted border",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the painted border",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the painted border"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBorderInsets",
      "comment": "Returns the insets of the border.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component for which this border insets value applies"
        ],
        "return": [
          "an \n\u003ccode\u003eInsets\u003c/code\u003e object containing the insets from top, left, bottom and right of this \n\u003ccode\u003eBorder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBorderOpaque",
      "comment": "Returns whether or not the border is opaque. If the border is opaque, it is responsible for filling in it\u0027s own background when painting.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this \n\u003ccode\u003eBorder\u003c/code\u003e is opaque"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.border.Border",
  "comment": "Interface describing an object capable of rendering a border around the edges of a swing component. For examples of using borders see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/border.html\"\u003eHow to Use Borders\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cp\u003e In the Swing component set, borders supercede Insets as the mechanism for creating a (decorated or plain) area around the edge of a component. \u003c/p\u003e\n\u003cp\u003e Usage Notes: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eUse EmptyBorder to create a plain border (this mechanism replaces its predecessor, \u003ccode\u003esetInsets\u003c/code\u003e). \u003c/li\u003e\n \u003cli\u003eUse CompoundBorder to nest multiple border objects, creating a single, combined border. \u003c/li\u003e\n \u003cli\u003eBorder instances are designed to be shared. Rather than creating a new border object using one of border classes, use the BorderFactory methods, which produces a shared instance of the common border types. \u003c/li\u003e\n \u003cli\u003eAdditional border styles include BevelBorder, SoftBevelBorder, EtchedBorder, LineBorder, TitledBorder, and MatteBorder. \u003c/li\u003e\n \u003cli\u003eTo create a new border class, subclass AbstractBorder. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BorderFactory.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eBorderFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/border/EmptyBorder.html\" title\u003d\"class in javax.swing.border\"\u003e\u003ccode\u003eEmptyBorder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/border/CompoundBorder.html\" title\u003d\"class in javax.swing.border\"\u003e\u003ccode\u003eCompoundBorder\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}