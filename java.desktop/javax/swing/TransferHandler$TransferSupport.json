{
  "packageName": "javax.swing",
  "simpleName": "TransferSupport",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDrop",
      "comment": "Returns whether or not this TransferSupport represents a drop operation.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a drop operation, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponent",
      "comment": "Returns the target component of this transfer.",
      "tagMap": {
        "return": [
          "the target component"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.TransferHandler$DropLocation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDropLocation",
      "comment": "Returns the current (non-null) drop location for the component, when this TransferSupport represents a drop. Note: For components with built-in drop support, this location will be a subclass of DropLocation of the same type returned by that component\u0027s getDropLocation method. This method is only for use with drag and drop transfers. Calling it when isDrop() is false results in an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#isDrop()\"\u003e\u003ccode\u003eisDrop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a drop"
        ],
        "return": [
          "the drop location"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showDropLocation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShowDropLocation",
      "comment": "Sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop. This is applicable to those components that automatically show the drop location when appropriate during a drag and drop operation. By default, the drop location is shown only when the TransferHandler has said it can accept the import represented by this TransferSupport. With this method you can force the drop location to always be shown, or always not be shown. This method is only for use with drag and drop transfers. Calling it when isDrop() is false results in an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#isDrop()\"\u003e\u003ccode\u003eisDrop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eshowDropLocation\u003c/code\u003e - whether or not to indicate the drop location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a drop"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dropAction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDropAction",
      "comment": "Sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action. The action must be supported by the source\u0027s drop actions, and must be one of COPY, MOVE or LINK. This method is only for use with drag and drop transfers. Calling it when isDrop() is false results in an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#getDropAction()\"\u003e\u003ccode\u003egetDropAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#getUserDropAction()\"\u003e\u003ccode\u003egetUserDropAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#getSourceDropActions()\"\u003e\u003ccode\u003egetSourceDropActions()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#isDrop()\"\u003e\u003ccode\u003eisDrop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edropAction\u003c/code\u003e - the drop action"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a drop",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid action is specified"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDropAction",
      "comment": "Returns the action chosen for the drop, when this TransferSupport represents a drop. Unless explicitly chosen by way of setDropAction, this returns the user drop action provided by getUserDropAction. You may wish to query this in TransferHandler\u0027s importData method to customize processing based on the action. This method is only for use with drag and drop transfers. Calling it when isDrop() is false results in an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#setDropAction(int)\"\u003e\u003ccode\u003esetDropAction(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#getUserDropAction()\"\u003e\u003ccode\u003egetUserDropAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#isDrop()\"\u003e\u003ccode\u003eisDrop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a drop"
        ],
        "return": [
          "the action chosen for the drop"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUserDropAction",
      "comment": "Returns the user drop action for the drop, when this TransferSupport represents a drop. The user drop action is chosen for a drop as described in the documentation for DropTargetDragEvent and DropTargetDropEvent. A different action may be chosen as the drop action by way of the setDropAction method. You may wish to query this in TransferHandler\u0027s canImport method when determining the suitability of a drop or when deciding on a drop action to explicitly choose. This method is only for use with drag and drop transfers. Calling it when isDrop() is false results in an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#setDropAction(int)\"\u003e\u003ccode\u003esetDropAction(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#getDropAction()\"\u003e\u003ccode\u003egetDropAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#isDrop()\"\u003e\u003ccode\u003eisDrop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a drop"
        ],
        "return": [
          "the user drop action"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceDropActions",
      "comment": "Returns the drag source\u0027s supported drop actions, when this TransferSupport represents a drop. The source actions represent the set of actions supported by the source of this transfer, and are represented as some bitwise-OR combination of COPY, MOVE and LINK. You may wish to query this in TransferHandler\u0027s canImport method when determining the suitability of a drop or when deciding on a drop action to explicitly choose. To determine if a particular action is supported by the source, bitwise-AND the action with the source drop actions, and then compare the result against the original action. For example:  boolean copySupported \u003d (COPY \u0026 getSourceDropActions()) \u003d\u003d COPY;\n This method is only for use with drag and drop transfers. Calling it when isDrop() is false results in an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.TransferSupport.html#isDrop()\"\u003e\u003ccode\u003eisDrop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a drop"
        ],
        "return": [
          "the drag source\u0027s supported drop actions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataFlavors",
      "comment": "Returns the data flavors for this transfer.",
      "tagMap": {
        "return": [
          "the data flavors for this transfer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "field": {
            "name": "df"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDataFlavorSupported",
      "comment": "Returns whether or not the given data flavor is supported.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edf\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e to test"
        ],
        "return": [
          "whether or not the given flavor is supported."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.Transferable",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransferable",
      "comment": "Returns the Transferable associated with this transfer. Note: Unless it is necessary to fetch the Transferable directly, use one of the other methods on this class to inquire about the transfer. This may perform better than fetching the Transferable and asking it directly.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTransferable\u003c/code\u003e associated with this transfer"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        },
        {
          "type": {
            "name": "java.awt.datatransfer.Transferable",
            "type": "Class"
          },
          "field": {
            "name": "transferable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a TransferSupport with isDrop() false for the given component and Transferable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the target component",
          "\u003ccode\u003etransferable\u003c/code\u003e - the transferable"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 25,
  "name": "javax.swing.TransferHandler$TransferSupport",
  "comment": "This class encapsulates all relevant details of a clipboard or drag and drop transfer, and also allows for customizing aspects of the drag and drop experience. \n\u003cp\u003e The main purpose of this class is to provide the information needed by a developer to determine the suitability of a transfer or to import the data contained within. But it also doubles as a controller for customizing properties during drag and drop, such as whether or not to show the drop location, and which drop action to use. \u003c/p\u003e\n\u003cp\u003e Developers typically need not create instances of this class. Instead, they are something provided by the DnD implementation to certain methods in \u003ccode\u003eTransferHandler\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eTransferHandler.canImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#importData(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eTransferHandler.importData(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}