{
  "packageName": "javax.swing",
  "simpleName": "RepaintManager",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.RepaintManager",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "currentManager",
      "comment": "Return the RepaintManager for the calling thread given a Component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a Component -- unused in the default implementation, but could be used by an overridden version to return a different RepaintManager depending on the Component"
        ],
        "return": [
          "the RepaintManager object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RepaintManager",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "currentManager",
      "comment": "Return the RepaintManager for the calling thread given a JComponent. Note: This method exists for backward binary compatibility with earlier versions of the Swing library. It simply returns the result returned by currentManager(Component).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a JComponent -- unused"
        ],
        "return": [
          "the RepaintManager object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.RepaintManager",
            "type": "Class"
          },
          "field": {
            "name": "aRepaintManager"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setCurrentManager",
      "comment": "Set the RepaintManager that should be used for the calling thread. aRepaintManager will become the current RepaintManager for the calling thread\u0027s thread group.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaRepaintManager\u003c/code\u003e - the RepaintManager object to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "invalidComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addInvalidComponent",
      "comment": "Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isValidateRoot()\"\u003e\u003ccode\u003eJComponent.isValidateRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#removeInvalidComponent(javax.swing.JComponent)\"\u003e\u003ccode\u003eremoveInvalidComponent(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einvalidComponent\u003c/code\u003e - a component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "component"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeInvalidComponent",
      "comment": "Remove a component from the list of invalid components.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#addInvalidComponent(javax.swing.JComponent)\"\u003e\u003ccode\u003eaddInvalidComponent(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - a component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addDirtyRegion",
      "comment": "Add a component in the list of components that should be refreshed. If c already has a dirty region, the rectangle (x,y,w,h) will be unioned with the region that should be redrawn.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003eJComponent.repaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - Component to repaint, null results in nothing happening.",
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the region to repaint",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate of the region to repaint",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the region to repaint",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the region to repaint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Window",
            "type": "Class"
          },
          "field": {
            "name": "window"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addDirtyRegion",
      "comment": "Adds window to the list of Components that need to be repainted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003eJFrame.repaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JWindow.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003eJWindow.repaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDialog.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003eJDialog.repaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewindow\u003c/code\u003e - Window to repaint, null results in nothing happening.",
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the region to repaint",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate of the region to repaint",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the region to repaint",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the region to repaint"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.applet.Applet",
            "type": "Class"
          },
          "field": {
            "name": "applet"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addDirtyRegion",
      "comment": "Adds applet to the list of Components that need to be repainted.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JApplet.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003eJApplet.repaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eapplet\u003c/code\u003e - Applet to repaint, null results in nothing happening.",
          "\u003ccode\u003ex\u003c/code\u003e - X coordinate of the region to repaint",
          "\u003ccode\u003ey\u003c/code\u003e - Y coordinate of the region to repaint",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the region to repaint",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the region to repaint"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDirtyRegion",
      "comment": "Return the current dirty region for a component. Return an empty rectangle if the component is not dirty.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - a component"
        ],
        "return": [
          "the region"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "markCompletelyDirty",
      "comment": "Mark a component completely dirty. aComponent will be completely painted during the next paintDirtyRegions() call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - a component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "markCompletelyClean",
      "comment": "Mark a component completely clean. aComponent will not get painted during the next paintDirtyRegions() call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - a component"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCompletelyDirty",
      "comment": "Convenience method that returns true if aComponent will be completely painted during the next paintDirtyRegions(). If computing dirty regions is expensive for your component, use this method and avoid computing dirty region if it return true.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - a component"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003cb\u003eaComponent\u003c/b\u003e will be completely painted during the next paintDirtyRegions()."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "validateInvalidComponents",
      "comment": "Validate all of the components that have been marked invalid.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#addInvalidComponent(javax.swing.JComponent)\"\u003e\u003ccode\u003eaddInvalidComponent(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintDirtyRegions",
      "comment": "Paint all of the components that have been marked dirty.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#addDirtyRegion(javax.swing.JComponent,int,int,int,int)\"\u003e\u003ccode\u003eaddDirtyRegion(javax.swing.JComponent, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string that displays and identifies this object\u0027s properties.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a String representation of this object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "proposedWidth"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "proposedHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffscreenBuffer",
      "comment": "Return the offscreen buffer that should be used as a double buffer with the component c. By default there is a double buffer per RepaintManager. The buffer might be smaller than (proposedWidth,proposedHeight) This happens when the maximum double buffer size as been set for the receiving repaint manager.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component",
          "\u003ccode\u003eproposedWidth\u003c/code\u003e - the width of the buffer",
          "\u003ccode\u003eproposedHeight\u003c/code\u003e - the height of the buffer"
        ],
        "return": [
          "the image"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "proposedWidth"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "proposedHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVolatileOffscreenBuffer",
      "comment": "Return a volatile offscreen buffer that should be used as a double buffer with the specified component c. The image returned will be an instance of VolatileImage, or null if a VolatileImage object could not be instantiated. This buffer might be smaller than (proposedWidth,proposedHeight). This happens when the maximum double buffer size has been set for this repaint manager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/VolatileImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eVolatileImage\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component",
          "\u003ccode\u003eproposedWidth\u003c/code\u003e - the width of the buffer",
          "\u003ccode\u003eproposedHeight\u003c/code\u003e - the height of the buffer"
        ],
        "return": [
          "the volatile image"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDoubleBufferMaximumSize",
      "comment": "Set the maximum double buffer size.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the dimension"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDoubleBufferMaximumSize",
      "comment": "Returns the maximum double buffer size.",
      "tagMap": {
        "return": [
          "a Dimension object representing the maximum size"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "aFlag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDoubleBufferingEnabled",
      "comment": "Enables or disables double buffering in this RepaintManager. CAUTION: The default value for this property is set for optimal paint performance on the given platform and it is not recommended that programs modify this property directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#isDoubleBufferingEnabled()\"\u003e\u003ccode\u003eisDoubleBufferingEnabled()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaFlag\u003c/code\u003e - true to activate double buffering"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDoubleBufferingEnabled",
      "comment": "Returns true if this RepaintManager is double buffered. The default value for this property may vary from platform to platform. On platforms where native double buffering is supported in the AWT, the default value will be false to avoid unnecessary buffering in Swing. On platforms where native double buffering is not supported, the default value will be true.",
      "tagMap": {
        "return": [
          "true if this object is double buffered"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new RepaintManager instance. You rarely call this constructor. directly. To get the default RepaintManager, use RepaintManager.currentManager(JComponent) (normally \"this\").",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.RepaintManager",
  "comment": "This class manages repaint requests, allowing the number of repaints to be minimized, for example by collapsing multiple requests into a single repaint for members of a component tree. \n\u003cp\u003e As of 1.6 \u003ccode\u003eRepaintManager\u003c/code\u003e handles repaint requests for Swing\u0027s top level components (\u003ccode\u003eJApplet\u003c/code\u003e, \u003ccode\u003eJWindow\u003c/code\u003e, \u003ccode\u003eJFrame\u003c/code\u003e and \u003ccode\u003eJDialog\u003c/code\u003e). Any calls to \u003ccode\u003erepaint\u003c/code\u003e on one of these will call into the appropriate \u003ccode\u003eaddDirtyRegion\u003c/code\u003e method.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}