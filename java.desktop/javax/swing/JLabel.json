{
  "packageName": "javax.swing",
  "simpleName": "JLabel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "labelFor",
      "comment": "The Component this label is for; null if the label is not the label for a component",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.LabelUI",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the L\u0026F object that renders this component.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "LabelUI object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the L\u0026F object that renders this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the Component\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the LabelUI L\u0026amp;F object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the UI property to a value from the current look and feel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns a string that specifies the name of the l\u0026f class that renders this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"LabelUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Returns the text string that the label displays.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setText(java.lang.String)\"\u003e\u003ccode\u003esetText(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a String"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Defines the single line of text this component will display. If the value of text is null or empty string, nothing is displayed. The default value of this property is null. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Defines the single line of text this component will display."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setVerticalTextPosition(int)\"\u003e\u003ccode\u003esetVerticalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setHorizontalTextPosition(int)\"\u003e\u003ccode\u003esetHorizontalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the single line of text this component will display"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIcon",
      "comment": "Returns the graphic image (glyph, icon) that the label displays.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an Icon"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIcon",
      "comment": "Defines the icon this component will display. If the value of icon is null, nothing is displayed. The default value of this property is null. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The icon this component will display."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setVerticalTextPosition(int)\"\u003e\u003ccode\u003esetVerticalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setHorizontalTextPosition(int)\"\u003e\u003ccode\u003esetHorizontalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getIcon()\"\u003e\u003ccode\u003egetIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the default icon this component will display"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisabledIcon",
      "comment": "Returns the icon used by the label when it\u0027s disabled. If no disabled icon has been set this will forward the call to the look and feel to construct an appropriate disabled Icon. Some look and feels might not render the disabled Icon, in which case they will ignore this.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setDisabledIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetDisabledIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getDisabledIcon(javax.swing.JComponent,javax.swing.Icon)\"\u003e\u003ccode\u003eLookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ImageIcon.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eImageIcon\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003edisabledIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisabledIcon",
      "comment": "Set the icon to be displayed if this JLabel is \"disabled\" (JLabel.setEnabled(false)). The default value of this property is null.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The icon to display if the label is disabled."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getDisabledIcon()\"\u003e\u003ccode\u003egetDisabledIcon()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setEnabled(boolean)\"\u003e\u003ccode\u003eJComponent.setEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edisabledIcon\u003c/code\u003e - the Icon to display when the component is disabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisplayedMnemonic",
      "comment": "Specify a keycode that indicates a mnemonic key. This property is used when the label is part of a larger component. If the labelFor property of the label is not null, the label will call the requestFocus method of the component specified by the labelFor property when the mnemonic is activated.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The mnemonic keycode."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getLabelFor()\"\u003e\u003ccode\u003egetLabelFor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setLabelFor(java.awt.Component)\"\u003e\u003ccode\u003esetLabelFor(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - a keycode that indicates a mnemonic key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisplayedMnemonic",
      "comment": "Specifies the displayedMnemonic as a char value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setDisplayedMnemonic(int)\"\u003e\u003ccode\u003esetDisplayedMnemonic(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaChar\u003c/code\u003e - a char specifying the mnemonic to display"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayedMnemonic",
      "comment": "Return the keycode that indicates a mnemonic key. This property is used when the label is part of a larger component. If the labelFor property of the label is not null, the label will call the requestFocus method of the component specified by the labelFor property when the mnemonic is activated.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getLabelFor()\"\u003e\u003ccode\u003egetLabelFor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setLabelFor(java.awt.Component)\"\u003e\u003ccode\u003esetLabelFor(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "int value for the mnemonic key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisplayedMnemonicIndex",
      "comment": "Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic. Not all look and feels may support this. A value of -1 indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed. The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...). You should only ever have to call this if you do not wish the default character to be underlined. For example, if the text was \u0027Save As\u0027, with a mnemonic of \u0027a\u0027, and you wanted the \u0027A\u0027 to be decorated, as \u0027Save As\u0027, you would have to invoke setDisplayedMnemonicIndex(5) after invoking setDisplayedMnemonic(KeyEvent.VK_A).",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "the index into the String to draw the keyboard character mnemonic at"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Index into the String to underline"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - will be thrown if \n\u003ccode\u003eindex\u003c/code\u003e is \u0026gt;\u003d length of the text, or \u0026lt; -1"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayedMnemonicIndex",
      "comment": "Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setDisplayedMnemonicIndex(int)\"\u003e\u003ccode\u003esetDisplayedMnemonicIndex(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "index representing mnemonic character"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "checkHorizontalKey",
      "comment": "Verify that key is a legal value for the horizontalAlignment properties.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setHorizontalTextPosition(int)\"\u003e\u003ccode\u003esetHorizontalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setHorizontalAlignment(int)\"\u003e\u003ccode\u003esetHorizontalAlignment(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the property value to check",
          "\u003ccode\u003emessage\u003c/code\u003e - the IllegalArgumentException detail message"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key isn\u0027t LEFT, CENTER, RIGHT, LEADING or TRAILING."
        ],
        "return": [
          "the key value if \n\u003ccode\u003ekey\u003c/code\u003e is a a legal value for the horizontalAlignment properties"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "checkVerticalKey",
      "comment": "Verify that key is a legal value for the verticalAlignment or verticalTextPosition properties.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setVerticalAlignment(int)\"\u003e\u003ccode\u003esetVerticalAlignment(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setVerticalTextPosition(int)\"\u003e\u003ccode\u003esetVerticalTextPosition(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the property value to check",
          "\u003ccode\u003emessage\u003c/code\u003e - the IllegalArgumentException detail message"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key isn\u0027t TOP, CENTER, or BOTTOM."
        ],
        "return": [
          "the key value if \n\u003ccode\u003ekey\u003c/code\u003e is a legal value for the verticalAlignment or verticalTextPosition properties"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIconTextGap",
      "comment": "Returns the amount of space between the text and the icon displayed in this label.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setIconTextGap(int)\"\u003e\u003ccode\u003esetIconTextGap(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an int equal to the number of pixels between the text and the icon."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIconTextGap",
      "comment": "If both the icon and text properties are set, this property defines the space between them. The default value of this property is 4 pixels. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If both the icon and text properties are set, this property defines the space between them."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getIconTextGap()\"\u003e\u003ccode\u003egetIconTextGap()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - the space between the icon and text properties"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVerticalAlignment",
      "comment": "Returns the alignment of the label\u0027s contents along the Y axis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setVerticalAlignment(int)\"\u003e\u003ccode\u003esetVerticalAlignment(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The value of the verticalAlignment property, one of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eTOP\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, or \n\u003ccode\u003eBOTTOM\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVerticalAlignment",
      "comment": "Sets the alignment of the label\u0027s contents along the Y axis. The default value of this property is CENTER.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.TOP",
                "SwingConstants.CENTER",
                "SwingConstants.BOTTOM"
              ]
            },
            {
              "name": "escription",
              "value": "The alignment of the label\u0027s contents along the Y axis."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getVerticalAlignment()\"\u003e\u003ccode\u003egetVerticalAlignment()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eTOP\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e (the default), or \n\u003ccode\u003eBOTTOM\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHorizontalAlignment",
      "comment": "Returns the alignment of the label\u0027s contents along the X axis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setHorizontalAlignment(int)\"\u003e\u003ccode\u003esetHorizontalAlignment(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The value of the horizontalAlignment property, one of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e or \n\u003ccode\u003eTRAILING\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHorizontalAlignment",
      "comment": "Sets the alignment of the label\u0027s contents along the X axis. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.LEFT",
                "SwingConstants.CENTER",
                "SwingConstants.RIGHT",
                "SwingConstants.LEADING",
                "SwingConstants.TRAILING"
              ]
            },
            {
              "name": "escription",
              "value": "The alignment of the label\u0027s content along the X axis."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getHorizontalAlignment()\"\u003e\u003ccode\u003egetHorizontalAlignment()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e (the default for image-only labels), \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e (the default for text-only labels) or \n\u003ccode\u003eTRAILING\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVerticalTextPosition",
      "comment": "Returns the vertical position of the label\u0027s text, relative to its image.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setVerticalTextPosition(int)\"\u003e\u003ccode\u003esetVerticalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eTOP\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, or \n\u003ccode\u003eBOTTOM\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVerticalTextPosition",
      "comment": "Sets the vertical position of the label\u0027s text, relative to its image. The default value of this property is CENTER. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.TOP",
                "SwingConstants.CENTER",
                "SwingConstants.BOTTOM"
              ]
            },
            {
              "name": "escription",
              "value": "The vertical position of the text relative to it\u0027s image."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getVerticalTextPosition()\"\u003e\u003ccode\u003egetVerticalTextPosition()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etextPosition\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eTOP\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e (the default), or \n\u003ccode\u003eBOTTOM\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHorizontalTextPosition",
      "comment": "Returns the horizontal position of the label\u0027s text, relative to its image.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e or \n\u003ccode\u003eTRAILING\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHorizontalTextPosition",
      "comment": "Sets the horizontal position of the label\u0027s text, relative to its image.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.LEFT",
                "SwingConstants.CENTER",
                "SwingConstants.RIGHT",
                "SwingConstants.LEADING",
                "SwingConstants.TRAILING"
              ]
            },
            {
              "name": "escription",
              "value": "The horizontal position of the label\u0027s text, relative to its image."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingConstants.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSwingConstants\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etextPosition\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e, or \n\u003ccode\u003eTRAILING\u003c/code\u003e (the default)."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "imageUpdate",
      "comment": "This is overridden to return false if the current Icon\u0027s Image is not equal to the passed in Image img.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eComponent.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003eimageUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003eimageUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003eImageObserver\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the image being observed",
          "\u003ccode\u003einfoflags\u003c/code\u003e - see \n\u003ccode\u003eimageUpdate\u003c/code\u003e for more information",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - the width",
          "\u003ccode\u003eh\u003c/code\u003e - the height"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the infoflags indicate that the image is completely loaded; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JLabel. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this JLabel."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLabelFor",
      "comment": "Get the component this is labelling.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getDisplayedMnemonic()\"\u003e\u003ccode\u003egetDisplayedMnemonic()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setDisplayedMnemonic(int)\"\u003e\u003ccode\u003esetDisplayedMnemonic(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the Component this is labelling. Can be null if this does not label a Component. If the displayedMnemonic property is set and the labelFor property is also set, the label will call the requestFocus method of the component specified by the labelFor property when the mnemonic is activated."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLabelFor",
      "comment": "Set the component this is labelling. Can be null if this does not label a Component. If the displayedMnemonic property is set and the labelFor property is also set, the label will call the requestFocus method of the component specified by the labelFor property when the mnemonic is activated.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "escription",
              "value": "The component this is labelling."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#getDisplayedMnemonic()\"\u003e\u003ccode\u003egetDisplayedMnemonic()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLabel.html#setDisplayedMnemonic(int)\"\u003e\u003ccode\u003esetDisplayedMnemonic(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component this label is for, or null if the label is not the label for a component"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Get the AccessibleContext of this object",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "The AccessibleContext associated with this Label."
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the AccessibleContext of this object"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "name": "icon",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "horizontalAlignment",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JLabel instance with the specified text, image, and horizontal alignment. The label is centered vertically in its display area. The text is on the trailing edge of the image.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - The text to be displayed by the label.",
          "\u003ccode\u003eicon\u003c/code\u003e - The image to be displayed by the label.",
          "\u003ccode\u003ehorizontalAlignment\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e or \n\u003ccode\u003eTRAILING\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "horizontalAlignment",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JLabel instance with the specified text and horizontal alignment. The label is centered vertically in its display area.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - The text to be displayed by the label.",
          "\u003ccode\u003ehorizontalAlignment\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e or \n\u003ccode\u003eTRAILING\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JLabel instance with the specified text. The label is aligned against the leading edge of its display area, and centered vertically.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - The text to be displayed by the label."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "name": "image",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "horizontalAlignment",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JLabel instance with the specified image and horizontal alignment. The label is centered vertically in its display area.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - The image to be displayed by the label.",
          "\u003ccode\u003ehorizontalAlignment\u003c/code\u003e - One of the following constants defined in \n\u003ccode\u003eSwingConstants\u003c/code\u003e: \n\u003ccode\u003eLEFT\u003c/code\u003e, \n\u003ccode\u003eCENTER\u003c/code\u003e, \n\u003ccode\u003eRIGHT\u003c/code\u003e, \n\u003ccode\u003eLEADING\u003c/code\u003e or \n\u003ccode\u003eTRAILING\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "name": "image",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JLabel instance with the specified image. The label is centered vertically and horizontally in its display area.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - The image to be displayed by the label."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JLabel instance with no image and with an empty string for the title. The label is centered vertically in its display area. The label\u0027s contents, once set, will be displayed on the leading edge of the label\u0027s display area.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.JLabel$AccessibleJLabel"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JLabel",
  "comment": "A display area for a short text string or an image, or both. A label does not react to input events. As a result, it cannot get the keyboard focus. A label can, however, display a keyboard alternative as a convenience for a nearby component that has a keyboard alternative but can\u0027t display it. \n\u003cp\u003e A \u003ccode\u003eJLabel\u003c/code\u003e object can display either text, an image, or both. You can specify where in the label\u0027s display area the label\u0027s contents are aligned by setting the vertical and horizontal alignment. By default, labels are vertically centered in their display area. Text-only labels are leading edge aligned, by default; image-only labels are horizontally centered, by default. \u003c/p\u003e\n\u003cp\u003e You can also specify the position of the text relative to the image. By default, text is on the trailing edge of the image, with the text and image vertically aligned. \u003c/p\u003e\n\u003cp\u003e A label\u0027s leading and trailing edge are determined from the value of its \u003ca href\u003d\"../../java/awt/ComponentOrientation.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponentOrientation\u003c/code\u003e\u003c/a\u003e property. At present, the default ComponentOrientation setting maps the leading edge to left and the trailing edge to right. \u003c/p\u003e\n\u003cp\u003e Finally, you can use the \u003ccode\u003esetIconTextGap\u003c/code\u003e method to specify how many pixels should appear between the text and the image. The default is 4 pixels. \u003c/p\u003e\n\u003cp\u003e See \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/label.html\"\u003eHow to Use Labels\u003c/a\u003e in \u003cem\u003eThe Java Tutorial\u003c/em\u003e for further documentation. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}