{
  "packageName": "javax.swing",
  "simpleName": "JLayeredPane",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_LAYER",
      "comment": "Convenience object defining the Default layer. Equivalent to Integer.valueOf(0).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PALETTE_LAYER",
      "comment": "Convenience object defining the Palette layer. Equivalent to Integer.valueOf(100).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MODAL_LAYER",
      "comment": "Convenience object defining the Modal layer. Equivalent to Integer.valueOf(200).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "POPUP_LAYER",
      "comment": "Convenience object defining the Popup layer. Equivalent to Integer.valueOf(300).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DRAG_LAYER",
      "comment": "Convenience object defining the Drag layer. Equivalent to Integer.valueOf(400).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FRAME_CONTENT_LAYER",
      "comment": "Convenience object defining the Frame Content layer. This layer is normally only use to position the contentPane and menuBar components of JFrame. Equivalent to Integer.valueOf(-30000).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJFrame\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LAYER_PROPERTY",
      "comment": "Bound property",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JLayeredPane.LAYER_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Remove the indexed component from this pane. This is the absolute index, ignoring layers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#getIndexOf(java.awt.Component)\"\u003e\u003ccode\u003egetIndexOf(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#remove(int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - an int specifying the component to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAll",
      "comment": "Removes all the components from this container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component)\"\u003e\u003ccode\u003eContainer.add(java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#remove(int)\"\u003e\u003ccode\u003eContainer.remove(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#removeAll()\"\u003eremoveAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOptimizedDrawingEnabled",
      "comment": "Returns false if components in the pane can overlap, which makes optimized drawing impossible. Otherwise, returns true.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isOptimizedDrawingEnabled()\"\u003e\u003ccode\u003eJComponent.isOptimizedDrawingEnabled()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isOptimizedDrawingEnabled()\"\u003eisOptimizedDrawingEnabled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "false if components can overlap, else true"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "putLayer",
      "comment": "Sets the layer property on a JComponent. This method does not cause any side effects like setLayer() (painting, add/remove, etc). Normally you should use the instance method setLayer(), in order to get the desired side-effects (like repainting).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#setLayer(java.awt.Component,int)\"\u003e\u003ccode\u003esetLayer(java.awt.Component, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JComponent to move",
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer to move it to"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLayer",
      "comment": "Gets the layer property for a JComponent, it does not cause any side effects like setLayer(). (painting, add/remove, etc) Normally you should use the instance method getLayer().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JComponent to check"
        ],
        "return": [
          "an int specifying the component\u0027s layer"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JLayeredPane",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLayeredPaneAbove",
      "comment": "Convenience method that returns the first JLayeredPane which contains the specified component. Note that all JFrames have a JLayeredPane at their root, so any component in a JFrame will have a JLayeredPane parent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJRootPane\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to check"
        ],
        "return": [
          "the JLayeredPane that contains the component, or null if no JLayeredPane is found in the component hierarchy"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLayer",
      "comment": "Sets the layer attribute on the specified component, making it the bottommost component in that layer. Should be called before adding to parent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to set the layer for",
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer to set, where lower numbers are closer to the bottom"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLayer",
      "comment": "Sets the layer attribute for the specified component and also sets its position within that layer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to set the layer for",
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer to set, where lower numbers are closer to the bottom",
          "\u003ccode\u003eposition\u003c/code\u003e - an int specifying the position within the layer, where 0 is the topmost position and -1 is the bottommost position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayer",
      "comment": "Returns the layer attribute for the specified Component.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to check"
        ],
        "return": [
          "an int specifying the component\u0027s current layer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIndexOf",
      "comment": "Returns the index of the specified Component. This is the absolute index, ignoring layers. Index numbers, like position numbers, have the topmost component at index zero. Larger numbers are closer to the bottom.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to check"
        ],
        "return": [
          "an int specifying the component\u0027s index"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "moveToFront",
      "comment": "Moves the component to the top of the components in its current layer (position 0).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#setPosition(java.awt.Component,int)\"\u003e\u003ccode\u003esetPosition(Component, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to move"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "moveToBack",
      "comment": "Moves the component to the bottom of the components in its current layer (position -1).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#setPosition(java.awt.Component,int)\"\u003e\u003ccode\u003esetPosition(Component, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to move"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPosition",
      "comment": "Moves the component to position within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position. Note: Position numbering is defined by java.awt.Container, and is the opposite of layer numbering. Lower position numbers are closer to the top (0 is topmost), and higher position numbers are closer to the bottom.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to move",
          "\u003ccode\u003eposition\u003c/code\u003e - an int in the range -1..N-1, where N is the number of components in the component\u0027s current layer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPosition",
      "comment": "Get the relative position of the component within its layer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#getComponentCountInLayer(int)\"\u003e\u003ccode\u003egetComponentCountInLayer(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the Component to check"
        ],
        "return": [
          "an int giving the component\u0027s position, where 0 is the topmost position and the highest index value \u003d the count count of components at that layer, minus 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "highestLayer",
      "comment": "Returns the highest layer value from all current children. Returns 0 if there are no children.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an int indicating the layer of the topmost component in the pane, or zero if there are no children"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lowestLayer",
      "comment": "Returns the lowest layer value from all current children. Returns 0 if there are no children.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an int indicating the layer of the bottommost component in the pane, or zero if there are no children"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentCountInLayer",
      "comment": "Returns the number of children currently in the specified layer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer to check"
        ],
        "return": [
          "an int specifying the number of components in that layer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentsInLayer",
      "comment": "Returns an array of the components in the specified layer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer to check"
        ],
        "return": [
          "an array of Components contained in that layer"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Paints this JLayeredPane within the specified graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintComponent(java.awt.Graphics)\"\u003e\u003ccode\u003eJComponent.paintComponent(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintBorder(java.awt.Graphics)\"\u003e\u003ccode\u003eJComponent.paintBorder(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintChildren(java.awt.Graphics)\"\u003e\u003ccode\u003eJComponent.paintChildren(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getComponentGraphics(java.awt.Graphics)\"\u003e\u003ccode\u003eJComponent.getComponentGraphics(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003eJComponent.repaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paint(java.awt.Graphics)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the Graphics context within which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.awt.Component",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getComponentToLayer",
      "comment": "Returns the hashtable that maps components to layers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the Hashtable used to map components to their layers"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getObjectForLayer",
      "comment": "Returns the Integer object associated with a specified layer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer"
        ],
        "return": [
          "an Integer object for that layer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertIndexForLayer",
      "comment": "Primitive method that determines the proper location to insert a new child based on layer and position requests.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#getIndexOf(java.awt.Component)\"\u003e\u003ccode\u003egetIndexOf(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the layer",
          "\u003ccode\u003eposition\u003c/code\u003e - an int specifying the position within the layer"
        ],
        "return": [
          "an int giving the (absolute) insertion-index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JLayeredPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this JLayeredPane."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JLayeredPane. For layered panes, the AccessibleContext takes the form of an AccessibleJLayeredPane. A new AccessibleJLayeredPane instance is created if necessary.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJLayeredPane that serves as the AccessibleContext of this JLayeredPane"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new JLayeredPane",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.JLayeredPane$AccessibleJLayeredPane"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JLayeredPane",
  "comment": "\u003ccode\u003eJLayeredPane\u003c/code\u003e adds depth to a JFC/Swing container, allowing components to overlap each other when needed. An \n\u003ccode\u003eInteger\u003c/code\u003e object specifies each component\u0027s depth in the container, where higher-numbered components sit \"on top\" of other components. For task-oriented documentation and examples of using layered panes see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html\"\u003eHow to Use a Layered Pane\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial\u003c/em\u003e. \n\u003cdiv style\u003d\"float:right;text-align:center\"\u003e \n \u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003c/p\u003e\n \u003cp\u003e\u003cimg src\u003d\"doc-files/JLayeredPane-1.gif\" alt\u003d\"The following text describes this image.\" width\u003d\"269\" height\u003d\"264\"\u003e \u003c/p\u003e\n\u003c/div\u003e For convenience, \n\u003ccode\u003eJLayeredPane\u003c/code\u003e divides the depth-range into several different layers. Putting a component into one of those layers makes it easy to ensure that components overlap properly, without having to worry about specifying numbers for specific depths: \n\u003cdl\u003e \n \u003cdt\u003e\n  DEFAULT_LAYER\n \u003c/dt\u003e \n \u003cdd\u003e\n  The standard layer, where most components go. This the bottommost layer. \n \u003c/dd\u003e\n \u003cdt\u003e\n  PALETTE_LAYER\n \u003c/dt\u003e \n \u003cdd\u003e\n  The palette layer sits over the default layer. Useful for floating toolbars and palettes, so they can be positioned above other components. \n \u003c/dd\u003e\n \u003cdt\u003e\n  MODAL_LAYER\n \u003c/dt\u003e \n \u003cdd\u003e\n  The layer used for modal dialogs. They will appear on top of any toolbars, palettes, or standard components in the container. \n \u003c/dd\u003e\n \u003cdt\u003e\n  POPUP_LAYER\n \u003c/dt\u003e \n \u003cdd\u003e\n  The popup layer displays above dialogs. That way, the popup windows associated with combo boxes, tooltips, and other help text will appear above the component, palette, or dialog that generated them. \n \u003c/dd\u003e\n \u003cdt\u003e\n  DRAG_LAYER\n \u003c/dt\u003e \n \u003cdd\u003e\n  When dragging a component, reassigning it to the drag layer ensures that it is positioned over every other component in the container. When finished dragging, it can be reassigned to its normal layer. \n \u003c/dd\u003e\n\u003c/dl\u003e The \n\u003ccode\u003eJLayeredPane\u003c/code\u003e methods \n\u003ccode\u003emoveToFront(Component)\u003c/code\u003e, \n\u003ccode\u003emoveToBack(Component)\u003c/code\u003e and \n\u003ccode\u003esetPosition\u003c/code\u003e can be used to reposition a component within its layer. The \n\u003ccode\u003esetLayer\u003c/code\u003e method can also be used to change the component\u0027s current layer. \n\u003ch2\u003eDetails\u003c/h2\u003e \n\u003ccode\u003eJLayeredPane\u003c/code\u003e manages its list of children like \n\u003ccode\u003eContainer\u003c/code\u003e, but allows for the definition of a several layers within itself. Children in the same layer are managed exactly like the normal \n\u003ccode\u003eContainer\u003c/code\u003e object, with the added feature that when children components overlap, children in higher layers display above the children in lower layers. \n\u003cp\u003e Each layer is a distinct integer number. The layer attribute can be set on a \u003ccode\u003eComponent\u003c/code\u003e by passing an \u003ccode\u003eInteger\u003c/code\u003e object during the add call.\u003cbr\u003e For example: \u003c/p\u003e\n\u003cpre\u003e     layeredPane.add(child, JLayeredPane.DEFAULT_LAYER);\n or\n     layeredPane.add(child, Integer.valueOf(10));\n \u003c/pre\u003e The layer attribute can also be set on a Component by calling\n\u003cpre\u003e     layeredPaneParent.setLayer(child, 10)\u003c/pre\u003e on the \n\u003ccode\u003eJLayeredPane\u003c/code\u003e that is the parent of component. The layer should be set \n\u003ci\u003ebefore\u003c/i\u003e adding the child to the parent. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Higher number layers display above lower number layers. So, using numbers for the layers and letters for individual components, a representative list order would look like this:\u003c/p\u003e\n\u003cpre\u003e       5a, 5b, 5c, 2a, 2b, 2c, 1a \u003c/pre\u003e where the leftmost components are closest to the top of the display. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A component can be moved to the top or bottom position within its layer by calling \u003ccode\u003emoveToFront\u003c/code\u003e or \u003ccode\u003emoveToBack\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The position of a component within a layer can also be specified directly. Valid positions range from 0 up to one less than the number of components in that layer. A value of -1 indicates the bottommost position. A value of 0 indicates the topmost position. Unlike layer numbers, higher position values are \u003ci\u003elower\u003c/i\u003e in the display. \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cb\u003eNote:\u003c/b\u003e This sequence (defined by java.awt.Container) is the reverse of the layer numbering sequence. Usually though, you will use \n \u003ccode\u003emoveToFront\u003c/code\u003e, \n \u003ccode\u003emoveToBack\u003c/code\u003e, and \n \u003ccode\u003esetLayer\u003c/code\u003e. \n\u003c/blockquote\u003e Here are some examples using the method add(Component, layer, position): Calling add(5x, 5, -1) results in:\n\u003cpre\u003e       5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a \u003c/pre\u003e Calling add(5z, 5, 2) results in:\n\u003cpre\u003e       5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a \u003c/pre\u003e Calling add(3a, 3, 7) results in:\n\u003cpre\u003e       5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a \u003c/pre\u003e Using normal paint/event mechanics results in 1a appearing at the bottom and 5a being above all other components. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cb\u003eNote:\u003c/b\u003e that these layers are simply a logical construct and LayoutManagers will affect all child components of this container without regard for layer settings. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}