{
  "packageName": "javax.swing",
  "simpleName": "JList",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "VERTICAL",
      "comment": "Indicates a vertical layout of cells, in a single column; the default layout.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setLayoutOrientation(int)\"\u003e\u003ccode\u003esetLayoutOrientation(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JList.VERTICAL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "VERTICAL_WRAP",
      "comment": "Indicates a \"newspaper style\" layout with cells flowing vertically then horizontally.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setLayoutOrientation(int)\"\u003e\u003ccode\u003esetLayoutOrientation(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JList.VERTICAL_WRAP\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HORIZONTAL_WRAP",
      "comment": "Indicates a \"newspaper style\" layout with cells flowing horizontally then vertically.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setLayoutOrientation(int)\"\u003e\u003ccode\u003esetLayoutOrientation(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JList.HORIZONTAL_WRAP\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ListUI",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the ListUI, the look and feel object that renders this component.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eListUI\u003c/code\u003e object that renders this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.ListUI",
            "type": "Class"
          },
          "field": {
            "name": "ui"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the ListUI, the look and feel object that renders this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the Component\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the \n\u003ccode\u003eListUI\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the ListUI property by setting it to the value provided by the current look and feel. If the current cell renderer was installed by the developer (rather than the look and feel itself), this also causes the cell renderer and its children to be updated, by calling SwingUtilities.updateComponentTreeUI on it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIManager.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SwingUtilities.html#updateComponentTreeUI(java.awt.Component)\"\u003e\u003ccode\u003eSwingUtilities.updateComponentTreeUI(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns \"ListUI\", the UIDefaults key used to look up the name of the javax.swing.plaf.ListUI class that defines the look and feel for this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"ListUI\""
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.swing.JList",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrototypeCellValue",
      "comment": "Returns the \"prototypical\" cell value -- a value used to calculate a fixed width and height for cells. This can be null if there is no such value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setPrototypeCellValue(E)\"\u003e\u003ccode\u003esetPrototypeCellValue(E)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eprototypeCellValue\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "javax.swing.JList",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "prototypeCellValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPrototypeCellValue",
      "comment": "Sets the prototypeCellValue property, and then (if the new value is non-null), computes the fixedCellWidth and fixedCellHeight properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component\u0027s preferred size. This method is useful when the list is too long to allow the ListUI to compute the width/height of each cell, and there is a single cell value that is known to occupy as much space as any of the others, a so-called prototype. While all three of the prototypeCellValue, fixedCellHeight, and fixedCellWidth properties may be modified by this method, PropertyChangeEvent notifications are only sent when the prototypeCellValue property changes. To see an example which sets this property, see the class description above. The default value of this property is null. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The cell prototype value, used to compute cell width and height."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getPrototypeCellValue()\"\u003e\u003ccode\u003egetPrototypeCellValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setFixedCellWidth(int)\"\u003e\u003ccode\u003esetFixedCellWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setFixedCellHeight(int)\"\u003e\u003ccode\u003esetFixedCellHeight(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eContainer.addPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprototypeCellValue\u003c/code\u003e - the value on which to base \n\u003ccode\u003efixedCellWidth\u003c/code\u003e and \n\u003ccode\u003efixedCellHeight\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFixedCellWidth",
      "comment": "Returns the value of the fixedCellWidth property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setFixedCellWidth(int)\"\u003e\u003ccode\u003esetFixedCellWidth(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the fixed cell width"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFixedCellWidth",
      "comment": "Sets a fixed value to be used for the width of every cell in the list. If width is -1, cell widths are computed in the ListUI by applying getPreferredSize to the cell renderer component for each list element. The default value of this property is -1. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Defines a fixed cell width when greater than zero."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setPrototypeCellValue(E)\"\u003e\u003ccode\u003esetPrototypeCellValue(E)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setFixedCellWidth(int)\"\u003e\u003ccode\u003esetFixedCellWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eContainer.addPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width to be used for all cells in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFixedCellHeight",
      "comment": "Returns the value of the fixedCellHeight property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setFixedCellHeight(int)\"\u003e\u003ccode\u003esetFixedCellHeight(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the fixed cell height"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFixedCellHeight",
      "comment": "Sets a fixed value to be used for the height of every cell in the list. If height is -1, cell heights are computed in the ListUI by applying getPreferredSize to the cell renderer component for each list element. The default value of this property is -1. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Defines a fixed cell height when greater than zero."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setPrototypeCellValue(E)\"\u003e\u003ccode\u003esetPrototypeCellValue(E)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setFixedCellWidth(int)\"\u003e\u003ccode\u003esetFixedCellWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eContainer.addPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eheight\u003c/code\u003e - the height to be used for all cells in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListCellRenderer",
        "parameters": [
          {
            "lowerBounds": [
              {
                "owner": "javax.swing.JList",
                "name": "E",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellRenderer",
      "comment": "Returns the object responsible for painting list items.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setCellRenderer(javax.swing.ListCellRenderer)\"\u003e\u003ccode\u003esetCellRenderer(javax.swing.ListCellRenderer\u0026lt;? super E\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003ecellRenderer\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ListCellRenderer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "javax.swing.JList",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "cellRenderer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCellRenderer",
      "comment": "Sets the delegate that is used to paint each cell in the list. The job of a cell renderer is discussed in detail in the class level documentation. If the prototypeCellValue property is non-null, setting the cell renderer also causes the fixedCellWidth and fixedCellHeight properties to be re-calculated. Only one PropertyChangeEvent is generated however - for the cellRenderer property. The default value of this property is provided by the ListUI delegate, i.e. by the look and feel implementation. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The component used to draw the cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getCellRenderer()\"\u003e\u003ccode\u003egetCellRenderer()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecellRenderer\u003c/code\u003e - the \n\u003ccode\u003eListCellRenderer\u003c/code\u003e that paints list cells"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionForeground",
      "comment": "Returns the color used to draw the foreground of selected items. DefaultListCellRenderer uses this color to draw the foreground of items in the selected state, as do the renderers installed by most ListUI implementations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionForeground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListCellRenderer\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the color to draw the foreground of selected items"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "selectionForeground"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionForeground",
      "comment": "Sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics. DefaultListCellRenderer uses this color to draw the foreground of items in the selected state, as do the renderers installed by most ListUI implementations. The default value of this property is defined by the look and feel implementation. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The foreground color of selected cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getSelectionForeground()\"\u003e\u003ccode\u003egetSelectionForeground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionBackground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setForeground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003eJComponent.setFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListCellRenderer\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionForeground\u003c/code\u003e - the \n\u003ccode\u003eColor\u003c/code\u003e to use in the foreground for selected list items"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionBackground",
      "comment": "Returns the color used to draw the background of selected items. DefaultListCellRenderer uses this color to draw the background of items in the selected state, as do the renderers installed by most ListUI implementations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionBackground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListCellRenderer\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the color to draw the background of selected items"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "selectionBackground"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionBackground",
      "comment": "Sets the color used to draw the background of selected items, which cell renderers can use fill selected cells. DefaultListCellRenderer uses this color to fill the background of items in the selected state, as do the renderers installed by most ListUI implementations. The default value of this property is defined by the look and feel implementation. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The background color of selected cells."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getSelectionBackground()\"\u003e\u003ccode\u003egetSelectionBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionForeground(java.awt.Color)\"\u003e\u003ccode\u003esetSelectionForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setForeground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setForeground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003eJComponent.setBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003eJComponent.setFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListCellRenderer\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionBackground\u003c/code\u003e - the \n\u003ccode\u003eColor\u003c/code\u003e to use for the background of selected cells"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVisibleRowCount",
      "comment": "Returns the value of the visibleRowCount property. See the documentation for setVisibleRowCount(int) for details on how to interpret this value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setVisibleRowCount(int)\"\u003e\u003ccode\u003esetVisibleRowCount(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003evisibleRowCount\u003c/code\u003e property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "visibleRowCount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVisibleRowCount",
      "comment": "Sets the visibleRowCount property, which has different meanings depending on the layout orientation: For a VERTICAL layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells. In VERTICAL orientation: Setting this property affects the return value of the getPreferredScrollableViewportSize() method, which is used to calculate the preferred size of an enclosing viewport. See that method\u0027s documentation for more details. In HORIZONTAL_WRAP and VERTICAL_WRAP orientations: This affects how cells are wrapped. See the documentation of setLayoutOrientation(int) for more details. The default value of this property is 8. Calling this method with a negative value results in the property being set to 0. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The preferred number of rows to display without requiring scrolling"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getVisibleRowCount()\"\u003e\u003ccode\u003egetVisibleRowCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getPreferredScrollableViewportSize()\"\u003e\u003ccode\u003egetPreferredScrollableViewportSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setLayoutOrientation(int)\"\u003e\u003ccode\u003esetLayoutOrientation(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVisibleRect()\"\u003e\u003ccode\u003eJComponent.getVisibleRect()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJViewport\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRowCount\u003c/code\u003e - an integer specifying the preferred number of rows to display without requiring scrolling"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutOrientation",
      "comment": "Returns the layout orientation property for the list: VERTICAL if the layout is a single column of cells, VERTICAL_WRAP if the layout is \"newspaper style\" with the content flowing vertically then horizontally, or HORIZONTAL_WRAP if the layout is \"newspaper style\" with the content flowing horizontally then vertically.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setLayoutOrientation(int)\"\u003e\u003ccode\u003esetLayoutOrientation(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003elayoutOrientation\u003c/code\u003e property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "layoutOrientation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLayoutOrientation",
      "comment": "Defines the way list cells are layed out. Consider a JList with five cells. Cells can be layed out in one of the following ways:  VERTICAL:          0\n                    1\n                    2\n                    3\n                    4\n\n HORIZONTAL_WRAP:   0  1  2\n                    3  4\n\n VERTICAL_WRAP:     0  3\n                    1  4\n                    2\n A description of these layouts follows: Describes layouts VERTICAL,HORIZONTAL_WRAP, and VERTICAL_WRAP Value Description VERTICAL Cells are layed out vertically in a single column. HORIZONTAL_WRAP Cells are layed out horizontally, wrapping to a new row as necessary. If the visibleRowCount property is less than or equal to zero, wrapping is determined by the width of the list; otherwise wrapping is done in such a way as to ensure visibleRowCount rows in the list. VERTICAL_WRAP Cells are layed out vertically, wrapping to a new column as necessary. If the visibleRowCount property is less than or equal to zero, wrapping is determined by the height of the list; otherwise wrapping is done at visibleRowCount rows. The default value of this property is VERTICAL.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "JList.VERTICAL",
                "JList.HORIZONTAL_WRAP",
                "JList.VERTICAL_WRAP"
              ]
            },
            {
              "name": "escription",
              "value": "Defines the way list cells are layed out."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getLayoutOrientation()\"\u003e\u003ccode\u003egetLayoutOrientation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setVisibleRowCount(int)\"\u003e\u003ccode\u003esetVisibleRowCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getScrollableTracksViewportHeight()\"\u003e\u003ccode\u003egetScrollableTracksViewportHeight()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getScrollableTracksViewportWidth()\"\u003e\u003ccode\u003egetScrollableTracksViewportWidth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elayoutOrientation\u003c/code\u003e - the new layout orientation, one of: \n\u003ccode\u003eVERTICAL\u003c/code\u003e, \n\u003ccode\u003eHORIZONTAL_WRAP\u003c/code\u003e or \n\u003ccode\u003eVERTICAL_WRAP\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elayoutOrientation\u003c/code\u003e isn\u0027t one of the allowable values"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFirstVisibleIndex",
      "comment": "Returns the smallest list index that is currently visible. In a left-to-right componentOrientation, the first visible cell is found closest to the list\u0027s upper-left corner. In right-to-left orientation, it is found closest to the upper-right corner. If nothing is visible or the list is empty, -1 is returned. Note that the returned cell may only be partially visible.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getLastVisibleIndex()\"\u003e\u003ccode\u003egetLastVisibleIndex()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVisibleRect()\"\u003e\u003ccode\u003eJComponent.getVisibleRect()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the index of the first visible cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLastVisibleIndex",
      "comment": "Returns the largest list index that is currently visible. If nothing is visible or the list is empty, -1 is returned. Note that the returned cell may only be partially visible.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getFirstVisibleIndex()\"\u003e\u003ccode\u003egetFirstVisibleIndex()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVisibleRect()\"\u003e\u003ccode\u003eJComponent.getVisibleRect()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the index of the last visible cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ensureIndexIsVisible",
      "comment": "Scrolls the list within an enclosing viewport to make the specified cell completely visible. This calls scrollRectToVisible with the bounds of the specified cell. For this method to work, the JList must be within a JViewport. If the given index is outside the list\u0027s range of cells, this method results in nothing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#scrollRectToVisible(java.awt.Rectangle)\"\u003e\u003ccode\u003eJComponent.scrollRectToVisible(java.awt.Rectangle)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVisibleRect()\"\u003e\u003ccode\u003eJComponent.getVisibleRect()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the cell to make visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragEnabled",
      "comment": "Turns on or off automatic drag handling. In order to enable automatic drag handling, this property should be set to true, and the list\u0027s TransferHandler needs to be non-null. The default value of the dragEnabled property is false. The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the list\u0027s ListUI. When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel) begin a drag and drop operation whenever the user presses the mouse button over an item and then moves the mouse a few pixels. Setting this property to true can therefore have a subtle effect on how selections behave. If a look and feel is used that ignores this property, you can still begin a drag and drop operation by calling exportAsDrag on the list\u0027s TransferHandler.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "determines whether automatic drag handling is enabled"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getDragEnabled()\"\u003e\u003ccode\u003egetDragEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not to enable automatic drag handling"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e and \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragEnabled",
      "comment": "Returns whether or not automatic drag handling is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setDragEnabled(boolean)\"\u003e\u003ccode\u003esetDragEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003edragEnabled\u003c/code\u003e property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.DropMode",
            "type": "Class"
          },
          "field": {
            "name": "dropMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setDropMode",
      "comment": "Sets the drop mode for this component. For backward compatibility, the default for this property is DropMode.USE_SELECTION. Usage of one of the other modes is recommended, however, for an improved user experience. DropMode.ON, for instance, offers similar behavior of showing items as selected, but does so without affecting the actual selection in the list. JList supports the following drop modes: DropMode.USE_SELECTION DropMode.ON DropMode.INSERT DropMode.ON_OR_INSERT The drop mode is only meaningful if this component has a TransferHandler that accepts drops.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getDropMode()\"\u003e\u003ccode\u003egetDropMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getDropLocation()\"\u003e\u003ccode\u003egetDropLocation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edropMode\u003c/code\u003e - the drop mode to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the drop mode is unsupported or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.DropMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropMode",
      "comment": "Returns the drop mode for this component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop mode for this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JList$DropLocation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropLocation",
      "comment": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown. This method is not meant for querying the drop location from a TransferHandler, as the drop location is only set after the TransferHandler\u0027s canImport has returned and has allowed for the location to be shown. When this property changes, a property change event with name \"dropLocation\" is fired by the component. By default, responsibility for listening for changes to this property and indicating the drop location visually lies with the list\u0027s ListUI, which may paint it directly and/or install a cell renderer to do so. Developers wishing to implement custom drop location painting and/or replace the default cell renderer, may need to honor this property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eTransferHandler.canImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop location"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startIndex"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "bias"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextMatch",
      "comment": "Returns the next list element whose toString value starts with the given prefix.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the string to test for a match",
          "\u003ccode\u003estartIndex\u003c/code\u003e - the index for starting the search",
          "\u003ccode\u003ebias\u003c/code\u003e - the search direction, either Position.Bias.Forward or Position.Bias.Backward."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if prefix is \n\u003ccode\u003enull\u003c/code\u003e or startIndex is out of bounds"
        ],
        "return": [
          "the index of the next list element that starts with the prefix; otherwise \n\u003ccode\u003e-1\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Returns the tooltip text to be used for the given event. This overrides JComponent\u0027s getToolTipText to first check the cell renderer component for the cell over which the event occurred, returning its tooltip text, if any. This implementation allows you to specify tooltip text on the cell level, by using setToolTipText on your cell renderer component. Note: For JList to properly display the tooltips of its renderers in this manner, JList must be a registered component with the ToolTipManager. This registration is done automatically in the constructor. However, if at a later point JList is unregistered, by way of a call to setToolTipText(null), tips from the renderers will no longer display.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setToolTipText(java.lang.String)\"\u003e\u003ccode\u003eJComponent.setToolTipText(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getToolTipText()\"\u003e\u003ccode\u003eJComponent.getToolTipText()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getToolTipText(java.awt.event.MouseEvent)\"\u003egetToolTipText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e to fetch the tooltip text for"
        ],
        "return": [
          "a string containing the tooltip"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "locationToIndex",
      "comment": "Returns the cell index closest to the given location in the list\u0027s coordinate system. To determine if the cell actually contains the specified location, compare the point against the cell\u0027s bounds, as provided by getCellBounds. This method returns -1 if the model is empty This is a cover method that delegates to the method of the same name in the list\u0027s ListUI. It returns -1 if the list has no ListUI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the coordinates of the point"
        ],
        "return": [
          "the cell index closest to the given location, or \n\u003ccode\u003e-1\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexToLocation",
      "comment": "Returns the origin of the specified item in the list\u0027s coordinate system. This method returns null if the index isn\u0027t valid. This is a cover method that delegates to the method of the same name in the list\u0027s ListUI. It returns null if the list has no ListUI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the cell index"
        ],
        "return": [
          "the origin of the cell, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellBounds",
      "comment": "Returns the bounding rectangle, in the list\u0027s coordinate system, for the range of cells specified by the two indices. These indices can be supplied in any order. If the smaller index is outside the list\u0027s range of cells, this method returns null. If the smaller index is valid, but the larger index is outside the list\u0027s range, the bounds of just the first index is returned. Otherwise, the bounds of the valid range is returned. This is a cover method that delegates to the method of the same name in the list\u0027s ListUI. It returns null if the list has no ListUI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - the first index in the range",
          "\u003ccode\u003eindex1\u003c/code\u003e - the second index in the range"
        ],
        "return": [
          "the bounding rectangle for the range of cells, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListModel",
        "parameters": [
          {
            "owner": "javax.swing.JList",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModel",
      "comment": "Returns the data model that holds the list of items displayed by the JList component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setModel(javax.swing.ListModel)\"\u003e\u003ccode\u003esetModel(javax.swing.ListModel\u0026lt;E\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eListModel\u003c/code\u003e that provides the displayed list of items"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ListModel",
            "parameters": [
              {
                "owner": "javax.swing.JList",
                "name": "E",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "model"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the model that represents the contents or \"value\" of the list, notifies property change listeners, and then clears the list\u0027s selection. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The object that contains the data to be drawn by this JList."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#clearSelection()\"\u003e\u003ccode\u003eclearSelection()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodel\u003c/code\u003e - the \n\u003ccode\u003eListModel\u003c/code\u003e that provides the list of items for display"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emodel\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "javax.swing.JList",
            "name": "E",
            "type": "Variable",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "listData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setListData",
      "comment": "Constructs a read-only ListModel from an array of items, and calls setModel with this model. Attempts to pass a null value to this method results in undefined behavior and, most likely, exceptions. The created model references the given array directly. Attempts to modify the array after invoking this method results in undefined behavior.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setModel(javax.swing.ListModel)\"\u003e\u003ccode\u003esetModel(javax.swing.ListModel\u0026lt;E\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistData\u003c/code\u003e - an array of \n\u003ccode\u003eE\u003c/code\u003e containing the items to display in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Vector",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "javax.swing.JList",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setListData",
      "comment": "Constructs a read-only ListModel from a Vector and calls setModel with this model. Attempts to pass a null value to this method results in undefined behavior and, most likely, exceptions. The created model references the given Vector directly. Attempts to modify the Vector after invoking this method results in undefined behavior.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setModel(javax.swing.ListModel)\"\u003e\u003ccode\u003esetModel(javax.swing.ListModel\u0026lt;E\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistData\u003c/code\u003e - a \n\u003ccode\u003eVector\u003c/code\u003e containing the items to display in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createSelectionModel",
      "comment": "Returns an instance of DefaultListSelectionModel; called during construction to initialize the list\u0027s selection model property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionModel(javax.swing.ListSelectionModel)\"\u003e\u003ccode\u003esetSelectionModel(javax.swing.ListSelectionModel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListSelectionModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDefaultListSelecitonModel\u003c/code\u003e, used to initialize the list\u0027s selection model property during construction"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionModel",
      "comment": "Returns the current selection model. The selection model maintains the selection state of the list. See the class level documentation for more details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionModel(javax.swing.ListSelectionModel)\"\u003e\u003ccode\u003esetSelectionModel(javax.swing.ListSelectionModel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eListSelectionModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eListSelectionModel\u003c/code\u003e that maintains the list\u0027s selections"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "firstIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lastIndex"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isAdjusting"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireSelectionValueChanged",
      "comment": "Notifies ListSelectionListeners added directly to the list of selection changes made to the selection model. JList listens for changes made to the selection in the selection model, and forwards notification to listeners added to the list directly, by calling this method. This method constructs a ListSelectionEvent with this list as the source, and the specified arguments, and sends it to the registered ListSelectionListeners.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#removeListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eremoveListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ListSelectionEvent.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eListSelectionEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efirstIndex\u003c/code\u003e - the first index in the range, \n\u003ccode\u003e\u0026lt;\u003d lastIndex\u003c/code\u003e",
          "\u003ccode\u003elastIndex\u003c/code\u003e - the last index in the range, \n\u003ccode\u003e\u0026gt;\u003d firstIndex\u003c/code\u003e",
          "\u003ccode\u003eisAdjusting\u003c/code\u003e - whether or not this is one in a series of multiple events, where changes are still being made"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ListSelectionListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addListSelectionListener",
      "comment": "Adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes. JList takes care of listening for selection state changes in the selection model, and notifies the given listener of each change. ListSelectionEvents sent to the listener have a source property set to this list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getSelectionModel()\"\u003e\u003ccode\u003egetSelectionModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getListSelectionListeners()\"\u003e\u003ccode\u003egetListSelectionListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eListSelectionListener\u003c/code\u003e to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ListSelectionListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeListSelectionListener",
      "comment": "Removes a selection listener from the list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getSelectionModel()\"\u003e\u003ccode\u003egetSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eListSelectionListener\u003c/code\u003e to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ListSelectionListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListSelectionListeners",
      "comment": "Returns an array of all the ListSelectionListeners added to this JList by way of addListSelectionListener.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of the \n\u003ccode\u003eListSelectionListener\u003c/code\u003es on this list, or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ListSelectionModel",
            "type": "Class"
          },
          "field": {
            "name": "selectionModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionModel",
      "comment": "Sets the selectionModel for the list to a non-null ListSelectionModel implementation. The selection model handles the task of making single selections, selections of contiguous ranges, and non-contiguous selections. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The selection model, recording which cells are selected."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getSelectionModel()\"\u003e\u003ccode\u003egetSelectionModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionModel\u003c/code\u003e - the \n\u003ccode\u003eListSelectionModel\u003c/code\u003e that implements the selections"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eselectionModel\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "selectionMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionMode",
      "comment": "Sets the selection mode for the list. This is a cover method that sets the selection mode directly on the selection model. The following list describes the accepted selection modes: ListSelectionModel.SINGLE_SELECTION - Only one list index can be selected at a time. In this mode, setSelectionInterval and addSelectionInterval are equivalent, both replacing the current selection with the index represented by the second argument (the \"lead\"). ListSelectionModel.SINGLE_INTERVAL_SELECTION - Only one contiguous interval can be selected at a time. In this mode, addSelectionInterval behaves like setSelectionInterval (replacing the current selection}, unless the given interval is immediately adjacent to or overlaps the existing selection, and can be used to grow the selection. ListSelectionModel.MULTIPLE_INTERVAL_SELECTION - In this mode, there\u0027s no restriction on what can be selected. This mode is the default.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "ListSelectionModel.SINGLE_SELECTION",
                "ListSelectionModel.SINGLE_INTERVAL_SELECTION",
                "ListSelectionModel.MULTIPLE_INTERVAL_SELECTION"
              ]
            },
            {
              "name": "escription",
              "value": "The selection mode."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getSelectionMode()\"\u003e\u003ccode\u003egetSelectionMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionMode\u003c/code\u003e - the selection mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the selection mode isn\u0027t one of those allowed"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionMode",
      "comment": "Returns the current selection mode for the list. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionMode(int)\"\u003e\u003ccode\u003esetSelectionMode(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current selection mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnchorSelectionIndex",
      "comment": "Returns the anchor selection index. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#getAnchorSelectionIndex()\"\u003e\u003ccode\u003eListSelectionModel.getAnchorSelectionIndex()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the anchor selection index"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeadSelectionIndex",
      "comment": "Returns the lead selection index. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "The lead selection index."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#getLeadSelectionIndex()\"\u003e\u003ccode\u003eListSelectionModel.getLeadSelectionIndex()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the lead selection index"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinSelectionIndex",
      "comment": "Returns the smallest selected cell index, or -1 if the selection is empty. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#getMinSelectionIndex()\"\u003e\u003ccode\u003eListSelectionModel.getMinSelectionIndex()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the smallest selected cell index, or \n\u003ccode\u003e-1\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxSelectionIndex",
      "comment": "Returns the largest selected cell index, or -1 if the selection is empty. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#getMaxSelectionIndex()\"\u003e\u003ccode\u003eListSelectionModel.getMaxSelectionIndex()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the largest selected cell index"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSelectedIndex",
      "comment": "Returns true if the specified index is selected, else false. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#isSelectedIndex(int)\"\u003e\u003ccode\u003eListSelectionModel.isSelectedIndex(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectedIndex(int)\"\u003e\u003ccode\u003esetSelectedIndex(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index to be queried for selection state"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified index is selected, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSelectionEmpty",
      "comment": "Returns true if nothing is selected, else false. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#isSelectionEmpty()\"\u003e\u003ccode\u003eListSelectionModel.isSelectionEmpty()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#clearSelection()\"\u003e\u003ccode\u003eclearSelection()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if nothing is selected, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearSelection",
      "comment": "Clears the selection; after calling this method, isSelectionEmpty will return true. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#clearSelection()\"\u003e\u003ccode\u003eListSelectionModel.clearSelection()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#isSelectionEmpty()\"\u003e\u003ccode\u003eisSelectionEmpty()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "anchor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lead"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionInterval",
      "comment": "Selects the specified interval. Both anchor and lead indices are included. anchor doesn\u0027t have to be less than or equal to lead. This is a cover method that delegates to the method of the same name on the list\u0027s selection model. Refer to the documentation of the selection model class being used for details on how values less than 0 are handled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#setSelectionInterval(int,int)\"\u003e\u003ccode\u003eListSelectionModel.setSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html#setSelectionInterval(int,int)\"\u003e\u003ccode\u003eDefaultListSelectionModel.setSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#createSelectionModel()\"\u003e\u003ccode\u003ecreateSelectionModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addSelectionInterval(int,int)\"\u003e\u003ccode\u003eaddSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#removeSelectionInterval(int,int)\"\u003e\u003ccode\u003eremoveSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanchor\u003c/code\u003e - the first index to select",
          "\u003ccode\u003elead\u003c/code\u003e - the last index to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "anchor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lead"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSelectionInterval",
      "comment": "Sets the selection to be the union of the specified interval with current selection. Both the anchor and lead indices are included. anchor doesn\u0027t have to be less than or equal to lead. This is a cover method that delegates to the method of the same name on the list\u0027s selection model. Refer to the documentation of the selection model class being used for details on how values less than 0 are handled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#addSelectionInterval(int,int)\"\u003e\u003ccode\u003eListSelectionModel.addSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html#addSelectionInterval(int,int)\"\u003e\u003ccode\u003eDefaultListSelectionModel.addSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#createSelectionModel()\"\u003e\u003ccode\u003ecreateSelectionModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionInterval(int,int)\"\u003e\u003ccode\u003esetSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#removeSelectionInterval(int,int)\"\u003e\u003ccode\u003eremoveSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanchor\u003c/code\u003e - the first index to add to the selection",
          "\u003ccode\u003elead\u003c/code\u003e - the last index to add to the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeSelectionInterval",
      "comment": "Sets the selection to be the set difference of the specified interval and the current selection. Both the index0 and index1 indices are removed. index0 doesn\u0027t have to be less than or equal to index1. This is a cover method that delegates to the method of the same name on the list\u0027s selection model. Refer to the documentation of the selection model class being used for details on how values less than 0 are handled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#removeSelectionInterval(int,int)\"\u003e\u003ccode\u003eListSelectionModel.removeSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html#removeSelectionInterval(int,int)\"\u003e\u003ccode\u003eDefaultListSelectionModel.removeSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#createSelectionModel()\"\u003e\u003ccode\u003ecreateSelectionModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setSelectionInterval(int,int)\"\u003e\u003ccode\u003esetSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addSelectionInterval(int,int)\"\u003e\u003ccode\u003eaddSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex0\u003c/code\u003e - the first index to remove from the selection",
          "\u003ccode\u003eindex1\u003c/code\u003e - the last index to remove from the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValueIsAdjusting",
      "comment": "Sets the selection model\u0027s valueIsAdjusting property. When true, upcoming changes to selection should be considered part of a single change. This property is used internally and developers typically need not call this method. For example, when the model is being updated in response to a user drag, the value of the property is set to true when the drag is initiated and set to false when the drag is finished. This allows listeners to update only when a change has been finalized, rather than handling all of the intermediate values. You may want to use this directly if making a series of changes that should be considered part of a single change. This is a cover method that delegates to the method of the same name on the list\u0027s selection model. See the documentation for ListSelectionModel.setValueIsAdjusting(boolean) for more details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#setValueIsAdjusting(boolean)\"\u003e\u003ccode\u003eListSelectionModel.setValueIsAdjusting(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ListSelectionEvent.html#getValueIsAdjusting()\"\u003e\u003ccode\u003eListSelectionEvent.getValueIsAdjusting()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getValueIsAdjusting()\"\u003e\u003ccode\u003egetValueIsAdjusting()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the new value for the property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValueIsAdjusting",
      "comment": "Returns the value of the selection model\u0027s isAdjusting property. This is a cover method that delegates to the method of the same name on the list\u0027s selection model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setValueIsAdjusting(boolean)\"\u003e\u003ccode\u003esetValueIsAdjusting(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#getValueIsAdjusting()\"\u003e\u003ccode\u003eListSelectionModel.getValueIsAdjusting()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the selection model\u0027s \n\u003ccode\u003eisAdjusting\u003c/code\u003e property."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedIndices",
      "comment": "Returns an array of all of the selected indices, in increasing order.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#removeSelectionInterval(int,int)\"\u003e\u003ccode\u003eremoveSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of the selected indices, in increasing order, or an empty array if nothing is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectedIndex",
      "comment": "Selects a single cell. Does nothing if the given index is greater than or equal to the model size. This is a convenience method that uses setSelectionInterval on the selection model. Refer to the documentation for the selection model class being used for details on how values less than 0 are handled.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "The index of the selected cell."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#setSelectionInterval(int,int)\"\u003e\u003ccode\u003eListSelectionModel.setSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#isSelectedIndex(int)\"\u003e\u003ccode\u003eisSelectedIndex(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the cell to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "indices"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectedIndices",
      "comment": "Changes the selection to be the set of indices specified by the given array. Indices greater than or equal to the model size are ignored. This is a convenience method that clears the selection and then uses addSelectionInterval on the selection model to add the indices. Refer to the documentation of the selection model class being used for details on how values less than 0 are handled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html#addSelectionInterval(int,int)\"\u003e\u003ccode\u003eListSelectionModel.addSelectionInterval(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#isSelectedIndex(int)\"\u003e\u003ccode\u003eisSelectedIndex(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindices\u003c/code\u003e - an array of the indices of the cells to select, \n\u003ccode\u003enon-null\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedValues",
      "comment": "Returns an array of all the selected values, in increasing order based on their indices in the list.",
      "annotations": [
        {
          "type": "Deprecated"
        },
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#isSelectedIndex(int)\"\u003e\u003ccode\u003eisSelectedIndex(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the selected values, or an empty array if nothing is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "owner": "javax.swing.JList",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedValuesList",
      "comment": "Returns a list of all the selected items, in increasing order based on their indices in the list.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#isSelectedIndex(int)\"\u003e\u003ccode\u003eisSelectedIndex(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the selected items, or an empty list if nothing is selected"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedIndex",
      "comment": "Returns the smallest selected cell index; the selection when only a single item is selected in the list. When multiple items are selected, it is simply the smallest selected index. Returns -1 if there is no selection. This method is a cover that delegates to getMinSelectionIndex.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getMinSelectionIndex()\"\u003e\u003ccode\u003egetMinSelectionIndex()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the smallest selected cell index"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.swing.JList",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedValue",
      "comment": "Returns the value for the smallest selected cell index; the selected value when only a single item is selected in the list. When multiple items are selected, it is simply the value for the smallest selected index. Returns null if there is no selection. This is a convenience method that simply returns the model value for getMinSelectionIndex.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getMinSelectionIndex()\"\u003e\u003ccode\u003egetMinSelectionIndex()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#addListSelectionListener(javax.swing.event.ListSelectionListener)\"\u003e\u003ccode\u003eaddListSelectionListener(javax.swing.event.ListSelectionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the first selected value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "anObject"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "shouldScroll"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectedValue",
      "comment": "Selects the specified object from the list. If the object passed is null, the selection is cleared.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eanObject\u003c/code\u003e - the object to select",
          "\u003ccode\u003eshouldScroll\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the list should scroll to display the selected object, if one exists; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredScrollableViewportSize",
      "comment": "Computes the size of viewport needed to display visibleRowCount rows. The value returned by this method depends on the layout orientation: VERTICAL: This is trivial if both fixedCellWidth and fixedCellHeight have been set (either explicitly or by specifying a prototype cell value). The width is simply the fixedCellWidth plus the list\u0027s horizontal insets. The height is the fixedCellHeight multiplied by the visibleRowCount, plus the list\u0027s vertical insets. If either fixedCellWidth or fixedCellHeight haven\u0027t been specified, heuristics are used. If the model is empty, the width is the fixedCellWidth, if greater than 0, or a hard-coded value of 256. The height is the fixedCellHeight multiplied by visibleRowCount, if fixedCellHeight is greater than 0, otherwise it is a hard-coded value of 16 multiplied by visibleRowCount. If the model isn\u0027t empty, the width is the preferred size\u0027s width, typically the width of the widest list element. The height is the height of the cell with index 0 multiplied by the visibleRowCount, plus the list\u0027s vertical insets. VERTICAL_WRAP or HORIZONTAL_WRAP: This method simply returns the value from getPreferredSize. The list\u0027s ListUI is expected to override getPreferredSize to return an appropriate value.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getPreferredScrollableViewportSize()\"\u003e\u003ccode\u003egetPreferredScrollableViewportSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#setPrototypeCellValue(E)\"\u003e\u003ccode\u003esetPrototypeCellValue(E)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()\"\u003egetPreferredScrollableViewportSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a dimension containing the size of the viewport needed to display \n\u003ccode\u003evisibleRowCount\u003c/code\u003e rows"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableUnitIncrement",
      "comment": "Returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling). For horizontal scrolling, if the layout orientation is VERTICAL, then the list\u0027s font size is returned (or 1 if the font is null).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003egetScrollableBlockIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableUnitIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less or equal to zero to scroll up/back, greater than zero for down/forward"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evisibleRect\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or \n\u003ccode\u003eorientation\u003c/code\u003e isn\u0027t one of \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e"
        ],
        "return": [
          "the \"unit\" increment for scrolling in the specified direction; always positive"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableBlockIncrement",
      "comment": "Returns the distance to scroll to expose the next or previous block. For vertical scrolling, the following rules are used: if scrolling down, returns the distance to scroll so that the last visible element becomes the first completely visible element if scrolling up, returns the distance to scroll so that the first visible element becomes the last completely visible element returns visibleRect.height if the list is empty For horizontal scrolling, when the layout orientation is either VERTICAL_WRAP or HORIZONTAL_WRAP: if scrolling right, returns the distance to scroll so that the last visible element becomes the first completely visible element if scrolling left, returns the distance to scroll so that the first visible element becomes the last completely visible element returns visibleRect.width if the list is empty For horizontal scrolling and VERTICAL orientation, returns visibleRect.width. Note that the value of visibleRect must be the equal to this.getVisibleRect().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003egetScrollableUnitIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableBlockIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less or equal to zero to scroll up/back, greater than zero for down/forward"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evisibleRect\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or \n\u003ccode\u003eorientation\u003c/code\u003e isn\u0027t one of \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e"
        ],
        "return": [
          "the \"block\" increment for scrolling in the specified direction; always positive"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportWidth",
      "comment": "Returns true if this JList is displayed in a JViewport and the viewport is wider than the list\u0027s preferred width, or if the layout orientation is HORIZONTAL_WRAP and visibleRowCount \u003c\u003d 0; otherwise returns false. If false, then don\u0027t track the viewport\u0027s width. This allows horizontal scrolling if the JViewport is itself embedded in a JScrollPane.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003e\u003ccode\u003eScrollable.getScrollableTracksViewportWidth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003egetScrollableTracksViewportWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "whether or not an enclosing viewport should force the list\u0027s width to match its own"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportHeight",
      "comment": "Returns true if this JList is displayed in a JViewport and the viewport is taller than the list\u0027s preferred height, or if the layout orientation is VERTICAL_WRAP and visibleRowCount \u003c\u003d 0; otherwise returns false. If false, then don\u0027t track the viewport\u0027s height. This allows vertical scrolling if the JViewport is itself embedded in a JScrollPane.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003e\u003ccode\u003eScrollable.getScrollableTracksViewportHeight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003egetScrollableTracksViewportHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "whether or not an enclosing viewport should force the list\u0027s height to match its own"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a String representation of this JList. This method is intended to be used only for debugging purposes, and the content and format of the returned String may vary between implementations. The returned String may be empty, but may not be null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representation of this \n\u003ccode\u003eJList\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JList. For JList, the AccessibleContext takes the form of an AccessibleJList. A new AccessibleJList instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAccessibleJList\u003c/code\u003e that serves as the \n\u003ccode\u003eAccessibleContext\u003c/code\u003e of this \n\u003ccode\u003eJList\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ListModel",
            "parameters": [
              {
                "owner": "javax.swing.JList",
                "name": "E",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "dataModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JList that displays elements from the specified, non-null, model. All JList constructors delegate to this one. This constructor registers the list with the ToolTipManager, allowing for tooltips to be provided by the cell renderers.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataModel\u003c/code\u003e - the model for the list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the model is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "owner": "javax.swing.JList",
            "name": "E",
            "type": "Variable",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "listData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JList that displays the elements in the specified array. This constructor creates a read-only model for the given array, and then delegates to the constructor that takes a ListModel. Attempts to pass a null value to this method results in undefined behavior and, most likely, exceptions. The created model references the given array directly. Attempts to modify the array after constructing the list results in undefined behavior.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistData\u003c/code\u003e - the array of Objects to be loaded into the data model, \n\u003ccode\u003enon-null\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Vector",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "javax.swing.JList",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JList that displays the elements in the specified Vector. This constructor creates a read-only model for the given Vector, and then delegates to the constructor that takes a ListModel. Attempts to pass a null value to this method results in undefined behavior and, most likely, exceptions. The created model references the given Vector directly. Attempts to modify the Vector after constructing the list results in undefined behavior.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistData\u003c/code\u003e - the \n\u003ccode\u003eVector\u003c/code\u003e to be loaded into the data model, \n\u003ccode\u003enon-null\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JList with an empty, read-only, model.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.JList$AccessibleJList",
    "javax.swing.JList$DropLocation"
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JList",
  "comment": "A component that displays a list of objects and allows the user to select one or more items. A separate model, \n\u003ccode\u003eListModel\u003c/code\u003e, maintains the contents of the list. \n\u003cp\u003e It\u0027s easy to display an array or Vector of objects, using the \u003ccode\u003eJList\u003c/code\u003e constructor that automatically builds a read-only \u003ccode\u003eListModel\u003c/code\u003e instance for you: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n // Create a JList that displays strings from an array\n\n String[] data \u003d {\"one\", \"two\", \"three\", \"four\"};\n JList\u0026lt;String\u0026gt; myList \u003d new JList\u0026lt;String\u0026gt;(data);\n\n // Create a JList that displays the superclasses of JList.class, by\n // creating it with a Vector populated with this data\n\n Vector\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; superClasses \u003d new Vector\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt;();\n Class\u0026lt;JList\u0026gt; rootClass \u003d javax.swing.JList.class;\n for(Class\u0026lt;?\u0026gt; cls \u003d rootClass; cls !\u003d null; cls \u003d cls.getSuperclass()) {\n     superClasses.addElement(cls);\n }\n JList\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; myList \u003d new JList\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt;(superClasses);\n\n // The automatically created model is stored in JList\u0027s \"model\"\n // property, which you can retrieve\n\n ListModel\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; model \u003d myList.getModel();\n for(int i \u003d 0; i \u0026lt; model.getSize(); i++) {\n     System.out.println(model.getElementAt(i));\n }\n \u003c/code\u003e\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eListModel\u003c/code\u003e can be supplied directly to a \u003ccode\u003eJList\u003c/code\u003e by way of a constructor or the \u003ccode\u003esetModel\u003c/code\u003e method. The contents need not be static - the number of items, and the values of items can change over time. A correct \u003ccode\u003eListModel\u003c/code\u003e implementation notifies the set of \u003ccode\u003ejavax.swing.event.ListDataListener\u003c/code\u003es that have been added to it, each time a change occurs. These changes are characterized by a \u003ccode\u003ejavax.swing.event.ListDataEvent\u003c/code\u003e, which identifies the range of list indices that have been modified, added, or removed. \u003ccode\u003eJList\u003c/code\u003e\u0027s \u003ccode\u003eListUI\u003c/code\u003e is responsible for keeping the visual representation up to date with changes, by listening to the model. \u003c/p\u003e\n\u003cp\u003e Simple, dynamic-content, \u003ccode\u003eJList\u003c/code\u003e applications can use the \u003ccode\u003eDefaultListModel\u003c/code\u003e class to maintain list elements. This class implements the \u003ccode\u003eListModel\u003c/code\u003e interface and also provides a \u003ccode\u003ejava.util.Vector\u003c/code\u003e-like API. Applications that need a more custom \u003ccode\u003eListModel\u003c/code\u003e implementation may instead wish to subclass \u003ccode\u003eAbstractListModel\u003c/code\u003e, which provides basic support for managing and notifying listeners. For example, a read-only implementation of \u003ccode\u003eAbstractListModel\u003c/code\u003e: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n // This list model has about 2^16 elements.  Enjoy scrolling.\n\n ListModel\u0026lt;String\u0026gt; bigData \u003d new AbstractListModel\u0026lt;String\u0026gt;() {\n     public int getSize() { return Short.MAX_VALUE; }\n     public String getElementAt(int index) { return \"Index \" + index; }\n };\n \u003c/code\u003e\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The selection state of a \u003ccode\u003eJList\u003c/code\u003e is managed by another separate model, an instance of \u003ccode\u003eListSelectionModel\u003c/code\u003e. \u003ccode\u003eJList\u003c/code\u003e is initialized with a selection model on construction, and also contains methods to query or set this selection model. Additionally, \u003ccode\u003eJList\u003c/code\u003e provides convenient methods for easily managing the selection. These methods, such as \u003ccode\u003esetSelectedIndex\u003c/code\u003e and \u003ccode\u003egetSelectedValue\u003c/code\u003e, are cover methods that take care of the details of interacting with the selection model. By default, \u003ccode\u003eJList\u003c/code\u003e\u0027s selection model is configured to allow any combination of items to be selected at a time; selection mode \u003ccode\u003eMULTIPLE_INTERVAL_SELECTION\u003c/code\u003e. The selection mode can be changed on the selection model directly, or via \u003ccode\u003eJList\u003c/code\u003e\u0027s cover method. Responsibility for updating the selection model in response to user gestures lies with the list\u0027s \u003ccode\u003eListUI\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A correct \u003ccode\u003eListSelectionModel\u003c/code\u003e implementation notifies the set of \u003ccode\u003ejavax.swing.event.ListSelectionListener\u003c/code\u003es that have been added to it each time a change to the selection occurs. These changes are characterized by a \u003ccode\u003ejavax.swing.event.ListSelectionEvent\u003c/code\u003e, which identifies the range of the selection change. \u003c/p\u003e\n\u003cp\u003e The preferred way to listen for changes in list selection is to add \u003ccode\u003eListSelectionListener\u003c/code\u003es directly to the \u003ccode\u003eJList\u003c/code\u003e. \u003ccode\u003eJList\u003c/code\u003e then takes care of listening to the selection model and notifying your listeners of change. \u003c/p\u003e\n\u003cp\u003e Responsibility for listening to selection changes in order to keep the list\u0027s visual representation up to date lies with the list\u0027s \u003ccode\u003eListUI\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ca id\u003d\"renderer\"\u003e\u003c/a\u003e Painting of cells in a \u003ccode\u003eJList\u003c/code\u003e is handled by a delegate called a cell renderer, installed on the list as the \u003ccode\u003ecellRenderer\u003c/code\u003e property. The renderer provides a \u003ccode\u003ejava.awt.Component\u003c/code\u003e that is used like a \"rubber stamp\" to paint the cells. Each time a cell needs to be painted, the list\u0027s \u003ccode\u003eListUI\u003c/code\u003e asks the cell renderer for the component, moves it into place, and has it paint the contents of the cell by way of its \u003ccode\u003epaint\u003c/code\u003e method. A default cell renderer, which uses a \u003ccode\u003eJLabel\u003c/code\u003e component to render, is installed by the lists\u0027s \u003ccode\u003eListUI\u003c/code\u003e. You can substitute your own renderer using code like this: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n  // Display an icon and a string for each object in the list.\n\n class MyCellRenderer extends JLabel implements ListCellRenderer\u0026lt;Object\u0026gt; {\n     static final ImageIcon longIcon \u003d new ImageIcon(\"long.gif\");\n     static final ImageIcon shortIcon \u003d new ImageIcon(\"short.gif\");\n\n     // This is the only method defined by ListCellRenderer.\n     // We just reconfigure the JLabel each time we\u0027re called.\n\n     public Component getListCellRendererComponent(\n       JList\u0026lt;?\u0026gt; list,           // the list\n       Object value,            // value to display\n       int index,               // cell index\n       boolean isSelected,      // is the cell selected\n       boolean cellHasFocus)    // does the cell have focus\n     {\n         String s \u003d value.toString();\n         setText(s);\n         setIcon((s.length() \u0026gt; 10) ? longIcon : shortIcon);\n         if (isSelected) {\n             setBackground(list.getSelectionBackground());\n             setForeground(list.getSelectionForeground());\n         } else {\n             setBackground(list.getBackground());\n             setForeground(list.getForeground());\n         }\n         setEnabled(list.isEnabled());\n         setFont(list.getFont());\n         setOpaque(true);\n         return this;\n     }\n }\n\n myList.setCellRenderer(new MyCellRenderer());\n \u003c/code\u003e\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Another job for the cell renderer is in helping to determine sizing information for the list. By default, the list\u0027s \u003ccode\u003eListUI\u003c/code\u003e determines the size of cells by asking the cell renderer for its preferred size for each list item. This can be expensive for large lists of items. To avoid these calculations, you can set a \u003ccode\u003efixedCellWidth\u003c/code\u003e and \u003ccode\u003efixedCellHeight\u003c/code\u003e on the list, or have these values calculated automatically based on a single prototype value: \u003ca id\u003d\"prototype_example\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n JList\u0026lt;String\u0026gt; bigDataList \u003d new JList\u0026lt;String\u0026gt;(bigData);\n\n // We don\u0027t want the JList implementation to compute the width\n // or height of all of the list cells, so we give it a string\n // that\u0027s as big as we\u0027ll need for any cell.  It uses this to\n // compute values for the fixedCellWidth and fixedCellHeight\n // properties.\n\n bigDataList.setPrototypeCellValue(\"Index 1234567890\");\n \u003c/code\u003e\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eJList\u003c/code\u003e doesn\u0027t implement scrolling directly. To create a list that scrolls, make it the viewport view of a \u003ccode\u003eJScrollPane\u003c/code\u003e. For example: \u003c/p\u003e\n\u003cpre\u003e JScrollPane scrollPane \u003d new JScrollPane(myList);\n\n // Or in two steps:\n JScrollPane scrollPane \u003d new JScrollPane();\n scrollPane.getViewport().setView(myList);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eJList\u003c/code\u003e doesn\u0027t provide any special handling of double or triple (or N) mouse clicks, but it\u0027s easy to add a \u003ccode\u003eMouseListener\u003c/code\u003e if you wish to take action on these events. Use the \u003ccode\u003elocationToIndex\u003c/code\u003e method to determine what cell was clicked. For example: \u003c/p\u003e\n\u003cpre\u003e MouseListener mouseListener \u003d new MouseAdapter() {\n     public void mouseClicked(MouseEvent e) {\n         if (e.getClickCount() \u003d\u003d 2) {\n             int index \u003d list.locationToIndex(e.getPoint());\n             System.out.println(\"Double clicked on Item \" + index);\n          }\n     }\n };\n list.addMouseListener(mouseListener);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e See \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/list.html\"\u003eHow to Use Lists\u003c/a\u003e in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/\"\u003e\u003cem\u003eThe Java Tutorial\u003c/em\u003e\u003c/a\u003e for further documentation.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eListModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractListModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eAbstractListModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eListSelectionModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListSelectionModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListSelectionModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListCellRenderer.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eListCellRenderer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListCellRenderer\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}