{
  "packageName": "javax.swing",
  "simpleName": "LayoutStyle",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setInstance",
      "comment": "Sets the shared instance of LayoutStyle. Specifying null results in using the LayoutStyle from the current LookAndFeel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LayoutStyle.html#getInstance()\"\u003e\u003ccode\u003egetInstance()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the \n\u003ccode\u003eLayoutStyle\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.LayoutStyle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns the shared instance of LayoutStyle. If an instance has not been specified in setInstance, this will return the LayoutStyle from the current LookAndFeel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getLayoutStyle()\"\u003e\u003ccode\u003eLookAndFeel.getLayoutStyle()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the shared instance of \n\u003ccode\u003eLayoutStyle\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPreferredGap",
      "comment": "Returns the amount of space to use between two components. The return value indicates the distance to place component2 relative to component1. For example, the following returns the amount of space to place between component2 and component1 when component2 is placed vertically above component1:    int gap \u003d getPreferredGap(component1, component2,\n                             ComponentPlacement.RELATED,\n                             SwingConstants.NORTH, parent);\n The type parameter indicates the relation between the two components. If the two components will be contained in the same parent and are showing similar logically related items, use RELATED. If the two components will be contained in the same parent but show logically unrelated items use UNRELATED. Some look and feels may not distinguish between the RELATED and UNRELATED types. The return value is not intended to take into account the current size and position of component2 or component1. The return value may take into consideration various properties of the components. For example, the space may vary based on font size, or the preferred size of the component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getLayoutStyle()\"\u003e\u003ccode\u003eLookAndFeel.getLayoutStyle()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponent1\u003c/code\u003e - the \n\u003ccode\u003eJComponent\u003c/code\u003e \n\u003ccode\u003ecomponent2\u003c/code\u003e is being placed relative to",
          "\u003ccode\u003ecomponent2\u003c/code\u003e - the \n\u003ccode\u003eJComponent\u003c/code\u003e being placed",
          "\u003ccode\u003eposition\u003c/code\u003e - the position \n\u003ccode\u003ecomponent2\u003c/code\u003e is being placed relative to \n\u003ccode\u003ecomponent1\u003c/code\u003e; one of \n\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.EAST\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.WEST\u003c/code\u003e",
          "\u003ccode\u003etype\u003c/code\u003e - how the two components are being placed",
          "\u003ccode\u003eparent\u003c/code\u003e - the parent of \n\u003ccode\u003ecomponent2\u003c/code\u003e; this may differ from the actual parent and it may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecomponent1\u003c/code\u003e, \n\u003ccode\u003ecomponent2\u003c/code\u003e or \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eposition\u003c/code\u003e is not one of \n\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.EAST\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.WEST\u003c/code\u003e"
        ],
        "return": [
          "the amount of space to place between the two components"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getContainerGap",
      "comment": "Returns the amount of space to place between the component and specified edge of its parent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eJComponent\u003c/code\u003e being positioned",
          "\u003ccode\u003eposition\u003c/code\u003e - the position \n\u003ccode\u003ecomponent\u003c/code\u003e is being placed relative to its parent; one of \n\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.EAST\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.WEST\u003c/code\u003e",
          "\u003ccode\u003eparent\u003c/code\u003e - the parent of \n\u003ccode\u003ecomponent\u003c/code\u003e; this may differ from the actual parent and may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eposition\u003c/code\u003e is not one of \n\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e, \n\u003ccode\u003eSwingConstants.EAST\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.WEST\u003c/code\u003e"
        ],
        "return": [
          "the amount of space to place between the component and specified edge"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new LayoutStyle. You generally don\u0027t create a LayoutStyle. Instead use the method getInstance to obtain the current LayoutStyle.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.LayoutStyle$ComponentPlacement"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.LayoutStyle",
  "comment": "\u003ccode\u003eLayoutStyle\u003c/code\u003e provides information about how to position components. This class is primarily useful for visual tools and layout managers. Most developers will not need to use this class. \n\u003cp\u003e You typically don\u0027t set or create a \u003ccode\u003eLayoutStyle\u003c/code\u003e. Instead use the static method \u003ccode\u003egetInstance\u003c/code\u003e to obtain the current instance.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}