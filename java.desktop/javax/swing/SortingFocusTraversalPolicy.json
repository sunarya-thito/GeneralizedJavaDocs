{
  "packageName": "javax.swing",
  "simpleName": "SortingFocusTraversalPolicy",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.InternalFrameFocusTraversalPolicy",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "aContainer"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentAfter",
      "comment": "Returns the Component that should receive the focus after aComponent. aContainer must be a focus cycle root of aComponent or a focus traversal policy provider. By default, SortingFocusTraversalPolicy implicitly transfers focus down- cycle. That is, during normal focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root\u0027s default Component to focus. This behavior can be disabled using the setImplicitDownCycleTraversal method. If aContainer is focus traversal policy provider, the focus is always transferred down-cycle.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html#getComponentAfter(java.awt.Container,java.awt.Component)\"\u003egetComponentAfter\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003eFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider",
          "\u003ccode\u003eaComponent\u003c/code\u003e - a (possibly indirect) child of aContainer, or aContainer itself"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is not a focus cycle root of aComponent or a focus traversal policy provider, or if either aContainer or aComponent is null"
        ],
        "return": [
          "the Component that should receive the focus after aComponent, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "aContainer"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentBefore",
      "comment": "Returns the Component that should receive the focus before aComponent. aContainer must be a focus cycle root of aComponent or a focus traversal policy provider. By default, SortingFocusTraversalPolicy implicitly transfers focus down- cycle. That is, during normal focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root\u0027s default Component to focus. This behavior can be disabled using the setImplicitDownCycleTraversal method. If aContainer is focus traversal policy provider, the focus is always transferred down-cycle.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html#getComponentBefore(java.awt.Container,java.awt.Component)\"\u003egetComponentBefore\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003eFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider",
          "\u003ccode\u003eaComponent\u003c/code\u003e - a (possibly indirect) child of aContainer, or aContainer itself"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is not a focus cycle root of aComponent or a focus traversal policy provider, or if either aContainer or aComponent is null"
        ],
        "return": [
          "the Component that should receive the focus before aComponent, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "aContainer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFirstComponent",
      "comment": "Returns the first Component in the traversal cycle. This method is used to determine the next Component to focus when traversal wraps in the forward direction.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html#getFirstComponent(java.awt.Container)\"\u003egetFirstComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003eFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider whose first Component is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is null"
        ],
        "return": [
          "the first Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "aContainer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLastComponent",
      "comment": "Returns the last Component in the traversal cycle. This method is used to determine the next Component to focus when traversal wraps in the reverse direction.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html#getLastComponent(java.awt.Container)\"\u003egetLastComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003eFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider whose last Component is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is null"
        ],
        "return": [
          "the last Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "aContainer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultComponent",
      "comment": "Returns the default Component to focus. This Component will be the first to receive focus when traversing down into a new focus traversal cycle rooted at aContainer. The default implementation of this method returns the same Component as getFirstComponent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getFirstComponent(java.awt.Container)\"\u003e\u003ccode\u003egetFirstComponent(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html#getDefaultComponent(java.awt.Container)\"\u003egetDefaultComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003eFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - a focus cycle root of aComponent or a focus traversal policy provider whose default Component is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if aContainer is null"
        ],
        "return": [
          "the default Component in the traversal cycle of aContainer, or null if no suitable Component can be found"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "implicitDownCycleTraversal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setImplicitDownCycleTraversal",
      "comment": "Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly. If true, during normal focus traversal, the Component traversed after a focus cycle root will be the focus- cycle-root\u0027s default Component to focus. If false, the next Component in the focus traversal cycle rooted at the specified focus cycle root will be traversed instead. The default value for this property is true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getImplicitDownCycleTraversal()\"\u003e\u003ccode\u003egetImplicitDownCycleTraversal()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getFirstComponent(java.awt.Container)\"\u003e\u003ccode\u003egetFirstComponent(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimplicitDownCycleTraversal\u003c/code\u003e - whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImplicitDownCycleTraversal",
      "comment": "Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly. If true, during normal focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root\u0027s default Component to focus. If false, the next Component in the focus traversal cycle rooted at the specified focus cycle root will be traversed instead.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#setImplicitDownCycleTraversal(boolean)\"\u003e\u003ccode\u003esetImplicitDownCycleTraversal(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html#getFirstComponent(java.awt.Container)\"\u003e\u003ccode\u003egetFirstComponent(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.awt.Component",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "comparator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setComparator",
      "comment": "Sets the Comparator which will be used to sort the Components in a focus traversal cycle.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomparator\u003c/code\u003e - the Comparator which will be used for sorting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "lowerBounds": [
              {
                "name": "java.awt.Component",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getComparator",
      "comment": "Returns the Comparator which will be used to sort the Components in a focus traversal cycle.",
      "tagMap": {
        "return": [
          "the Comparator which will be used for sorting"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "accept",
      "comment": "Determines whether a Component is an acceptable choice as the new focus owner. By default, this method will accept a Component if and only if it is visible, displayable, enabled, and focusable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the Component whose fitness as a focus owner is to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if aComponent is visible, displayable, enabled, and focusable; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a SortingFocusTraversalPolicy without a Comparator. Subclasses must set the Comparator using setComparator before installing this FocusTraversalPolicy on a focus cycle root or KeyboardFocusManager.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.awt.Component",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "comparator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SortingFocusTraversalPolicy with the specified Comparator.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomparator\u003c/code\u003e - the \n\u003ccode\u003eComparator\u003c/code\u003e to sort by"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.SortingFocusTraversalPolicy",
  "comment": "A FocusTraversalPolicy that determines traversal order by sorting the Components of a focus traversal cycle based on a given Comparator. Portions of the Component hierarchy that are not visible and displayable will not be included. \n\u003cp\u003e By default, SortingFocusTraversalPolicy implicitly transfers focus down- cycle. That is, during normal focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root\u0027s default Component to focus. This behavior can be disabled using the \u003ccode\u003esetImplicitDownCycleTraversal\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e By default, methods of this class with return a Component only if it is visible, displayable, enabled, and focusable. Subclasses can modify this behavior by overriding the \u003ccode\u003eaccept\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e This policy takes into account \u003ca href\u003d\"../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders\"\u003efocus traversal policy providers\u003c/a\u003e. When searching for first/last/next/previous Component, if a focus traversal policy provider is encountered, its focus traversal policy is used to perform the search operation.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}