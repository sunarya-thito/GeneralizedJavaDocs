{
  "packageName": "javax.swing",
  "simpleName": "JTextPane",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JEditorPane",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the class ID for the UI.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html\" title\u003d\"class in javax.swing\"\u003eJEditorPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"TextPaneUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Document",
            "type": "Class"
          },
          "name": "doc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDocument",
      "comment": "Associates the editor with a text document. This must be a StyledDocument.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDocument()\"\u003e\u003ccode\u003eJTextComponent.getDocument()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDocument(javax.swing.text.Document)\"\u003esetDocument\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the document to display/edit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edoc\u003c/code\u003e can\u0027t be narrowed to a \n\u003ccode\u003eStyledDocument\u003c/code\u003e which is the required type of model for this text component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.StyledDocument",
            "type": "Class"
          },
          "name": "doc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStyledDocument",
      "comment": "Associates the editor with a text document. The currently registered factory is used to build a view for the document, which gets displayed by the editor.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the document to display/edit"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.StyledDocument",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyledDocument",
      "comment": "Fetches the model associated with the editor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "content",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replaceSelection",
      "comment": "Replaces the currently selected content with new content represented by the given string. If there is no selection this amounts to an insert of the given text. If there is no replacement text this amounts to a removal of the current selection. The replacement text will have the attributes currently defined for input at the point of insertion. If the document is not editable, beep and return.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#replaceSelection(java.lang.String)\"\u003ereplaceSelection\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html\" title\u003d\"class in javax.swing\"\u003eJEditorPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the content to replace the selection with"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertComponent",
      "comment": "Inserts a component into the document as a replacement for the currently selected content. If there is no selection the component is effectively inserted at the current position of the caret. This is represented in the associated document as an attribute of one character of content. The component given is the actual component used by the JTextPane. Since components cannot be a child of more than one container, this method should not be used in situations where the model is shared by text components. The component is placed relative to the text baseline according to the value returned by Component.getAlignmentY. For Swing components this value can be conveniently set using the method JComponent.setAlignmentY. For example, setting a value of 0.75 will cause 75 percent of the component to be above the baseline, and 25 percent of the component to be below the baseline.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component to insert"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertIcon",
      "comment": "Inserts an icon into the document as a replacement for the currently selected content. If there is no selection the icon is effectively inserted at the current position of the caret. This is represented in the associated document as an attribute of one character of content.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Icon.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eIcon\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the icon to insert"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Style",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addStyle",
      "comment": "Adds a new style into the logical style hierarchy. Style attributes resolve from bottom up so an attribute specified in a child will override an attribute specified in the parent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style (must be unique within the collection of named styles). The name may be \n\u003ccode\u003enull\u003c/code\u003e if the style is unnamed, but the caller is responsible for managing the reference returned as an unnamed style can\u0027t be fetched by name. An unnamed style may be useful for things like character attribute overrides such as found in a style run.",
          "\u003ccode\u003eparent\u003c/code\u003e - the parent style. This may be \n\u003ccode\u003enull\u003c/code\u003e if unspecified attributes need not be resolved in some other style."
        ],
        "return": [
          "the new \n\u003ccode\u003eStyle\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeStyle",
      "comment": "Removes a named non-null style previously added to the document.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyle",
      "comment": "Fetches a named non-null style previously added.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style"
        ],
        "return": [
          "the \n\u003ccode\u003eStyle\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Style",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLogicalStyle",
      "comment": "Sets the logical style to use for the paragraph at the current caret position. If attributes aren\u0027t explicitly set for character and paragraph attributes they will resolve through the logical style assigned to the paragraph, which in term may resolve through some hierarchy completely independent of the element hierarchy in the document.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the logical style to assign to the paragraph, or \n\u003ccode\u003enull\u003c/code\u003e for no style"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLogicalStyle",
      "comment": "Fetches the logical style assigned to the paragraph represented by the current position of the caret, or null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eStyle\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCharacterAttributes",
      "comment": "Fetches the character attributes in effect at the current location of the caret, or null.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the attributes, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "name": "attr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "replace",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCharacterAttributes",
      "comment": "Applies the given attributes to character content. If there is a selection, the attributes are applied to the selection range. If there is no selection, the attributes are applied to the input attribute set which defines the attributes for any new text that gets inserted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the attributes",
          "\u003ccode\u003ereplace\u003c/code\u003e - if true, then replace the existing attributes first"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParagraphAttributes",
      "comment": "Fetches the current paragraph attributes in effect at the location of the caret, or null if none.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "name": "attr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "replace",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParagraphAttributes",
      "comment": "Applies the given attributes to paragraphs. If there is a selection, the attributes are applied to the paragraphs that intersect the selection. If there is no selection, the attributes are applied to the paragraph at the current caret position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e attributes",
          "\u003ccode\u003ereplace\u003c/code\u003e - if true, replace the existing attributes first"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.MutableAttributeSet",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputAttributes",
      "comment": "Gets the input attributes for the pane.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.StyledEditorKit",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getStyledEditorKit",
      "comment": "Gets the editor kit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the editor kit"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.EditorKit",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultEditorKit",
      "comment": "Creates the EditorKit to use by default. This is implemented to return javax.swing.text.StyledEditorKit.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#createDefaultEditorKit()\"\u003ecreateDefaultEditorKit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html\" title\u003d\"class in javax.swing\"\u003eJEditorPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the editor kit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.EditorKit",
            "type": "Class"
          },
          "name": "kit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setEditorKit",
      "comment": "Sets the currently installed kit for handling content. This is the bound property that establishes the content type of the editor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#getEditorKit()\"\u003e\u003ccode\u003eJEditorPane.getEditorKit()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#setEditorKit(javax.swing.text.EditorKit)\"\u003esetEditorKit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html\" title\u003d\"class in javax.swing\"\u003eJEditorPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekit\u003c/code\u003e - the desired editor behavior"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if kit is not a \n\u003ccode\u003eStyledEditorKit\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JTextPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html\" title\u003d\"class in javax.swing\"\u003eJEditorPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJTextPane\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JTextPane. A new instance of StyledEditorKit is created and set, and the document model set to null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.StyledDocument",
            "type": "Class"
          },
          "name": "doc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JTextPane, with a specified document model. A new instance of javax.swing.text.StyledEditorKit is created and set.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the document model"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JTextPane",
  "annotations": [
    {
      "type": {
        "name": "JavaBean",
        "type": "Class"
      },
      "values": [
        {
          "name": "escription",
          "value": "A text component that can be marked up with attributes that are graphically represented."
        }
      ]
    }
  ],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eStyledEditorKit\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}