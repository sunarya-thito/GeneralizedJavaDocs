{
  "packageName": "javax.swing",
  "simpleName": "JComponent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.Container",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "ui",
      "comment": "The look and feel delegate for this component.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.EventListenerList",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listenerList",
      "comment": "A list of event listeners for this component.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHEN_FOCUSED",
      "comment": "Constant used for registerKeyboardAction that means that the command should be invoked when the component has the focus.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JComponent.WHEN_FOCUSED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHEN_ANCESTOR_OF_FOCUSED_COMPONENT",
      "comment": "Constant used for registerKeyboardAction that means that the command should be invoked when the receiving component is an ancestor of the focused component or is itself the focused component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHEN_IN_FOCUSED_WINDOW",
      "comment": "Constant used for registerKeyboardAction that means that the command should be invoked when the receiving component is in the window that has the focus or is itself the focused component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDEFINED_CONDITION",
      "comment": "Constant used by some of the APIs to mean that no condition is defined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JComponent.UNDEFINED_CONDITION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TOOL_TIP_TEXT_KEY",
      "comment": "The comment to display when the cursor is over the component, also known as a \"value tip\", \"flyover help\", or \"flyover label\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JComponent.TOOL_TIP_TEXT_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInheritsPopupMenu",
      "comment": "Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it. The default value for this is false, but some JComponent subclasses that are implemented as a number of JComponents may set this to true. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether or not the JPopupMenu is inherited"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setComponentPopupMenu(javax.swing.JPopupMenu)\"\u003e\u003ccode\u003esetComponentPopupMenu(javax.swing.JPopupMenu)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - whether or not the JPopupMenu is inherited"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInheritsPopupMenu",
      "comment": "Returns true if the JPopupMenu should be inherited from the parent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setComponentPopupMenu(javax.swing.JPopupMenu)\"\u003e\u003ccode\u003esetComponentPopupMenu(javax.swing.JPopupMenu)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the JPopupMenu should be inherited from the parent"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JPopupMenu",
            "type": "Class"
          },
          "field": {
            "name": "popup"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setComponentPopupMenu",
      "comment": "Sets the JPopupMenu for this JComponent. The UI is responsible for registering bindings and adding the necessary listeners such that the JPopupMenu will be shown at the appropriate time. When the JPopupMenu is shown depends upon the look and feel: some may show it on a mouse event, some may enable a key binding. If popup is null, and getInheritsPopupMenu returns true, then getComponentPopupMenu will be delegated to the parent. This provides for a way to make all child components inherit the popupmenu of the parent. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "Popup to show"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getComponentPopupMenu()\"\u003e\u003ccode\u003egetComponentPopupMenu()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epopup\u003c/code\u003e - - the popup that will be assigned to this component may be null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JPopupMenu",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentPopupMenu",
      "comment": "Returns JPopupMenu that assigned for this component. If this component does not have a JPopupMenu assigned to it and getInheritsPopupMenu is true, this will return getParent().getComponentPopupMenu() (assuming the parent is valid.)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setComponentPopupMenu(javax.swing.JPopupMenu)\"\u003e\u003ccode\u003esetComponentPopupMenu(javax.swing.JPopupMenu)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003eJPopupMenu\u003c/code\u003e assigned for this component or \n\u003ccode\u003enull\u003c/code\u003e if no popup assigned"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the UI property to a value from the current look and feel. JComponent subclasses must override this method like this:    public void updateUI() {\n      setUI((SliderUI)UIManager.getUI(this);\n   }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setUI(javax.swing.plaf.ComponentUI)\"\u003e\u003ccode\u003esetUI(javax.swing.plaf.ComponentUI)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getLookAndFeel()\"\u003e\u003ccode\u003eUIManager.getLookAndFeel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIManager.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the look and feel delegate that renders this component.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eComponentUI\u003c/code\u003e object that renders this component"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.ComponentUI",
            "type": "Class"
          },
          "field": {
            "name": "newUI"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setUI",
      "comment": "Sets the look and feel delegate for this component. JComponent subclasses generally override this method to narrow the argument type. For example, in JSlider:  public void setUI(SliderUI newUI) {\n     super.setUI(newUI);\n }\n  Additionally JComponent subclasses must provide a getUI method that returns the correct type. For example:  public SliderUI getUI() {\n     return (SliderUI)ui;\n }",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The component\u0027s look and feel delegate."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eupdateUI()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getLookAndFeel()\"\u003e\u003ccode\u003eUIManager.getLookAndFeel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIManager.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewUI\u003c/code\u003e - the new UI delegate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component. Most applications will never need to call this method. Subclasses of JComponent that support pluggable look and feel should override this method to return a UIDefaults key that maps to the ComponentUI subclass that defines their look and feel.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "UIClassID"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eUIDefaults\u003c/code\u003e key for a \n\u003ccode\u003eComponentUI\u003c/code\u003e subclass"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getComponentGraphics",
      "comment": "Returns the graphics object used to paint this component. If DebugGraphics is turned on we create a new DebugGraphics object if necessary. Otherwise we just configure the specified graphics object\u0027s foreground and font.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the original \n\u003ccode\u003eGraphics\u003c/code\u003e object"
        ],
        "return": [
          "a \n\u003ccode\u003eGraphics\u003c/code\u003e object configured for this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintComponent",
      "comment": "Calls the UI delegate\u0027s paint method, if the UI delegate is non-null. We pass the delegate a copy of the Graphics object to protect the rest of the paint code from irrevocable changes (for example, Graphics.translate). If you override this in a subclass you should not make permanent changes to the passed in Graphics. For example, you should not alter the clip Rectangle or modify the transform. If you need to do these operations you may find it easier to create a new Graphics from the passed in Graphics and manipulate it. Further, if you do not invoke super\u0027s implementation you must honor the opaque property, that is if this component is opaque, you must completely fill in the background in an opaque color. If you do not honor the opaque property you will likely see visual artifacts. The passed in Graphics object might have a transform other than the identify transform installed on it. In this case, you might get unexpected results if you cumulatively apply another transform.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003epaint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e object to protect"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintChildren",
      "comment": "Paints this component\u0027s children. If shouldUseBuffer is true, no component ancestor has a buffer and the component children can use a buffer if they have one. Otherwise, one ancestor has a buffer currently in use and children should not use a buffer to paint.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003epaint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003eContainer.paint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintBorder",
      "comment": "Paints the component\u0027s border. If you override this in a subclass you should not make permanent changes to the passed in Graphics. For example, you should not alter the clip Rectangle or modify the transform. If you need to do these operations you may find it easier to create a new Graphics from the passed in Graphics and manipulate it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003epaint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBorder(javax.swing.border.Border)\"\u003e\u003ccode\u003esetBorder(javax.swing.border.Border)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "update",
      "comment": "Calls paint. Doesn\u0027t clear the background but see ComponentUI.update, which is called by paintComponent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003epaint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintComponent(java.awt.Graphics)\"\u003e\u003ccode\u003epaintComponent(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#update(java.awt.Graphics)\"\u003eupdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Invoked by Swing to draw components. Applications should not invoke paint directly, but should instead use the repaint method to schedule the component for redrawing. This method actually delegates the work of painting to three protected methods: paintComponent, paintBorder, and paintChildren. They\u0027re called in the order listed to ensure that children appear on top of component itself. Generally speaking, the component and its children should not paint in the insets area allocated to the border. Subclasses can just override this method, as always. A subclass that just wants to specialize the UI (look and feel) delegate\u0027s paint method should just override paintComponent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintComponent(java.awt.Graphics)\"\u003e\u003ccode\u003epaintComponent(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintBorder(java.awt.Graphics)\"\u003e\u003ccode\u003epaintBorder(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintChildren(java.awt.Graphics)\"\u003e\u003ccode\u003epaintChildren(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getComponentGraphics(java.awt.Graphics)\"\u003e\u003ccode\u003egetComponentGraphics(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003erepaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#paint(java.awt.Graphics)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printAll",
      "comment": "Invoke this method to print the component. This method invokes print on the component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#print(java.awt.Graphics)\"\u003e\u003ccode\u003eprint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#printComponent(java.awt.Graphics)\"\u003e\u003ccode\u003eprintComponent(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#printBorder(java.awt.Graphics)\"\u003e\u003ccode\u003eprintBorder(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#printChildren(java.awt.Graphics)\"\u003e\u003ccode\u003eprintChildren(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#printAll(java.awt.Graphics)\"\u003eprintAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Invoke this method to print the component to the specified Graphics. This method will result in invocations of printComponent, printBorder and printChildren. It is recommended that you override one of the previously mentioned methods rather than this one if your intention is to customize the way printing looks. However, it can be useful to override this method should you want to prepare state before invoking the superclass behavior. As an example, if you wanted to change the component\u0027s background color before printing, you could do the following:      public void print(Graphics g) {\n         Color orig \u003d getBackground();\n         setBackground(Color.WHITE);\n\n         // wrap in try/finally so that we always restore the state\n         try {\n             super.print(g);\n         } finally {\n             setBackground(orig);\n         }\n     }\n Alternatively, or for components that delegate painting to other objects, you can query during painting whether or not the component is in the midst of a print operation. The isPaintingForPrint method provides this ability and its return value will be changed by this method: to true immediately before rendering and to false immediately after. With each change a property change event is fired on this component with the name \"paintingForPrint\". This method sets the component\u0027s state such that the double buffer will not be used: painting will be done directly on the passed in Graphics.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#printComponent(java.awt.Graphics)\"\u003e\u003ccode\u003eprintComponent(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#printBorder(java.awt.Graphics)\"\u003e\u003ccode\u003eprintBorder(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#printChildren(java.awt.Graphics)\"\u003e\u003ccode\u003eprintChildren(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isPaintingForPrint()\"\u003e\u003ccode\u003eisPaintingForPrint()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#print(java.awt.Graphics)\"\u003eprint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "printComponent",
      "comment": "This is invoked during a printing operation. This is implemented to invoke paintComponent on the component. Override this if you wish to add special painting behavior when printing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#print(java.awt.Graphics)\"\u003e\u003ccode\u003eprint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "printChildren",
      "comment": "Prints this component\u0027s children. This is implemented to invoke paintChildren on the component. Override this if you wish to print the children differently than painting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#print(java.awt.Graphics)\"\u003e\u003ccode\u003eprint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "printBorder",
      "comment": "Prints the component\u0027s border. This is implemented to invoke paintBorder on the component. Override this if you wish to print the border differently that it is painted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#print(java.awt.Graphics)\"\u003e\u003ccode\u003eprint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPaintingTile",
      "comment": "Returns true if the component is currently painting a tile. If this method returns true, paint will be called again for another tile. This method returns false if you are not painting a tile or if the last tile is painted. Use this method to keep some state you might need between tiles.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "true if the component is currently painting a tile, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isPaintingForPrint",
      "comment": "Returns true if the current painting operation on this component is part of a print operation. This method is useful when you want to customize what you print versus what you show on the screen. You can detect changes in the value of this property by listening for property change events on this component with name \"paintingForPrint\". Note: This method provides complimentary functionality to that provided by other high level Swing printing APIs. However, it deals strictly with painting and should not be confused as providing information on higher level print processes. For example, a JTable.print() operation doesn\u0027t necessarily result in a continuous rendering of the full component, and the return value of this method can change multiple times during that operation. It is even possible for the component to be painted to the screen while the printing process is ongoing. In such a case, the return value of this method is true when, and only when, the table is being painted as part of the printing process.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#print(java.awt.Graphics)\"\u003e\u003ccode\u003eprint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the current painting operation on this component is part of a print operation"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isManagingFocus",
      "comment": "In release 1.4, the focus subsystem was rearchitected. For more information, see How to Use the Focus Subsystem, a section in The Java Tutorial. Changes this JComponent\u0027s focus traversal keys to CTRL+TAB and CTRL+SHIFT+TAB. Also prevents SortingFocusTraversalPolicy from considering descendants of this JComponent when computing a focus traversal cycle.",
      "annotations": [
        {
          "type": "Deprecated"
        },
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SortingFocusTraversalPolicy.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSortingFocusTraversalPolicy\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNextFocusableComponent",
      "comment": "In release 1.4, the focus subsystem was rearchitected. For more information, see How to Use the Focus Subsystem, a section in The Java Tutorial. Overrides the default FocusTraversalPolicy for this JComponent\u0027s focus traversal cycle by unconditionally setting the specified Component as the next Component in the cycle, and this JComponent as the specified Component\u0027s previous Component in the cycle.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getNextFocusableComponent()\"\u003e\u003ccode\u003egetNextFocusableComponent()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFocusTraversalPolicy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e that should follow this \n\u003ccode\u003eJComponent\u003c/code\u003e in the focus traversal cycle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextFocusableComponent",
      "comment": "In release 1.4, the focus subsystem was rearchitected. For more information, see How to Use the Focus Subsystem, a section in The Java Tutorial. Returns the Component set by a prior call to setNextFocusableComponent(Component) on this JComponent.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setNextFocusableComponent(java.awt.Component)\"\u003e\u003ccode\u003esetNextFocusableComponent(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eComponent\u003c/code\u003e that will follow this \n\u003ccode\u003eJComponent\u003c/code\u003e in the focus traversal cycle, or \n\u003ccode\u003enull\u003c/code\u003e if none has been explicitly specified"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "requestFocusEnabled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRequestFocusEnabled",
      "comment": "Provides a hint as to whether or not this JComponent should get focus. This is only a hint, and it is up to consumers that are requesting focus to honor this property. This is typically honored for mouse operations, but not keyboard operations. For example, look and feels could verify this property is true before requesting focus during a mouse operation. This would often times be used if you did not want a mouse press on a JComponent to steal focus, but did want the JComponent to be traversable via the keyboard. If you do not want this JComponent focusable at all, use the setFocusable method instead. Please see How to Use the Focus Subsystem, a section in The Java Tutorial, for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html\"\u003eFocus Specification\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusable(boolean)\"\u003e\u003ccode\u003eComponent.setFocusable(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erequestFocusEnabled\u003c/code\u003e - indicates whether you want this \n\u003ccode\u003eJComponent\u003c/code\u003e to be focusable or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRequestFocusEnabled",
      "comment": "Returns true if this JComponent should get focus; otherwise returns false. Please see How to Use the Focus Subsystem, a section in The Java Tutorial, for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setRequestFocusEnabled(boolean)\"\u003e\u003ccode\u003esetRequestFocusEnabled(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html\"\u003eFocus Specification\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isFocusable()\"\u003e\u003ccode\u003eComponent.isFocusable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this component should get focus, otherwise returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "requestFocus",
      "comment": "Requests that this Component gets the input focus. Refer to Component.requestFocus() for a complete description of this method. Note that the use of this method is discouraged because its behavior is platform dependent. Instead we recommend the use of requestFocusInWindow(). If you would like more information on focus, see How to Use the Focus Subsystem, a section in The Java Tutorial.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow(boolean)\"\u003e\u003ccode\u003eComponent.requestFocusInWindow(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003erequestFocus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "temporary"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "requestFocus",
      "comment": "Requests that this Component gets the input focus. Refer to Component.requestFocus(boolean) for a complete description of this method. Note that the use of this method is discouraged because its behavior is platform dependent. Instead we recommend the use of requestFocusInWindow(boolean). If you would like more information on focus, see How to Use the Focus Subsystem, a section in The Java Tutorial.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow(boolean)\"\u003e\u003ccode\u003eComponent.requestFocusInWindow(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus(boolean)\"\u003erequestFocus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporary\u003c/code\u003e - boolean indicating if the focus change is temporary"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the focus change request is guaranteed to fail; \n\u003ccode\u003etrue\u003c/code\u003e if it is likely to succeed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "requestFocusInWindow",
      "comment": "Requests that this Component gets the input focus. Refer to Component.requestFocusInWindow() for a complete description of this method. If you would like more information on focus, see How to Use the Focus Subsystem, a section in The Java Tutorial.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow(boolean)\"\u003e\u003ccode\u003eComponent.requestFocusInWindow(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003erequestFocusInWindow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the focus change request is guaranteed to fail; \n\u003ccode\u003etrue\u003c/code\u003e if it is likely to succeed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "temporary"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "requestFocusInWindow",
      "comment": "Requests that this Component gets the input focus. Refer to Component.requestFocusInWindow(boolean) for a complete description of this method. If you would like more information on focus, see How to Use the Focus Subsystem, a section in The Java Tutorial.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow(boolean)\"\u003e\u003ccode\u003eComponent.requestFocusInWindow(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow(boolean)\"\u003erequestFocusInWindow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporary\u003c/code\u003e - boolean indicating if the focus change is temporary"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the focus change request is guaranteed to fail; \n\u003ccode\u003etrue\u003c/code\u003e if it is likely to succeed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "grabFocus",
      "comment": "Requests that this Component get the input focus, and that this Component\u0027s top-level ancestor become the focused Window. This component must be displayable, visible, and focusable for the request to be granted. This method is intended for use by focus implementations. Client code should not use this method; instead, it should use requestFocusInWindow().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#requestFocusInWindow()\"\u003e\u003ccode\u003erequestFocusInWindow()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "verifyInputWhenFocusTarget"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVerifyInputWhenFocusTarget",
      "comment": "Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus. The default is true. Set to false on components such as a Cancel button or a scrollbar, which should activate even if the input in the current focus owner is not \"passed\" by the input verifier for that component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Whether the Component verifies input before accepting focus."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/InputVerifier.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputVerifier\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setInputVerifier(javax.swing.InputVerifier)\"\u003e\u003ccode\u003esetInputVerifier(javax.swing.InputVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputVerifier()\"\u003e\u003ccode\u003egetInputVerifier()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVerifyInputWhenFocusTarget()\"\u003e\u003ccode\u003egetVerifyInputWhenFocusTarget()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003everifyInputWhenFocusTarget\u003c/code\u003e - value for the \n\u003ccode\u003everifyInputWhenFocusTarget\u003c/code\u003e property"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVerifyInputWhenFocusTarget",
      "comment": "Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/InputVerifier.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputVerifier\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setInputVerifier(javax.swing.InputVerifier)\"\u003e\u003ccode\u003esetInputVerifier(javax.swing.InputVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputVerifier()\"\u003e\u003ccode\u003egetInputVerifier()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setVerifyInputWhenFocusTarget(boolean)\"\u003e\u003ccode\u003esetVerifyInputWhenFocusTarget(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "value of the \n\u003ccode\u003everifyInputWhenFocusTarget\u003c/code\u003e property"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.FontMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFontMetrics",
      "comment": "Gets the FontMetrics for the specified Font.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFont()\"\u003e\u003ccode\u003eComponent.getFont()\u003c/code\u003e\u003c/a\u003e, \n\u003ccode\u003eComponentPeer.getFontMetrics(Font)\u003c/code\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getFontMetrics(java.awt.Font)\"\u003e\u003ccode\u003eToolkit.getFontMetrics(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFontMetrics(java.awt.Font)\"\u003egetFontMetrics\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - the font for which font metrics is to be obtained"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efont\u003c/code\u003e is null"
        ],
        "return": [
          "the font metrics for \n\u003ccode\u003efont\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "preferredSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPreferredSize",
      "comment": "Sets the preferred size of this component. If preferredSize is null, the UI will be asked for the preferred size.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "The preferred size of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getPreferredSize()\"\u003e\u003ccode\u003eComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isPreferredSizeSet()\"\u003e\u003ccode\u003eComponent.isPreferredSizeSet()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setPreferredSize(java.awt.Dimension)\"\u003esetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epreferredSize\u003c/code\u003e - The new preferred size, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "If the preferredSize has been set to a non-null value just returns it. If the UI delegate\u0027s getPreferredSize method returns a non null value then return that; otherwise defer to the component\u0027s layout manager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setPreferredSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetPreferredSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getPreferredSize()\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003epreferredSize\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "maximumSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumSize",
      "comment": "Sets the maximum size of this component to a constant value. Subsequent calls to getMaximumSize will always return this value; the component\u0027s UI will not be asked to compute it. Setting the maximum size to null restores the default behavior.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The maximum size of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMaximumSize()\"\u003e\u003ccode\u003egetMaximumSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setMaximumSize(java.awt.Dimension)\"\u003esetMaximumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emaximumSize\u003c/code\u003e - a \n\u003ccode\u003eDimension\u003c/code\u003e containing the desired maximum allowable size"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSize",
      "comment": "If the maximum size has been set to a non-null value just returns it. If the UI delegate\u0027s getMaximumSize method returns a non-null value then return that; otherwise defer to the component\u0027s layout manager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setMaximumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMaximumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getMaximumSize()\"\u003egetMaximumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003emaximumSize\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "minimumSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumSize",
      "comment": "Sets the minimum size of this component to a constant value. Subsequent calls to getMinimumSize will always return this value; the component\u0027s UI will not be asked to compute it. Setting the minimum size to null restores the default behavior.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The minimum size of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMinimumSize()\"\u003e\u003ccode\u003egetMinimumSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setMinimumSize(java.awt.Dimension)\"\u003esetMinimumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eminimumSize\u003c/code\u003e - the new minimum size of this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSize",
      "comment": "If the minimum size has been set to a non-null value just returns it. If the UI delegate\u0027s getMinimumSize method returns a non-null value then return that; otherwise defer to the component\u0027s layout manager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getMinimumSize()\"\u003egetMinimumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eminimumSize\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#contains(int,int)\"\u003e\u003ccode\u003eComponent.contains(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#contains(int,int)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the point",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the point"
        ],
        "return": [
          "true if this component logically contains x,y"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.border.Border",
            "type": "Class"
          },
          "field": {
            "name": "border"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBorder",
      "comment": "Sets the border of this component. The Border object is responsible for defining the insets for the component (overriding any insets set directly on the component) and for optionally rendering any border decorations within the bounds of those insets. Borders should be used (rather than insets) for creating both decorative and non-decorative (such as margins and padding) regions for a swing component. Compound borders can be used to nest multiple borders within a single component. Although technically you can set the border on any object that inherits from JComponent, the look and feel implementation of many standard Swing components doesn\u0027t work well with user-set borders. In general, when you want to set a border on a standard Swing component other than JPanel or JLabel, we recommend that you put the component in a JPanel and set the border on the JPanel. This is a bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The component\u0027s border."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/border/Border.html\" title\u003d\"interface in javax.swing.border\"\u003e\u003ccode\u003eBorder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/border/CompoundBorder.html\" title\u003d\"class in javax.swing.border\"\u003e\u003ccode\u003eCompoundBorder\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eborder\u003c/code\u003e - the border to be rendered for this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBorder",
      "comment": "Returns the border of this component or null if no border is currently set.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBorder(javax.swing.border.Border)\"\u003e\u003ccode\u003esetBorder(javax.swing.border.Border)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the border object for this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInsets",
      "comment": "If a border has been set on this component, returns the border\u0027s insets; otherwise calls super.getInsets.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBorder(javax.swing.border.Border)\"\u003e\u003ccode\u003esetBorder(javax.swing.border.Border)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getInsets()\"\u003egetInsets\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value of the insets property"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "insets"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInsets",
      "comment": "Returns an Insets object containing this component\u0027s inset values. The passed-in Insets object will be reused if possible. Calling methods cannot assume that the same object will be returned, however. All existing values within this object are overwritten. If insets is null, this will allocate a new one.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInsets()\"\u003e\u003ccode\u003egetInsets()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einsets\u003c/code\u003e - the \n\u003ccode\u003eInsets\u003c/code\u003e object, which can be reused"
        ],
        "return": [
          "the \n\u003ccode\u003eInsets\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlignmentY",
      "comment": "Overrides Container.getAlignmentY to return the vertical alignment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setAlignmentY(float)\"\u003e\u003ccode\u003esetAlignmentY(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAlignmentY()\"\u003e\u003ccode\u003eComponent.getAlignmentY()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getAlignmentY()\"\u003egetAlignmentY\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003ealignmentY\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "alignmentY"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAlignmentY",
      "comment": "Sets the vertical alignment.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The preferred vertical alignment of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getAlignmentY()\"\u003e\u003ccode\u003egetAlignmentY()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignmentY\u003c/code\u003e - the new vertical alignment"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlignmentX",
      "comment": "Overrides Container.getAlignmentX to return the horizontal alignment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setAlignmentX(float)\"\u003e\u003ccode\u003esetAlignmentX(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAlignmentX()\"\u003e\u003ccode\u003eComponent.getAlignmentX()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getAlignmentX()\"\u003egetAlignmentX\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003ealignmentX\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "alignmentX"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAlignmentX",
      "comment": "Sets the horizontal alignment.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The preferred horizontal alignment of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getAlignmentX()\"\u003e\u003ccode\u003egetAlignmentX()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignmentX\u003c/code\u003e - the new horizontal alignment"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.InputVerifier",
            "type": "Class"
          },
          "field": {
            "name": "inputVerifier"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInputVerifier",
      "comment": "Sets the input verifier for this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "The component\u0027s input verifier."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/InputVerifier.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputVerifier\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einputVerifier\u003c/code\u003e - the new input verifier"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.InputVerifier",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputVerifier",
      "comment": "Returns the input verifier for this component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/InputVerifier.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eInputVerifier\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003einputVerifier\u003c/code\u003e property"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGraphics",
      "comment": "Returns this component\u0027s graphics context, which lets you draw on a component. Use this method to get a Graphics object and then invoke operations on that object to draw on the component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003eComponent.paint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getGraphics()\"\u003egetGraphics\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this components graphics context"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "debugOptions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDebugGraphicsOptions",
      "comment": "Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "DebugGraphics.NONE_OPTION",
                "DebugGraphics.LOG_OPTION",
                "DebugGraphics.FLASH_OPTION",
                "DebugGraphics.BUFFERED_OPTION"
              ]
            },
            {
              "name": "escription",
              "value": "Diagnostic options for graphics operations."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edebugOptions\u003c/code\u003e - determines how the component should display the information; one of the following options: \n\u003cul\u003e \n \u003cli\u003eDebugGraphics.LOG_OPTION - causes a text message to be printed. \u003c/li\u003e\n \u003cli\u003eDebugGraphics.FLASH_OPTION - causes the drawing to flash several times. \u003c/li\u003e\n \u003cli\u003eDebugGraphics.BUFFERED_OPTION - creates an \u003ccode\u003eExternalWindow\u003c/code\u003e that displays the operations performed on the View\u0027s offscreen buffer. \u003c/li\u003e\n \u003cli\u003eDebugGraphics.NONE_OPTION disables debugging. \u003c/li\u003e\n \u003cli\u003eA value of 0 causes no changes to the debugging options. \u003c/li\u003e\n\u003c/ul\u003e \n\u003ccode\u003edebugOptions\u003c/code\u003e is bitwise OR\u0027d into the current value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDebugGraphicsOptions",
      "comment": "Returns the state of graphics debugging.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setDebugGraphicsOptions(int)\"\u003e\u003ccode\u003esetDebugGraphicsOptions(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a bitwise OR\u0027d flag of zero or more of the following options: \n\u003cul\u003e \n \u003cli\u003eDebugGraphics.LOG_OPTION - causes a text message to be printed. \u003c/li\u003e\n \u003cli\u003eDebugGraphics.FLASH_OPTION - causes the drawing to flash several times. \u003c/li\u003e\n \u003cli\u003eDebugGraphics.BUFFERED_OPTION - creates an \u003ccode\u003eExternalWindow\u003c/code\u003e that displays the operations performed on the View\u0027s offscreen buffer. \u003c/li\u003e\n \u003cli\u003eDebugGraphics.NONE_OPTION disables debugging. \u003c/li\u003e\n \u003cli\u003eA value of 0 causes no changes to the debugging options. \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "anAction"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "aCommand"
          }
        },
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "aKeyStroke"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "aCondition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "registerKeyboardAction",
      "comment": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior. For example, to bind the KeyStroke aKeyStroke to the Action anAction now use:    component.getInputMap().put(aKeyStroke, aCommand);\n   component.getActionMap().put(aCommmand, anAction);\n The above assumes you want the binding to be applicable for WHEN_FOCUSED. To register bindings for other focus states use the getInputMap method that takes an integer. Register a new keyboard action. anAction will be invoked if a key event matching aKeyStroke occurs and aCondition is verified. The KeyStroke object defines a particular combination of a keyboard key and one or more modifiers (alt, shift, ctrl, meta). The aCommand will be set in the delivered event if specified. The aCondition can be one of: WHEN_FOCUSED The action will be invoked only when the keystroke occurs while the component has the focus. WHEN_IN_FOCUSED_WINDOW The action will be invoked when the keystroke occurs while the component has the focus or if the component is in the window that has the focus. Note that the component need not be an immediate descendent of the window -- it can be anywhere in the window\u0027s containment hierarchy. In other words, whenever any component in the window has the focus, the action registered with this component is invoked. WHEN_ANCESTOR_OF_FOCUSED_COMPONENT The action will be invoked when the keystroke occurs while the component has the focus or if the component is an ancestor of the component that has the focus. The combination of keystrokes and conditions lets you define high level (semantic) action events for a specified keystroke+modifier combination (using the KeyStroke class) and direct to a parent or child of a component that has the focus, or to the component itself. In other words, in any hierarchical structure of components, an arbitrary key-combination can be immediately directed to the appropriate component in the hierarchy, and cause a specific method to be invoked (usually by way of adapter objects). If an action has already been registered for the receiving container, with the same charCode and the same modifiers, anAction will replace the action.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/KeyStroke.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eKeyStroke\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanAction\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e to be registered",
          "\u003ccode\u003eaCommand\u003c/code\u003e - the command to be set in the delivered event",
          "\u003ccode\u003eaKeyStroke\u003c/code\u003e - the \n\u003ccode\u003eKeyStroke\u003c/code\u003e to bind to the action",
          "\u003ccode\u003eaCondition\u003c/code\u003e - the condition that needs to be met, see above"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "anAction"
          }
        },
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "aKeyStroke"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "aCondition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "registerKeyboardAction",
      "comment": "This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getActionMap()\"\u003e\u003ccode\u003egetActionMap()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputMap(int)\"\u003e\u003ccode\u003egetInputMap(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanAction\u003c/code\u003e - action to be registered to given keystroke and condition",
          "\u003ccode\u003eaKeyStroke\u003c/code\u003e - a \n\u003ccode\u003eKeyStroke\u003c/code\u003e",
          "\u003ccode\u003eaCondition\u003c/code\u003e - the condition to be associated with given keystroke and action"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "aKeyStroke"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unregisterKeyboardAction",
      "comment": "This method is now obsolete. To unregister an existing binding you can either remove the binding from the ActionMap/InputMap, or place a dummy binding the InputMap. Removing the binding from the InputMap allows bindings in parent InputMaps to be active, whereas putting a dummy binding in the InputMap effectively disables the binding from ever happening. Unregisters a keyboard action. This will remove the binding from the ActionMap (if it exists) as well as the InputMaps.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaKeyStroke\u003c/code\u003e - the keystroke for which to unregister its keyboard action"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRegisteredKeyStrokes",
      "comment": "Returns the KeyStrokes that will initiate registered actions.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)\"\u003e\u003ccode\u003eregisterKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eKeyStroke\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "aKeyStroke"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConditionForKeyStroke",
      "comment": "Returns the condition that determines whether a registered action occurs in response to the specified keystroke. For Java 2 platform v1.3, a KeyStroke can be associated with more than one condition. For example, \u0027a\u0027 could be bound for the two conditions WHEN_FOCUSED and WHEN_IN_FOCUSED_WINDOW condition.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaKeyStroke\u003c/code\u003e - the keystroke for which to request an action-keystroke condition"
        ],
        "return": [
          "the action-keystroke condition"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ActionListener",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "aKeyStroke"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActionForKeyStroke",
      "comment": "Returns the object that will perform the action registered for a given keystroke.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaKeyStroke\u003c/code\u003e - the keystroke for which to return a listener"
        ],
        "return": [
          "the \n\u003ccode\u003eActionListener\u003c/code\u003e object invoked when the keystroke occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resetKeyboardActions",
      "comment": "Unregisters all the bindings in the first tier InputMaps and ActionMap. This has the effect of removing any local bindings, and allowing the bindings defined in parent InputMap/ActionMaps (the UI is usually defined in the second tier) to persist.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        },
        {
          "type": {
            "name": "javax.swing.InputMap",
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setInputMap",
      "comment": "Sets the InputMap to use under the condition condition to map. A null value implies you do not want any bindings to be used, even from the UI. This will not reinstall the UI InputMap (if there was one). condition has one of the following values: WHEN_IN_FOCUSED_WINDOW WHEN_FOCUSED WHEN_ANCESTOR_OF_FOCUSED_COMPONENT If condition is WHEN_IN_FOCUSED_WINDOW and map is not a ComponentInputMap, an IllegalArgumentException will be thrown. Similarly, if condition is not one of the values listed, an IllegalArgumentException will be thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - one of the values listed above",
          "\u003ccode\u003emap\u003c/code\u003e - the \n\u003ccode\u003eInputMap\u003c/code\u003e to use for the given condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econdition\u003c/code\u003e is \n\u003ccode\u003eWHEN_IN_FOCUSED_WINDOW\u003c/code\u003e and \n\u003ccode\u003emap\u003c/code\u003e is not an instance of \n\u003ccode\u003eComponentInputMap\u003c/code\u003e; or if \n\u003ccode\u003econdition\u003c/code\u003e is not one of the legal values specified above"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.InputMap",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getInputMap",
      "comment": "Returns the InputMap that is used during condition.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - one of WHEN_IN_FOCUSED_WINDOW, WHEN_FOCUSED, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT"
        ],
        "return": [
          "the \n\u003ccode\u003eInputMap\u003c/code\u003e for the specified \n\u003ccode\u003econdition\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.InputMap",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getInputMap",
      "comment": "Returns the InputMap that is used when the component has focus. This is convenience method for getInputMap(WHEN_FOCUSED).",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eInputMap\u003c/code\u003e used when the component has focus"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ActionMap",
            "type": "Class"
          },
          "field": {
            "name": "am"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setActionMap",
      "comment": "Sets the ActionMap to am. This does not set the parent of the am to be the ActionMap from the UI (if there was one), it is up to the caller to have done this.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eam\u003c/code\u003e - the new \n\u003ccode\u003eActionMap\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ActionMap",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getActionMap",
      "comment": "Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding. The returned ActionMap, unless otherwise set, will have the ActionMap from the UI set as the parent.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eActionMap\u003c/code\u003e containing the key/action bindings"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseline",
      "comment": "Returns the baseline. The baseline is measured from the top of the component. This method is primarily meant for LayoutManagers to align components along their baseline. A return value less than 0 indicates this component does not have a reasonable baseline and that LayoutManagers should not align this component on its baseline. This method calls into the ComponentUI method of the same name. If this component does not have a ComponentUI -1 will be returned. If a value \u003e\u003d 0 is returned, then the component has a valid baseline for any size \u003e\u003d the minimum size and getBaselineResizeBehavior can be used to determine how the baseline changes with size.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaselineResizeBehavior()\"\u003e\u003ccode\u003egetBaselineResizeBehavior()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFontMetrics\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBaseline(int,int)\"\u003egetBaseline\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width to get the baseline for",
          "\u003ccode\u003eheight\u003c/code\u003e - the height to get the baseline for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if width or height is \u0026lt; 0"
        ],
        "return": [
          "the baseline or \u0026lt; 0 indicating there is no reasonable baseline"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component$BaselineResizeBehavior",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaselineResizeBehavior",
      "comment": "Returns an enum indicating how the baseline of the component changes as the size changes. This method is primarily meant for layout managers and GUI builders. This method calls into the ComponentUI method of the same name. If this component does not have a ComponentUI BaselineResizeBehavior.OTHER will be returned. Subclasses should never return null; if the baseline can not be calculated return BaselineResizeBehavior.OTHER. Callers should first ask for the baseline using getBaseline and if a value \u003e\u003d 0 is returned use this method. It is acceptable for this method to return a value other than BaselineResizeBehavior.OTHER even if getBaseline returns a value less than 0.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003egetBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBaselineResizeBehavior()\"\u003egetBaselineResizeBehavior\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an enum indicating how the baseline changes as the component size changes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "requestDefaultFocus",
      "comment": "In release 1.4, the focus subsystem was rearchitected. For more information, see How to Use the Focus Subsystem, a section in The Java Tutorial. Requests focus on this JComponent\u0027s FocusTraversalPolicy\u0027s default Component. If this JComponent is a focus cycle root, then its FocusTraversalPolicy is used. Otherwise, the FocusTraversalPolicy of this JComponent\u0027s focus-cycle-root ancestor is used.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html#getDefaultComponent(java.awt.Container)\"\u003e\u003ccode\u003eFocusTraversalPolicy.getDefaultComponent(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if this component can request to get the input focus, false if it can not"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "aFlag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVisible",
      "comment": "Makes the component visible or invisible. Overrides Component.setVisible.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isVisible()\"\u003e\u003ccode\u003eComponent.isVisible()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#invalidate()\"\u003e\u003ccode\u003eComponent.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setVisible(boolean)\"\u003esetVisible\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaFlag\u003c/code\u003e - true to make the component visible; false to make it invisible"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "enabled"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEnabled",
      "comment": "Sets whether or not this component is enabled. A component that is enabled may respond to user input, while a component that is not enabled cannot respond to user input. Some components may alter their visual representation when they are disabled in order to provide feedback to the user that they cannot take input. Note: Disabling a component does not disable its children. Note: Disabling a lightweight component does not prevent it from receiving MouseEvents.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The enabled state of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isEnabled()\"\u003e\u003ccode\u003eComponent.isEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isLightweight()\"\u003e\u003ccode\u003eComponent.isLightweight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setEnabled(boolean)\"\u003esetEnabled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eenabled\u003c/code\u003e - true if this component should be enabled, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "fg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setForeground",
      "comment": "Sets the foreground color of this component. It is up to the look and feel to honor this property, some may choose to ignore it.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The foreground color of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getForeground()\"\u003e\u003ccode\u003eComponent.getForeground()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setForeground(java.awt.Color)\"\u003esetForeground\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efg\u003c/code\u003e - the desired foreground \n\u003ccode\u003eColor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "bg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBackground",
      "comment": "Sets the background color of this component. The background color is used only if the component is opaque, and only by subclasses of JComponent or ComponentUI implementations. Direct subclasses of JComponent must override paintComponent to honor this property. It is up to the look and feel to honor this property, some may choose to ignore it.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The background color of the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBackground()\"\u003e\u003ccode\u003eComponent.getBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setOpaque(boolean)\"\u003e\u003ccode\u003esetOpaque(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBackground(java.awt.Color)\"\u003esetBackground\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebg\u003c/code\u003e - the desired background \n\u003ccode\u003eColor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFont",
      "comment": "Sets the font for this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The font for the component."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFont()\"\u003e\u003ccode\u003eComponent.getFont()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFont(java.awt.Font)\"\u003esetFont\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - the desired \n\u003ccode\u003eFont\u003c/code\u003e for this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultLocale",
      "comment": "Returns the default locale used to initialize each JComponent\u0027s locale property upon creation. The default locale has \"AppContext\" scope so that applets (and potentially multiple lightweight applications running in a single VM) can have their own setting. An applet can safely alter its default locale because it will have no affect on other applets (or the browser).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setDefaultLocale(java.util.Locale)\"\u003e\u003ccode\u003esetDefaultLocale(java.util.Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getLocale()\"\u003e\u003ccode\u003eComponent.getLocale()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setLocale(java.util.Locale)\"\u003e\u003ccode\u003eComponent.setLocale(java.util.Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default \n\u003ccode\u003eLocale\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefaultLocale",
      "comment": "Sets the default locale used to initialize each JComponent\u0027s locale property upon creation. The initial value is the VM\u0027s default locale. The default locale has \"AppContext\" scope so that applets (and potentially multiple lightweight applications running in a single VM) can have their own setting. An applet can safely alter its default locale because it will have no affect on other applets (or the browser).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getDefaultLocale()\"\u003e\u003ccode\u003egetDefaultLocale()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getLocale()\"\u003e\u003ccode\u003eComponent.getLocale()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setLocale(java.util.Locale)\"\u003e\u003ccode\u003eComponent.setLocale(java.util.Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the desired default \n\u003ccode\u003eLocale\u003c/code\u003e for new components."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processComponentKeyEvent",
      "comment": "Processes any key events that the component itself recognizes. This is called after the focus manager and any interested listeners have been given a chance to steal away the event. This method is called only if the event has not yet been consumed. This method is called prior to the keyboard UI logic. This method is implemented to do nothing. Subclasses would normally override this method if they process some key events themselves. If the event is processed, it should be consumed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event to be processed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processKeyEvent",
      "comment": "Overrides processKeyEvent to process events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eKeyListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eKeyboardFocusManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/DefaultKeyboardFocusManager.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eDefaultKeyboardFocusManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processEvent(java.awt.AWTEvent)\"\u003e\u003ccode\u003eComponent.processEvent(java.awt.AWTEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#dispatchEvent(java.awt.AWTEvent)\"\u003e\u003ccode\u003eComponent.dispatchEvent(java.awt.AWTEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#addKeyListener(java.awt.event.KeyListener)\"\u003e\u003ccode\u003eComponent.addKeyListener(java.awt.event.KeyListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#enableEvents(long)\"\u003e\u003ccode\u003eComponent.enableEvents(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isShowing()\"\u003e\u003ccode\u003eComponent.isShowing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processKeyEvent(java.awt.event.KeyEvent)\"\u003eprocessKeyEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the key event"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "ks"
          }
        },
        {
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "pressed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processKeyBinding",
      "comment": "Invoked to process the key bindings for ks as the result of the KeyEvent e. This obtains the appropriate InputMap, gets the binding, gets the action from the ActionMap, and then (if the action is found and the component is enabled) invokes notifyAction to notify the action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eks\u003c/code\u003e - the \n\u003ccode\u003eKeyStroke\u003c/code\u003e queried",
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eKeyEvent\u003c/code\u003e",
          "\u003ccode\u003econdition\u003c/code\u003e - one of the following values: \n\u003cul\u003e \n \u003cli\u003eJComponent.WHEN_FOCUSED \u003c/li\u003e\n \u003cli\u003eJComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT \u003c/li\u003e\n \u003cli\u003eJComponent.WHEN_IN_FOCUSED_WINDOW \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003epressed\u003c/code\u003e - true if the key is pressed"
        ],
        "return": [
          "true if there was a binding to an action, and the action was enabled"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setToolTipText",
      "comment": "Registers the text to display in a tool tip. The text displays when the cursor lingers over the component. See How to Use Tool Tips in The Java Tutorial for further documentation.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "The text to display in a tool tip."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#TOOL_TIP_TEXT_KEY\"\u003e\u003ccode\u003eTOOL_TIP_TEXT_KEY\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the string to display; if the text is \n\u003ccode\u003enull\u003c/code\u003e, the tool tip is turned off for this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Returns the tooltip string that has been set with setToolTipText.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#TOOL_TIP_TEXT_KEY\"\u003e\u003ccode\u003eTOOL_TIP_TEXT_KEY\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the text of the tool tip"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Returns the string to be used as the tooltip for event. By default this returns any string set using setToolTipText. If a component provides more extensive API to support differing tooltips at different locations, this method should be overridden.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e that initiated the \n\u003ccode\u003eToolTip\u003c/code\u003e display"
        ],
        "return": [
          "a string containing the tooltip"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipLocation",
      "comment": "Returns the tooltip location in this component\u0027s coordinate system. If null is returned, Swing will choose a location. The default implementation returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e that caused the \n\u003ccode\u003eToolTipManager\u003c/code\u003e to show the tooltip"
        ],
        "return": [
          "always returns \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPopupLocation",
      "comment": "Returns the preferred location to display the popup menu in this component\u0027s coordinate system. It is up to the look and feel to honor this property, some may choose to ignore it. If null, the look and feel will choose a suitable location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e that triggered the popup to be shown, or \n\u003ccode\u003enull\u003c/code\u003e if the popup is not being shown as the result of a mouse event"
        ],
        "return": [
          "location to display the \n\u003ccode\u003eJPopupMenu\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JToolTip",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createToolTip",
      "comment": "Returns the instance of JToolTip that should be used to display the tooltip. Components typically would not override this method, but it can be used to cause different tooltips to be displayed differently.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eJToolTip\u003c/code\u003e used to display this toolTip"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "aRect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scrollRectToVisible",
      "comment": "Forwards the scrollRectToVisible() message to the JComponent\u0027s parent. Components that can service the request, such as JViewport, override this method and perform the scrolling.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJViewport\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaRect\u003c/code\u003e - the visible \n\u003ccode\u003eRectangle\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoscrolls"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoscrolls",
      "comment": "Sets the autoscrolls property. If true mouse dragged events will be synthetically generated when the mouse is dragged outside of the component\u0027s bounds and mouse motion has paused (while the button continues to be held down). The synthetic events make it appear that the drag gesture has resumed in the direction established when the component\u0027s boundary was crossed. Components that support autoscrolling must handle mouseDragged events by calling scrollRectToVisible with a rectangle that contains the mouse event\u0027s location. All of the Swing components that support item selection and are typically displayed in a JScrollPane (JTable, JList, JTree, JTextArea, and JEditorPane) already handle mouse dragged events in this way. To enable autoscrolling in any other component, add a mouse motion listener that calls scrollRectToVisible. For example, given a JPanel, myPanel:  MouseMotionListener doScrollRectToVisible \u003d new MouseMotionAdapter() {\n     public void mouseDragged(MouseEvent e) {\n        Rectangle r \u003d new Rectangle(e.getX(), e.getY(), 1, 1);\n        ((JPanel)e.getSource()).scrollRectToVisible(r);\n    }\n };\n myPanel.addMouseMotionListener(doScrollRectToVisible);\n The default value of the autoScrolls property is false.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "Determines if this component automatically scrolls its contents when dragged."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getAutoscrolls()\"\u003e\u003ccode\u003egetAutoscrolls()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJViewport\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJScrollPane\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eautoscrolls\u003c/code\u003e - if true, synthetic mouse dragged events are generated when the mouse is dragged outside of a component\u0027s bounds and the mouse button continues to be held down; otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoscrolls",
      "comment": "Gets the autoscrolls property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJViewport\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setAutoscrolls(boolean)\"\u003e\u003ccode\u003esetAutoscrolls(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eautoscrolls\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.TransferHandler",
            "type": "Class"
          },
          "field": {
            "name": "newHandler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTransferHandler",
      "comment": "Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop. This may be null if the component does not support data transfer operations. If the new TransferHandler is not null, this method also installs a new DropTarget on the component to activate drop handling through the TransferHandler and activate any built-in support (such as calculating and displaying potential drop locations). If you do not wish for this component to respond in any way to drops, you can disable drop support entirely either by removing the drop target (setDropTarget(null)) or by de-activating it (getDropTaget().setActive(false)). If the new TransferHandler is null, this method removes the drop target. Under two circumstances, this method does not modify the drop target: First, if the existing drop target on this component was explicitly set by the developer to a non-null value. Second, if the system property suppressSwingDropSupport is true. The default value for the system property is false. Please see How to Use Drag and Drop and Data Transfer, a section in The Java Tutorial, for more information.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "escription",
              "value": "Mechanism for transfer of data to and from the component"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getTransferHandler()\"\u003e\u003ccode\u003egetTransferHandler()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewHandler\u003c/code\u003e - the new \n\u003ccode\u003eTransferHandler\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.TransferHandler",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransferHandler",
      "comment": "Gets the transferHandler property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003esetTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003etransferHandler\u003c/code\u003e property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processMouseEvent",
      "comment": "Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects, refer to Component.processMouseEvent(MouseEvent) for a complete description of this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processMouseEvent(java.awt.event.MouseEvent)\"\u003e\u003ccode\u003eComponent.processMouseEvent(java.awt.event.MouseEvent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processMouseEvent(java.awt.event.MouseEvent)\"\u003eprocessMouseEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the mouse event"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processMouseMotionEvent",
      "comment": "Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processMouseMotionEvent(java.awt.event.MouseEvent)\"\u003eprocessMouseMotionEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eMouseEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "enable",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#enable()\"\u003eenable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "disable",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#disable()\"\u003edisable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getClientProperty",
      "comment": "Returns the value of the property with the specified key. Only properties added with putClientProperty will return a non-null value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#putClientProperty(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eputClientProperty(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the being queried"
        ],
        "return": [
          "the value of this property or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "putClientProperty",
      "comment": "Adds an arbitrary key/value \"client property\" to this component. The get/putClientProperty methods provide access to a small per-instance hashtable. Callers can use get/putClientProperty to annotate components that were created by another module. For example, a layout manager might store per child constraints this way. For example:  componentA.putClientProperty(\"to the left of\", componentB);\n If value is null this method will remove the property. Changes to client properties are reported with PropertyChange events. The name of the property (for the sake of PropertyChange events) is key.toString(). The clientProperty dictionary is not intended to support large scale extensions to JComponent nor should be it considered an alternative to subclassing when designing a new component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getClientProperty(java.lang.Object)\"\u003e\u003ccode\u003egetClientProperty(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eContainer.addPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the new client property key",
          "\u003ccode\u003evalue\u003c/code\u003e - the new client property value; if \n\u003ccode\u003enull\u003c/code\u003e this method will remove the property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.awt.AWTKeyStroke",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "keystrokes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFocusTraversalKeys",
      "comment": "Sets the focus traversal keys for a given traversal operation for this Component. Refer to Component.setFocusTraversalKeys(int, java.util.Set\u003c? extends java.awt.AWTKeyStroke\u003e) for a complete description of this method. This method may throw a ClassCastException if any Object in keystrokes is not an AWTKeyStroke.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#FORWARD_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#BACKWARD_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#UP_CYCLE_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusTraversalKeys(int,java.util.Set)\"\u003esetFocusTraversalKeys\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS",
          "\u003ccode\u003ekeystrokes\u003c/code\u003e - the Set of AWTKeyStroke for the specified operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if id is not one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or if keystrokes contains null, or if any keystroke represents a KEY_TYPED event, or if any keystroke already maps to another focus traversal operation for this Component"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLightweightComponent",
      "comment": "Returns true if this component is lightweight, that is, if it doesn\u0027t have a native window system peer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to be checked"
        ],
        "return": [
          "true if this component is lightweight"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reshape",
      "comment": "Description copied from class: Component",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBounds(int,int,int,int)\"\u003e\u003ccode\u003eComponent.setBounds(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#reshape(int,int,int,int)\"\u003ereshape\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the new horizontal location",
          "\u003ccode\u003ey\u003c/code\u003e - the new vertical location",
          "\u003ccode\u003ew\u003c/code\u003e - the new width",
          "\u003ccode\u003eh\u003c/code\u003e - the new height"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "rv"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds",
      "comment": "Stores the bounds of this component into \"return value\" rv and returns rv. If rv is null a new Rectangle is allocated. This version of getBounds is useful if the caller wants to avoid allocating a new Rectangle object on the heap.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBounds(java.awt.Rectangle)\"\u003egetBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erv\u003c/code\u003e - the return value, modified to the component\u0027s bounds"
        ],
        "return": [
          "\u003ccode\u003erv\u003c/code\u003e; if \n\u003ccode\u003erv\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e return a newly created \n\u003ccode\u003eRectangle\u003c/code\u003e with this component\u0027s bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "rv"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSize",
      "comment": "Stores the width/height of this component into \"return value\" rv and returns rv. If rv is null a new Dimension object is allocated. This version of getSize is useful if the caller wants to avoid allocating a new Dimension object on the heap.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getSize(java.awt.Dimension)\"\u003egetSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erv\u003c/code\u003e - the return value, modified to the component\u0027s size"
        ],
        "return": [
          "\u003ccode\u003erv\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "rv"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocation",
      "comment": "Stores the x,y origin of this component into \"return value\" rv and returns rv. If rv is null a new Point is allocated. This version of getLocation is useful if the caller wants to avoid allocating a new Point object on the heap.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getLocation(java.awt.Point)\"\u003egetLocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erv\u003c/code\u003e - the return value, modified to the component\u0027s location"
        ],
        "return": [
          "\u003ccode\u003erv\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getX",
      "comment": "Returns the current x coordinate of the component\u0027s origin. This method is preferable to writing component.getBounds().x, or component.getLocation().x because it doesn\u0027t cause any heap allocations.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getX()\"\u003egetX\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the current x coordinate of the component\u0027s origin"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getY",
      "comment": "Returns the current y coordinate of the component\u0027s origin. This method is preferable to writing component.getBounds().y, or component.getLocation().y because it doesn\u0027t cause any heap allocations.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getY()\"\u003egetY\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the current y coordinate of the component\u0027s origin"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWidth",
      "comment": "Returns the current width of this component. This method is preferable to writing component.getBounds().width, or component.getSize().width because it doesn\u0027t cause any heap allocations.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getWidth()\"\u003egetWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the current width of this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHeight",
      "comment": "Returns the current height of this component. This method is preferable to writing component.getBounds().height, or component.getSize().height because it doesn\u0027t cause any heap allocations.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getHeight()\"\u003egetHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the current height of this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOpaque",
      "comment": "Returns true if this component is completely opaque. An opaque component paints every pixel within its rectangular bounds. A non-opaque component paints only a subset of its pixels or none at all, allowing the pixels underneath it to \"show through\". Therefore, a component that does not fully paint its pixels provides a degree of transparency. Subclasses that guarantee to always completely paint their contents should override this method and return true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setOpaque(boolean)\"\u003e\u003ccode\u003esetOpaque(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isOpaque()\"\u003eisOpaque\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this component is completely opaque"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isOpaque"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOpaque",
      "comment": "If true the component paints every pixel within its bounds. Otherwise, the component may not paint some or all of its pixels, allowing the underlying pixels to show through. The default value of this property is false for JComponent. However, the default value for this property on most standard JComponent subclasses (such as JButton and JTree) is look-and-feel dependent.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "The component\u0027s opacity"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isOpaque()\"\u003e\u003ccode\u003eisOpaque()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eisOpaque\u003c/code\u003e - true if this component should be opaque"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "computeVisibleRect",
      "comment": "Returns the Component\u0027s \"visible rect rectangle\" - the intersection of the visible rectangles for this component and all of its ancestors. The return value is stored in visibleRect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVisibleRect()\"\u003e\u003ccode\u003egetVisibleRect()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - a \n\u003ccode\u003eRectangle\u003c/code\u003e computed as the intersection of all visible rectangles for this component and all of its ancestors -- this is the return value for this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVisibleRect",
      "comment": "Returns the Component\u0027s \"visible rectangle\" - the intersection of this component\u0027s visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors\u0027 visible rectangles.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the visible rectangle"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "firePropertyChange",
      "comment": "Support for reporting bound property changes for boolean properties. This method can be called when a bound property has changed and it will send the appropriate PropertyChangeEvent to any registered PropertyChangeListeners.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#firePropertyChange(java.lang.String,boolean,boolean)\"\u003efirePropertyChange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the property whose value has changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the property\u0027s previous value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the property\u0027s new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "firePropertyChange",
      "comment": "Support for reporting bound property changes for integer properties. This method can be called when a bound property has changed and it will send the appropriate PropertyChangeEvent to any registered PropertyChangeListeners.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#firePropertyChange(java.lang.String,int,int)\"\u003efirePropertyChange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the property whose value has changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the property\u0027s previous value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the property\u0027s new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.PropertyVetoException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireVetoableChange",
      "comment": "Supports reporting constrained property changes. This method can be called when a constrained property has changed and it will send the appropriate PropertyChangeEvent to any registered VetoableChangeListeners.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the name of the property that was listened on",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyVetoException.html\" title\u003d\"class in java.beans\"\u003ePropertyVetoException\u003c/a\u003e\u003c/code\u003e - when the attempt to set the property is vetoed by the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.VetoableChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addVetoableChangeListener",
      "comment": "Adds a VetoableChangeListener to the listener list. The listener is registered for all properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eVetoableChangeListener\u003c/code\u003e to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.VetoableChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeVetoableChangeListener",
      "comment": "Removes a VetoableChangeListener from the listener list. This removes a VetoableChangeListener that was registered for all properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eVetoableChangeListener\u003c/code\u003e to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.VetoableChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVetoableChangeListeners",
      "comment": "Returns an array of all the vetoable change listeners registered on this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#addVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#removeVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of the component\u0027s \n\u003ccode\u003eVetoableChangeListener\u003c/code\u003es or an empty array if no vetoable change listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTopLevelAncestor",
      "comment": "Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the top-level \n\u003ccode\u003eContainer\u003c/code\u003e that this component is in, or \n\u003ccode\u003enull\u003c/code\u003e if not in any container"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.AncestorListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAncestorListener",
      "comment": "Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible. Events are also sent when the component or its ancestors are added or removed from the containment hierarchy.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/AncestorEvent.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eAncestorEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eAncestorListener\u003c/code\u003e to register"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.AncestorListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAncestorListener",
      "comment": "Unregisters listener so that it will no longer receive AncestorEvents.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#addAncestorListener(javax.swing.event.AncestorListener)\"\u003e\u003ccode\u003eaddAncestorListener(javax.swing.event.AncestorListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eAncestorListener\u003c/code\u003e to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.AncestorListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAncestorListeners",
      "comment": "Returns an array of all the ancestor listeners registered on this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#addAncestorListener(javax.swing.event.AncestorListener)\"\u003e\u003ccode\u003eaddAncestorListener(javax.swing.event.AncestorListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#removeAncestorListener(javax.swing.event.AncestorListener)\"\u003e\u003ccode\u003eremoveAncestorListener(javax.swing.event.AncestorListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of the component\u0027s \n\u003ccode\u003eAncestorListener\u003c/code\u003es or an empty array if no ancestor listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listenerType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.util.EventListener",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListeners",
      "comment": "Returns an array of all the objects currently registered as FooListeners upon this JComponent. FooListeners are registered using the addFooListener method. You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a JComponent c for its mouse listeners with the following code: MouseListener[] mls \u003d (MouseListener[])(c.getListeners(MouseListener.class)); If no such listeners exist, this method returns an empty array.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the listeners"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getVetoableChangeListeners()\"\u003e\u003ccode\u003egetVetoableChangeListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getAncestorListeners()\"\u003e\u003ccode\u003egetAncestorListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getListeners(java.lang.Class)\"\u003egetListeners\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerType\u003c/code\u003e - the type of listeners requested; this parameter should specify an interface that descends from \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerType\u003c/code\u003e doesn\u0027t specify a class or interface that implements \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "return": [
          "an array of all objects registered as \n\u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this component, or an empty array if no such listeners have been added"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addNotify",
      "comment": "Notifies this component that it now has a parent component. When this method is invoked, the chain of parent components is set up with KeyboardAction event listeners. This method is called by the toolkit internally and should not be called directly by programs.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)\"\u003e\u003ccode\u003eregisterKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addNotify()\"\u003eaddNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotify",
      "comment": "Notifies this component that it no longer has a parent component. When this method is invoked, any KeyboardActions set up in the chain of parent components are removed. This method is called by the toolkit internally and should not be called directly by programs.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)\"\u003e\u003ccode\u003eregisterKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#removeNotify()\"\u003eremoveNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "tm"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "repaint",
      "comment": "Adds the specified region to the dirty region list if the component is showing. The component will be repainted after all of the currently pending events have been dispatched.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isPaintingOrigin()\"\u003e\u003ccode\u003eisPaintingOrigin()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isShowing()\"\u003e\u003ccode\u003eComponent.isShowing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#addDirtyRegion(javax.swing.JComponent,int,int,int,int)\"\u003e\u003ccode\u003eRepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#repaint(long,int,int,int,int)\"\u003erepaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etm\u003c/code\u003e - this parameter is not used",
          "\u003ccode\u003ex\u003c/code\u003e - the x value of the dirty region",
          "\u003ccode\u003ey\u003c/code\u003e - the y value of the dirty region",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the dirty region",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the dirty region"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "repaint",
      "comment": "Adds the specified region to the dirty region list if the component is showing. The component will be repainted after all of the currently pending events have been dispatched.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isPaintingOrigin()\"\u003e\u003ccode\u003eisPaintingOrigin()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isShowing()\"\u003e\u003ccode\u003eComponent.isShowing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#addDirtyRegion(javax.swing.JComponent,int,int,int,int)\"\u003e\u003ccode\u003eRepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - a \n\u003ccode\u003eRectangle\u003c/code\u003e containing the dirty region"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "revalidate",
      "comment": "Supports deferred automatic layout. Calls invalidate and then adds this component\u0027s validateRoot to a list of components that need to be validated. Validation will occur after all currently pending events have been dispatched. In other words after this method is called, the first validateRoot (if any) found when walking up the containment hierarchy of this component will be validated. By default, JRootPane, JScrollPane, and JTextField return true from isValidateRoot. This method will automatically be called on this component when a property value changes such that size, location, or internal layout of this component has been affected. This automatic updating differs from the AWT because programs generally no longer need to invoke validate to get the contents of the GUI to update.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#invalidate()\"\u003e\u003ccode\u003eComponent.invalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#validate()\"\u003e\u003ccode\u003eContainer.validate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isValidateRoot()\"\u003e\u003ccode\u003eisValidateRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RepaintManager.html#addInvalidComponent(javax.swing.JComponent)\"\u003e\u003ccode\u003eRepaintManager.addInvalidComponent(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#revalidate()\"\u003erevalidate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isValidateRoot",
      "comment": "If this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated. Returns false by default. JScrollPane overrides this method and returns true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#revalidate()\"\u003e\u003ccode\u003erevalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#invalidate()\"\u003e\u003ccode\u003eComponent.invalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#validate()\"\u003e\u003ccode\u003eContainer.validate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isValidateRoot()\"\u003e\u003ccode\u003eContainer.isValidateRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isValidateRoot()\"\u003eisValidateRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "always returns false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOptimizedDrawingEnabled",
      "comment": "Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap. The repainting system is substantially more efficient in this common case. JComponent subclasses that can\u0027t make this guarantee, such as JLayeredPane, should override this method to return false.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "always returns true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isPaintingOrigin",
      "comment": "Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors. Calling repaint(long, int, int, int, int) or paintImmediately(int, int, int, int) on a Swing component will result in calling the paintImmediately(int, int, int, int) method of the first ancestor which isPaintingOrigin() returns true, if there are any. JComponent subclasses that need to be painted when any of their children are repainted should override this method to return true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintImmediately(int,int,int,int)\"\u003e\u003ccode\u003epaintImmediately(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "always returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintImmediately",
      "comment": "Paints the specified region in this component and all of its descendants that overlap the region, immediately. It\u0027s rarely necessary to call this method. In most cases it\u0027s more efficient to call repaint, which defers the actual painting and can collapse redundant requests into a single paint call. This method is useful if one needs to update the display while the current event is being dispatched. This method is to be overridden when the dirty region needs to be changed for components that are painting origins.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#repaint(long,int,int,int,int)\"\u003e\u003ccode\u003erepaint(long, int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isPaintingOrigin()\"\u003e\u003ccode\u003eisPaintingOrigin()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x value of the region to be painted",
          "\u003ccode\u003ey\u003c/code\u003e - the y value of the region to be painted",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the region to be painted",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the region to be painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintImmediately",
      "comment": "Paints the specified region now.",
      "tagMap": {
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - a \n\u003ccode\u003eRectangle\u003c/code\u003e containing the region to be painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "aFlag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDoubleBuffered",
      "comment": "Sets whether this component should use a buffer to paint. If set to true, all the drawing from this component will be done in an offscreen painting buffer. The offscreen painting buffer will the be copied onto the screen. If a Component is buffered and one of its ancestor is also buffered, the ancestor buffer will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaFlag\u003c/code\u003e - if true, set this component to be double buffered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDoubleBuffered",
      "comment": "Returns whether this component should use a buffer to paint.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDoubleBuffered()\"\u003eisDoubleBuffered\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this component is double buffered, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JRootPane",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRootPane",
      "comment": "Returns the JRootPane ancestor for this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eJRootPane\u003c/code\u003e that contains this component, or \n\u003ccode\u003enull\u003c/code\u003e if no \n\u003ccode\u003eJRootPane\u003c/code\u003e is found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JComponent. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJComponent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hide",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#hide()\"\u003ehide\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Default JComponent constructor. This constructor does very little initialization beyond calling the Container constructor. For example, the initial layout manager is null. It does, however, set the component\u0027s locale property to the value returned by JComponent.getDefaultLocale.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getDefaultLocale()\"\u003e\u003ccode\u003egetDefaultLocale()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JComponent$AccessibleJComponent"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.JComponent",
  "comment": "The base class for all Swing components except top-level containers. To use a component that inherits from \n\u003ccode\u003eJComponent\u003c/code\u003e, you must place the component in a containment hierarchy whose root is a top-level Swing container. Top-level Swing containers -- such as \n\u003ccode\u003eJFrame\u003c/code\u003e, \n\u003ccode\u003eJDialog\u003c/code\u003e, and \n\u003ccode\u003eJApplet\u003c/code\u003e -- are specialized components that provide a place for other Swing components to paint themselves. For an explanation of containment hierarchies, see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/toplevel.html\"\u003eSwing Components and the Containment Hierarchy\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial\u003c/em\u003e. \n\u003cp\u003e The \u003ccode\u003eJComponent\u003c/code\u003e class provides: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe base class for both standard and custom components that use the Swing architecture. \u003c/li\u003e\n \u003cli\u003eA \"pluggable look and feel\" (L\u0026amp;F) that can be specified by the programmer or (optionally) selected by the user at runtime. The look and feel for each component is provided by a \u003cem\u003eUI delegate\u003c/em\u003e -- an object that descends from \u003ca href\u003d\"plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e. See \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html\"\u003eHow to Set the Look and Feel\u003c/a\u003e in \u003cem\u003eThe Java Tutorial\u003c/em\u003e for more information. \u003c/li\u003e\n \u003cli\u003eComprehensive keystroke handling. See the document \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\"\u003eHow to Use Key Bindings\u003c/a\u003e, an article in \u003cem\u003eThe Java Tutorial\u003c/em\u003e, for more information. \u003c/li\u003e\n \u003cli\u003eSupport for tool tips -- short descriptions that pop up when the cursor lingers over a component. See \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/tooltip.html\"\u003eHow to Use Tool Tips\u003c/a\u003e in \u003cem\u003eThe Java Tutorial\u003c/em\u003e for more information. \u003c/li\u003e\n \u003cli\u003eSupport for accessibility. \u003ccode\u003eJComponent\u003c/code\u003e contains all of the methods in the \u003ccode\u003eAccessible\u003c/code\u003e interface, but it doesn\u0027t actually implement the interface. That is the responsibility of the individual classes that extend \u003ccode\u003eJComponent\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eSupport for component-specific properties. With the \u003ca href\u003d\"#putClientProperty(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eputClientProperty(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getClientProperty(java.lang.Object)\"\u003e\u003ccode\u003egetClientProperty(java.lang.Object)\u003c/code\u003e\u003c/a\u003e methods, you can associate name-object pairs with any object that descends from \u003ccode\u003eJComponent\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eAn infrastructure for painting that includes double buffering and support for borders. For more information see \u003ca href\u003d\"http://www.oracle.com/technetwork/java/painting-140037.html#swing\"\u003ePainting\u003c/a\u003e and \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/border.html\"\u003eHow to Use Borders\u003c/a\u003e, both of which are sections in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/li\u003e\n\u003c/ul\u003e For more information on these subjects, see the \n\u003ca href\u003d\"package-summary.html\"\u003e\u003ccode\u003eSwing package description\u003c/code\u003e\u003c/a\u003e and \n\u003cem\u003eThe Java Tutorial\u003c/em\u003e section \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/jcomponent.html\"\u003eThe JComponent Class\u003c/a\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eJComponent\u003c/code\u003e and its subclasses document default values for certain properties. For example, \u003ccode\u003eJTable\u003c/code\u003e documents the default row height as 16. Each \u003ccode\u003eJComponent\u003c/code\u003e subclass that has a \u003ccode\u003eComponentUI\u003c/code\u003e will create the \u003ccode\u003eComponentUI\u003c/code\u003e as part of its constructor. In order to provide a particular look and feel each \u003ccode\u003eComponentUI\u003c/code\u003e may set properties back on the \u003ccode\u003eJComponent\u003c/code\u003e that created it. For example, a custom look and feel may require \u003ccode\u003eJTable\u003c/code\u003es to have a row height of 24. The documented defaults are the value of a property BEFORE the \u003ccode\u003eComponentUI\u003c/code\u003e has been installed. If you need a specific value for a particular property you should explicitly set it. \u003c/p\u003e\n\u003cp\u003e In release 1.4, the focus subsystem was rearchitected. For more information, see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\"\u003e How to Use the Focus Subsystem\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/KeyStroke.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eKeyStroke\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBorder(javax.swing.border.Border)\"\u003e\u003ccode\u003esetBorder(javax.swing.border.Border)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)\"\u003e\u003ccode\u003eregisterKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JOptionPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJOptionPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setDebugGraphicsOptions(int)\"\u003e\u003ccode\u003esetDebugGraphicsOptions(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setToolTipText(java.lang.String)\"\u003e\u003ccode\u003esetToolTipText(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setAutoscrolls(boolean)\"\u003e\u003ccode\u003esetAutoscrolls(boolean)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}