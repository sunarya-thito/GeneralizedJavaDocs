{
  "packageName": "javax.swing.filechooser",
  "simpleName": "FileSystemView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.filechooser.FileSystemView",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFileSystemView",
      "comment": "Returns the file system view.",
      "tagMap": {
        "return": [
          "the file system view"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRoot",
      "comment": "Determines if the given file is a root in the navigable tree(s). Examples: Windows 98 has one root, the Desktop folder. DOS has one root per drive letter, C:\\, D:\\, etc. Unix has one root, the \"/\" directory. The default implementation gets information from the ShellFolder class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/filechooser/FileSystemView.html#isFileSystemRoot(java.io.File)\"\u003e\u003ccode\u003eisFileSystemRoot(java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object representing a directory"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ef\u003c/code\u003e is a root in the navigable tree."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTraversable",
      "comment": "Returns true if the file (directory) can be visited. Returns false if the directory cannot be traversed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFileChooser.html#isTraversable(java.io.File)\"\u003e\u003ccode\u003eJFileChooser.isTraversable(java.io.File)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/filechooser/FileView.html#isTraversable(java.io.File)\"\u003e\u003ccode\u003eFileView.isTraversable(java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the \n\u003ccode\u003eFile\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file/directory can be traversed, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSystemDisplayName",
      "comment": "Name of a file, directory, or folder as it would be displayed in a system file browser. Example from Windows: the \"M:\\\" directory displays as \"CD-ROM (M:)\" The default implementation gets information from the ShellFolder class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFileChooser.html#getName(java.io.File)\"\u003e\u003ccode\u003eJFileChooser.getName(java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "return": [
          "the file name as it would be displayed by a native file chooser"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSystemTypeDescription",
      "comment": "Type description for a file, directory, or folder as it would be displayed in a system file browser. Example from Windows: the \"Desktop\" folder is described as \"Desktop\". Override for platforms with native ShellFolder implementations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFileChooser.html#getTypeDescription(java.io.File)\"\u003e\u003ccode\u003eJFileChooser.getTypeDescription(java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "return": [
          "the file type description as it would be displayed by a native file chooser or null if no native information is available."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSystemIcon",
      "comment": "Icon for a file, directory, or folder as it would be displayed in a system file browser. Example from Windows: the \"M:\\\" directory displays a CD-ROM icon. The default implementation gets information from the ShellFolder class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFileChooser.html#getIcon(java.io.File)\"\u003e\u003ccode\u003eJFileChooser.getIcon(java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "return": [
          "an icon as it would be displayed by a native file chooser"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "folder"
          }
        },
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isParent",
      "comment": "On Windows, a file can appear in multiple folders, other than its parent directory in the filesystem. Folder could for example be the \"Desktop\" folder which is not the same as file.getParentFile().",
      "tagMap": {
        "param": [
          "\u003ccode\u003efolder\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object representing a directory or special folder",
          "\u003ccode\u003efile\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003efolder\u003c/code\u003e is a directory or special folder and contains \n\u003ccode\u003efile\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fileName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChild",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object representing a directory or special folder",
          "\u003ccode\u003efileName\u003c/code\u003e - a name of a file or folder which exists in \n\u003ccode\u003eparent\u003c/code\u003e"
        ],
        "return": [
          "a File object. This is normally constructed with \n\u003ccode\u003enew File(parent, fileName)\u003c/code\u003e except when parent and child are both special folders, in which case the \n\u003ccode\u003eFile\u003c/code\u003e is a wrapper containing a \n\u003ccode\u003eShellFolder\u003c/code\u003e object."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFileSystem",
      "comment": "Checks if f represents a real directory or file as opposed to a special folder such as \"Desktop\". Used by UI classes to decide if a folder is selectable when doing directory choosing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ef\u003c/code\u003e is a real file or directory."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "containingDir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createNewFolder",
      "comment": "Creates a new folder with a default folder name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtainingDir\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object denoting directory to contain the new folder"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if new folder could not be created"
        ],
        "return": [
          "a \n\u003ccode\u003eFile\u003c/code\u003e object denoting the newly created folder"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHiddenFile",
      "comment": "Returns whether a file is hidden or not.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "return": [
          "true if the given \n\u003ccode\u003eFile\u003c/code\u003e denotes a hidden file"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFileSystemRoot",
      "comment": "Is dir the root of a tree in the file system, such as a drive or partition. Example: Returns true for \"C:\\\" on Windows 98.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/filechooser/FileSystemView.html#isRoot(java.io.File)\"\u003e\u003ccode\u003eisRoot(java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object representing a directory"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ef\u003c/code\u003e is a root of a filesystem"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDrive",
      "comment": "Used by UI classes to decide whether to display a special icon for drives or partitions, e.g. a \"hard disk\" icon. The default implementation has no way of knowing, so always returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - a directory"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e always"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFloppyDrive",
      "comment": "Used by UI classes to decide whether to display a special icon for a floppy disk. Implies isDrive(dir). The default implementation has no way of knowing, so always returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - a directory"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e always"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isComputerNode",
      "comment": "Used by UI classes to decide whether to display a special icon for a computer node, e.g. \"My Computer\" or a network server. The default implementation has no way of knowing, so always returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - a directory"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e always"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoots",
      "comment": "Returns all root partitions on this system. For example, on Windows, this would be the \"Desktop\" folder, while on DOS this would be the A: through Z: drives.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eFile\u003c/code\u003e objects representing all root partitions on this system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHomeDirectory",
      "comment": "Returns the home directory.",
      "tagMap": {
        "return": [
          "the home directory"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultDirectory",
      "comment": "Return the user\u0027s default starting directory for the file chooser.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eFile\u003c/code\u003e object representing the default starting folder"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filename"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createFileObject",
      "comment": "Returns a File object constructed in dir from the given filename.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - an abstract pathname denoting a directory",
          "\u003ccode\u003efilename\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e representation of a pathname"
        ],
        "return": [
          "a \n\u003ccode\u003eFile\u003c/code\u003e object created from \n\u003ccode\u003edir\u003c/code\u003e and \n\u003ccode\u003efilename\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createFileObject",
      "comment": "Returns a File object constructed from the given path string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - \n\u003ccode\u003eString\u003c/code\u003e representation of path"
        ],
        "return": [
          "a \n\u003ccode\u003eFile\u003c/code\u003e object created from the given \n\u003ccode\u003epath\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "useFileHiding"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFiles",
      "comment": "Gets the list of shown (i.e. not hidden) files.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the root directory of files to be returned",
          "\u003ccode\u003euseFileHiding\u003c/code\u003e - determine if hidden files are returned"
        ],
        "return": [
          "an array of \n\u003ccode\u003eFile\u003c/code\u003e objects representing files and directories in the given \n\u003ccode\u003edir\u003c/code\u003e. It includes hidden files if \n\u003ccode\u003euseFileHiding\u003c/code\u003e is false."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParentDirectory",
      "comment": "Returns the parent directory of dir.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the \n\u003ccode\u003eFile\u003c/code\u003e being queried"
        ],
        "return": [
          "the parent directory of \n\u003ccode\u003edir\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003edir\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChooserComboBoxFiles",
      "comment": "Returns an array of files representing the values which will be shown in the file chooser selector.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eFile\u003c/code\u003e objects. The array returned may be possibly empty if there are no appropriate permissions."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getChooserShortcutPanelFiles",
      "comment": "Returns an array of files representing the values to show by default in the file chooser shortcuts panel.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eFile\u003c/code\u003e objects. The array returned may be possibly empty if there are no appropriate permissions."
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLink",
      "comment": "Returns whether the specified file denotes a shell interpreted link which can be obtained by the getLinkLocation(File).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/filechooser/FileSystemView.html#getLinkLocation(java.io.File)\"\u003e\u003ccode\u003egetLinkLocation(File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - a file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efile\u003c/code\u003e equals \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have necessary permissions"
        ],
        "return": [
          "whether this is a link"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLinkLocation",
      "comment": "Returns the regular file referenced by the specified link file if the specified file is a shell interpreted link. Returns null if the specified file is not a shell interpreted link.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - a file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - if the linked file does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efile\u003c/code\u003e equals \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have necessary permissions"
        ],
        "return": [
          "the linked file or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFileSystemRoot",
      "comment": "Creates a new File object for f with correct behavior for a file system root directory.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object representing a file system root directory, for example \"/\" on Unix or \"C:\\\" on Windows."
        ],
        "return": [
          "a new \n\u003ccode\u003eFile\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a FileSystemView.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.filechooser.FileSystemView",
  "comment": "FileSystemView is JFileChooser\u0027s gateway to the file system. Since the JDK1.1 File API doesn\u0027t allow access to such information as root partitions, file type information, or hidden file bits, this class is designed to intuit as much OS-specific file system information as possible. \n\u003cp\u003e Java Licensees may want to provide a different implementation of FileSystemView to better handle a given operating system.\u003c/p\u003e",
  "tagMap": {}
}