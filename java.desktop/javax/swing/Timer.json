{
  "packageName": "javax.swing",
  "simpleName": "Timer",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.event.EventListenerList",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listenerList",
      "comment": "The collection of registered listeners",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addActionListener",
      "comment": "Adds an action listener to the Timer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#%3Cinit%3E(int,java.awt.event.ActionListener)\"\u003e\u003ccode\u003eTimer(int, java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeActionListener",
      "comment": "Removes the specified action listener from the Timer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ActionListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActionListeners",
      "comment": "Returns an array of all the action listeners registered on this timer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#addActionListener(java.awt.event.ActionListener)\"\u003e\u003ccode\u003eaddActionListener(java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#removeActionListener(java.awt.event.ActionListener)\"\u003e\u003ccode\u003eremoveActionListener(java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of the timer\u0027s \n\u003ccode\u003eActionListener\u003c/code\u003es or an empty array if no action listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireActionPerformed",
      "comment": "Notifies all listeners that have registered interest for notification on this event type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the action event to fire"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listenerType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.util.EventListener",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListeners",
      "comment": "Returns an array of all the objects currently registered as FooListeners upon this Timer. FooListeners are registered using the addFooListener method. You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a Timer instance t for its action listeners with the following code: ActionListener[] als \u003d (ActionListener[])(t.getListeners(ActionListener.class)); If no such listeners exist, this method returns an empty array.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of \n\u003ccode\u003eEventListener\u003c/code\u003e class being requested"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#getActionListeners()\"\u003e\u003ccode\u003egetActionListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#addActionListener(java.awt.event.ActionListener)\"\u003e\u003ccode\u003eaddActionListener(java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#removeActionListener(java.awt.event.ActionListener)\"\u003e\u003ccode\u003eremoveActionListener(java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerType\u003c/code\u003e - the type of listeners requested; this parameter should specify an interface that descends from \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerType\u003c/code\u003e doesn\u0027t specify a class or interface that implements \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "return": [
          "an array of all objects registered as \n\u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this timer, or an empty array if no such listeners have been added"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLogTimers",
      "comment": "Enables or disables the timer log. When enabled, a message is posted to System.out whenever the timer goes off.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#getLogTimers()\"\u003e\u003ccode\u003egetLogTimers()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable logging"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLogTimers",
      "comment": "Returns true if logging is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setLogTimers(boolean)\"\u003e\u003ccode\u003esetLogTimers(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if logging is enabled; otherwise, false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDelay",
      "comment": "Sets the Timer\u0027s between-event delay, the number of milliseconds between successive action events. This does not affect the initial delay property, which can be set by the setInitialDelay method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setInitialDelay(int)\"\u003e\u003ccode\u003esetInitialDelay(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - the delay in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDelay",
      "comment": "Returns the delay, in milliseconds, between firings of action events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setDelay(int)\"\u003e\u003ccode\u003esetDelay(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#getInitialDelay()\"\u003e\u003ccode\u003egetInitialDelay()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the delay, in milliseconds, between firings of action events"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialDelay"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInitialDelay",
      "comment": "Sets the Timer\u0027s initial delay, the time in milliseconds to wait after the timer is started before firing the first event. Upon construction, this is set to be the same as the between-event delay, but then its value is independent and remains unaffected by changes to the between-event delay.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setDelay(int)\"\u003e\u003ccode\u003esetDelay(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einitialDelay\u003c/code\u003e - the initial delay, in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInitialDelay",
      "comment": "Returns the Timer\u0027s initial delay.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setInitialDelay(int)\"\u003e\u003ccode\u003esetInitialDelay(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setDelay(int)\"\u003e\u003ccode\u003esetDelay(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eTimer\u003c/code\u003e\u0027s intial delay, in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRepeats",
      "comment": "If flag is false, instructs the Timer to send only one action event to its listeners.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - specify \n\u003ccode\u003efalse\u003c/code\u003e to make the timer stop after sending its first action event"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRepeats",
      "comment": "Returns true (the default) if the Timer will send an action event to its listeners multiple times.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setRepeats(boolean)\"\u003e\u003ccode\u003esetRepeats(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the \n\u003ccode\u003eTimer\u003c/code\u003e will send an action event to its listeners multiple times"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCoalesce",
      "comment": "Sets whether the Timer coalesces multiple pending ActionEvent firings. A busy application may not be able to keep up with a Timer\u0027s event generation, causing multiple action events to be queued. When processed, the application sends these events one after the other, causing the Timer\u0027s listeners to receive a sequence of events with no delay between them. Coalescing avoids this situation by reducing multiple pending events to a single event. Timers coalesce events by default.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - specify \n\u003ccode\u003efalse\u003c/code\u003e to turn off coalescing"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCoalesce",
      "comment": "Returns true if the Timer coalesces multiple pending action events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setCoalesce(boolean)\"\u003e\u003ccode\u003esetCoalesce(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the \n\u003ccode\u003eTimer\u003c/code\u003e coalesces multiple pending action events"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setActionCommand",
      "comment": "Sets the string that will be delivered as the action command in ActionEvents fired by this timer. null is an acceptable value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the action command"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActionCommand",
      "comment": "Returns the string that will be delivered as the action command in ActionEvents fired by this timer. May be null, which is also the default.",
      "tagMap": {
        "return": [
          "the action command used in firing events"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "start",
      "comment": "Starts the Timer, causing it to start sending action events to its listeners.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#stop()\"\u003e\u003ccode\u003estop()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRunning",
      "comment": "Returns true if the Timer is running.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the \n\u003ccode\u003eTimer\u003c/code\u003e is running, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stop",
      "comment": "Stops the Timer, causing it to stop sending action events to its listeners.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "restart",
      "comment": "Restarts the Timer, canceling any pending firings and causing it to fire with its initial delay.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a Timer and initializes both the initial delay and between-event delay to delay milliseconds. If delay is less than or equal to zero, the timer fires as soon as it is started. If listener is not null, it\u0027s registered as an action listener on the timer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#addActionListener(java.awt.event.ActionListener)\"\u003e\u003ccode\u003eaddActionListener(java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setInitialDelay(int)\"\u003e\u003ccode\u003esetInitialDelay(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Timer.html#setRepeats(boolean)\"\u003e\u003ccode\u003esetRepeats(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edelay\u003c/code\u003e - milliseconds for the initial and between-event delay",
          "\u003ccode\u003elistener\u003c/code\u003e - an initial listener; can be \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.Timer",
  "comment": "Fires one or more \n\u003ccode\u003eActionEvent\u003c/code\u003es at specified intervals. An example use is an animation object that uses a \n\u003ccode\u003eTimer\u003c/code\u003e as the trigger for drawing its frames. \n\u003cp\u003e Setting up a timer involves creating a \u003ccode\u003eTimer\u003c/code\u003e object, registering one or more action listeners on it, and starting the timer using the \u003ccode\u003estart\u003c/code\u003e method. For example, the following code creates and starts a timer that fires an action event once per second (as specified by the first argument to the \u003ccode\u003eTimer\u003c/code\u003e constructor). The second argument to the \u003ccode\u003eTimer\u003c/code\u003e constructor specifies a listener to receive the timer\u0027s action events. \u003c/p\u003e\n\u003cpre\u003e  int delay \u003d 1000; //milliseconds\n  ActionListener taskPerformer \u003d new ActionListener() {\n      public void actionPerformed(ActionEvent evt) {\n          \u003cem\u003e//...Perform a task...\u003c/em\u003e\n      }\n  };\n  new Timer(delay, taskPerformer).start();\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eTimers\u003c/code\u003e are constructed by specifying both a delay parameter and an \u003ccode\u003eActionListener\u003c/code\u003e. The delay parameter is used to set both the initial delay and the delay between event firing, in milliseconds. Once the timer has been started, it waits for the initial delay before firing its first \u003ccode\u003eActionEvent\u003c/code\u003e to registered listeners. After this first event, it continues to fire events every time the between-event delay has elapsed, until it is stopped. \u003c/p\u003e\n\u003cp\u003e After construction, the initial delay and the between-event delay can be changed independently, and additional \u003ccode\u003eActionListeners\u003c/code\u003e may be added. \u003c/p\u003e\n\u003cp\u003e If you want the timer to fire only the first time and then stop, invoke \u003ccode\u003esetRepeats(false)\u003c/code\u003e on the timer. \u003c/p\u003e\n\u003cp\u003e Although all \u003ccode\u003eTimer\u003c/code\u003es perform their waiting using a single, shared thread (created by the first \u003ccode\u003eTimer\u003c/code\u003e object that executes), the action event handlers for \u003ccode\u003eTimer\u003c/code\u003es execute on another thread -- the event-dispatching thread. This means that the action handlers for \u003ccode\u003eTimer\u003c/code\u003es can safely perform operations on Swing components. However, it also means that the handlers must execute quickly to keep the GUI responsive. \u003c/p\u003e\n\u003cp\u003e In v 1.3, another \u003ccode\u003eTimer\u003c/code\u003e class was added to the Java platform: \u003ccode\u003ejava.util.Timer\u003c/code\u003e. Both it and \u003ccode\u003ejavax.swing.Timer\u003c/code\u003e provide the same basic functionality, but \u003ccode\u003ejava.util.Timer\u003c/code\u003e is more general and has more features. The \u003ccode\u003ejavax.swing.Timer\u003c/code\u003e has two features that can make it a little easier to use with GUIs. First, its event handling metaphor is familiar to GUI programmers and can make dealing with the event-dispatching thread a bit simpler. Second, its automatic thread sharing means that you don\u0027t have to take special steps to avoid spawning too many threads. Instead, your timer uses the same thread used to make cursors blink, tool tips appear, and so on. \u003c/p\u003e\n\u003cp\u003e You can find further documentation and several examples of using timers by visiting \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html\" target\u003d\"_top\"\u003eHow to Use Timers\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Timer.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTimer\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}