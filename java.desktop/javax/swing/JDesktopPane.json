{
  "packageName": "javax.swing",
  "simpleName": "JDesktopPane",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JLayeredPane",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LIVE_DRAG_MODE",
      "comment": "Indicates that the entire contents of the item being dragged should appear inside the desktop pane.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#OUTLINE_DRAG_MODE\"\u003e\u003ccode\u003eOUTLINE_DRAG_MODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#setDragMode(int)\"\u003e\u003ccode\u003esetDragMode(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JDesktopPane.LIVE_DRAG_MODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OUTLINE_DRAG_MODE",
      "comment": "Indicates that an outline only of the item being dragged should appear inside the desktop pane.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#LIVE_DRAG_MODE\"\u003e\u003ccode\u003eLIVE_DRAG_MODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#setDragMode(int)\"\u003e\u003ccode\u003esetDragMode(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JDesktopPane.OUTLINE_DRAG_MODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.DesktopPaneUI",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the L\u0026F object that renders this component.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eDesktopPaneUI\u003c/code\u003e object that renders this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the L\u0026F object that renders this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the Component\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the DesktopPaneUI L\u0026amp;F object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragMode",
      "comment": "Sets the \"dragging style\" used by the desktop pane. You may want to change to one mode or another for performance or aesthetic reasons.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "enumerationValues",
              "value": [
                "JDesktopPane.LIVE_DRAG_MODE",
                "JDesktopPane.OUTLINE_DRAG_MODE"
              ]
            },
            {
              "name": "escription",
              "value": "Dragging style for internal frame children."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#LIVE_DRAG_MODE\"\u003e\u003ccode\u003eLIVE_DRAG_MODE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#OUTLINE_DRAG_MODE\"\u003e\u003ccode\u003eOUTLINE_DRAG_MODE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edragMode\u003c/code\u003e - the style of drag to use for items in the Desktop"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragMode",
      "comment": "Gets the current \"dragging style\" used by the desktop pane.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDesktopPane.html#setDragMode(int)\"\u003e\u003ccode\u003esetDragMode(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "either \n\u003ccode\u003eLive_DRAG_MODE\u003c/code\u003e or \n\u003ccode\u003eOUTLINE_DRAG_MODE\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.DesktopManager",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDesktopManager",
      "comment": "Returns the DesktopManger that handles desktop-specific UI actions.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eDesktopManger\u003c/code\u003e that handles desktop-specific UI actions"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDesktopManager",
      "comment": "Sets the DesktopManger that will handle desktop-specific UI actions. This may be overridden by LookAndFeel.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "escription",
              "value": "Desktop manager to handle the internal frames in the desktop pane."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the \n\u003ccode\u003eDesktopManager\u003c/code\u003e to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Notification from the UIManager that the L\u0026F has changed. Replaces the current UI object with the latest version from the UIManager.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the name of the L\u0026F class that renders this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"DesktopPaneUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JInternalFrame",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAllFrames",
      "comment": "Returns all JInternalFrames currently displayed in the desktop. Returns iconified frames as well as expanded frames.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eJInternalFrame\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JInternalFrame",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedFrame",
      "comment": "Returns the currently active JInternalFrame in this JDesktopPane, or null if no JInternalFrame is currently active.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the currently active \n\u003ccode\u003eJInternalFrame\u003c/code\u003e or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectedFrame",
      "comment": "Sets the currently active JInternalFrame in this JDesktopPane. This method is used to bridge the package gap between JDesktopPane and the platform implementation code and should not be called directly. To visually select the frame the client must call JInternalFrame.setSelected(true) to activate the frame.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JInternalFrame.html#setSelected(boolean)\"\u003e\u003ccode\u003eJInternalFrame.setSelected(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the internal frame that\u0027s currently selected"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JInternalFrame",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAllFramesInLayer",
      "comment": "Returns all JInternalFrames currently displayed in the specified layer of the desktop. Returns iconified frames as well expanded frames.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJLayeredPane\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elayer\u003c/code\u003e - an int specifying the desktop layer"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJInternalFrame\u003c/code\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JInternalFrame",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "selectFrame",
      "comment": "Selects the next JInternalFrame in this desktop pane.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eforward\u003c/code\u003e - a boolean indicating which direction to select in; \n\u003ccode\u003etrue\u003c/code\u003e for forward, \n\u003ccode\u003efalse\u003c/code\u003e for backward"
        ],
        "return": [
          "the JInternalFrame that was selected or \n\u003ccode\u003enull\u003c/code\u003e if nothing was selected"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "addImpl",
      "comment": "Adds the specified component to this container at the specified index. This method also notifies the layout manager to add the component to this container\u0027s layout using the specified constraints object via the addLayoutComponent method. The constraints are defined by the particular layout manager being used. For example, the BorderLayout class defines five constraints: BorderLayout.NORTH, BorderLayout.SOUTH, BorderLayout.EAST, BorderLayout.WEST, and BorderLayout.CENTER. The GridBagLayout class requires a GridBagConstraints object. Failure to pass the correct type of constraints object results in an IllegalArgumentException. If the current layout manager implements LayoutManager2, then LayoutManager2.addLayoutComponent(Component,Object) is invoked on it. If the current layout manager does not implement LayoutManager2, and constraints is a String, then LayoutManager.addLayoutComponent(String,Component) is invoked on it. If the component is not an ancestor of this container and has a non-null parent, it is removed from its current parent before it is added to this container. This is the method to override if a program needs to track every add request to a container as all other add methods defer to this one. An overriding method should usually include a call to the superclass\u0027s version of the method: super.addImpl(comp, constraints, index) This method changes layout-related information, and therefore, invalidates the component hierarchy. If the container has already been displayed, the hierarchy must be validated thereafter in order to display the added component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component)\"\u003e\u003ccode\u003eContainer.add(Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component,int)\"\u003e\u003ccode\u003eContainer.add(Component, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component,java.lang.Object)\"\u003e\u003ccode\u003eContainer.add(Component, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eLayoutManager2\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addImpl(java.awt.Component,java.lang.Object,int)\"\u003eaddImpl\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be added",
          "\u003ccode\u003econstraints\u003c/code\u003e - an object expressing layout constraints for this component",
          "\u003ccode\u003eindex\u003c/code\u003e - the position in the container\u0027s list at which to insert the component, where \n\u003ccode\u003e-1\u003c/code\u003e means append to the end"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Remove the indexed component from this pane. This is the absolute index, ignoring layers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#getIndexOf(java.awt.Component)\"\u003e\u003ccode\u003eJLayeredPane.getIndexOf(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#remove(int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html\" title\u003d\"class in javax.swing\"\u003eJLayeredPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - an int specifying the component to remove"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAll",
      "comment": "Removes all the components from this container.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component)\"\u003e\u003ccode\u003eContainer.add(java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#remove(int)\"\u003e\u003ccode\u003eContainer.remove(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#removeAll()\"\u003eremoveAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html\" title\u003d\"class in javax.swing\"\u003eJLayeredPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setComponentZOrder",
      "comment": "Moves the specified component to the specified z-order index in the container. The z-order determines the order that components are painted; the component with the highest z-order paints first and the component with the lowest z-order paints last. Where components overlap, the component with the lower z-order paints over the component with the higher z-order. If the component is a child of some other container, it is removed from that container before being added to this container. The important difference between this method and java.awt.Container.add(Component, int) is that this method doesn\u0027t call removeNotify on the component while removing it from its previous container unless necessary and when allowed by the underlying native windowing system. This way, if the component has the keyboard focus, it maintains the focus when moved to the new position. This property is guaranteed to apply only to lightweight non-Container components. This method changes layout-related information, and therefore, invalidates the component hierarchy. Note: Not all platforms support changing the z-order of heavyweight components from one container into another without the call to removeNotify. There is no way to detect whether a platform supports this, so developers shouldn\u0027t make any assumptions.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getComponentZOrder(java.awt.Component)\"\u003e\u003ccode\u003eContainer.getComponentZOrder(java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setComponentZOrder(java.awt.Component,int)\"\u003esetComponentZOrder\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be moved",
          "\u003ccode\u003eindex\u003c/code\u003e - the position in the container\u0027s list to insert the component, where \n\u003ccode\u003egetComponentCount()\u003c/code\u003e appends to the end"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JDesktopPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html\" title\u003d\"class in javax.swing\"\u003eJLayeredPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJDesktopPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JDesktopPane. For desktop panes, the AccessibleContext takes the form of an AccessibleJDesktopPane. A new AccessibleJDesktopPane instance is created if necessary.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html\" title\u003d\"class in javax.swing\"\u003eJLayeredPane\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAccessibleJDesktopPane\u003c/code\u003e that serves as the \n\u003ccode\u003eAccessibleContext\u003c/code\u003e of this \n\u003ccode\u003eJDesktopPane\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JDesktopPane.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.JDesktopPane$AccessibleJDesktopPane"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JDesktopPane",
  "comment": "A container used to create a multiple-document interface or a virtual desktop. You create \n\u003ccode\u003eJInternalFrame\u003c/code\u003e objects and add them to the \n\u003ccode\u003eJDesktopPane\u003c/code\u003e. \n\u003ccode\u003eJDesktopPane\u003c/code\u003e extends \n\u003ccode\u003eJLayeredPane\u003c/code\u003e to manage the potentially overlapping internal frames. It also maintains a reference to an instance of \n\u003ccode\u003eDesktopManager\u003c/code\u003e that is set by the UI class for the current look and feel (L\u0026amp;F). Note that \n\u003ccode\u003eJDesktopPane\u003c/code\u003e does not support borders. \n\u003cp\u003e This class is normally used as the parent of \u003ccode\u003eJInternalFrames\u003c/code\u003e to provide a pluggable \u003ccode\u003eDesktopManager\u003c/code\u003e object to the \u003ccode\u003eJInternalFrames\u003c/code\u003e. The \u003ccode\u003einstallUI\u003c/code\u003e of the L\u0026amp;F specific implementation is responsible for setting the \u003ccode\u003edesktopManager\u003c/code\u003e variable appropriately. When the parent of a \u003ccode\u003eJInternalFrame\u003c/code\u003e is a \u003ccode\u003eJDesktopPane\u003c/code\u003e, it should delegate most of its behavior to the \u003ccode\u003edesktopManager\u003c/code\u003e (closing, resizing, etc). \u003c/p\u003e\n\u003cp\u003e For further documentation and examples see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html\"\u003eHow to Use Internal Frames\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JInternalFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJInternalFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JInternalFrame.JDesktopIcon.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJInternalFrame.JDesktopIcon\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DesktopManager.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eDesktopManager\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}