{
  "packageName": "javax.swing",
  "simpleName": "JCheckBoxMenuItem",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JMenuItem",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the name of the L\u0026F class that renders this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuItem.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuItem.html\" title\u003d\"class in javax.swing\"\u003eJMenuItem\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"CheckBoxMenuItemUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getState",
      "comment": "Returns the selected-state of the item. This method exists for AWT compatibility only. New code should use isSelected() instead.",
      "tagMap": {
        "return": [
          "true if the item is selected"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setState",
      "comment": "Sets the selected-state of the item. This method exists for AWT compatibility only. New code should use setSelected() instead.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "escription",
              "value": "The selection state of the check box menu item"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - a boolean value indicating the item\u0027s selected-state, where true\u003dselected"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedObjects",
      "comment": "Returns an array (length 1) containing the check box menu item label or null if the check box is not selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getSelectedObjects()\"\u003egetSelectedObjects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html\" title\u003d\"class in javax.swing\"\u003eAbstractButton\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html#getSelectedObjects()\"\u003egetSelectedObjects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html\" title\u003d\"interface in java.awt\"\u003eItemSelectable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an array containing one Object -- the text of the menu item -- if the item is selected; otherwise null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JCheckBoxMenuItem. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuItem.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuItem.html\" title\u003d\"class in javax.swing\"\u003eJMenuItem\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this JCheckBoxMenuItem."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JCheckBoxMenuItem. For JCheckBoxMenuItems, the AccessibleContext takes the form of an AccessibleJCheckBoxMenuItem. A new AccessibleJCheckBoxMenuItem instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuItem.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuItem.html\" title\u003d\"class in javax.swing\"\u003eJMenuItem\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJCheckBoxMenuItem that serves as the AccessibleContext of this AccessibleJCheckBoxMenuItem"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box menu item with no set text or icon.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box menu item with an icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the icon of the \n\u003ccode\u003eJCheckBoxMenuItem\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box menu item with text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the \n\u003ccode\u003eJCheckBoxMenuItem\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a menu item whose properties are taken from the Action supplied.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the action of the \n\u003ccode\u003eJCheckBoxMenuItem\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an initially unselected check box menu item with the specified text and icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the \n\u003ccode\u003eJCheckBoxMenuItem\u003c/code\u003e",
          "\u003ccode\u003eicon\u003c/code\u003e - the icon of the \n\u003ccode\u003eJCheckBoxMenuItem\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a check box menu item with the specified text and selection state.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the check box menu item.",
          "\u003ccode\u003eb\u003c/code\u003e - the selected state of the check box menu item"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a check box menu item with the specified text, icon, and selection state.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the check box menu item",
          "\u003ccode\u003eicon\u003c/code\u003e - the icon of the check box menu item",
          "\u003ccode\u003eb\u003c/code\u003e - the selected state of the check box menu item"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JCheckBoxMenuItem$AccessibleJCheckBoxMenuItem"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JCheckBoxMenuItem",
  "comment": "A menu item that can be selected or deselected. If selected, the menu item typically appears with a checkmark next to it. If unselected or deselected, the menu item appears without a checkmark. Like a regular menu item, a check box menu item can have either text or a graphic icon associated with it, or both. \n\u003cp\u003e Either \u003ccode\u003eisSelected\u003c/code\u003e/\u003ccode\u003esetSelected\u003c/code\u003e or \u003ccode\u003egetState\u003c/code\u003e/\u003ccode\u003esetState\u003c/code\u003e can be used to determine/specify the menu item\u0027s selection state. The preferred methods are \u003ccode\u003eisSelected\u003c/code\u003e and \u003ccode\u003esetSelected\u003c/code\u003e, which work for all menus and buttons. The \u003ccode\u003egetState\u003c/code\u003e and \u003ccode\u003esetState\u003c/code\u003e methods exist for compatibility with other component sets. \u003c/p\u003e\n\u003cp\u003e Menu items can be configured, and to some degree controlled, by \u003ccode\u003e\u003ca href\u003d\"Action.html\"\u003eAction\u003c/a\u003e\u003c/code\u003es. Using an \u003ccode\u003eAction\u003c/code\u003e with a menu item has many benefits beyond directly configuring a menu item. Refer to \u003ca href\u003d\"Action.html#buttonActions\"\u003e Swing Components Supporting \u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e for more details, and you can find more information in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/action.html\"\u003eHow to Use Actions\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e Some times it is required to select several check box menu items from a menu. In this case it is useful that clicking on one check box menu item does not close the menu. Such behavior can be controlled either by client \u003ca href\u003d\"JComponent.html#putClientProperty(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eJComponent.putClientProperty(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e or the Look and Feel \u003ca href\u003d\"UIManager.html#put(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eUIManager.put(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e property named \u003ccode\u003e\"CheckBoxMenuItem.doNotCloseOnMouseClick\"\u003c/code\u003e. The default value is \u003ccode\u003efalse\u003c/code\u003e. Setting the property to \u003ccode\u003etrue\u003c/code\u003e prevents the menu from closing when it is clicked by the mouse. If the client property is set its value is always used; otherwise the L\u0026amp;F property is queried. Note: some \u003ccode\u003eL\u0026amp;F\u003c/code\u003es may ignore this property. All built-in \u003ccode\u003eL\u0026amp;F\u003c/code\u003es inherit this behaviour. \u003c/p\u003e\n\u003cp\u003e For further information and examples of using check box menu items, see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/menu.html\"\u003eHow to Use Menus\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}