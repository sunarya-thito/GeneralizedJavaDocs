{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "ActionScroller",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.AbstractAction",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "actionPerformed",
      "comment": "Invoked when an action occurs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event to be processed"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JSlider",
            "type": "Class"
          },
          "field": {
            "name": "slider"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "block"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ActionScroller.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eslider\u003c/code\u003e - a slider",
          "\u003ccode\u003edir\u003c/code\u003e - the direction",
          "\u003ccode\u003eblock\u003c/code\u003e - block scrolling or not"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicSliderUI$ActionScroller",
  "comment": "As of Java 2 platform v1.3 this undocumented class is no longer used. The recommended approach to creating bindings is to use a combination of an \n\u003ccode\u003eActionMap\u003c/code\u003e, to contain the action, and an \n\u003ccode\u003eInputMap\u003c/code\u003e to contain the mapping from KeyStroke to action description. The InputMap is usually described in the LookAndFeel tables. \n\u003cp\u003e Please refer to the key bindings specification for further details. \u003c/p\u003e\n\u003cp\u003e This class should be treated as a \"protected\" inner class. Instantiate it only within subclasses of \u003ccode\u003eFoo\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {}
}