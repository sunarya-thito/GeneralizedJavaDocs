{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicToolBarUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.ToolBarUI",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.JToolBar",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "toolBar",
      "comment": "The instance of JToolBar.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.plaf.basic.BasicToolBarUI$DragWindow",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dragWindow",
      "comment": "The instance of DragWindow.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "focusedCompIndex",
      "comment": "The index of the focused component.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dockingColor",
      "comment": "The background color of the docking border.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "floatingColor",
      "comment": "The background color of the not docking border.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dockingBorderColor",
      "comment": "The color of the docking border.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "floatingBorderColor",
      "comment": "The color of the not docking border.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.MouseInputListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dockingListener",
      "comment": "The instance of a MouseInputListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "propertyListener",
      "comment": "The instance of a PropertyChangeListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.ContainerListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "toolBarContListener",
      "comment": "The instance of a ContainerListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "toolBarFocusListener",
      "comment": "The instance of a FocusListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "constraintBeforeFloating",
      "comment": "The layout before floating.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "upKey",
      "comment": "As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "downKey",
      "comment": "As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "leftKey",
      "comment": "As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.KeyStroke",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rightKey",
      "comment": "As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createUI",
      "comment": "Constructs a new instance of BasicToolBarUI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component"
        ],
        "return": [
          "a new instance of \n\u003ccode\u003eBasicToolBarUI\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installDefaults",
      "comment": "Installs default properties.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallDefaults",
      "comment": "Uninstalls default properties.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installComponents",
      "comment": "Registers components.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallComponents",
      "comment": "Unregisters components.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installListeners",
      "comment": "Registers listeners.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallListeners",
      "comment": "Unregisters listeners.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installKeyboardActions",
      "comment": "Registers keyboard actions.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallKeyboardActions",
      "comment": "Unregisters keyboard actions.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "navigateFocusedComp",
      "comment": "Navigates the focused component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edirection\u003c/code\u003e - a direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createRolloverBorder",
      "comment": "Creates a rollover border for toolbar components. The rollover border will be installed if rollover borders are enabled. Override this method to provide an alternate rollover border.",
      "tagMap": {
        "return": [
          "a rollover border for toolbar components"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createNonRolloverBorder",
      "comment": "Creates the non rollover border for toolbar components. This border will be installed as the border for components added to the toolbar if rollover borders are not enabled. Override this method to provide an alternate rollover border.",
      "tagMap": {
        "return": [
          "the non rollover border for toolbar components"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JFrame",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JToolBar",
            "type": "Class"
          },
          "field": {
            "name": "toolbar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFloatingFrame",
      "comment": "No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#createFloatingWindow(javax.swing.JToolBar)\"\u003e\u003ccode\u003ecreateFloatingWindow(javax.swing.JToolBar)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etoolbar\u003c/code\u003e - an instance of \n\u003ccode\u003eJToolBar\u003c/code\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eJFrame\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RootPaneContainer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JToolBar",
            "type": "Class"
          },
          "field": {
            "name": "toolbar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFloatingWindow",
      "comment": "Creates a window which contains the toolbar after it has been dragged out from its container",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoolbar\u003c/code\u003e - an instance of \n\u003ccode\u003eJToolBar\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRootPaneContainer\u003c/code\u003e object, containing the toolbar"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.basic.BasicToolBarUI$DragWindow",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JToolBar",
            "type": "Class"
          },
          "field": {
            "name": "toolbar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDragWindow",
      "comment": "Returns an instance of DragWindow.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoolbar\u003c/code\u003e - an instance of \n\u003ccode\u003eJToolBar\u003c/code\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eDragWindow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRolloverBorders",
      "comment": "Returns a flag to determine whether rollover button borders are enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#setRolloverBorders(boolean)\"\u003e\u003ccode\u003esetRolloverBorders(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if rollover borders are enabled; false otherwise"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "rollover"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRolloverBorders",
      "comment": "Sets the flag for enabling rollover borders on the toolbar and it will also install the appropriate border depending on the state of the flag.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#isRolloverBorders()\"\u003e\u003ccode\u003eisRolloverBorders()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erollover\u003c/code\u003e - if true, rollover borders are installed. Otherwise non-rollover borders are installed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installRolloverBorders",
      "comment": "Installs rollover borders on all the child components of the JComponent. This is a convenience method to call setBorderToRollover for each child component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#setBorderToRollover(java.awt.Component)\"\u003e\u003ccode\u003esetBorderToRollover(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - container which holds the child components (usually a JToolBar)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installNonRolloverBorders",
      "comment": "Installs non-rollover borders on all the child components of the JComponent. A non-rollover border is the border that is installed on the child component while it is in the toolbar. This is a convenience method to call setBorderToNonRollover for each child component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#setBorderToNonRollover(java.awt.Component)\"\u003e\u003ccode\u003esetBorderToNonRollover(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - container which holds the child components (usually a JToolBar)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installNormalBorders",
      "comment": "Installs normal borders on all the child components of the JComponent. A normal border is the original border that was installed on the child component before it was added to the toolbar. This is a convenience method to call setBorderNormal for each child component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#setBorderToNonRollover(java.awt.Component)\"\u003e\u003ccode\u003esetBorderToNonRollover(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - container which holds the child components (usually a JToolBar)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setBorderToRollover",
      "comment": "Sets the border of the component to have a rollover border which was created by the createRolloverBorder() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#createRolloverBorder()\"\u003e\u003ccode\u003ecreateRolloverBorder()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component which will have a rollover border installed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.AbstractButton",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getRolloverBorder",
      "comment": "Returns a rollover border for the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#setBorderToRollover(java.awt.Component)\"\u003e\u003ccode\u003esetBorderToRollover(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the button to calculate the rollover border for"
        ],
        "return": [
          "the rollover border"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setBorderToNonRollover",
      "comment": "Sets the border of the component to have a non-rollover border which was created by the createNonRolloverBorder() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#createNonRolloverBorder()\"\u003e\u003ccode\u003ecreateNonRolloverBorder()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component which will have a non-rollover border installed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.border.Border",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.AbstractButton",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getNonRolloverBorder",
      "comment": "Returns a non-rollover border for the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#setBorderToNonRollover(java.awt.Component)\"\u003e\u003ccode\u003esetBorderToNonRollover(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the button to calculate the non-rollover border for"
        ],
        "return": [
          "the non-rollover border"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setBorderToNormal",
      "comment": "Sets the border of the component to have a normal border. A normal border is the original border that was installed on the child component before it was added to the toolbar.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicToolBarUI.html#createNonRolloverBorder()\"\u003e\u003ccode\u003ecreateNonRolloverBorder()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - component which will have a normal border re-installed"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFloatingLocation",
      "comment": "Sets the floating location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFloating",
      "comment": "Returns true if the JToolBar is floating",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eJToolBar\u003c/code\u003e is floating"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFloating",
      "comment": "Sets the floating property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eJToolBar\u003c/code\u003e is floating",
          "\u003ccode\u003ep\u003c/code\u003e - the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOrientation",
      "comment": "Sets the tool bar\u0027s orientation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorientation\u003c/code\u003e - the new orientation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDockingColor",
      "comment": "Gets the color displayed when over a docking area",
      "tagMap": {
        "return": [
          "the color displayed when over a docking area"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDockingColor",
      "comment": "Sets the color displayed when over a docking area",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the new color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFloatingColor",
      "comment": "Gets the color displayed when over a floating area",
      "tagMap": {
        "return": [
          "the color displayed when over a floating area"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFloatingColor",
      "comment": "Sets the color displayed when over a floating area",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the new color"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canDock",
      "comment": "Returns true if the JToolBar can dock at the given position.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003ep\u003c/code\u003e - a position"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eJToolBar\u003c/code\u003e can dock at the given position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "dragTo",
      "comment": "The method is used to drag DragWindow during the JToolBar is being dragged.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the relative to the \n\u003ccode\u003eJTollBar\u003c/code\u003e position",
          "\u003ccode\u003eorigin\u003c/code\u003e - the screen position of \n\u003ccode\u003eJToolBar\u003c/code\u003e before dragging"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "floatAt",
      "comment": "The method is called at end of dragging to place the frame in either its original place or in its floating frame.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the relative to the \n\u003ccode\u003eJTollBar\u003c/code\u003e position",
          "\u003ccode\u003eorigin\u003c/code\u003e - the screen position of \n\u003ccode\u003eJToolBar\u003c/code\u003e before dragging"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ContainerListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createToolBarContListener",
      "comment": "Returns an instance of ContainerListener.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003eContainerListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createToolBarFocusListener",
      "comment": "Returns an instance of FocusListener.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003eFocusListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createPropertyListener",
      "comment": "Returns an instance of PropertyChangeListener.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.MouseInputListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDockingListener",
      "comment": "Returns an instance of MouseInputListener.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003eMouseInputListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.WindowListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFrameListener",
      "comment": "Constructs a new instance of WindowListener.",
      "tagMap": {
        "return": [
          "a new instance of \n\u003ccode\u003eWindowListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintDragWindow",
      "comment": "Paints the contents of the window used for dragging.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - Graphics to paint to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - is \n\u003ccode\u003eg\u003c/code\u003e is null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BasicToolBarUI.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.plaf.basic.BasicToolBarUI$FrameListener",
    "javax.swing.plaf.basic.BasicToolBarUI$PropertyListener",
    "javax.swing.plaf.basic.BasicToolBarUI$ToolBarFocusListener",
    "javax.swing.plaf.basic.BasicToolBarUI$DockingListener",
    "javax.swing.plaf.basic.BasicToolBarUI$DragWindow",
    "javax.swing.plaf.basic.BasicToolBarUI$ToolBarContListener"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicToolBarUI",
  "comment": "A Basic L\u0026amp;F implementation of ToolBarUI. This implementation is a \"combined\" view/controller.",
  "tagMap": {}
}