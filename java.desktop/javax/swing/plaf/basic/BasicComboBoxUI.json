{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicComboBoxUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.ComboBoxUI",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.JComboBox",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "comboBox",
      "comment": "The instance of JComboBox.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "hasFocus",
      "comment": "This protected field is implementation specific. Do not access directly or override.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.JList",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listBox",
      "comment": "This list is for drawing the current item in the combo box.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.CellRendererPane",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "currentValuePane",
      "comment": "Used to render the currently selected item in the combo box. It doesn\u0027t have anything to do with the popup\u0027s rendering.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.plaf.basic.ComboPopup",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "popup",
      "comment": "The implementation of ComboPopup that is used to show the popup.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "editor",
      "comment": "The Component that the @{code ComboBoxEditor} uses for editing.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.JButton",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "arrowButton",
      "comment": "The arrow button that invokes the popup.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.KeyListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "keyListener",
      "comment": "This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createKeyListener()\"\u003e\u003ccode\u003ecreateKeyListener()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "focusListener",
      "comment": "This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createFocusListener()\"\u003e\u003ccode\u003ecreateFocusListener()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "propertyChangeListener",
      "comment": "This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createPropertyChangeListener()\"\u003e\u003ccode\u003ecreatePropertyChangeListener()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.event.ItemListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "itemListener",
      "comment": "This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createItemListener()\"\u003e\u003ccode\u003ecreateItemListener()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.event.MouseListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "popupMouseListener",
      "comment": "The MouseListener listens to events.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.MouseMotionListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "popupMouseMotionListener",
      "comment": "The MouseMotionListener listens to events.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.KeyListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "popupKeyListener",
      "comment": "The KeyListener listens to events.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.ListDataListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listDataListener",
      "comment": "This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createListDataListener()\"\u003e\u003ccode\u003ecreateListDataListener()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "isMinimumSizeDirty",
      "comment": "The flag for recalculating the minimum preferred size.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cachedMinimumSize",
      "comment": "The cached minimum preferred size.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "squareButton",
      "comment": "Indicates whether or not the combo box button should be square. If square, then the width and height are equal, and are both set to the height of the combo minus appropriate insets.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.7"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "padding",
      "comment": "If specified, these insets act as padding around the cell renderer when laying out and painting the \"selected\" item in the combo box. These insets add to those specified by the cell renderer.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createUI",
      "comment": "Constructs a new instance of BasicComboBoxUI.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component"
        ],
        "return": [
          "a new instance of \n\u003ccode\u003eBasicComboBoxUI\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installDefaults",
      "comment": "Installs the default colors, default font, default renderer, and default editor into the JComboBox.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installListeners",
      "comment": "Creates and installs listeners for the combo box and its model. This method is called when the UI is installed.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallDefaults",
      "comment": "Uninstalls the default colors, default font, default renderer, and default editor from the combo box.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallListeners",
      "comment": "Removes the installed listeners from the combo box and its model. The number and types of listeners removed and in this method should be the same that was added in installListeners",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.basic.ComboPopup",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createPopup",
      "comment": "Creates the popup portion of the combo box.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/ComboPopup.html\" title\u003d\"interface in javax.swing.plaf.basic\"\u003e\u003ccode\u003eComboPopup\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eComboPopup\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.KeyListener",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createKeyListener",
      "comment": "Creates a KeyListener which will be added to the combo box. If this method returns null then it will not be added to the combo box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance \n\u003ccode\u003eKeyListener\u003c/code\u003e or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFocusListener",
      "comment": "Creates a FocusListener which will be added to the combo box. If this method returns null then it will not be added to the combo box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance of a \n\u003ccode\u003eFocusListener\u003c/code\u003e or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ListDataListener",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createListDataListener",
      "comment": "Creates a list data listener which will be added to the ComboBoxModel. If this method returns null then it will not be added to the combo box model.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance of a \n\u003ccode\u003eListDataListener\u003c/code\u003e or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ItemListener",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createItemListener",
      "comment": "Creates an ItemListener which will be added to the combo box. If this method returns null then it will not be added to the combo box. Subclasses may override this method to return instances of their own ItemEvent handlers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance of an \n\u003ccode\u003eItemListener\u003c/code\u003e or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createPropertyChangeListener",
      "comment": "Creates a PropertyChangeListener which will be added to the combo box. If this method returns null then it will not be added to the combo box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance of a \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.LayoutManager",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLayoutManager",
      "comment": "Creates a layout manager for managing the components which make up the combo box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance of a layout manager"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ListCellRenderer",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createRenderer",
      "comment": "Creates the default renderer that will be used in a non-editiable combo box. A default renderer will used only if a renderer has not been explicitly set with setRenderer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComboBox.html#setRenderer(javax.swing.ListCellRenderer)\"\u003e\u003ccode\u003eJComboBox.setRenderer(javax.swing.ListCellRenderer\u0026lt;? super E\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eListCellRender\u003c/code\u003e used for the combo box"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ComboBoxEditor",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createEditor",
      "comment": "Creates the default editor that will be used in editable combo boxes. A default editor will be used only if an editor has not been explicitly set with setEditor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComboBox.html#setEditor(javax.swing.ComboBoxEditor)\"\u003e\u003ccode\u003eJComboBox.setEditor(javax.swing.ComboBoxEditor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eComboBoxEditor\u003c/code\u003e used for the combo box"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installComponents",
      "comment": "Creates and initializes the components which make up the aggregate combo box. This method is called as part of the UI installation process.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallComponents",
      "comment": "The aggregate components which comprise the combo box are unregistered and uninitialized. This method is called as part of the UI uninstallation process.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addEditor",
      "comment": "This public method is implementation specific and should be private. do not call or override. To implement a specific editor create a custom ComboBoxEditor",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createEditor()\"\u003e\u003ccode\u003ecreateEditor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComboBox.html#setEditor(javax.swing.ComboBoxEditor)\"\u003e\u003ccode\u003eJComboBox.setEditor(javax.swing.ComboBoxEditor)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ComboBoxEditor.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eComboBoxEditor\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeEditor",
      "comment": "This public method is implementation specific and should be private. do not call or override.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#addEditor()\"\u003e\u003ccode\u003eaddEditor()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "configureEditor",
      "comment": "This protected method is implementation specific and should be private. do not call or override.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#addEditor()\"\u003e\u003ccode\u003eaddEditor()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "unconfigureEditor",
      "comment": "This protected method is implementation specific and should be private. Do not call or override.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#addEditor()\"\u003e\u003ccode\u003eaddEditor()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "configureArrowButton",
      "comment": "This public method is implementation specific and should be private. Do not call or override.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createArrowButton()\"\u003e\u003ccode\u003ecreateArrowButton()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unconfigureArrowButton",
      "comment": "This public method is implementation specific and should be private. Do not call or override.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#createArrowButton()\"\u003e\u003ccode\u003ecreateArrowButton()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JButton",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createArrowButton",
      "comment": "Creates a button which will be used as the control to show or hide the popup portion of the combo box.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a button which represents the popup control"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComboBox",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPopupVisible",
      "comment": "Tells if the popup is visible or not.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html#isPopupVisible(javax.swing.JComboBox)\"\u003eisPopupVisible\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComboBoxUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a \n\u003ccode\u003eJComboBox\u003c/code\u003e"
        ],
        "return": [
          "true if popup of the \n\u003ccode\u003eJComboBox\u003c/code\u003e is visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComboBox",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPopupVisible",
      "comment": "Hides the popup.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html#setPopupVisible(javax.swing.JComboBox,boolean)\"\u003esetPopupVisible\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComboBoxUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a \n\u003ccode\u003eJComboBox\u003c/code\u003e",
          "\u003ccode\u003ev\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e determining the visibilty of the popup"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComboBox",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFocusTraversable",
      "comment": "Determines if the JComboBox is focus traversable. If the JComboBox is editable this returns false, otherwise it returns true.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html#isFocusTraversable(javax.swing.JComboBox)\"\u003eisFocusTraversable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComboBoxUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComboBoxUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a \n\u003ccode\u003eJComboBox\u003c/code\u003e"
        ],
        "return": [
          "true if the given \n\u003ccode\u003eJComboBox\u003c/code\u003e is traversable"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSize",
      "comment": "The minimum size is the size of the display area plus insets plus the button.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMinimumSize()\"\u003e\u003ccode\u003eJComponent.getMinimumSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.minimumLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.getPreferredSize(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getMinimumSize(javax.swing.JComponent)\"\u003egetMinimumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component whose minimum size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseline",
      "comment": "Returns the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getBaseline(javax.swing.JComponent,int,int)\"\u003egetBaseline\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e baseline is being requested for",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width to get the baseline for",
          "\u003ccode\u003eheight\u003c/code\u003e - the height to get the baseline for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if width or height is \u0026lt; 0"
        ],
        "return": [
          "baseline or a value \u0026lt; 0 indicating there is no reasonable baseline"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component$BaselineResizeBehavior",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaselineResizeBehavior",
      "comment": "Returns an enum indicating how the baseline of the component changes as the size changes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getBaselineResizeBehavior(javax.swing.JComponent)\"\u003egetBaselineResizeBehavior\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e to return baseline resize behavior for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an enum indicating how the baseline changes as the component size changes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "keyCode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isNavigationKey",
      "comment": "Returns whether or not the supplied keyCode maps to a key that is used for navigation. This is used for optimizing key input by only passing non- navigation keys to the type-ahead mechanism. Subclasses should override this if they change the navigation keys.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeyCode\u003c/code\u003e - a key code"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the supplied \n\u003ccode\u003ekeyCode\u003c/code\u003e maps to a navigation key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "selectNextPossibleValue",
      "comment": "Selects the next item in the list. It won\u0027t change the selection if the currently selected item is already the last item.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "selectPreviousPossibleValue",
      "comment": "Selects the previous item in the list. It won\u0027t change the selection if the currently selected item is already the first item.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "toggleOpenClose",
      "comment": "Hides the popup if it is showing and shows the popup if it is hidden.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "rectangleForCurrentValue",
      "comment": "Returns the area that is reserved for drawing the currently selected item.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the area that is reserved for drawing the currently selected item"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getInsets",
      "comment": "Gets the insets from the JComboBox.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the insets"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "bounds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "hasFocus",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintCurrentValue",
      "comment": "Paints the currently selected item.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ebounds\u003c/code\u003e - a bounding rectangle to render to",
          "\u003ccode\u003ehasFocus\u003c/code\u003e - is focused"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "bounds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "hasFocus",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintCurrentValueBackground",
      "comment": "Paints the background of the currently selected item.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ebounds\u003c/code\u003e - a bounding rectangle to render to",
          "\u003ccode\u003ehasFocus\u003c/code\u003e - is focused"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDefaultSize",
      "comment": "Return the default size of an empty display area of the combo box using the current renderer and font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicComboBoxUI.html#getDisplaySize()\"\u003e\u003ccode\u003egetDisplaySize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the size of an empty display area"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDisplaySize",
      "comment": "Returns the calculated size of the display area. The display area is the portion of the combo box in which the selected item is displayed. This method will use the prototype display value if it has been set. For combo boxes with a non trivial number of items, it is recommended to use a prototype display value to significantly speed up the display size calculation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComboBox.html#setPrototypeDisplayValue(E)\"\u003e\u003ccode\u003eJComboBox.setPrototypeDisplayValue(E)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the size of the display area calculated from the combo box items"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getSizeForComponent",
      "comment": "Returns the size a component would have if used as a cell renderer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - a \n\u003ccode\u003eComponent\u003c/code\u003e to check"
        ],
        "return": [
          "size of the component"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installKeyboardActions",
      "comment": "Adds keyboard actions to the JComboBox. Actions on enter and esc are already supplied. Add more actions as you need them.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallKeyboardActions",
      "comment": "Removes the focus InputMap and ActionMap.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BasicComboBoxUI.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.plaf.basic.BasicComboBoxUI$ComboBoxLayoutManager",
    "javax.swing.plaf.basic.BasicComboBoxUI$PropertyChangeHandler",
    "javax.swing.plaf.basic.BasicComboBoxUI$FocusHandler",
    "javax.swing.plaf.basic.BasicComboBoxUI$KeyHandler",
    "javax.swing.plaf.basic.BasicComboBoxUI$ListDataHandler",
    "javax.swing.plaf.basic.BasicComboBoxUI$ItemHandler"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicComboBoxUI",
  "annotations": [],
  "tagMap": {}
}