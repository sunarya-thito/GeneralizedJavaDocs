{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicTextUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.TextUI",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.text.Caret",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createCaret",
      "comment": "Creates the object to use for a caret. By default an instance of BasicCaret is created. This method can be redefined to provide something else that implements the InputPosition interface or a subclass of JCaret.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the caret object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Highlighter",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createHighlighter",
      "comment": "Creates the object to use for adding highlights. By default an instance of BasicHighlighter is created. This method can be redefined to provide something else that implements the Highlighter interface or a subclass of DefaultHighlighter.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the highlighter"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getKeymapName",
      "comment": "Fetches the name of the keymap that will be installed/used by default for this UI. This is implemented to create a name based upon the classname. The name is the name of the class with the package prefix removed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the name"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Keymap",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createKeymap",
      "comment": "Creates the keymap to use for the text component, and installs any necessary bindings into it. By default, the keymap is shared between all instances of this type of TextUI. The keymap has the name defined by the getKeymapName method. If the keymap is not found, then DEFAULT_KEYMAP from JTextComponent is used. The set of bindings used to create the keymap is fetched from the UIManager using a key formed by combining the getPropertyPrefix() method and the string .keyBindings. The type is expected to be JTextComponent.KeyBinding[].",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.html#getKeymapName()\"\u003e\u003ccode\u003egetKeymapName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eJTextComponent\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the keymap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeEvent",
            "type": "Class"
          },
          "name": "evt",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "propertyChange",
      "comment": "This method gets called when a bound property is changed on the associated JTextComponent. This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses. This is implemented to do nothing (i.e. the response to properties in JTextComponent itself are handled prior to calling this method). This implementation updates the background of the text component if the editable and/or enabled state changes.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eevt\u003c/code\u003e - the property change event"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getPropertyPrefix",
      "comment": "Gets the name used as a key to look up properties through the UIManager. This is used as a prefix to all the standard text properties.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installDefaults",
      "comment": "Initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color. The font, foreground, and background properties are only set if their current value is either null or a UIResource, other properties are set if the current value is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.html#uninstallDefaults()\"\u003e\u003ccode\u003euninstallDefaults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallDefaults",
      "comment": "Sets the component properties that have not been explicitly overridden to null. A property is considered overridden if its current value is not a UIResource.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.html#installDefaults()\"\u003e\u003ccode\u003einstallDefaults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicTextUI.html#uninstallUI(javax.swing.JComponent)\"\u003e\u003ccode\u003euninstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installListeners",
      "comment": "Installs listeners for the UI.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallListeners",
      "comment": "Uninstalls listeners for the UI.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installKeyboardActions",
      "comment": "Registers keyboard actions.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallKeyboardActions",
      "comment": "Unregisters keyboard actions.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintBackground",
      "comment": "Paints a background for the view. This will only be called if isOpaque() on the associated component is true. The default is to paint the background color of the component.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.JTextComponent",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getComponent",
      "comment": "Fetches the text component associated with this UI implementation. This will be null until the ui has been installed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the editor component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "modelChanged",
      "comment": "Flags model changes. This is called whenever the model has changed. It is implemented to rebuild the view hierarchy to represent the default root element of the associated model.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setView",
      "comment": "Sets the current root of the view hierarchy and calls invalidate(). If there were any child components, they will be removed (i.e. there are assumed to have come from components embedded in views).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the root view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintSafely",
      "comment": "Paints the interface safely with a guarantee that the model won\u0027t change from the view of this thread. This does the following things, rendering from back to front. If the component is marked as opaque, the background is painted in the current background color of the component. The highlights (if any) are painted. The view hierarchy is painted. The caret is painted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "installUI",
      "comment": "Installs the UI for a component. This does the following things. Sets the associated component to opaque if the opaque property has not already been set by the client program. This will cause the component\u0027s background color to be painted. Installs the default caret and highlighter into the associated component. These properties are only set if their current value is either null or an instance of UIResource. Attaches to the editor and model. If there is no model, a default one is created. Creates the view factory and the view hierarchy used to represent the model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.installUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#installUI(javax.swing.JComponent)\"\u003einstallUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninstallUI",
      "comment": "Deinstalls the UI for a component. This removes the listeners, uninstalls the highlighter, removes views, and nulls out the keymap.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#uninstallUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.uninstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#uninstallUI(javax.swing.JComponent)\"\u003euninstallUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "update",
      "comment": "Superclass paints background in an uncontrollable way (i.e. one might want an image tiled into the background). To prevent this from happening twice, this method is reimplemented to simply paint. NOTE: Superclass is also not thread-safe in its rendering of the background, although that is not an issue with the default rendering.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#paint(java.awt.Graphics,javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintComponent(java.awt.Graphics)\"\u003e\u003ccode\u003eJComponent.paintComponent(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#update(java.awt.Graphics,javax.swing.JComponent)\"\u003eupdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint",
          "\u003ccode\u003ec\u003c/code\u003e - the component being painted; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "paint",
      "comment": "Paints the interface. This is routed to the paintSafely method under the guarantee that the model won\u0027t change from the view of this thread while it\u0027s rendering (if the associated model is derived from AbstractDocument). This enables the model to potentially be updated asynchronously.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#update(java.awt.Graphics,javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.update(java.awt.Graphics, javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#paint(java.awt.Graphics,javax.swing.JComponent)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context",
          "\u003ccode\u003ec\u003c/code\u003e - the editor component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "Gets the preferred size for the editor component. If the component has been given a size prior to receiving this request, it will set the size of the view hierarchy to reflect the size of the component before requesting the preferred size of the view hierarchy. This allows formatted views to format to the current component size before answering the request. Other views don\u0027t care about currently formatted size and give the same answer either way.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.preferredLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor component"
        ],
        "return": [
          "the size"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSize",
      "comment": "Gets the minimum size for the editor component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMinimumSize()\"\u003e\u003ccode\u003eJComponent.getMinimumSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.minimumLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.getPreferredSize(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getMinimumSize(javax.swing.JComponent)\"\u003egetMinimumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor component"
        ],
        "return": [
          "the size"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSize",
      "comment": "Gets the maximum size for the editor component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMaximumSize()\"\u003e\u003ccode\u003eJComponent.getMaximumSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#maximumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager2.maximumLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getMaximumSize(javax.swing.JComponent)\"\u003egetMaximumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor component"
        ],
        "return": [
          "the size"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getVisibleEditorRect",
      "comment": "Gets the allocation to give the root View. Due to an unfortunate set of historical events this method is inappropriately named. The Rectangle returned has nothing to do with visibility. The component must have a non-zero positive size for this translation to be computed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the bounding box for the root view"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Converts the given location in the model to a place in the view coordinate system. The component must have a non-zero positive size for this translation to be computed.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#modelToView(javax.swing.text.JTextComponent,int)\"\u003e\u003ccode\u003eTextUI.modelToView(javax.swing.text.JTextComponent, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#modelToView(javax.swing.text.JTextComponent,int)\"\u003emodelToView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003epos\u003c/code\u003e - the local location in the model to translate \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the coordinates as a rectangle, null if the model is not painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "name": "bias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Converts the given location in the model to a place in the view coordinate system. The component must have a non-zero positive size for this translation to be computed.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#modelToView(javax.swing.text.JTextComponent,int)\"\u003e\u003ccode\u003eTextUI.modelToView(javax.swing.text.JTextComponent, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#modelToView(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)\"\u003emodelToView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003epos\u003c/code\u003e - the local location in the model to translate \u0026gt;\u003d 0",
          "\u003ccode\u003ebias\u003c/code\u003e - the bias for the position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the coordinates as a rectangle, null if the model is not painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "name": "pt",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a non-zero positive size for this translation to be computed.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#viewToModel(javax.swing.text.JTextComponent,java.awt.Point)\"\u003e\u003ccode\u003eTextUI.viewToModel(javax.swing.text.JTextComponent, java.awt.Point)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#viewToModel(javax.swing.text.JTextComponent,java.awt.Point)\"\u003eviewToModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003ept\u003c/code\u003e - the location in the view to translate. This should be in the same coordinate system as the mouse events."
        ],
        "return": [
          "the offset from the start of the document \u0026gt;\u003d 0, -1 if not painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "name": "pt",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "biasReturn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a non-zero positive size for this translation to be computed.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#viewToModel(javax.swing.text.JTextComponent,java.awt.Point)\"\u003e\u003ccode\u003eTextUI.viewToModel(javax.swing.text.JTextComponent, java.awt.Point)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#viewToModel(javax.swing.text.JTextComponent,java.awt.Point,javax.swing.text.Position.Bias%5B%5D)\"\u003eviewToModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003ept\u003c/code\u003e - the location in the view to translate. This should be in the same coordinate system as the mouse events.",
          "\u003ccode\u003ebiasReturn\u003c/code\u003e - filled in by this method to indicate whether the point given is closer to the previous or the next character in the model"
        ],
        "return": [
          "the offset from the start of the document \u0026gt;\u003d 0, -1 if the component doesn\u0027t yet have a positive size."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "biasRet",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextVisualPositionFrom",
      "comment": "Provides a way to determine the next visually represented model location that one might place a caret. Some views may not be visible, they might not be in the same order found in the model, or they just might not allow access to some of the locations in the model.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getNextVisualPositionFrom(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias%5B%5D)\"\u003egetNextVisualPositionFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert \u0026gt;\u003d 0",
          "\u003ccode\u003eb\u003c/code\u003e - the bias for the position",
          "\u003ccode\u003edirection\u003c/code\u003e - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This may be SwingConstants.WEST, SwingConstants.EAST, SwingConstants.NORTH, or SwingConstants.SOUTH",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - an array to contain the bias for the returned position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - for a bad location within a document model"
        ],
        "return": [
          "the location within the model that best represents the next location visual position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "p0",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "p1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "damageRange",
      "comment": "Causes the portion of the view responsible for the given part of the model to be repainted. Does nothing if the view is not currently painted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#damageRange(javax.swing.text.JTextComponent,int,int)\"\u003e\u003ccode\u003eTextUI.damageRange(javax.swing.text.JTextComponent, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#damageRange(javax.swing.text.JTextComponent,int,int)\"\u003edamageRange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003ep0\u003c/code\u003e - the beginning of the range \u0026gt;\u003d 0",
          "\u003ccode\u003ep1\u003c/code\u003e - the end of the range \u0026gt;\u003d p0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "p0",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "p1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "name": "p0Bias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "name": "p1Bias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "damageRange",
      "comment": "Causes the portion of the view responsible for the given part of the model to be repainted.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#damageRange(javax.swing.text.JTextComponent,int,int,javax.swing.text.Position.Bias,javax.swing.text.Position.Bias)\"\u003edamageRange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep0\u003c/code\u003e - the beginning of the range \u0026gt;\u003d 0",
          "\u003ccode\u003ep1\u003c/code\u003e - the end of the range \u0026gt;\u003d p0",
          "\u003ccode\u003et\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003ep0Bias\u003c/code\u003e - the bias of the first character position, toward the previous character or the next character",
          "\u003ccode\u003ep1Bias\u003c/code\u003e - the bias of the second character position, toward the previous character or the next character"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.EditorKit",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditorKit",
      "comment": "Fetches the EditorKit for the UI.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getEditorKit(javax.swing.text.JTextComponent)\"\u003e\u003ccode\u003eTextUI.getEditorKit(javax.swing.text.JTextComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getEditorKit(javax.swing.text.JTextComponent)\"\u003egetEditorKit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed"
        ],
        "return": [
          "the editor capabilities"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "tc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRootView",
      "comment": "Fetches a View with the allocation of the associated text component (i.e. the root of the hierarchy) that can be traversed to determine how the model is being represented spatially. Warning: The View hierarchy can be traversed from the root view, and other things can be done as well. Things done in this way cannot be protected like simple method calls through the TextUI. Therefore, proper operation in the presence of concurrency must be arranged by any logic that calls this method!",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getRootView(javax.swing.text.JTextComponent)\"\u003e\u003ccode\u003eTextUI.getRootView(javax.swing.text.JTextComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getRootView(javax.swing.text.JTextComponent)\"\u003egetRootView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etc\u003c/code\u003e - the text component for which this UI is installed"
        ],
        "return": [
          "the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "name": "pt",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Returns the string to be used as the tooltip at the passed in location. This forwards the method onto the root View.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getToolTipText(java.awt.event.MouseEvent)\"\u003e\u003ccode\u003eJTextComponent.getToolTipText(java.awt.event.MouseEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getToolTipText(float,float,java.awt.Shape)\"\u003e\u003ccode\u003eView.getToolTipText(float, float, java.awt.Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)\"\u003egetToolTipText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTextUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the text component for which this UI is installed",
          "\u003ccode\u003ept\u003c/code\u003e - a \n\u003ccode\u003ePoint\u003c/code\u003e specifying location for which to get a tooltip"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the tooltip"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "elem",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "create",
      "comment": "Creates a view for an element. If a subclass wishes to directly implement the factory producing the view(s), it should reimplement this method. By default it simply returns null indicating it is unable to represent the element.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eView\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ViewFactory.html#create(javax.swing.text.Element)\"\u003ecreate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ViewFactory.html\" title\u003d\"interface in javax.swing.text\"\u003eViewFactory\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element"
        ],
        "return": [
          "the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "elem",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "p0",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "p1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "create",
      "comment": "Creates a view for an element. If a subclass wishes to directly implement the factory producing the view(s), it should reimplement this method. By default it simply returns null indicating it is unable to represent the part of the element.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element",
          "\u003ccode\u003ep0\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003ep1\u003c/code\u003e - the ending offset \u0026gt;\u003d p0"
        ],
        "return": [
          "the view"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new UI.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.plaf.basic.BasicTextUI$BasicCaret",
    "javax.swing.plaf.basic.BasicTextUI$BasicHighlighter"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.plaf.basic.BasicTextUI",
  "comment": "\u003cp\u003e Basis of a text components look-and-feel. This provides the basic editor view and controller services that may be useful when creating a look-and-feel for an extension of \u003ccode\u003eJTextComponent\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Most state is held in the associated \u003ccode\u003eJTextComponent\u003c/code\u003e as bound properties, and the UI installs default values for the various properties. This default will install something for all of the properties. Typically, a LAF implementation will do more however. At a minimum, a LAF would generally install key bindings. \u003c/p\u003e\n\u003cp\u003e This class also provides some concurrency support if the \u003ccode\u003eDocument\u003c/code\u003e associated with the JTextComponent is a subclass of \u003ccode\u003eAbstractDocument\u003c/code\u003e. Access to the View (or View hierarchy) is serialized between any thread mutating the model and the Swing event thread (which is expected to render, do model/view coordinate translation, etc). \u003cem\u003eAny access to the root view should first acquire a read-lock on the AbstractDocument and release that lock in a finally block.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003e An important method to define is the \u003ca href\u003d\"#getPropertyPrefix()\"\u003e\u003ccode\u003egetPropertyPrefix()\u003c/code\u003e\u003c/a\u003e method which is used as the basis of the keys used to fetch defaults from the UIManager. The string should reflect the type of TextUI (eg. TextField, TextArea, etc) without the particular LAF part of the name (eg Metal, Motif, etc). \u003c/p\u003e\n\u003cp\u003e To build a view of the model, one of the following strategies can be employed. \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e One strategy is to simply redefine the ViewFactory interface in the UI. By default, this UI itself acts as the factory for View implementations. This is useful for simple factories. To do this reimplement the \u003ca href\u003d\"#create(javax.swing.text.Element)\"\u003e\u003ccode\u003ecreate(javax.swing.text.Element)\u003c/code\u003e\u003c/a\u003e method. \u003c/li\u003e\n \u003cli\u003e A common strategy for creating more complex types of documents is to have the EditorKit implementation return a factory. Since the EditorKit ties all of the pieces necessary to maintain a type of document, the factory is typically an important part of that and should be produced by the EditorKit implementation. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}