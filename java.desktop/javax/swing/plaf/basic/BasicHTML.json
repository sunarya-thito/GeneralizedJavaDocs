{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicHTML",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "propertyKey",
      "comment": "Key to use for the html renderer when stored as a client property of a JComponent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicHTML.propertyKey\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "documentBaseKey",
      "comment": "Key stored as a client property to indicate the base that relative references are resolved against. For example, lets say you keep your images in the directory resources relative to the code path, you would use the following the set the base:    jComponent.putClientProperty(documentBaseKey,\n                                xxx.class.getResource(\"resources/\"));",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicHTML.documentBaseKey\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "html"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createHTMLView",
      "comment": "Create an html renderer for the given component and string of html.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003ehtml\u003c/code\u003e - an HTML string"
        ],
        "return": [
          "an HTML renderer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "view"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getHTMLBaseline",
      "comment": "Returns the baseline for the html renderer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFontMetrics\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eview\u003c/code\u003e - the View to get the baseline for",
          "\u003ccode\u003ew\u003c/code\u003e - the width to get the baseline for",
          "\u003ccode\u003eh\u003c/code\u003e - the height to get the baseline for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if width or height is \u0026lt; 0"
        ],
        "return": [
          "baseline or a value \u0026lt; 0 indicating there is no reasonable baseline"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isHTMLString",
      "comment": "Check the given string to see if it should trigger the html rendering logic in a non-text component that supports html rendering.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a text"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given string should trigger the html rendering logic in a non-text component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "updateRenderer",
      "comment": "Stash the HTML render for the given text into the client properties of the given JComponent. If the given text is NOT HTML the property will be cleared of any renderer. This method is useful for ComponentUI implementations that are static (i.e. shared) and get their state entirely from the JComponent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003etext\u003c/code\u003e - a text"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BasicHTML.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicHTML",
  "comment": "Support for providing html views for the swing components. This translates a simple html string to a javax.swing.text.View implementation that can render the html and provide the necessary layout semantics.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}