{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicTreeUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.TreeUI",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "collapsedIcon",
      "comment": "The collapsed icon.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "expandedIcon",
      "comment": "The expanded icon.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "leftChildIndent",
      "comment": "Distance between left margin and where vertical dashes will be drawn.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rightChildIndent",
      "comment": "Distance to add to leftChildIndent to determine where cell contents will be drawn.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "totalChildIndent",
      "comment": "Total distance that will be indented. The sum of leftChildIndent and rightChildIndent.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "preferredMinSize",
      "comment": "Minimum preferred size.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "lastSelectedRow",
      "comment": "Index of the row that was last selected.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.JTree",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "tree",
      "comment": "Component that we\u0027re going to be drawing into.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeCellRenderer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "currentCellRenderer",
      "comment": "Renderer that is being used to do the actual cell drawing.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "createdRenderer",
      "comment": "Set to true if the renderer that is currently in the tree was created by this instance.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeCellEditor",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "cellEditor",
      "comment": "Editor for the tree.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "createdCellEditor",
      "comment": "Set to true if editor that is currently in the tree was created by this instance.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "stopEditingInCompleteEditing",
      "comment": "Set to false when editing and shouldSelectCell() returns true meaning the node should be selected before editing, used in completeEditing.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.CellRendererPane",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rendererPane",
      "comment": "Used to paint the TreeCellRenderer.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "preferredSize",
      "comment": "Size needed to completely display all the nodes.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "validCachedPreferredSize",
      "comment": "Is the preferredSize valid?",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.AbstractLayoutCache",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "treeState",
      "comment": "Object responsible for handling sizing and expanded issues.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          {
            "name": "java.lang.Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "drawingCache",
      "comment": "Used for minimizing the drawing of vertical lines.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "largeModel",
      "comment": "True if doing optimizations for a largeModel. Subclasses that don\u0027t support this may wish to override createLayoutCache to not return a FixedHeightLayoutCache instance.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.AbstractLayoutCache$NodeDimensions",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "nodeDimensions",
      "comment": "Reponsible for telling the TreeState the size needed for a node.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "treeModel",
      "comment": "Used to determine what to display.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreeSelectionModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "treeSelectionModel",
      "comment": "Model maintaining the selection.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "depthOffset",
      "comment": "How much the depth should be offset to properly calculate x locations. This is based on whether or not the root is visible, and if the root handles are visible.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "editingComponent",
      "comment": "When editing, this will be the Component that is doing the actual editing.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "editingPath",
      "comment": "Path that is being edited.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "editingRow",
      "comment": "Row that is being edited. Should only be referenced if editingComponent is not null.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "editorHasDifferentSize",
      "comment": "Set to true if the editor has a different size than the renderer.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createUI",
      "comment": "Constructs a new instance of BasicTreeUI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - a component"
        ],
        "return": [
          "a new instance of \n\u003ccode\u003eBasicTreeUI\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getHashColor",
      "comment": "Returns the hash color.",
      "tagMap": {
        "return": [
          "the hash color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "color"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setHashColor",
      "comment": "Sets the hash color.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolor\u003c/code\u003e - the hash color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newAmount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLeftChildIndent",
      "comment": "Sets the left child indent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAmount\u003c/code\u003e - the left child indent"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeftChildIndent",
      "comment": "Returns the left child indent.",
      "tagMap": {
        "return": [
          "the left child indent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newAmount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRightChildIndent",
      "comment": "Sets the right child indent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAmount\u003c/code\u003e - the right child indent"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRightChildIndent",
      "comment": "Returns the right child indent.",
      "tagMap": {
        "return": [
          "the right child indent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "newG"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExpandedIcon",
      "comment": "Sets the expanded icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewG\u003c/code\u003e - the expanded icon"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExpandedIcon",
      "comment": "Returns the expanded icon.",
      "tagMap": {
        "return": [
          "the expanded icon"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "newG"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCollapsedIcon",
      "comment": "Sets the collapsed icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewG\u003c/code\u003e - the collapsed icon"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCollapsedIcon",
      "comment": "Returns the collapsed icon.",
      "tagMap": {
        "return": [
          "the collapsed icon"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "largeModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setLargeModel",
      "comment": "Sets the largeModel. Called when the largeModel property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elargeModel\u003c/code\u003e - the new value of the \n\u003ccode\u003elargeModel\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isLargeModel",
      "comment": "Returns true if large model is set.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if large model is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setRowHeight",
      "comment": "Sets the row height, this is forwarded to the treeState. Called when the rowHeight property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erowHeight\u003c/code\u003e - the new value of the \n\u003ccode\u003erowHeight\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getRowHeight",
      "comment": "Returns the height of each row in the drawn tree component. If the returned value is less than or equal to 0 the height for each row is determined by the renderer.",
      "tagMap": {
        "return": [
          "the height of each row, in pixels"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeCellRenderer",
            "type": "Class"
          },
          "field": {
            "name": "tcr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setCellRenderer",
      "comment": "Sets the TreeCellRenderer to tcr. This invokes updateRenderer. Called when the cellRenderer property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etcr\u003c/code\u003e - the new value of the \n\u003ccode\u003ecellRenderer\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeCellRenderer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getCellRenderer",
      "comment": "Returns the current instance of the TreeCellRenderer that is rendering each cell.",
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeCellRenderer.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eTreeCellRenderer\u003c/code\u003e\u003c/a\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeModel",
            "type": "Class"
          },
          "field": {
            "name": "model"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setModel",
      "comment": "Sets the TreeModel.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emodel\u003c/code\u003e - the new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getModel",
      "comment": "Returns the tree model.",
      "tagMap": {
        "return": [
          "the tree model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setRootVisible",
      "comment": "Sets the root to being visible. Called when the rootVisible property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the \n\u003ccode\u003erootVisible\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isRootVisible",
      "comment": "Returns whether the root node of the drawn tree component should be displayed.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the root node of the tree is displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setShowsRootHandles",
      "comment": "Determines whether the node handles are to be displayed. Called when the showsRootHandles property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the \n\u003ccode\u003eshowsRootHandles\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getShowsRootHandles",
      "comment": "Returns true if the root handles are to be displayed.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the root handles are to be displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeCellEditor",
            "type": "Class"
          },
          "field": {
            "name": "editor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setCellEditor",
      "comment": "Sets the cell editor. Called when the cellEditor property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeditor\u003c/code\u003e - the new value of the \n\u003ccode\u003ecellEditor\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeCellEditor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getCellEditor",
      "comment": "Returns the editor used to edit entries in the drawn tree component, or null if the tree cannot be edited.",
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeCellEditor.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eTreeCellEditor\u003c/code\u003e\u003c/a\u003e instance, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setEditable",
      "comment": "Configures the receiver to allow, or not allow, editing. Called when the editable property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the \n\u003ccode\u003eeditable\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isEditable",
      "comment": "Returns whether the drawn tree component should be enabled for editing.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the tree is editable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreeSelectionModel",
            "type": "Class"
          },
          "field": {
            "name": "newLSM"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setSelectionModel",
      "comment": "Resets the selection model. The appropriate listener are installed on the model. Called when the selectionModel property is changed in the drawn tree component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewLSM\u003c/code\u003e - the new value of the \n\u003ccode\u003eselectionModel\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeSelectionModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getSelectionModel",
      "comment": "Returns the current instance of the TreeSelectionModel which is the model for selections.",
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/tree/TreeSelectionModel.html\" title\u003d\"interface in javax.swing.tree\"\u003e\u003ccode\u003eTreeSelectionModel\u003c/code\u003e\u003c/a\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathBounds",
      "comment": "Returns the Rectangle enclosing the label portion that the last item in path will be drawn into. Will return null if any component in path is currently valid.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)\"\u003egetPathBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the \n\u003ccode\u003eJTree\u003c/code\u003e for \n\u003ccode\u003epath\u003c/code\u003e",
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e identifying the node"
        ],
        "return": [
          "the \n\u003ccode\u003eRectangle\u003c/code\u003e enclosing the label portion that the last item in path will be drawn into, \n\u003ccode\u003enull\u003c/code\u003e if any component in path is currently valid."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathForRow",
      "comment": "Returns the path for passed in row. If row is not visible null is returned.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#getPathForRow(javax.swing.JTree,int)\"\u003egetPathForRow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - a \n\u003ccode\u003eJTree\u003c/code\u003e object",
          "\u003ccode\u003erow\u003c/code\u003e - an integer specifying a row"
        ],
        "return": [
          "the \n\u003ccode\u003epath\u003c/code\u003e for \n\u003ccode\u003erow\u003c/code\u003e or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003erow\u003c/code\u003e is not visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowForPath",
      "comment": "Returns the row that the last item identified in path is visible at. Will return -1 if any of the elements in path are not currently visible.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)\"\u003egetRowForPath\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the \n\u003ccode\u003eJTree\u003c/code\u003e for \n\u003ccode\u003epath\u003c/code\u003e",
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e object to look in"
        ],
        "return": [
          "an integer specifying the row at which the last item identified is visible, -1 if any of the elements in \n\u003ccode\u003epath\u003c/code\u003e are not currently visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowCount",
      "comment": "Returns the number of rows that are being displayed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#getRowCount(javax.swing.JTree)\"\u003egetRowCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the \n\u003ccode\u003eJTree\u003c/code\u003e for which to count rows"
        ],
        "return": [
          "an integer specifying the number of row being displayed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClosestPathForLocation",
      "comment": "Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it\u0027ll always return a valid path. If you need to test if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#getClosestPathForLocation(javax.swing.JTree,int,int)\"\u003egetClosestPathForLocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - a \n\u003ccode\u003eJTree\u003c/code\u003e object",
          "\u003ccode\u003ex\u003c/code\u003e - an integer giving the number of pixels horizontally from the left edge of the display area",
          "\u003ccode\u003ey\u003c/code\u003e - an integer giving the number of pixels vertically from the top of the display area, minus any top margin"
        ],
        "return": [
          "the \n\u003ccode\u003eTreePath\u003c/code\u003e node closest to \n\u003ccode\u003ex,y\u003c/code\u003e or \n\u003ccode\u003enull\u003c/code\u003e if there is nothing currently visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEditing",
      "comment": "Returns true if the tree is being edited. The item that is being edited can be returned by getEditingPath().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#isEditing(javax.swing.JTree)\"\u003eisEditing\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - a \n\u003ccode\u003eJTree\u003c/code\u003e object"
        ],
        "return": [
          "true if \n\u003ccode\u003etree\u003c/code\u003e is being edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stopEditing",
      "comment": "Stops the current editing session. This has no effect if the tree isn\u0027t being edited. Returns true if the editor allows the editing session to stop.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#stopEditing(javax.swing.JTree)\"\u003estopEditing\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - a \n\u003ccode\u003eJTree\u003c/code\u003e object"
        ],
        "return": [
          "true if the editor allows the editing session to stop"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "cancelEditing",
      "comment": "Cancels the current editing session.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#cancelEditing(javax.swing.JTree)\"\u003ecancelEditing\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - a \n\u003ccode\u003eJTree\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "startEditingAtPath",
      "comment": "Selects the last item in path and tries to edit it. Editing will fail if the CellEditor won\u0027t allow it for the selected item.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)\"\u003estartEditingAtPath\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the \n\u003ccode\u003eJTree\u003c/code\u003e being edited",
          "\u003ccode\u003epath\u003c/code\u003e - the \n\u003ccode\u003eTreePath\u003c/code\u003e to be edited"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree",
            "type": "Class"
          },
          "field": {
            "name": "tree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditingPath",
      "comment": "Returns the path to the element that is being edited.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html#getEditingPath(javax.swing.JTree)\"\u003egetEditingPath\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TreeUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eTreeUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etree\u003c/code\u003e - the \n\u003ccode\u003eJTree\u003c/code\u003e for which to return a path"
        ],
        "return": [
          "a \n\u003ccode\u003eTreePath\u003c/code\u003e containing the path to \n\u003ccode\u003etree\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "prepareForUIInstall",
      "comment": "Invoked after the tree instance variable has been set, but before any defaults/listeners have been installed.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "completeUIInstall",
      "comment": "Invoked from installUI after all the defaults/listeners have been installed.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installDefaults",
      "comment": "Installs default properties.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installListeners",
      "comment": "Registers listeners.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installKeyboardActions",
      "comment": "Registers keyboard actions.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installComponents",
      "comment": "Intalls the subcomponents of the tree, which is the renderer pane.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.tree.AbstractLayoutCache$NodeDimensions",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createNodeDimensions",
      "comment": "Creates an instance of NodeDimensions that is able to determine the size of a given node in the tree.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003eNodeDimensions\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createPropertyChangeListener",
      "comment": "Creates a listener that is responsible that updates the UI based on how the tree changes.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.MouseListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createMouseListener",
      "comment": "Creates the listener responsible for updating the selection based on mouse events.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eMouseListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFocusListener",
      "comment": "Creates a listener that is responsible for updating the display when focus is lost/gained.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eFocusListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.KeyListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createKeyListener",
      "comment": "Creates the listener responsible for getting key events from the tree.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eKeyListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createSelectionModelPropertyChangeListener",
      "comment": "Creates the listener responsible for getting property change events from the selection model.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeSelectionListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTreeSelectionListener",
      "comment": "Creates the listener that updates the display based on selection change methods.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eTreeSelectionListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.CellEditorListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createCellEditorListener",
      "comment": "Creates a listener to handle events from the current editor.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eCellEditorListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ComponentListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createComponentListener",
      "comment": "Creates and returns a new ComponentHandler. This is used for the large model to mark the validCachedPreferredSize as invalid when the component moves.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eComponentListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeExpansionListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTreeExpansionListener",
      "comment": "Creates and returns the object responsible for updating the treestate when nodes expanded state changes.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eTreeExpansionListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.AbstractLayoutCache",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLayoutCache",
      "comment": "Creates the object responsible for managing what is expanded, as well as the size of nodes.",
      "tagMap": {
        "return": [
          "the object responsible for managing what is expanded"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.CellRendererPane",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createCellRendererPane",
      "comment": "Returns the renderer pane that renderer components are placed in.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eCellRendererPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeCellEditor",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultCellEditor",
      "comment": "Creates a default cell editor.",
      "tagMap": {
        "return": [
          "a default cell editor"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreeCellRenderer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultCellRenderer",
      "comment": "Returns the default cell renderer that is used to do the stamping of each node.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003eTreeCellRenderer\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.TreeModelListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTreeModelListener",
      "comment": "Returns a listener that can update the tree when the model changes.",
      "tagMap": {
        "return": [
          "an instance of the \n\u003ccode\u003eTreeModelListener\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "prepareForUIUninstall",
      "comment": "Invoked before unstallation of UI.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "completeUIUninstall",
      "comment": "Uninstalls UI.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallDefaults",
      "comment": "Uninstalls default properties.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallListeners",
      "comment": "Unregisters listeners.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallKeyboardActions",
      "comment": "Unregisters keyboard actions.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallComponents",
      "comment": "Uninstalls the renderer pane.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseline",
      "comment": "Returns the baseline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getBaseline(javax.swing.JComponent,int,int)\"\u003egetBaseline\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e baseline is being requested for",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width to get the baseline for",
          "\u003ccode\u003eheight\u003c/code\u003e - the height to get the baseline for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if width or height is \u0026lt; 0"
        ],
        "return": [
          "baseline or a value \u0026lt; 0 indicating there is no reasonable baseline"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component$BaselineResizeBehavior",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaselineResizeBehavior",
      "comment": "Returns an enum indicating how the baseline of the component changes as the size changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getBaselineResizeBehavior(javax.swing.JComponent)\"\u003egetBaselineResizeBehavior\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e to return baseline resize behavior for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an enum indicating how the baseline changes as the component size changes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree$DropLocation",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isDropLine",
      "comment": "Tells if a DropLocation should be indicated by a line between nodes. This is meant for javax.swing.DropMode.INSERT and javax.swing.DropMode.ON_OR_INSERT drop modes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - a \n\u003ccode\u003eDropLocation\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the drop location should be shown as a line"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintDropLine",
      "comment": "Paints the drop line.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - \n\u003ccode\u003eGraphics\u003c/code\u003e object to draw on"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JTree$DropLocation",
            "type": "Class"
          },
          "field": {
            "name": "loc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDropLineRect",
      "comment": "Returns a unbounding box for the drop line.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - a \n\u003ccode\u003eDropLocation\u003c/code\u003e"
        ],
        "return": [
          "bounding box for the drop line"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "clipBounds"
          }
        },
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "insets"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hasBeenExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isLeaf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintHorizontalPartOfLeg",
      "comment": "Paints the horizontal part of the leg. The receiver should NOT modify clipBounds, or insets. NOTE: parentRow can be -1 if the root is not visible.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - a graphics context",
          "\u003ccode\u003eclipBounds\u003c/code\u003e - a clipped rectangle",
          "\u003ccode\u003einsets\u003c/code\u003e - insets",
          "\u003ccode\u003ebounds\u003c/code\u003e - a bounding rectangle",
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003erow\u003c/code\u003e - a row",
          "\u003ccode\u003eisExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path is expanded",
          "\u003ccode\u003ehasBeenExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path has been expanded",
          "\u003ccode\u003eisLeaf\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path is leaf"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "clipBounds"
          }
        },
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "insets"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintVerticalPartOfLeg",
      "comment": "Paints the vertical part of the leg. The receiver should NOT modify clipBounds, insets.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - a graphics context",
          "\u003ccode\u003eclipBounds\u003c/code\u003e - a clipped rectangle",
          "\u003ccode\u003einsets\u003c/code\u003e - insets",
          "\u003ccode\u003epath\u003c/code\u003e - a tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "clipBounds"
          }
        },
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "insets"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hasBeenExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isLeaf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintExpandControl",
      "comment": "Paints the expand (toggle) part of a row. The receiver should NOT modify clipBounds, or insets.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - a graphics context",
          "\u003ccode\u003eclipBounds\u003c/code\u003e - a clipped rectangle",
          "\u003ccode\u003einsets\u003c/code\u003e - insets",
          "\u003ccode\u003ebounds\u003c/code\u003e - a bounding rectangle",
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003erow\u003c/code\u003e - a row",
          "\u003ccode\u003eisExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path is expanded",
          "\u003ccode\u003ehasBeenExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path has been expanded",
          "\u003ccode\u003eisLeaf\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the row is leaf"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "clipBounds"
          }
        },
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "insets"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        },
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hasBeenExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isLeaf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintRow",
      "comment": "Paints the renderer part of a row. The receiver should NOT modify clipBounds, or insets.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - a graphics context",
          "\u003ccode\u003eclipBounds\u003c/code\u003e - a clipped rectangle",
          "\u003ccode\u003einsets\u003c/code\u003e - insets",
          "\u003ccode\u003ebounds\u003c/code\u003e - a bounding rectangle",
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003erow\u003c/code\u003e - a row",
          "\u003ccode\u003eisExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path is expanded",
          "\u003ccode\u003ehasBeenExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path has been expanded",
          "\u003ccode\u003eisLeaf\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path is leaf"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hasBeenExpanded"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isLeaf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shouldPaintExpandControl",
      "comment": "Returns true if the expand (toggle) control should be drawn for the specified row.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003erow\u003c/code\u003e - a row",
          "\u003ccode\u003eisExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path is expanded",
          "\u003ccode\u003ehasBeenExpanded\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the path has been expanded",
          "\u003ccode\u003eisLeaf\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the row is leaf"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the expand (toggle) control should be drawn for the specified row"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "top"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bottom"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintVerticalLine",
      "comment": "Paints a vertical line.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - a graphics context",
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003etop\u003c/code\u003e - an Y1 coordinate",
          "\u003ccode\u003ebottom\u003c/code\u003e - an Y2 coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "right"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintHorizontalLine",
      "comment": "Paints a horizontal line.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - a graphics context",
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003eleft\u003c/code\u003e - an X1 coordinate",
          "\u003ccode\u003eright\u003c/code\u003e - an X2 coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getVerticalLegBuffer",
      "comment": "The vertical element of legs between nodes starts at the bottom of the parent node by default. This method makes the leg start below that.",
      "tagMap": {
        "return": [
          "the vertical leg buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getHorizontalLegBuffer",
      "comment": "The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default. This method makes the leg end before that.",
      "tagMap": {
        "return": [
          "the horizontal leg buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "graphics"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "drawCentered",
      "comment": "Draws the icon centered at (x,y).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003egraphics\u003c/code\u003e - a graphics context",
          "\u003ccode\u003eicon\u003c/code\u003e - an icon",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "drawDashedHorizontalLine",
      "comment": "Draws a horizontal dashed line. It is assumed x1 \u003c\u003d x2. If x1 is greater than x2, the method draws nothing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003ex1\u003c/code\u003e - an X1 coordinate",
          "\u003ccode\u003ex2\u003c/code\u003e - an X2 coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "drawDashedVerticalLine",
      "comment": "Draws a vertical dashed line. It is assumed y1 \u003c\u003d y2. If y1 is greater than y2, the method draws nothing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey1\u003c/code\u003e - an Y1 coordinate",
          "\u003ccode\u003ey2\u003c/code\u003e - an Y2 coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "depth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getRowX",
      "comment": "Returns the location, along the x-axis, to render a particular row at. The return value does not include any Insets specified on the JTree. This does not check for the validity of the row or depth, it is assumed to be correct and will not throw an Exception if the row or depth doesn\u0027t match that of the tree.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - Row to return x location for",
          "\u003ccode\u003edepth\u003c/code\u003e - Depth of the row"
        ],
        "return": [
          "amount to indent the given row."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateLayoutCacheExpandedNodes",
      "comment": "Makes all the nodes that are expanded in JTree expanded in LayoutCache. This invokes updateExpandedDescendants with the root path.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateExpandedDescendants",
      "comment": "Updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.tree.TreePath",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLastChildPath",
      "comment": "Returns a path to the last child of parent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - a tree path"
        ],
        "return": [
          "a path to the last child of \n\u003ccode\u003eparent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateDepthOffset",
      "comment": "Updates how much each depth should be offset by.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateCellEditor",
      "comment": "Updates the cellEditor based on the editability of the JTree that we\u0027re contained in. If the tree is editable but doesn\u0027t have a cellEditor, a basic one will be used.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateRenderer",
      "comment": "Messaged from the tree we\u0027re in when the renderer has changed.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "configureLayoutCache",
      "comment": "Resets the TreeState instance based on the tree we\u0027re providing the look and feel for.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateSize",
      "comment": "Marks the cached size as being invalid, and messages the tree with treeDidChange.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateCachedPreferredSize",
      "comment": "Updates the preferredSize instance variable, which is returned from getPreferredSize(). For left to right orientations, the size is determined from the current AbstractLayoutCache. For RTL orientations, the preferred size becomes the width minus the minimum x position.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "pathWasExpanded",
      "comment": "Messaged from the VisibleTreeNode after it has been expanded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "pathWasCollapsed",
      "comment": "Messaged from the VisibleTreeNode after it has collapsed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginRow"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endRow"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "ensureRowsAreVisible",
      "comment": "Ensures that the rows identified by beginRow through endRow are visible.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginRow\u003c/code\u003e - the begin row",
          "\u003ccode\u003eendRow\u003c/code\u003e - the end row"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "newSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPreferredMinSize",
      "comment": "Sets the preferred minimum size.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewSize\u003c/code\u003e - the new preferred size"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredMinSize",
      "comment": "Returns the minimum preferred size.",
      "tagMap": {
        "return": [
          "the minimum preferred size"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "Returns the preferred size to properly display the tree, this is a cover method for getPreferredSize(c, true).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.preferredLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component"
        ],
        "return": [
          "the preferred size to represent the tree in the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "checkConsistency"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "Returns the preferred size to represent the tree in c. If checkConsistency is true checkConsistency is messaged first.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a component",
          "\u003ccode\u003echeckConsistency\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e consistency is checked"
        ],
        "return": [
          "the preferred size to represent the tree in the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSize",
      "comment": "Returns the minimum size for this component. Which will be the min preferred size or 0, 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMinimumSize()\"\u003e\u003ccode\u003eJComponent.getMinimumSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.minimumLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.getPreferredSize(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getMinimumSize(javax.swing.JComponent)\"\u003egetMinimumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component whose minimum size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSize",
      "comment": "Returns the maximum size for this component, which will be the preferred size if the instance is currently in a JTree, or 0, 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getMaximumSize()\"\u003e\u003ccode\u003eJComponent.getMaximumSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#maximumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager2.maximumLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getMaximumSize(javax.swing.JComponent)\"\u003egetMaximumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component whose maximum size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "completeEditing",
      "comment": "Messages to stop the editing session. If the UI the receiver is providing the look and feel for returns true from getInvokesStopCellEditing, stopCellEditing will invoked on the current editor. Then completeEditing will be messaged with false, true, false to cancel any lingering editing.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "messageStop"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "messageCancel"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "messageTree"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "completeEditing",
      "comment": "Stops the editing session. If messageStop is true the editor is messaged with stopEditing, if messageCancel is true the editor is messaged with cancelEditing. If messageTree is true the treeModel is messaged with valueForPathChanged.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emessageStop\u003c/code\u003e - message to stop editing",
          "\u003ccode\u003emessageCancel\u003c/code\u003e - message to cancel editing",
          "\u003ccode\u003emessageTree\u003c/code\u003e - message to tree"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "startEditing",
      "comment": "Will start editing for node if there is a cellEditor and shouldSelectCell returns true. This assumes that path is valid and visible.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003eevent\u003c/code\u003e - a mouse event"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the editing is successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mouseX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mouseY"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "checkForClickInExpandControl",
      "comment": "If the mouseX and mouseY are in the expand/collapse region of the row, this will toggle the row.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003emouseX\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003emouseY\u003c/code\u003e - an Y coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mouseX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mouseY"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isLocationInExpandControl",
      "comment": "Returns true if mouseX and mouseY fall in the area of row that is used to expand/collapse the node and the node at row does not represent a leaf.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003emouseX\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003emouseY\u003c/code\u003e - an Y coordinate"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the mouse cursor fall in the area of row that is used to expand/collapse the node and the node is not a leaf."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mouseX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mouseY"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleExpandControlClick",
      "comment": "Messaged when the user clicks the particular row, this invokes toggleExpandState.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path",
          "\u003ccode\u003emouseX\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003emouseY\u003c/code\u003e - an Y coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "toggleExpandState",
      "comment": "Expands path if it is not expanded, or collapses row if it is expanded. If expanding a path and JTree scrolls on expand, ensureRowsAreVisible is invoked to scroll as many of the children to visible as possible (tries to scroll to last visible descendant of path).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - a tree path"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isToggleSelectionEvent",
      "comment": "Returning true signifies a mouse event on the node should toggle the selection of only the row under mouse.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - a mouse event"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a mouse event on the node should toggle the selection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isMultiSelectEvent",
      "comment": "Returning true signifies a mouse event on the node should select from the anchor point.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - a mouse event"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a mouse event on the node should select from the anchor point"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isToggleEvent",
      "comment": "Returning true indicates the row under the mouse should be toggled based on the event. This is invoked after checkForClickInExpandControl, implying the location is not in the expand (toggle) control.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - a mouse event"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the row under the mouse should be toggled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.tree.TreePath",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "selectPathForEvent",
      "comment": "Messaged to update the selection based on a MouseEvent over a particular row. If the event is a toggle selection event, the row is either selected, or deselected. If the event identifies a multi selection event, the selection is updated from the anchor point. Otherwise the row is selected, and if the event specified a toggle event the row is expanded/collapsed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the selected path",
          "\u003ccode\u003eevent\u003c/code\u003e - the mouse event"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "row"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isLeaf",
      "comment": "Returns true if the node at row is a leaf.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - a row"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the node at \n\u003ccode\u003erow\u003c/code\u003e is a leaf"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateLeadSelectionRow",
      "comment": "Updates the lead row of the selection.",
      "tagMap": {
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLeadSelectionRow",
      "comment": "Returns the lead row of the selection.",
      "tagMap": {
        "return": [
          "selection lead row"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new instance of BasicTreeUI.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.plaf.basic.BasicTreeUI$CellEditorHandler",
    "javax.swing.plaf.basic.BasicTreeUI$PropertyChangeHandler",
    "javax.swing.plaf.basic.BasicTreeUI$SelectionModelPropertyChangeHandler",
    "javax.swing.plaf.basic.BasicTreeUI$TreePageAction",
    "javax.swing.plaf.basic.BasicTreeUI$TreeModelHandler",
    "javax.swing.plaf.basic.BasicTreeUI$TreeSelectionHandler",
    "javax.swing.plaf.basic.BasicTreeUI$TreeToggleAction",
    "javax.swing.plaf.basic.BasicTreeUI$TreeCancelEditingAction",
    "javax.swing.plaf.basic.BasicTreeUI$NodeDimensionsHandler",
    "javax.swing.plaf.basic.BasicTreeUI$KeyHandler",
    "javax.swing.plaf.basic.BasicTreeUI$TreeExpansionHandler",
    "javax.swing.plaf.basic.BasicTreeUI$FocusHandler",
    "javax.swing.plaf.basic.BasicTreeUI$MouseHandler",
    "javax.swing.plaf.basic.BasicTreeUI$TreeTraverseAction",
    "javax.swing.plaf.basic.BasicTreeUI$TreeIncrementAction",
    "javax.swing.plaf.basic.BasicTreeUI$MouseInputHandler",
    "javax.swing.plaf.basic.BasicTreeUI$ComponentHandler",
    "javax.swing.plaf.basic.BasicTreeUI$TreeHomeAction"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicTreeUI",
  "comment": "The basic L\u0026amp;F for a hierarchical data structure.",
  "tagMap": {}
}