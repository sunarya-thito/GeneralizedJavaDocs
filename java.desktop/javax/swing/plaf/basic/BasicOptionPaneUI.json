{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicOptionPaneUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.OptionPaneUI",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MinimumWidth",
      "comment": "The mininum width of JOptionPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicOptionPaneUI.MinimumWidth\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MinimumHeight",
      "comment": "The mininum height of JOptionPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicOptionPaneUI.MinimumHeight\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.JOptionPane",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "optionPane",
      "comment": "JOptionPane that the receiver is providing the look and feel for.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "minimumSize",
      "comment": "The size of JOptionPane.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.JComponent",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "inputComponent",
      "comment": "JComponent provide for input if optionPane.getWantsInput() returns true.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "initialFocusComponent",
      "comment": "Component to receive focus when messaged with selectInitialValue.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "hasCustomComponents",
      "comment": "This is set to true in validateComponent if a Component is contained in either the message or the buttons.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "propertyChangeListener",
      "comment": "The instance of PropertyChangeListener.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createUI",
      "comment": "Creates a new BasicOptionPaneUI instance.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the component"
        ],
        "return": [
          "a new \n\u003ccode\u003eBasicOptionPaneUI\u003c/code\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "installUI",
      "comment": "Installs the receiver as the L\u0026F for the passed in JOptionPane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#uninstallUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.uninstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setUI(javax.swing.plaf.ComponentUI)\"\u003e\u003ccode\u003eJComponent.setUI(javax.swing.plaf.ComponentUI)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#installUI(javax.swing.JComponent)\"\u003einstallUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component where this UI delegate is being installed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninstallUI",
      "comment": "Removes the receiver from the L\u0026F controller of the passed in split pane.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eComponentUI.installUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#uninstallUI(javax.swing.JComponent)\"\u003euninstallUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component from which this UI delegate is being removed; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installDefaults",
      "comment": "Installs default properties.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallDefaults",
      "comment": "Uninstalls default properties.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installComponents",
      "comment": "Registers components.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallComponents",
      "comment": "Unregisters components.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.LayoutManager",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLayoutManager",
      "comment": "Returns a layout manager.",
      "tagMap": {
        "return": [
          "a layout manager"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installListeners",
      "comment": "Registers listeners.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallListeners",
      "comment": "Unregisters listeners.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createPropertyChangeListener",
      "comment": "Returns an instance of PropertyChangeListener.",
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installKeyboardActions",
      "comment": "Registers keyboard actions.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallKeyboardActions",
      "comment": "Unregisters keyboard actions.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumOptionPaneSize",
      "comment": "Returns the minimum size the option pane should be. Primarily provided for subclassers wishing to offer a different minimum size.",
      "tagMap": {
        "return": [
          "the minimum size of the option pane"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "If c is the JOptionPane the receiver is contained in, the preferred size that is returned is the maximum of the preferred size of the LayoutManager for the JOptionPane, and getMinimumOptionPaneSize.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.preferredLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component whose preferred size is being queried; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object containing given component\u0027s preferred size appropriate for the look and feel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createMessageArea",
      "comment": "Messaged from installComponents to create a Container containing the body of the message. The icon is the created by calling addIcon.",
      "tagMap": {
        "return": [
          "a instance of \n\u003ccode\u003eContainer\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "container"
          }
        },
        {
          "type": {
            "name": "java.awt.GridBagConstraints",
            "type": "Class"
          },
          "field": {
            "name": "cons"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "msg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxll"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "internallyCreated"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "addMessageComponents",
      "comment": "Creates the appropriate object to represent msg and places it into container. If msg is an instance of Component, it is added directly; if it is an Icon, a JLabel is created to represent it; otherwise, a JLabel is created for the string. If msg is an Object[], this method will be recursively invoked for the children. internallyCreated is true if msg is an instance of Component and was created internally by this method (this is used to correctly set hasCustomComponents only if internallyCreated is false).",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtainer\u003c/code\u003e - a container",
          "\u003ccode\u003econs\u003c/code\u003e - an instance of \n\u003ccode\u003eGridBagConstraints\u003c/code\u003e",
          "\u003ccode\u003emsg\u003c/code\u003e - a message",
          "\u003ccode\u003emaxll\u003c/code\u003e - a maximum length",
          "\u003ccode\u003einternallyCreated\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the component was internally created"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getMessage",
      "comment": "Returns the message to display from the JOptionPane the receiver is providing the look and feel for.",
      "tagMap": {
        "return": [
          "the message to display"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "top"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "addIcon",
      "comment": "Creates and adds a JLabel representing the icon returned from getIcon to top. This is messaged from createMessageArea.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etop\u003c/code\u003e - a container"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getIcon",
      "comment": "Returns the icon from the JOptionPane the receiver is providing the look and feel for, or the default icon as returned from getDefaultIcon.",
      "tagMap": {
        "return": [
          "the icon"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "messageType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getIconForType",
      "comment": "Returns the icon to use for the passed in type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emessageType\u003c/code\u003e - a type of message"
        ],
        "return": [
          "the icon to use for the passed in type"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getMaxCharactersPerLineCount",
      "comment": "Returns the maximum number of characters to place on a line.",
      "tagMap": {
        "return": [
          "the maximum number of characters to place on a line"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxll"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "burstStringInto",
      "comment": "Recursively creates new JLabel instances to represent d. Each JLabel instance is added to c.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a container",
          "\u003ccode\u003ed\u003c/code\u003e - a text",
          "\u003ccode\u003emaxll\u003c/code\u003e - a maximum length of a text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createSeparator",
      "comment": "Returns a separator.",
      "tagMap": {
        "return": [
          "a separator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createButtonArea",
      "comment": "Creates and returns a Container containing the buttons. The buttons are created by calling getButtons.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eContainer\u003c/code\u003e containing the buttons"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "container"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "buttons"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "addButtonComponents",
      "comment": "Creates the appropriate object to represent each of the objects in buttons and adds it to container. This differs from addMessageComponents in that it will recurse on buttons and that if button is not a Component it will create an instance of JButton.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtainer\u003c/code\u003e - a container",
          "\u003ccode\u003ebuttons\u003c/code\u003e - an array of buttons",
          "\u003ccode\u003einitialIndex\u003c/code\u003e - an initial index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ActionListener",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "buttonIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createButtonActionListener",
      "comment": "Constructs a new instance of a ButtonActionListener.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuttonIndex\u003c/code\u003e - an index of the button"
        ],
        "return": [
          "a new instance of a \n\u003ccode\u003eButtonActionListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getButtons",
      "comment": "Returns the buttons to display from the JOptionPane the receiver is providing the look and feel for. If the JOptionPane has options set, they will be provided, otherwise if the optionType is YES_NO_OPTION, yesNoOptions is returned, if the type is YES_NO_CANCEL_OPTION yesNoCancelOptions is returned, otherwise defaultButtons are returned.",
      "tagMap": {
        "return": [
          "the buttons to display from the JOptionPane"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getSizeButtonsToSameWidth",
      "comment": "Returns true, basic L\u0026F wants all the buttons to have the same width.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if all the buttons should have the same width"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getInitialValueIndex",
      "comment": "Returns the initial index into the buttons to select. The index is calculated from the initial value from the JOptionPane and options of the JOptionPane or 0.",
      "tagMap": {
        "return": [
          "the initial index into the buttons to select"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "resetInputValue",
      "comment": "Sets the input value in the option pane the receiver is providing the look and feel for based on the value in the inputComponent.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JOptionPane",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "selectInitialValue",
      "comment": "If inputComponent is non-null, the focus is requested on that, otherwise request focus on the default value",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/OptionPaneUI.html#selectInitialValue(javax.swing.JOptionPane)\"\u003eselectInitialValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/OptionPaneUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eOptionPaneUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - a \n\u003ccode\u003eJOptionPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JOptionPane",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsCustomComponents",
      "comment": "Returns true if in the last call to validateComponent the message or buttons contained a subclass of Component.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/OptionPaneUI.html#containsCustomComponents(javax.swing.JOptionPane)\"\u003econtainsCustomComponents\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/OptionPaneUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eOptionPaneUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - a \n\u003ccode\u003eJOptionPane\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given \n\u003ccode\u003eJOptionPane\u003c/code\u003e contains user created \n\u003ccode\u003eComponent\u003c/code\u003es"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BasicOptionPaneUI.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.plaf.basic.BasicOptionPaneUI$PropertyChangeHandler",
    "javax.swing.plaf.basic.BasicOptionPaneUI$ButtonAreaLayout",
    "javax.swing.plaf.basic.BasicOptionPaneUI$ButtonActionListener"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicOptionPaneUI",
  "comment": "Provides the basic look and feel for a \n\u003ccode\u003eJOptionPane\u003c/code\u003e. \n\u003ccode\u003eBasicMessagePaneUI\u003c/code\u003e provides a means to place an icon, message and buttons into a \n\u003ccode\u003eContainer\u003c/code\u003e. Generally, the layout will look like: \n\u003cpre\u003e        ------------------\n        | i | message    |\n        | c | message    |\n        | o | message    |\n        | n | message    |\n        ------------------\n        |     buttons    |\n        |________________|\n \u003c/pre\u003e icon is an instance of \n\u003ccode\u003eIcon\u003c/code\u003e that is wrapped inside a \n\u003ccode\u003eJLabel\u003c/code\u003e. The message is an opaque object and is tested for the following: if the message is a \n\u003ccode\u003eComponent\u003c/code\u003e it is added to the \n\u003ccode\u003eContainer\u003c/code\u003e, if it is an \n\u003ccode\u003eIcon\u003c/code\u003e it is wrapped inside a \n\u003ccode\u003eJLabel\u003c/code\u003e and added to the \n\u003ccode\u003eContainer\u003c/code\u003e otherwise it is wrapped inside a \n\u003ccode\u003eJLabel\u003c/code\u003e. \n\u003cp\u003e The above layout is used when the option pane\u0027s \u003ccode\u003eComponentOrientation\u003c/code\u003e property is horizontal, left-to-right. The layout will be adjusted appropriately for other orientations. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eContainer\u003c/code\u003e, message, icon, and buttons are all determined from abstract methods.\u003c/p\u003e",
  "tagMap": {}
}