{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicListUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.ListUI",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.JList",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "list",
      "comment": "The instance of JList.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.CellRendererPane",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "rendererPane",
      "comment": "The instance of CellRendererPane.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "focusListener",
      "comment": "FocusListener that attached to JList.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.MouseInputListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "mouseInputListener",
      "comment": "MouseInputListener that attached to JList.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.ListSelectionListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listSelectionListener",
      "comment": "ListSelectionListener that attached to JList.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.ListDataListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listDataListener",
      "comment": "ListDataListener that attached to JList.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "propertyChangeListener",
      "comment": "PropertyChangeListener that attached to JList.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cellHeights",
      "comment": "The array of cells\u0027 height",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cellHeight",
      "comment": "The height of cell.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "cellWidth",
      "comment": "The width of cell.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "updateLayoutStateNeeded",
      "comment": "The value represents changes to JList model.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "modelChanged",
      "comment": "The bit relates to model changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.modelChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "selectionModelChanged",
      "comment": "The bit relates to selection model changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.selectionModelChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "fontChanged",
      "comment": "The bit relates to font changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.fontChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "fixedCellWidthChanged",
      "comment": "The bit relates to fixed cell width changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.fixedCellWidthChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "fixedCellHeightChanged",
      "comment": "The bit relates to fixed cell height changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.fixedCellHeightChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "prototypeCellValueChanged",
      "comment": "The bit relates to prototype cell value changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.prototypeCellValueChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "cellRendererChanged",
      "comment": "The bit relates to cell renderer changed property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.plaf.basic.BasicListUI.cellRendererChanged\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintCell",
      "comment": "Paint one List cell: compute the relevant state, get the \"rubber stamp\" cell renderer component, and then use the CellRendererPane to paint it. Subclasses may want to override this method rather than paint().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#paint(java.awt.Graphics,javax.swing.JComponent)\"\u003e\u003ccode\u003epaint(java.awt.Graphics, javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003erow\u003c/code\u003e - a row",
          "\u003ccode\u003erowBounds\u003c/code\u003e - a bounding rectangle to render to",
          "\u003ccode\u003ecellRenderer\u003c/code\u003e - a list of \n\u003ccode\u003eListCellRenderer\u003c/code\u003e",
          "\u003ccode\u003edataModel\u003c/code\u003e - a list model",
          "\u003ccode\u003eselModel\u003c/code\u003e - a selection model",
          "\u003ccode\u003eleadIndex\u003c/code\u003e - a lead index"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Paint the rows that intersect the Graphics objects clipRect. This method calls paintCell as necessary. Subclasses may want to override these methods.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#paintCell(java.awt.Graphics,int,java.awt.Rectangle,javax.swing.ListCellRenderer,javax.swing.ListModel,javax.swing.ListSelectionModel,int)\"\u003e\u003ccode\u003epaintCell(java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer\u0026lt;java.lang.Object\u0026gt;, javax.swing.ListModel\u0026lt;java.lang.Object\u0026gt;, javax.swing.ListSelectionModel, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#paint(java.awt.Graphics,javax.swing.JComponent)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint",
          "\u003ccode\u003ec\u003c/code\u003e - the component being painted; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseline",
      "comment": "Returns the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getBaseline(javax.swing.JComponent,int,int)\"\u003egetBaseline\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e baseline is being requested for",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width to get the baseline for",
          "\u003ccode\u003eheight\u003c/code\u003e - the height to get the baseline for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if width or height is \u0026lt; 0"
        ],
        "return": [
          "baseline or a value \u0026lt; 0 indicating there is no reasonable baseline"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component$BaselineResizeBehavior",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaselineResizeBehavior",
      "comment": "Returns an enum indicating how the baseline of the component changes as the size changes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getBaseline(int,int)\"\u003e\u003ccode\u003eJComponent.getBaseline(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getBaselineResizeBehavior(javax.swing.JComponent)\"\u003egetBaselineResizeBehavior\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - \n\u003ccode\u003eJComponent\u003c/code\u003e to return baseline resize behavior for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an enum indicating how the baseline changes as the component size changes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "The preferredSize of the list depends upon the layout orientation. Describes the preferred size for each layout orientation Layout Orientation Preferred Size JList.VERTICAL The preferredSize of the list is total height of the rows and the maximum width of the cells. If JList.fixedCellHeight is specified then the total height of the rows is just (cellVerticalMargins + fixedCellHeight) * model.getSize() where rowVerticalMargins is the space we allocate for drawing the yellow focus outline. Similarly if fixedCellWidth is specified then we just use that. JList.VERTICAL_WRAP If the visible row count is greater than zero, the preferredHeight is the maximum cell height * visibleRowCount. If the visible row count is \u003c\u003d 0, the preferred height is either the current height of the list, or the maximum cell height, whichever is bigger. The preferred width is than the maximum cell width * number of columns needed. Where the number of columns needs is list.height / max cell height. Max cell height is either the fixed cell height, or is determined by iterating through all the cells to find the maximum height from the ListCellRenderer. JList.HORIZONTAL_WRAP If the visible row count is greater than zero, the preferredHeight is the maximum cell height * adjustedRowCount. Where visibleRowCount is used to determine the number of columns. Because this lays out horizontally the number of rows is then determined from the column count. For example, lets say you have a model with 10 items and the visible row count is 8. The number of columns needed to display this is 2, but you no longer need 8 rows to display this, you only need 5, thus the adjustedRowCount is 5. If the visible row count is \u003c\u003d 0, the preferred height is dictated by the number of columns, which will be as many as can fit in the width of the JList (width / max cell width), with at least one column. The preferred height then becomes the model size / number of columns * maximum cell height. Max cell height is either the fixed cell height, or is determined by iterating through all the cells to find the maximum height from the ListCellRenderer. The above specifies the raw preferred width and height. The resulting preferred width is the above width + insets.left + insets.right and the resulting preferred height is the above height + insets.top + insets.bottom. Where the Insets are determined from list.getInsets().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eLayoutManager.preferredLayoutSize(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#getPreferredSize(javax.swing.JComponent)\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The JList component."
        ],
        "return": [
          "The total size of the list."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "selectPreviousIndex",
      "comment": "Selected the previous row and force it to be visible.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#ensureIndexIsVisible(int)\"\u003e\u003ccode\u003eJList.ensureIndexIsVisible(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "selectNextIndex",
      "comment": "Selected the previous row and force it to be visible.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#ensureIndexIsVisible(int)\"\u003e\u003ccode\u003eJList.ensureIndexIsVisible(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installKeyboardActions",
      "comment": "Registers the keyboard bindings on the JList that the BasicListUI is associated with. This method is called at installUI() time.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallKeyboardActions",
      "comment": "Unregisters keyboard actions installed from installKeyboardActions. This method is called at uninstallUI() time - subclassess should ensure that all of the keyboard actions registered at installUI time are removed here.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installListeners",
      "comment": "Creates and installs the listeners for the JList, its model, and its selectionModel. This method is called at installUI() time.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallListeners()\"\u003e\u003ccode\u003euninstallListeners()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallListeners",
      "comment": "Removes the listeners from the JList, its model, and its selectionModel. All of the listener fields, are reset to null here. This method is called at uninstallUI() time, it should be kept in sync with installListeners.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallUI(javax.swing.JComponent)\"\u003e\u003ccode\u003euninstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installListeners()\"\u003e\u003ccode\u003einstallListeners()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "installDefaults",
      "comment": "Initializes list properties such as font, foreground, and background, and adds the CellRendererPane. The font, foreground, and background properties are only set if their current value is either null or a UIResource, other properties are set if the current value is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallDefaults()\"\u003e\u003ccode\u003euninstallDefaults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/CellRendererPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eCellRendererPane\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "uninstallDefaults",
      "comment": "Sets the list properties that have not been explicitly overridden to null. A property is considered overridden if its current value is not a UIResource.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installDefaults()\"\u003e\u003ccode\u003einstallDefaults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallUI(javax.swing.JComponent)\"\u003e\u003ccode\u003euninstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/CellRendererPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eCellRendererPane\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "installUI",
      "comment": "Initializes this.list by calling installDefaults(), installListeners(), and installKeyboardActions() in order.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installDefaults()\"\u003e\u003ccode\u003einstallDefaults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installListeners()\"\u003e\u003ccode\u003einstallListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installKeyboardActions()\"\u003e\u003ccode\u003einstallKeyboardActions()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#installUI(javax.swing.JComponent)\"\u003einstallUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component where this UI delegate is being installed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninstallUI",
      "comment": "Uninitializes this.list by calling uninstallListeners(), uninstallKeyboardActions(), and uninstallDefaults() in order. Sets this.list to null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallListeners()\"\u003e\u003ccode\u003euninstallListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallKeyboardActions()\"\u003e\u003ccode\u003euninstallKeyboardActions()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#uninstallDefaults()\"\u003e\u003ccode\u003euninstallDefaults()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html#uninstallUI(javax.swing.JComponent)\"\u003euninstallUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eComponentUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component from which this UI delegate is being removed; this argument is often ignored, but might be used if the UI object is stateless and shared by multiple components"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createUI",
      "comment": "Returns a new instance of BasicListUI. BasicListUI delegates are allocated one per JList.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - a component"
        ],
        "return": [
          "a new \n\u003ccode\u003eListUI\u003c/code\u003e implementation for the Windows look and feel."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "locationToIndex",
      "comment": "Returns the cell index in the specified JList closest to the given location in the list\u0027s coordinate system. To determine if the cell actually contains the specified location, compare the point against the cell\u0027s bounds, as provided by getCellBounds. This method returns -1 if the list\u0027s model is empty.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ListUI.html#locationToIndex(javax.swing.JList,java.awt.Point)\"\u003elocationToIndex\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ListUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eListUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list",
          "\u003ccode\u003elocation\u003c/code\u003e - the coordinates of the point"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocation\u003c/code\u003e is null"
        ],
        "return": [
          "the cell index closest to the given location, or \n\u003ccode\u003e-1\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexToLocation",
      "comment": "Returns the origin in the given JList, of the specified item, in the list\u0027s coordinate system. Returns null if the index isn\u0027t valid.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ListUI.html#indexToLocation(javax.swing.JList,int)\"\u003eindexToLocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ListUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eListUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list",
          "\u003ccode\u003eindex\u003c/code\u003e - the cell index"
        ],
        "return": [
          "the origin of the cell, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCellBounds",
      "comment": "Returns the bounding rectangle, in the given list\u0027s coordinate system, for the range of cells specified by the two indices. The indices can be supplied in any order. If the smaller index is outside the list\u0027s range of cells, this method returns null. If the smaller index is valid, but the larger index is outside the list\u0027s range, the bounds of just the first index is returned. Otherwise, the bounds of the valid range is returned.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ListUI.html#getCellBounds(javax.swing.JList,int,int)\"\u003egetCellBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ListUI.html\" title\u003d\"class in javax.swing.plaf\"\u003eListUI\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list",
          "\u003ccode\u003eindex1\u003c/code\u003e - the first index in the range",
          "\u003ccode\u003eindex2\u003c/code\u003e - the second index in the range"
        ],
        "return": [
          "the bounding rectangle for the range of cells, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getRowHeight",
      "comment": "Returns the height of the specified row based on the current layout.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#convertYToRow(int)\"\u003e\u003ccode\u003econvertYToRow(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#convertRowToY(int)\"\u003e\u003ccode\u003econvertRowToY(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#updateLayoutState()\"\u003e\u003ccode\u003eupdateLayoutState()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - a row"
        ],
        "return": [
          "the specified row height or -1 if row isn\u0027t valid"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "convertYToRow",
      "comment": "Convert the JList relative coordinate to the row that contains it, based on the current layout. If y0 doesn\u0027t fall within any row, return -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#getRowHeight(int)\"\u003e\u003ccode\u003egetRowHeight(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#updateLayoutState()\"\u003e\u003ccode\u003eupdateLayoutState()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ey0\u003c/code\u003e - a relative Y coordinate"
        ],
        "return": [
          "the row that contains y0, or -1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "convertRowToY",
      "comment": "Return the JList relative Y coordinate of the origin of the specified row or -1 if row isn\u0027t valid.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#getRowHeight(int)\"\u003e\u003ccode\u003egetRowHeight(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#updateLayoutState()\"\u003e\u003ccode\u003eupdateLayoutState()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erow\u003c/code\u003e - a row"
        ],
        "return": [
          "the Y coordinate of the origin of row, or -1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "maybeUpdateLayoutState",
      "comment": "If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset updateLayoutStateNeeded. This method should be called by methods before doing any computation based on the geometry of the list. For example it\u0027s the first call in paint() and getPreferredSize().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#updateLayoutState()\"\u003e\u003ccode\u003eupdateLayoutState()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateLayoutState",
      "comment": "Recompute the value of cellHeight or cellHeights based and cellWidth, based on the current font and the current values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#maybeUpdateLayoutState()\"\u003e\u003ccode\u003emaybeUpdateLayoutState()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.MouseInputListener",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createMouseInputListener",
      "comment": "Creates a delegate that implements MouseInputListener. The delegate is added to the corresponding java.awt.Component listener lists at installUI() time. Subclasses can override this method to return a custom MouseInputListener, e.g.  class MyListUI extends BasicListUI {\n    protected MouseInputListener createMouseInputListener() {\n        return new MyMouseInputHandler();\n    }\n    public class MyMouseInputHandler extends MouseInputHandler {\n        public void mouseMoved(MouseEvent e) {\n            // do some extra work when the mouse moves\n            super.mouseMoved(e);\n        }\n    }\n }",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.MouseInputHandler.html\" title\u003d\"class in javax.swing.plaf.basic\"\u003e\u003ccode\u003eBasicListUI.MouseInputHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eMouseInputListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.FocusListener",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createFocusListener",
      "comment": "Returns an instance of FocusListener.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an instance of \n\u003ccode\u003eFocusListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ListSelectionListener",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createListSelectionListener",
      "comment": "Creates an instance of ListSelectionHandler that\u0027s added to the JLists by selectionModel as needed. Subclasses can override this method to return a custom ListSelectionListener, e.g.  class MyListUI extends BasicListUI {\n    protected ListSelectionListener createListSelectionListener() {\n        return new MySelectionListener();\n    }\n    public class MySelectionListener extends ListSelectionHandler {\n        public void valueChanged(ListSelectionEvent e) {\n            // do some extra work when the selection changes\n            super.valueChange(e);\n        }\n    }\n }",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.ListSelectionHandler.html\" title\u003d\"class in javax.swing.plaf.basic\"\u003e\u003ccode\u003eBasicListUI.ListSelectionHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eListSelectionHandler\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ListDataListener",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createListDataListener",
      "comment": "Creates an instance of ListDataListener that\u0027s added to the JLists by model as needed. Subclasses can override this method to return a custom ListDataListener, e.g.  class MyListUI extends BasicListUI {\n    protected ListDataListener createListDataListener() {\n        return new MyListDataListener();\n    }\n    public class MyListDataListener extends ListDataHandler {\n        public void contentsChanged(ListDataEvent e) {\n            // do some extra work when the models contents change\n            super.contentsChange(e);\n        }\n    }\n }",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ListDataListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eListDataListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html#getModel()\"\u003e\u003ccode\u003eJList.getModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eListDataListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createPropertyChangeListener",
      "comment": "Creates an instance of PropertyChangeHandler that\u0027s added to the JList by installUI(). Subclasses can override this method to return a custom PropertyChangeListener, e.g.  class MyListUI extends BasicListUI {\n    protected PropertyChangeListener createPropertyChangeListener() {\n        return new MyPropertyChangeListener();\n    }\n    public class MyPropertyChangeListener extends PropertyChangeHandler {\n        public void propertyChange(PropertyChangeEvent e) {\n            if (e.getPropertyName().equals(\"model\")) {\n                // do some extra work when the model changes\n            }\n            super.propertyChange(e);\n        }\n    }\n }",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeListener.html\" title\u003d\"interface in java.beans\"\u003e\u003ccode\u003ePropertyChangeListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicListUI.html#installUI(javax.swing.JComponent)\"\u003e\u003ccode\u003einstallUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003ePropertyChangeHandler\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BasicListUI.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.plaf.basic.BasicListUI$ListDataHandler",
    "javax.swing.plaf.basic.BasicListUI$MouseInputHandler",
    "javax.swing.plaf.basic.BasicListUI$ListSelectionHandler",
    "javax.swing.plaf.basic.BasicListUI$FocusHandler",
    "javax.swing.plaf.basic.BasicListUI$PropertyChangeHandler"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicListUI",
  "comment": "An extensible implementation of \n\u003ccode\u003eListUI\u003c/code\u003e. \n\u003cp\u003e \u003ccode\u003eBasicListUI\u003c/code\u003e instances cannot be shared between multiple lists.\u003c/p\u003e",
  "tagMap": {}
}