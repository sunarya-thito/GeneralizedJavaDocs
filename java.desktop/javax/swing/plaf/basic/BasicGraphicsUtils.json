{
  "packageName": "javax.swing.plaf.basic",
  "simpleName": "BasicGraphicsUtils",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "w",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "h",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "shadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "darkShadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "highlight",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "lightHighlight",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawEtchedRect",
      "comment": "Draws an etched rectangle.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - a width",
          "\u003ccode\u003eh\u003c/code\u003e - a height",
          "\u003ccode\u003eshadow\u003c/code\u003e - a color of shadow",
          "\u003ccode\u003edarkShadow\u003c/code\u003e - a color of dark shadow",
          "\u003ccode\u003ehighlight\u003c/code\u003e - a color highlighting",
          "\u003ccode\u003elightHighlight\u003c/code\u003e - a color of light highlighting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getEtchedInsets",
      "comment": "Returns the amount of space taken up by a border drawn by drawEtchedRect()",
      "annotations": [],
      "tagMap": {
        "return": [
          "the inset of an etched rect"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "w",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "h",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "shadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "highlight",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawGroove",
      "comment": "Draws a groove.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - a width",
          "\u003ccode\u003eh\u003c/code\u003e - a height",
          "\u003ccode\u003eshadow\u003c/code\u003e - a color of shadow",
          "\u003ccode\u003ehighlight\u003c/code\u003e - a color highlighting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getGrooveInsets",
      "comment": "Returns the amount of space taken up by a border drawn by drawGroove()",
      "annotations": [],
      "tagMap": {
        "return": [
          "the inset of a groove border"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "w",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "h",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isPressed",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isDefault",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "shadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "darkShadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "highlight",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "lightHighlight",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawBezel",
      "comment": "Draws a bezel.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - a width",
          "\u003ccode\u003eh\u003c/code\u003e - a height",
          "\u003ccode\u003eisPressed\u003c/code\u003e - is component pressed",
          "\u003ccode\u003eisDefault\u003c/code\u003e - is default drawing",
          "\u003ccode\u003eshadow\u003c/code\u003e - a color of shadow",
          "\u003ccode\u003edarkShadow\u003c/code\u003e - a color of dark shadow",
          "\u003ccode\u003ehighlight\u003c/code\u003e - a color highlighting",
          "\u003ccode\u003elightHighlight\u003c/code\u003e - a color of light highlighting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "w",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "h",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "shadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "darkShadow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "highlight",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "lightHighlight",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawLoweredBezel",
      "comment": "Draws a lowered bezel.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - a width",
          "\u003ccode\u003eh\u003c/code\u003e - a height",
          "\u003ccode\u003eshadow\u003c/code\u003e - a color of shadow",
          "\u003ccode\u003edarkShadow\u003c/code\u003e - a color of dark shadow",
          "\u003ccode\u003ehighlight\u003c/code\u003e - a color highlighting",
          "\u003ccode\u003elightHighlight\u003c/code\u003e - a color of light highlighting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "underlinedChar",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawString",
      "comment": "Draw a string with the graphics g at location (x,y) just like g.drawString would. The first occurrence of underlineChar in text will be underlined. The matching algorithm is not case sensitive.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003etext\u003c/code\u003e - a text",
          "\u003ccode\u003eunderlinedChar\u003c/code\u003e - an underlined char",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "underlinedIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawStringUnderlineCharAt",
      "comment": "Draw a string with the graphics g at location (x, y) just like g.drawString would. The character at index underlinedIndex in text will be underlined. If index is beyond the bounds of text (including \u003c 0), nothing will be underlined.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - Graphics to draw with",
          "\u003ccode\u003etext\u003c/code\u003e - String to draw",
          "\u003ccode\u003eunderlinedIndex\u003c/code\u003e - Index of character in text to underline",
          "\u003ccode\u003ex\u003c/code\u003e - x coordinate to draw at",
          "\u003ccode\u003ey\u003c/code\u003e - y coordinate to draw at"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawDashedRect",
      "comment": "Draws dashed rectangle.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - an instance of \n\u003ccode\u003eGraphics\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - an X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - an Y coordinate",
          "\u003ccode\u003ewidth\u003c/code\u003e - a width of rectangle",
          "\u003ccode\u003eheight\u003c/code\u003e - a height of rectangle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.AbstractButton",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "textIconGap",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPreferredButtonSize",
      "comment": "Returns the preferred size of the button.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - an instance of \n\u003ccode\u003eAbstractButton\u003c/code\u003e",
          "\u003ccode\u003etextIconGap\u003c/code\u003e - a gap between text and icon"
        ],
        "return": [
          "the preferred size of the button"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics2D",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "string",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawString",
      "comment": "Draws the given string at the specified location using text properties and anti-aliasing hints from the provided component. Nothing is drawn for the null string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component that will display the string, may be null",
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context, must not be null",
          "\u003ccode\u003estring\u003c/code\u003e - the string to display, may be null",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate to draw the text at",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate to draw the text at"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eg\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics2D",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "string",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "underlinedIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "drawStringUnderlineCharAt",
      "comment": "Draws the given string at the specified location underlining the specified character. The provided component is used to query text properties and anti-aliasing hints. The underlinedIndex parameter points to a char value (Unicode code unit) in the given string. If the char value specified at the underlined index is in the high-surrogate range and the char value at the following index is in the low-surrogate range then the supplementary character corresponding to this surrogate pair is underlined. No character is underlined if the index is negative or greater than the string length (index \u003c 0 || index \u003e\u003d string.length()) or if the char value specified at the given index is in the low-surrogate range.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicGraphicsUtils.html#getStringWidth(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String)\"\u003e\u003ccode\u003egetStringWidth(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component that will display the string, may be null",
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context, must not be null",
          "\u003ccode\u003estring\u003c/code\u003e - the string to display, may be null",
          "\u003ccode\u003eunderlinedIndex\u003c/code\u003e - index of a a char value (Unicode code unit) in the string to underline",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate to draw the text at",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate to draw the text at"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eg\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "name": "fm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "string",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "availTextWidth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getClippedString",
      "comment": "Clips the passed in string to the space provided. The provided component is used to query text properties and anti-aliasing hints. The unchanged string is returned if the space provided is greater than the string width.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicGraphicsUtils.html#getStringWidth(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String)\"\u003e\u003ccode\u003egetStringWidth(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component, may be null",
          "\u003ccode\u003efm\u003c/code\u003e - the FontMetrics used to measure the string width, must be obtained from the correct font and graphics. Must not be null.",
          "\u003ccode\u003estring\u003c/code\u003e - the string to clip, may be null",
          "\u003ccode\u003eavailTextWidth\u003c/code\u003e - the amount of space that the string can be drawn in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003efm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the clipped string that fits in the provided space, an empty string if the given string argument is \n\u003ccode\u003enull\u003c/code\u003e or empty"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "name": "fm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "string",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStringWidth",
      "comment": "Returns the width of the passed in string using text properties and anti-aliasing hints from the provided component. If the passed string is null, returns zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component, may be null",
          "\u003ccode\u003efm\u003c/code\u003e - the FontMetrics used to measure the advance string width, must be obtained from the correct font and graphics. Must not be null.",
          "\u003ccode\u003estring\u003c/code\u003e - the string to get the advance width of, may be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003efm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the advance width of the specified string, zero is returned for \n\u003ccode\u003enull\u003c/code\u003e string"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BasicGraphicsUtils.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.basic.BasicGraphicsUtils",
  "annotations": [],
  "tagMap": {}
}