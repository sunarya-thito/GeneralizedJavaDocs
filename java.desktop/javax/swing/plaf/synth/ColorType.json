{
  "packageName": "javax.swing.plaf.synth",
  "simpleName": "ColorType",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.plaf.synth.ColorType",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FOREGROUND",
      "comment": "ColorType for the foreground of a region.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.plaf.synth.ColorType",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BACKGROUND",
      "comment": "ColorType for the background of a region.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.plaf.synth.ColorType",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TEXT_FOREGROUND",
      "comment": "ColorType for the foreground of a region.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.plaf.synth.ColorType",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TEXT_BACKGROUND",
      "comment": "ColorType for the background of a region.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.plaf.synth.ColorType",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FOCUS",
      "comment": "ColorType for the focus.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_COUNT",
      "comment": "Maximum number of ColorTypes.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getID",
      "comment": "Returns a unique id, as an integer, for this ColorType.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a unique id, as an integer, for this ColorType."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the textual description of this ColorType. This is the same value that the ColorType was created with.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the description of the string"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "description",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new ColorType with the specified description.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edescription\u003c/code\u003e - String description of the ColorType."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.synth.ColorType",
  "comment": "A typesafe enumeration of colors that can be fetched from a style. \n\u003cp\u003e Each \u003ccode\u003eSynthStyle\u003c/code\u003e has a set of \u003ccode\u003eColorType\u003c/code\u003es that are accessed by way of the \u003ca href\u003d\"SynthStyle.html#getColor(javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.ColorType)\"\u003e\u003ccode\u003eSynthStyle.getColor(SynthContext, ColorType)\u003c/code\u003e\u003c/a\u003e method. \u003ccode\u003eSynthStyle\u003c/code\u003e\u0027s \u003ccode\u003einstallDefaults\u003c/code\u003e will install the \u003ccode\u003eFOREGROUND\u003c/code\u003e color as the foreground of the Component, and the \u003ccode\u003eBACKGROUND\u003c/code\u003e color to the background of the component (assuming that you have not explicitly specified a foreground and background color). Some components support more color based properties, for example \u003ccode\u003eJList\u003c/code\u003e has the property \u003ccode\u003eselectionForeground\u003c/code\u003e which will be mapped to \u003ccode\u003eFOREGROUND\u003c/code\u003e with a component state of \u003ccode\u003eSynthConstants.SELECTED\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The following example shows a custom \u003ccode\u003eSynthStyle\u003c/code\u003e that returns a red Color for the \u003ccode\u003eDISABLED\u003c/code\u003e state, otherwise a black color. \u003c/p\u003e\n\u003cpre\u003e class MyStyle extends SynthStyle {\n     private Color disabledColor \u003d new ColorUIResource(Color.RED);\n     private Color color \u003d new ColorUIResource(Color.BLACK);\n     protected Color getColorForState(SynthContext context, ColorType type){\n         if (context.getComponentState() \u003d\u003d SynthConstants.DISABLED) {\n             return disabledColor;\n         }\n         return color;\n     }\n }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}