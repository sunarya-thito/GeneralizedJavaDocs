{
  "packageName": "javax.swing.plaf.synth",
  "simpleName": "SynthLookAndFeel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.basic.BasicLookAndFeel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthStyleFactory",
            "type": "Class"
          },
          "field": {
            "name": "cache"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setStyleFactory",
      "comment": "Sets the SynthStyleFactory that the UI classes provided by synth will use to obtain a SynthStyle.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecache\u003c/code\u003e - SynthStyleFactory the UIs should use."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.synth.SynthStyleFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStyleFactory",
      "comment": "Returns the current SynthStyleFactory.",
      "tagMap": {
        "return": [
          "SynthStyleFactory"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.synth.SynthStyle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.Region",
            "type": "Class"
          },
          "field": {
            "name": "region"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStyle",
      "comment": "Gets a SynthStyle for the specified region of the specified component. This is not for general consumption, only custom UIs should call this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - JComponent to get the SynthStyle for",
          "\u003ccode\u003eregion\u003c/code\u003e - Identifies the region of the specified component"
        ],
        "return": [
          "SynthStyle to use."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "updateStyles",
      "comment": "Updates the style associated with c, and all its children. This is a lighter version of SwingUtilities.updateComponentTreeUI.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - Component to update style for."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.synth.Region",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getRegion",
      "comment": "Returns the Region for the JComponent c.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - JComponent to fetch the Region for"
        ],
        "return": [
          "Region corresponding to \n\u003ccode\u003ec\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ComponentUI",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createUI",
      "comment": "Creates the Synth look and feel ComponentUI for the passed in JComponent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - JComponent to create the \n\u003ccode\u003eComponentUI\u003c/code\u003e for"
        ],
        "return": [
          "ComponentUI to use for \n\u003ccode\u003ec\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "resourceBase"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "load",
      "comment": "Loads the set of SynthStyles that will be used by this SynthLookAndFeel. resourceBase is used to resolve any path based resources, for example an Image would be resolved by resourceBase.getResource(path). Refer to Synth File Format for more information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - InputStream to load from",
          "\u003ccode\u003eresourceBase\u003c/code\u003e - used to resolve any images or other resources"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if there is an error in parsing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if input or resourceBase is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "load",
      "comment": "Loads the set of SynthStyles that will be used by this SynthLookAndFeel. Path based resources are resolved relatively to the specified URL of the style. For example an Image would be resolved by new URL(synthFile, path). Refer to Synth File Format for more information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the \n\u003ccode\u003eURL\u003c/code\u003e to load the set of \n\u003ccode\u003eSynthStyle\u003c/code\u003e from"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if there is an error in parsing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if synthSet is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if synthSet cannot be opened as an \n\u003ccode\u003eInputStream\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Called by UIManager when this look and feel is installed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#uninitialize()\"\u003e\u003ccode\u003eLookAndFeel.uninitialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#initialize()\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninitialize",
      "comment": "Called by UIManager when this look and feel is uninstalled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#initialize()\"\u003e\u003ccode\u003eLookAndFeel.initialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#uninitialize()\"\u003euninitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.UIDefaults",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaults",
      "comment": "Returns the defaults for this SynthLookAndFeel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicLookAndFeel.html#initClassDefaults(javax.swing.UIDefaults)\"\u003e\u003ccode\u003eBasicLookAndFeel.initClassDefaults(javax.swing.UIDefaults)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicLookAndFeel.html#initSystemColorDefaults(javax.swing.UIDefaults)\"\u003e\u003ccode\u003eBasicLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicLookAndFeel.html#initComponentDefaults(javax.swing.UIDefaults)\"\u003e\u003ccode\u003eBasicLookAndFeel.initComponentDefaults(javax.swing.UIDefaults)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicLookAndFeel.html#getDefaults()\"\u003egetDefaults\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.basic\"\u003eBasicLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Defaults table."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupportedLookAndFeel",
      "comment": "Returns true, SynthLookAndFeel is always supported.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#isSupportedLookAndFeel()\"\u003eisSupportedLookAndFeel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNativeLookAndFeel",
      "comment": "Returns false, SynthLookAndFeel is not a native look and feel.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#isNativeLookAndFeel()\"\u003eisNativeLookAndFeel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDescription",
      "comment": "Returns a textual description of SynthLookAndFeel.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getDescription()\"\u003egetDescription\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "textual description of synth."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Return a short string that identifies this look and feel.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a short string identifying this look and feel."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getID",
      "comment": "Return a string that identifies this look and feel.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getID()\"\u003egetID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html\" title\u003d\"class in javax.swing\"\u003eLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a short string identifying this look and feel."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldUpdateStyleOnAncestorChanged",
      "comment": "Returns whether or not the UIs should update their SynthStyles from the SynthStyleFactory when the ancestor of the JComponent changes. A subclass that provided a SynthStyleFactory that based the return value from getStyle off the containment hierarchy would override this method to return true.",
      "tagMap": {
        "return": [
          "whether or not the UIs should update their \n\u003ccode\u003eSynthStyles\u003c/code\u003e from the \n\u003ccode\u003eSynthStyleFactory\u003c/code\u003e when the ancestor changed."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeEvent",
            "type": "Class"
          },
          "field": {
            "name": "ev"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shouldUpdateStyleOnEvent",
      "comment": "Returns whether or not the UIs should update their styles when a particular event occurs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eev\u003c/code\u003e - a \n\u003ccode\u003ePropertyChangeEvent\u003c/code\u003e"
        ],
        "return": [
          "whether or not the UIs should update their styles"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a SynthLookAndFeel. For the returned SynthLookAndFeel to be useful you need to invoke load to specify the set of SynthStyles, or invoke setStyleFactory.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#load(java.io.InputStream,java.lang.Class)\"\u003e\u003ccode\u003eload(java.io.InputStream, java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#setStyleFactory(javax.swing.plaf.synth.SynthStyleFactory)\"\u003e\u003ccode\u003esetStyleFactory(javax.swing.plaf.synth.SynthStyleFactory)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.synth.SynthLookAndFeel",
  "comment": "SynthLookAndFeel provides the basis for creating a customized look and feel. SynthLookAndFeel does not directly provide a look, all painting is delegated. You need to either provide a configuration file, by way of the \n\u003ca href\u003d\"#load(java.io.InputStream,java.lang.Class)\"\u003e\u003ccode\u003eload(java.io.InputStream, java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e method, or provide your own \n\u003ca href\u003d\"SynthStyleFactory.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003e\u003ccode\u003eSynthStyleFactory\u003c/code\u003e\u003c/a\u003e to \n\u003ca href\u003d\"#setStyleFactory(javax.swing.plaf.synth.SynthStyleFactory)\"\u003e\u003ccode\u003esetStyleFactory(javax.swing.plaf.synth.SynthStyleFactory)\u003c/code\u003e\u003c/a\u003e. Refer to the \n\u003ca href\u003d\"package-summary.html\"\u003epackage summary\u003c/a\u003e for an example of loading a file, and \n\u003ca href\u003d\"SynthStyleFactory.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003e\u003ccode\u003eSynthStyleFactory\u003c/code\u003e\u003c/a\u003e for an example of providing your own \n\u003ccode\u003eSynthStyleFactory\u003c/code\u003e to \n\u003ccode\u003esetStyleFactory\u003c/code\u003e. \n\u003cp\u003e \u003ca href\u003d\"SynthIcon.html\" title\u003d\"interface in javax.swing.plaf.synth\"\u003e\u003ccode\u003eSynthIcon\u003c/code\u003e\u003c/a\u003e interface provides \u003ccode\u003epaintIcon(synthContext, graphics, x, y, width, height)\u003c/code\u003e method that allows to draw the icon with the given \u003ccode\u003eSynthContext\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e This class implements \u003ca href\u003d\"../../../../../java.base/java/io/Serializable.html\" title\u003d\"interface in java.io\"\u003e\u003ccode\u003eSerializable\u003c/code\u003e\u003c/a\u003e as a side effect of it extending \u003ca href\u003d\"../basic/BasicLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.basic\"\u003e\u003ccode\u003eBasicLookAndFeel\u003c/code\u003e\u003c/a\u003e. It is not intended to be serialized. An attempt to serialize it will result in \u003ca href\u003d\"../../../../../java.base/java/io/NotSerializableException.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eNotSerializableException\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}