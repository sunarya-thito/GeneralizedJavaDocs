{
  "packageName": "javax.swing.plaf.synth",
  "simpleName": "SynthStyle",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.plaf.synth.SynthGraphicsUtils",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGraphicsUtils",
      "comment": "Returns the SynthGraphicUtils for the specified context.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester"
        ],
        "return": [
          "SynthGraphicsUtils"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.ColorType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColor",
      "comment": "Returns the color for the specified state. This gives precedence to foreground and background of the JComponent. If the Color from the JComponent is not appropriate, or not used, this will invoke getColorForState. Subclasses should generally not have to override this, instead override getColorForState(javax.swing.plaf.synth.SynthContext, javax.swing.plaf.synth.ColorType).",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003etype\u003c/code\u003e - Type of color being requested."
        ],
        "return": [
          "Color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.ColorType",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getColorForState",
      "comment": "Returns the color for the specified state. This should NOT call any methods on the JComponent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003etype\u003c/code\u003e - Type of color being requested."
        ],
        "return": [
          "Color to render with"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFont",
      "comment": "Returns the Font for the specified state. This redirects to the JComponent from the context as necessary. If this does not redirect to the JComponent getFontForState(javax.swing.plaf.synth.SynthContext) is invoked.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester"
        ],
        "return": [
          "Font to render with"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getFontForState",
      "comment": "Returns the font for the specified state. This should NOT call any method on the JComponent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester"
        ],
        "return": [
          "Font to render with"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "insets"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInsets",
      "comment": "Returns the Insets that are used to calculate sizing information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003einsets\u003c/code\u003e - Insets to place return value in."
        ],
        "return": [
          "Sizing Insets."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.synth.SynthPainter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPainter",
      "comment": "Returns the SynthPainter that will be used for painting. This may return null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester"
        ],
        "return": [
          "SynthPainter to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOpaque",
      "comment": "Returns true if the region is opaque.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester"
        ],
        "return": [
          "true if region is opaque."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Getter for a region specific style property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003ekey\u003c/code\u003e - Property being requested."
        ],
        "return": [
          "Value of the named property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "installDefaults",
      "comment": "Installs the necessary state from this Style on the JComponent from context.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying component to install properties to."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninstallDefaults",
      "comment": "Uninstalls any state that this style installed on the JComponent from context. Styles should NOT depend upon this being called, in certain cases it may never be called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying component to install properties to."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "defaultValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInt",
      "comment": "Convenience method to get a specific style property whose value is a Number. If the value is a Number, intValue is returned, otherwise defaultValue is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003ekey\u003c/code\u003e - Property being requested.",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - Value to return if the property has not been specified, or is not a Number"
        ],
        "return": [
          "Value of the named property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "defaultValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBoolean",
      "comment": "Convenience method to get a specific style property whose value is an Boolean.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003ekey\u003c/code\u003e - Property being requested.",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - Value to return if the property has not been specified, or is not a Boolean"
        ],
        "return": [
          "Value of the named property"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIcon",
      "comment": "Convenience method to get a specific style property whose value is an Icon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003ekey\u003c/code\u003e - Property being requested."
        ],
        "return": [
          "Value of the named property, or null if not specified"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "defaultValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getString",
      "comment": "Convenience method to get a specific style property whose value is a String.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext identifying requester",
          "\u003ccode\u003ekey\u003c/code\u003e - Property being requested.",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - Value to return if the property has not been specified, or is not a String"
        ],
        "return": [
          "Value of the named property"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SynthStyle.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.plaf.synth.SynthStyle",
  "comment": "\u003ccode\u003eSynthStyle\u003c/code\u003e is a set of style properties. Each \n\u003ccode\u003eSynthUI\u003c/code\u003e references at least one \n\u003ccode\u003eSynthStyle\u003c/code\u003e that is obtained using a \n\u003ccode\u003eSynthStyleFactory\u003c/code\u003e. You typically don\u0027t need to interact with this class directly, rather you will load a \n\u003ca href\u003d\"doc-files/synthFileFormat.html\"\u003eSynth File Format file\u003c/a\u003e into \n\u003ccode\u003eSynthLookAndFeel\u003c/code\u003e that will create a set of SynthStyles.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003e\u003ccode\u003eSynthLookAndFeel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthStyleFactory.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003e\u003ccode\u003eSynthStyleFactory\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}