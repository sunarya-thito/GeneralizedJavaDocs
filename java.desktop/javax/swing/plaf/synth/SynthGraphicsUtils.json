{
  "packageName": "javax.swing.plaf.synth",
  "simpleName": "SynthGraphicsUtils",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "paintKey"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drawLine",
      "comment": "Draws a line between the two end points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - Identifies hosting region.",
          "\u003ccode\u003epaintKey\u003c/code\u003e - Identifies the portion of the component being asked to paint, may be null.",
          "\u003ccode\u003eg\u003c/code\u003e - Graphics object to paint to",
          "\u003ccode\u003ex1\u003c/code\u003e - x origin",
          "\u003ccode\u003ey1\u003c/code\u003e - y origin",
          "\u003ccode\u003ex2\u003c/code\u003e - x destination",
          "\u003ccode\u003ey2\u003c/code\u003e - y destination"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "paintKey"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "styleKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drawLine",
      "comment": "Draws a line between the two end points. This implementation supports only one line style key, \"dashed\". The \"dashed\" line style is applied only to vertical and horizontal lines. Specifying null or any key different from \"dashed\" will draw solid lines.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - identifies hosting region",
          "\u003ccode\u003epaintKey\u003c/code\u003e - identifies the portion of the component being asked to paint, may be null",
          "\u003ccode\u003eg\u003c/code\u003e - Graphics object to paint to",
          "\u003ccode\u003ex1\u003c/code\u003e - x origin",
          "\u003ccode\u003ey1\u003c/code\u003e - y origin",
          "\u003ccode\u003ex2\u003c/code\u003e - x destination",
          "\u003ccode\u003ey2\u003c/code\u003e - y destination",
          "\u003ccode\u003estyleKey\u003c/code\u003e - identifies the requested style of the line (e.g. \"dashed\")"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "fm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vTextPosition"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "viewR"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "iconR"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "textR"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "iconTextGap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layoutText",
      "comment": "Lays out text and an icon returning, by reference, the location to place the icon and text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003efm\u003c/code\u003e - FontMetrics for the Font to use, this may be ignored",
          "\u003ccode\u003etext\u003c/code\u003e - Text to layout",
          "\u003ccode\u003eicon\u003c/code\u003e - Icon to layout",
          "\u003ccode\u003ehAlign\u003c/code\u003e - horizontal alignment",
          "\u003ccode\u003evAlign\u003c/code\u003e - vertical alignment",
          "\u003ccode\u003ehTextPosition\u003c/code\u003e - horizontal text position",
          "\u003ccode\u003evTextPosition\u003c/code\u003e - vertical text position",
          "\u003ccode\u003eviewR\u003c/code\u003e - Rectangle to layout text and icon in.",
          "\u003ccode\u003eiconR\u003c/code\u003e - Rectangle to place icon bounds in",
          "\u003ccode\u003etextR\u003c/code\u003e - Rectangle to place text in",
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - gap between icon and text"
        ],
        "return": [
          "by reference, the location to place the icon and text."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "computeStringWidth",
      "comment": "Returns the size of the passed in string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003efont\u003c/code\u003e - Font to use",
          "\u003ccode\u003emetrics\u003c/code\u003e - FontMetrics, may be ignored",
          "\u003ccode\u003etext\u003c/code\u003e - Text to get size of."
        ],
        "return": [
          "the size of the passed in string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "iconTextGap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonicIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSize",
      "comment": "Returns the minimum size needed to properly render an icon and text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003efont\u003c/code\u003e - Font to use",
          "\u003ccode\u003etext\u003c/code\u003e - Text to layout",
          "\u003ccode\u003eicon\u003c/code\u003e - Icon to layout",
          "\u003ccode\u003ehAlign\u003c/code\u003e - horizontal alignment",
          "\u003ccode\u003evAlign\u003c/code\u003e - vertical alignment",
          "\u003ccode\u003ehTextPosition\u003c/code\u003e - horizontal text position",
          "\u003ccode\u003evTextPosition\u003c/code\u003e - vertical text position",
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - gap between icon and text",
          "\u003ccode\u003emnemonicIndex\u003c/code\u003e - Index into text to render the mnemonic at, -1 indicates no mnemonic."
        ],
        "return": [
          "the minimum size needed to properly render an icon and text."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "iconTextGap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonicIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSize",
      "comment": "Returns the maximum size needed to properly render an icon and text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003efont\u003c/code\u003e - Font to use",
          "\u003ccode\u003etext\u003c/code\u003e - Text to layout",
          "\u003ccode\u003eicon\u003c/code\u003e - Icon to layout",
          "\u003ccode\u003ehAlign\u003c/code\u003e - horizontal alignment",
          "\u003ccode\u003evAlign\u003c/code\u003e - vertical alignment",
          "\u003ccode\u003ehTextPosition\u003c/code\u003e - horizontal text position",
          "\u003ccode\u003evTextPosition\u003c/code\u003e - vertical text position",
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - gap between icon and text",
          "\u003ccode\u003emnemonicIndex\u003c/code\u003e - Index into text to render the mnemonic at, -1 indicates no mnemonic."
        ],
        "return": [
          "the maximum size needed to properly render an icon and text."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumCharHeight",
      "comment": "Returns the maximum height of the Font from the passed in SynthContext.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - SynthContext used to determine font."
        ],
        "return": [
          "maximum height of the characters for the font from the passed in context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "iconTextGap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonicIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "Returns the preferred size needed to properly render an icon and text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003efont\u003c/code\u003e - Font to use",
          "\u003ccode\u003etext\u003c/code\u003e - Text to layout",
          "\u003ccode\u003eicon\u003c/code\u003e - Icon to layout",
          "\u003ccode\u003ehAlign\u003c/code\u003e - horizontal alignment",
          "\u003ccode\u003evAlign\u003c/code\u003e - vertical alignment",
          "\u003ccode\u003ehTextPosition\u003c/code\u003e - horizontal text position",
          "\u003ccode\u003evTextPosition\u003c/code\u003e - vertical text position",
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - gap between icon and text",
          "\u003ccode\u003emnemonicIndex\u003c/code\u003e - Index into text to render the mnemonic at, -1 indicates no mnemonic."
        ],
        "return": [
          "the preferred size needed to properly render an icon and text."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonicIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintText",
      "comment": "Paints text at the specified location. This will not attempt to render the text as html nor will it offset by the insets of the component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003eg\u003c/code\u003e - Graphics used to render string in.",
          "\u003ccode\u003etext\u003c/code\u003e - Text to render",
          "\u003ccode\u003ebounds\u003c/code\u003e - Bounds of the text to be drawn.",
          "\u003ccode\u003emnemonicIndex\u003c/code\u003e - Index to draw string at."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonicIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintText",
      "comment": "Paints text at the specified location. This will not attempt to render the text as html nor will it offset by the insets of the component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003eg\u003c/code\u003e - Graphics used to render string in.",
          "\u003ccode\u003etext\u003c/code\u003e - Text to render",
          "\u003ccode\u003ex\u003c/code\u003e - X location to draw text at.",
          "\u003ccode\u003ey\u003c/code\u003e - Upper left corner to draw text at.",
          "\u003ccode\u003emnemonicIndex\u003c/code\u003e - Index to draw string at."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "ss"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vAlign"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "vTextPosition"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "iconTextGap"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonicIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "textOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paintText",
      "comment": "Paints an icon and text. This will render the text as html, if necessary, and offset the location by the insets of the component.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ess\u003c/code\u003e - SynthContext",
          "\u003ccode\u003eg\u003c/code\u003e - Graphics to render string and icon into",
          "\u003ccode\u003etext\u003c/code\u003e - Text to layout",
          "\u003ccode\u003eicon\u003c/code\u003e - Icon to layout",
          "\u003ccode\u003ehAlign\u003c/code\u003e - horizontal alignment",
          "\u003ccode\u003evAlign\u003c/code\u003e - vertical alignment",
          "\u003ccode\u003ehTextPosition\u003c/code\u003e - horizontal text position",
          "\u003ccode\u003evTextPosition\u003c/code\u003e - vertical text position",
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - gap between icon and text",
          "\u003ccode\u003emnemonicIndex\u003c/code\u003e - Index into text to render the mnemonic at, -1 indicates no mnemonic.",
          "\u003ccode\u003etextOffset\u003c/code\u003e - Amount to offset the text when painting"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIconWidth",
      "comment": "Returns the icon\u0027s width. The getIconWidth(context) method is called for SynthIcon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the icon",
          "\u003ccode\u003econtext\u003c/code\u003e - \n\u003ccode\u003eSynthContext\u003c/code\u003e requesting the icon, may be null."
        ],
        "return": [
          "an int specifying the width of the icon."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIconHeight",
      "comment": "Returns the icon\u0027s height. The getIconHeight(context) method is called for SynthIcon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the icon",
          "\u003ccode\u003econtext\u003c/code\u003e - \n\u003ccode\u003eSynthContext\u003c/code\u003e requesting the icon, may be null."
        ],
        "return": [
          "an int specifying the height of the icon."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.SynthContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "paintIcon",
      "comment": "Paints the icon. The paintIcon(context, g, x, y, width, height) method is called for SynthIcon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eicon\u003c/code\u003e - the icon",
          "\u003ccode\u003econtext\u003c/code\u003e - identifies hosting region, may be null.",
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context",
          "\u003ccode\u003ex\u003c/code\u003e - the x location to paint to",
          "\u003ccode\u003ey\u003c/code\u003e - the y location to paint to",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the region to paint to, may be 0",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the region to paint to, may be 0"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a SynthGraphicsUtils.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.synth.SynthGraphicsUtils",
  "comment": "Wrapper for primitive graphics calls.",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}