{
  "packageName": "javax.swing.plaf",
  "simpleName": "ListUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.ComponentUI",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JList",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "list"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "locationToIndex",
      "comment": "Returns the cell index in the specified JList closest to the given location in the list\u0027s coordinate system. To determine if the cell actually contains the specified location, compare the point against the cell\u0027s bounds, as provided by getCellBounds. This method returns -1 if the list\u0027s model is empty.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list",
          "\u003ccode\u003elocation\u003c/code\u003e - the coordinates of the point"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocation\u003c/code\u003e is null"
        ],
        "return": [
          "the cell index closest to the given location, or \n\u003ccode\u003e-1\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JList",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "list"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "indexToLocation",
      "comment": "Returns the origin in the given JList, of the specified item, in the list\u0027s coordinate system. Returns null if the index isn\u0027t valid.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list",
          "\u003ccode\u003eindex\u003c/code\u003e - the cell index"
        ],
        "return": [
          "the origin of the cell, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JList",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "list"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index1"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCellBounds",
      "comment": "Returns the bounding rectangle, in the given list\u0027s coordinate system, for the range of cells specified by the two indices. The indices can be supplied in any order. If the smaller index is outside the list\u0027s range of cells, this method returns null. If the smaller index is valid, but the larger index is outside the list\u0027s range, the bounds of just the first index is returned. Otherwise, the bounds of the valid range is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list",
          "\u003ccode\u003eindex1\u003c/code\u003e - the first index in the range",
          "\u003ccode\u003eindex2\u003c/code\u003e - the second index in the range"
        ],
        "return": [
          "the bounding rectangle for the range of cells, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.plaf.ListUI",
  "comment": "The \n\u003ccode\u003eJList\u003c/code\u003e pluggable look and feel delegate.",
  "tagMap": {}
}