{
  "packageName": "javax.swing.plaf.nimbus",
  "simpleName": "NimbusLookAndFeel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.plaf.synth.SynthLookAndFeel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Called by UIManager when this look and feel is installed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#uninitialize()\"\u003e\u003ccode\u003eLookAndFeel.uninitialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#initialize()\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uninitialize",
      "comment": "Called by UIManager when this look and feel is uninstalled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#initialize()\"\u003e\u003ccode\u003eLookAndFeel.initialize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)\"\u003e\u003ccode\u003eUIManager.setLookAndFeel(javax.swing.LookAndFeel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#uninitialize()\"\u003euninitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.nimbus.NimbusStyle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "javax.swing.plaf.synth.Region",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStyle",
      "comment": "Gets the style associated with the given component and region. This will never return null. If an appropriate component and region cannot be determined, then a default style is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a non-null reference to a JComponent",
          "\u003ccode\u003er\u003c/code\u003e - a non-null reference to the region of the component c"
        ],
        "return": [
          "a non-null reference to a NimbusStyle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Return a short string that identifies this look and feel. This String will be the unquoted String \"Nimbus\".",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a short string identifying this look and feel."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getID",
      "comment": "Return a string that identifies this look and feel. This String will be the unquoted String \"Nimbus\".",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#getID()\"\u003egetID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a short string identifying this look and feel."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDescription",
      "comment": "Returns a textual description of this look and feel.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#getDescription()\"\u003egetDescription\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "textual description of this look and feel."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldUpdateStyleOnAncestorChanged",
      "comment": "Returns whether or not the UIs should update their SynthStyles from the SynthStyleFactory when the ancestor of the JComponent changes. A subclass that provided a SynthStyleFactory that based the return value from getStyle off the containment hierarchy would override this method to return true.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#shouldUpdateStyleOnAncestorChanged()\"\u003eshouldUpdateStyleOnAncestorChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeEvent",
            "type": "Class"
          },
          "field": {
            "name": "ev"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shouldUpdateStyleOnEvent",
      "comment": "Returns whether or not the UIs should update their styles when a particular event occurs. Overridden to return true when one of the following properties change: \"Nimbus.Overrides\" \"Nimbus.Overrides.InheritDefaults\" \"JComponent.sizeVariant\"",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html#shouldUpdateStyleOnEvent(java.beans.PropertyChangeEvent)\"\u003eshouldUpdateStyleOnEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/synth/SynthLookAndFeel.html\" title\u003d\"class in javax.swing.plaf.synth\"\u003eSynthLookAndFeel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eev\u003c/code\u003e - a \n\u003ccode\u003ePropertyChangeEvent\u003c/code\u003e"
        ],
        "return": [
          "whether or not the UIs should update their styles"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.synth.Region",
            "type": "Class"
          },
          "field": {
            "name": "region"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "register",
      "comment": "Registers a third party component with the NimbusLookAndFeel. Regions represent Components and areas within Components that act as independent painting areas. Once registered with the NimbusLookAndFeel, NimbusStyles for these Regions can be retrieved via the getStyle method. The NimbusLookAndFeel uses a standard naming scheme for entries in the UIDefaults table. The key for each property, state, painter, and other default registered in UIDefaults for a specific Region will begin with the specified prefix For example, suppose I had a component named JFoo. Suppose I then registered this component with the NimbusLookAndFeel in this manner: \n     laf.register(NimbusFooUI.FOO_REGION, \"Foo\");\n In this case, I could then register properties for this component with UIDefaults in the following manner: \n     UIManager.put(\"Foo.background\", new ColorUIResource(Color.BLACK));\n     UIManager.put(\"Foo.Enabled.backgroundPainter\", new FooBackgroundPainter());\n It is also possible to register a named component with Nimbus. For example, suppose you wanted to style the background of a JPanel named \"MyPanel\" differently from other JPanels. You could accomplish this by doing the following: \n     laf.register(Region.PANEL, \"\\\"MyPanel\\\"\");\n     UIManager.put(\"\\\"MyPanel\\\".background\", new ColorUIResource(Color.RED));",
      "tagMap": {
        "param": [
          "\u003ccode\u003eregion\u003c/code\u003e - The Synth Region that is being registered. Such as Button, or ScrollBarThumb, or NimbusFooUI.FOO_REGION.",
          "\u003ccode\u003eprefix\u003c/code\u003e - The UIDefault prefix. For example, could be ComboBox, or if a named components, \"MyComboBox\", or even something like ToolBar.\"MyComboBox\".\"ComboBox.arrowButton\""
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "uiDefaultParentName"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "hOffset"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "sOffset"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "bOffset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "aOffset"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "uiResource"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDerivedColor",
      "comment": "Get a derived color, derived colors are shared instances and is color value will change when its parent UIDefault color changes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003euiDefaultParentName\u003c/code\u003e - The parent UIDefault key",
          "\u003ccode\u003ehOffset\u003c/code\u003e - The hue offset",
          "\u003ccode\u003esOffset\u003c/code\u003e - The saturation offset",
          "\u003ccode\u003ebOffset\u003c/code\u003e - The brightness offset",
          "\u003ccode\u003eaOffset\u003c/code\u003e - The alpha offset",
          "\u003ccode\u003euiResource\u003c/code\u003e - True if the derived color should be a UIResource, false if it should not be"
        ],
        "return": [
          "The stored derived color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "color1"
          }
        },
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "color2"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "midPoint"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "uiResource"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getDerivedColor",
      "comment": "Decodes and returns a color, which is derived from an offset between two other colors.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolor1\u003c/code\u003e - The first color",
          "\u003ccode\u003ecolor2\u003c/code\u003e - The second color",
          "\u003ccode\u003emidPoint\u003c/code\u003e - The offset between color 1 and color 2, a value of 0.0 is color 1 and 1.0 is color 2;",
          "\u003ccode\u003euiResource\u003c/code\u003e - True if the derived color should be a UIResource"
        ],
        "return": [
          "The derived color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "color1"
          }
        },
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "color2"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "midPoint"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getDerivedColor",
      "comment": "Decodes and returns a color, which is derived from a offset between two other colors.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolor1\u003c/code\u003e - The first color",
          "\u003ccode\u003ecolor2\u003c/code\u003e - The second color",
          "\u003ccode\u003emidPoint\u003c/code\u003e - The offset between color 1 and color 2, a value of 0.0 is color 1 and 1.0 is color 2;"
        ],
        "return": [
          "The derived color, which will be a UIResource"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new NimbusLookAndFeel.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.plaf.nimbus.NimbusLookAndFeel",
  "comment": "\u003cp\u003eThe NimbusLookAndFeel class.\u003c/p\u003e",
  "tagMap": {}
}