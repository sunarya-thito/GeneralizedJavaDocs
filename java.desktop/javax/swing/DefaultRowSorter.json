{
  "packageName": "javax.swing",
  "simpleName": "DefaultRowSorter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.RowSorter",
    "parameters": [
      {
        "name": "M",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.DefaultRowSorter$ModelWrapper",
            "parameters": [
              {
                "owner": "javax.swing.DefaultRowSorter",
                "name": "M",
                "type": "Variable"
              },
              {
                "owner": "javax.swing.DefaultRowSorter",
                "name": "I",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "name": "modelWrapper",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setModelWrapper",
      "comment": "Sets the model wrapper providing the data that is being sorted and filtered.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emodelWrapper\u003c/code\u003e - the model wrapper responsible for providing the data that gets sorted and filtered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emodelWrapper\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.DefaultRowSorter$ModelWrapper",
        "parameters": [
          {
            "owner": "javax.swing.DefaultRowSorter",
            "name": "M",
            "type": "Variable"
          },
          {
            "owner": "javax.swing.DefaultRowSorter",
            "name": "I",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getModelWrapper",
      "comment": "Returns the model wrapper providing the data that is being sorted and filtered.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the model wrapper responsible for providing the data that gets sorted and filtered"
        ]
      }
    },
    {
      "returnType": {
        "owner": "javax.swing.DefaultRowSorter",
        "name": "M",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getModel",
      "comment": "Returns the underlying model.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getModel()\"\u003egetModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "sortable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSortable",
      "comment": "Sets whether or not the specified column is sortable. The specified value is only checked when toggleSortOrder is invoked. It is still possible to sort on a column that has been marked as unsortable by directly setting the sort keys. The default is true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#toggleSortOrder(int)\"\u003e\u003ccode\u003etoggleSortOrder(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#setSortKeys(java.util.List)\"\u003e\u003ccode\u003esetSortKeys(java.util.List\u0026lt;? extends javax.swing.RowSorter.SortKey\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to enable or disable sorting on, in terms of the underlying model",
          "\u003ccode\u003esortable\u003c/code\u003e - whether or not the specified column is sortable"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumn\u003c/code\u003e is outside the range of the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSortable",
      "comment": "Returns true if the specified column is sortable; otherwise, false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to check sorting for, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if column is outside the range of the underlying model"
        ],
        "return": [
          "true if the column is sortable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.swing.RowSorter$SortKey",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "sortKeys",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSortKeys",
      "comment": "Sets the sort keys. This creates a copy of the supplied List; subsequent changes to the supplied List do not effect this DefaultRowSorter. If the sort keys have changed this triggers a sort.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#setSortKeys(java.util.List)\"\u003esetSortKeys\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esortKeys\u003c/code\u003e - the new \n\u003ccode\u003eSortKeys\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e is a shorthand for specifying an empty list, indicating that the view should be unsorted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the values in \n\u003ccode\u003esortKeys\u003c/code\u003e are null or have a column index outside the range of the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.swing.RowSorter$SortKey",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSortKeys",
      "comment": "Returns the current sort keys. This returns an unmodifiable non-null List. If you need to change the sort keys, make a copy of the returned List, mutate the copy and invoke setSortKeys with the new list.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getSortKeys()\"\u003egetSortKeys\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the current sort order"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaxSortKeys",
      "comment": "Sets the maximum number of sort keys. The number of sort keys determines how equal values are resolved when sorting. For example, assume a table row sorter is created and setMaxSortKeys(2) is invoked on it. The user clicks the header for column 1, causing the table rows to be sorted based on the items in column 1. Next, the user clicks the header for column 2, causing the table to be sorted based on the items in column 2; if any items in column 2 are equal, then those particular rows are ordered based on the items in column 1. In this case, we say that the rows are primarily sorted on column 2, and secondarily on column 1. If the user then clicks the header for column 3, then the items are primarily sorted on column 3 and secondarily sorted on column 2. Because the maximum number of sort keys has been set to 2 with setMaxSortKeys, column 1 no longer has an effect on the order. The maximum number of sort keys is enforced by toggleSortOrder. You can specify more sort keys by invoking setSortKeys directly and they will all be honored. However if toggleSortOrder is subsequently invoked the maximum number of sort keys will be enforced. The default value is 3.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - the maximum number of sort keys"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emax\u003c/code\u003e \u0026lt; 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxSortKeys",
      "comment": "Returns the maximum number of sort keys.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the maximum number of sort keys"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "sortsOnUpdates",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSortsOnUpdates",
      "comment": "If true, specifies that a sort should happen when the underlying model is updated (rowsUpdated is invoked). For example, if this is true and the user edits an entry the location of that item in the view may change. The default is false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esortsOnUpdates\u003c/code\u003e - whether or not to sort on update events"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSortsOnUpdates",
      "comment": "Returns true if a sort should happen when the underlying model is updated; otherwise, returns false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether or not to sort when the model is updated"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.RowFilter",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "javax.swing.DefaultRowSorter",
                    "name": "M",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "javax.swing.DefaultRowSorter",
                    "name": "I",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowFilter",
      "comment": "Sets the filter that determines which rows, if any, should be hidden from the view. The filter is applied before sorting. A value of null indicates all values from the model should be included. RowFilter\u0027s include method is passed an Entry that wraps the underlying model. The number of columns in the Entry corresponds to the number of columns in the ModelWrapper. The identifier comes from the ModelWrapper as well. This method triggers a sort.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - the filter used to determine what entries should be included"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.RowFilter",
        "parameters": [
          {
            "lowerBounds": [
              {
                "owner": "javax.swing.DefaultRowSorter",
                "name": "M",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          },
          {
            "lowerBounds": [
              {
                "owner": "javax.swing.DefaultRowSorter",
                "name": "I",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRowFilter",
      "comment": "Returns the filter that determines which rows, if any, should be hidden from view.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the filter"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toggleSortOrder",
      "comment": "Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order. If the specified column is not sortable, this method has no effect.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#setSortable(int,boolean)\"\u003e\u003ccode\u003esetSortable(int,boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#setMaxSortKeys(int)\"\u003e\u003ccode\u003esetMaxSortKeys(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#toggleSortOrder(int)\"\u003etoggleSortOrder\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - index of the column to make the primary sorted column, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if column is outside the range of the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertRowIndexToView",
      "comment": "Returns the location of index in terms of the view. That is, for the row index in the coordinates of the underlying model this returns the row index in terms of the view.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#convertRowIndexToView(int)\"\u003econvertRowIndexToView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the row index in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is outside the range of the model"
        ],
        "return": [
          "row index in terms of the view, or -1 if index has been filtered out of the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convertRowIndexToModel",
      "comment": "Returns the location of index in terms of the underlying model. That is, for the row index in the coordinates of the view this returns the row index in terms of the underlying model.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#convertRowIndexToModel(int)\"\u003econvertRowIndexToModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the row index in terms of the underlying view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is outside the range of the view"
        ],
        "return": [
          "row index in terms of the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sort",
      "comment": "Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter. An empty sortKeys list indicates that the view should unsorted, the same as the model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#setRowFilter(javax.swing.RowFilter)\"\u003e\u003ccode\u003esetRowFilter(javax.swing.RowFilter\u0026lt;? super M, ? super I\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html#setSortKeys(java.util.List)\"\u003e\u003ccode\u003esetSortKeys(java.util.List\u0026lt;? extends javax.swing.RowSorter.SortKey\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "useToString",
      "comment": "Returns whether or not to convert the value to a string before doing comparisons when sorting. If true ModelWrapper.getStringValueAt will be used, otherwise ModelWrapper.getValueAt will be used. It is up to subclasses, such as TableRowSorter, to honor this value in their ModelWrapper implementation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the index of the column to test, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumn\u003c/code\u003e is not valid"
        ],
        "return": [
          "true if values are to be converted to strings before doing comparisons when sorting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "comparator",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setComparator",
      "comment": "Sets the Comparator to use when sorting the specified column. This does not trigger a sort. If you want to sort after setting the comparator you need to explicitly invoke sort.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the index of the column the \n\u003ccode\u003eComparator\u003c/code\u003e is to be used for, in terms of the underlying model",
          "\u003ccode\u003ecomparator\u003c/code\u003e - the \n\u003ccode\u003eComparator\u003c/code\u003e to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumn\u003c/code\u003e is outside the range of the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComparator",
      "comment": "Returns the Comparator for the specified column. This will return null if a Comparator has not been specified for the column.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column to fetch the \n\u003ccode\u003eComparator\u003c/code\u003e for, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if column is outside the range of the underlying model"
        ],
        "return": [
          "the \n\u003ccode\u003eComparator\u003c/code\u003e for the specified column"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewRowCount",
      "comment": "Returns the number of rows in the view. If the contents have been filtered this might differ from the row count of the underlying model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getModelRowCount()\"\u003e\u003ccode\u003eRowSorter.getModelRowCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getViewRowCount()\"\u003egetViewRowCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "number of rows in the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModelRowCount",
      "comment": "Returns the number of rows in the underlying model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getViewRowCount()\"\u003e\u003ccode\u003eRowSorter.getViewRowCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#getModelRowCount()\"\u003egetModelRowCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "number of rows in the underlying model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelStructureChanged",
      "comment": "Invoked when the underlying model structure has completely changed. For example, if the number of columns in a TableModel changed, this method would be invoked. You normally do not call this method. This method is public to allow view classes to call it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#modelStructureChanged()\"\u003emodelStructureChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "allRowsChanged",
      "comment": "Invoked when the contents of the underlying model have completely changed. The structure of the table is the same, only the contents have changed. This is typically sent when it is too expensive to characterize the change in terms of the other methods. You normally do not call this method. This method is public to allow view classes to call it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#allRowsChanged()\"\u003eallRowsChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "firstRow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endRow",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rowsInserted",
      "comment": "Invoked when rows have been inserted into the underlying model in the specified range (inclusive). The arguments give the indices of the effected range. The first argument is in terms of the model before the change, and must be less than or equal to the size of the model before the change. The second argument is in terms of the model after the change and must be less than the size of the model after the change. For example, if you have a 5-row model and add 3 items to the end of the model the indices are 5, 7. You normally do not call this method. This method is public to allow view classes to call it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#rowsInserted(int,int)\"\u003erowsInserted\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is invalid, or \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "firstRow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endRow",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rowsDeleted",
      "comment": "Invoked when rows have been deleted from the underlying model in the specified range (inclusive). The arguments give the indices of the effected range and are in terms of the model before the change. For example, if you have a 5-row model and delete 3 items from the end of the model the indices are 2, 4. You normally do not call this method. This method is public to allow view classes to call it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#rowsDeleted(int,int)\"\u003erowsDeleted\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is outside the range of the model before the change, or \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "firstRow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endRow",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rowsUpdated",
      "comment": "Invoked when rows have been changed in the underlying model between the specified range (inclusive). You normally do not call this method. This method is public to allow view classes to call it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#rowsUpdated(int,int)\"\u003erowsUpdated\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row, in terms of the underlying model",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is outside the range of the underlying model, or \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "firstRow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endRow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "column",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rowsUpdated",
      "comment": "Invoked when the column in the rows have been updated in the underlying model between the specified range. You normally do not call this method. This method is public to allow view classes to call it.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html#rowsUpdated(int,int,int)\"\u003erowsUpdated\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/RowSorter.html\" title\u003d\"class in javax.swing\"\u003eRowSorter\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultRowSorter.html\" title\u003d\"type parameter in DefaultRowSorter\"\u003eM\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efirstRow\u003c/code\u003e - the first row, in terms of the underlying model",
          "\u003ccode\u003eendRow\u003c/code\u003e - the last row, in terms of the underlying model",
          "\u003ccode\u003ecolumn\u003c/code\u003e - the column that has changed, in terms of the underlying model"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either argument is outside the range of the underlying model after the change, \n\u003ccode\u003efirstRow\u003c/code\u003e \u0026gt; \n\u003ccode\u003eendRow\u003c/code\u003e, or \n\u003ccode\u003ecolumn\u003c/code\u003e is outside the range of the underlying model"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an empty DefaultRowSorter.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.DefaultRowSorter$ModelWrapper"
  ],
  "genericParameters": [
    {
      "name": "M",
      "type": "Variable"
    },
    {
      "name": "I",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.DefaultRowSorter",
  "comment": "An implementation of \n\u003ccode\u003eRowSorter\u003c/code\u003e that provides sorting and filtering around a grid-based data model. Beyond creating and installing a \n\u003ccode\u003eRowSorter\u003c/code\u003e, you very rarely need to interact with one directly. Refer to \n\u003ca href\u003d\"table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e for a concrete implementation of \n\u003ccode\u003eRowSorter\u003c/code\u003e for \n\u003ccode\u003eJTable\u003c/code\u003e. \n\u003cp\u003e Sorting is done based on the current \u003ccode\u003eSortKey\u003c/code\u003es, in order. If two objects are equal (the \u003ccode\u003eComparator\u003c/code\u003e for the column returns 0) the next \u003ccode\u003eSortKey\u003c/code\u003e is used. If no \u003ccode\u003eSortKey\u003c/code\u003es remain or the order is \u003ccode\u003eUNSORTED\u003c/code\u003e, then the order of the rows in the model is used. \u003c/p\u003e\n\u003cp\u003e Sorting of each column is done by way of a \u003ccode\u003eComparator\u003c/code\u003e that you can specify using the \u003ccode\u003esetComparator\u003c/code\u003e method. If a \u003ccode\u003eComparator\u003c/code\u003e has not been specified, the \u003ccode\u003eComparator\u003c/code\u003e returned by \u003ccode\u003eCollator.getInstance()\u003c/code\u003e is used on the results of calling \u003ccode\u003etoString\u003c/code\u003e on the underlying objects. The \u003ccode\u003eComparator\u003c/code\u003e is never passed \u003ccode\u003enull\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e value is treated as occurring before a non-\u003ccode\u003enull\u003c/code\u003e value, and two \u003ccode\u003enull\u003c/code\u003e values are considered equal. \u003c/p\u003e\n\u003cp\u003e If you specify a \u003ccode\u003eComparator\u003c/code\u003e that casts its argument to a type other than that provided by the model, a \u003ccode\u003eClassCastException\u003c/code\u003e will be thrown when the data is sorted. \u003c/p\u003e\n\u003cp\u003e In addition to sorting, \u003ccode\u003eDefaultRowSorter\u003c/code\u003e provides the ability to filter rows. Filtering is done by way of a \u003ccode\u003eRowFilter\u003c/code\u003e that is specified using the \u003ccode\u003esetRowFilter\u003c/code\u003e method. If no filter has been specified all rows are included. \u003c/p\u003e\n\u003cp\u003e By default, rows are in unsorted order (the same as the model) and every column is sortable. The default \u003ccode\u003eComparator\u003c/code\u003es are documented in the subclasses (for example, \u003ca href\u003d\"table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e). \u003c/p\u003e\n\u003cp\u003e If the underlying model structure changes (the \u003ccode\u003emodelStructureChanged\u003c/code\u003e method is invoked) the following are reset to their default values: \u003ccode\u003eComparator\u003c/code\u003es by column, current sort order, and whether each column is sortable. To find the default \u003ccode\u003eComparator\u003c/code\u003es, see the concrete implementation (for example, \u003ca href\u003d\"table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e). The default sort order is unsorted (the same as the model), and columns are sortable by default. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eDefaultRowSorter\u003c/code\u003e is an abstract class. Concrete subclasses must provide access to the underlying data by invoking \u003ccode\u003esetModelWrapper\u003c/code\u003e. The \u003ccode\u003esetModelWrapper\u003c/code\u003e method \u003cb\u003emust\u003c/b\u003e be invoked soon after the constructor is called, ideally from within the subclass\u0027s constructor. Undefined behavior will result if you use a \u003ccode\u003e DefaultRowSorter\u003c/code\u003e without specifying a \u003ccode\u003eModelWrapper\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eDefaultRowSorter\u003c/code\u003e has two formal type parameters. The first type parameter corresponds to the class of the model, for example \u003ccode\u003eDefaultTableModel\u003c/code\u003e. The second type parameter corresponds to the class of the identifier passed to the \u003ccode\u003eRowFilter\u003c/code\u003e. Refer to \u003ccode\u003eTableRowSorter\u003c/code\u003e and \u003ccode\u003eRowFilter\u003c/code\u003e for more details on the type parameters.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/TableRowSorter.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eTableRowSorter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/table/DefaultTableModel.html\" title\u003d\"class in javax.swing.table\"\u003e\u003ccode\u003eDefaultTableModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}