{
  "packageName": "javax.swing",
  "simpleName": "CellEditor",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCellEditorValue",
      "comment": "Returns the value contained in the editor.",
      "tagMap": {
        "return": [
          "the value contained in the editor"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.EventObject",
            "type": "Class"
          },
          "field": {
            "name": "anEvent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCellEditable",
      "comment": "Asks the editor if it can start editing using anEvent. anEvent is in the invoking component coordinate system. The editor can not assume the Component returned by getCellEditorComponent is installed. This method is intended for the use of client to avoid the cost of setting up and installing the editor component if editing is not possible. If editing can be started this method returns true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/CellEditor.html#shouldSelectCell(java.util.EventObject)\"\u003e\u003ccode\u003eshouldSelectCell(java.util.EventObject)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanEvent\u003c/code\u003e - the event the editor should use to consider whether to begin editing or not"
        ],
        "return": [
          "true if editing can be started"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.EventObject",
            "type": "Class"
          },
          "field": {
            "name": "anEvent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shouldSelectCell",
      "comment": "Returns true if the editing cell should be selected, false otherwise. Typically, the return value is true, because is most cases the editing cell should be selected. However, it is useful to return false to keep the selection from changing for some types of edits. eg. A table that contains a column of check boxes, the user might want to be able to change those checkboxes without altering the selection. (See Netscape Communicator for just such an example) Of course, it is up to the client of the editor to use the return value, but it doesn\u0027t need to if it doesn\u0027t want to.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/CellEditor.html#isCellEditable(java.util.EventObject)\"\u003e\u003ccode\u003eisCellEditable(java.util.EventObject)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanEvent\u003c/code\u003e - the event the editor should use to start editing"
        ],
        "return": [
          "true if the editor would like the editing cell to be selected; otherwise returns false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopCellEditing",
      "comment": "Tells the editor to stop editing and accept any partially edited value as the value of the editor. The editor returns false if editing was not stopped; this is useful for editors that validate and can not accept invalid entries.",
      "tagMap": {
        "return": [
          "true if editing was stopped; false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "cancelCellEditing",
      "comment": "Tells the editor to cancel editing and not accept any partially edited value.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.CellEditorListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addCellEditorListener",
      "comment": "Adds a listener to the list that\u0027s notified when the editor stops, or cancels editing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the CellEditorListener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.CellEditorListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeCellEditorListener",
      "comment": "Removes a listener from the list that\u0027s notified",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the CellEditorListener"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.CellEditor",
  "comment": "This interface defines the methods any general editor should be able to implement. \n\u003cp\u003e Having this interface enables complex components (the client of the editor) such as \u003ccode\u003eJTree\u003c/code\u003e and \u003ccode\u003eJTable\u003c/code\u003e to allow any generic editor to edit values in a table cell, or tree cell, etc. Without this generic editor interface, \u003ccode\u003eJTable\u003c/code\u003e would have to know about specific editors, such as \u003ccode\u003eJTextField\u003c/code\u003e, \u003ccode\u003eJCheckBox\u003c/code\u003e, \u003ccode\u003eJComboBox\u003c/code\u003e, etc. In addition, without this interface, clients of editors such as \u003ccode\u003eJTable\u003c/code\u003e would not be able to work with any editors developed in the future by the user or a 3rd party ISV. \u003c/p\u003e\n\u003cp\u003e To use this interface, a developer creating a new editor can have the new component implement the interface. Or the developer can choose a wrapper based approach and provide a companion object which implements the \u003ccode\u003eCellEditor\u003c/code\u003e interface (See \u003ccode\u003eDefaultCellEditor\u003c/code\u003e for example). The wrapper approach is particularly useful if the user want to use a 3rd party ISV editor with \u003ccode\u003eJTable\u003c/code\u003e, but the ISV didn\u0027t implement the \u003ccode\u003eCellEditor\u003c/code\u003e interface. The user can simply create an object that contains an instance of the 3rd party editor object and \"translate\" the \u003ccode\u003eCellEditor\u003c/code\u003e API into the 3rd party editor\u0027s API.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CellEditorListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eCellEditorListener\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}