{
  "packageName": "javax.swing",
  "simpleName": "ListCellRenderer",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JList",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "javax.swing.ListCellRenderer",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "javax.swing.ListCellRenderer",
            "name": "E",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isSelected",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "cellHasFocus",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getListCellRendererComponent",
      "comment": "Return a component that has been configured to display the specified value. That component\u0027s paint method is then called to \"render\" the cell. If it is necessary to compute the dimensions of a list because the list cells do not have a fixed size, this method is called to generate a component on which getPreferredSize can be invoked.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListSelectionModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eListSelectionModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ListModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eListModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - The JList we\u0027re painting.",
          "\u003ccode\u003evalue\u003c/code\u003e - The value returned by list.getModel().getElementAt(index).",
          "\u003ccode\u003eindex\u003c/code\u003e - The cells index.",
          "\u003ccode\u003eisSelected\u003c/code\u003e - True if the specified cell was selected.",
          "\u003ccode\u003ecellHasFocus\u003c/code\u003e - True if the specified cell has the focus."
        ],
        "return": [
          "A component whose paint() method will render the specified value."
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.ListCellRenderer",
  "comment": "Identifies components that can be used as \"rubber stamps\" to paint the cells in a JList. For example, to use a JLabel as a ListCellRenderer, you would write something like this: \n\u003cpre\u003e \u003ccode\u003e\n class MyCellRenderer extends JLabel implements ListCellRenderer\u0026lt;Object\u0026gt; {\n     public MyCellRenderer() {\n         setOpaque(true);\n     }\n\n     public Component getListCellRendererComponent(JList\u0026lt;?\u0026gt; list,\n                                                   Object value,\n                                                   int index,\n                                                   boolean isSelected,\n                                                   boolean cellHasFocus) {\n\n         setText(value.toString());\n\n         Color background;\n         Color foreground;\n\n         // check if this cell represents the current DnD drop location\n         JList.DropLocation dropLocation \u003d list.getDropLocation();\n         if (dropLocation !\u003d null\n                 \u0026amp;\u0026amp; !dropLocation.isInsert()\n                 \u0026amp;\u0026amp; dropLocation.getIndex() \u003d\u003d index) {\n\n             background \u003d Color.BLUE;\n             foreground \u003d Color.WHITE;\n\n         // check if this cell is selected\n         } else if (isSelected) {\n             background \u003d Color.RED;\n             foreground \u003d Color.WHITE;\n\n         // unselected, and not the DnD drop location\n         } else {\n             background \u003d Color.WHITE;\n             foreground \u003d Color.BLACK;\n         };\n\n         setBackground(background);\n         setForeground(foreground);\n\n         return this;\n     }\n }\n \u003c/code\u003e\n \u003c/pre\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JList.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/DefaultListCellRenderer.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eDefaultListCellRenderer\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}