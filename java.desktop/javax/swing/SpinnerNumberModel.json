{
  "packageName": "javax.swing",
  "simpleName": "SpinnerNumberModel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.AbstractSpinnerModel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "minimum"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimum",
      "comment": "Changes the lower bound for numbers in this sequence. If minimum is null, then there is no lower bound. No bounds checking is done here; the new minimum value may invalidate the (minimum \u003c\u003d value \u003c\u003d maximum) invariant enforced by the constructors. This is to simplify updating the model, naturally one should ensure that the invariant is true before calling the getNextValue, getPreviousValue, or setValue methods. Typically this property is a Number of the same type as the value however it\u0027s possible to use any Comparable with a compareTo method for a Number with the same type as the value. For example if value was a Long, minimum might be a Date subclass defined like this:  MyDate extends Date {  // Date already implements Comparable\n     public int compareTo(Long o) {\n         long t \u003d getTime();\n         return (t \u003c o.longValue() ? -1 : (t \u003d\u003d o.longValue() ? 0 : 1));\n     }\n }\n This method fires a ChangeEvent if the minimum has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getMinimum()\"\u003e\u003ccode\u003egetMinimum()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setMaximum(java.lang.Comparable)\"\u003e\u003ccode\u003esetMaximum(java.lang.Comparable\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eminimum\u003c/code\u003e - a \n\u003ccode\u003eComparable\u003c/code\u003e that has a \n\u003ccode\u003ecompareTo\u003c/code\u003e method for \n\u003ccode\u003eNumber\u003c/code\u003es with the same type as \n\u003ccode\u003evalue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimum",
      "comment": "Returns the first number in this sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setMinimum(java.lang.Comparable)\"\u003e\u003ccode\u003esetMinimum(java.lang.Comparable\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eminimum\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "maximum"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximum",
      "comment": "Changes the upper bound for numbers in this sequence. If maximum is null, then there is no upper bound. No bounds checking is done here; the new maximum value may invalidate the (minimum \u003c\u003d value \u003c maximum) invariant enforced by the constructors. This is to simplify updating the model, naturally one should ensure that the invariant is true before calling the next, previous, or setValue methods. Typically this property is a Number of the same type as the value however it\u0027s possible to use any Comparable with a compareTo method for a Number with the same type as the value. See setMinimum(Comparable) for an example. This method fires a ChangeEvent if the maximum has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getMaximum()\"\u003e\u003ccode\u003egetMaximum()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setMinimum(java.lang.Comparable)\"\u003e\u003ccode\u003esetMinimum(java.lang.Comparable\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaximum\u003c/code\u003e - a \n\u003ccode\u003eComparable\u003c/code\u003e that has a \n\u003ccode\u003ecompareTo\u003c/code\u003e method for \n\u003ccode\u003eNumber\u003c/code\u003es with the same type as \n\u003ccode\u003evalue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximum",
      "comment": "Returns the last number in the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setMaximum(java.lang.Comparable)\"\u003e\u003ccode\u003esetMaximum(java.lang.Comparable\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003emaximum\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "stepSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStepSize",
      "comment": "Changes the size of the value change computed by the getNextValue and getPreviousValue methods. An IllegalArgumentException is thrown if stepSize is null. This method fires a ChangeEvent if the stepSize has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getNextValue()\"\u003e\u003ccode\u003egetNextValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getPreviousValue()\"\u003e\u003ccode\u003egetPreviousValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getStepSize()\"\u003e\u003ccode\u003egetStepSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estepSize\u003c/code\u003e - the size of the value change computed by the \n\u003ccode\u003egetNextValue\u003c/code\u003e and \n\u003ccode\u003egetPreviousValue\u003c/code\u003e methods"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStepSize",
      "comment": "Returns the size of the value change computed by the getNextValue and getPreviousValue methods.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setStepSize(java.lang.Number)\"\u003e\u003ccode\u003esetStepSize(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003estepSize\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextValue",
      "comment": "Returns the next number in the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getNextValue()\"\u003e\u003ccode\u003eSpinnerModel.getNextValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getPreviousValue()\"\u003e\u003ccode\u003egetPreviousValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setStepSize(java.lang.Number)\"\u003e\u003ccode\u003esetStepSize(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getNextValue()\"\u003egetNextValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003evalue + stepSize\u003c/code\u003e or \n\u003ccode\u003enull\u003c/code\u003e if the sum exceeds \n\u003ccode\u003emaximum\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreviousValue",
      "comment": "Returns the previous number in the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getPreviousValue()\"\u003e\u003ccode\u003eSpinnerModel.getPreviousValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getNextValue()\"\u003e\u003ccode\u003egetNextValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setStepSize(java.lang.Number)\"\u003e\u003ccode\u003esetStepSize(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getPreviousValue()\"\u003egetPreviousValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003evalue - stepSize\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if the sum is less than \n\u003ccode\u003eminimum\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNumber",
      "comment": "Returns the value of the current element of the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setValue(java.lang.Object)\"\u003e\u003ccode\u003esetValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value property"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Returns the value of the current element of the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#setValue(java.lang.Object)\"\u003e\u003ccode\u003esetValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getNumber()\"\u003e\u003ccode\u003egetNumber()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getValue()\"\u003egetValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValue",
      "comment": "Sets the current value for this sequence. If value is null, or not a Number, an IllegalArgumentException is thrown. No bounds checking is done here; the new value may invalidate the (minimum \u003c\u003d value \u003c\u003d maximum) invariant enforced by the constructors. It\u0027s also possible to set the value to be something that wouldn\u0027t naturally occur in the sequence, i.e. a value that\u0027s not modulo the stepSize. This is to simplify updating the model, and to accommodate spinners that don\u0027t want to restrict values that have been directly entered by the user. Naturally, one should ensure that the (minimum \u003c\u003d value \u003c\u003d maximum) invariant is true before calling the next, previous, or setValue methods. This method fires a ChangeEvent if the value has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getNumber()\"\u003e\u003ccode\u003egetNumber()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html#getValue()\"\u003e\u003ccode\u003egetValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#setValue(java.lang.Object)\"\u003esetValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the current (non \n\u003ccode\u003enull\u003c/code\u003e) \n\u003ccode\u003eNumber\u003c/code\u003e for this sequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evalue\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or not a \n\u003ccode\u003eNumber\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "minimum"
          }
        },
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "maximum"
          }
        },
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "stepSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SpinnerModel that represents a closed sequence of numbers from minimum to maximum. The nextValue and previousValue methods compute elements of the sequence by adding or subtracting stepSize respectively. All of the parameters must be mutually Comparable, value and stepSize must be instances of Integer Long, Float, or Double. The minimum and maximum parameters can be null to indicate that the range doesn\u0027t have an upper or lower bound. If value or stepSize is null, or if both minimum and maximum are specified and minimum \u003e maximum then an IllegalArgumentException is thrown. Similarly if (minimum \u003c\u003d value \u003c\u003d maximum) is false, an IllegalArgumentException is thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the current (non \n\u003ccode\u003enull\u003c/code\u003e) value of the model",
          "\u003ccode\u003eminimum\u003c/code\u003e - the first number in the sequence or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003emaximum\u003c/code\u003e - the last number in the sequence or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003estepSize\u003c/code\u003e - the difference between elements of the sequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if stepSize or value is \n\u003ccode\u003enull\u003c/code\u003e or if the following expression is false: \n\u003ccode\u003eminimum \u0026lt;\u003d value \u0026lt;\u003d maximum\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minimum"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximum"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "stepSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SpinnerNumberModel with the specified value, minimum/maximum bounds, and stepSize.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the current value of the model",
          "\u003ccode\u003eminimum\u003c/code\u003e - the first number in the sequence",
          "\u003ccode\u003emaximum\u003c/code\u003e - the last number in the sequence",
          "\u003ccode\u003estepSize\u003c/code\u003e - the difference between elements of the sequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the following expression is false: \n\u003ccode\u003eminimum \u0026lt;\u003d value \u0026lt;\u003d maximum\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "minimum"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "maximum"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "stepSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SpinnerNumberModel with the specified value, minimum/maximum bounds, and stepSize.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the current value of the model",
          "\u003ccode\u003eminimum\u003c/code\u003e - the first number in the sequence",
          "\u003ccode\u003emaximum\u003c/code\u003e - the last number in the sequence",
          "\u003ccode\u003estepSize\u003c/code\u003e - the difference between elements of the sequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the following expression is false: \n\u003ccode\u003eminimum \u0026lt;\u003d value \u0026lt;\u003d maximum\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SpinnerNumberModel with no minimum or maximum value, stepSize equal to one, and an initial value of zero.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.SpinnerNumberModel",
  "comment": "A \n\u003ccode\u003eSpinnerModel\u003c/code\u003e for sequences of numbers. The upper and lower bounds of the sequence are defined by properties called \n\u003ccode\u003eminimum\u003c/code\u003e and \n\u003ccode\u003emaximum\u003c/code\u003e. The size of the increase or decrease computed by the \n\u003ccode\u003enextValue\u003c/code\u003e and \n\u003ccode\u003epreviousValue\u003c/code\u003e methods is defined by a property called \n\u003ccode\u003estepSize\u003c/code\u003e. The \n\u003ccode\u003eminimum\u003c/code\u003e and \n\u003ccode\u003emaximum\u003c/code\u003e properties can be \n\u003ccode\u003enull\u003c/code\u003e to indicate that the sequence has no lower or upper limit. All of the properties in this class are defined in terms of two generic types: \n\u003ccode\u003eNumber\u003c/code\u003e and \n\u003ccode\u003eComparable\u003c/code\u003e, so that all Java numeric types may be accommodated. Internally, there\u0027s only support for values whose type is one of the primitive \n\u003ccode\u003eNumber\u003c/code\u003e types: \n\u003ccode\u003eDouble\u003c/code\u003e, \n\u003ccode\u003eFloat\u003c/code\u003e, \n\u003ccode\u003eLong\u003c/code\u003e, \n\u003ccode\u003eInteger\u003c/code\u003e, \n\u003ccode\u003eShort\u003c/code\u003e, or \n\u003ccode\u003eByte\u003c/code\u003e. \n\u003cp\u003e To create a \u003ccode\u003eSpinnerNumberModel\u003c/code\u003e for the integer range zero to one hundred, with fifty as the initial value, one could write: \u003c/p\u003e\n\u003cpre\u003e Integer value \u003d Integer.valueOf(50);\n Integer min \u003d Integer.valueOf(0);\n Integer max \u003d Integer.valueOf(100);\n Integer step \u003d Integer.valueOf(1);\n SpinnerNumberModel model \u003d new SpinnerNumberModel(value, min, max, step);\n int fifty \u003d model.getNumber().intValue();\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Spinners for integers and doubles are common, so special constructors for these cases are provided. For example to create the model in the previous example, one could also write: \u003c/p\u003e\n\u003cpre\u003e SpinnerNumberModel model \u003d new SpinnerNumberModel(50, 0, 100, 1);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This model inherits a \u003ccode\u003eChangeListener\u003c/code\u003e. The \u003ccode\u003eChangeListeners\u003c/code\u003e are notified whenever the model\u0027s \u003ccode\u003evalue\u003c/code\u003e, \u003ccode\u003estepSize\u003c/code\u003e, \u003ccode\u003eminimum\u003c/code\u003e, or \u003ccode\u003emaximum\u003c/code\u003e properties changes.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSpinner.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJSpinner\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSpinnerModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eAbstractSpinnerModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerListModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpinnerListModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpinnerDateModel\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}