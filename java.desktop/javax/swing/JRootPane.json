{
  "packageName": "javax.swing",
  "simpleName": "JRootPane",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NONE",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should not provide any sort of Window decorations.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.NONE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FRAME",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Frame.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.FRAME\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PLAIN_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.PLAIN_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INFORMATION_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog used to display an informational message.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.INFORMATION_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ERROR_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog used to display an error message.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.ERROR_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COLOR_CHOOSER_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog used to display a JColorChooser.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.COLOR_CHOOSER_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FILE_CHOOSER_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog used to display a JFileChooser.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.FILE_CHOOSER_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "QUESTION_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog used to present a question to the user.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.QUESTION_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WARNING_DIALOG",
      "comment": "Constant used for the windowDecorationStyle property. Indicates that the JRootPane should provide decorations appropriate for a Dialog used to display a warning message.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JRootPane.WARNING_DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.JMenuBar",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "menuBar",
      "comment": "The menu bar.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "contentPane",
      "comment": "The content pane.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.JLayeredPane",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "layeredPane",
      "comment": "The layered pane that manages the menu bar and content pane.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "glassPane",
      "comment": "The glass pane that overlays the menu bar and content pane, so it can intercept mouse movements and such.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.JButton",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "defaultButton",
      "comment": "The button that gets activated when the pane has the focus and a UI-specific action like pressing the Enter key occurs.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "aFlag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDoubleBuffered",
      "comment": "Sets whether this component should use a buffer to paint. If set to true, all the drawing from this component will be done in an offscreen painting buffer. The offscreen painting buffer will the be copied onto the screen. If a Component is buffered and one of its ancestor is also buffered, the ancestor buffer will be used.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setDoubleBuffered(boolean)\"\u003esetDoubleBuffered\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaFlag\u003c/code\u003e - if true, set this component to be double buffered"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWindowDecorationStyle",
      "comment": "Returns a constant identifying the type of Window decorations the JRootPane is providing.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#setWindowDecorationStyle(int)\"\u003e\u003ccode\u003esetWindowDecorationStyle(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "One of \n\u003ccode\u003eNONE\u003c/code\u003e, \n\u003ccode\u003eFRAME\u003c/code\u003e, \n\u003ccode\u003ePLAIN_DIALOG\u003c/code\u003e, \n\u003ccode\u003eINFORMATION_DIALOG\u003c/code\u003e, \n\u003ccode\u003eERROR_DIALOG\u003c/code\u003e, \n\u003ccode\u003eCOLOR_CHOOSER_DIALOG\u003c/code\u003e, \n\u003ccode\u003eFILE_CHOOSER_DIALOG\u003c/code\u003e, \n\u003ccode\u003eQUESTION_DIALOG\u003c/code\u003e or \n\u003ccode\u003eWARNING_DIALOG\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "windowDecorationStyle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWindowDecorationStyle",
      "comment": "Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide. The default is to provide no Window decorations (NONE). This is only a hint, and some look and feels may not support this. This is a bound property.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "JRootPane.NONE",
                "JRootPane.FRAME",
                "JRootPane.PLAIN_DIALOG",
                "JRootPane.INFORMATION_DIALOG",
                "JRootPane.ERROR_DIALOG",
                "JRootPane.COLOR_CHOOSER_DIALOG",
                "JRootPane.FILE_CHOOSER_DIALOG",
                "JRootPane.QUESTION_DIALOG",
                "JRootPane.WARNING_DIALOG"
              ]
            },
            {
              "name": "escription",
              "value": "Identifies the type of Window decorations to provide"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDialog.html#setDefaultLookAndFeelDecorated(boolean)\"\u003e\u003ccode\u003eJDialog.setDefaultLookAndFeelDecorated(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html#setDefaultLookAndFeelDecorated(boolean)\"\u003e\u003ccode\u003eJFrame.setDefaultLookAndFeelDecorated(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getSupportsWindowDecorations()\"\u003e\u003ccode\u003eLookAndFeel.getSupportsWindowDecorations()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewindowDecorationStyle\u003c/code\u003e - Constant identifying Window decorations to provide."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estyle\u003c/code\u003e is not one of: \n\u003ccode\u003eNONE\u003c/code\u003e, \n\u003ccode\u003eFRAME\u003c/code\u003e, \n\u003ccode\u003ePLAIN_DIALOG\u003c/code\u003e, \n\u003ccode\u003eINFORMATION_DIALOG\u003c/code\u003e, \n\u003ccode\u003eERROR_DIALOG\u003c/code\u003e, \n\u003ccode\u003eCOLOR_CHOOSER_DIALOG\u003c/code\u003e, \n\u003ccode\u003eFILE_CHOOSER_DIALOG\u003c/code\u003e, \n\u003ccode\u003eQUESTION_DIALOG\u003c/code\u003e, or \n\u003ccode\u003eWARNING_DIALOG\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.RootPaneUI",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the L\u0026F object that renders this component.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003eLabelUI\u003c/code\u003e object"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.plaf.RootPaneUI",
            "type": "Class"
          },
          "name": "ui",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the L\u0026F object that renders this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the Component\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the \n\u003ccode\u003eLabelUI\u003c/code\u003e L\u0026amp;F object"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the UI property to a value from the current look and feel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns a string that specifies the name of the L\u0026F class that renders this component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"RootPaneUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JLayeredPane",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLayeredPane",
      "comment": "Called by the constructor methods to create the default layeredPane. Bt default it creates a new JLayeredPane.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003elayeredPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createContentPane",
      "comment": "Called by the constructor methods to create the default contentPane. By default this method creates a new JComponent add sets a BorderLayout as its LayoutManager.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003econtentPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createGlassPane",
      "comment": "Called by the constructor methods to create the default glassPane. By default this method creates a new JComponent with visibility set to false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003eglassPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.LayoutManager",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createRootLayout",
      "comment": "Called by the constructor methods to create the default layoutManager.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003elayoutManager\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JMenuBar",
            "type": "Class"
          },
          "name": "menu",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setJMenuBar",
      "comment": "Adds or changes the menu bar used in the layered pane.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emenu\u003c/code\u003e - the \n\u003ccode\u003eJMenuBar\u003c/code\u003e to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JMenuBar",
            "type": "Class"
          },
          "name": "menu",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMenuBar",
      "comment": "Specifies the menu bar value.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emenu\u003c/code\u003e - the \n\u003ccode\u003eJMenuBar\u003c/code\u003e to add."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JMenuBar",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getJMenuBar",
      "comment": "Returns the menu bar from the layered pane.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eJMenuBar\u003c/code\u003e used in the pane"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JMenuBar",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMenuBar",
      "comment": "Returns the menu bar value.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eJMenuBar\u003c/code\u003e used in the pane"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "content",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setContentPane",
      "comment": "Sets the content pane -- the container that holds the components parented by the root pane. Swing\u0027s painting architecture requires an opaque JComponent in the containment hierarchy. This is typically provided by the content pane. If you replace the content pane it is recommended you replace it with an opaque JComponent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the \n\u003ccode\u003eContainer\u003c/code\u003e to use for component-contents"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - (a runtime exception) if the content pane parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContentPane",
      "comment": "Returns the content pane -- the container that holds the components parented by the root pane.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eContainer\u003c/code\u003e that holds the component-contents"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JLayeredPane",
            "type": "Class"
          },
          "name": "layered",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLayeredPane",
      "comment": "Sets the layered pane for the root pane. The layered pane typically holds a content pane and an optional JMenuBar.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayered\u003c/code\u003e - the \n\u003ccode\u003eJLayeredPane\u003c/code\u003e to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - (a runtime exception) if the layered pane parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JLayeredPane",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayeredPane",
      "comment": "Gets the layered pane used by the root pane. The layered pane typically holds a content pane and an optional JMenuBar.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eJLayeredPane\u003c/code\u003e currently in use"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "glass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGlassPane",
      "comment": "Sets a specified Component to be the glass pane for this root pane. The glass pane should normally be a lightweight, transparent component, because it will be made visible when ever the root pane needs to grab input events. The new glass pane\u0027s visibility is changed to match that of the current glass pane. An implication of this is that care must be taken when you want to replace the glass pane and make it visible. Either of the following will work:    root.setGlassPane(newGlassPane);\n   newGlassPane.setVisible(true);\n or:    root.getGlassPane().setVisible(true);\n   root.setGlassPane(newGlassPane);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eglass\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e to use as the glass pane for this \n\u003ccode\u003eJRootPane\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eglass\u003c/code\u003e parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGlassPane",
      "comment": "Returns the current glass pane for this JRootPane.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#setGlassPane(java.awt.Component)\"\u003e\u003ccode\u003esetGlassPane(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current glass pane"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isValidateRoot",
      "comment": "If a descendant of this JRootPane calls revalidate, validate from here on down. Deferred requests to layout a component and its descendents again. For example, calls to revalidate, are pushed upwards to either a JRootPane or a JScrollPane because both classes override isValidateRoot to return true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isValidateRoot()\"\u003e\u003ccode\u003eJComponent.isValidateRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isValidateRoot()\"\u003e\u003ccode\u003eContainer.isValidateRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isValidateRoot()\"\u003eisValidateRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOptimizedDrawingEnabled",
      "comment": "The glassPane and contentPane have the same bounds, which means JRootPane does not tiles its children and this should return false. On the other hand, the glassPane is normally not visible, and so this can return true if the glassPane isn\u0027t visible. Therefore, the return value here depends upon the visibility of the glassPane.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isOptimizedDrawingEnabled()\"\u003eisOptimizedDrawingEnabled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this component\u0027s children don\u0027t overlap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JButton",
            "type": "Class"
          },
          "name": "defaultButton",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultButton",
      "comment": "Sets the defaultButton property, which determines the current default button for this JRootPane. The default button is the button which will be activated when a UI-defined activation event (typically the Enter key) occurs in the root pane regardless of whether or not the button has keyboard focus (unless there is another component within the root pane which consumes the activation event, such as a JTextPane). For default activation to work, the button must be an enabled descendent of the root pane when activation occurs. To remove a default button from this root pane, set this property to null.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "escription",
              "value": "The button activated by default in this root pane"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JButton.html#isDefaultButton()\"\u003e\u003ccode\u003eJButton.isDefaultButton()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edefaultButton\u003c/code\u003e - the \n\u003ccode\u003eJButton\u003c/code\u003e which is to be the default button"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JButton",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultButton",
      "comment": "Returns the value of the defaultButton property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JRootPane.html#setDefaultButton(javax.swing.JButton)\"\u003e\u003ccode\u003esetDefaultButton(javax.swing.JButton)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eJButton\u003c/code\u003e which is currently the default button"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "constraints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "addImpl",
      "comment": "Overridden to enforce the position of the glass component as the zero child.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component)\"\u003e\u003ccode\u003eContainer.add(Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component,int)\"\u003e\u003ccode\u003eContainer.add(Component, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component,java.lang.Object)\"\u003e\u003ccode\u003eContainer.add(Component, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eLayoutManager2\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addImpl(java.awt.Component,java.lang.Object,int)\"\u003eaddImpl\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be enhanced",
          "\u003ccode\u003econstraints\u003c/code\u003e - the constraints to be respected",
          "\u003ccode\u003eindex\u003c/code\u003e - the index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JRootPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJRootPane\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JRootPane. For root panes, the AccessibleContext takes the form of an AccessibleJRootPane. A new AccessibleJRootPane instance is created if necessary.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAccessibleJRootPane\u003c/code\u003e that serves as the \n\u003ccode\u003eAccessibleContext\u003c/code\u003e of this \n\u003ccode\u003eJRootPane\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JRootPane, setting up its glassPane, layeredPane, and contentPane.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.JRootPane$AccessibleJRootPane",
    "javax.swing.JRootPane$RootLayout"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JRootPane",
  "comment": "A lightweight container used behind the scenes by \n\u003ccode\u003eJFrame\u003c/code\u003e, \n\u003ccode\u003eJDialog\u003c/code\u003e, \n\u003ccode\u003eJWindow\u003c/code\u003e, \n\u003ccode\u003eJApplet\u003c/code\u003e, and \n\u003ccode\u003eJInternalFrame\u003c/code\u003e. For task-oriented information on functionality provided by root panes see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/rootpane.html\"\u003eHow to Use Root Panes\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial\u003c/em\u003e. \n\u003cp\u003e The following image shows the relationships between the classes that use root panes. \u003c/p\u003e\n\u003cp style\u003d\"text-align:center\"\u003e\u003cimg src\u003d\"doc-files/JRootPane-1.gif\" alt\u003d\"The following text describes this graphic.\" height\u003d\"484\" width\u003d\"629\"\u003e\u003c/p\u003e The \"heavyweight\" components (those that delegate to a peer, or native component on the host system) are shown with a darker, heavier box. The four heavyweight JFC/Swing containers (\n\u003ccode\u003eJFrame\u003c/code\u003e, \n\u003ccode\u003eJDialog\u003c/code\u003e, \n\u003ccode\u003eJWindow\u003c/code\u003e, and \n\u003ccode\u003eJApplet\u003c/code\u003e) are shown in relation to the AWT classes they extend. These four components are the only heavyweight containers in the Swing library. The lightweight container \n\u003ccode\u003eJInternalFrame\u003c/code\u003e is also shown. All five of these JFC/Swing containers implement the \n\u003ccode\u003eRootPaneContainer\u003c/code\u003e interface, and they all delegate their operations to a \n\u003ccode\u003eJRootPane\u003c/code\u003e (shown with a little \"handle\" on top). \n\u003cblockquote\u003e \n \u003cb\u003eNote:\u003c/b\u003e The \n \u003ccode\u003eJComponent\u003c/code\u003e method \n \u003ccode\u003egetRootPane\u003c/code\u003e can be used to obtain the \n \u003ccode\u003eJRootPane\u003c/code\u003e that contains a given component. \n\u003c/blockquote\u003e \n\u003cdiv style\u003d\"float:right;text-align:center;font-weight:bold\"\u003e \n \u003cp\u003eExample: \u003c/p\u003e\n \u003cp\u003e\u003cimg src\u003d\"doc-files/JRootPane-2.gif\" alt\u003d\"the following text describes this graphic.\" height\u003d\"386\" width\u003d\"349\"\u003e \u003c/p\u003e\n\u003c/div\u003e The diagram at right shows the structure of a \n\u003ccode\u003eJRootPane\u003c/code\u003e. A \n\u003ccode\u003eJRootpane\u003c/code\u003e is made up of a \n\u003ccode\u003eglassPane\u003c/code\u003e, an optional \n\u003ccode\u003emenuBar\u003c/code\u003e, and a \n\u003ccode\u003econtentPane\u003c/code\u003e. (The \n\u003ccode\u003eJLayeredPane\u003c/code\u003e manages the \n\u003ccode\u003emenuBar\u003c/code\u003e and the \n\u003ccode\u003econtentPane\u003c/code\u003e.) The \n\u003ccode\u003eglassPane\u003c/code\u003e sits over the top of everything, where it is in a position to intercept mouse movements. Since the \n\u003ccode\u003eglassPane\u003c/code\u003e (like the \n\u003ccode\u003econtentPane\u003c/code\u003e) can be an arbitrary component, it is also possible to set up the \n\u003ccode\u003eglassPane\u003c/code\u003e for drawing. Lines and images on the \n\u003ccode\u003eglassPane\u003c/code\u003e can then range over the frames underneath without being limited by their boundaries. \n\u003cp\u003e Although the \u003ccode\u003emenuBar\u003c/code\u003e component is optional, the \u003ccode\u003elayeredPane\u003c/code\u003e, \u003ccode\u003econtentPane\u003c/code\u003e, and \u003ccode\u003eglassPane\u003c/code\u003e always exist. Attempting to set them to \u003ccode\u003enull\u003c/code\u003e generates an exception. \u003c/p\u003e\n\u003cp\u003e To add components to the \u003ccode\u003eJRootPane\u003c/code\u003e (other than the optional menu bar), you add the object to the \u003ccode\u003econtentPane\u003c/code\u003e of the \u003ccode\u003eJRootPane\u003c/code\u003e, like this: \u003c/p\u003e\n\u003cpre\u003e       rootPane.getContentPane().add(child);\n \u003c/pre\u003e The same principle holds true for setting layout managers, removing components, listing children, etc. All these methods are invoked on the \n\u003ccode\u003econtentPane\u003c/code\u003e instead of on the \n\u003ccode\u003eJRootPane\u003c/code\u003e. \n\u003cblockquote\u003e \n \u003cb\u003eNote:\u003c/b\u003e The default layout manager for the \n \u003ccode\u003econtentPane\u003c/code\u003e is a \n \u003ccode\u003eBorderLayout\u003c/code\u003e manager. However, the \n \u003ccode\u003eJRootPane\u003c/code\u003e uses a custom \n \u003ccode\u003eLayoutManager\u003c/code\u003e. So, when you want to change the layout manager for the components you added to a \n \u003ccode\u003eJRootPane\u003c/code\u003e, be sure to use code like this: \n \u003cpre\u003e    rootPane.getContentPane().setLayout(new BoxLayout());\n \u003c/pre\u003e\n\u003c/blockquote\u003e If a \n\u003ccode\u003eJMenuBar\u003c/code\u003e component is set on the \n\u003ccode\u003eJRootPane\u003c/code\u003e, it is positioned along the upper edge of the frame. The \n\u003ccode\u003econtentPane\u003c/code\u003e is adjusted in location and size to fill the remaining area. (The \n\u003ccode\u003eJMenuBar\u003c/code\u003e and the \n\u003ccode\u003econtentPane\u003c/code\u003e are added to the \n\u003ccode\u003elayeredPane\u003c/code\u003e component at the \n\u003ccode\u003eJLayeredPane.FRAME_CONTENT_LAYER\u003c/code\u003e layer.) \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003elayeredPane\u003c/code\u003e is the parent of all children in the \u003ccode\u003eJRootPane\u003c/code\u003e -- both as the direct parent of the menu and the grandparent of all components added to the \u003ccode\u003econtentPane\u003c/code\u003e. It is an instance of \u003ccode\u003eJLayeredPane\u003c/code\u003e, which provides the ability to add components at several layers. This capability is very useful when working with menu popups, dialog boxes, and dragging -- situations in which you need to place a component on top of all other components in the pane. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eglassPane\u003c/code\u003e sits on top of all other components in the \u003ccode\u003eJRootPane\u003c/code\u003e. That provides a convenient place to draw above all other components, and makes it possible to intercept mouse events, which is useful both for dragging and for drawing. Developers can use \u003ccode\u003esetVisible\u003c/code\u003e on the \u003ccode\u003eglassPane\u003c/code\u003e to control when the \u003ccode\u003eglassPane\u003c/code\u003e displays over the other children. By default the \u003ccode\u003eglassPane\u003c/code\u003e is not visible. \u003c/p\u003e\n\u003cp\u003e The custom \u003ccode\u003eLayoutManager\u003c/code\u003e used by \u003ccode\u003eJRootPane\u003c/code\u003e ensures that: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eThe \u003ccode\u003eglassPane\u003c/code\u003e fills the entire viewable area of the \u003ccode\u003eJRootPane\u003c/code\u003e (bounds - insets). \u003c/li\u003e\n \u003cli\u003eThe \u003ccode\u003elayeredPane\u003c/code\u003e fills the entire viewable area of the \u003ccode\u003eJRootPane\u003c/code\u003e. (bounds - insets) \u003c/li\u003e\n \u003cli\u003eThe \u003ccode\u003emenuBar\u003c/code\u003e is positioned at the upper edge of the \u003ccode\u003elayeredPane\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eThe \u003ccode\u003econtentPane\u003c/code\u003e fills the entire viewable area, minus the \u003ccode\u003emenuBar\u003c/code\u003e, if present. \u003c/li\u003e\n\u003c/ol\u003e Any other views in the \n\u003ccode\u003eJRootPane\u003c/code\u003e view hierarchy are ignored. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If you replace the \u003ccode\u003eLayoutManager\u003c/code\u003e of the \u003ccode\u003eJRootPane\u003c/code\u003e, you are responsible for managing all of these views. So ordinarily you will want to be sure that you change the layout manager for the \u003ccode\u003econtentPane\u003c/code\u003e rather than for the \u003ccode\u003eJRootPane\u003c/code\u003e itself! \u003c/p\u003e\n\u003cp\u003e The painting architecture of Swing requires an opaque \u003ccode\u003eJComponent\u003c/code\u003e to exist in the containment hierarchy above all other components. This is typically provided by way of the content pane. If you replace the content pane, it is recommended that you make the content pane opaque by way of \u003ccode\u003esetOpaque(true)\u003c/code\u003e. Additionally, if the content pane overrides \u003ccode\u003epaintComponent\u003c/code\u003e, it will need to completely fill in the background in an opaque color in \u003ccode\u003epaintComponent\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JLayeredPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJLayeredPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JMenuBar.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJMenuBar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JWindow.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJWindow\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JDialog.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJDialog\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JApplet.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJApplet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JInternalFrame.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJInternalFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJComponent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoxLayout.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eBoxLayout\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"http://www.oracle.com/technetwork/articles/java/mixing-components-433992.html\"\u003e Mixing Heavy and Light Components\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}