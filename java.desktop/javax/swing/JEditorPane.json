{
  "packageName": "javax.swing",
  "simpleName": "JEditorPane",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.JTextComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "W3C_LENGTH_UNITS",
      "comment": "Key for a client property used to indicate whether w3c compliant length units are used for html rendering. By default this is not enabled; to enable it set the client property with this name to Boolean.TRUE.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JEditorPane.W3C_LENGTH_UNITS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HONOR_DISPLAY_PROPERTIES",
      "comment": "Key for a client property used to indicate whether the default font and foreground color from the component are used if a font or foreground color is not specified in the styled text. The default varies based on the look and feel; to enable it set the client property with this name to Boolean.TRUE.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JEditorPane.HONOR_DISPLAY_PROPERTIES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.HyperlinkListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addHyperlinkListener",
      "comment": "Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.HyperlinkListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeHyperlinkListener",
      "comment": "Removes a hyperlink listener.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.HyperlinkListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHyperlinkListeners",
      "comment": "Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eHyperLinkListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.HyperlinkEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireHyperlinkUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. This is normally called by the currently installed EditorKit if a content type that supports hyperlinks is currently active and there was activity with a link. The listener list is processed last to first.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "name": "page",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPage",
      "comment": "Sets the current URL being displayed. The content type of the pane is set, and if the editor kit for the pane is non-null, then a new default document is created and the URL is read into it. If the URL contains and reference location, the location will be scrolled to by calling the scrollToReference method. If the desired URL is the one currently being displayed, the document will not be reloaded. To force a document reload it is necessary to clear the stream description property of the document. The following code shows how this can be done:    Document doc \u003d jEditorPane.getDocument();\n   doc.putProperty(Document.StreamDescriptionProperty, null);\n If the desired URL is not the one currently being displayed, the getStream method is called to give subclasses control over the stream provided. This may load either synchronously or asynchronously depending upon the document returned by the EditorKit. If the Document is of type AbstractDocument and has a value returned by AbstractDocument.getAsynchronousLoadPriority that is greater than or equal to zero, the page will be loaded on a separate thread using that priority. If the document is loaded synchronously, it will be filled in with the stream prior to being installed into the editor with a call to setDocument, which is bound and will fire a property change event. If an IOException is thrown the partially loaded document will be discarded and neither the document or page property change events will be fired. If the document is successfully loaded and installed, a view will be built for it by the UI which will then be scrolled if necessary, and then the page property change event will be fired. If the document is loaded asynchronously, the document will be installed into the editor immediately using a call to setDocument which will fire a document property change event, then a thread will be created which will begin doing the actual loading. In this case, the page property change event will not be fired by the call to this method directly, but rather will be fired when the thread doing the loading has finished. It will also be fired on the event-dispatch thread. Since the calling thread can not throw an IOException in the event of failure on the other thread, the page property change event will be fired when the other thread is done whether the load was successful or not.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "the URL used to set content"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#getPage()\"\u003e\u003ccode\u003egetPage()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epage\u003c/code\u003e - the URL of the page"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - for a \n\u003ccode\u003enull\u003c/code\u003e or invalid page specification, or exception from the stream being read"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "name": "in",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "desc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "read",
      "comment": "This method initializes from a stream. If the kit is set to be of type HTMLEditorKit, and the desc parameter is an HTMLDocument, then it invokes the HTMLEditorKit to initiate the read. Otherwise it calls the superclass method which loads the model as plain text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#read(java.io.Reader,java.lang.Object)\"\u003e\u003ccode\u003eJTextComponent.read(java.io.Reader, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDocument(javax.swing.text.Document)\"\u003e\u003ccode\u003eJTextComponent.setDocument(javax.swing.text.Document)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the stream from which to read",
          "\u003ccode\u003edesc\u003c/code\u003e - an object describing the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - as thrown by the stream being used to initialize"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "name": "page",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getStream",
      "comment": "Fetches a stream for the given URL, which is about to be loaded by the setPage method. By default, this simply opens the URL and returns the stream. This can be reimplemented to do useful things like fetch the stream from a cache, monitor the progress of the stream, etc. This method is expected to have the side effect of establishing the content type, and therefore setting the appropriate EditorKit to use for loading the stream. If this the stream was an http connection, redirects will be followed and the resulting URL will be set as the Document.StreamDescriptionProperty so that relative URL\u0027s can be properly resolved.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epage\u003c/code\u003e - the URL of the page"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O problem occurs"
        ],
        "return": [
          "a stream for the URL which is about to be loaded"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "reference",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scrollToReference",
      "comment": "Scrolls the view to the given reference location (that is, the value returned by the URL.getRef method for the URL being displayed). By default, this method only knows how to locate a reference in an HTMLDocument. The implementation calls the scrollRectToVisible method to accomplish the actual scrolling. If scrolling to a reference location is needed for document types other than HTML, this method should be reimplemented. This method will have no effect if the component is not visible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereference\u003c/code\u003e - the named location to scroll to"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPage",
      "comment": "Gets the current URL being displayed. If a URL was not specified in the creation of the document, this will return null, and relative URL\u0027s will not be resolved.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the URL, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "url",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPage",
      "comment": "Sets the current URL being displayed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL for display"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - for a \n\u003ccode\u003enull\u003c/code\u003e or invalid URL specification"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Gets the class ID for the UI.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"EditorPaneUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.EditorKit",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultEditorKit",
      "comment": "Creates the default editor kit (PlainEditorKit) for when the component is first created.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the editor kit"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.EditorKit",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditorKit",
      "comment": "Fetches the currently installed kit for handling content. createDefaultEditorKit is called to set up a default if necessary.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the editor kit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getContentType",
      "comment": "Gets the type of content that this editor is currently set to deal with. This is defined to be the type associated with the currently installed EditorKit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the content type, \n\u003ccode\u003enull\u003c/code\u003e if no editor kit set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setContentType",
      "comment": "Sets the type of content that this editor handles. This calls getEditorKitForContentType, and then setEditorKit if an editor kit can be successfully located. This is mostly convenience method that can be used as an alternative to calling setEditorKit directly. If there is a charset definition specified as a parameter of the content type specification, it will be used when loading input streams using the associated EditorKit. For example if the type is specified as text/html; charset\u003dEUC-JP the content will be loaded using the EditorKit registered for text/html and the Reader provided to the EditorKit to load unicode into the document will use the EUC-JP charset for translating to unicode. If the type is not recognized, the content will be loaded using the EditorKit registered for plain text, text/plain.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "the type of content"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#getContentType()\"\u003e\u003ccode\u003egetContentType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e mime type for the content editing support"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003etype\u003c/code\u003e parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.EditorKit",
            "type": "Class"
          },
          "name": "kit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditorKit",
      "comment": "Sets the currently installed kit for handling content. This is the bound property that establishes the content type of the editor. Any old kit is first deinstalled, then if kit is non-null, the new kit is installed, and a default document created for it. A PropertyChange event (\"editorKit\") is always fired when setEditorKit is called. NOTE: This has the side effect of changing the model, because the EditorKit is the source of how a particular type of content is modeled. This method will cause setDocument to be called on behalf of the caller to ensure integrity of the internal state.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "the currently installed kit for handling content"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#getEditorKit()\"\u003e\u003ccode\u003egetEditorKit()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekit\u003c/code\u003e - the desired editor behavior"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.EditorKit",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditorKitForContentType",
      "comment": "Fetches the editor kit to use for the given type of content. This is called when a type is requested that doesn\u0027t match the currently installed type. If the component doesn\u0027t have an EditorKit registered for the given type, it will try to create an EditorKit from the default EditorKit registry. If that fails, a PlainEditorKit is used on the assumption that all text documents can be represented as plain text. This method can be reimplemented to use some other kind of type registry. This can be reimplemented to use the Java Activation Framework, for example.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e content type"
        ],
        "return": [
          "the editor kit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.EditorKit",
            "type": "Class"
          },
          "name": "k",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditorKitForContentType",
      "comment": "Directly sets the editor kit to use for the given type. A look-and-feel implementation might use this in conjunction with createEditorKitForContentType to install handlers for content types with a look-and-feel bias.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e content type",
          "\u003ccode\u003ek\u003c/code\u003e - the editor kit to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "content",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replaceSelection",
      "comment": "Replaces the currently selected content with new content represented by the given string. If there is no selection this amounts to an insert of the given text. If there is no replacement text (i.e. the content string is empty or null) this amounts to a removal of the current selection. The replacement text will have the attributes currently defined for input. If the component is not editable, beep and return.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#replaceSelection(java.lang.String)\"\u003ereplaceSelection\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the content to replace the selection with. This value can be \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.EditorKit",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createEditorKitForContentType",
      "comment": "Creates a handler for the given type from the default registry of editor kits. The registry is created if necessary. If the registered class has not yet been loaded, an attempt is made to dynamically load the prototype of the kit for the given type. If the type was registered with a ClassLoader, that ClassLoader will be used to load the prototype. If there was no registered ClassLoader, Class.forName will be used to load the prototype. Once a prototype EditorKit instance is successfully located, it is cloned and the clone is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the content type"
        ],
        "return": [
          "the editor kit, or \n\u003ccode\u003enull\u003c/code\u003e if there is nothing registered for the given type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "classname",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "registerEditorKitForContentType",
      "comment": "Establishes the default bindings of type to classname. The class will be dynamically loaded later when actually needed, and can be safely changed before attempted uses to avoid loading unwanted classes. The prototype EditorKit will be loaded with Class.forName when registered with this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e content type",
          "\u003ccode\u003eclassname\u003c/code\u003e - the class to load later"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "classname",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "loader",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "registerEditorKitForContentType",
      "comment": "Establishes the default bindings of type to classname. The class will be dynamically loaded later when actually needed using the given ClassLoader, and can be safely changed before attempted uses to avoid loading unwanted classes.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e content type",
          "\u003ccode\u003eclassname\u003c/code\u003e - the class to load later",
          "\u003ccode\u003eloader\u003c/code\u003e - the \n\u003ccode\u003eClassLoader\u003c/code\u003e to use to load the name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getEditorKitClassNameForContentType",
      "comment": "Returns the currently registered EditorKit class name for the type type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e content type"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the \n\u003ccode\u003eEditorKit\u003c/code\u003e class name for \n\u003ccode\u003etype\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "Returns the preferred size for the JEditorPane. The preferred size for JEditorPane is slightly altered from the preferred size of the superclass. If the size of the viewport has become smaller than the minimum size of the component, the scrollable definition for tracking width or height will turn to false. The default viewport layout will give the preferred size, and that is not desired in the case where the scrollable is tracking. In that case the normal preferred size is adjusted to the minimum size. This allows things like HTML tables to shrink down to their minimum size and then be laid out at their minimum size, refusing to shrink any further.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setPreferredSize(java.awt.Dimension)\"\u003e\u003ccode\u003eJComponent.setPreferredSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e containing the preferred size"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor. For example, if the type is set to text/html the string should be specified in terms of HTML. This is implemented to remove the contents of the current document, and replace them by parsing the given string using the current EditorKit. This gives the semantics of the superclass by not changing out the model, while supporting the content type currently set on this component. The assumption is that the previous content is relatively small, and that the previous content doesn\u0027t have side effects. Both of those assumptions can be violated and cause undesirable results. To avoid this, create a new document, getEditorKit().createDefaultDocument(), and replace the existing Document with the new one. You are then assured the previous Document won\u0027t have any lingering state. Leaving the existing model in place means that the old view will be torn down, and a new view created, where replacing the document would avoid the tear down of the old view. Some formats (such as HTML) can install things into the document that can influence future contents. HTML can have style information embedded that would influence the next content installed unexpectedly. An alternative way to load this component with a string would be to create a StringReader and call the read method. In this case the model would be replaced after it was initialized with the contents of the string.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "the text of this component"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#getText()\"\u003e\u003ccode\u003egetText()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setText(java.lang.String)\"\u003esetText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the new text to be set; if \n\u003ccode\u003enull\u003c/code\u003e the old text will be deleted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Returns the text contained in this TextComponent in terms of the content type of this editor. If an exception is thrown while attempting to retrieve the text, null will be returned. This is implemented to call JTextComponent.write with a StringWriter.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JEditorPane.html#setText(java.lang.String)\"\u003e\u003ccode\u003esetText(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getText()\"\u003egetText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportWidth",
      "comment": "Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getScrollableTracksViewportWidth()\"\u003egetScrollableTracksViewportWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003egetScrollableTracksViewportWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if a viewport should force the Scrollables width to match its own, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportHeight",
      "comment": "Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getScrollableTracksViewportHeight()\"\u003egetScrollableTracksViewportHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003egetScrollableTracksViewportHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if a viewport should force the \n\u003ccode\u003eScrollable\u003c/code\u003e\u0027s height to match its own, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JEditorPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJEditorPane\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JEditorPane. For editor panes, the AccessibleContext takes the form of an AccessibleJEditorPane. A new AccessibleJEditorPane instance is created if necessary.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJEditorPane that serves as the AccessibleContext of this JEditorPane"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JEditorPane. The document model is set to null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "name": "initialPage",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JEditorPane based on a specified URL for input.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialPage\u003c/code\u003e - the URL"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the URL is \n\u003ccode\u003enull\u003c/code\u003e or cannot be accessed"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "url",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JEditorPane based on a string containing a URL specification.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the URL is \n\u003ccode\u003enull\u003c/code\u003e or cannot be accessed"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JEditorPane that has been initialized to the given text. This is a convenience constructor that calls the setContentType and setText methods.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - mime type of the given text",
          "\u003ccode\u003etext\u003c/code\u003e - the text to initialize with; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003etype\u003c/code\u003e parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JEditorPane$AccessibleJEditorPaneHTML",
    "javax.swing.JEditorPane$JEditorPaneAccessibleHypertextSupport",
    "javax.swing.JEditorPane$AccessibleJEditorPane"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JEditorPane",
  "comment": "A text component to edit various kinds of content. You can find how-to information and examples of using editor panes in \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/text.html\"\u003eUsing Text Components\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cp\u003e This component uses implementations of the \u003ccode\u003eEditorKit\u003c/code\u003e to accomplish its behavior. It effectively morphs into the proper kind of text editor for the kind of content it is given. The content type that editor is bound to at any given time is determined by the \u003ccode\u003eEditorKit\u003c/code\u003e currently installed. If the content is set to a new URL, its type is used to determine the \u003ccode\u003eEditorKit\u003c/code\u003e that should be used to load the content. \u003c/p\u003e\n\u003cp\u003e By default, the following types of content are known: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  \u003cb\u003etext/plain\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Plain text, which is the default the type given isn\u0027t recognized. The kit used in this case is an extension of \n  \u003ccode\u003eDefaultEditorKit\u003c/code\u003e that produces a wrapped plain text view. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003etext/html\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  HTML text. The kit used in this case is the class \n  \u003ccode\u003ejavax.swing.text.html.HTMLEditorKit\u003c/code\u003e which provides HTML 3.2 support. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003etext/rtf\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  RTF text. The kit used in this case is the class \n  \u003ccode\u003ejavax.swing.text.rtf.RTFEditorKit\u003c/code\u003e which provides a limited support of the Rich Text Format. \n \u003c/dd\u003e\n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e There are several ways to load content into this component. \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e The \u003ca href\u003d\"#setText(java.lang.String)\"\u003e\u003ccode\u003esetText\u003c/code\u003e\u003c/a\u003e method can be used to initialize the component from a string. In this case the current \u003ccode\u003eEditorKit\u003c/code\u003e will be used, and the content type will be expected to be of this type. \u003c/li\u003e\n \u003cli\u003e The \u003ca href\u003d\"#read(java.io.InputStream,java.lang.Object)\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e method can be used to initialize the component from a \u003ccode\u003eReader\u003c/code\u003e. Note that if the content type is HTML, relative references (e.g. for things like images) can\u0027t be resolved unless the \u0026lt;base\u0026gt; tag is used or the \u003cem\u003eBase\u003c/em\u003e property on \u003ccode\u003eHTMLDocument\u003c/code\u003e is set. In this case the current \u003ccode\u003eEditorKit\u003c/code\u003e will be used, and the content type will be expected to be of this type. \u003c/li\u003e\n \u003cli\u003e The \u003ca href\u003d\"#setPage(java.net.URL)\"\u003e\u003ccode\u003esetPage\u003c/code\u003e\u003c/a\u003e method can be used to initialize the component from a URL. In this case, the content type will be determined from the URL, and the registered \u003ccode\u003eEditorKit\u003c/code\u003e for that content type will be set. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Some kinds of content may provide hyperlink support by generating hyperlink events. The HTML \u003ccode\u003eEditorKit\u003c/code\u003e will generate hyperlink events if the \u003ccode\u003eJEditorPane\u003c/code\u003e is \u003cem\u003enot editable\u003c/em\u003e (\u003ccode\u003eJEditorPane.setEditable(false);\u003c/code\u003e has been called). If HTML frames are embedded in the document, the typical response would be to change a portion of the current document. The following code fragment is a possible hyperlink listener implementation, that treats HTML frame events specially, and simply displays any other activated hyperlinks. \u003c/p\u003e\n\u003cpre\u003e\n\u0026nbsp;    class Hyperactive implements HyperlinkListener {\n\u0026nbsp;\n\u0026nbsp;        public void hyperlinkUpdate(HyperlinkEvent e) {\n\u0026nbsp;            if (e.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n\u0026nbsp;                JEditorPane pane \u003d (JEditorPane) e.getSource();\n\u0026nbsp;                if (e instanceof HTMLFrameHyperlinkEvent) {\n\u0026nbsp;                    HTMLFrameHyperlinkEvent  evt \u003d (HTMLFrameHyperlinkEvent)e;\n\u0026nbsp;                    HTMLDocument doc \u003d (HTMLDocument)pane.getDocument();\n\u0026nbsp;                    doc.processHTMLFrameHyperlinkEvent(evt);\n\u0026nbsp;                } else {\n\u0026nbsp;                    try {\n\u0026nbsp;                        pane.setPage(e.getURL());\n\u0026nbsp;                    } catch (Throwable t) {\n\u0026nbsp;                        t.printStackTrace();\n\u0026nbsp;                    }\n\u0026nbsp;                }\n\u0026nbsp;            }\n\u0026nbsp;        }\n\u0026nbsp;    }\n\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For information on customizing how \u003cb\u003etext/html\u003c/b\u003e is rendered please see \u003ca href\u003d\"#W3C_LENGTH_UNITS\"\u003e\u003ccode\u003eW3C_LENGTH_UNITS\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#HONOR_DISPLAY_PROPERTIES\"\u003e\u003ccode\u003eHONOR_DISPLAY_PROPERTIES\u003c/code\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e Culturally dependent information in some documents is handled through a mechanism called character encoding. Character encoding is an unambiguous mapping of the members of a character set (letters, ideographs, digits, symbols, or control functions) to specific numeric code values. It represents the way the file is stored. Example character encodings are ISO-8859-1, ISO-8859-5, Shift-jis, Euc-jp, and UTF-8. When the file is passed to an user agent (\u003ccode\u003eJEditorPane\u003c/code\u003e) it is converted to the document character set (ISO-10646 aka Unicode). \u003c/p\u003e\n\u003cp\u003e There are multiple ways to get a character set mapping to happen with \u003ccode\u003eJEditorPane\u003c/code\u003e. \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e One way is to specify the character set as a parameter of the MIME type. This will be established by a call to the \u003ca href\u003d\"#setContentType(java.lang.String)\"\u003e\u003ccode\u003esetContentType\u003c/code\u003e\u003c/a\u003e method. If the content is loaded by the \u003ca href\u003d\"#setPage(java.net.URL)\"\u003e\u003ccode\u003esetPage\u003c/code\u003e\u003c/a\u003e method the content type will have been set according to the specification of the URL. It the file is loaded directly, the content type would be expected to have been set prior to loading. \u003c/li\u003e\n \u003cli\u003e Another way the character set can be specified is in the document itself. This requires reading the document prior to determining the character set that is desired. To handle this, it is expected that the \u003ccode\u003eEditorKit\u003c/code\u003e.read operation throw a \u003ccode\u003eChangedCharSetException\u003c/code\u003e which will be caught. The read is then restarted with a new Reader that uses the character set specified in the \u003ccode\u003eChangedCharSetException\u003c/code\u003e (which is an \u003ccode\u003eIOException\u003c/code\u003e). \u003c/li\u003e\n\u003c/ol\u003e \n\u003cdl\u003e \n \u003cdt\u003e\n  \u003cb\u003eNewlines\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   For a discussion on how newlines are handled, see \n  \u003ca href\u003d\"text/DefaultEditorKit.html\"\u003eDefaultEditorKit\u003c/a\u003e. \n \u003c/dd\u003e\n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}