{
  "packageName": "javax.swing",
  "simpleName": "SpinnerDateModel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.AbstractSpinnerModel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "name": "java.util.Date",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStart",
      "comment": "Changes the lower limit for Dates in this sequence. If start is null, then there is no lower limit. No bounds checking is done here: the new start value may invalidate the (start \u003c\u003d value \u003c\u003d end) invariant enforced by the constructors. This is to simplify updating the model. Naturally one should ensure that the invariant is true before calling the nextValue, previousValue, or setValue methods. Typically this property is a Date however it\u0027s possible to use a Comparable with a compareTo method for Dates. For example start might be an instance of a class like this:  MyStartDate implements Comparable {\n     long t \u003d 12345;\n     public int compareTo(Date d) {\n            return (t \u003c d.getTime() ? -1 : (t \u003d\u003d d.getTime() ? 0 : 1));\n     }\n     public int compareTo(Object o) {\n            return compareTo((Date)o);\n     }\n }\n Note that the above example will throw a ClassCastException if the Object passed to compareTo(Object) is not a Date. This method fires a ChangeEvent if the start has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getStart()\"\u003e\u003ccode\u003egetStart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setEnd(java.lang.Comparable)\"\u003e\u003ccode\u003esetEnd(java.lang.Comparable\u0026lt;java.util.Date\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eAbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - defines the first date in the sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "name": "java.util.Date",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStart",
      "comment": "Returns the first Date in the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setStart(java.lang.Comparable)\"\u003e\u003ccode\u003esetStart(java.lang.Comparable\u0026lt;java.util.Date\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003estart\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "name": "java.util.Date",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEnd",
      "comment": "Changes the upper limit for Dates in this sequence. If start is null, then there is no upper limit. No bounds checking is done here: the new start value may invalidate the (start \u003c\u003d value \u003c\u003d end) invariant enforced by the constructors. This is to simplify updating the model. Naturally, one should ensure that the invariant is true before calling the nextValue, previousValue, or setValue methods. Typically this property is a Date however it\u0027s possible to use Comparable with a compareTo method for Dates. See setStart for an example. This method fires a ChangeEvent if the end has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getEnd()\"\u003e\u003ccode\u003egetEnd()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setStart(java.lang.Comparable)\"\u003e\u003ccode\u003esetStart(java.lang.Comparable\u0026lt;java.util.Date\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eAbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eend\u003c/code\u003e - defines the last date in the sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "name": "java.util.Date",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnd",
      "comment": "Returns the last Date in the sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setEnd(java.lang.Comparable)\"\u003e\u003ccode\u003esetEnd(java.lang.Comparable\u0026lt;java.util.Date\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eend\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "calendarField"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCalendarField",
      "comment": "Changes the size of the date value change computed by the nextValue and previousValue methods. The calendarField parameter must be one of the Calendar field constants like Calendar.MONTH or Calendar.MINUTE. The nextValue and previousValue methods simply move the specified Calendar field forward or backward by one unit with the Calendar.add method. You should use this method with care as some UIs may set the calendarField before committing the edit to spin the field under the cursor. If you only want one field to spin you can subclass and ignore the setCalendarField calls.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getCalendarField()\"\u003e\u003ccode\u003egetCalendarField()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getNextValue()\"\u003e\u003ccode\u003egetNextValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getPreviousValue()\"\u003e\u003ccode\u003egetPreviousValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#add(int,int)\"\u003e\u003ccode\u003eCalendar.add(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eAbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecalendarField\u003c/code\u003e - one of \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eCalendar.ERA\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.WEEK_OF_YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.WEEK_OF_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_WEEK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_WEEK_IN_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.AM_PM\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.HOUR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.HOUR_OF_DAY\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MINUTE\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.SECOND\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MILLISECOND\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e This method fires a \u003ccode\u003eChangeEvent\u003c/code\u003e if the \u003ccode\u003ecalendarField\u003c/code\u003e has changed.\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCalendarField",
      "comment": "Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setCalendarField(int)\"\u003e\u003ccode\u003esetCalendarField(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003ecalendarField\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextValue",
      "comment": "Returns the next Date in the sequence, or null if the next date is after end.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getNextValue()\"\u003e\u003ccode\u003eSpinnerModel.getNextValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getPreviousValue()\"\u003e\u003ccode\u003egetPreviousValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setCalendarField(int)\"\u003e\u003ccode\u003esetCalendarField(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getNextValue()\"\u003egetNextValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the next \n\u003ccode\u003eDate\u003c/code\u003e in the sequence, or \n\u003ccode\u003enull\u003c/code\u003e if the next date is after \n\u003ccode\u003eend\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreviousValue",
      "comment": "Returns the previous Date in the sequence, or null if the previous date is before start.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getPreviousValue()\"\u003e\u003ccode\u003eSpinnerModel.getPreviousValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getNextValue()\"\u003e\u003ccode\u003egetNextValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setCalendarField(int)\"\u003e\u003ccode\u003esetCalendarField(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getPreviousValue()\"\u003egetPreviousValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the previous \n\u003ccode\u003eDate\u003c/code\u003e in the sequence, or \n\u003ccode\u003enull\u003c/code\u003e if the previous date is before \n\u003ccode\u003estart\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDate",
      "comment": "Returns the current element in this sequence of Dates. This method is equivalent to (Date)getValue.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setValue(java.lang.Object)\"\u003e\u003ccode\u003esetValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003evalue\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Returns the current element in this sequence of Dates.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setValue(java.lang.Object)\"\u003e\u003ccode\u003esetValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getDate()\"\u003e\u003ccode\u003egetDate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#getValue()\"\u003egetValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003evalue\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValue",
      "comment": "Sets the current Date for this sequence. If value is null, an IllegalArgumentException is thrown. No bounds checking is done here: the new value may invalidate the (start \u003c\u003d value \u003c end) invariant enforced by the constructors. Naturally, one should ensure that the (start \u003c\u003d value \u003c\u003d maximum) invariant is true before calling the nextValue, previousValue, or setValue methods. This method fires a ChangeEvent if the value has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getDate()\"\u003e\u003ccode\u003egetDate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#getValue()\"\u003e\u003ccode\u003egetValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eAbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html#setValue(java.lang.Object)\"\u003esetValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003eSpinnerModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the current (non \n\u003ccode\u003enull\u003c/code\u003e) \n\u003ccode\u003eDate\u003c/code\u003e for this sequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if value is \n\u003ccode\u003enull\u003c/code\u003e or not a \n\u003ccode\u003eDate\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "name": "java.util.Date",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "name": "java.util.Date",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "calendarField"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a SpinnerDateModel that represents a sequence of dates between start and end. The nextValue and previousValue methods compute elements of the sequence by advancing or reversing the current date value by the calendarField time unit. For a precise description of what it means to increment or decrement a Calendar field, see the add method in java.util.Calendar. The start and end parameters can be null to indicate that the range doesn\u0027t have an upper or lower bound. If value or calendarField is null, or if both start and end are specified and minimum \u003e maximum then an IllegalArgumentException is thrown. Similarly if (minimum \u003c\u003d value \u003c\u003d maximum) is false, an IllegalArgumentException is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#add(int,int)\"\u003e\u003ccode\u003eCalendar.add(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setValue(java.lang.Object)\"\u003e\u003ccode\u003esetValue(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setStart(java.lang.Comparable)\"\u003e\u003ccode\u003esetStart(java.lang.Comparable\u0026lt;java.util.Date\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setEnd(java.lang.Comparable)\"\u003e\u003ccode\u003esetEnd(java.lang.Comparable\u0026lt;java.util.Date\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerDateModel.html#setCalendarField(int)\"\u003e\u003ccode\u003esetCalendarField(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the current (non \n\u003ccode\u003enull\u003c/code\u003e) value of the model",
          "\u003ccode\u003estart\u003c/code\u003e - the first date in the sequence or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eend\u003c/code\u003e - the last date in the sequence or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ecalendarField\u003c/code\u003e - one of \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eCalendar.ERA\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.WEEK_OF_YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.WEEK_OF_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_WEEK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_WEEK_IN_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.AM_PM\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.HOUR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.HOUR_OF_DAY\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MINUTE\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.SECOND\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MILLISECOND\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evalue\u003c/code\u003e or \n\u003ccode\u003ecalendarField\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e, if \n\u003ccode\u003ecalendarField\u003c/code\u003e isn\u0027t valid, or if the following expression is false: \n\u003ccode\u003e(start \u0026lt;\u003d value \u0026lt;\u003d end)\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SpinnerDateModel whose initial value is the current date, calendarField is equal to Calendar.DAY_OF_MONTH, and for which there are no start/end limits.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.SpinnerDateModel",
  "comment": "A \n\u003ccode\u003eSpinnerModel\u003c/code\u003e for sequences of \n\u003ccode\u003eDate\u003c/code\u003es. The upper and lower bounds of the sequence are defined by properties called \n\u003ccode\u003estart\u003c/code\u003e and \n\u003ccode\u003eend\u003c/code\u003e and the size of the increase or decrease computed by the \n\u003ccode\u003enextValue\u003c/code\u003e and \n\u003ccode\u003epreviousValue\u003c/code\u003e methods is defined by a property called \n\u003ccode\u003ecalendarField\u003c/code\u003e. The \n\u003ccode\u003estart\u003c/code\u003e and \n\u003ccode\u003eend\u003c/code\u003e properties can be \n\u003ccode\u003enull\u003c/code\u003e to indicate that the sequence has no lower or upper limit. \n\u003cp\u003e The value of the \u003ccode\u003ecalendarField\u003c/code\u003e property must be one of the \u003ccode\u003ejava.util.Calendar\u003c/code\u003e constants that specify a field within a \u003ccode\u003eCalendar\u003c/code\u003e. The \u003ccode\u003egetNextValue\u003c/code\u003e and \u003ccode\u003egetPreviousValue\u003c/code\u003e methods change the date forward or backwards by this amount. For example, if \u003ccode\u003ecalendarField\u003c/code\u003e is \u003ccode\u003eCalendar.DAY_OF_WEEK\u003c/code\u003e, then \u003ccode\u003enextValue\u003c/code\u003e produces a \u003ccode\u003eDate\u003c/code\u003e that\u0027s 24 hours after the current \u003ccode\u003evalue\u003c/code\u003e, and \u003ccode\u003epreviousValue\u003c/code\u003e produces a \u003ccode\u003eDate\u003c/code\u003e that\u0027s 24 hours earlier. \u003c/p\u003e\n\u003cp\u003e The legal values for \u003ccode\u003ecalendarField\u003c/code\u003e are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eCalendar.ERA\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.WEEK_OF_YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.WEEK_OF_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_YEAR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_WEEK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.DAY_OF_WEEK_IN_MONTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.AM_PM\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.HOUR\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.HOUR_OF_DAY\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MINUTE\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.SECOND\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eCalendar.MILLISECOND\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e However some UIs may set the calendarField before committing the edit to spin the field under the cursor. If you only want one field to spin you can subclass and ignore the setCalendarField calls. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This model inherits a \u003ccode\u003eChangeListener\u003c/code\u003e. The \u003ccode\u003eChangeListeners\u003c/code\u003e are notified whenever the models \u003ccode\u003evalue\u003c/code\u003e, \u003ccode\u003ecalendarField\u003c/code\u003e, \u003ccode\u003estart\u003c/code\u003e, or \u003ccode\u003eend\u003c/code\u003e properties changes.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSpinner.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJSpinner\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eSpinnerModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractSpinnerModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eAbstractSpinnerModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerListModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpinnerListModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SpinnerNumberModel.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSpinnerNumberModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#add(int,int)\"\u003e\u003ccode\u003eCalendar.add(int, int)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}