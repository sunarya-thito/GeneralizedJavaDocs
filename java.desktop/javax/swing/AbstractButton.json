{
  "packageName": "javax.swing",
  "simpleName": "AbstractButton",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MODEL_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.MODEL_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TEXT_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button\u0027s text.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.TEXT_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MNEMONIC_CHANGED_PROPERTY",
      "comment": "Identifies a change to the button\u0027s mnemonic.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.MNEMONIC_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MARGIN_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button\u0027s margins.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.MARGIN_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "VERTICAL_ALIGNMENT_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button\u0027s vertical alignment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button\u0027s horizontal alignment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "VERTICAL_TEXT_POSITION_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button\u0027s vertical text position.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY",
      "comment": "Identifies a change in the button\u0027s horizontal text position.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BORDER_PAINTED_CHANGED_PROPERTY",
      "comment": "Identifies a change to having the border drawn, or having it not drawn.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FOCUS_PAINTED_CHANGED_PROPERTY",
      "comment": "Identifies a change to having the border highlighted when focused, or not.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.FOCUS_PAINTED_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROLLOVER_ENABLED_CHANGED_PROPERTY",
      "comment": "Identifies a change from rollover enabled to disabled or back to enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.ROLLOVER_ENABLED_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CONTENT_AREA_FILLED_CHANGED_PROPERTY",
      "comment": "Identifies a change to having the button paint the content area.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon that represents the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PRESSED_ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon used when the button has been pressed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.PRESSED_ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SELECTED_ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon used when the button has been selected.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.SELECTED_ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROLLOVER_ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon used when the cursor is over the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon used when the cursor is over the button and it has been selected.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DISABLED_ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon used when the button has been disabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.DISABLED_ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DISABLED_SELECTED_ICON_CHANGED_PROPERTY",
      "comment": "Identifies a change to the icon used when the button has been disabled and selected.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.ButtonModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "model",
      "comment": "The data model that determines the button\u0027s state.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "changeListener",
      "comment": "The button model\u0027s changeListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.ActionListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "actionListener",
      "comment": "The button model\u0027s ActionListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.event.ItemListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "itemListener",
      "comment": "The button model\u0027s ItemListener.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.event.ChangeEvent",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "changeEvent",
      "comment": "Only one ChangeEvent is needed per button instance since the event\u0027s only state is the source property. The source of events generated is always \"this\".",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "hideActionText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHideActionText",
      "comment": "Sets the hideActionText property, which determines whether the button displays text from the Action. This is useful only if an Action has been installed on the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether the text of the button should come from the \u003ccode\u003eAction\u003c/code\u003e."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html#buttonActions\"\u003eSwing Components Supporting \u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehideActionText\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the button\u0027s \n\u003ccode\u003etext\u003c/code\u003e property should not reflect that of the \n\u003ccode\u003eAction\u003c/code\u003e; the default is \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHideActionText",
      "comment": "Returns the value of the hideActionText property, which determines whether the button displays text from the Action. This is useful only if an Action has been installed on the button.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the button\u0027s \n\u003ccode\u003etext\u003c/code\u003e property should not reflect that of the \n\u003ccode\u003eAction\u003c/code\u003e; the default is \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Returns the button\u0027s text.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setText(java.lang.String)\"\u003e\u003ccode\u003esetText(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the buttons text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Sets the button\u0027s text.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The button\u0027s text."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getText()\"\u003e\u003ccode\u003egetText()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the string used to set the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSelected",
      "comment": "Returns the state of the button. True if the toggle button is selected, false if it\u0027s not.",
      "tagMap": {
        "return": [
          "true if the toggle button is selected, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelected",
      "comment": "Sets the state of the button. Note that this method does not trigger an actionEvent. Call doClick to perform a programmatic action change.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - true if the button is selected, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doClick",
      "comment": "Programmatically perform a \"click\". This does the same thing as if the user had pressed and released the button.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pressTime"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doClick",
      "comment": "Programmatically perform a \"click\". This does the same thing as if the user had pressed and released the button. The button stays visually \"pressed\" for pressTime milliseconds.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epressTime\u003c/code\u003e - the time to \"hold down\" the button, in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMargin",
      "comment": "Sets space for margin between the button\u0027s border and the label. Setting to null will cause the button to use the default margin. The button\u0027s default Border object will use this value to create the proper margin. However, if a non-default border is set on the button, it is that Border object\u0027s responsibility to create the appropriate margin space (else this property will effectively be ignored).",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The space between the button\u0027s border and the label."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the space between the border and the label"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMargin",
      "comment": "Returns the margin between the button\u0027s border and the label.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setMargin(java.awt.Insets)\"\u003e\u003ccode\u003esetMargin(java.awt.Insets)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eInsets\u003c/code\u003e object specifying the margin between the botton\u0027s border and the label"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIcon",
      "comment": "Returns the default icon.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default \n\u003ccode\u003eIcon\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "defaultIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIcon",
      "comment": "Sets the button\u0027s default icon. This icon is also used as the \"pressed\" and \"disabled\" icon if there is no explicitly set pressed icon.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The button\u0027s default icon"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getIcon()\"\u003e\u003ccode\u003egetIcon()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setPressedIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetPressedIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edefaultIcon\u003c/code\u003e - the icon used as the default image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPressedIcon",
      "comment": "Returns the pressed icon for the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setPressedIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetPressedIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003epressedIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "pressedIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPressedIcon",
      "comment": "Sets the pressed icon for the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The pressed icon for the button."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getPressedIcon()\"\u003e\u003ccode\u003egetPressedIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epressedIcon\u003c/code\u003e - the icon used as the \"pressed\" image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedIcon",
      "comment": "Returns the selected icon for the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setSelectedIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetSelectedIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eselectedIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "selectedIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectedIcon",
      "comment": "Sets the selected icon for the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The selected icon for the button."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getSelectedIcon()\"\u003e\u003ccode\u003egetSelectedIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectedIcon\u003c/code\u003e - the icon used as the \"selected\" image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRolloverIcon",
      "comment": "Returns the rollover icon for the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setRolloverIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetRolloverIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003erolloverIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "rolloverIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRolloverIcon",
      "comment": "Sets the rollover icon for the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The rollover icon for the button."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getRolloverIcon()\"\u003e\u003ccode\u003egetRolloverIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erolloverIcon\u003c/code\u003e - the icon used as the \"rollover\" image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRolloverSelectedIcon",
      "comment": "Returns the rollover selection icon for the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setRolloverSelectedIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetRolloverSelectedIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003erolloverSelectedIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "rolloverSelectedIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRolloverSelectedIcon",
      "comment": "Sets the rollover selected icon for the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The rollover selected icon for the button."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getRolloverSelectedIcon()\"\u003e\u003ccode\u003egetRolloverSelectedIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erolloverSelectedIcon\u003c/code\u003e - the icon used as the \"selected rollover\" image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisabledIcon",
      "comment": "Returns the icon used by the button when it\u0027s disabled. If no disabled icon has been set this will forward the call to the look and feel to construct an appropriate disabled Icon. Some look and feels might not render the disabled Icon, in which case they will ignore this.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getPressedIcon()\"\u003e\u003ccode\u003egetPressedIcon()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setDisabledIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetDisabledIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getDisabledIcon(javax.swing.JComponent,javax.swing.Icon)\"\u003e\u003ccode\u003eLookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003edisabledIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "disabledIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisabledIcon",
      "comment": "Sets the disabled icon for the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The disabled icon for the button."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getDisabledIcon()\"\u003e\u003ccode\u003egetDisabledIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edisabledIcon\u003c/code\u003e - the icon used as the disabled image"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Icon",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisabledSelectedIcon",
      "comment": "Returns the icon used by the button when it\u0027s disabled and selected. If no disabled selection icon has been set, this will forward the call to the LookAndFeel to construct an appropriate disabled Icon from the selection icon if it has been set and to getDisabledIcon() otherwise. Some look and feels might not render the disabled selected Icon, in which case they will ignore this.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getDisabledIcon()\"\u003e\u003ccode\u003egetDisabledIcon()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setDisabledSelectedIcon(javax.swing.Icon)\"\u003e\u003ccode\u003esetDisabledSelectedIcon(javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/LookAndFeel.html#getDisabledSelectedIcon(javax.swing.JComponent,javax.swing.Icon)\"\u003e\u003ccode\u003eLookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent, javax.swing.Icon)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003edisabledSelectedIcon\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "disabledSelectedIcon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisabledSelectedIcon",
      "comment": "Sets the disabled selection icon for the button.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The disabled selection icon for the button."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getDisabledSelectedIcon()\"\u003e\u003ccode\u003egetDisabledSelectedIcon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edisabledSelectedIcon\u003c/code\u003e - the icon used as the disabled selection image"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVerticalAlignment",
      "comment": "Returns the vertical alignment of the text and icon.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003everticalAlignment\u003c/code\u003e property, one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e (the default) \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TOP\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.BOTTOM\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "alignment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVerticalAlignment",
      "comment": "Sets the vertical alignment of the icon and text.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.TOP",
                "SwingConstants.CENTER",
                "SwingConstants.BOTTOM"
              ]
            },
            {
              "name": "escription",
              "value": "The vertical alignment of the icon and text."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e (the default) \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TOP\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.BOTTOM\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the alignment is not one of the legal values listed above"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHorizontalAlignment",
      "comment": "Returns the horizontal alignment of the icon and text. AbstractButton\u0027s default is SwingConstants.CENTER, but subclasses such as JCheckBox may use a different default.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003ehorizontalAlignment\u003c/code\u003e property, one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.RIGHT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEFT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEADING\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TRAILING\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "alignment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHorizontalAlignment",
      "comment": "Sets the horizontal alignment of the icon and text. AbstractButton\u0027s default is SwingConstants.CENTER, but subclasses such as JCheckBox may use a different default.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.LEFT",
                "SwingConstants.CENTER",
                "SwingConstants.RIGHT",
                "SwingConstants.LEADING",
                "SwingConstants.TRAILING"
              ]
            },
            {
              "name": "escription",
              "value": "The horizontal alignment of the icon and text."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment value, one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.RIGHT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEFT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEADING\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TRAILING\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the alignment is not one of the valid values"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVerticalTextPosition",
      "comment": "Returns the vertical position of the text relative to the icon.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003everticalTextPosition\u003c/code\u003e property, one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e (the default) \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TOP\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.BOTTOM\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "textPosition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVerticalTextPosition",
      "comment": "Sets the vertical position of the text relative to the icon.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.TOP",
                "SwingConstants.CENTER",
                "SwingConstants.BOTTOM"
              ]
            },
            {
              "name": "escription",
              "value": "The vertical position of the text relative to the icon."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etextPosition\u003c/code\u003e - one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e (the default) \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TOP\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.BOTTOM\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHorizontalTextPosition",
      "comment": "Returns the horizontal position of the text relative to the icon.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003ehorizontalTextPosition\u003c/code\u003e property, one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.RIGHT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEFT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEADING\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TRAILING\u003c/code\u003e (the default) \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "textPosition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHorizontalTextPosition",
      "comment": "Sets the horizontal position of the text relative to the icon.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "SwingConstants.LEFT",
                "SwingConstants.CENTER",
                "SwingConstants.RIGHT",
                "SwingConstants.LEADING",
                "SwingConstants.TRAILING"
              ]
            },
            {
              "name": "escription",
              "value": "The horizontal position of the text relative to the icon."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etextPosition\u003c/code\u003e - one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.RIGHT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEFT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.CENTER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.LEADING\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.TRAILING\u003c/code\u003e (the default) \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etextPosition\u003c/code\u003e is not one of the legal values listed above"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIconTextGap",
      "comment": "Returns the amount of space between the text and the icon displayed in this button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setIconTextGap(int)\"\u003e\u003ccode\u003esetIconTextGap(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an int equal to the number of pixels between the text and the icon."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "iconTextGap"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIconTextGap",
      "comment": "If both the icon and text properties are set, this property defines the space between them. The default value of this property is 4 pixels. This is a JavaBeans bound property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If both the icon and text properties are set, this property defines the space between them."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getIconTextGap()\"\u003e\u003ccode\u003egetIconTextGap()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiconTextGap\u003c/code\u003e - the space between icon and text if these properties are set."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "exception"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "checkHorizontalKey",
      "comment": "Verify that the key argument is a legal value for the horizontalAlignment and horizontalTextPosition properties. Valid values are: SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setHorizontalTextPosition(int)\"\u003e\u003ccode\u003esetHorizontalTextPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setHorizontalAlignment(int)\"\u003e\u003ccode\u003esetHorizontalAlignment(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the property value to check",
          "\u003ccode\u003eexception\u003c/code\u003e - the message to use in the \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e that is thrown for an invalid value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key is not one of the legal values listed above"
        ],
        "return": [
          "the \n\u003ccode\u003ekey\u003c/code\u003e argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "exception"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "checkVerticalKey",
      "comment": "Verify that the key argument is a legal value for the vertical properties. Valid values are: SwingConstants.CENTER SwingConstants.TOP SwingConstants.BOTTOM",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the property value to check",
          "\u003ccode\u003eexception\u003c/code\u003e - the message to use in the \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e that is thrown for an invalid value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key is not one of the legal values listed above"
        ],
        "return": [
          "the \n\u003ccode\u003ekey\u003c/code\u003e argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotify",
      "comment": "Notifies this component that it no longer has a parent component. When this method is invoked, any KeyboardActions set up in the chain of parent components are removed. This method is called by the toolkit internally and should not be called directly by programs.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)\"\u003e\u003ccode\u003eJComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#removeNotify()\"\u003eremoveNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actionCommand"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setActionCommand",
      "comment": "Sets the action command for this button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eactionCommand\u003c/code\u003e - the action command for this button"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActionCommand",
      "comment": "Returns the action command for this button.",
      "tagMap": {
        "return": [
          "the action command for this button"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAction",
      "comment": "Sets the Action. The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener. If the Action is already a registered ActionListener for the button, it is not re-registered. Setting the Action results in immediately changing all the properties described in Swing Components Supporting Action. Subsequently, the button\u0027s properties are automatically updated as the Action\u0027s properties change. This method uses three other methods to set and help track the Action\u0027s property values. It uses the configurePropertiesFromAction method to immediately change the button\u0027s properties. To track changes in the Action\u0027s property values, this method registers the PropertyChangeListener returned by createActionPropertyChangeListener. The default PropertyChangeListener invokes the actionPropertyChanged method when a property in the Action changes.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "the Action instance connected with this ActionEvent source"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getAction()\"\u003e\u003ccode\u003egetAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#configurePropertiesFromAction(javax.swing.Action)\"\u003e\u003ccode\u003econfigurePropertiesFromAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#createActionPropertyChangeListener(javax.swing.Action)\"\u003e\u003ccode\u003ecreateActionPropertyChangeListener(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#actionPropertyChanged(javax.swing.Action,java.lang.String)\"\u003e\u003ccode\u003eactionPropertyChanged(javax.swing.Action, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e for the \n\u003ccode\u003eAbstractButton\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAction",
      "comment": "Returns the currently set Action for this ActionEvent source, or null if no Action is set.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setAction(javax.swing.Action)\"\u003e\u003ccode\u003esetAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eAction\u003c/code\u003e for this \n\u003ccode\u003eActionEvent\u003c/code\u003e source, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "configurePropertiesFromAction",
      "comment": "Sets the properties on this button to match those in the specified Action. Refer to Swing Components Supporting Action for more details as to which properties this sets.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setAction(javax.swing.Action)\"\u003e\u003ccode\u003esetAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e from which to get the properties, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "actionPropertyChanged",
      "comment": "Updates the button\u0027s state in response to property changes in the associated action. This method is invoked from the PropertyChangeListener returned from createActionPropertyChangeListener. Subclasses do not normally need to invoke this. Subclasses that support additional Action properties should override this and configurePropertiesFromAction. Refer to the table at Swing Components Supporting Action for a list of the properties this method sets.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#configurePropertiesFromAction(javax.swing.Action)\"\u003e\u003ccode\u003econfigurePropertiesFromAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e associated with this button",
          "\u003ccode\u003epropertyName\u003c/code\u003e - the name of the property that changed"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createActionPropertyChangeListener",
      "comment": "Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties. Warning: If you subclass this do not create an anonymous inner class. If you do the lifetime of the button will be tied to that of the Action.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setAction(javax.swing.Action)\"\u003e\u003ccode\u003esetAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the button\u0027s action"
        ],
        "return": [
          "the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBorderPainted",
      "comment": "Gets the borderPainted property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setBorderPainted(boolean)\"\u003e\u003ccode\u003esetBorderPainted(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003eborderPainted\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBorderPainted",
      "comment": "Sets the borderPainted property. If true and the button has a border, the border is painted. The default value for the borderPainted property is true. Some look and feels might not support the borderPainted property, in which case they ignore this.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether the border should be painted."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#isBorderPainted()\"\u003e\u003ccode\u003eisBorderPainted()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - if true and border property is not \n\u003ccode\u003enull\u003c/code\u003e, the border is painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintBorder",
      "comment": "Paint the button\u0027s border if BorderPainted property is true and the button has a border.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003eJComponent.paint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setBorder(javax.swing.border.Border)\"\u003e\u003ccode\u003eJComponent.setBorder(javax.swing.border.Border)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paintBorder(java.awt.Graphics)\"\u003epaintBorder\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGraphics\u003c/code\u003e context in which to paint"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFocusPainted",
      "comment": "Gets the paintFocus property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setFocusPainted(boolean)\"\u003e\u003ccode\u003esetFocusPainted(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003epaintFocus\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFocusPainted",
      "comment": "Sets the paintFocus property, which must be true for the focus state to be painted. The default value for the paintFocus property is true. Some look and feels might not paint focus state; they will ignore this property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether focus should be painted"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#isFocusPainted()\"\u003e\u003ccode\u003eisFocusPainted()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, the focus state should be painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isContentAreaFilled",
      "comment": "Gets the contentAreaFilled property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setContentAreaFilled(boolean)\"\u003e\u003ccode\u003esetContentAreaFilled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003econtentAreaFilled\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setContentAreaFilled",
      "comment": "Sets the contentAreaFilled property. If true the button will paint the content area. If you wish to have a transparent button, such as an icon only button, for example, then you should set this to false. Do not call setOpaque(false). The default value for the contentAreaFilled property is true. This function may cause the component\u0027s opaque property to change. The exact behavior of calling this function varies on a component-by-component and L\u0026F-by-L\u0026F basis.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether the button should paint the content area or leave it transparent."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#isContentAreaFilled()\"\u003e\u003ccode\u003eisContentAreaFilled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setOpaque(boolean)\"\u003e\u003ccode\u003eJComponent.setOpaque(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - if true, the content should be filled; if false the content area is not filled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRolloverEnabled",
      "comment": "Gets the rolloverEnabled property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setRolloverEnabled(boolean)\"\u003e\u003ccode\u003esetRolloverEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003erolloverEnabled\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRolloverEnabled",
      "comment": "Sets the rolloverEnabled property, which must be true for rollover effects to occur. The default value for the rolloverEnabled property is false. Some look and feels might not implement rollover effects; they will ignore this property.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Whether rollover effects should be enabled."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#isRolloverEnabled()\"\u003e\u003ccode\u003eisRolloverEnabled()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, rollover effects should be painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMnemonic",
      "comment": "Returns the keyboard mnemonic from the current model.",
      "tagMap": {
        "return": [
          "the keyboard mnemonic from the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mnemonic"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMnemonic",
      "comment": "Sets the keyboard mnemonic on the current model. The mnemonic is the key which when combined with the look and feel\u0027s mouseless modifier (usually Alt) will activate this button if focus is contained somewhere within this button\u0027s ancestor window. A mnemonic must correspond to a single key on the keyboard and should be specified using one of the VK_XXX keycodes defined in java.awt.event.KeyEvent. These codes and the wider array of codes for international keyboards may be obtained through java.awt.event.KeyEvent.getExtendedKeyCodeForChar. Mnemonics are case-insensitive, therefore a key event with the corresponding keycode would cause the button to be activated whether or not the Shift modifier was pressed. If the character defined by the mnemonic is found within the button\u0027s label string, the first occurrence of it will be underlined to indicate the mnemonic to the user.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "the keyboard character mnemonic"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setDisplayedMnemonicIndex(int)\"\u003e\u003ccode\u003esetDisplayedMnemonicIndex(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emnemonic\u003c/code\u003e - the key code which represents the mnemonic"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "mnemonic"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMnemonic",
      "comment": "This method is now obsolete, please use setMnemonic(int) to set the mnemonic for a button. This method is only designed to handle character values which fall between \u0027a\u0027 and \u0027z\u0027 or \u0027A\u0027 and \u0027Z\u0027.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "the keyboard character mnemonic"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setMnemonic(int)\"\u003e\u003ccode\u003esetMnemonic(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emnemonic\u003c/code\u003e - a char specifying the mnemonic value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisplayedMnemonicIndex",
      "comment": "Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic. Not all look and feels may support this. A value of -1 indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed. The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...). You should only ever have to call this if you do not wish the default character to be underlined. For example, if the text was \u0027Save As\u0027, with a mnemonic of \u0027a\u0027, and you wanted the \u0027A\u0027 to be decorated, as \u0027Save As\u0027, you would have to invoke setDisplayedMnemonicIndex(5) after invoking setMnemonic(KeyEvent.VK_A).",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "the index into the String to draw the keyboard character mnemonic at"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getDisplayedMnemonicIndex()\"\u003e\u003ccode\u003egetDisplayedMnemonicIndex()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Index into the String to underline"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - will be thrown if \n\u003ccode\u003eindex\u003c/code\u003e is \u0026gt;\u003d length of the text, or \u0026lt; -1"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayedMnemonicIndex",
      "comment": "Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setDisplayedMnemonicIndex(int)\"\u003e\u003ccode\u003esetDisplayedMnemonicIndex(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "index representing mnemonic character"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "threshhold"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMultiClickThreshhold",
      "comment": "Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events. After the initial mouse press occurs (and action event generated) any subsequent mouse press events which occur on intervals less than the threshhold will be ignored and no corresponding action event generated. By default the threshhold is 0, which means that for each mouse press, an action event will be fired, no matter how quickly the mouse clicks occur. In buttons where this behavior is not desirable (for example, the \"OK\" button in a dialog), this threshhold should be set to an appropriate positive value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getMultiClickThreshhold()\"\u003e\u003ccode\u003egetMultiClickThreshhold()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ethreshhold\u003c/code\u003e - the amount of time required between mouse press events to generate corresponding action events"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if threshhold \u0026lt; 0"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMultiClickThreshhold",
      "comment": "Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setMultiClickThreshhold(long)\"\u003e\u003ccode\u003esetMultiClickThreshhold(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the amount of time required between mouse press events to generate corresponding action events"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.ButtonModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModel",
      "comment": "Returns the model that this button represents.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setModel(javax.swing.ButtonModel)\"\u003e\u003ccode\u003esetModel(javax.swing.ButtonModel)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003emodel\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.ButtonModel",
            "type": "Class"
          },
          "field": {
            "name": "newModel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the model that this button represents.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Model that the Button uses."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewModel\u003c/code\u003e - the new \n\u003ccode\u003eButtonModel\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.ButtonUI",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Returns the L\u0026F object that renders this component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#setUI(javax.swing.plaf.ButtonUI)\"\u003e\u003ccode\u003esetUI(javax.swing.plaf.ButtonUI)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the ButtonUI object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.ButtonUI",
            "type": "Class"
          },
          "field": {
            "name": "ui"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the L\u0026F object that renders this component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/AbstractButton.html#getUI()\"\u003e\u003ccode\u003egetUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the \n\u003ccode\u003eButtonUI\u003c/code\u003e L\u0026amp;F object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the UI property to a value from the current look and feel. Subtypes of AbstractButton should override this to update the UI. For example, JButton might do the following:       setUI((ButtonUI)UIManager.getUI(\n          \"ButtonUI\", \"javax.swing.plaf.basic.BasicButtonUI\", this));",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setUI(javax.swing.plaf.ComponentUI)\"\u003e\u003ccode\u003eJComponent.setUI(javax.swing.plaf.ComponentUI)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getLookAndFeel()\"\u003e\u003ccode\u003eUIManager.getLookAndFeel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIManager.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "addImpl",
      "comment": "Adds the specified component to this container at the specified index, refer to Container.addImpl(Component, Object, int) for a complete description of this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component)\"\u003e\u003ccode\u003eContainer.add(Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component,int)\"\u003e\u003ccode\u003eContainer.add(Component, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#add(java.awt.Component,java.lang.Object)\"\u003e\u003ccode\u003eContainer.add(Component, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eLayoutManager2\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addImpl(java.awt.Component,java.lang.Object,int)\"\u003eaddImpl\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be added",
          "\u003ccode\u003econstraints\u003c/code\u003e - an object expressing layout constraints for this component",
          "\u003ccode\u003eindex\u003c/code\u003e - the position in the container\u0027s list at which to insert the component, where \n\u003ccode\u003e-1\u003c/code\u003e means append to the end"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if adding the container\u0027s parent to itself",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if adding a window to a container"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.LayoutManager",
            "type": "Class"
          },
          "field": {
            "name": "mgr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLayout",
      "comment": "Sets the layout manager for this container, refer to Container.setLayout(LayoutManager) for a complete description of this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#doLayout()\"\u003e\u003ccode\u003eContainer.doLayout()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getLayout()\"\u003e\u003ccode\u003eContainer.getLayout()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#invalidate()\"\u003e\u003ccode\u003eContainer.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setLayout(java.awt.LayoutManager)\"\u003esetLayout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emgr\u003c/code\u003e - the specified layout manager"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addChangeListener",
      "comment": "Adds a ChangeListener to the button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeChangeListener",
      "comment": "Removes a ChangeListener from the button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChangeListeners",
      "comment": "Returns an array of all the ChangeListeners added to this AbstractButton with addChangeListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eChangeListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireStateChanged",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addActionListener",
      "comment": "Adds an ActionListener to the button.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eActionListener\u003c/code\u003e to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeActionListener",
      "comment": "Removes an ActionListener from the button. If the listener is the currently set Action for the button, then the Action is set to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the listener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ActionListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActionListeners",
      "comment": "Returns an array of all the ActionListeners added to this AbstractButton with addActionListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eActionListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createChangeListener",
      "comment": "Subclasses that want to handle ChangeEvents differently can override this to return another ChangeListener implementation.",
      "tagMap": {
        "return": [
          "the new \n\u003ccode\u003eChangeListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireActionPerformed",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the event parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eActionEvent\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ItemEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireItemStateChanged",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the event parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003eItemEvent\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ActionListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createActionListener",
      "comment": "Returns ActionListener that is added to model.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eActionListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ItemListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createItemListener",
      "comment": "Returns ItemListener that is added to model.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eItemListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEnabled",
      "comment": "Enables (or disables) the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isEnabled()\"\u003e\u003ccode\u003eComponent.isEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isLightweight()\"\u003e\u003ccode\u003eComponent.isLightweight()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setEnabled(boolean)\"\u003esetEnabled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - true to enable the button, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLabel",
      "comment": "Returns the label text.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the label"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "label"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLabel",
      "comment": "Sets the label text.",
      "annotations": [
        {
          "type": "Deprecated"
        },
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "Replace by setText(text)"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elabel\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ItemListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addItemListener",
      "comment": "Adds an ItemListener to the checkbox.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ItemEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eItemEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html#addItemListener(java.awt.event.ItemListener)\"\u003eaddItemListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html\" title\u003d\"interface in java.awt\"\u003eItemSelectable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eItemListener\u003c/code\u003e to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ItemListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeItemListener",
      "comment": "Removes an ItemListener from the button.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ItemEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eItemEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html#removeItemListener(java.awt.event.ItemListener)\"\u003eremoveItemListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html\" title\u003d\"interface in java.awt\"\u003eItemSelectable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the \n\u003ccode\u003eItemListener\u003c/code\u003e to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ItemListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getItemListeners",
      "comment": "Returns an array of all the ItemListeners added to this AbstractButton with addItemListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eItemListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedObjects",
      "comment": "Returns an array (length 1) containing the label or null if the button is not selected.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html#getSelectedObjects()\"\u003egetSelectedObjects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ItemSelectable.html\" title\u003d\"interface in java.awt\"\u003eItemSelectable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an array containing 1 Object: the text of the button, if the item is selected; otherwise \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.Icon",
            "type": "Class"
          },
          "field": {
            "name": "icon"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "init",
      "comment": "Initialization of the AbstractButton.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text of the button",
          "\u003ccode\u003eicon\u003c/code\u003e - the Icon image to display on the button"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "infoflags"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "imageUpdate",
      "comment": "This is overridden to return false if the current Icon\u0027s Image is not equal to the passed in Image img.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eComponent.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003eimageUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003eimageUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003eImageObserver\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the \n\u003ccode\u003eImage\u003c/code\u003e to be compared",
          "\u003ccode\u003einfoflags\u003c/code\u003e - flags used to repaint the button when the image is updated and which determine how much is to be painted",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - the width",
          "\u003ccode\u003eh\u003c/code\u003e - the height"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the infoflags indicate that the image is completely loaded; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this AbstractButton. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null. Overriding paramString to provide information about the specific new aspects of the JFC components.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eAbstractButton\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.AbstractButton$AccessibleAbstractButton",
    "javax.swing.AbstractButton$ButtonChangeListener"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.AbstractButton",
  "comment": "Defines common behaviors for buttons and menu items. \n\u003cp\u003e Buttons can be configured, and to some degree controlled, by \u003ccode\u003e\u003ca href\u003d\"Action.html\"\u003eAction\u003c/a\u003e\u003c/code\u003es. Using an \u003ccode\u003eAction\u003c/code\u003e with a button has many benefits beyond directly configuring a button. Refer to \u003ca href\u003d\"Action.html#buttonActions\"\u003e Swing Components Supporting \u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e for more details, and you can find more information in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/action.html\"\u003eHow to Use Actions\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e For further information see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/button.html\"\u003eHow to Use Buttons, Check Boxes, and Radio Buttons\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}