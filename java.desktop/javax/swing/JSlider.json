{
  "packageName": "javax.swing",
  "simpleName": "JSlider",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.BoundedRangeModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sliderModel",
      "comment": "The data model that handles the numeric maximum value, minimum value, and current-position value for the slider.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "majorTickSpacing",
      "comment": "The number of values between the major tick marks -- the larger marks that break up the minor tick marks.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "minorTickSpacing",
      "comment": "The number of values between the minor tick marks -- the smaller marks that occur between the major tick marks.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMinorTickSpacing(int)\"\u003e\u003ccode\u003esetMinorTickSpacing(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "snapToTicks",
      "comment": "If true, the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob. The default is false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setSnapToTicks(boolean)\"\u003e\u003ccode\u003esetSnapToTicks(boolean)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "orientation",
      "comment": "Whether the slider is horizontal or vertical The default is horizontal.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setOrientation(int)\"\u003e\u003ccode\u003esetOrientation(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "changeListener",
      "comment": "The changeListener (no suffix) is the listener we add to the slider\u0027s model. This listener is initialized to the ChangeListener returned from createChangeListener, which by default just forwards events to ChangeListeners (if any) added directly to the slider.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eaddChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#createChangeListener()\"\u003e\u003ccode\u003ecreateChangeListener()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.swing.event.ChangeEvent",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "changeEvent",
      "comment": "Only one ChangeEvent is needed per slider instance since the event\u0027s only (read-only) state is the source property. The source of events generated here is always \"this\". The event is lazily created the first time that an event notification is fired.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#fireStateChanged()\"\u003e\u003ccode\u003efireStateChanged()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.SliderUI",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Gets the UI object which implements the L\u0026F for this component.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the SliderUI object that implements the Slider L\u0026amp;F"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the UI object which implements the L\u0026F for this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "The UI object that implements the slider\u0027s LookAndFeel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the SliderUI L\u0026amp;F object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Resets the UI property to a value from the current look and feel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Returns the name of the L\u0026F class that renders this component.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"SliderUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createChangeListener",
      "comment": "Subclasses that want to handle ChangeEvents from the model differently can override this to return an instance of a custom ChangeListener implementation. The default ChangeListener simply calls the fireStateChanged method to forward ChangeEvents to the ChangeListeners that have been added directly to the slider.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#changeListener\"\u003e\u003ccode\u003echangeListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#fireStateChanged()\"\u003e\u003ccode\u003efireStateChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/ChangeListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eChangeListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a instance of new \n\u003ccode\u003eChangeListener\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addChangeListener",
      "comment": "Adds a ChangeListener to the slider.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#fireStateChanged()\"\u003e\u003ccode\u003efireStateChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#removeChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eremoveChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the ChangeListener to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeChangeListener",
      "comment": "Removes a ChangeListener from the slider.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#fireStateChanged()\"\u003e\u003ccode\u003efireStateChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eaddChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the ChangeListener to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChangeListeners",
      "comment": "Returns an array of all the ChangeListeners added to this JSlider with addChangeListener().",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eChangeListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireStateChanged",
      "comment": "Send a ChangeEvent, whose source is this JSlider, to all ChangeListeners that have registered interest in ChangeEvents. This method is called each time a ChangeEvent is received from the model. The event instance is created if necessary, and stored in changeEvent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eaddChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.BoundedRangeModel",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModel",
      "comment": "Returns the BoundedRangeModel that handles the slider\u0027s three fundamental properties: minimum, maximum, value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setModel(javax.swing.BoundedRangeModel)\"\u003e\u003ccode\u003esetModel(javax.swing.BoundedRangeModel)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the data model for this component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModel",
      "comment": "Sets the BoundedRangeModel that handles the slider\u0027s three fundamental properties: minimum, maximum, value. Attempts to pass a null model to this method result in undefined behavior, and, most likely, exceptions.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "escription",
              "value": "The sliders BoundedRangeModel."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getModel()\"\u003e\u003ccode\u003egetModel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewModel\u003c/code\u003e - the new, \n\u003ccode\u003enon-null\u003c/code\u003e \n\u003ccode\u003eBoundedRangeModel\u003c/code\u003e to use"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Returns the slider\u0027s current value from the BoundedRangeModel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setValue(int)\"\u003e\u003ccode\u003esetValue(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#getValue()\"\u003e\u003ccode\u003eBoundedRangeModel.getValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current value of the slider"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValue",
      "comment": "Sets the slider\u0027s current value to n. This method forwards the new value to the model. The data model (an instance of BoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See the BoundedRangeModel documentation for details. If the new value is different from the previous value, all change listeners are notified.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "The sliders current value."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getValue()\"\u003e\u003ccode\u003egetValue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eaddChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#setValue(int)\"\u003e\u003ccode\u003eBoundedRangeModel.setValue(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimum",
      "comment": "Returns the minimum value supported by the slider from the BoundedRangeModel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMinimum(int)\"\u003e\u003ccode\u003esetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#getMinimum()\"\u003e\u003ccode\u003eBoundedRangeModel.getMinimum()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the model\u0027s minimum property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimum",
      "comment": "Sets the slider\u0027s minimum value to minimum. This method forwards the new minimum value to the model. The data model (an instance of BoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See the BoundedRangeModel documentation for details. If the new minimum value is different from the previous minimum value, all change listeners are notified.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "The sliders minimum value."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getMinimum()\"\u003e\u003ccode\u003egetMinimum()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eaddChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#setMinimum(int)\"\u003e\u003ccode\u003eBoundedRangeModel.setMinimum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eminimum\u003c/code\u003e - the new minimum"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximum",
      "comment": "Returns the maximum value supported by the slider from the BoundedRangeModel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMaximum(int)\"\u003e\u003ccode\u003esetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#getMaximum()\"\u003e\u003ccode\u003eBoundedRangeModel.getMaximum()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the model\u0027s maximum property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximum",
      "comment": "Sets the slider\u0027s maximum value to maximum. This method forwards the new maximum value to the model. The data model (an instance of BoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See the BoundedRangeModel documentation for details. If the new maximum value is different from the previous maximum value, all change listeners are notified.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "The sliders maximum value."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getMaximum()\"\u003e\u003ccode\u003egetMaximum()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#addChangeListener(javax.swing.event.ChangeListener)\"\u003e\u003ccode\u003eaddChangeListener(javax.swing.event.ChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#setMaximum(int)\"\u003e\u003ccode\u003eBoundedRangeModel.setMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaximum\u003c/code\u003e - the new maximum"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValueIsAdjusting",
      "comment": "Returns the valueIsAdjusting property from the model. For details on how this is used, see the setValueIsAdjusting documentation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setValueIsAdjusting(boolean)\"\u003e\u003ccode\u003esetValueIsAdjusting(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the model\u0027s \n\u003ccode\u003evalueIsAdjusting\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValueIsAdjusting",
      "comment": "Sets the model\u0027s valueIsAdjusting property. Slider look and feel implementations should set this property to true when a knob drag begins, and to false when the drag ends.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "True if the slider knob is being dragged."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getValueIsAdjusting()\"\u003e\u003ccode\u003egetValueIsAdjusting()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#setValueIsAdjusting(boolean)\"\u003e\u003ccode\u003eBoundedRangeModel.setValueIsAdjusting(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the new value for the \n\u003ccode\u003evalueIsAdjusting\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtent",
      "comment": "Returns the \"extent\" from the BoundedRangeModel. This represents the range of values \"covered\" by the knob.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setExtent(int)\"\u003e\u003ccode\u003esetExtent(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#getExtent()\"\u003e\u003ccode\u003eBoundedRangeModel.getExtent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an int representing the extent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExtent",
      "comment": "Sets the size of the range \"covered\" by the knob. Most look and feel implementations will change the value by this amount if the user clicks on either side of the knob. This method just forwards the new extent value to the model. The data model (an instance of BoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See the BoundedRangeModel documentation for details. If the new extent value is different from the previous extent value, all change listeners are notified.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "Size of the range covered by the knob."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getExtent()\"\u003e\u003ccode\u003egetExtent()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html#setExtent(int)\"\u003e\u003ccode\u003eBoundedRangeModel.setExtent(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eextent\u003c/code\u003e - the new extent"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOrientation",
      "comment": "Return this slider\u0027s vertical or horizontal orientation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setOrientation(int)\"\u003e\u003ccode\u003esetOrientation(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOrientation",
      "comment": "Set the slider\u0027s orientation to either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "JSlider.VERTICAL",
                "JSlider.HORIZONTAL"
              ]
            },
            {
              "name": "escription",
              "value": "Set the scrollbars orientation to either VERTICAL or HORIZONTAL."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getOrientation()\"\u003e\u003ccode\u003egetOrientation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eorientation\u003c/code\u003e - \n\u003ccode\u003eHORIZONTAL\u003c/code\u003e or \n\u003ccode\u003eVERTICAL\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if orientation is not one of \n\u003ccode\u003eVERTICAL\u003c/code\u003e, \n\u003ccode\u003eHORIZONTAL\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFont",
      "comment": "Sets the font for this component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFont()\"\u003e\u003ccode\u003eComponent.getFont()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setFont(java.awt.Font)\"\u003esetFont\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - the desired \n\u003ccode\u003eFont\u003c/code\u003e for this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "imageUpdate",
      "comment": "Repaints the component when the image has changed. This imageUpdate method of an ImageObserver is called when more information about an image which had been previously requested using an asynchronous routine such as the drawImage method of Graphics becomes available. See the definition of imageUpdate for more information on this method and its arguments. The imageUpdate method of Component incrementally draws an image on the component as more of the bits of the image are available. If the system property awt.image.incrementaldraw is missing or has the value true, the image is incrementally drawn. If the system property has any other value, then the image is not drawn until it has been completely loaded. Also, if incremental drawing is in effect, the value of the system property awt.image.redrawrate is interpreted as an integer to give the maximum redraw rate, in milliseconds. If the system property is missing or cannot be interpreted as an integer, the redraw rate is once every 100ms. The interpretation of the x, y, width, and height arguments depends on the value of the infoflags argument.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eGraphics.drawImage(Image, int, int, Color, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eGraphics.drawImage(Image, int, int, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eGraphics.drawImage(Image, int, int, int, int, Color, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eGraphics.drawImage(Image, int, int, int, int, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003eimageUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003eimageUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003eImageObserver\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the image being observed",
          "\u003ccode\u003einfoflags\u003c/code\u003e - see \n\u003ccode\u003eimageUpdate\u003c/code\u003e for more information",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate",
          "\u003ccode\u003ew\u003c/code\u003e - the width",
          "\u003ccode\u003eh\u003c/code\u003e - the height"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the infoflags indicate that the image is completely loaded; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Dictionary",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLabelTable",
      "comment": "Returns the dictionary of what labels to draw at which values.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eDictionary\u003c/code\u003e containing labels and where to draw them"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLabelTable",
      "comment": "Used to specify what label will be drawn at any given value. The key-value pairs are of this format: { Integer value, java.swing.JComponent label }. An easy way to generate a standard table of value labels is by using the createStandardLabels method. Once the labels have been set, this method calls updateLabelUIs(). Note that the labels are only painted if the paintLabels property is true.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "hidden",
              "value": true
            },
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Specifies what labels will be drawn for any given value."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#createStandardLabels(int)\"\u003e\u003ccode\u003ecreateStandardLabels(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getLabelTable()\"\u003e\u003ccode\u003egetLabelTable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintLabels(boolean)\"\u003e\u003ccode\u003esetPaintLabels(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elabels\u003c/code\u003e - new \n\u003ccode\u003eDictionary\u003c/code\u003e of labels, or \n\u003ccode\u003enull\u003c/code\u003e to remove all labels"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateLabelUIs",
      "comment": "Updates the UIs for the labels in the label table by calling updateUI on each label. The UIs are updated from the current look and feel. The labels are also set to their preferred size.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setLabelTable(java.util.Dictionary)\"\u003e\u003ccode\u003esetLabelTable(java.util.Dictionary)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003e\u003ccode\u003eJComponent.updateUI()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "javax.swing.JComponent",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createStandardLabels",
      "comment": "Creates a Hashtable of numerical text labels, starting at the slider minimum, and using the increment specified. For example, if you call createStandardLabels( 10 ) and the slider minimum is zero, then labels will be created for the values 0, 10, 20, 30, and so on. For the labels to be drawn on the slider, the returned Hashtable must be passed into setLabelTable, and setPaintLabels must be set to true. For further details on the makeup of the returned Hashtable, see the setLabelTable documentation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setLabelTable(java.util.Dictionary)\"\u003e\u003ccode\u003esetLabelTable(java.util.Dictionary)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintLabels(boolean)\"\u003e\u003ccode\u003esetPaintLabels(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eincrement\u003c/code\u003e - distance between labels in the generated hashtable"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eincrement\u003c/code\u003e is less than or equal to zero"
        ],
        "return": [
          "a new \n\u003ccode\u003eHashtable\u003c/code\u003e of labels"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          },
          {
            "name": "javax.swing.JComponent",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createStandardLabels",
      "comment": "Creates a Hashtable of numerical text labels, starting at the starting point specified, and using the increment specified. For example, if you call createStandardLabels( 10, 2 ), then labels will be created for the values 2, 12, 22, 32, and so on. For the labels to be drawn on the slider, the returned Hashtable must be passed into setLabelTable, and setPaintLabels must be set to true. For further details on the makeup of the returned Hashtable, see the setLabelTable documentation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setLabelTable(java.util.Dictionary)\"\u003e\u003ccode\u003esetLabelTable(java.util.Dictionary)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintLabels(boolean)\"\u003e\u003ccode\u003esetPaintLabels(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eincrement\u003c/code\u003e - distance between labels in the generated hashtable",
          "\u003ccode\u003estart\u003c/code\u003e - value at which the labels will begin"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is out of range, or if \n\u003ccode\u003eincrement\u003c/code\u003e is less than or equal to zero"
        ],
        "return": [
          "a new \n\u003ccode\u003eHashtable\u003c/code\u003e of labels"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInverted",
      "comment": "Returns true if the value-range shown for the slider is reversed,",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setInverted(boolean)\"\u003e\u003ccode\u003esetInverted(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the slider values are reversed from their normal order"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInverted",
      "comment": "Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order. The order depends on the slider\u0027s ComponentOrientation property. Normal (non-inverted) horizontal sliders with a ComponentOrientation value of LEFT_TO_RIGHT have their maximum on the right. Normal horizontal sliders with a ComponentOrientation value of RIGHT_TO_LEFT have their maximum on the left. Normal vertical sliders have their maximum on the top. These labels are reversed when the slider is inverted. By default, the value of this property is false.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If true reverses the slider values from their normal order"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - true to reverse the slider values from their normal order"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMajorTickSpacing",
      "comment": "This method returns the major tick spacing. The number that is returned represents the distance, measured in values, between each major tick mark. If you have a slider with a range from 0 to 50 and the major tick spacing is set to 10, you will get major ticks next to the following values: 0, 10, 20, 30, 40, 50.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMajorTickSpacing(int)\"\u003e\u003ccode\u003esetMajorTickSpacing(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of values between major ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMajorTickSpacing",
      "comment": "This method sets the major tick spacing. The number that is passed in represents the distance, measured in values, between each major tick mark. If you have a slider with a range from 0 to 50 and the major tick spacing is set to 10, you will get major ticks next to the following values: 0, 10, 20, 30, 40, 50. In order for major ticks to be painted, setPaintTicks must be set to true. This method will also set up a label table for you. If there is not already a label table, and the major tick spacing is \u003e 0, and getPaintLabels returns true, a standard label table will be generated (by calling createStandardLabels) with labels at the major tick marks. For the example above, you would get text labels: \"0\", \"10\", \"20\", \"30\", \"40\", \"50\". The label table is then set on the slider by calling setLabelTable.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Sets the number of values between major tick marks."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getMajorTickSpacing()\"\u003e\u003ccode\u003egetMajorTickSpacing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintTicks(boolean)\"\u003e\u003ccode\u003esetPaintTicks(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setLabelTable(java.util.Dictionary)\"\u003e\u003ccode\u003esetLabelTable(java.util.Dictionary)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#createStandardLabels(int)\"\u003e\u003ccode\u003ecreateStandardLabels(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - new value for the \n\u003ccode\u003emajorTickSpacing\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinorTickSpacing",
      "comment": "This method returns the minor tick spacing. The number that is returned represents the distance, measured in values, between each minor tick mark. If you have a slider with a range from 0 to 50 and the minor tick spacing is set to 10, you will get minor ticks next to the following values: 0, 10, 20, 30, 40, 50.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getMinorTickSpacing()\"\u003e\u003ccode\u003egetMinorTickSpacing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of values between minor ticks"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinorTickSpacing",
      "comment": "This method sets the minor tick spacing. The number that is passed in represents the distance, measured in values, between each minor tick mark. If you have a slider with a range from 0 to 50 and the minor tick spacing is set to 10, you will get minor ticks next to the following values: 0, 10, 20, 30, 40, 50. In order for minor ticks to be painted, setPaintTicks must be set to true.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "Sets the number of values between minor tick marks."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getMinorTickSpacing()\"\u003e\u003ccode\u003egetMinorTickSpacing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintTicks(boolean)\"\u003e\u003ccode\u003esetPaintTicks(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - new value for the \n\u003ccode\u003eminorTickSpacing\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSnapToTicks",
      "comment": "Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setSnapToTicks(boolean)\"\u003e\u003ccode\u003esetSnapToTicks(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if the value snaps to the nearest tick mark, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSnapToTicks",
      "comment": "Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob. By default, this property is false.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "escription",
              "value": "If true snap the knob to the nearest tick mark."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getSnapToTicks()\"\u003e\u003ccode\u003egetSnapToTicks()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - true to snap the knob to the nearest tick mark"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPaintTicks",
      "comment": "Tells if tick marks are to be painted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintTicks(boolean)\"\u003e\u003ccode\u003esetPaintTicks(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if tick marks are painted, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPaintTicks",
      "comment": "Determines whether tick marks are painted on the slider. By default, this property is false.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If true tick marks are painted on the slider."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getPaintTicks()\"\u003e\u003ccode\u003egetPaintTicks()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not tick marks should be painted"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPaintTrack",
      "comment": "Tells if the track (area the slider slides in) is to be painted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintTrack(boolean)\"\u003e\u003ccode\u003esetPaintTrack(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if track is painted, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPaintTrack",
      "comment": "Determines whether the track is painted on the slider. By default, this property is true. It is up to the look and feel to honor this property, some may choose to ignore it.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If true, the track is painted on the slider."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getPaintTrack()\"\u003e\u003ccode\u003egetPaintTrack()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not to paint the slider track"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPaintLabels",
      "comment": "Tells if labels are to be painted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setPaintLabels(boolean)\"\u003e\u003ccode\u003esetPaintLabels(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if labels are painted, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPaintLabels",
      "comment": "Determines whether labels are painted on the slider. This method will also set up a label table for you. If there is not already a label table, and the major tick spacing is \u003e 0, a standard label table will be generated (by calling createStandardLabels) with labels at the major tick marks. The label table is then set on the slider by calling setLabelTable. By default, this property is false.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "If true labels are painted on the slider."
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getPaintLabels()\"\u003e\u003ccode\u003egetPaintLabels()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#getLabelTable()\"\u003e\u003ccode\u003egetLabelTable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#createStandardLabels(int)\"\u003e\u003ccode\u003ecreateStandardLabels(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not to paint labels"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JSlider. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this JSlider."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JSlider. For sliders, the AccessibleContext takes the form of an AccessibleJSlider. A new AccessibleJSlider instance is created if necessary.",
      "annotations": [
        {
          "type": {
            "name": "BeanProperty",
            "type": "Class"
          },
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleJSlider that serves as the AccessibleContext of this JSlider"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a horizontal slider with the range 0 to 100 and an initial value of 50.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "orientation",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a slider using the specified orientation with the range 0 to 100 and an initial value of 50. The orientation can be either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setOrientation(int)\"\u003e\u003ccode\u003esetOrientation(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eorientation\u003c/code\u003e - the orientation of the slider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if orientation is not one of \n\u003ccode\u003eVERTICAL\u003c/code\u003e, \n\u003ccode\u003eHORIZONTAL\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "min",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a horizontal slider using the specified min and max with an initial value equal to the average of the min plus max. The BoundedRangeModel that holds the slider\u0027s data handles any issues that may arise from improperly setting the minimum and maximum values on the slider. See the BoundedRangeModel documentation for details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMinimum(int)\"\u003e\u003ccode\u003esetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMaximum(int)\"\u003e\u003ccode\u003esetMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - the minimum value of the slider",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum value of the slider"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "min",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a horizontal slider using the specified min, max and value. The BoundedRangeModel that holds the slider\u0027s data handles any issues that may arise from improperly setting the minimum, initial, and maximum values on the slider. See the BoundedRangeModel documentation for details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMinimum(int)\"\u003e\u003ccode\u003esetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMaximum(int)\"\u003e\u003ccode\u003esetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setValue(int)\"\u003e\u003ccode\u003esetValue(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emin\u003c/code\u003e - the minimum value of the slider",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum value of the slider",
          "\u003ccode\u003evalue\u003c/code\u003e - the initial value of the slider"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "orientation",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "min",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a slider with the specified orientation and the specified minimum, maximum, and initial values. The orientation can be either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. The BoundedRangeModel that holds the slider\u0027s data handles any issues that may arise from improperly setting the minimum, initial, and maximum values on the slider. See the BoundedRangeModel documentation for details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setOrientation(int)\"\u003e\u003ccode\u003esetOrientation(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMinimum(int)\"\u003e\u003ccode\u003esetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setMaximum(int)\"\u003e\u003ccode\u003esetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JSlider.html#setValue(int)\"\u003e\u003ccode\u003esetValue(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eorientation\u003c/code\u003e - the orientation of the slider",
          "\u003ccode\u003emin\u003c/code\u003e - the minimum value of the slider",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum value of the slider",
          "\u003ccode\u003evalue\u003c/code\u003e - the initial value of the slider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if orientation is not one of \n\u003ccode\u003eVERTICAL\u003c/code\u003e, \n\u003ccode\u003eHORIZONTAL\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.BoundedRangeModel",
            "type": "Class"
          },
          "name": "brm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a horizontal slider using the specified BoundedRangeModel.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebrm\u003c/code\u003e - a \n\u003ccode\u003eBoundedRangeModel\u003c/code\u003e for the slider"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JSlider$AccessibleJSlider"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JSlider",
  "comment": "A component that lets the user graphically select a value by sliding a knob within a bounded interval. The knob is always positioned at the points that match integer values within the specified interval. \n\u003cp\u003e The slider can show both major tick marks, and minor tick marks between the major ones. The number of values between the tick marks is controlled with \u003ccode\u003esetMajorTickSpacing\u003c/code\u003e and \u003ccode\u003esetMinorTickSpacing\u003c/code\u003e. Painting of tick marks is controlled by \u003ccode\u003esetPaintTicks\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Sliders can also print text labels at regular intervals (or at arbitrary locations) along the slider track. Painting of labels is controlled by \u003ccode\u003esetLabelTable\u003c/code\u003e and \u003ccode\u003esetPaintLabels\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e For further information and examples see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/slider.html\"\u003eHow to Use Sliders\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}