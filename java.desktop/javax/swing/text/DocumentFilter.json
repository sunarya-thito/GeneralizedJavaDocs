{
  "packageName": "javax.swing.text",
  "simpleName": "DocumentFilter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.DocumentFilter$FilterBypass",
            "type": "Class"
          },
          "name": "fb",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Invoked prior to removal of the specified region in the specified Document. Subclasses that want to conditionally allow removal should override this and only call supers implementation as necessary, or call directly into the FilterBypass as necessary.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efb\u003c/code\u003e - FilterBypass that can be used to mutate Document",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset from the beginning \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to remove \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - some portion of the removal range was not a valid part of the document. The location in the exception is the first bad position encountered."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.DocumentFilter$FilterBypass",
            "type": "Class"
          },
          "name": "fb",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "string",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "name": "attr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertString",
      "comment": "Invoked prior to insertion of text into the specified Document. Subclasses that want to conditionally allow insertion should override this and only call supers implementation as necessary, or call directly into the FilterBypass.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efb\u003c/code\u003e - FilterBypass that can be used to mutate Document",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the document to insert the content \u0026gt;\u003d 0. All positions that track change at or after the given location will move.",
          "\u003ccode\u003estring\u003c/code\u003e - the string to insert",
          "\u003ccode\u003eattr\u003c/code\u003e - the attributes to associate with the inserted content. This may be null if there are no attributes."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given insert position is not a valid position within the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.DocumentFilter$FilterBypass",
            "type": "Class"
          },
          "name": "fb",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "name": "attrs",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Invoked prior to replacing a region of text in the specified Document. Subclasses that want to conditionally allow replace should override this and only call supers implementation as necessary, or call directly into the FilterBypass.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efb\u003c/code\u003e - FilterBypass that can be used to mutate Document",
          "\u003ccode\u003eoffset\u003c/code\u003e - Location in Document",
          "\u003ccode\u003elength\u003c/code\u003e - Length of text to delete",
          "\u003ccode\u003etext\u003c/code\u003e - Text to insert, null indicates no text to insert",
          "\u003ccode\u003eattrs\u003c/code\u003e - AttributeSet indicating attributes of inserted text, null is legal."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given insert position is not a valid position within the document"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DocumentFilter.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.text.DocumentFilter$FilterBypass"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.DocumentFilter",
  "comment": "\u003ccode\u003eDocumentFilter\u003c/code\u003e, as the name implies, is a filter for the \n\u003ccode\u003eDocument\u003c/code\u003e mutation methods. When a \n\u003ccode\u003eDocument\u003c/code\u003e containing a \n\u003ccode\u003eDocumentFilter\u003c/code\u003e is modified (either through \n\u003ccode\u003einsert\u003c/code\u003e or \n\u003ccode\u003eremove\u003c/code\u003e), it forwards the appropriate method invocation to the \n\u003ccode\u003eDocumentFilter\u003c/code\u003e. The default implementation allows the modification to occur. Subclasses can filter the modifications by conditionally invoking methods on the superclass, or invoking the necessary methods on the passed in \n\u003ccode\u003eFilterBypass\u003c/code\u003e. Subclasses should NOT call back into the Document for the modification instead call into the superclass or the \n\u003ccode\u003eFilterBypass\u003c/code\u003e. \n\u003cp\u003e When \u003ccode\u003eremove\u003c/code\u003e or \u003ccode\u003einsertString\u003c/code\u003e is invoked on the \u003ccode\u003eDocumentFilter\u003c/code\u003e, the \u003ccode\u003eDocumentFilter\u003c/code\u003e may callback into the \u003ccode\u003eFilterBypass\u003c/code\u003e multiple times, or for different regions, but it should not callback into the \u003ccode\u003eFilterBypass\u003c/code\u003e after returning from the \u003ccode\u003eremove\u003c/code\u003e or \u003ccode\u003einsertString\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e By default, text related document mutation methods such as \u003ccode\u003einsertString\u003c/code\u003e, \u003ccode\u003ereplace\u003c/code\u003e and \u003ccode\u003eremove\u003c/code\u003e in \u003ccode\u003eAbstractDocument\u003c/code\u003e use \u003ccode\u003eDocumentFilter\u003c/code\u003e when available, and \u003ccode\u003eElement\u003c/code\u003e related mutation methods such as \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003einsert\u003c/code\u003e and \u003ccode\u003eremoveElement\u003c/code\u003e in \u003ccode\u003eDefaultStyledDocument\u003c/code\u003e do not use \u003ccode\u003eDocumentFilter\u003c/code\u003e. If a method doesn\u0027t follow these defaults, this must be explicitly stated in the method documentation.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eAbstractDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eDefaultStyledDocument\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}