{
  "packageName": "javax.swing.text",
  "simpleName": "EditorKit",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of the editor kit. This is implemented to use Object.clone(). If the kit cannot be cloned, null is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the copy"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "install",
      "comment": "Called when the kit is being installed into the a JEditorPane.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JEditorPane"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deinstall",
      "comment": "Called when the kit is being removed from the JEditorPane. This is used to unregister any listeners that were attached.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JEditorPane"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getContentType",
      "comment": "Gets the MIME type of the data that this kit represents support for.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.ViewFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getViewFactory",
      "comment": "Fetches a factory that is suitable for producing views of any models that are produced by this kit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getActions",
      "comment": "Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the set of actions"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Caret",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createCaret",
      "comment": "Fetches a caret that can navigate through views produced by the associated ViewFactory.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the caret"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createDefaultDocument",
      "comment": "Creates an uninitialized text storage model that is appropriate for this type of editor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "read",
      "comment": "Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The stream to read from",
          "\u003ccode\u003edoc\u003c/code\u003e - The destination for the insertion.",
          "\u003ccode\u003epos\u003c/code\u003e - The location in the document to place the content \u0026gt;\u003d 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "write",
      "comment": "Writes content from a document to the given stream in a format appropriate for this kind of content handler.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - The stream to write to",
          "\u003ccode\u003edoc\u003c/code\u003e - The source for the write.",
          "\u003ccode\u003epos\u003c/code\u003e - The location in the document to fetch the content from \u0026gt;\u003d 0.",
          "\u003ccode\u003elen\u003c/code\u003e - The amount to write out \u0026gt;\u003d 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "read",
      "comment": "Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler. Since actual text editing is unicode based, this would generally be the preferred way to read in the data. Some types of content are stored in an 8-bit form however, and will favor the InputStream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The stream to read from",
          "\u003ccode\u003edoc\u003c/code\u003e - The destination for the insertion.",
          "\u003ccode\u003epos\u003c/code\u003e - The location in the document to place the content \u0026gt;\u003d 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "write",
      "comment": "Writes content from a document to the given stream in a format appropriate for this kind of content handler. Since actual text editing is unicode based, this would generally be the preferred way to write the data. Some types of content are stored in an 8-bit form however, and will favor the OutputStream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - The stream to write to",
          "\u003ccode\u003edoc\u003c/code\u003e - The source for the write.",
          "\u003ccode\u003epos\u003c/code\u003e - The location in the document to fetch the content \u0026gt;\u003d 0.",
          "\u003ccode\u003elen\u003c/code\u003e - The amount to write out \u0026gt;\u003d 0."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct an EditorKit.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.text.EditorKit",
  "comment": "Establishes the set of things needed by a text component to be a reasonably functioning editor for some \n\u003cem\u003etype\u003c/em\u003e of text content. The EditorKit acts as a factory for some kind of policy. For example, an implementation of html and rtf can be provided that is replaceable with other implementations. \n\u003cp\u003e A kit can safely store editing state as an instance of the kit will be dedicated to a text component. New kits will normally be created by cloning a prototype kit. The kit will have its \u003ccode\u003esetComponent\u003c/code\u003e method called to establish its relationship with a JTextComponent.\u003c/p\u003e",
  "tagMap": {}
}