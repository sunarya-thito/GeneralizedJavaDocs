{
  "packageName": "javax.swing.text",
  "simpleName": "StyleContext",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_STYLE",
      "comment": "The name given to the default logical style attached to paragraphs.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.StyleContext.DEFAULT_STYLE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.StyleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDefaultStyleContext",
      "comment": "Returns default AttributeContext shared by all documents that don\u0027t bother to define/supply their own context.",
      "tagMap": {
        "return": [
          "the context"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Style",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addStyle",
      "comment": "Adds a new style into the style hierarchy. Style attributes resolve from bottom up so an attribute specified in a child will override an attribute specified in the parent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style (must be unique within the collection of named styles in the document). The name may be null if the style is unnamed, but the caller is responsible for managing the reference returned as an unnamed style can\u0027t be fetched by name. An unnamed style may be useful for things like character attribute overrides such as found in a style run.",
          "\u003ccode\u003eparent\u003c/code\u003e - the parent style. This may be null if unspecified attributes need not be resolved in some other style."
        ],
        "return": [
          "the created style"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeStyle",
      "comment": "Removes a named style previously added to the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyle",
      "comment": "Fetches a named style previously added to the document",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style"
        ],
        "return": [
          "the style"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyleNames",
      "comment": "Fetches the names of the styles defined.",
      "tagMap": {
        "return": [
          "the list of names as an enumeration"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addChangeListener",
      "comment": "Adds a listener to track when styles are added or removed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the change listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.ChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeChangeListener",
      "comment": "Removes a listener that was tracking styles being added or removed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the change listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.ChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChangeListeners",
      "comment": "Returns an array of all the ChangeListeners added to this StyleContext with addChangeListener().",
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eChangeListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFont",
      "comment": "Gets the font from an attribute set. This is implemented to try and fetch a cached font for the given AttributeSet, and if that fails the font features are resolved and the font is fetched from the low-level font cache.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the attribute set"
        ],
        "return": [
          "the font"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getForeground",
      "comment": "Takes a set of attributes and turn it into a foreground color specification. This might be used to specify things like brighter, more hue, etc. By default it simply returns the value specified by the StyleConstants.Foreground attribute.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the set of attributes"
        ],
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBackground",
      "comment": "Takes a set of attributes and turn it into a background color specification. This might be used to specify things like brighter, more hue, etc. By default it simply returns the value specified by the StyleConstants.Background attribute.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the set of attributes"
        ],
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "family"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFont",
      "comment": "Gets a new font. This returns a Font from a cache if a cached font exists. If not, a Font is added to the cache. This is basically a low-level cache for 1.1 font features.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efamily\u003c/code\u003e - the font family (such as \"Monospaced\")",
          "\u003ccode\u003estyle\u003c/code\u003e - the style of the font (such as Font.PLAIN)",
          "\u003ccode\u003esize\u003c/code\u003e - the point size \u0026gt;\u003d 1"
        ],
        "return": [
          "the new font"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.FontMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFontMetrics",
      "comment": "Returns font metrics for a font.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the font"
        ],
        "return": [
          "the metrics"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "old"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAttribute",
      "comment": "Adds an attribute to the given set, and returns the new representative set. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html#addAttribute(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eMutableAttributeSet.addAttribute(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)\"\u003eaddAttribute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eold\u003c/code\u003e - the old attribute set",
          "\u003ccode\u003ename\u003c/code\u003e - the non-null attribute name",
          "\u003ccode\u003evalue\u003c/code\u003e - the attribute value"
        ],
        "return": [
          "the updated attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "old"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAttributes",
      "comment": "Adds a set of attributes to the element. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html#addAttribute(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eMutableAttributeSet.addAttribute(java.lang.Object, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#addAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)\"\u003eaddAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eold\u003c/code\u003e - the old attribute set",
          "\u003ccode\u003eattr\u003c/code\u003e - the attributes to add"
        ],
        "return": [
          "the updated attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "old"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAttribute",
      "comment": "Removes an attribute from the set. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html#removeAttribute(java.lang.Object)\"\u003e\u003ccode\u003eMutableAttributeSet.removeAttribute(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)\"\u003eremoveAttribute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eold\u003c/code\u003e - the old set of attributes",
          "\u003ccode\u003ename\u003c/code\u003e - the non-null attribute name"
        ],
        "return": [
          "the updated attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "old"
          }
        },
        {
          "type": {
            "name": "java.util.Enumeration",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "names"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAttributes",
      "comment": "Removes a set of attributes for the element. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html#removeAttributes(java.util.Enumeration)\"\u003e\u003ccode\u003eMutableAttributeSet.removeAttributes(java.util.Enumeration\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#removeAttributes(javax.swing.text.AttributeSet,java.util.Enumeration)\"\u003eremoveAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eold\u003c/code\u003e - the old attribute set",
          "\u003ccode\u003enames\u003c/code\u003e - the attribute names"
        ],
        "return": [
          "the updated attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "old"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAttributes",
      "comment": "Removes a set of attributes for the element. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html#removeAttributes(java.util.Enumeration)\"\u003e\u003ccode\u003eMutableAttributeSet.removeAttributes(java.util.Enumeration\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#removeAttributes(javax.swing.text.AttributeSet,javax.swing.text.AttributeSet)\"\u003eremoveAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eold\u003c/code\u003e - the old attribute set",
          "\u003ccode\u003eattrs\u003c/code\u003e - the attributes"
        ],
        "return": [
          "the updated attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEmptySet",
      "comment": "Fetches an empty AttributeSet.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#getEmptySet()\"\u003egetEmptySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reclaim",
      "comment": "Returns a set no longer needed by the MutableAttributeSet implementation. This is useful for operation under 1.1 where there are no weak references. This would typically be called by the finalize method of the MutableAttributeSet implementation. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html#reclaim(javax.swing.text.AttributeSet)\"\u003ereclaim\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.AttributeContext.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.AttributeContext\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the set to reclaim"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getCompressionThreshold",
      "comment": "Returns the maximum number of key/value pairs to try and compress into unique/immutable sets. Any sets above this limit will use hashtables and be a MutableAttributeSet.",
      "tagMap": {
        "return": [
          "the threshold"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.StyleContext$SmallAttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createSmallAttributeSet",
      "comment": "Create a compact set of attributes that might be shared. This is a hook for subclasses that want to alter the behavior of SmallAttributeSet. This can be reimplemented to return an AttributeSet that provides some sort of attribute conversion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - The set of attributes to be represented in the the compact form."
        ],
        "return": [
          "a compact set of attributes that might be shared"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.MutableAttributeSet",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLargeAttributeSet",
      "comment": "Create a large set of attributes that should trade off space for time. This set will not be shared. This is a hook for subclasses that want to alter the behavior of the larger attribute storage format (which is SimpleAttributeSet by default). This can be reimplemented to return a MutableAttributeSet that provides some sort of attribute conversion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - The set of attributes to be represented in the the larger form."
        ],
        "return": [
          "a large set of attributes that should trade off space for time"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Converts a StyleContext to a String.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectOutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeAttributes",
      "comment": "Context-specific handling of writing out attributes",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the output stream",
          "\u003ccode\u003ea\u003c/code\u003e - the attribute set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectInputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.MutableAttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readAttributes",
      "comment": "Context-specific handling of reading in attributes",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the object stream to read the attribute data from.",
          "\u003ccode\u003ea\u003c/code\u003e - the attribute set to place the attribute definitions in."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - passed upward if encountered when reading the object stream.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - passed upward if encountered when reading the object stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectOutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "writeAttributeSet",
      "comment": "Writes a set of attributes to the given object stream for the purpose of serialization. This will take special care to deal with static attribute keys that have been registered wit the registerStaticAttributeKey method. Any attribute key not registered as a static key will be serialized directly. All values are expected to be serializable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the output stream",
          "\u003ccode\u003ea\u003c/code\u003e - the attribute set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectInputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.MutableAttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readAttributeSet",
      "comment": "Reads a set of attributes from the given object input stream that have been previously written out with writeAttributeSet. This will try to restore keys that were static objects to the static objects in the current virtual machine considering only those keys that have been registered with the registerStaticAttributeKey method. The attributes retrieved from the stream will be placed into the given mutable set.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the object stream to read the attribute data from.",
          "\u003ccode\u003ea\u003c/code\u003e - the attribute set to place the attribute definitions in."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - passed upward if encountered when reading the object stream.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - passed upward if encountered when reading the object stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "registerStaticAttributeKey",
      "comment": "Registers an object as a static object that is being used as a key in attribute sets. This allows the key to be treated specially for serialization. For operation under a 1.1 virtual machine, this uses the value returned by toString concatenated to the classname. The value returned by toString should not have the class reference in it (ie it should be reimplemented from the definition in Object) in order to be the same when recomputed later.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the non-null object key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStaticAttribute",
      "comment": "Returns the object previously registered with registerStaticAttributeKey.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the object key"
        ],
        "return": [
          "Returns the object previously registered with \n\u003ccode\u003eregisterStaticAttributeKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStaticAttributeKey",
      "comment": "Returns the String that key will be registered with.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyleContext.html#getStaticAttribute(java.lang.Object)\"\u003e\u003ccode\u003egetStaticAttribute(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyleContext.html#registerStaticAttributeKey(java.lang.Object)\"\u003e\u003ccode\u003eregisterStaticAttributeKey(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the object key"
        ],
        "return": [
          "the String that \n\u003ccode\u003ekey\u003c/code\u003e will be registered with"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new StyleContext object.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.text.StyleContext$NamedStyle",
    "javax.swing.text.StyleContext$SmallAttributeSet"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.StyleContext",
  "comment": "A pool of styles and their associated resources. This class determines the lifetime of a group of resources by being a container that holds caches for various resources such as font and color that get reused by the various style definitions. This can be shared by multiple documents if desired to maximize the sharing of related resources. \n\u003cp\u003e This class also provides efficient support for small sets of attributes and compresses them by sharing across uses and taking advantage of their immutable nature. Since many styles are replicated, the potential for sharing is significant, and copies can be extremely cheap. Larger sets reduce the possibility of sharing, and therefore revert automatically to a less space-efficient implementation. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}