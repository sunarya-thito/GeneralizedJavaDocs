{
  "packageName": "javax.swing.text",
  "simpleName": "AttributeSet",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "NameAttribute",
      "comment": "Attribute name used to name the collection of attributes.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ResolveAttribute",
      "comment": "Attribute name used to identify the resolving parent set of attributes, if one is defined.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeCount",
      "comment": "Returns the number of attributes that are defined locally in this set. Attributes that are defined in the parent set are not included.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of attributes \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDefined",
      "comment": "Checks whether the named attribute has a value specified in the set without resolving through another attribute set.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattrName\u003c/code\u003e - the attribute name"
        ],
        "return": [
          "true if the attribute has a value specified"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEqual",
      "comment": "Determines if the two attribute sets are equivalent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - an attribute set"
        ],
        "return": [
          "true if the sets are equivalent"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "copyAttributes",
      "comment": "Returns an attribute set that is guaranteed not to change over time.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a copy of the attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttribute",
      "comment": "Fetches the value of the given attribute. If the value is not found locally, the search is continued upward through the resolving parent (if one exists) until the value is either found or there are no more parents. If the value is not found, null is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the non-null key of the attribute binding"
        ],
        "return": [
          "the value of the attribute, or \n\u003ccode\u003enull\u003c/code\u003e if not found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeNames",
      "comment": "Returns an enumeration over the names of the attributes that are defined locally in the set. Names of attributes defined in the resolving parent, if any, are not included. The values of the Enumeration may be anything and are not constrained to a particular Object type. This method never returns null. For a set with no attributes, it returns an empty Enumeration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the names"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "containsAttribute",
      "comment": "Returns true if this set defines an attribute with the same name and an equal value. If such an attribute is not found locally, it is searched through in the resolving parent hierarchy.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the non-null attribute name",
          "\u003ccode\u003evalue\u003c/code\u003e - the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003ename\u003c/code\u003e or \n\u003ccode\u003evalue\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the set defines the attribute with an equal value, either locally or through its resolving parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "containsAttributes",
      "comment": "Returns true if this set defines all the attributes from the given set with equal values. If an attribute is not found locally, it is searched through in the resolving parent hierarchy.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - the set of attributes to check against"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattributes\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this set defines all the attributes with equal values, either locally or through its resolving parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResolveParent",
      "comment": "Gets the resolving parent.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the parent"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.text.AttributeSet$ColorAttribute",
    "javax.swing.text.AttributeSet$FontAttribute",
    "javax.swing.text.AttributeSet$CharacterAttribute",
    "javax.swing.text.AttributeSet$ParagraphAttribute"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.text.AttributeSet",
  "comment": "A collection of unique attributes. This is a read-only, immutable interface. An attribute is basically a key and a value assigned to the key. The collection may represent something like a style run, a logical style, etc. These are generally used to describe features that will contribute to some graphical representation such as a font. The set of possible keys is unbounded and can be anything. Typically View implementations will respond to attribute definitions and render something to represent the attributes. \n\u003cp\u003e Attributes can potentially resolve in a hierarchy. If a key doesn\u0027t resolve locally, and a resolving parent exists, the key will be resolved through the parent.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MutableAttributeSet.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eMutableAttributeSet\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}