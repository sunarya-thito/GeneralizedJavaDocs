{
  "packageName": "javax.swing.text",
  "simpleName": "Utilities",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "drawTabbedText",
      "comment": "Draws the given text, expanding any tabs that are contained using the given tab expansion technique. This particular implementation renders in a 1.1 style coordinate system where ints are used and 72dpi is assumed.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003ex\u003c/code\u003e - the X origin \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y origin \u0026gt;\u003d 0",
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \u0026gt;\u003d 0"
        ],
        "return": [
          "the X location at the end of the rendered text"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Graphics2D",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "drawTabbedText",
      "comment": "Draws the given text, expanding any tabs that are contained using the given tab expansion technique.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003ex\u003c/code\u003e - the X origin \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003ey\u003c/code\u003e - the Y origin \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e"
        ],
        "return": [
          "the X location at the end of the rendered text"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTabbedTextWidth",
      "comment": "Determines the width of the given segment of text taking tabs into consideration. This is implemented in a 1.1 style coordinate system where ints are used and 72dpi is assumed.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex\u003c/code\u003e - the X origin \u0026gt;\u003d 0",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \u0026gt;\u003d 0"
        ],
        "return": [
          "the width of the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTabbedTextWidth",
      "comment": "Determines the width of the given segment of text taking tabs into consideration.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex\u003c/code\u003e - the X origin \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e"
        ],
        "return": [
          "the width of the text"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTabbedTextOffset",
      "comment": "Determines the relative offset into the given text that best represents the given span in the view coordinate system. This is implemented in a 1.1 style coordinate system where ints are used and 72dpi is assumed.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex0\u003c/code\u003e - the starting view location representing the start of the given text \u0026gt;\u003d 0.",
          "\u003ccode\u003ex\u003c/code\u003e - the target view location to translate to an offset into the text \u0026gt;\u003d 0.",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \u0026gt;\u003d 0"
        ],
        "return": [
          "the offset into the text \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "round"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTabbedTextOffset",
      "comment": "Determines the relative offset into the given text that best represents the given span in the view coordinate system.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex0\u003c/code\u003e - the starting view location representing the start of the given text \u0026gt;\u003d 0.",
          "\u003ccode\u003ex\u003c/code\u003e - the target view location to translate to an offset into the text \u0026gt;\u003d 0.",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \u0026gt;\u003d 0",
          "\u003ccode\u003eround\u003c/code\u003e - whether or not to round"
        ],
        "return": [
          "the offset into the text \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x0"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "round"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getTabbedTextOffset",
      "comment": "Determines the relative offset into the given text that best represents the given span in the view coordinate system.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex0\u003c/code\u003e - the starting view location representing the start of the given text \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e.",
          "\u003ccode\u003ex\u003c/code\u003e - the target view location to translate to an offset into the text \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e.",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset of the text in the document \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003eround\u003c/code\u003e - whether or not to round"
        ],
        "return": [
          "the offset into the text \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getBreakLocation",
      "comment": "Determine where to break the given text to fit within the given span. This tries to find a word boundary.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex0\u003c/code\u003e - the starting view location representing the start of the given text.",
          "\u003ccode\u003ex\u003c/code\u003e - the target view location to translate to an offset into the text.",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset in the document of the text"
        ],
        "return": [
          "the offset into the given text"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.FontMetrics",
            "type": "Class"
          },
          "field": {
            "name": "metrics"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x0"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.TabExpander",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getBreakLocation",
      "comment": "Determine where to break the given text to fit within the given span. This tries to find a word boundary.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the source of the text",
          "\u003ccode\u003emetrics\u003c/code\u003e - the font metrics to use for the calculation",
          "\u003ccode\u003ex0\u003c/code\u003e - the starting view location representing the start of the given text.",
          "\u003ccode\u003ex\u003c/code\u003e - the target view location to translate to an offset into the text.",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs. If this value is null, tabs will be expanded as a space character.",
          "\u003ccode\u003estartOffset\u003c/code\u003e - starting offset in the document of the text"
        ],
        "return": [
          "the offset into the given text"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getRowStart",
      "comment": "Determines the starting row model position of the row that contains the specified model position. The component given must have a size to compute the result. If the component doesn\u0027t have a size a value of -1 will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the position \u0026gt;\u003d 0 if the request can be computed, otherwise a value of -1 will be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getRowEnd",
      "comment": "Determines the ending row model position of the row that contains the specified model position. The component given must have a size to compute the result. If the component doesn\u0027t have a size a value of -1 will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the position \u0026gt;\u003d 0 if the request can be computed, otherwise a value of -1 will be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getPositionAbove",
      "comment": "Determines the position in the model that is closest to the given view location in the row above. The component given must have a size to compute the result. If the component doesn\u0027t have a size a value of -1 will be returned.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the position \u0026gt;\u003d 0 if the request can be computed, otherwise a value of -1 will be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getPositionAbove",
      "comment": "Determines the position in the model that is closest to the given view location in the row above. The component given must have a size to compute the result. If the component doesn\u0027t have a size a value of -1 will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the position \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e if the request can be computed, otherwise a value of -1 will be returned."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getPositionBelow",
      "comment": "Determines the position in the model that is closest to the given view location in the row below. The component given must have a size to compute the result. If the component doesn\u0027t have a size a value of -1 will be returned.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the position \u0026gt;\u003d 0 if the request can be computed, otherwise a value of -1 will be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getPositionBelow",
      "comment": "Determines the position in the model that is closest to the given view location in the row below. The component given must have a size to compute the result. If the component doesn\u0027t have a size a value of -1 will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the position \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e if the request can be computed, otherwise a value of -1 will be returned."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getWordStart",
      "comment": "Determines the start of a word for the given model location. Uses BreakIterator.getWordInstance() to actually get the words.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the location in the model of the word start \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getWordEnd",
      "comment": "Determines the end of a word for the given location. Uses BreakIterator.getWordInstance() to actually get the words.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the location in the model of the word end \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getNextWord",
      "comment": "Determines the start of the next word for the given location. Uses BreakIterator.getWordInstance() to actually get the words.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the location in the model of the word start \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getPreviousWord",
      "comment": "Determine the start of the prev word for the given location. Uses BreakIterator.getWordInstance() to actually get the words.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset in the document \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset is out of range"
        ],
        "return": [
          "the location in the model of the word start \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getParagraphElement",
      "comment": "Determines the element to use for a paragraph/line.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the editor",
          "\u003ccode\u003eoffs\u003c/code\u003e - the starting offset in the document \u0026gt;\u003d 0"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a Utilities.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.Utilities",
  "comment": "A collection of methods to deal with various text related activities.",
  "tagMap": {}
}