{
  "packageName": "javax.swing.text",
  "simpleName": "ParagraphView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.FlowView",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "firstLineIndent",
      "comment": "Indentation for the first line, from the left inset.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "j"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setJustification",
      "comment": "Sets the type of justification.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ej\u003c/code\u003e - one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eStyleConstants.ALIGN_LEFT\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eStyleConstants.ALIGN_CENTER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eStyleConstants.ALIGN_RIGHT\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "ls"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setLineSpacing",
      "comment": "Sets the line spacing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003els\u003c/code\u003e - the value is a factor of the line hight"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "fi"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setFirstLineIndent",
      "comment": "Sets the indent on the first line.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efi\u003c/code\u003e - the value in points"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setPropertiesFromAttributes",
      "comment": "Set the cached properties from the attributes.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLayoutViewCount",
      "comment": "Returns the number of views that this view is responsible for. The child views of the paragraph are rows which have been used to arrange pieces of the Views that represent the child elements. This is the number of views that have been tiled in two dimensions, and should be equivalent to the number of child elements to the element this view is responsible for.",
      "tagMap": {
        "return": [
          "the number of views that this \n\u003ccode\u003eParagraphView\u003c/code\u003e is responsible for"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLayoutView",
      "comment": "Returns the view at a given index. The child views of the paragraph are rows which have been used to arrange pieces of the Views that represent the child elements. This methods returns the view responsible for the child element index (prior to breaking). These are the Views that were produced from a factory (to represent the child elements) and used for layout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the \n\u003ccode\u003eindex\u003c/code\u003e of the desired view"
        ],
        "return": [
          "the view at \n\u003ccode\u003eindex\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasRet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getNextNorthSouthVisualPositionFrom",
      "comment": "Returns the next visual position for the cursor, in either the east or west direction. Overridden from CompositeView.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eCompositeView.getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#getNextNorthSouthVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias%5B%5D)\"\u003egetNextNorthSouthVisualPositionFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - position into the model",
          "\u003ccode\u003eb\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003edirection\u003c/code\u003e - either \n\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - an array containing the bias that were checked in this method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - for a bad location within a document model"
        ],
        "return": [
          "the location in the model that represents the next location visual position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasRet"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getClosestPositionTo",
      "comment": "Returns the closest model position to x. rowIndex gives the index of the view that corresponds that should be looked in.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - position into the model",
          "\u003ccode\u003eb\u003c/code\u003e - the bias",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003edirection\u003c/code\u003e - one of the following values: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - an array containing the bias that were checked in this method",
          "\u003ccode\u003erowIndex\u003c/code\u003e - the index of the view",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of interest"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if a bad location is encountered"
        ],
        "return": [
          "the closest model position to \n\u003ccode\u003ex\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "bias"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "flipEastAndWestAtEnds",
      "comment": "Determines in which direction the next view lays. Consider the View at index n. Typically the Views are layed out from left to right, so that the View to the EAST will be at index n + 1, and the View to the WEST will be at index n - 1. In certain situations, such as with bidirectional text, it is possible that the View to EAST is not at index n + 1, but rather at index n - 1, or that the View to the WEST is not at index n - 1, but index n + 1. In this case this method would return true, indicating the Views are layed out in descending order. This will return true if the text is layed out right to left at position, otherwise false.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html#flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)\"\u003eflipEastAndWestAtEnds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html\" title\u003d\"class in javax.swing.text\"\u003eBoxView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - position into the model",
          "\u003ccode\u003ebias\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e"
        ],
        "return": [
          "true if the text is layed out right to left at position, otherwise false."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlowSpan",
      "comment": "Fetches the constraining span to flow against for the given child index.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#getFlowStart(int)\"\u003e\u003ccode\u003eFlowView.getFlowStart(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#getFlowSpan(int)\"\u003egetFlowSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html\" title\u003d\"class in javax.swing.text\"\u003eFlowView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the view being queried"
        ],
        "return": [
          "the constraining span for the given view at \n\u003ccode\u003eindex\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlowStart",
      "comment": "Fetches the location along the flow axis that the flow span will start at.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#getFlowSpan(int)\"\u003e\u003ccode\u003eFlowView.getFlowSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#getFlowStart(int)\"\u003egetFlowStart\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html\" title\u003d\"class in javax.swing.text\"\u003eFlowView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the view being queried"
        ],
        "return": [
          "the location for the given view at \n\u003ccode\u003eindex\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createRow",
      "comment": "Create a View that should be used to hold a a row\u0027s worth of children in a flow.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#createRow()\"\u003ecreateRow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html\" title\u003d\"class in javax.swing.text\"\u003eFlowView\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eView\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "tabOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextTabStop",
      "comment": "Returns the next tab stop position given a reference position. This view implements the tab coordinate system, and calls getTabbedSpan on the logical children in the process of layout to determine the desired span of the children. The logical children can delegate their tab expansion upward to the paragraph which knows how to expand tabs. LabelView is an example of a view that delegates its tab expansion needs upward to the paragraph. This is implemented to try and locate a TabSet in the paragraph element\u0027s attribute set. If one can be found, its settings will be used, otherwise a default expansion will be provided. The base location for tab expansion is the left inset from the paragraphs most recent allocation (which is what the layout of the children is based upon).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/TabSet.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eTabSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/TabStop.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eTabStop\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/LabelView.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eLabelView\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/TabExpander.html#nextTabStop(float,int)\"\u003enextTabStop\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/TabExpander.html\" title\u003d\"interface in javax.swing.text\"\u003eTabExpander\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X reference position",
          "\u003ccode\u003etabOffset\u003c/code\u003e - the position within the text stream that the tab occurred at \u0026gt;\u003d 0"
        ],
        "return": [
          "the trailing end of the tab expansion \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.TabSet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getTabSet",
      "comment": "Gets the Tabset to be used in calculating tabs.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eTabSet\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getPartialSize",
      "comment": "Returns the size used by the views between startOffset and endOffset. This uses getPartialView to calculate the size if the child view implements the TabableView interface. If a size is needed and a View does not implement the TabableView interface, the preferredSpan will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estartOffset\u003c/code\u003e - the starting document offset \u0026gt;\u003d 0",
          "\u003ccode\u003eendOffset\u003c/code\u003e - the ending document offset \u0026gt;\u003d startOffset"
        ],
        "return": [
          "the size \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "string"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "findOffsetToCharactersInString",
      "comment": "Finds the next character in the document with a character in string, starting at offset start. If there are no characters found, -1 will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estring\u003c/code\u003e - the string of characters",
          "\u003ccode\u003estart\u003c/code\u003e - where to start in the model \u0026gt;\u003d 0"
        ],
        "return": [
          "the document offset, or -1 if no characters found"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getTabBase",
      "comment": "Returns where the tabs are calculated from.",
      "tagMap": {
        "return": [
          "where tabs are calculated from"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Renders using the given rendering surface and area on that surface. This is implemented to delegate to the superclass after stashing the base coordinate for tab calculations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003e\u003ccode\u003eView.paint(java.awt.Graphics, java.awt.Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html\" title\u003d\"class in javax.swing.text\"\u003eBoxView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the rendering surface to use",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlignment",
      "comment": "Determines the desired alignment for this view along an axis. This is implemented to give the alignment to the center of the first row along the y axis, and the default along the x axis.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html#getAlignment(int)\"\u003egetAlignment\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html\" title\u003d\"class in javax.swing.text\"\u003eBoxView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "the desired alignment. This should be a value between 0.0 and 1.0 inclusive, where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin. An alignment of 0.5 would be the center of the view."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "breakView",
      "comment": "Breaks this view on the given axis at the given length. ParagraphView instances are breakable along the Y_AXIS only, and only if len is after the first line.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#breakView(int,int,float,float)\"\u003e\u003ccode\u003eView.breakView(int, int, float, float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e",
          "\u003ccode\u003elen\u003c/code\u003e - specifies where a potential break is desired along the given axis \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view"
        ],
        "return": [
          "the fragment of the view that represents the given span, if the view can be broken; if the view doesn\u0027t support breaking behavior, the view itself is returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBreakWeight",
      "comment": "Gets the break weight for a given location. ParagraphView instances are breakable along the Y_AXIS only, and only if len is after the first row. If the length is less than one row, a value of BadBreakWeight is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getBreakWeight(int,float,float)\"\u003e\u003ccode\u003eView.getBreakWeight(int, float, float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e",
          "\u003ccode\u003elen\u003c/code\u003e - specifies where a potential break is desired \u0026gt;\u003d 0"
        ],
        "return": [
          "a value indicating the attractiveness of breaking here; either \n\u003ccode\u003eGoodBreakWeight\u003c/code\u003e or \n\u003ccode\u003eBadBreakWeight\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.SizeRequirements",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "javax.swing.SizeRequirements",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "calculateMinorAxisRequirements",
      "comment": "Calculate the needs for the paragraph along the minor axis. This uses size requirements of the superclass, modified to take into account the non-breakable areas at the adjacent views edges. The minimal size requirements for such views should be no less than the sum of all adjacent fragments. If the axis parameter is neither View.X_AXIS nor View.Y_AXIS, IllegalArgumentException is thrown. If the r parameter is null, a new SizeRequirements object is created, otherwise the supplied SizeRequirements object is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SizeRequirements.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSizeRequirements\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)\"\u003ecalculateMinorAxisRequirements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html\" title\u003d\"class in javax.swing.text\"\u003eFlowView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the minor axis",
          "\u003ccode\u003er\u003c/code\u003e - the input \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eaxis\u003c/code\u003e parameter is invalid"
        ],
        "return": [
          "the new or adjusted \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "changes"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "changedUpdate",
      "comment": "Gives notification from the document that attributes were changed in a location that this view is responsible for.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003echangedUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/FlowView.html\" title\u003d\"class in javax.swing.text\"\u003eFlowView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echanges\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a ParagraphView for the given element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element that this view is responsible for"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.ParagraphView",
  "comment": "View of a simple line-wrapping paragraph that supports multiple fonts, colors, components, icons, etc. It is basically a vertical box with a margin around it. The contents of the box are a bunch of rows which are special horizontal boxes. This view creates a collection of views that represent the child elements of the paragraph element. Each of these views are placed into a row directly if they will fit, otherwise the \n\u003ccode\u003ebreakView\u003c/code\u003e method is called to try and carve the view into pieces that fit.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eView\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}