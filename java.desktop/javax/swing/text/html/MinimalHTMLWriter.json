{
  "packageName": "javax.swing.text.html",
  "simpleName": "MinimalHTMLWriter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.AbstractWriter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Generates HTML output from a StyledDocument.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractWriter.html#write()\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractWriter.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeAttributes",
      "comment": "Writes out all the attributes for the following types: StyleConstants.ParagraphConstants, StyleConstants.CharacterConstants, StyleConstants.FontConstants, StyleConstants.ColorConstants. The attribute name and value are separated by a colon. Each pair is separated by a semicolon.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractWriter.html#writeAttributes(javax.swing.text.AttributeSet)\"\u003ewriteAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractWriter.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - an AttributeSet."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "text",
      "comment": "Writes out text.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractWriter.html#text(javax.swing.text.Element)\"\u003etext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractWriter.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an Element."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeStartTag",
      "comment": "Writes out a start tag appropriately indented. Also increments the indent level.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - a start tag"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "endTag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeEndTag",
      "comment": "Writes out an end tag appropriately indented. Also decrements the indent level.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eendTag\u003c/code\u003e - an end tag"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeHeader",
      "comment": "Writes out the \u003chead\u003e and \u003cstyle\u003e tags, and then invokes writeStyles() to write out all the named styles as the content of the \u003cstyle\u003e tag. The content is surrounded by valid HTML comment markers to ensure that the document is viewable in applications/browsers that do not support the tag.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeStyles",
      "comment": "Writes out all the named styles as the content of the \u003cstyle\u003e tag.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeBody",
      "comment": "Iterates over the elements in the document and processes elements based on whether they are branch elements or leaf elements. This method specially handles leaf elements that are text.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if we are in an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeEndParagraph",
      "comment": "Emits an end tag for a \u003cp\u003e tag. Before writing out the tag, this method ensures that all other tags that have been opened are appropriately closed off.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeStartParagraph",
      "comment": "Emits the start tag for a paragraph. If the paragraph has a named style associated with it, then this method also generates a class attribute for the \u003cp\u003e tag and sets its value to be the name of the style.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeLeaf",
      "comment": "Responsible for writing out other non-text leaf elements.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeImage",
      "comment": "Responsible for handling Icon Elements; deliberately unimplemented. How to implement this method is an issue of policy. For example, if you\u0027re generating an \u003cimg\u003e tag, how should you represent the src attribute (the location of the image)? In certain cases it could be a URL, in others it could be read from a stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element of type StyleConstants.IconElementName"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if I/O error occured."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeComponent",
      "comment": "Responsible for handling Component Elements; deliberately unimplemented. How this method is implemented is a matter of policy.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element of type StyleConstants.ComponentElementName"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if I/O error occured."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isText",
      "comment": "Returns true if the element is a text element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the element is a text element."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "needsIndenting"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeContent",
      "comment": "Writes out the attribute set in an HTML-compliant manner.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element",
          "\u003ccode\u003eneedsIndenting\u003c/code\u003e - indention will be added if \n\u003ccode\u003eneedsIndenting\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeHTMLTags",
      "comment": "Generates bold \u003cb\u003e, italic \u003ci\u003e, and \u003cu\u003e tags for the text based on its attribute settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - a set of attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "writeNonHTMLAttributes",
      "comment": "Writes out the remaining character-level attributes (attributes other than bold, italic, and underline) in an HTML-compliant way. Given that attributes such as font family and font size have no direct mapping to HTML tags, a \u003cspan\u003e tag is generated and its style attribute is set to contain the list of remaining attributes just like inline styles.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - a set of attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "inFontTag",
      "comment": "Returns true if we are currently in a \u003cfont\u003e tag.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if we are currently in a \u0026lt;font\u0026gt; tag."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "endFontTag",
      "comment": "This is no longer used, instead \u003cspan\u003e will be written out. Writes out an end tag for the \u003cfont\u003e tag.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "startFontTag",
      "comment": "This is no longer used, instead \u003cspan\u003e will be written out. Writes out a start tag for the \u003cfont\u003e tag. Because font tags cannot be nested, this method closes out any enclosing font tag before writing out a new start tag.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - a font style"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.StyledDocument",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new MinimalHTMLWriter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - Writer",
          "\u003ccode\u003edoc\u003c/code\u003e - StyledDocument"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.StyledDocument",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new MinimalHTMLWriter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - Writer",
          "\u003ccode\u003edoc\u003c/code\u003e - StyledDocument",
          "\u003ccode\u003epos\u003c/code\u003e - The location in the document to fetch the content.",
          "\u003ccode\u003elen\u003c/code\u003e - The amount to write out."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.MinimalHTMLWriter",
  "comment": "MinimalHTMLWriter is a fallback writer used by the HTMLEditorKit to write out HTML for a document that is a not produced by the EditorKit. The format for the document is: \n\u003cpre\u003e \u0026lt;html\u0026gt;\n   \u0026lt;head\u0026gt;\n     \u0026lt;style\u0026gt;\n        \u0026lt;!-- list of named styles\n         p.normal {\n            font-family: SansSerif;\n            margin-height: 0;\n            font-size: 14\n         }\n        --\u0026gt;\n      \u0026lt;/style\u0026gt;\n   \u0026lt;/head\u0026gt;\n   \u0026lt;body\u0026gt;\n    \u0026lt;p style\u003dnormal\u0026gt;\n        \u003cb\u003eBold, italic, and underline attributes\n        of the run are emitted as HTML tags.\n        The remaining attributes are emitted as\n        part of the style attribute of a \u0026lt;span\u0026gt; tag.\n        The syntax is similar to inline styles.\u003c/b\u003e\n    \u0026lt;/p\u0026gt;\n   \u0026lt;/body\u0026gt;\n \u0026lt;/html\u0026gt;\n \u003c/pre\u003e",
  "tagMap": {}
}