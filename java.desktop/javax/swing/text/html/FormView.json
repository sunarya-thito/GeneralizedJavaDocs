{
  "packageName": "javax.swing.text.html",
  "simpleName": "FormView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.ComponentView",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SUBMIT",
      "comment": "If a value attribute is not specified for a FORM input element of type \"submit\", then this default string is used.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "RESET",
      "comment": "If a value attribute is not specified for a FORM input element of type \"reset\", then this default string is used.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createComponent",
      "comment": "Create the component. This is basically a big switch statement based upon the tag type and html attributes of the associated element.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ComponentView.html#createComponent()\"\u003ecreateComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ComponentView.html\" title\u003d\"class in javax.swing.text\"\u003eComponentView\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the component that is associated with this view"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSpan",
      "comment": "Determines the maximum span for this view along an axis. For certain components, the maximum and preferred span are the same. For others this will return the value returned by Component.getMaximumSize along the axis of interest.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003eView.getPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ComponentView.html#getMaximumSpan(int)\"\u003egetMaximumSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ComponentView.html\" title\u003d\"class in javax.swing.text\"\u003eComponentView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either View.X_AXIS or View.Y_AXIS"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "name": "evt",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "actionPerformed",
      "comment": "Responsible for processing the ActionEvent. If the element associated with the FormView, has a type of \"submit\", \"reset\", \"text\" or \"password\" then the action is processed. In the case of a \"submit\" the form is submitted. In the case of a \"reset\" the form is reset to its original state. In the case of \"text\" or \"password\", if the element is the last one of type \"text\" or \"password\", the form is submitted. Otherwise, focus is transferred to the next component in the form.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ActionListener.html#actionPerformed(java.awt.event.ActionEvent)\"\u003eactionPerformed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ActionListener.html\" title\u003d\"interface in java.awt.event\"\u003eActionListener\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eevt\u003c/code\u003e - the ActionEvent."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "submitData",
      "comment": "This method is responsible for submitting the form data. A thread is forked to undertake the submission.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - data to submit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "imageData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "imageSubmit",
      "comment": "This method is called to submit a form in response to a click on an image -- an \u003cINPUT\u003e form element of type \"image\".",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimageData\u003c/code\u003e - the mouse click coordinates."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "elem",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new FormView object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element to decorate"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.text.html.FormView$MouseEventListener"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.FormView",
  "comment": "Component decorator that implements the view interface for form elements, \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, and \u0026lt;select\u0026gt;. The model for the component is stored as an attribute of the element (using StyleConstants.ModelAttribute), and is used to build the component of the view. The type of the model is assumed to of the type that would be set by \n\u003ccode\u003eHTMLDocument.HTMLReader.FormAction\u003c/code\u003e. If there are multiple views mapped over the document, they will share the embedded component models. \n\u003cp\u003e The following table shows what components get built by this view. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Shows what components get built by this view\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eElement Type \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eComponent built \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type button \u003c/th\u003e\n   \u003ctd\u003eJButton \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type checkbox \u003c/th\u003e\n   \u003ctd\u003eJCheckBox \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type image \u003c/th\u003e\n   \u003ctd\u003eJButton \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type password \u003c/th\u003e\n   \u003ctd\u003eJPasswordField \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type radio \u003c/th\u003e\n   \u003ctd\u003eJRadioButton \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type reset \u003c/th\u003e\n   \u003ctd\u003eJButton \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type submit \u003c/th\u003e\n   \u003ctd\u003eJButton \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type text \u003c/th\u003e\n   \u003ctd\u003eJTextField \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eselect, size \u0026gt; 1 or multiple attribute defined \u003c/th\u003e\n   \u003ctd\u003eJList in a JScrollPane \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eselect, size unspecified or 1 \u003c/th\u003e\n   \u003ctd\u003eJComboBox \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003etextarea \u003c/th\u003e\n   \u003ctd\u003eJTextArea in a JScrollPane \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einput, type file \u003c/th\u003e\n   \u003ctd\u003eJTextField \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}