{
  "packageName": "javax.swing.text.html",
  "simpleName": "HTMLEditorKit",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.StyledEditorKit",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_CSS",
      "comment": "Default Cascading Style Sheet file that sets up the tag views.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.DEFAULT_CSS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BOLD_ACTION",
      "comment": "The bold action identifier",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.BOLD_ACTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ITALIC_ACTION",
      "comment": "The italic action identifier",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.ITALIC_ACTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PARA_INDENT_LEFT",
      "comment": "The paragraph left indent action identifier",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.PARA_INDENT_LEFT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PARA_INDENT_RIGHT",
      "comment": "The paragraph right indent action identifier",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.PARA_INDENT_RIGHT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FONT_CHANGE_BIGGER",
      "comment": "The font size increase to next value action identifier",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.FONT_CHANGE_BIGGER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FONT_CHANGE_SMALLER",
      "comment": "The font size decrease to next value action identifier",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.FONT_CHANGE_SMALLER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COLOR_ACTION",
      "comment": "The Color choice action identifier The color is passed as an argument",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.COLOR_ACTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LOGICAL_STYLE_ACTION",
      "comment": "The logical style choice action identifier The logical style is passed in as an argument",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.LOGICAL_STYLE_ACTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMG_ALIGN_TOP",
      "comment": "Align images at the top.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_TOP\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMG_ALIGN_MIDDLE",
      "comment": "Align images in the middle.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_MIDDLE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMG_ALIGN_BOTTOM",
      "comment": "Align images at the bottom.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_BOTTOM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMG_BORDER",
      "comment": "Align images at the border.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLEditorKit.IMG_BORDER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContentType",
      "comment": "Get the MIME type of the data that this kit represents support for. This kit supports the type text/html.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html#getContentType()\"\u003egetContentType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.ViewFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewFactory",
      "comment": "Fetch a factory that is suitable for producing views of any models that are produced by this kit.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#getViewFactory()\"\u003egetViewFactory\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createDefaultDocument",
      "comment": "Create an uninitialized text storage model that is appropriate for this type of editor.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#createDefaultDocument()\"\u003ecreateDefaultDocument\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "read",
      "comment": "Inserts content from the given stream. If doc is an instance of HTMLDocument, this will read HTML 3.2 text. Inserting HTML into a non-empty document must be inside the body Element, if you do not insert into the body an exception will be thrown. When inserting into a non-empty document all tags outside of the body (head, title) will be dropped.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html#read(java.io.Reader,javax.swing.text.Document,int)\"\u003eread\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the stream to read from",
          "\u003ccode\u003edoc\u003c/code\u003e - the destination for the insertion",
          "\u003ccode\u003epos\u003c/code\u003e - the location in the document to place the content"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if pos represents an invalid location within the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - (will eventually be a BadLocationException) if pos is invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertHTML",
      "comment": "Inserts HTML into an existing document.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the document to insert into",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to insert HTML at",
          "\u003ccode\u003epopDepth\u003c/code\u003e - the number of ElementSpec.EndTagTypes to generate before inserting",
          "\u003ccode\u003ehtml\u003c/code\u003e - the HTML string",
          "\u003ccode\u003epushDepth\u003c/code\u003e - the number of ElementSpec.StartTagTypes with a direction of ElementSpec.JoinNextDirection that should be generated before inserting, but after the end tags have been generated",
          "\u003ccode\u003einsertTag\u003c/code\u003e - the first tag to start inserting into document"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - (will eventually be a BadLocationException) if pos is invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Write content from a document to the given stream in a format appropriate for this kind of content handler.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html#write(java.io.Writer,javax.swing.text.Document,int,int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the stream to write to",
          "\u003ccode\u003edoc\u003c/code\u003e - the source for the write",
          "\u003ccode\u003epos\u003c/code\u003e - the location in the document to fetch the content",
          "\u003ccode\u003elen\u003c/code\u003e - the amount to write out"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epos\u003c/code\u003e represents an invalid location within the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "install",
      "comment": "Called when the kit is being installed into the a JEditorPane.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#install(javax.swing.JEditorPane)\"\u003einstall\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JEditorPane"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deinstall",
      "comment": "Called when the kit is being removed from the JEditorPane. This is used to unregister any listeners that were attached.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#deinstall(javax.swing.JEditorPane)\"\u003edeinstall\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JEditorPane"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStyleSheet",
      "comment": "Set the set of styles to be used to render the various HTML elements. These styles are specified in terms of CSS specifications. Each document produced by the kit will have a copy of the sheet which it can add the document specific styles to. By default, the StyleSheet specified is shared by all HTMLEditorKit instances. This should be reimplemented to provide a finer granularity if desired.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a StyleSheet"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.StyleSheet",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyleSheet",
      "comment": "Get the set of styles currently being used to render the HTML elements. By default the resource specified by DEFAULT_CSS gets loaded, and is shared by all HTMLEditorKit instances.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the StyleSheet"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActions",
      "comment": "Fetches the command list for the editor. This is the list of commands supported by the superclass augmented by the collection of commands defined locally for style operations.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#getActions()\"\u003egetActions\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the command list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createInputAttributes",
      "comment": "Copies the key/values in elements AttributeSet into set. This does not copy component, icon, or element names attributes. Subclasses may wish to refine what is and what isn\u0027t copied here. But be sure to first remove all the attributes that are in set. This is called anytime the caret moves over a different location.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#createInputAttributes(javax.swing.text.Element,javax.swing.text.MutableAttributeSet)\"\u003ecreateInputAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eelement\u003c/code\u003e - the element",
          "\u003ccode\u003eset\u003c/code\u003e - the attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.MutableAttributeSet",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputAttributes",
      "comment": "Gets the input attributes used for the styled editing actions.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#getInputAttributes()\"\u003egetInputAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the attribute set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultCursor",
      "comment": "Sets the default cursor.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecursor\u003c/code\u003e - a cursor"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Cursor",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultCursor",
      "comment": "Returns the default cursor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the cursor"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLinkCursor",
      "comment": "Sets the cursor to use over links.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecursor\u003c/code\u003e - a cursor"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Cursor",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLinkCursor",
      "comment": "Returns the cursor to use over hyper links.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the cursor"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAutoFormSubmission",
      "comment": "Indicates whether an html form submission is processed automatically or only FormSubmitEvent is fired.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.html#setAutoFormSubmission(boolean)\"\u003e\u003ccode\u003esetAutoFormSubmission(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if html form submission is processed automatically, false otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoFormSubmission",
      "comment": "Specifies if an html form submission is processed automatically or only FormSubmitEvent is fired. By default it is set to true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTMLEditorKit.html#isAutoFormSubmission()\"\u003e\u003ccode\u003eisAutoFormSubmission()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/FormSubmitEvent.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eFormSubmitEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eisAuto\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, html form submission is processed automatically."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of the editor kit.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledEditorKit.html\" title\u003d\"class in javax.swing.text\"\u003eStyledEditorKit\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the copy"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLEditorKit$Parser",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getParser",
      "comment": "Fetch the parser to use for reading HTML streams. This can be reimplemented to provide a different parser. The default implementation is loaded dynamically to avoid the overhead of loading the default parser if it\u0027s not used. The default parser is the HotJava parser using an HTML 3.2 DTD.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the parser"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "returns the AccessibleContext associated with this editor kit",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the AccessibleContext associated with this editor kit"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an HTMLEditorKit, creates a StyleContext, and loads the style sheet.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.text.html.HTMLEditorKit$LinkController",
    "javax.swing.text.html.HTMLEditorKit$InsertHTMLTextAction",
    "javax.swing.text.html.HTMLEditorKit$Parser",
    "javax.swing.text.html.HTMLEditorKit$HTMLTextAction",
    "javax.swing.text.html.HTMLEditorKit$HTMLFactory",
    "javax.swing.text.html.HTMLEditorKit$ParserCallback"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.HTMLEditorKit",
  "comment": "The Swing JEditorPane text component supports different kinds of content via a plug-in mechanism called an EditorKit. Because HTML is a very popular format of content, some support is provided by default. The default support is provided by this class, which supports HTML version 3.2 (with some extensions), and is migrating toward version 4.0. The \u0026lt;applet\u0026gt; tag is not supported, but some support is provided for the \u0026lt;object\u0026gt; tag. \n\u003cp\u003e There are several goals of the HTML EditorKit provided, that have an effect upon the way that HTML is modeled. These have influenced its design in a substantial way. \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n   Support editing \n \u003c/dt\u003e\n \u003cdd\u003e\n   It might seem fairly obvious that a plug-in for JEditorPane should provide editing support, but that fact has several design considerations. There are a substantial number of HTML documents that don\u0027t properly conform to an HTML specification. These must be normalized somewhat into a correct form if one is to edit them. Additionally, users don\u0027t like to be presented with an excessive amount of structure editing, so using traditional text editing gestures is preferred over using the HTML structure exactly as defined in the HTML document. \n  \u003cp\u003e The modeling of HTML is provided by the class \u003ccode\u003eHTMLDocument\u003c/code\u003e. Its documentation describes the details of how the HTML is modeled. The editing support leverages heavily off of the text package. \u003c/p\u003e\n \u003c/dd\u003e\n \u003cdt\u003e\n   Extendable/Scalable \n \u003c/dt\u003e\n \u003cdd\u003e\n   To maximize the usefulness of this kit, a great deal of effort has gone into making it extendable. These are some of the features. \n  \u003col\u003e \n   \u003cli\u003e The parser is replaceable. The default parser is the Hot Java parser which is DTD based. A different DTD can be used, or an entirely different parser can be used. To change the parser, reimplement the getParser method. The default parser is dynamically loaded when first asked for, so the class files will never be loaded if an alternative parser is used. The default parser is in a separate package called parser below this package. \u003c/li\u003e\n   \u003cli\u003e The parser drives the ParserCallback, which is provided by HTMLDocument. To change the callback, subclass HTMLDocument and reimplement the createDefaultDocument method to return document that produces a different reader. The reader controls how the document is structured. Although the Document provides HTML support by default, there is nothing preventing support of non-HTML tags that result in alternative element structures. \u003c/li\u003e\n   \u003cli\u003e The default view of the models are provided as a hierarchy of View implementations, so one can easily customize how a particular element is displayed or add capabilities for new kinds of elements by providing new View implementations. The default set of views are provided by the \u003ccode\u003eHTMLFactory\u003c/code\u003e class. This can be easily changed by subclassing or replacing the HTMLFactory and reimplementing the getViewFactory method to return the alternative factory. \u003c/li\u003e\n   \u003cli\u003e The View implementations work primarily off of CSS attributes, which are kept in the views. This makes it possible to have multiple views mapped over the same model that appear substantially different. This can be especially useful for printing. For most HTML attributes, the HTML attributes are converted to CSS attributes for display. This helps make the View implementations more general purpose \u003c/li\u003e\n  \u003c/ol\u003e \n \u003c/dd\u003e\n \u003cdt\u003e\n   Asynchronous Loading \n \u003c/dt\u003e\n \u003cdd\u003e\n   Larger documents involve a lot of parsing and take some time to load. By default, this kit produces documents that will be loaded asynchronously if loaded using \n  \u003ccode\u003eJEditorPane.setPage\u003c/code\u003e. This is controlled by a property on the document. The method \n  \u003ca href\u003d\"#createDefaultDocument()\"\u003e\u003ccode\u003ecreateDefaultDocument\u003c/code\u003e\u003c/a\u003e can be overriden to change this. The batching of work is done by the \n  \u003ccode\u003eHTMLDocument.HTMLReader\u003c/code\u003e class. The actual work is done by the \n  \u003ccode\u003eDefaultStyledDocument\u003c/code\u003e and \n  \u003ccode\u003eAbstractDocument\u003c/code\u003e classes in the text package. \n \u003c/dd\u003e\n \u003cdt\u003e\n   Customization from current LAF \n \u003c/dt\u003e\n \u003cdd\u003e\n   HTML provides a well known set of features without exactly specifying the display characteristics. Swing has a theme mechanism for its look-and-feel implementations. It is desirable for the look-and-feel to feed display characteristics into the HTML views. An user with poor vision for example would want high contrast and larger than typical fonts. \n  \u003cp\u003e The support for this is provided by the \u003ccode\u003eStyleSheet\u003c/code\u003e class. The presentation of the HTML can be heavily influenced by the setting of the StyleSheet property on the EditorKit. \u003c/p\u003e\n \u003c/dd\u003e\n \u003cdt\u003e\n   Not lossy \n \u003c/dt\u003e\n \u003cdd\u003e\n   An EditorKit has the ability to be read and save documents. It is generally the most pleasing to users if there is no loss of data between the two operation. The policy of the HTMLEditorKit will be to store things not recognized or not necessarily visible so they can be subsequently written out. The model of the HTML document should therefore contain all information discovered while reading the document. This is constrained in some ways by the need to support editing (i.e. incorrect documents sometimes must be normalized). The guiding principle is that information shouldn\u0027t be lost, but some might be synthesized to produce a more correct model or it might be rearranged. \n \u003c/dd\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/dl\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}