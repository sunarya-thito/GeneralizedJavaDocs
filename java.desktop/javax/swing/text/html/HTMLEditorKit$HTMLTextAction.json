{
  "packageName": "javax.swing.text.html",
  "simpleName": "HTMLTextAction",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.StyledEditorKit$StyledTextAction",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLDocument",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JEditorPane",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getHTMLDocument",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the JEditorPane"
        ],
        "return": [
          "HTMLDocument of \n\u003ccode\u003ee\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLEditorKit",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.JEditorPane",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getHTMLEditorKit",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the JEditorPane"
        ],
        "return": [
          "HTMLEditorKit for \n\u003ccode\u003ee\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.HTMLDocument",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getElementsAt",
      "comment": "Returns an array of the Elements that contain offset. The first elements corresponds to the root.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - an instance of HTMLDocument",
          "\u003ccode\u003eoffset\u003c/code\u003e - value of offset"
        ],
        "return": [
          "an array of the Elements that contain \n\u003ccode\u003eoffset\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.HTMLDocument",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "elementCountToTag",
      "comment": "Returns number of elements, starting at the deepest leaf, needed to get to an element representing tag. This will return -1 if no elements is found representing tag, or 0 if the parent of the leaf at offset represents tag.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - an instance of HTMLDocument",
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset to start from",
          "\u003ccode\u003etag\u003c/code\u003e - tag to represent"
        ],
        "return": [
          "number of elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.HTMLDocument",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "findElementMatchingTag",
      "comment": "Returns the deepest element at offset matching tag.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - an instance of HTMLDocument",
          "\u003ccode\u003eoffset\u003c/code\u003e - the specified offset \u0026gt;\u003d 0",
          "\u003ccode\u003etag\u003c/code\u003e - an instance of HTML.Tag"
        ],
        "return": [
          "the deepest element"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new HTMLTextAction from a string action name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the action"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1033,
  "name": "javax.swing.text.html.HTMLEditorKit$HTMLTextAction",
  "comment": "An abstract Action providing some convenience methods that may be useful in inserting HTML into an existing document. \n\u003cp\u003eNOTE: None of the convenience methods obtain a lock on the document. If you have another thread modifying the text these methods may have inconsistent behavior, or return the wrong thing.\u003c/p\u003e",
  "tagMap": {}
}