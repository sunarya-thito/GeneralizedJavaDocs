{
  "packageName": "javax.swing.text.html.parser",
  "simpleName": "Parser",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.text.html.parser.DTD",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dtd",
      "comment": "The dtd.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "strict",
      "comment": "This flag determines whether or not the Parser will be strict in enforcing SGML compatibility. If false, it will be lenient with certain common classes of erroneous HTML constructs. Strict or not, in either case an error will be recorded.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getCurrentLine",
      "tagMap": {
        "return": [
          "the line number of the line currently being parsed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.parser.TagElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fictional"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "makeTag",
      "comment": "Makes a TagElement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element storing the tag definition",
          "\u003ccode\u003efictional\u003c/code\u003e - the value of the flag \"\n\u003ccode\u003efictional\u003c/code\u003e\" to be set for the tag"
        ],
        "return": [
          "the created \n\u003ccode\u003eTagElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.parser.TagElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "makeTag",
      "comment": "Makes a TagElement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element storing the tag definition"
        ],
        "return": [
          "the created \n\u003ccode\u003eTagElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.SimpleAttributeSet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getAttributes",
      "comment": "Returns attributes for the current tag.",
      "tagMap": {
        "return": [
          "\u003ccode\u003eSimpleAttributeSet\u003c/code\u003e containing the attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "flushAttributes",
      "comment": "Removes the current attributes.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleText",
      "comment": "Called when PCDATA is encountered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the section text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleTitle",
      "comment": "Called when an HTML title tag is encountered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the title text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleComment",
      "comment": "Called when an HTML comment is encountered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the comment being handled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleEOFInComment",
      "comment": "Called when the content terminates without closing the HTML comment.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.ChangedCharSetException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.TagElement",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleEmptyTag",
      "comment": "Called when an empty tag is encountered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - the tag being handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ChangedCharSetException.html\" title\u003d\"class in javax.swing.text\"\u003eChangedCharSetException\u003c/a\u003e\u003c/code\u003e - if the document charset was changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.TagElement",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleStartTag",
      "comment": "Called when a start tag is encountered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - the tag being handled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.TagElement",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleEndTag",
      "comment": "Called when an end tag is encountered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - the tag being handled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ln"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "msg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleError",
      "comment": "An error has occurred.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eln\u003c/code\u003e - the number of line containing the error",
          "\u003ccode\u003emsg\u003c/code\u003e - the error message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "err"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "arg1"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "arg2"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "arg3"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "error",
      "comment": "Invokes the error handler.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eerr\u003c/code\u003e - the error type",
          "\u003ccode\u003earg1\u003c/code\u003e - the 1st error message argument",
          "\u003ccode\u003earg2\u003c/code\u003e - the 2nd error message argument",
          "\u003ccode\u003earg3\u003c/code\u003e - the 3rd error message argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "err"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "arg1"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "arg2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "error",
      "comment": "Invokes the error handler with the 3rd error message argument \"?\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003eerr\u003c/code\u003e - the error type",
          "\u003ccode\u003earg1\u003c/code\u003e - the 1st error message argument",
          "\u003ccode\u003earg2\u003c/code\u003e - the 2nd error message argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "err"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "arg1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "error",
      "comment": "Invokes the error handler with the 2nd and 3rd error message argument \"?\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003eerr\u003c/code\u003e - the error type",
          "\u003ccode\u003earg1\u003c/code\u003e - the 1st error message argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "err"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "error",
      "comment": "Invokes the error handler with the 1st, 2nd and 3rd error message argument \"?\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003eerr\u003c/code\u003e - the error type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.ChangedCharSetException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.TagElement",
            "type": "Class"
          },
          "field": {
            "name": "tag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "startTag",
      "comment": "Handle a start tag. The new tag is pushed onto the tag stack. The attribute list is checked for required attributes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etag\u003c/code\u003e - the tag"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ChangedCharSetException.html\" title\u003d\"class in javax.swing.text\"\u003eChangedCharSetException\u003c/a\u003e\u003c/code\u003e - if the document charset was changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "omitted"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "endTag",
      "comment": "Handle an end tag. The end tag is popped from the tag stack.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eomitted\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the tag is no actually present in the document, but is supposed by the parser"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "markFirstTime",
      "comment": "Marks the first time a tag has been seen in a document",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element represented by the tag"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parseDTDMarkup",
      "comment": "Parses the Document Type Declaration markup declaration. Currently ignores it.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the string representation of the markup declaration"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "strBuff"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "parseMarkupDeclarations",
      "comment": "Parse markup declarations. Currently only handles the Document Type Declaration markup. Returns true if it is a markup declaration false otherwise.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estrBuff\u003c/code\u003e - the markup declaration"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a valid markup declaration; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parse an HTML stream, given a DTD.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the reader to read the source from"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getCurrentPos",
      "comment": "Returns the current position.",
      "tagMap": {
        "return": [
          "the current position"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.parser.DTD",
            "type": "Class"
          },
          "field": {
            "name": "dtd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates parser with the specified dtd.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edtd\u003c/code\u003e - the dtd."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.parser.Parser",
  "comment": "A simple DTD-driven HTML parser. The parser reads an HTML file from an InputStream and calls various methods (which should be overridden in a subclass) when tags and data are encountered. \n\u003cp\u003e Unfortunately there are many badly implemented HTML parsers out there, and as a result there are many badly formatted HTML files. This parser attempts to parse most HTML files. This means that the implementation sometimes deviates from the SGML specification in favor of HTML. \u003c/p\u003e\n\u003cp\u003e The parser treats \\r and \\r\\n as \\n. Newlines after starttags and before end tags are ignored just as specified in the SGML/HTML specification. \u003c/p\u003e\n\u003cp\u003e The html spec does not specify how spaces are to be coalesced very well. Specifically, the following scenarios are not discussed (note that a space should be used here, but I am using \u0026amp;nbsp to force the space to be displayed): \u003c/p\u003e\n\u003cp\u003e \u0027\u0026lt;b\u0026gt;blah\u0026nbsp;\u0026lt;i\u0026gt;\u0026nbsp;\u0026lt;strike\u0026gt;\u0026nbsp;foo\u0027 which can be treated as: \u0027\u0026lt;b\u0026gt;blah\u0026nbsp;\u0026lt;i\u0026gt;\u0026lt;strike\u0026gt;foo\u0027 \u003c/p\u003e\n\u003cp\u003eas well as: \u0027\u0026lt;p\u0026gt;\u0026lt;a href\u003d\"xx\"\u0026gt;\u0026nbsp;\u0026lt;em\u0026gt;Using\u0026lt;/em\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0027 which appears to be treated as: \u0027\u0026lt;p\u0026gt;\u0026lt;a href\u003d\"xx\"\u0026gt;\u0026lt;em\u0026gt;Using\u0026lt;/em\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0027 \u003c/p\u003e\n\u003cp\u003e If \u003ccode\u003estrict\u003c/code\u003e is false, when a tag that breaks flow, (\u003ccode\u003eTagElement.breaksFlows\u003c/code\u003e) or trailing whitespace is encountered, all whitespace will be ignored until a non whitespace character is encountered. This appears to give behavior closer to the popular browsers.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/parser/DTD.html\" title\u003d\"class in javax.swing.text.html.parser\"\u003e\u003ccode\u003eDTD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/parser/TagElement.html\" title\u003d\"class in javax.swing.text.html.parser\"\u003e\u003ccode\u003eTagElement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/SimpleAttributeSet.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eSimpleAttributeSet\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}