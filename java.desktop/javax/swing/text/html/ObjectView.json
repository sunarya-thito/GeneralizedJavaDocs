{
  "packageName": "javax.swing.text.html",
  "simpleName": "ObjectView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.ComponentView",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createComponent",
      "comment": "Create the component. The classid is used as a specification of the classname, which we try to load.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ComponentView.html#createComponent()\"\u003ecreateComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ComponentView.html\" title\u003d\"class in javax.swing.text\"\u003eComponentView\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the component that is associated with this view"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ObjectView object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element to decorate"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.ObjectView",
  "comment": "Component decorator that implements the view interface for \u0026lt;object\u0026gt; elements. \n\u003cp\u003e This view will try to load the class specified by the \u003ccode\u003eclassid\u003c/code\u003e attribute. If possible, the Classloader used to load the associated Document is used. This would typically be the same as the ClassLoader used to load the EditorKit. If the document\u0027s ClassLoader is null, \u003ccode\u003eClass.forName\u003c/code\u003e is used. \u003c/p\u003e\n\u003cp\u003e If the class can successfully be loaded, an attempt will be made to create an instance of it by calling \u003ccode\u003eClass.newInstance\u003c/code\u003e. An attempt will be made to narrow the instance to type \u003ccode\u003ejava.awt.Component\u003c/code\u003e to display the object. \u003c/p\u003e\n\u003cp\u003e This view can also manage a set of parameters with limitations. The parameters to the \u0026lt;object\u0026gt; element are expected to be present on the associated elements attribute set as simple strings. Each bean property will be queried as a key on the AttributeSet, with the expectation that a non-null value (of type String) will be present if there was a parameter specification for the property. Reflection is used to set the parameter. Currently, this is limited to a very simple single parameter of type String. \u003c/p\u003e\n\u003cp\u003e A simple example HTML invocation is: \u003c/p\u003e\n\u003cpre\u003e      \u0026lt;object classid\u003d\"javax.swing.JLabel\"\u0026gt;\n      \u0026lt;param name\u003d\"text\" value\u003d\"sample text\"\u0026gt;\n      \u0026lt;/object\u0026gt;\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}