{
  "packageName": "javax.swing.text.html",
  "simpleName": "ParserCallback",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMPLIED",
      "comment": "This is passed as an attribute in the attributeset to indicate the element is implied eg, the string \u0027\u003c\u003efoo\u003c\\t\u003e\u0027 contains an implied html element and an implied body element.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flush",
      "comment": "The last method called on the reader. It allows any pending changes to be flushed into the document. Since this is currently loading synchronously, the entire set of changes are pushed in at this point.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleText",
      "comment": "Called by the parser to indicate a block of text was encountered.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - a data",
          "\u003ccode\u003epos\u003c/code\u003e - a position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleComment",
      "comment": "Called by the parser to indicate a block of comment was encountered.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - a data",
          "\u003ccode\u003epos\u003c/code\u003e - a position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.MutableAttributeSet",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleStartTag",
      "comment": "Callback from the parser. Route to the appropriate handler for the tag.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - an HTML tag",
          "\u003ccode\u003ea\u003c/code\u003e - a set of attributes",
          "\u003ccode\u003epos\u003c/code\u003e - a position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleEndTag",
      "comment": "Callback from the parser. Route to the appropriate handler for the tag.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - an HTML tag",
          "\u003ccode\u003epos\u003c/code\u003e - a position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.MutableAttributeSet",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleSimpleTag",
      "comment": "Callback from the parser. Route to the appropriate handler for the tag.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - an HTML tag",
          "\u003ccode\u003ea\u003c/code\u003e - a set of attributes",
          "\u003ccode\u003epos\u003c/code\u003e - a position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "errorMsg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleError",
      "comment": "Callback from the parser. Route to the appropriate handler for the error.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eerrorMsg\u003c/code\u003e - a error message",
          "\u003ccode\u003epos\u003c/code\u003e - a position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eol",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleEndOfLineString",
      "comment": "This is invoked after the stream has been parsed, but before flush. eol will be one of \\n, \\r or \\r\\n, which ever is encountered the most in parsing the stream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeol\u003c/code\u003e - value of eol"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a ParserCallback.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "javax.swing.text.html.HTMLEditorKit$ParserCallback",
  "comment": "The result of parsing drives these callback methods. The open and close actions should be balanced. The \n\u003ccode\u003eflush\u003c/code\u003e method will be the last method called, to give the receiver a chance to flush any pending data into the document. \n\u003cp\u003eRefer to DocumentParser, the default parser used, for further information on the contents of the AttributeSets, the positions, and other info.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/parser/DocumentParser.html\" title\u003d\"class in javax.swing.text.html.parser\"\u003e\u003ccode\u003eDocumentParser\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}