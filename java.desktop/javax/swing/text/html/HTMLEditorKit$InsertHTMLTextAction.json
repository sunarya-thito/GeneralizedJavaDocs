{
  "packageName": "javax.swing.text.html",
  "simpleName": "InsertHTMLTextAction",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.html.HTMLEditorKit$HTMLTextAction",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "html",
      "comment": "HTML to insert.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.text.html.HTML$Tag",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "parentTag",
      "comment": "Tag to check for in the document.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.text.html.HTML$Tag",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "addTag",
      "comment": "Tag in HTML to start adding tags from.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.text.html.HTML$Tag",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "alternateParentTag",
      "comment": "Alternate Tag to check for in the document if parentTag is not found.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.swing.text.html.HTML$Tag",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "alternateAddTag",
      "comment": "Alternate tag in HTML to start adding tags from if parentTag is not found and alternateParentTag is found.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JEditorPane",
            "type": "Class"
          },
          "name": "editor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTMLDocument",
            "type": "Class"
          },
          "name": "doc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "html",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "popDepth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pushDepth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "addTag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertHTML",
      "comment": "A cover for HTMLEditorKit.insertHTML. If an exception it thrown it is wrapped in a RuntimeException and thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeditor\u003c/code\u003e - an instance of JEditorPane",
          "\u003ccode\u003edoc\u003c/code\u003e - the document to insert into",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to insert HTML at",
          "\u003ccode\u003ehtml\u003c/code\u003e - an HTML string",
          "\u003ccode\u003epopDepth\u003c/code\u003e - the number of ElementSpec.EndTagTypes to generate before inserting",
          "\u003ccode\u003epushDepth\u003c/code\u003e - the number of ElementSpec.StartTagTypes with a direction of ElementSpec.JoinNextDirection that should be generated before inserting, but after the end tags have been generated",
          "\u003ccode\u003eaddTag\u003c/code\u003e - the first tag to start inserting into document"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JEditorPane",
            "type": "Class"
          },
          "name": "editor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTMLDocument",
            "type": "Class"
          },
          "name": "doc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "insertElement",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "html",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "parentTag",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "addTag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertAtBoundary",
      "comment": "This is invoked when inserting at a boundary. It determines the number of pops, and then the number of pushes that need to be performed, and then invokes insertHTML.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeditor\u003c/code\u003e - an instance of JEditorPane",
          "\u003ccode\u003edoc\u003c/code\u003e - an instance of HTMLDocument",
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset to start from",
          "\u003ccode\u003einsertElement\u003c/code\u003e - an instance of Element",
          "\u003ccode\u003ehtml\u003c/code\u003e - an HTML string",
          "\u003ccode\u003eparentTag\u003c/code\u003e - a parent tag",
          "\u003ccode\u003eaddTag\u003c/code\u003e - the first tag to start inserting into document"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JEditorPane",
            "type": "Class"
          },
          "name": "editor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTMLDocument",
            "type": "Class"
          },
          "name": "doc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "insertElement",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "html",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "parentTag",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "addTag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertAtBoundry",
      "comment": "This is invoked when inserting at a boundary. It determines the number of pops, and then the number of pushes that need to be performed, and then invokes insertHTML.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeditor\u003c/code\u003e - an instance of JEditorPane",
          "\u003ccode\u003edoc\u003c/code\u003e - an instance of HTMLDocument",
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset to start from",
          "\u003ccode\u003einsertElement\u003c/code\u003e - an instance of Element",
          "\u003ccode\u003ehtml\u003c/code\u003e - an HTML string",
          "\u003ccode\u003eparentTag\u003c/code\u003e - a parent tag",
          "\u003ccode\u003eaddTag\u003c/code\u003e - the first tag to start inserting into document"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "name": "ae",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "actionPerformed",
      "comment": "Inserts the HTML into the document.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eae\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "html",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "parentTag",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "addTag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new InsertHTMLTextAction.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a name of the action",
          "\u003ccode\u003ehtml\u003c/code\u003e - an HTML string",
          "\u003ccode\u003eparentTag\u003c/code\u003e - a parent tag",
          "\u003ccode\u003eaddTag\u003c/code\u003e - the first tag to start inserting into document"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "html",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "parentTag",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "addTag",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "alternateParentTag",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "name": "alternateAddTag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new InsertHTMLTextAction.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a name of the action",
          "\u003ccode\u003ehtml\u003c/code\u003e - an HTML string",
          "\u003ccode\u003eparentTag\u003c/code\u003e - a parent tag",
          "\u003ccode\u003eaddTag\u003c/code\u003e - the first tag to start inserting into document",
          "\u003ccode\u003ealternateParentTag\u003c/code\u003e - an alternative parent tag",
          "\u003ccode\u003ealternateAddTag\u003c/code\u003e - an alternative tag"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "javax.swing.text.html.HTMLEditorKit$InsertHTMLTextAction",
  "comment": "InsertHTMLTextAction can be used to insert an arbitrary string of HTML into an existing HTML document. At least two HTML.Tags need to be supplied. The first Tag, parentTag, identifies the parent in the document to add the elements to. The second tag, addTag, identifies the first tag that should be added to the document as seen in the HTML string. One important thing to remember, is that the parser is going to generate all the appropriate tags, even if they aren\u0027t in the HTML string passed in.\n\u003cp\u003e For example, lets say you wanted to create an action to insert a table into the body. The parentTag would be HTML.Tag.BODY, addTag would be HTML.Tag.TABLE, and the string could be something like \u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;. \u003c/p\u003e\n\u003cp\u003eThere is also an option to supply an alternate parentTag and addTag. These will be checked for if there is no parentTag at offset.\u003c/p\u003e",
  "tagMap": {}
}