{
  "packageName": "javax.swing.text.html",
  "simpleName": "BoxPainter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "side"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInset",
      "comment": "Fetches the inset needed on a given side to account for the margin, border, and padding.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eside\u003c/code\u003e - The size of the box to fetch the inset for. This can be View.TOP, View.LEFT, View.BOTTOM, or View.RIGHT.",
          "\u003ccode\u003ev\u003c/code\u003e - the view making the request. This is used to get the AttributeSet, and may be used to resolve percentage arguments."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid direction"
        ],
        "return": [
          "the inset needed for the margin, border and padding."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Paints the CSS box according to the attributes given. This should paint the border, padding, and background.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the rendering surface.",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the allocated area to render into.",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the allocated area to render into.",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the allocated area to render into.",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the allocated area to render into.",
          "\u003ccode\u003ev\u003c/code\u003e - the view making the request. This is used to get the AttributeSet, and may be used to resolve percentage arguments."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "javax.swing.text.html.StyleSheet$BoxPainter",
  "comment": "Class to carry out some of the duties of CSS formatting. Implementations of this class enable views to present the CSS formatting while not knowing anything about how the CSS values are being cached. \n\u003cp\u003e As a delegate of Views, this object is responsible for the insets of a View and making sure the background is maintained according to the CSS attributes.\u003c/p\u003e",
  "tagMap": {}
}