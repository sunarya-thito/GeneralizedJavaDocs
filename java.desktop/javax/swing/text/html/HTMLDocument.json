{
  "packageName": "javax.swing.text.html",
  "simpleName": "HTMLDocument",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.DefaultStyledDocument",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AdditionalComments",
      "comment": "Document property key value. The value for the key will be a Vector of Strings that are comments not found in the body.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.html.HTMLDocument.AdditionalComments\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLEditorKit$ParserCallback",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReader",
      "comment": "Fetches the reader for the parser to use when loading the document with HTML. This is implemented to return an instance of HTMLDocument.HTMLReader. Subclasses can reimplement this method to change how the document gets structured if desired. (For example, to handle custom tags, or structurally represent character style elements.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the starting position"
        ],
        "return": [
          "the reader used by the parser to load the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLEditorKit$ParserCallback",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "popDepth"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pushDepth"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "field": {
            "name": "insertTag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReader",
      "comment": "Returns the reader for the parser to use to load the document with HTML. This is implemented to return an instance of HTMLDocument.HTMLReader. Subclasses can reimplement this method to change how the document gets structured if desired. (For example, to handle custom tags, or structurally represent character style elements.) This is a convenience method for getReader(int, int, int, HTML.Tag, TRUE).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the starting position",
          "\u003ccode\u003epopDepth\u003c/code\u003e - the number of \n\u003ccode\u003eElementSpec.EndTagTypes\u003c/code\u003e to generate before inserting",
          "\u003ccode\u003epushDepth\u003c/code\u003e - the number of \n\u003ccode\u003eElementSpec.StartTagTypes\u003c/code\u003e with a direction of \n\u003ccode\u003eElementSpec.JoinNextDirection\u003c/code\u003e that should be generated before inserting, but after the end tags have been generated",
          "\u003ccode\u003einsertTag\u003c/code\u003e - the first tag to start inserting into document"
        ],
        "return": [
          "the reader used by the parser to load the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBase",
      "comment": "Returns the location to resolve relative URLs against. By default this will be the document\u0027s URL if the document was loaded from a URL. If a base tag is found and can be parsed, it will be used as the base location.",
      "tagMap": {
        "return": [
          "the base location"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "u"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBase",
      "comment": "Sets the location to resolve relative URLs against. By default this will be the document\u0027s URL if the document was loaded from a URL. If a base tag is found and can be parsed, it will be used as the base location. This also sets the base of the StyleSheet to be u as well as the base of the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eu\u003c/code\u003e - the desired base URL"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.DefaultStyledDocument$ElementSpec",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insert",
      "comment": "Inserts new elements in bulk. This is how elements get created in the document. The parsing determines what structure is needed and creates the specification as a set of tokens that describe the edit while leaving the document free of a write-lock. This method can then be called in bursts by the reader to acquire a write-lock for a shorter duration (i.e. while the document is actually being altered).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html#insert(int,javax.swing.text.DefaultStyledDocument.ElementSpec%5B%5D)\"\u003einsert\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultStyledDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting offset",
          "\u003ccode\u003edata\u003c/code\u003e - the element data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "chng"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertUpdate",
      "comment": "Updates document structure as a result of text insertion. This will happen within a write lock. This implementation simply parses the inserted content for line breaks and builds up a set of instructions for the element buffer.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html#insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)\"\u003einsertUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultStyledDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echng\u003c/code\u003e - a description of the document change",
          "\u003ccode\u003eattr\u003c/code\u003e - the attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.DefaultStyledDocument$ElementSpec",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "create",
      "comment": "Replaces the contents of the document with the given element specifications. This is called before insert if the loading is done in bursts. This is the only method called if loading the document entirely in one burst.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html#create(javax.swing.text.DefaultStyledDocument.ElementSpec%5B%5D)\"\u003ecreate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultStyledDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the new contents of the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "replace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParagraphAttributes",
      "comment": "Sets attributes for a paragraph. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html#setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)\"\u003esetParagraphAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultStyledDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledDocument.html#setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)\"\u003esetParagraphAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledDocument.html\" title\u003d\"interface in javax.swing.text\"\u003eStyledDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the paragraph (must be at least 0)",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters affected (must be at least 0)",
          "\u003ccode\u003es\u003c/code\u003e - the attributes",
          "\u003ccode\u003ereplace\u003c/code\u003e - whether to replace existing attributes, or merge them"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.StyleSheet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyleSheet",
      "comment": "Fetches the StyleSheet with the document-specific display rules (CSS) that were specified in the HTML document itself.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eStyleSheet\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLDocument$Iterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.HTML$Tag",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIterator",
      "comment": "Fetches an iterator for the specified HTML tag. This can be used for things like iterating over the set of anchors contained, or iterating over the input elements.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eHTML.Tag\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the requested \n\u003ccode\u003eHTML.Tag\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eIterator\u003c/code\u003e for the given HTML tag"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLeafElement",
      "comment": "Creates a document leaf element that directly represents text (doesn\u0027t have any children). This is implemented to return an element of type HTMLDocument.RunElement.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#createLeafElement(javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)\"\u003ecreateLeafElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the parent element",
          "\u003ccode\u003ea\u003c/code\u003e - the attributes for the element",
          "\u003ccode\u003ep0\u003c/code\u003e - the beginning of the range (must be at least 0)",
          "\u003ccode\u003ep1\u003c/code\u003e - the end of the range (must be at least p0)"
        ],
        "return": [
          "the new element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createBranchElement",
      "comment": "Creates a document branch element, that can contain other elements. This is implemented to return an element of type HTMLDocument.BlockElement.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#createBranchElement(javax.swing.text.Element,javax.swing.text.AttributeSet)\"\u003ecreateBranchElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the parent element",
          "\u003ccode\u003ea\u003c/code\u003e - the attributes"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AbstractDocument$AbstractElement",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultRoot",
      "comment": "Creates the root element to be used to represent the default document structure.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html#createDefaultRoot()\"\u003ecreateDefaultRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultStyledDocument.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultStyledDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the element base"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTokenThreshold",
      "comment": "Sets the number of tokens to buffer before trying to update the documents element structure.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the number of tokens to buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTokenThreshold",
      "comment": "Gets the number of tokens to buffer before trying to update the documents element structure. The default value is Integer.MAX_VALUE.",
      "tagMap": {
        "return": [
          "the number of tokens to buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "preservesTags"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPreservesUnknownTags",
      "comment": "Determines how unknown tags are handled by the parser. If set to true, unknown tags are put in the model, otherwise they are dropped.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eHTML.Tag\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epreservesTags\u003c/code\u003e - true if unknown tags should be saved in the model, otherwise tags are dropped"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreservesUnknownTags",
      "comment": "Returns the behavior the parser observes when encountering unknown tags.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTML.Tag.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eHTML.Tag\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if unknown tags are to be preserved when parsing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.HTMLFrameHyperlinkEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "processHTMLFrameHyperlinkEvent",
      "comment": "Processes HyperlinkEvents that are generated by documents in an HTML frame. The HyperlinkEvent type, as the parameter suggests, is HTMLFrameHyperlinkEvent. In addition to the typical information contained in a HyperlinkEvent, this event contains the element that corresponds to the frame in which the click happened (the source element) and the target name. The target name has 4 possible values: _self _parent _top a named frame If target is _self, the action is to change the value of the HTML.Attribute.SRC attribute and fires a ChangedUpdate event. If the target is _parent, then it deletes the parent element, which is a \u003cFRAMESET\u003e element, and inserts a new \u003cFRAME\u003e element, and sets its HTML.Attribute.SRC attribute to have a value equal to the destination URL and fire a RemovedUpdate and InsertUpdate. If the target is _top, this method does nothing. In the implementation of the view for a frame, namely the FrameView, the processing of _top is handled. Given that _top implies replacing the entire document, it made sense to handle this outside of the document that it will replace. If the target is a named frame, then the element hierarchy is searched for an element with a name equal to the target, its HTML.Attribute.SRC attribute is updated and a ChangedUpdate event is fired.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.HTMLEditorKit$Parser",
            "type": "Class"
          },
          "field": {
            "name": "parser"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParser",
      "comment": "Sets the parser that is used by the methods that insert html into the existing document, such as setInnerHTML, and setOuterHTML. HTMLEditorKit.createDefaultDocument will set the parser for you. If you create an HTMLDocument by hand, be sure and set the parser accordingly.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparser\u003c/code\u003e - the parser to be used for text insertion"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.HTMLEditorKit$Parser",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParser",
      "comment": "Returns the parser that is used when inserting HTML into the existing document.",
      "tagMap": {
        "return": [
          "the parser used for text insertion"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "htmlText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInnerHTML",
      "comment": "Replaces the children of the given element with the contents specified as an HTML string. This will be seen as at least two events, n inserts followed by a remove. Consider the following structure (the elem parameter is in bold).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n      /  \\\n    \u003cp\u003e   \u003cp\u003e\n Invoking setInnerHTML(elem, \"\u003cul\u003e\u003cli\u003e\") results in the following structure (new elements are in blue).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n         \\\n         \u003cul\u003e\n           \\\n           \u003cli\u003e\n Parameter elem must not be a leaf element, otherwise an IllegalArgumentException is thrown. If either elem or htmlText parameter is null, no changes are made to the document. For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the createDefaultDocument method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the branch element whose children will be replaced",
          "\u003ccode\u003ehtmlText\u003c/code\u003e - the string to be parsed and assigned to \n\u003ccode\u003eelem\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelem\u003c/code\u003e is a leaf",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an \n\u003ccode\u003eHTMLEditorKit.Parser\u003c/code\u003e has not been defined",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if replacement is impossible because of a structural issue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "htmlText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOuterHTML",
      "comment": "Replaces the given element in the parent with the contents specified as an HTML string. This will be seen as at least two events, n inserts followed by a remove. When replacing a leaf this will attempt to make sure there is a newline present if one is needed. This may result in an additional element being inserted. Consider, if you were to replace a character element that contained a newline with \u003cimg\u003e this would create two elements, one for the image, and one for the newline. If you try to replace the element at length you will most likely end up with two elements, eg setOuterHTML(getCharacterElement (getLength()), \"blah\") will result in two leaf elements at the end, one representing \u0027blah\u0027, and the other representing the end element. Consider the following structure (the elem parameter is in bold).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n      /  \\\n    \u003cp\u003e   \u003cp\u003e\n Invoking setOuterHTML(elem, \"\u003cul\u003e\u003cli\u003e\") results in the following structure (new elements are in blue).     \u003cbody\u003e\n      |\n     \u003cul\u003e\n       \\\n       \u003cli\u003e\n If either elem or htmlText parameter is null, no changes are made to the document. For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the createDefaultDocument method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element to replace",
          "\u003ccode\u003ehtmlText\u003c/code\u003e - the string to be parsed and inserted in place of \n\u003ccode\u003eelem\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an HTMLEditorKit.Parser has not been set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if replacement is impossible because of a structural issue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "htmlText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertAfterStart",
      "comment": "Inserts the HTML specified as a string at the start of the element. Consider the following structure (the elem parameter is in bold).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n      /  \\\n    \u003cp\u003e   \u003cp\u003e\n Invoking insertAfterStart(elem, \"\u003cul\u003e\u003cli\u003e\") results in the following structure (new elements are in blue).         \u003cbody\u003e\n          |\n        \u003cdiv\u003e\n       /  |  \\\n    \u003cul\u003e \u003cp\u003e \u003cp\u003e\n     /\n  \u003cli\u003e\n Unlike the insertBeforeStart method, new elements become children of the specified element, not siblings. Parameter elem must not be a leaf element, otherwise an IllegalArgumentException is thrown. If either elem or htmlText parameter is null, no changes are made to the document. For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the createDefaultDocument method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the branch element to be the root for the new text",
          "\u003ccode\u003ehtmlText\u003c/code\u003e - the string to be parsed and assigned to \n\u003ccode\u003eelem\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelem\u003c/code\u003e is a leaf",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an HTMLEditorKit.Parser has not been set on the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if insertion is impossible because of a structural issue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "htmlText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertBeforeEnd",
      "comment": "Inserts the HTML specified as a string at the end of the element. If elem\u0027s children are leaves, and the character at a elem.getEndOffset() - 1 is a newline, this will insert before the newline so that there isn\u0027t text after the newline. Consider the following structure (the elem parameter is in bold).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n      /  \\\n    \u003cp\u003e   \u003cp\u003e\n Invoking insertBeforeEnd(elem, \"\u003cul\u003e\u003cli\u003e\") results in the following structure (new elements are in blue).         \u003cbody\u003e\n          |\n        \u003cdiv\u003e\n       /  |  \\\n     \u003cp\u003e \u003cp\u003e \u003cul\u003e\n               \\\n               \u003cli\u003e\n Unlike the insertAfterEnd method, new elements become children of the specified element, not siblings. Parameter elem must not be a leaf element, otherwise an IllegalArgumentException is thrown. If either elem or htmlText parameter is null, no changes are made to the document. For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the createDefaultDocument method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element to be the root for the new text",
          "\u003ccode\u003ehtmlText\u003c/code\u003e - the string to be parsed and assigned to \n\u003ccode\u003eelem\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelem\u003c/code\u003e is a leaf",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an HTMLEditorKit.Parser has not been set on the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if insertion is impossible because of a structural issue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "htmlText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertBeforeStart",
      "comment": "Inserts the HTML specified as a string before the start of the given element. Consider the following structure (the elem parameter is in bold).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n      /  \\\n    \u003cp\u003e   \u003cp\u003e\n Invoking insertBeforeStart(elem, \"\u003cul\u003e\u003cli\u003e\") results in the following structure (new elements are in blue).         \u003cbody\u003e\n         /  \\\n      \u003cul\u003e \u003cdiv\u003e\n       /    /  \\\n     \u003cli\u003e \u003cp\u003e  \u003cp\u003e\n Unlike the insertAfterStart method, new elements become siblings of the specified element, not children. If either elem or htmlText parameter is null, no changes are made to the document. For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the createDefaultDocument method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element the content is inserted before",
          "\u003ccode\u003ehtmlText\u003c/code\u003e - the string to be parsed and inserted before \n\u003ccode\u003eelem\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an HTMLEditorKit.Parser has not been set on the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if insertion is impossible because of a structural issue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "htmlText"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertAfterEnd",
      "comment": "Inserts the HTML specified as a string after the end of the given element. Consider the following structure (the elem parameter is in bold).      \u003cbody\u003e\n       |\n     \u003cdiv\u003e\n      /  \\\n    \u003cp\u003e   \u003cp\u003e\n Invoking insertAfterEnd(elem, \"\u003cul\u003e\u003cli\u003e\") results in the following structure (new elements are in blue).         \u003cbody\u003e\n         /  \\\n      \u003cdiv\u003e \u003cul\u003e\n       / \\    \\\n     \u003cp\u003e \u003cp\u003e  \u003cli\u003e\n Unlike the insertBeforeEnd method, new elements become siblings of the specified element, not children. If either elem or htmlText parameter is null, no changes are made to the document. For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the createDefaultDocument method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element the content is inserted after",
          "\u003ccode\u003ehtmlText\u003c/code\u003e - the string to be parsed and inserted after \n\u003ccode\u003eelem\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if an HTMLEditorKit.Parser has not been set on the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if insertion is impossible because of a structural issue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O exception occurs"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getElement",
      "comment": "Returns the element that has the given id Attribute. If the element can\u0027t be found, null is returned. Note that this method works on an Attribute, not a character tag. In the following HTML snippet: \u003ca id\u003d\"HelloThere\"\u003e the attribute is \u0027id\u0027 and the character tag is \u0027a\u0027. This is a convenience method for getElement(RootElement, HTML.Attribute.id, id). This is not thread-safe.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eHTML.Attribute\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - the string representing the desired \n\u003ccode\u003eAttribute\u003c/code\u003e"
        ],
        "return": [
          "the element with the specified \n\u003ccode\u003eAttribute\u003c/code\u003e or \n\u003ccode\u003enull\u003c/code\u003e if it can\u0027t be found, or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003eid\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "attribute"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getElement",
      "comment": "Returns the child element of e that contains the attribute, attribute with value value, or null if one isn\u0027t found. This is not thread-safe.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/HTML.Attribute.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eHTML.Attribute\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the root element where the search begins",
          "\u003ccode\u003eattribute\u003c/code\u003e - the desired \n\u003ccode\u003eAttribute\u003c/code\u003e",
          "\u003ccode\u003evalue\u003c/code\u003e - the values for the specified \n\u003ccode\u003eAttribute\u003c/code\u003e"
        ],
        "return": [
          "the element with the specified \n\u003ccode\u003eAttribute\u003c/code\u003e and the specified \n\u003ccode\u003evalue\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if it can\u0027t be found"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireChangedUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#fireChangedUpdate(javax.swing.event.DocumentEvent)\"\u003efireChangedUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.UndoableEditEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireUndoableEditUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#fireUndoableEditUpdate(javax.swing.event.UndoableEditEvent)\"\u003efireUndoableEditUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an HTML document using the default buffer size and a default StyleSheet. This is a convenience method for the constructor HTMLDocument(Content, StyleSheet).",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.html.StyleSheet",
            "type": "Class"
          },
          "field": {
            "name": "styles"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an HTML document with the default content storage implementation and the specified style/attribute storage mechanism. This is a convenience method for the constructor HTMLDocument(Content, StyleSheet).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estyles\u003c/code\u003e - the styles"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$Content",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.html.StyleSheet",
            "type": "Class"
          },
          "field": {
            "name": "styles"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an HTML document with the given content storage implementation and the given style/attribute storage mechanism.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the container for the content",
          "\u003ccode\u003estyles\u003c/code\u003e - the styles"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.text.html.HTMLDocument$BlockElement",
    "javax.swing.text.html.HTMLDocument$HTMLReader",
    "javax.swing.text.html.HTMLDocument$RunElement",
    "javax.swing.text.html.HTMLDocument$Iterator"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.HTMLDocument",
  "comment": "A document that models HTML. The purpose of this model is to support both browsing and editing. As a result, the structure described by an HTML document is not exactly replicated by default. The element structure that is modeled by default, is built by the class \n\u003ccode\u003eHTMLDocument.HTMLReader\u003c/code\u003e, which implements the \n\u003ccode\u003eHTMLEditorKit.ParserCallback\u003c/code\u003e protocol that the parser expects. To change the structure one can subclass \n\u003ccode\u003eHTMLReader\u003c/code\u003e, and reimplement the method \n\u003ca href\u003d\"#getReader(int)\"\u003e\u003ccode\u003egetReader(int)\u003c/code\u003e\u003c/a\u003e to return the new reader implementation. The documentation for \n\u003ccode\u003eHTMLReader\u003c/code\u003e should be consulted for the details of the default structure created. The intent is that the document be non-lossy (although reproducing the HTML format may result in a different format). \n\u003cp\u003eThe document models only HTML, and makes no attempt to store view attributes in it. The elements are identified by the \u003ccode\u003eStyleContext.NameAttribute\u003c/code\u003e attribute, which should always have a value of type \u003ccode\u003eHTML.Tag\u003c/code\u003e that identifies the kind of element. Some of the elements (such as comments) are synthesized. The \u003ccode\u003eHTMLFactory\u003c/code\u003e uses this attribute to determine what kind of view to build.\u003c/p\u003e \n\u003cp\u003eThis document supports incremental loading. The \u003ccode\u003eTokenThreshold\u003c/code\u003e property controls how much of the parse is buffered before trying to update the element structure of the document. This property is set by the \u003ccode\u003eEditorKit\u003c/code\u003e so that subclasses can disable it.\u003c/p\u003e \n\u003cp\u003eThe \u003ccode\u003eBase\u003c/code\u003e property determines the URL against which relative URLs are resolved. By default, this will be the \u003ccode\u003eDocument.StreamDescriptionProperty\u003c/code\u003e if the value of the property is a URL. If a \u0026lt;BASE\u0026gt; tag is encountered, the base will become the URL specified by that tag. Because the base URL is a property, it can of course be set directly.\u003c/p\u003e \n\u003cp\u003eThe default content storage mechanism for this document is a gap buffer (\u003ccode\u003eGapContent\u003c/code\u003e). Alternatives can be supplied by using the constructor that takes a \u003ccode\u003eContent\u003c/code\u003e implementation.\u003c/p\u003e \n\u003ch2\u003eModifying HTMLDocument\u003c/h2\u003e \n\u003cp\u003eIn addition to the methods provided by Document and StyledDocument for mutating an HTMLDocument, HTMLDocument provides a number of convenience methods. The following methods can be used to insert HTML content into an existing document.\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"#setInnerHTML(javax.swing.text.Element,java.lang.String)\"\u003e\u003ccode\u003esetInnerHTML(Element, String)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca href\u003d\"#setOuterHTML(javax.swing.text.Element,java.lang.String)\"\u003e\u003ccode\u003esetOuterHTML(Element, String)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca href\u003d\"#insertBeforeStart(javax.swing.text.Element,java.lang.String)\"\u003e\u003ccode\u003einsertBeforeStart(Element, String)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca href\u003d\"#insertAfterStart(javax.swing.text.Element,java.lang.String)\"\u003e\u003ccode\u003einsertAfterStart(Element, String)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca href\u003d\"#insertBeforeEnd(javax.swing.text.Element,java.lang.String)\"\u003e\u003ccode\u003einsertBeforeEnd(Element, String)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca href\u003d\"#insertAfterEnd(javax.swing.text.Element,java.lang.String)\"\u003e\u003ccode\u003einsertAfterEnd(Element, String)\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003eThe following examples illustrate using these methods. Each example assumes the HTML document is initialized in the following way:\u003c/p\u003e \n\u003cpre\u003e JEditorPane p \u003d new JEditorPane();\n p.setContentType(\"text/html\");\n p.setText(\"...\"); // Document text is provided below.\n HTMLDocument d \u003d (HTMLDocument) p.getDocument();\n \u003c/pre\u003e \n\u003cp\u003eWith the following HTML content:\u003c/p\u003e \n\u003cpre\u003e \u0026lt;html\u0026gt;\n   \u0026lt;head\u0026gt;\n     \u0026lt;title\u0026gt;An example HTMLDocument\u0026lt;/title\u0026gt;\n     \u0026lt;style type\u003d\"text/css\"\u0026gt;\n       div { background-color: silver; }\n       ul { color: blue; }\n     \u0026lt;/style\u0026gt;\n   \u0026lt;/head\u0026gt;\n   \u0026lt;body\u0026gt;\n     \u0026lt;div id\u003d\"BOX\"\u0026gt;\n       \u0026lt;p\u0026gt;Paragraph 1\u0026lt;/p\u0026gt;\n       \u0026lt;p\u0026gt;Paragraph 2\u0026lt;/p\u0026gt;\n     \u0026lt;/div\u0026gt;\n   \u0026lt;/body\u0026gt;\n \u0026lt;/html\u0026gt;\n \u003c/pre\u003e \n\u003cp\u003eAll the methods for modifying an HTML document require an \u003ca href\u003d\"../Element.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eElement\u003c/code\u003e\u003c/a\u003e. Elements can be obtained from an HTML document by using the method \u003ca href\u003d\"#getElement(javax.swing.text.Element,java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003egetElement(Element e, Object attribute, Object value)\u003c/code\u003e\u003c/a\u003e. It returns the first descendant element that contains the specified attribute with the given value, in depth-first order. For example, \u003ccode\u003ed.getElement(d.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.P)\u003c/code\u003e returns the first paragraph element.\u003c/p\u003e \n\u003cp\u003eA convenient shortcut for locating elements is the method \u003ca href\u003d\"#getElement(java.lang.String)\"\u003e\u003ccode\u003egetElement(String)\u003c/code\u003e\u003c/a\u003e; returns an element whose \u003ccode\u003eID\u003c/code\u003e attribute matches the specified value. For example, \u003ccode\u003ed.getElement(\"BOX\")\u003c/code\u003e returns the \u003ccode\u003eDIV\u003c/code\u003e element.\u003c/p\u003e \n\u003cp\u003eThe \u003ca href\u003d\"#getIterator(javax.swing.text.html.HTML.Tag)\"\u003e\u003ccode\u003egetIterator(HTML.Tag t)\u003c/code\u003e\u003c/a\u003e method can also be used for finding all occurrences of the specified HTML tag in the document.\u003c/p\u003e \n\u003ch3\u003eInserting elements\u003c/h3\u003e \n\u003cp\u003eElements can be inserted before or after the existing children of any non-leaf element by using the methods \u003ccode\u003einsertAfterStart\u003c/code\u003e and \u003ccode\u003einsertBeforeEnd\u003c/code\u003e. For example, if \u003ccode\u003ee\u003c/code\u003e is the \u003ccode\u003eDIV\u003c/code\u003e element, \u003ccode\u003ed.insertAfterStart(e, \"\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;List Item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\")\u003c/code\u003e inserts the list before the first paragraph, and \u003ccode\u003ed.insertBeforeEnd(e, \"\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;List Item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\")\u003c/code\u003e inserts the list after the last paragraph. The \u003ccode\u003eDIV\u003c/code\u003e block becomes the parent of the newly inserted elements.\u003c/p\u003e \n\u003cp\u003eSibling elements can be inserted before or after any element by using the methods \u003ccode\u003einsertBeforeStart\u003c/code\u003e and \u003ccode\u003einsertAfterEnd\u003c/code\u003e. For example, if \u003ccode\u003ee\u003c/code\u003e is the \u003ccode\u003eDIV\u003c/code\u003e element, \u003ccode\u003ed.insertBeforeStart(e, \"\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;List Item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\")\u003c/code\u003e inserts the list before the \u003ccode\u003eDIV\u003c/code\u003e element, and \u003ccode\u003ed.insertAfterEnd(e, \"\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;List Item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\")\u003c/code\u003e inserts the list after the \u003ccode\u003eDIV\u003c/code\u003e element. The newly inserted elements become siblings of the \u003ccode\u003eDIV\u003c/code\u003e element.\u003c/p\u003e \n\u003ch3\u003eReplacing elements\u003c/h3\u003e \n\u003cp\u003eElements and all their descendants can be replaced by using the methods \u003ccode\u003esetInnerHTML\u003c/code\u003e and \u003ccode\u003esetOuterHTML\u003c/code\u003e. For example, if \u003ccode\u003ee\u003c/code\u003e is the \u003ccode\u003eDIV\u003c/code\u003e element, \u003ccode\u003ed.setInnerHTML(e, \"\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;List Item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\")\u003c/code\u003e replaces all children paragraphs with the list, and \u003ccode\u003ed.setOuterHTML(e, \"\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;List Item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\")\u003c/code\u003e replaces the \u003ccode\u003eDIV\u003c/code\u003e element itself. In latter case the parent of the list is the \u003ccode\u003eBODY\u003c/code\u003e element. \u003c/p\u003e\n\u003ch3\u003eSummary\u003c/h3\u003e \n\u003cp\u003eThe following table shows the example document and the results of various methods described above.\u003c/p\u003e \n\u003ctable class\u003d\"plain\"\u003e \n \u003ccaption\u003e\n  HTML Content of example above\n \u003c/caption\u003e \n \u003ctbody\u003e\n  \u003ctr\u003e \n   \u003cth\u003eExample\u003c/th\u003e \n   \u003cth\u003e\u003ccode\u003einsertAfterStart\u003c/code\u003e\u003c/th\u003e \n   \u003cth\u003e\u003ccode\u003einsertBeforeEnd\u003c/code\u003e\u003c/th\u003e \n   \u003cth\u003e\u003ccode\u003einsertBeforeStart\u003c/code\u003e\u003c/th\u003e \n   \u003cth\u003e\u003ccode\u003einsertAfterEnd\u003c/code\u003e\u003c/th\u003e \n   \u003cth\u003e\u003ccode\u003esetInnerHTML\u003c/code\u003e\u003c/th\u003e \n   \u003cth\u003e\u003ccode\u003esetOuterHTML\u003c/code\u003e\u003c/th\u003e \n  \u003c/tr\u003e \n  \u003ctr style\u003d\"vertical-align:top\"\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cdiv style\u003d\"background-color: silver;\"\u003e \n     \u003cp\u003eParagraph 1\u003c/p\u003e \n     \u003cp\u003eParagraph 2\u003c/p\u003e \n    \u003c/div\u003e \u003c/td\u003e \n   \u003c!--insertAfterStart--\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cdiv style\u003d\"background-color: silver;\"\u003e \n     \u003cul style\u003d\"color: blue;\"\u003e \n      \u003cli\u003eList Item\u003c/li\u003e \n     \u003c/ul\u003e \n     \u003cp\u003eParagraph 1\u003c/p\u003e \n     \u003cp\u003eParagraph 2\u003c/p\u003e \n    \u003c/div\u003e \u003c/td\u003e \n   \u003c!--insertBeforeEnd--\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cdiv style\u003d\"background-color: silver;\"\u003e \n     \u003cp\u003eParagraph 1\u003c/p\u003e \n     \u003cp\u003eParagraph 2\u003c/p\u003e \n     \u003cul style\u003d\"color: blue;\"\u003e \n      \u003cli\u003eList Item\u003c/li\u003e \n     \u003c/ul\u003e \n    \u003c/div\u003e \u003c/td\u003e \n   \u003c!--insertBeforeStart--\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cul style\u003d\"color: blue;\"\u003e \n     \u003cli\u003eList Item\u003c/li\u003e \n    \u003c/ul\u003e \n    \u003cdiv style\u003d\"background-color: silver;\"\u003e \n     \u003cp\u003eParagraph 1\u003c/p\u003e \n     \u003cp\u003eParagraph 2\u003c/p\u003e \n    \u003c/div\u003e \u003c/td\u003e \n   \u003c!--insertAfterEnd--\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cdiv style\u003d\"background-color: silver;\"\u003e \n     \u003cp\u003eParagraph 1\u003c/p\u003e \n     \u003cp\u003eParagraph 2\u003c/p\u003e \n    \u003c/div\u003e \n    \u003cul style\u003d\"color: blue;\"\u003e \n     \u003cli\u003eList Item\u003c/li\u003e \n    \u003c/ul\u003e \u003c/td\u003e \n   \u003c!--setInnerHTML--\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cdiv style\u003d\"background-color: silver;\"\u003e \n     \u003cul style\u003d\"color: blue;\"\u003e \n      \u003cli\u003eList Item\u003c/li\u003e \n     \u003c/ul\u003e \n    \u003c/div\u003e \u003c/td\u003e \n   \u003c!--setOuterHTML--\u003e \n   \u003ctd style\u003d\"white-space:nowrap\"\u003e \n    \u003cul style\u003d\"color: blue;\"\u003e \n     \u003cli\u003eList Item\u003c/li\u003e \n    \u003c/ul\u003e \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e\n\u003c/table\u003e \n\u003cp\u003e\u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}