{
  "packageName": "javax.swing.text.html",
  "simpleName": "CSS",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.text.html.CSS$Attribute",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAllAttributeKeys",
      "comment": "Return the set of all possible CSS attribute keys.",
      "tagMap": {
        "return": [
          "the set of all possible CSS attribute keys"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.html.CSS$Attribute",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getAttribute",
      "comment": "Translates a string to a CSS.Attribute object. This will return null if there is no attribute by the given name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the CSS attribute to fetch the typesafe enumeration for"
        ],
        "return": [
          "the \n\u003ccode\u003eCSS.Attribute\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the string doesn\u0027t represent a valid attribute key"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a CSS object.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.text.html.CSS$Attribute"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.html.CSS",
  "comment": "Defines a set of \n\u003ca href\u003d\"http://www.w3.org/TR/REC-CSS1\"\u003eCSS attributes\u003c/a\u003e as a typesafe enumeration. The HTML View implementations use CSS attributes to determine how they will render. This also defines methods to map between CSS/HTML/StyleConstants. Any shorthand properties, such as font, are mapped to the intrinsic properties. \n\u003cp\u003eThe following describes the CSS properties that are supported by the rendering engine: \u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003efont-family \u003c/li\u003e\n \u003cli\u003efont-style \u003c/li\u003e\n \u003cli\u003efont-size (supports relative units) \u003c/li\u003e\n \u003cli\u003efont-weight \u003c/li\u003e\n \u003cli\u003efont \u003c/li\u003e\n \u003cli\u003ecolor \u003c/li\u003e\n \u003cli\u003ebackground-color (with the exception of transparent) \u003c/li\u003e\n \u003cli\u003ebackground-image \u003c/li\u003e\n \u003cli\u003ebackground-repeat \u003c/li\u003e\n \u003cli\u003ebackground-position \u003c/li\u003e\n \u003cli\u003ebackground \u003c/li\u003e\n \u003cli\u003etext-decoration (with the exception of blink and overline) \u003c/li\u003e\n \u003cli\u003evertical-align (only sup and super) \u003c/li\u003e\n \u003cli\u003etext-align (justify is treated as center) \u003c/li\u003e\n \u003cli\u003emargin-top \u003c/li\u003e\n \u003cli\u003emargin-right \u003c/li\u003e\n \u003cli\u003emargin-bottom \u003c/li\u003e\n \u003cli\u003emargin-left \u003c/li\u003e\n \u003cli\u003emargin \u003c/li\u003e\n \u003cli\u003epadding-top \u003c/li\u003e\n \u003cli\u003epadding-right \u003c/li\u003e\n \u003cli\u003epadding-bottom \u003c/li\u003e\n \u003cli\u003epadding-left \u003c/li\u003e\n \u003cli\u003epadding \u003c/li\u003e\n \u003cli\u003eborder-top-style \u003c/li\u003e\n \u003cli\u003eborder-right-style \u003c/li\u003e\n \u003cli\u003eborder-bottom-style \u003c/li\u003e\n \u003cli\u003eborder-left-style \u003c/li\u003e\n \u003cli\u003eborder-style (only supports inset, outset and none) \u003c/li\u003e\n \u003cli\u003eborder-top-color \u003c/li\u003e\n \u003cli\u003eborder-right-color \u003c/li\u003e\n \u003cli\u003eborder-bottom-color \u003c/li\u003e\n \u003cli\u003eborder-left-color \u003c/li\u003e\n \u003cli\u003eborder-color \u003c/li\u003e\n \u003cli\u003elist-style-image \u003c/li\u003e\n \u003cli\u003elist-style-type \u003c/li\u003e\n \u003cli\u003elist-style-position \u003c/li\u003e\n\u003c/ul\u003e The following are modeled, but currently not rendered. \n\u003cul\u003e\n \u003cli\u003efont-variant \u003c/li\u003e\n \u003cli\u003ebackground-attachment (background always treated as scroll) \u003c/li\u003e\n \u003cli\u003eword-spacing \u003c/li\u003e\n \u003cli\u003eletter-spacing \u003c/li\u003e\n \u003cli\u003etext-indent \u003c/li\u003e\n \u003cli\u003etext-transform \u003c/li\u003e\n \u003cli\u003eline-height \u003c/li\u003e\n \u003cli\u003eborder-top-width (this is used to indicate if a border should be used) \u003c/li\u003e\n \u003cli\u003eborder-right-width \u003c/li\u003e\n \u003cli\u003eborder-bottom-width \u003c/li\u003e\n \u003cli\u003eborder-left-width \u003c/li\u003e\n \u003cli\u003eborder-width \u003c/li\u003e\n \u003cli\u003eborder-top \u003c/li\u003e\n \u003cli\u003eborder-right \u003c/li\u003e\n \u003cli\u003eborder-bottom \u003c/li\u003e\n \u003cli\u003eborder-left \u003c/li\u003e\n \u003cli\u003eborder \u003c/li\u003e\n \u003cli\u003ewidth \u003c/li\u003e\n \u003cli\u003eheight \u003c/li\u003e\n \u003cli\u003efloat \u003c/li\u003e\n \u003cli\u003eclear \u003c/li\u003e\n \u003cli\u003edisplay \u003c/li\u003e\n \u003cli\u003ewhite-space \u003c/li\u003e\n \u003cli\u003elist-style \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote: for the time being we do not fully support relative units, unless noted, so that p { margin-top: 10% } will be treated as if no margin-top was specified.\u003c/b\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/html/StyleSheet.html\" title\u003d\"class in javax.swing.text.html\"\u003e\u003ccode\u003eStyleSheet\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}