{
  "packageName": "javax.swing.text",
  "simpleName": "StyledDocument",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.swing.text.Document",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Style",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addStyle",
      "comment": "Adds a new style into the logical style hierarchy. Style attributes resolve from bottom up so an attribute specified in a child will override an attribute specified in the parent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style (must be unique within the collection of named styles). The name may be null if the style is unnamed, but the caller is responsible for managing the reference returned as an unnamed style can\u0027t be fetched by name. An unnamed style may be useful for things like character attribute overrides such as found in a style run.",
          "\u003ccode\u003eparent\u003c/code\u003e - the parent style. This may be null if unspecified attributes need not be resolved in some other style."
        ],
        "return": [
          "the style"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeStyle",
      "comment": "Removes a named style previously added to the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStyle",
      "comment": "Fetches a named style previously added.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the style"
        ],
        "return": [
          "the style"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "replace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterAttributes",
      "comment": "Changes the content element attributes used for the given range of existing content in the document. All of the attributes defined in the given Attributes argument are applied to the given range. This method can be used to completely remove all content level attributes for the given range by giving an Attributes argument that has no attributes defined and setting replace to true.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the start of the change \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the length of the change \u0026gt;\u003d 0",
          "\u003ccode\u003es\u003c/code\u003e - the non-null attributes to change to. Any attributes defined will be applied to the text for the given range.",
          "\u003ccode\u003ereplace\u003c/code\u003e - indicates whether or not the previous attributes should be cleared before the new attributes as set. If true, the operation will replace the previous attributes entirely. If false, the new attributes will be merged with the previous attributes."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "replace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setParagraphAttributes",
      "comment": "Sets paragraph attributes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the start of the change \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the length of the change \u0026gt;\u003d 0",
          "\u003ccode\u003es\u003c/code\u003e - the non-null attributes to change to. Any attributes defined will be applied to the text for the given range.",
          "\u003ccode\u003ereplace\u003c/code\u003e - indicates whether or not the previous attributes should be cleared before the new attributes are set. If true, the operation will replace the previous attributes entirely. If false, the new attributes will be merged with the previous attributes."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Style",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLogicalStyle",
      "comment": "Sets the logical style to use for the paragraph at the given position. If attributes aren\u0027t explicitly set for character and paragraph attributes they will resolve through the logical style assigned to the paragraph, which in turn may resolve through some hierarchy completely independent of the element hierarchy in the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the starting position \u0026gt;\u003d 0",
          "\u003ccode\u003es\u003c/code\u003e - the style to set"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Style",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLogicalStyle",
      "comment": "Gets a logical style for a given position in a paragraph.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the position \u0026gt;\u003d 0"
        ],
        "return": [
          "the style"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParagraphElement",
      "comment": "Gets the element that represents the paragraph that encloses the given offset within the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the offset \u0026gt;\u003d 0"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCharacterElement",
      "comment": "Gets the element that represents the character that is at the given offset within the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the offset \u0026gt;\u003d 0"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getForeground",
      "comment": "Takes a set of attributes and turn it into a foreground color specification. This might be used to specify things like brighter, more hue, etc.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the set of attributes"
        ],
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBackground",
      "comment": "Takes a set of attributes and turn it into a background color specification. This might be used to specify things like brighter, more hue, etc.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the set of attributes"
        ],
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFont",
      "comment": "Takes a set of attributes and turn it into a font specification. This can be used to turn things like family, style, size, etc into a font that is available on the system the document is currently being used on.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattr\u003c/code\u003e - the set of attributes"
        ],
        "return": [
          "the font"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.text.StyledDocument",
  "comment": "Interface for a generic styled document.",
  "tagMap": {}
}