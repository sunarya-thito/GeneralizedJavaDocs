{
  "packageName": "javax.swing.text",
  "simpleName": "NumberFormatter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.InternationalFormatter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.Format",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFormat",
      "comment": "Sets the format that dictates the legal values that can be edited and displayed. If you have used the nullary constructor the value of this property will be determined for the current locale by way of the NumberFormat.getNumberInstance() method.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/InternationalFormatter.html#setFormat(java.text.Format)\"\u003esetFormat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/InternationalFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eInternationalFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - NumberFormat instance used to dictate legal values"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a NumberFormatter with the a default NumberFormat instance obtained from NumberFormat.getNumberInstance().",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.text.NumberFormat",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a NumberFormatter with the specified Format instance.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - Format used to dictate legal values"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.NumberFormatter",
  "comment": "\u003ccode\u003eNumberFormatter\u003c/code\u003e subclasses \n\u003ccode\u003eInternationalFormatter\u003c/code\u003e adding special behavior for numbers. Among the specializations are (these are only used if the \n\u003ccode\u003eNumberFormatter\u003c/code\u003e does not display invalid numbers, for example, \n\u003ccode\u003esetAllowsInvalid(false)\u003c/code\u003e): \n\u003cul\u003e \n \u003cli\u003ePressing +/- (- is determined from the \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e associated with the \u003ccode\u003eDecimalFormat\u003c/code\u003e) in any field but the exponent field will attempt to change the sign of the number to positive/negative. \u003c/li\u003e\n \u003cli\u003ePressing +/- (- is determined from the \u003ccode\u003eDecimalFormatSymbols\u003c/code\u003e associated with the \u003ccode\u003eDecimalFormat\u003c/code\u003e) in the exponent field will attempt to change the sign of the exponent to positive/negative. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e If you are displaying scientific numbers, you may wish to turn on overwrite mode, \u003ccode\u003esetOverwriteMode(true)\u003c/code\u003e. For example: \u003c/p\u003e\n\u003cpre\u003e DecimalFormat decimalFormat \u003d new DecimalFormat(\"0.000E0\");\n NumberFormatter textFormatter \u003d new NumberFormatter(decimalFormat);\n textFormatter.setOverwriteMode(true);\n textFormatter.setAllowsInvalid(false);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If you are going to allow the user to enter decimal values, you should either force the DecimalFormat to contain at least one decimal (\u003ccode\u003e#.0###\u003c/code\u003e), or allow the value to be invalid \u003ccode\u003esetAllowsInvalid(true)\u003c/code\u003e. Otherwise users may not be able to input decimal values. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eNumberFormatter\u003c/code\u003e provides slightly different behavior to \u003ccode\u003estringToValue\u003c/code\u003e than that of its superclass. If you have specified a Class for values, \u003ca href\u003d\"DefaultFormatter.html#setValueClass(java.lang.Class)\"\u003e\u003ccode\u003eDefaultFormatter.setValueClass(java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, that is one of of \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003eLong\u003c/code\u003e, \u003ccode\u003eFloat\u003c/code\u003e, \u003ccode\u003eDouble\u003c/code\u003e, \u003ccode\u003eByte\u003c/code\u003e or \u003ccode\u003eShort\u003c/code\u003e and the Format\u0027s \u003ccode\u003eparseObject\u003c/code\u003e returns an instance of \u003ccode\u003eNumber\u003c/code\u003e, the corresponding instance of the value class will be created using the constructor appropriate for the primitive type the value class represents. For example: \u003ccode\u003esetValueClass(Integer.class)\u003c/code\u003e will cause the resulting value to be created via \u003ccode\u003eInteger.valueOf(((Number)formatter.parseObject(string)).intValue())\u003c/code\u003e. This is typically useful if you wish to set a min/max value as the various \u003ccode\u003eNumber\u003c/code\u003e implementations are generally not comparable to each other. This is also useful if for some reason you need a specific \u003ccode\u003eNumber\u003c/code\u003e implementation for your values. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}