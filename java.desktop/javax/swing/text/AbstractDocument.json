{
  "packageName": "javax.swing.text",
  "simpleName": "AbstractDocument",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.event.EventListenerList",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "listenerList",
      "comment": "The event listener list for the document.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "BAD_LOCATION",
      "comment": "Error message to indicate a bad location.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.AbstractDocument.BAD_LOCATION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ParagraphElementName",
      "comment": "Name of elements used to represent paragraphs",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.AbstractDocument.ParagraphElementName\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ContentElementName",
      "comment": "Name of elements used to represent content",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.AbstractDocument.ContentElementName\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SectionElementName",
      "comment": "Name of elements used to hold sections (lines/paragraphs).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.AbstractDocument.SectionElementName\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BidiElementName",
      "comment": "Name of elements used to hold a unidirectional run",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.AbstractDocument.BidiElementName\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ElementNameAttribute",
      "comment": "Name of the attribute used to specify element names.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.AbstractDocument.ElementNameAttribute\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Dictionary",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDocumentProperties",
      "comment": "Supports managing a set of properties. Callers can use the documentProperties dictionary to annotate the document with document-wide properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#setDocumentProperties(java.util.Dictionary)\"\u003e\u003ccode\u003esetDocumentProperties(java.util.Dictionary\u0026lt;java.lang.Object, java.lang.Object\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a non-\n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eDictionary\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Dictionary",
            "parameters": [
              {
                "name": "java.lang.Object",
                "type": "Class"
              },
              {
                "name": "java.lang.Object",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDocumentProperties",
      "comment": "Replaces the document properties dictionary for this document.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getDocumentProperties()\"\u003e\u003ccode\u003egetDocumentProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the new dictionary"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireInsertUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireChangedUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireRemoveUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.UndoableEditEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireUndoableEditUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listenerType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.util.EventListener",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListeners",
      "comment": "Returns an array of all the objects currently registered as FooListeners upon this document. FooListeners are registered using the addFooListener method. You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a document d for its document listeners with the following code: DocumentListener[] mls \u003d (DocumentListener[])(d.getListeners(DocumentListener.class)); If no such listeners exist, this method returns an empty array.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the listener type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getDocumentListeners()\"\u003e\u003ccode\u003egetDocumentListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getUndoableEditListeners()\"\u003e\u003ccode\u003egetUndoableEditListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerType\u003c/code\u003e - the type of listeners requested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerType\u003c/code\u003e doesn\u0027t specify a class or interface that implements \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "return": [
          "an array of all objects registered as \n\u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this component, or an empty array if no such listeners have been added"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAsynchronousLoadPriority",
      "comment": "Gets the asynchronous loading priority. If less than zero, the document should not be loaded asynchronously.",
      "tagMap": {
        "return": [
          "the asynchronous loading priority, or \n\u003ccode\u003e-1\u003c/code\u003e if the document should not be loaded asynchronously"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAsynchronousLoadPriority",
      "comment": "Sets the asynchronous loading priority.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the new asynchronous loading priority; a value less than zero indicates that the document should not be loaded asynchronously"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.DocumentFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDocumentFilter",
      "comment": "Sets the DocumentFilter. The DocumentFilter is passed insert and remove to conditionally allow inserting/deleting of the text. A null value indicates that no filtering will occur.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getDocumentFilter()\"\u003e\u003ccode\u003egetDocumentFilter()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - the \n\u003ccode\u003eDocumentFilter\u003c/code\u003e used to constrain text"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.DocumentFilter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDocumentFilter",
      "comment": "Returns the DocumentFilter that is responsible for filtering of insertion/removal. A null return value implies no filtering is to occur.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#setDocumentFilter(javax.swing.text.DocumentFilter)\"\u003e\u003ccode\u003esetDocumentFilter(javax.swing.text.DocumentFilter)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the DocumentFilter"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "render",
      "comment": "This allows the model to be safely rendered in the presence of currency, if the model supports being updated asynchronously. The given runnable will be executed in a way that allows it to safely read the model with no changes while the runnable is being executed. The runnable itself may not make any mutations. This is implemented to acquire a read lock for the duration of the runnables execution. There may be multiple runnables executing at the same time, and all writers will be blocked while there are active rendering runnables. If the runnable throws an exception, its lock will be safely released. There is no protection against a runnable that never exits, which will effectively leave the document locked for it\u0027s lifetime. If the given runnable attempts to make any mutations in this implementation, a deadlock will occur. There is no tracking of individual rendering threads to enable detecting this situation, but a subclass could incur the overhead of tracking them and throwing an error. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#render(java.lang.Runnable)\"\u003erender\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the renderer to execute"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLength",
      "comment": "Returns the length of the data. This is the number of characters of content that represents the users data.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getLength()\"\u003e\u003ccode\u003eDocument.getLength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getLength()\"\u003egetLength\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the length \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addDocumentListener",
      "comment": "Adds a document listener for notification of any changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#addDocumentListener(javax.swing.event.DocumentListener)\"\u003e\u003ccode\u003eDocument.addDocumentListener(javax.swing.event.DocumentListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#addDocumentListener(javax.swing.event.DocumentListener)\"\u003eaddDocumentListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eDocumentListener\u003c/code\u003e to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeDocumentListener",
      "comment": "Removes a document listener.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#removeDocumentListener(javax.swing.event.DocumentListener)\"\u003e\u003ccode\u003eDocument.removeDocumentListener(javax.swing.event.DocumentListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#removeDocumentListener(javax.swing.event.DocumentListener)\"\u003eremoveDocumentListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eDocumentListener\u003c/code\u003e to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.DocumentListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDocumentListeners",
      "comment": "Returns an array of all the document listeners registered on this document.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#addDocumentListener(javax.swing.event.DocumentListener)\"\u003e\u003ccode\u003eaddDocumentListener(javax.swing.event.DocumentListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#removeDocumentListener(javax.swing.event.DocumentListener)\"\u003e\u003ccode\u003eremoveDocumentListener(javax.swing.event.DocumentListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this document\u0027s \n\u003ccode\u003eDocumentListener\u003c/code\u003es or an empty array if no document listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.UndoableEditListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addUndoableEditListener",
      "comment": "Adds an undo listener for notification of any changes. Undo/Redo operations performed on the UndoableEdit will cause the appropriate DocumentEvent to be fired to keep the view(s) in sync with the model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#addUndoableEditListener(javax.swing.event.UndoableEditListener)\"\u003e\u003ccode\u003eDocument.addUndoableEditListener(javax.swing.event.UndoableEditListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#addUndoableEditListener(javax.swing.event.UndoableEditListener)\"\u003eaddUndoableEditListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eUndoableEditListener\u003c/code\u003e to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.UndoableEditListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeUndoableEditListener",
      "comment": "Removes an undo listener.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#removeDocumentListener(javax.swing.event.DocumentListener)\"\u003e\u003ccode\u003eDocument.removeDocumentListener(javax.swing.event.DocumentListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#removeUndoableEditListener(javax.swing.event.UndoableEditListener)\"\u003eremoveUndoableEditListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the \n\u003ccode\u003eUndoableEditListener\u003c/code\u003e to remove"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.UndoableEditListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUndoableEditListeners",
      "comment": "Returns an array of all the undoable edit listeners registered on this document.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#addUndoableEditListener(javax.swing.event.UndoableEditListener)\"\u003e\u003ccode\u003eaddUndoableEditListener(javax.swing.event.UndoableEditListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#removeUndoableEditListener(javax.swing.event.UndoableEditListener)\"\u003e\u003ccode\u003eremoveUndoableEditListener(javax.swing.event.UndoableEditListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this document\u0027s \n\u003ccode\u003eUndoableEditListener\u003c/code\u003es or an empty array if no undoable edit listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProperty",
      "comment": "A convenience method for looking up a property value. It is equivalent to:  getDocumentProperties().get(key);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getDocumentProperties()\"\u003e\u003ccode\u003egetDocumentProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getProperty(java.lang.Object)\"\u003egetProperty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e property key"
        ],
        "return": [
          "the value of this property or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "putProperty",
      "comment": "A convenience method for storing up a property value. It is equivalent to:  getDocumentProperties().put(key, value);\n If value is null this method will remove the property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getDocumentProperties()\"\u003e\u003ccode\u003egetDocumentProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#putProperty(java.lang.Object,java.lang.Object)\"\u003eputProperty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the non-\n\u003ccode\u003enull\u003c/code\u003e key",
          "\u003ccode\u003evalue\u003c/code\u003e - the property value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes some content from the document. Removing content causes a write lock to be held while the actual changes are taking place. Observers are notified of the change on the thread that called this method. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#remove(int,int)\"\u003e\u003ccode\u003eDocument.remove(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#remove(int,int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffs\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003elen\u003c/code\u003e - the number of characters to remove \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given remove position is not a valid position within the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Deletes the region of text from offset to offset + length, and replaces it with text. It is up to the implementation as to how this is implemented, some implementations may treat this as two distinct operations: a remove followed by an insert, others may treat the replace as one atomic operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - index of child element",
          "\u003ccode\u003elength\u003c/code\u003e - length of text to delete, may be 0 indicating don\u0027t delete anything",
          "\u003ccode\u003etext\u003c/code\u003e - text to insert, \n\u003ccode\u003enull\u003c/code\u003e indicates no text to insert",
          "\u003ccode\u003eattrs\u003c/code\u003e - AttributeSet indicating attributes of inserted text, \n\u003ccode\u003enull\u003c/code\u003e is legal, and typically treated as an empty attributeset, but exact interpretation is left to the subclass"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given position is not a valid position within the document"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertString",
      "comment": "Inserts some content into the document. Inserting content causes a write lock to be held while the actual changes are taking place, followed by notification to the observers on the thread that grabbed the write lock. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#insertString(int,java.lang.String,javax.swing.text.AttributeSet)\"\u003e\u003ccode\u003eDocument.insertString(int, java.lang.String, javax.swing.text.AttributeSet)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#insertString(int,java.lang.String,javax.swing.text.AttributeSet)\"\u003einsertString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffs\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003estr\u003c/code\u003e - the string to insert; does nothing with null/empty strings",
          "\u003ccode\u003ea\u003c/code\u003e - the attributes for the inserted content"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given insert position is not a valid position within the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Gets a sequence of text from the document.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getText(int,int)\"\u003e\u003ccode\u003eDocument.getText(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getText(int,int)\"\u003egetText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to retrieve \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the range given includes a position that is not a valid position within the document"
        ],
        "return": [
          "the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "txt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Fetches the text contained within the given portion of the document. If the partialReturn property on the txt parameter is false, the data returned in the Segment will be the entire length requested and may or may not be a copy depending upon how the data was stored. If the partialReturn property is true, only the amount of text that can be returned without creating a copy is returned. Using partial returns will give better performance for situations where large parts of the document are being scanned. The following is an example of using the partial return to access the entire document:    int nleft \u003d doc.getDocumentLength();\n   Segment text \u003d new Segment();\n   int offs \u003d 0;\n   text.setPartialReturn(true);\n   while (nleft \u003e 0) {\n       doc.getText(offs, nleft, text);\n       // do something with text\n       nleft -\u003d text.count;\n       offs +\u003d text.count;\n   }",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getText(int,int,javax.swing.text.Segment)\"\u003egetText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to retrieve \u0026gt;\u003d 0",
          "\u003ccode\u003etxt\u003c/code\u003e - the Segment object to retrieve the text into"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the range given includes a position that is not a valid position within the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Position",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createPosition",
      "comment": "Returns a position that will track change as the document is altered. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#createPosition(int)\"\u003e\u003ccode\u003eDocument.createPosition(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#createPosition(int)\"\u003ecreatePosition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffs\u003c/code\u003e - the position in the model \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Position",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getStartPosition",
      "comment": "Returns a position that represents the start of the document. The position returned can be counted on to track change and stay located at the beginning of the document.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getStartPosition()\"\u003egetStartPosition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Position",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getEndPosition",
      "comment": "Returns a position that represents the end of the document. The position returned can be counted on to track change and stay located at the end of the document.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getEndPosition()\"\u003egetEndPosition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRootElements",
      "comment": "Gets all root elements defined. Typically, there will only be one so the default implementation is to return the default root element.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getRootElements()\"\u003egetRootElements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the root element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDefaultRootElement",
      "comment": "Returns the root element that views should be based upon unless some other mechanism for assigning views to element structures is provided.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getDefaultRootElement()\"\u003e\u003ccode\u003eDocument.getDefaultRootElement()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getDefaultRootElement()\"\u003egetDefaultRootElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the root element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBidiRootElement",
      "comment": "Returns the root element of the bidirectional structure for this document. Its children represent character runs with a given Unicode bidi level.",
      "tagMap": {
        "return": [
          "the root element of the bidirectional structure for this document"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getParagraphElement",
      "comment": "Get the paragraph element containing the given position. Sub-classes must define for themselves what exactly constitutes a paragraph. They should keep in mind however that a paragraph should at least be the unit of text over which to run the Unicode bidirectional algorithm.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the starting offset \u0026gt;\u003d 0"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AbstractDocument$AttributeContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getAttributeContext",
      "comment": "Fetches the context for managing attributes. This method effectively establishes the strategy used for compressing AttributeSet information.",
      "tagMap": {
        "return": [
          "the context"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "chng"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertUpdate",
      "comment": "Updates document structure as a result of text insertion. This will happen within a write lock. If a subclass of this class reimplements this method, it should delegate to the superclass as well.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echng\u003c/code\u003e - a description of the change",
          "\u003ccode\u003eattr\u003c/code\u003e - the attributes for the change"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "chng"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "removeUpdate",
      "comment": "Updates any document structure as a result of text removal. This method is called before the text is actually removed from the Content. This will happen within a write lock. If a subclass of this class reimplements this method, it should delegate to the superclass as well.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echng\u003c/code\u003e - a description of the change"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "chng"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "postRemoveUpdate",
      "comment": "Updates any document structure as a result of text removal. This method is called after the text has been removed from the Content. This will happen within a write lock. If a subclass of this class reimplements this method, it should delegate to the superclass as well.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echng\u003c/code\u003e - a description of the change"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dump",
      "comment": "Gives a diagnostic dump.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the output stream"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AbstractDocument$Content",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getContent",
      "comment": "Gets the content for the document.",
      "tagMap": {
        "return": [
          "the content"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createLeafElement",
      "comment": "Creates a document leaf element. Hook through which elements are created to represent the document structure. Because this implementation keeps structure and content separate, elements grow automatically when content is extended so splits of existing elements follow. The document itself gets to decide how to generate elements to give flexibility in the type of elements used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the parent element",
          "\u003ccode\u003ea\u003c/code\u003e - the attributes for the element",
          "\u003ccode\u003ep0\u003c/code\u003e - the beginning of the range \u0026gt;\u003d 0",
          "\u003ccode\u003ep1\u003c/code\u003e - the end of the range \u0026gt;\u003d p0"
        ],
        "return": [
          "the new element"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createBranchElement",
      "comment": "Creates a document branch element, that can contain other elements.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the parent element",
          "\u003ccode\u003ea\u003c/code\u003e - the attributes"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getCurrentWriter",
      "comment": "Fetches the current writing thread if there is one. This can be used to distinguish whether a method is being called as part of an existing modification or if a lock needs to be acquired and a new transaction started.",
      "tagMap": {
        "return": [
          "the thread actively modifying the document or \n\u003ccode\u003enull\u003c/code\u003e if there are no modifications in progress"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "writeLock",
      "comment": "Acquires a lock to begin mutating the document this lock protects. There can be no writing, notification of changes, or reading going on in order to gain the lock. Additionally a thread is allowed to gain more than one writeLock, as long as it doesn\u0027t attempt to gain additional writeLocks from within document notification. Attempting to gain a writeLock from within a DocumentListener notification will result in an IllegalStateException. The ability to obtain more than one writeLock per thread allows subclasses to gain a writeLock, perform a number of operations, then release the lock. Calls to writeLock must be balanced with calls to writeUnlock, else the Document will be left in a locked state so that no reading or writing can be done.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - thrown on illegal lock attempt. If the document is implemented properly, this can only happen if a document listener attempts to mutate the document. This situation violates the bean event model where order of delivery is not guaranteed and all listeners should be notified before further mutations are allowed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "writeUnlock",
      "comment": "Releases a write lock previously obtained via writeLock. After decrementing the lock count if there are no outstanding locks this will allow a new writer, or readers.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#writeLock()\"\u003e\u003ccode\u003ewriteLock()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "readLock",
      "comment": "Acquires a lock to begin reading some state from the document. There can be multiple readers at the same time. Writing blocks the readers until notification of the change to the listeners has been completed. This method should be used very carefully to avoid unintended compromise of the document. It should always be balanced with a readUnlock.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#readUnlock()\"\u003e\u003ccode\u003ereadUnlock()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "readUnlock",
      "comment": "Does a read unlock. This signals that one of the readers is done. If there are no more readers then writing can begin again. This should be balanced with a readLock, and should occur in a finally statement so that the balance is guaranteed. The following is an example. \n     readLock();\n     try {\n         // do something\n     } finally {\n         readUnlock();\n     }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#readLock()\"\u003e\u003ccode\u003ereadLock()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$Content",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new AbstractDocument, wrapped around some specified content storage mechanism.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the content"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$Content",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$AttributeContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new AbstractDocument, wrapped around some specified content storage mechanism.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the content",
          "\u003ccode\u003econtext\u003c/code\u003e - the attribute context"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.text.AbstractDocument$AbstractElement",
    "javax.swing.text.AbstractDocument$AttributeContext",
    "javax.swing.text.AbstractDocument$ElementEdit",
    "javax.swing.text.AbstractDocument$BranchElement",
    "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
    "javax.swing.text.AbstractDocument$LeafElement",
    "javax.swing.text.AbstractDocument$Content"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.text.AbstractDocument",
  "comment": "An implementation of the document interface to serve as a basis for implementing various kinds of documents. At this level there is very little policy, so there is a corresponding increase in difficulty of use. \n\u003cp\u003e This class implements a locking mechanism for the document. It allows multiple readers or one writer, and writers must wait until all observers of the document have been notified of a previous change before beginning another mutation to the document. The read lock is acquired and released using the \u003ccode\u003erender\u003c/code\u003e method. A write lock is acquired by the methods that mutate the document, and are held for the duration of the method call. Notification is done on the thread that produced the mutation, and the thread has full read access to the document for the duration of the notification, but other readers are kept out until the notification has finished. The notification is a beans event notification which does not allow any further mutations until all listeners have been notified. \u003c/p\u003e\n\u003cp\u003e Any models subclassed from this class and used in conjunction with a text component that has a look and feel implementation that is derived from BasicTextUI may be safely updated asynchronously, because all access to the View hierarchy is serialized by BasicTextUI if the document is of type \u003ccode\u003eAbstractDocument\u003c/code\u003e. The locking assumes that an independent thread will access the View hierarchy only from the DocumentListener methods, and that there will be only one event thread active at a time. \u003c/p\u003e\n\u003cp\u003e If concurrency support is desired, there are the following additional implications. The code path for any DocumentListener implementation and any UndoListener implementation must be threadsafe, and not access the component lock if trying to be safe from deadlocks. The \u003ccode\u003erepaint\u003c/code\u003e and \u003ccode\u003erevalidate\u003c/code\u003e methods on JComponent are safe. \u003c/p\u003e\n\u003cp\u003e AbstractDocument models an implied break at the end of the document. Among other things this allows you to position the caret after the last character. As a result of this, \u003ccode\u003egetLength\u003c/code\u003e returns one less than the length of the Content. If you create your own Content, be sure and initialize it to have an additional character. Refer to StringContent and GapContent for examples of this. Another implication of this is that Elements that model the implied end character will have an endOffset \u003d\u003d (getLength() + 1). For example, in DefaultStyledDocument \u003ccode\u003egetParagraphElement(getLength()).getEndOffset() \u003d\u003d getLength() + 1 \u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}