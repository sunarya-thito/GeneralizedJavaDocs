{
  "packageName": "javax.swing.text",
  "simpleName": "BoxView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.CompositeView",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAxis",
      "comment": "Fetches the tile axis property. This is the axis along which the child views are tiled.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the major axis of the box, either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAxis",
      "comment": "Sets the tile axis property. This is the axis along which the child views are tiled.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layoutChanged",
      "comment": "Invalidates the layout along an axis. This happens automatically if the preferences have changed for any of the child views. In some cases the layout may need to be recalculated when the preferences have not changed. The layout can be marked as invalid by calling this method. The layout will be updated the next time the setSize method is called on this view (typically in paint).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isLayoutValid",
      "comment": "Determines if the layout is valid along the given axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "if the layout is valid along the given axis"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "alloc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paintChild",
      "comment": "Paints a child. By default that is all it does, but a subclass can use this to paint things relative to the child.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context",
          "\u003ccode\u003ealloc\u003c/code\u003e - the allocated region to paint into",
          "\u003ccode\u003eindex\u003c/code\u003e - the child index, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026lt; getViewCount()"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "elems",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Invalidates the layout and resizes the cache of requests/allocations. The child allocations can still be accessed for the old layout, but the new children will have an offset and span of 0.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#replace(int,int,javax.swing.text.View%5B%5D)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the starting index into the child views to insert the new views; this should be a value \u0026gt;\u003d 0 and \u0026lt;\u003d getViewCount",
          "\u003ccode\u003elength\u003c/code\u003e - the number of existing child views to remove; This should be a value \u0026gt;\u003d 0 and \u0026lt;\u003d (getViewCount() - offset)",
          "\u003ccode\u003eelems\u003c/code\u003e - the child views to add; this value can be \n\u003ccode\u003enull\u003c/code\u003eto indicate no children are being added (useful to remove)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.DocumentEvent$ElementChange",
            "type": "Class"
          },
          "name": "ec",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "name": "f",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "forwardUpdate",
      "comment": "Forwards the given DocumentEvent to the child views that need to be notified of the change to the model. If a child changed its requirements and the allocation was valid prior to forwarding the portion of the box from the starting child to the end of the box will be repainted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#forwardUpdate(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003eforwardUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eec\u003c/code\u003e - changes to the element this view is responsible for (may be \n\u003ccode\u003enull\u003c/code\u003e if there were no changes)",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "name": "child",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferenceChanged",
      "comment": "This is called by a child to indicate its preferred span has changed. This is implemented to throw away cached layout information so that new calculations will be done the next time the children need an allocation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#revalidate()\"\u003e\u003ccode\u003eJComponent.revalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#preferenceChanged(javax.swing.text.View,boolean,boolean)\"\u003epreferenceChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echild\u003c/code\u003e - the child view",
          "\u003ccode\u003ewidth\u003c/code\u003e - true if the width preference should change",
          "\u003ccode\u003eheight\u003c/code\u003e - true if the height preference should change"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResizeWeight",
      "comment": "Gets the resize weight. A value of 0 or less is not resizable.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getResizeWeight(int)\"\u003egetResizeWeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis"
        ],
        "return": [
          "the weight"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSize",
      "comment": "Sets the size of the view. This should cause layout of the view if the view caches any layout information. This is implemented to call the layout method with the sizes inside of the insets.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#setSize(float,float)\"\u003esetSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width \u0026gt;\u003d 0",
          "\u003ccode\u003eheight\u003c/code\u003e - the height \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "allocation",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Renders the BoxView using the given rendering surface and area on that surface. Only the children that intersect the clip bounds of the given Graphics will be rendered.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003e\u003ccode\u003eView.paint(java.awt.Graphics, java.awt.Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the rendering surface to use",
          "\u003ccode\u003eallocation\u003c/code\u003e - the allocated region to render into"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildAllocation",
      "comment": "Fetches the allocation for the given child view. This enables finding out where various views are located. This is implemented to return null if the layout is invalid, otherwise the superclass behavior is executed.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#getChildAllocation(int,java.awt.Shape)\"\u003egetChildAllocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the child, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026gt; getViewCount()",
          "\u003ccode\u003ea\u003c/code\u003e - the allocation to this view"
        ],
        "return": [
          "the allocation to the child; or \n\u003ccode\u003enull\u003c/code\u003e if \n\u003ccode\u003ea\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e; or \n\u003ccode\u003enull\u003c/code\u003e if the layout is invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "pos",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it. This makes sure the allocation is valid before calling the superclass.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003e\u003ccode\u003eView.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003emodelToView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003eb\u003c/code\u003e - a bias value of either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the bounding box of the given position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "bias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Provides a mapping from the view coordinate space to the logical coordinate space of the model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eView.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003eviewToModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - x coordinate of the view location to convert \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - y coordinate of the view location to convert \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003ebias\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e"
        ],
        "return": [
          "the location within the model that best represents the given point in the view \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlignment",
      "comment": "Determines the desired alignment for this view along an axis. This is implemented to give the total alignment needed to position the children with the alignment points lined up along the axis orthogonal to the axis that is being tiled. The axis being tiled will request to be centered (i.e. 0.5f).",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getAlignment(int)\"\u003egetAlignment\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis"
        ],
        "return": [
          "the desired alignment \u0026gt;\u003d 0.0f \u0026amp;\u0026amp; \u0026lt;\u003d 1.0f; this should be a value between 0.0 and 1.0 where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin; an alignment of 0.5 would be the center of the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSpan",
      "comment": "Determines the preferred span for this view along an axis.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003egetPreferredSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis type"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSpan",
      "comment": "Determines the minimum span for this view along an axis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003eView.getPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getMinimumSpan(int)\"\u003egetMinimumSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis type"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSpan",
      "comment": "Determines the maximum span for this view along an axis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003eView.getPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getMaximumSpan(int)\"\u003egetMaximumSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis type"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0; typically the view is told to render into the span that is returned, although there is no guarantee; the parent may choose to resize or break the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isAllocationValid",
      "comment": "Are the allocations for the children still valid?",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if allocations still valid"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "innerAlloc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isBefore",
      "comment": "Determines if a point falls before an allocated region.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#isBefore(int,int,java.awt.Rectangle)\"\u003eisBefore\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003einnerAlloc\u003c/code\u003e - the allocated region; this is the area inside of the insets"
        ],
        "return": [
          "true if the point lies before the region else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "innerAlloc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isAfter",
      "comment": "Determines if a point falls after an allocated region.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#isAfter(int,int,java.awt.Rectangle)\"\u003eisAfter\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003einnerAlloc\u003c/code\u003e - the allocated region; this is the area inside of the insets"
        ],
        "return": [
          "true if the point lies after the region else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "alloc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getViewAtPoint",
      "comment": "Fetches the child view at the given coordinates.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#getViewAtPoint(int,int,java.awt.Rectangle)\"\u003egetViewAtPoint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ealloc\u003c/code\u003e - the parents inner allocation on entry, which should be changed to the child\u0027s allocation on exit"
        ],
        "return": [
          "the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "alloc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "childAllocation",
      "comment": "Allocates a region for a child view.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#childAllocation(int,java.awt.Rectangle)\"\u003echildAllocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the child view to allocate, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026lt; getViewCount()",
          "\u003ccode\u003ealloc\u003c/code\u003e - the allocated region"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "layout",
      "comment": "Perform layout on the box",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width (inside of the insets) \u0026gt;\u003d 0",
          "\u003ccode\u003eheight\u003c/code\u003e - the height (inside of the insets) \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWidth",
      "comment": "Returns the current width of the box. This is the width that it was last allocated.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current width of the box"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHeight",
      "comment": "Returns the current height of the box. This is the height that it was last allocated.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current height of the box"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "targetSpan",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "offsets",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "spans",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "layoutMajorAxis",
      "comment": "Performs layout for the major axis of the box (i.e. the axis that it represents). The results of the layout (the offset and span for each children) are placed in the given arrays which represent the allocations to the children along the major axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etargetSpan\u003c/code\u003e - the total span given to the view, which would be used to layout the children",
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being layed out",
          "\u003ccode\u003eoffsets\u003c/code\u003e - the offsets from the origin of the view for each of the child views; this is a return value and is filled in by the implementation of this method",
          "\u003ccode\u003espans\u003c/code\u003e - the span of each child view; this is a return value and is filled in by the implementation of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "targetSpan",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "offsets",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "spans",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "layoutMinorAxis",
      "comment": "Performs layout for the minor axis of the box (i.e. the axis orthogonal to the axis that it represents). The results of the layout (the offset and span for each children) are placed in the given arrays which represent the allocations to the children along the minor axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etargetSpan\u003c/code\u003e - the total span given to the view, which would be used to layout the children",
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being layed out",
          "\u003ccode\u003eoffsets\u003c/code\u003e - the offsets from the origin of the view for each of the child views; this is a return value and is filled in by the implementation of this method",
          "\u003ccode\u003espans\u003c/code\u003e - the span of each child view; this is a return value and is filled in by the implementation of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.SizeRequirements",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.SizeRequirements",
            "type": "Class"
          },
          "name": "r",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "calculateMajorAxisRequirements",
      "comment": "Calculates the size requirements for the major axis axis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SizeRequirements.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSizeRequirements\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object; if \n\u003ccode\u003enull\u003c/code\u003e one will be created"
        ],
        "return": [
          "the newly initialized \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.SizeRequirements",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.SizeRequirements",
            "type": "Class"
          },
          "name": "r",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "calculateMinorAxisRequirements",
      "comment": "Calculates the size requirements for the minor axis axis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SizeRequirements.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSizeRequirements\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object; if \n\u003ccode\u003enull\u003c/code\u003e one will be created"
        ],
        "return": [
          "the newly initialized \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "targetSpan",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "offsets",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "spans",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "baselineLayout",
      "comment": "Computes the location and extent of each child view in this BoxView given the targetSpan, which is the width (or height) of the region we have to work with.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etargetSpan\u003c/code\u003e - the total span given to the view, which would be used to layout the children",
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied, either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e",
          "\u003ccode\u003eoffsets\u003c/code\u003e - an empty array filled by this method with values specifying the location of each child view",
          "\u003ccode\u003espans\u003c/code\u003e - an empty array filled by this method with values specifying the extent of each child view"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.SizeRequirements",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.SizeRequirements",
            "type": "Class"
          },
          "name": "r",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "baselineRequirements",
      "comment": "Calculates the size requirements for this BoxView by examining the size of each child view.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object; if \n\u003ccode\u003enull\u003c/code\u003e one will be created"
        ],
        "return": [
          "the newly initialized \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "childIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getOffset",
      "comment": "Fetches the offset of a particular child\u0027s current layout.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied",
          "\u003ccode\u003echildIndex\u003c/code\u003e - the index of the requested child"
        ],
        "return": [
          "the offset (location) for the specified child"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "childIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getSpan",
      "comment": "Fetches the span of a particular child\u0027s current layout.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied",
          "\u003ccode\u003echildIndex\u003c/code\u003e - the index of the requested child"
        ],
        "return": [
          "the span (width or height) of the specified child"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "position",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "name": "bias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "flipEastAndWestAtEnds",
      "comment": "Determines in which direction the next view lays. Consider the View at index n. Typically the Views are layed out from left to right, so that the View to the EAST will be at index n + 1, and the View to the WEST will be at index n - 1. In certain situations, such as with bidirectional text, it is possible that the View to EAST is not at index n + 1, but rather at index n - 1, or that the View to the WEST is not at index n - 1, but index n + 1. In this case this method would return true, indicating the Views are layed out in descending order. Otherwise the method would return false indicating the Views are layed out in ascending order. If the receiver is laying its Views along the Y_AXIS, this will return the value from invoking the same method on the View responsible for rendering position and bias. Otherwise this will return false.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#flipEastAndWestAtEnds(int,javax.swing.text.Position.Bias)\"\u003eflipEastAndWestAtEnds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - position into the model",
          "\u003ccode\u003ebias\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e"
        ],
        "return": [
          "true if the \n\u003ccode\u003eView\u003c/code\u003es surrounding the \n\u003ccode\u003eView\u003c/code\u003e responding for rendering \n\u003ccode\u003eposition\u003c/code\u003e and \n\u003ccode\u003ebias\u003c/code\u003e are layed out in descending order; otherwise false"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "elem",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "axis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BoxView.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element this view is responsible for",
          "\u003ccode\u003eaxis\u003c/code\u003e - either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.BoxView",
  "annotations": [],
  "tagMap": {}
}