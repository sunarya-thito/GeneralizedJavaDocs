{
  "packageName": "javax.swing.text",
  "simpleName": "ElementIterator",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Clones the ElementIterator.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a cloned \n\u003ccode\u003eElementIterator\u003c/code\u003e Object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "first",
      "comment": "Fetches the first element.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "depth",
      "comment": "Fetches the current depth of element tree.",
      "tagMap": {
        "return": [
          "the depth"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "current",
      "comment": "Fetches the current Element.",
      "tagMap": {
        "return": [
          "element on top of the stack or \n\u003ccode\u003enull\u003c/code\u003e if the root element is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "next",
      "comment": "Fetches the next Element. The strategy used to locate the next element is a depth-first search.",
      "tagMap": {
        "return": [
          "the next element or \n\u003ccode\u003enull\u003c/code\u003e at the end of the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "previous",
      "comment": "Fetches the previous Element. If however the current element is the last element, or the current element is null, then null is returned.",
      "tagMap": {
        "return": [
          "previous \n\u003ccode\u003eElement\u003c/code\u003e if available"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Document",
            "type": "Class"
          },
          "field": {
            "name": "document"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ElementIterator. The root element is taken to get the default root element of the document.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edocument\u003c/code\u003e - a \n\u003ccode\u003eDocument\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "root"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ElementIterator.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - the root \n\u003ccode\u003eElement\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.ElementIterator",
  "comment": "\u003ccode\u003eElementIterator\u003c/code\u003e, as the name suggests, iterates over the \n\u003ccode\u003eElement\u003c/code\u003e tree. The constructor can be invoked with either \n\u003ccode\u003eDocument\u003c/code\u003e or an \n\u003ccode\u003eElement\u003c/code\u003e as an argument. If the constructor is invoked with a \n\u003ccode\u003eDocument\u003c/code\u003e as an argument then the root of the iteration is the return value of \n\u003ccode\u003edocument.getDefaultRootElement()\u003c/code\u003e. \n\u003cp\u003e The iteration happens in a depth-first manner. In terms of how boundary conditions are handled: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eif \u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e is called before \u003ca href\u003d\"#first()\"\u003e\u003ccode\u003efirst()\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#current()\"\u003e\u003ccode\u003ecurrent()\u003c/code\u003e\u003c/a\u003e, the root will be returned \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e returns \u003ccode\u003enull\u003c/code\u003e to indicate the end of the list \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#previous()\"\u003e\u003ccode\u003eprevious()\u003c/code\u003e\u003c/a\u003e returns \u003ccode\u003enull\u003c/code\u003e when the current element is the root or \u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e has returned \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eElementIterator\u003c/code\u003e does no locking of the \u003ccode\u003eElement\u003c/code\u003e tree. This means that it does not track any changes. It is the responsibility of the user of this class, to ensure that no changes happen during element iteration. \u003c/p\u003e\n\u003cp\u003e Simple usage example: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublic void iterate() {\n      ElementIterator it \u003d new ElementIterator(root);\n      Element elem;\n      while (true) {\n          if ((elem \u003d it.next()) !\u003d null) {\n              // process element\n              System.out.println(\"elem: \" + elem.getName());\n          } else {\n              break;\n          }\n      }\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}