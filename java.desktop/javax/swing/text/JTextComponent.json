{
  "packageName": "javax.swing.text",
  "simpleName": "JTextComponent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FOCUS_ACCELERATOR_KEY",
      "comment": "The bound property name for the focus accelerator.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.JTextComponent.FOCUS_ACCELERATOR_KEY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_KEYMAP",
      "comment": "The default keymap that will be shared by all JTextComponent instances unless they have had a different keymap set.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.JTextComponent.DEFAULT_KEYMAP\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.plaf.TextUI",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUI",
      "comment": "Fetches the user-interface factory for this text-oriented editor.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUI()\"\u003egetUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.plaf.TextUI",
            "type": "Class"
          },
          "field": {
            "name": "ui"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUI",
      "comment": "Sets the user-interface factory for this text-oriented editor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eui\u003c/code\u003e - the factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "updateUI",
      "comment": "Reloads the pluggable UI. The key used to fetch the new interface is getUIClassID(). The type of the UI is TextUI. invalidate is called after setting the UI.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setUI(javax.swing.plaf.ComponentUI)\"\u003e\u003ccode\u003eJComponent.setUI(javax.swing.plaf.ComponentUI)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getLookAndFeel()\"\u003e\u003ccode\u003eUIManager.getLookAndFeel()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIManager.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIManager.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#updateUI()\"\u003eupdateUI\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.CaretListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addCaretListener",
      "comment": "Adds a caret listener for notification of any changes to the caret.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CaretEvent.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eCaretEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.CaretListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeCaretListener",
      "comment": "Removes a caret listener.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CaretEvent.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eCaretEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.event.CaretListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCaretListeners",
      "comment": "Returns an array of all the caret listeners registered on this text component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#addCaretListener(javax.swing.event.CaretListener)\"\u003e\u003ccode\u003eaddCaretListener(javax.swing.event.CaretListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#removeCaretListener(javax.swing.event.CaretListener)\"\u003e\u003ccode\u003eremoveCaretListener(javax.swing.event.CaretListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this component\u0027s \n\u003ccode\u003eCaretListener\u003c/code\u003es or an empty array if no caret listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.CaretEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireCaretUpdate",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method. The listener list is processed in a last-to-first manner.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Document",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDocument",
      "comment": "Associates the editor with a text document. The currently registered factory is used to build a view for the document, which gets displayed by the editor after revalidation. A PropertyChange event (\"document\") is propagated to each listener.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "the text document model"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDocument()\"\u003e\u003ccode\u003egetDocument()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the document to display/edit"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Document",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDocument",
      "comment": "Fetches the model associated with the editor. This is primarily for the UI to get at the minimal amount of state required to be a text editor. Subclasses will return the actual type of the model which will typically be something that extends Document.",
      "tagMap": {
        "return": [
          "the model"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActions",
      "comment": "Fetches the command list for the editor. This is the list of commands supported by the plugged-in UI augmented by the collection of commands that the editor itself supports. These are useful for binding to events, such as in a keymap.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the command list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Insets",
            "type": "Class"
          },
          "field": {
            "name": "m"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMargin",
      "comment": "Sets margin space between the text component\u0027s border and its text. The text component\u0027s default Border object will use this value to create the proper margin. However, if a non-default border is set on the text component, it is that Border object\u0027s responsibility to create the appropriate margin space (else this property will effectively be ignored). This causes a redraw of the component. A PropertyChange event (\"margin\") is sent to all listeners.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "desired space between the border and text area"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the space between the border and the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMargin",
      "comment": "Returns the margin between the text component\u0027s border and its text.",
      "tagMap": {
        "return": [
          "the margin"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.NavigationFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNavigationFilter",
      "comment": "Sets the NavigationFilter. NavigationFilter is used by DefaultCaret and the default cursor movement actions as a way to restrict the cursor movement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - the filter"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.NavigationFilter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNavigationFilter",
      "comment": "Returns the NavigationFilter. NavigationFilter is used by DefaultCaret and the default cursor movement actions as a way to restrict the cursor movement. A null return value implies the cursor movement and selection should not be restricted.",
      "tagMap": {
        "return": [
          "the NavigationFilter"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Caret",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCaret",
      "comment": "Fetches the caret that allows text-oriented navigation over the view.",
      "tagMap": {
        "return": [
          "the caret"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Caret",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCaret",
      "comment": "Sets the caret to be used. By default this will be set by the UI that gets installed. This can be changed to a custom caret if desired. Setting the caret results in a PropertyChange event (\"caret\") being fired.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "the caret used to select/navigate"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getCaret()\"\u003e\u003ccode\u003egetCaret()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the caret"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Highlighter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHighlighter",
      "comment": "Fetches the object responsible for making highlights.",
      "tagMap": {
        "return": [
          "the highlighter"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Highlighter",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHighlighter",
      "comment": "Sets the highlighter to be used. By default this will be set by the UI that gets installed. This can be changed to a custom highlighter if desired. The highlighter can be set to null to disable it. A PropertyChange event (\"highlighter\") is fired when a new highlighter is installed.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "object responsible for background highlights"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getHighlighter()\"\u003e\u003ccode\u003egetHighlighter()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eh\u003c/code\u003e - the highlighter"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Keymap",
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setKeymap",
      "comment": "Sets the keymap to use for binding events to actions. Setting to null effectively disables keyboard input. A PropertyChange event (\"keymap\") is fired when a new keymap is installed.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "set of key event to action bindings to use"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getKeymap()\"\u003e\u003ccode\u003egetKeymap()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - the keymap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDragEnabled",
      "comment": "Turns on or off automatic drag handling. In order to enable automatic drag handling, this property should be set to true, and the component\u0027s TransferHandler needs to be non-null. The default value of the dragEnabled property is false. The job of honoring this property, and recognizing a user drag gesture, lies with the look and feel implementation, and in particular, the component\u0027s TextUI. When automatic drag handling is enabled, most look and feels (including those that subclass BasicLookAndFeel) begin a drag and drop operation whenever the user presses the mouse button over a selection and then moves the mouse a few pixels. Setting this property to true can therefore have a subtle effect on how selections behave. If a look and feel is used that ignores this property, you can still begin a drag and drop operation by calling exportAsDrag on the component\u0027s TransferHandler.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "determines whether automatic drag handling is enabled"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDragEnabled()\"\u003e\u003ccode\u003egetDragEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - whether or not to enable automatic drag handling"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e and \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragEnabled",
      "comment": "Returns whether or not automatic drag handling is enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDragEnabled(boolean)\"\u003e\u003ccode\u003esetDragEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value of the \n\u003ccode\u003edragEnabled\u003c/code\u003e property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.DropMode",
            "type": "Class"
          },
          "field": {
            "name": "dropMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setDropMode",
      "comment": "Sets the drop mode for this component. For backward compatibility, the default for this property is DropMode.USE_SELECTION. Usage of DropMode.INSERT is recommended, however, for an improved user experience. It offers similar behavior of dropping between text locations, but does so without affecting the actual text selection and caret location. JTextComponents support the following drop modes: DropMode.USE_SELECTION DropMode.INSERT The drop mode is only meaningful if this component has a TransferHandler that accepts drops.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDropMode()\"\u003e\u003ccode\u003egetDropMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDropLocation()\"\u003e\u003ccode\u003egetDropLocation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setTransferHandler(javax.swing.TransferHandler)\"\u003e\u003ccode\u003eJComponent.setTransferHandler(javax.swing.TransferHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eTransferHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edropMode\u003c/code\u003e - the drop mode to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the drop mode is unsupported or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.DropMode",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropMode",
      "comment": "Returns the drop mode for this component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop mode for this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.JTextComponent$DropLocation",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDropLocation",
      "comment": "Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown. This method is not meant for querying the drop location from a TransferHandler, as the drop location is only set after the TransferHandler\u0027s canImport has returned and has allowed for the location to be shown. When this property changes, a property change event with name \"dropLocation\" is fired by the component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDropMode(javax.swing.DropMode)\"\u003e\u003ccode\u003esetDropMode(javax.swing.DropMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/TransferHandler.html#canImport(javax.swing.TransferHandler.TransferSupport)\"\u003e\u003ccode\u003eTransferHandler.canImport(TransferHandler.TransferSupport)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the drop location"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Keymap",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeymap",
      "comment": "Fetches the keymap currently active in this text component.",
      "tagMap": {
        "return": [
          "the keymap"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Keymap",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Keymap",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addKeymap",
      "comment": "Adds a new keymap into the keymap hierarchy. Keymap bindings resolve from bottom up so an attribute specified in a child will override an attribute specified in the parent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the keymap (must be unique within the collection of named keymaps in the document); the name may be \n\u003ccode\u003enull\u003c/code\u003e if the keymap is unnamed, but the caller is responsible for managing the reference returned as an unnamed keymap can\u0027t be fetched by name",
          "\u003ccode\u003eparent\u003c/code\u003e - the parent keymap; this may be \n\u003ccode\u003enull\u003c/code\u003e if unspecified bindings need not be resolved in some other keymap"
        ],
        "return": [
          "the keymap"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Keymap",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "removeKeymap",
      "comment": "Removes a named keymap previously added to the document. Keymaps with null names may not be removed in this way.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the keymap to remove"
        ],
        "return": [
          "the keymap that was removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Keymap",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getKeymap",
      "comment": "Fetches a named keymap previously added to the document. This does not work with null-named keymaps.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the name of the keymap"
        ],
        "return": [
          "the keymap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Keymap",
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.JTextComponent$KeyBinding",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bindings"
          }
        },
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadKeymap",
      "comment": "Loads a keymap with a bunch of bindings. This can be used to take a static table of definitions and load them into some keymap. The following example illustrates an example of binding some keys to the cut, copy, and paste actions associated with a JTextComponent. A code fragment to accomplish this might look as follows: \n\n   static final JTextComponent.KeyBinding[] defaultBindings \u003d {\n     new JTextComponent.KeyBinding(\n       KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),\n       DefaultEditorKit.copyAction),\n     new JTextComponent.KeyBinding(\n       KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),\n       DefaultEditorKit.pasteAction),\n     new JTextComponent.KeyBinding(\n       KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),\n       DefaultEditorKit.cutAction),\n   };\n\n   JTextComponent c \u003d new JTextPane();\n   Keymap k \u003d c.getKeymap();\n   JTextComponent.loadKeymap(k, defaultBindings, c.getActions());\n\n The sets of bindings and actions may be empty but must be non-null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - the keymap",
          "\u003ccode\u003ebindings\u003c/code\u003e - the bindings",
          "\u003ccode\u003eactions\u003c/code\u003e - the set of actions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCaretColor",
      "comment": "Fetches the current color used to render the caret.",
      "tagMap": {
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCaretColor",
      "comment": "Sets the current color used to render the caret. Setting to null effectively restores the default color. Setting the color results in a PropertyChange event (\"caretColor\") being fired.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "the color used to render the caret"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getCaretColor()\"\u003e\u003ccode\u003egetCaretColor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionColor",
      "comment": "Fetches the current color used to render the selection.",
      "tagMap": {
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionColor",
      "comment": "Sets the current color used to render the selection. Setting the color to null is the same as setting Color.white. Setting the color results in a PropertyChange event (\"selectionColor\").",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "color used to render selection background"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getSelectionColor()\"\u003e\u003ccode\u003egetSelectionColor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedTextColor",
      "comment": "Fetches the current color used to render the selected text.",
      "tagMap": {
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectedTextColor",
      "comment": "Sets the current color used to render the selected text. Setting the color to null is the same as Color.black. Setting the color results in a PropertyChange event (\"selectedTextColor\") being fired.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "color used to render selected text"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getSelectedTextColor()\"\u003e\u003ccode\u003egetSelectedTextColor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisabledTextColor",
      "comment": "Fetches the current color used to render the disabled text.",
      "tagMap": {
        "return": [
          "the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisabledTextColor",
      "comment": "Sets the current color used to render the disabled text. Setting the color fires off a PropertyChange event (\"disabledTextColor\").",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "escription",
              "value": "color used to render disabled text"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDisabledTextColor()\"\u003e\u003ccode\u003egetDisabledTextColor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "content"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replaceSelection",
      "comment": "Replaces the currently selected content with new content represented by the given string. If there is no selection this amounts to an insert of the given text. If there is no replacement text this amounts to a removal of the current selection. This is the method that is used by the default implementation of the action for inserting content that gets bound to the keymap actions.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the content to replace the selection with"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Fetches a portion of the text represented by the component. Returns an empty string if length is 0.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset ≥ 0",
          "\u003ccode\u003elen\u003c/code\u003e - the length ≥ 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the offset or length are invalid"
        ],
        "return": [
          "the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Converts the given location in the model to a place in the view coordinate system. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized). The component does not have to be visible or painted.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#modelToView(javax.swing.text.JTextComponent,int)\"\u003e\u003ccode\u003eTextUI.modelToView(javax.swing.text.JTextComponent, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position ≥ 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the coordinates as a rectangle, with (r.x, r.y) as the location in the coordinate system, or null if the component does not yet have a positive size."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView2D",
      "comment": "Converts the given location in the model to a place in the view coordinate system. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized). The component does not have to be visible or painted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#modelToView2D(javax.swing.text.JTextComponent,int,javax.swing.text.Position.Bias)\"\u003e\u003ccode\u003eTextUI.modelToView2D(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the coordinates as a rectangle, with (r.x, r.y) as the location in the coordinate system, or null if the component does not yet have a positive size."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "pt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized). The component does not have to be visible or painted.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#viewToModel(javax.swing.text.JTextComponent,java.awt.Point)\"\u003e\u003ccode\u003eTextUI.viewToModel(javax.swing.text.JTextComponent, java.awt.Point)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ept\u003c/code\u003e - the location in the view to translate"
        ],
        "return": [
          "the offset ≥ 0 from the start of the document, or -1 if the component does not yet have a positive size."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "pt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel2D",
      "comment": "Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized). The component does not have to be visible or painted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#viewToModel2D(javax.swing.text.JTextComponent,java.awt.geom.Point2D,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eTextUI.viewToModel2D(javax.swing.text.JTextComponent, java.awt.geom.Point2D, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ept\u003c/code\u003e - the location in the view to translate"
        ],
        "return": [
          "the offset \n\u003ccode\u003e\u0026gt;\u003d 0\u003c/code\u003e from the start of the document, or \n\u003ccode\u003e-1\u003c/code\u003e if the component does not yet have a positive size."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "cut",
      "comment": "Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model. The current selection is reset. Does nothing for null selections.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemClipboard()\"\u003e\u003ccode\u003eToolkit.getSystemClipboard()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html\" title\u003d\"class in java.awt.datatransfer\"\u003e\u003ccode\u003eClipboard\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "copy",
      "comment": "Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model. The current selection remains intact. Does nothing for null selections.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemClipboard()\"\u003e\u003ccode\u003eToolkit.getSystemClipboard()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html\" title\u003d\"class in java.awt.datatransfer\"\u003e\u003ccode\u003eClipboard\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paste",
      "comment": "Transfers the contents of the system clipboard into the associated text model. If there is a selection in the associated view, it is replaced with the contents of the clipboard. If there is no selection, the clipboard contents are inserted in front of the current insert position in the associated view. If the clipboard is empty, does nothing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#replaceSelection(java.lang.String)\"\u003e\u003ccode\u003ereplaceSelection(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemClipboard()\"\u003e\u003ccode\u003eToolkit.getSystemClipboard()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html\" title\u003d\"class in java.awt.datatransfer\"\u003e\u003ccode\u003eClipboard\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "moveCaretPosition",
      "comment": "Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called. This forms a selection. If the document is null, does nothing. The position must be between 0 and the length of the component\u0027s text or else an exception is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setCaretPosition(int)\"\u003e\u003ccode\u003esetCaretPosition(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value supplied for \n\u003ccode\u003eposition\u003c/code\u003e is less than zero or greater than the component\u0027s text length"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "aKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFocusAccelerator",
      "comment": "Sets the key accelerator that will cause the receiving text component to get the focus. The accelerator will be the key combination of the platform-specific modifier key and the character given (converted to upper case). For example, the ALT key is used as a modifier on Windows and the CTRL+ALT combination is used on Mac. By default, there is no focus accelerator key. Any previous key accelerator setting will be superseded. A \u0027\\0\u0027 key setting will be registered, and has the effect of turning off the focus accelerator. When the new key is set, a PropertyChange event (FOCUS_ACCELERATOR_KEY) will be fired.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "accelerator character used to grab focus"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getFocusAccelerator()\"\u003e\u003ccode\u003egetFocusAccelerator()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaKey\u003c/code\u003e - the key"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFocusAccelerator",
      "comment": "Returns the key accelerator that will cause the receiving text component to get the focus. Return \u0027\\0\u0027 if no focus accelerator has been set.",
      "tagMap": {
        "return": [
          "the key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "desc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "read",
      "comment": "Initializes from a stream. This creates a model of the type appropriate for the component and initializes the model from the stream. By default this will load the model as plain text. Previous contents of the model are discarded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/EditorKit.html#createDefaultDocument()\"\u003e\u003ccode\u003eEditorKit.createDefaultDocument()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDocument(javax.swing.text.Document)\"\u003e\u003ccode\u003esetDocument(javax.swing.text.Document)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainDocument.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003ePlainDocument\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the stream to read from",
          "\u003ccode\u003edesc\u003c/code\u003e - an object describing the stream; this might be a string, a File, a URL, etc. Some kinds of documents (such as html for example) might be able to make use of this information; if non-\n\u003ccode\u003enull\u003c/code\u003e, it is added as a property of the document"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - as thrown by the stream being used to initialize"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Stores the contents of the model into the given stream. By default this will store the model as plain text.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the output stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - on any I/O error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCaretPosition",
      "comment": "Sets the position of the text insertion caret for the TextComponent. Note that the caret tracks change, so this may move if the underlying text of the component is changed. If the document is null, does nothing. The position must be between 0 and the length of the component\u0027s text or else an exception is thrown.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "the caret position"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value supplied for \n\u003ccode\u003eposition\u003c/code\u003e is less than zero or greater than the component\u0027s text length"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCaretPosition",
      "comment": "Returns the position of the text insertion caret for the text component.",
      "tagMap": {
        "return": [
          "the position of the text insertion caret for the text component ≥ 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setText",
      "comment": "Sets the text of this TextComponent to the specified text. If the text is null or empty, has the effect of simply deleting the old text. When text has been inserted, the resulting caret location is determined by the implementation of the caret class. Note that text is not a bound property, so no PropertyChangeEvent is fired when it changes. To listen for changes to the text, use DocumentListener.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "the text of this component"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getText(int,int)\"\u003e\u003ccode\u003egetText(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultCaret.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eDefaultCaret\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the new text to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Returns the text contained in this TextComponent. If the underlying document is null, will give a NullPointerException. Note that text is not a bound property, so no PropertyChangeEvent is fired when it changes. To listen for changes to the text, use DocumentListener.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setText(java.lang.String)\"\u003e\u003ccode\u003esetText(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the document is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectedText",
      "comment": "Returns the selected text contained in this TextComponent. If the selection is null or the document empty, returns null.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setText(java.lang.String)\"\u003e\u003ccode\u003esetText(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the selection doesn\u0027t have a valid mapping into the document for some reason"
        ],
        "return": [
          "the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEditable",
      "comment": "Returns the boolean indicating whether this TextComponent is editable or not.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setEditable(boolean)\"\u003e\u003ccode\u003esetEditable(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the boolean value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditable",
      "comment": "Sets the specified boolean to indicate whether or not this TextComponent should be editable. A PropertyChange event (\"editable\") is fired when the state is changed.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "escription",
              "value": "specifies if the text can be edited"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#isEditable()\"\u003e\u003ccode\u003eisEditable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the boolean to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionStart",
      "comment": "Returns the selected text\u0027s start position. Return 0 for an empty document, or the value of dot if no selection.",
      "tagMap": {
        "return": [
          "the start position ≥ 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "selectionStart"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionStart",
      "comment": "Sets the selection start to the specified position. The new starting point is constrained to be before or at the current selection end. This is available for backward compatibility to code that called this method on java.awt.TextComponent. This is implemented to forward to the Caret implementation which is where the actual selection is maintained.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "starting location of the selection."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eselectionStart\u003c/code\u003e - the start position of the text ≥ 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSelectionEnd",
      "comment": "Returns the selected text\u0027s end position. Return 0 if the document is empty, or the value of dot if there is no selection.",
      "tagMap": {
        "return": [
          "the end position ≥ 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "selectionEnd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSelectionEnd",
      "comment": "Sets the selection end to the specified position. The new end point is constrained to be at or after the current selection start. This is available for backward compatibility to code that called this method on java.awt.TextComponent. This is implemented to forward to the Caret implementation which is where the actual selection is maintained.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "ending location of the selection."
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eselectionEnd\u003c/code\u003e - the end position of the text ≥ 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "selectionStart"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "selectionEnd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "select",
      "comment": "Selects the text between the specified start and end positions. This method sets the start and end positions of the selected text, enforcing the restriction that the start position must be greater than or equal to zero. The end position must be greater than or equal to the start position, and less than or equal to the length of the text component\u0027s text. If the caller supplies values that are inconsistent or out of bounds, the method enforces these constraints silently, and without failure. Specifically, if the start position or end position is greater than the length of the text, it is reset to equal the text length. If the start position is less than zero, it is reset to zero, and if the end position is less than the start position, it is reset to the start position. This call is provided for backward compatibility. It is routed to a call to setCaretPosition followed by a call to moveCaretPosition. The preferred way to manage selection is by calling those methods directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setCaretPosition(int)\"\u003e\u003ccode\u003esetCaretPosition(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#moveCaretPosition(int)\"\u003e\u003ccode\u003emoveCaretPosition(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eselectionStart\u003c/code\u003e - the start position of the text",
          "\u003ccode\u003eselectionEnd\u003c/code\u003e - the end position of the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "selectAll",
      "comment": "Selects all the text in the TextComponent. Does nothing on a null or empty document.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Returns the string to be used as the tooltip for event. This will return one of: If setToolTipText has been invoked with a non-null value, it will be returned, otherwise The value from invoking getToolTipText on the UI will be returned. By default JTextComponent does not register itself with the ToolTipManager. This means that tooltips will NOT be shown from the TextUI unless registerComponent has been invoked on the ToolTipManager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setToolTipText(java.lang.String)\"\u003e\u003ccode\u003eJComponent.setToolTipText(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html#getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)\"\u003e\u003ccode\u003eTextUI.getToolTipText(javax.swing.text.JTextComponent, java.awt.Point)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/ToolTipManager.html#registerComponent(javax.swing.JComponent)\"\u003e\u003ccode\u003eToolTipManager.registerComponent(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getToolTipText(java.awt.event.MouseEvent)\"\u003egetToolTipText\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the event in question"
        ],
        "return": [
          "the string to be used as the tooltip for \n\u003ccode\u003eevent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredScrollableViewportSize",
      "comment": "Returns the preferred size of the viewport for a view component. This is implemented to do the default behavior of returning the preferred size of the component.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003e\u003ccode\u003eJComponent.getPreferredSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getPreferredScrollableViewportSize()\"\u003egetPreferredScrollableViewportSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003epreferredSize\u003c/code\u003e of a \n\u003ccode\u003eJViewport\u003c/code\u003e whose view is this \n\u003ccode\u003eScrollable\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableUnitIncrement",
      "comment": "Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation. Ideally, components should handle a partially exposed row or column by returning the distance required to completely expose the item. The default implementation of this is to simply return 10% of the visible area. Subclasses are likely to be able to provide a much more reasonable value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html#setUnitIncrement(int)\"\u003e\u003ccode\u003eJScrollBar.setUnitIncrement(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableUnitIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - either \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less than zero to scroll up/left, greater than zero for down/right"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid orientation"
        ],
        "return": [
          "the \"unit\" increment for scrolling in the specified direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "visibleRect"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "orientation"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableBlockIncrement",
      "comment": "Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation. The default implementation of this is to simply return the visible area. Subclasses will likely be able to provide a much more reasonable value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollBar.html#setBlockIncrement(int)\"\u003e\u003ccode\u003eJScrollBar.setBlockIncrement(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003egetScrollableBlockIncrement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evisibleRect\u003c/code\u003e - the view area visible within the viewport",
          "\u003ccode\u003eorientation\u003c/code\u003e - either \n\u003ccode\u003eSwingConstants.VERTICAL\u003c/code\u003e or \n\u003ccode\u003eSwingConstants.HORIZONTAL\u003c/code\u003e",
          "\u003ccode\u003edirection\u003c/code\u003e - less than zero to scroll up/left, greater than zero for down/right"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid orientation"
        ],
        "return": [
          "the \"block\" increment for scrolling in the specified direction"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportWidth",
      "comment": "Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport. For example a normal text view that supported line wrapping would return true here, since it would be undesirable for wrapped lines to disappear beyond the right edge of the viewport. Note that returning true for a Scrollable whose ancestor is a JScrollPane effectively disables horizontal scrolling. Scrolling containers, like JViewport, will use this method each time they are validated.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportWidth()\"\u003egetScrollableTracksViewportWidth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if a viewport should force the \n\u003ccode\u003eScrollable\u003c/code\u003es width to match its own"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollableTracksViewportHeight",
      "comment": "Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport. For example a columnar text view that flowed text in left to right columns could effectively disable vertical scrolling by returning true here. Scrolling containers, like JViewport, will use this method each time they are validated.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableTracksViewportHeight()\"\u003egetScrollableTracksViewportHeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003eScrollable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if a viewport should force the Scrollables height to match its own"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with no header or footer text. Note: this method blocks until printing is done. Note: In headless mode, no dialogs will be shown. This method calls the full featured print method to perform printing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#print(java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.PrintService,javax.print.attribute.PrintRequestAttributeSet,boolean)\"\u003e\u003ccode\u003eprint(MessageFormat, MessageFormat, boolean, PrintService, PrintRequestAttributeSet, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, unless printing is canceled by the user"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with the specified header and footer text. Note: this method blocks until printing is done. Note: In headless mode, no dialogs will be shown. This method calls the full featured print method to perform printing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#print(java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.PrintService,javax.print.attribute.PrintRequestAttributeSet,boolean)\"\u003e\u003ccode\u003eprint(MessageFormat, MessageFormat, boolean, PrintService, PrintRequestAttributeSet, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/MessageFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eMessageFormat\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - the text, in \n\u003ccode\u003eMessageFormat\u003c/code\u003e, to be used as the header, or \n\u003ccode\u003enull\u003c/code\u003e for no header",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - the text, in \n\u003ccode\u003eMessageFormat\u003c/code\u003e, to be used as the footer, or \n\u003ccode\u003enull\u003c/code\u003e for no footer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, unless printing is canceled by the user"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.print.PrinterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "showPrintDialog"
          }
        },
        {
          "type": {
            "name": "javax.print.PrintService",
            "type": "Class"
          },
          "field": {
            "name": "service"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.PrintRequestAttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "interactive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints the content of this JTextComponent. Note: this method blocks until printing is done. Page header and footer text can be added to the output by providing MessageFormat arguments. The printing code requests Strings from the formats, providing a single item which may be included in the formatted string: an Integer representing the current page number. showPrintDialog boolean parameter allows you to specify whether a print dialog is displayed to the user. When it is, the user may use the dialog to change printing attributes or even cancel the print. service allows you to provide the initial PrintService for the print dialog, or to specify PrintService to print to when the dialog is not shown. attributes can be used to provide the initial values for the print dialog, or to supply any needed attributes when the dialog is not shown. attributes can be used to control how the job will print, for example duplex or single-sided. interactive boolean parameter allows you to specify whether to perform printing in interactive mode. If true, a progress dialog, with an abort option, is displayed for the duration of printing. This dialog is modal when print is invoked on the Event Dispatch Thread and non-modal otherwise. Warning: calling this method on the Event Dispatch Thread with interactive false blocks all events, including repaints, from being processed until printing is complete. It is only recommended when printing from an application with no visible GUI. Note: In headless mode, showPrintDialog and interactive parameters are ignored and no dialogs are shown. This method ensures the document is not mutated during printing. To indicate it visually, setEnabled(false) is set for the duration of printing. This method uses getPrintable(java.text.MessageFormat, java.text.MessageFormat) to render document content. This method is thread-safe, although most Swing methods are not. Please see Concurrency in Swing for more information. Sample Usage. This code snippet shows a cross-platform print dialog and then prints the JTextComponent in interactive mode unless the user cancels the dialog:  textComponent.print(new MessageFormat(\"My text component header\"),\n     new MessageFormat(\"Footer. Page - {0}\"), true, null, null, true);\n Executing this code off the Event Dispatch Thread performs printing on the background. The following pattern might be used for background printing:      FutureTask\u003cBoolean\u003e future \u003d\n         new FutureTask\u003cBoolean\u003e(\n             new Callable\u003cBoolean\u003e() {\n                 public Boolean call() {\n                     return textComponent.print(.....);\n                 }\n             });\n     executor.execute(future);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getPrintable(java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/MessageFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eMessageFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/FutureTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eFutureTask\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - the text, in \n\u003ccode\u003eMessageFormat\u003c/code\u003e, to be used as the header, or \n\u003ccode\u003enull\u003c/code\u003e for no header",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - the text, in \n\u003ccode\u003eMessageFormat\u003c/code\u003e, to be used as the footer, or \n\u003ccode\u003enull\u003c/code\u003e for no footer",
          "\u003ccode\u003eshowPrintDialog\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to display a print dialog, \n\u003ccode\u003efalse\u003c/code\u003e otherwise",
          "\u003ccode\u003eservice\u003c/code\u003e - initial \n\u003ccode\u003ePrintService\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e for the default",
          "\u003ccode\u003eattributes\u003c/code\u003e - the job attributes to be applied to the print job, or \n\u003ccode\u003enull\u003c/code\u003e for none",
          "\u003ccode\u003einteractive\u003c/code\u003e - whether to print in an interactive mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PrinterException.html\" title\u003d\"class in java.awt.print\"\u003ePrinterException\u003c/a\u003e\u003c/code\u003e - if an error in the print system causes the job to be aborted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, unless printing is canceled by the user"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.print.Printable",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "headerFormat"
          }
        },
        {
          "type": {
            "name": "java.text.MessageFormat",
            "type": "Class"
          },
          "field": {
            "name": "footerFormat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrintable",
      "comment": "Returns a Printable to use for printing the content of this JTextComponent. The returned Printable prints the document as it looks on the screen except being reformatted to fit the paper. The returned Printable can be wrapped inside another Printable in order to create complex reports and documents. The returned Printable shares the document with this JTextComponent. It is the responsibility of the developer to ensure that the document is not mutated while this Printable is used. Printing behavior is undefined when the document is mutated during printing. Page header and footer text can be added to the output by providing MessageFormat arguments. The printing code requests Strings from the formats, providing a single item which may be included in the formatted string: an Integer representing the current page number. The returned Printable when printed, formats the document content appropriately for the page size. For correct line wrapping the imageable width of all pages must be the same. See PageFormat.getImageableWidth(). This method is thread-safe, although most Swing methods are not. Please see Concurrency in Swing for more information. The returned Printable can be printed on any thread. This implementation returned Printable performs all painting on the Event Dispatch Thread, regardless of what thread it is used on.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/Printable.html\" title\u003d\"interface in java.awt.print\"\u003e\u003ccode\u003ePrintable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/print/PageFormat.html\" title\u003d\"class in java.awt.print\"\u003e\u003ccode\u003ePageFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#render(java.lang.Runnable)\"\u003e\u003ccode\u003eDocument.render(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eheaderFormat\u003c/code\u003e - the text, in \n\u003ccode\u003eMessageFormat\u003c/code\u003e, to be used as the header, or \n\u003ccode\u003enull\u003c/code\u003e for no header",
          "\u003ccode\u003efooterFormat\u003c/code\u003e - the text, in \n\u003ccode\u003eMessageFormat\u003c/code\u003e, to be used as the footer, or \n\u003ccode\u003enull\u003c/code\u003e for no footer"
        ],
        "return": [
          "a \n\u003ccode\u003ePrintable\u003c/code\u003e for use in printing content of this \n\u003ccode\u003eJTextComponent\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JTextComponent. For text components, the AccessibleContext takes the form of an AccessibleJTextComponent. A new AccessibleJTextComponent instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAccessibleJTextComponent\u003c/code\u003e that serves as the \n\u003ccode\u003eAccessibleContext\u003c/code\u003e of this \n\u003ccode\u003eJTextComponent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JTextComponent. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null. Overriding paramString to provide information about the specific new aspects of the JFC components.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJTextComponent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.im.InputMethodRequests",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputMethodRequests",
      "comment": "Description copied from class: Component",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#addInputMethodListener(java.awt.event.InputMethodListener)\"\u003e\u003ccode\u003eComponent.addInputMethodListener(java.awt.event.InputMethodListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getInputMethodRequests()\"\u003egetInputMethodRequests\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the input method request handler for this component, \n\u003ccode\u003enull\u003c/code\u003e by default"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "saveComposedText",
      "comment": "Saves composed text around the specified position. The composed text (if any) around the specified position is saved in a backing store and removed from the document.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#restoreComposedText()\"\u003e\u003ccode\u003erestoreComposedText()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - document position to identify the composed text location"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the composed text exists and is saved, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "restoreComposedText",
      "comment": "Restores composed text previously saved by saveComposedText. The saved composed text is inserted back into the document. This method should be invoked only if saveComposedText returns true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#saveComposedText(int)\"\u003e\u003ccode\u003esaveComposedText(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JTextComponent. Listeners for caret events are established, and the pluggable UI installed. The component is marked as editable. No layout manager is used, because layout is managed by the view subsystem of text. The document model is set to null.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.text.JTextComponent$AccessibleJTextComponent",
    "javax.swing.text.JTextComponent$DropLocation",
    "javax.swing.text.JTextComponent$KeyBinding"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.text.JTextComponent",
  "comment": "\u003ccode\u003eJTextComponent\u003c/code\u003e is the base class for swing text components. It tries to be compatible with the \n\u003ccode\u003ejava.awt.TextComponent\u003c/code\u003e class where it can reasonably do so. Also provided are other services for additional flexibility (beyond the pluggable UI and bean support). You can find information on how to use the functionality this class provides in \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/generaltext.html\"\u003eGeneral Rules for Using Text Components\u003c/a\u003e, a section in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cdl\u003e \n \u003cdt\u003e\n  \u003cb\u003eCaret Changes\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   The caret is a pluggable object in swing text components. Notification of changes to the caret position and the selection are sent to implementations of the \n  \u003ccode\u003eCaretListener\u003c/code\u003e interface that have been registered with the text component. The UI will install a default caret unless a customized caret has been set. \n  \u003cbr\u003e By default the caret tracks all the document changes performed on the Event Dispatching Thread and updates it\u0027s position accordingly if an insertion occurs before or at the caret position or a removal occurs before the caret position. \n  \u003ccode\u003eDefaultCaret\u003c/code\u003e tries to make itself visible which may lead to scrolling of a text component within \n  \u003ccode\u003eJScrollPane\u003c/code\u003e. The default caret behavior can be changed by the \n  \u003ca href\u003d\"DefaultCaret.html#setUpdatePolicy(int)\"\u003e\u003ccode\u003eDefaultCaret.setUpdatePolicy(int)\u003c/code\u003e\u003c/a\u003e method. \n  \u003cbr\u003e \n  \u003cb\u003eNote\u003c/b\u003e: Non-editable text components also have a caret though it may not be painted. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eCommands\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   Text components provide a number of commands that can be used to manipulate the component. This is essentially the way that the component expresses its capabilities. These are expressed in terms of the swing \n  \u003ccode\u003eAction\u003c/code\u003e interface, using the \n  \u003ccode\u003eTextAction\u003c/code\u003e implementation. The set of commands supported by the text component can be found with the \n  \u003ca href\u003d\"#getActions()\"\u003e\u003ccode\u003egetActions()\u003c/code\u003e\u003c/a\u003e method. These actions can be bound to key events, fired from buttons, etc. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eText Input\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   The text components support flexible and internationalized text input, using keymaps and the input method framework, while maintaining compatibility with the AWT listener model. \n  \u003cp\u003e A \u003ca href\u003d\"Keymap.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eKeymap\u003c/code\u003e\u003c/a\u003e lets an application bind key strokes to actions. In order to allow keymaps to be shared across multiple text components, they can use actions that extend \u003ccode\u003eTextAction\u003c/code\u003e. \u003ccode\u003eTextAction\u003c/code\u003e can determine which \u003ccode\u003eJTextComponent\u003c/code\u003e most recently has or had focus and therefore is the subject of the action (In the case that the \u003ccode\u003eActionEvent\u003c/code\u003e sent to the action doesn\u0027t contain the target text component as its source). \u003c/p\u003e\n  \u003cp\u003e The \u003ca href\u003d\"https://docs.oracle.com/pls/topic/lookup?ctx\u003djavase16\u0026amp;id\u003dimf_overview\"\u003eInput Method Framework\u003c/a\u003e lets text components interact with input methods, separate software components that preprocess events to let users enter thousands of different characters using keyboards with far fewer keys. \u003ccode\u003eJTextComponent\u003c/code\u003e is an \u003cem\u003eactive client\u003c/em\u003e of the framework, so it implements the preferred user interface for interacting with input methods. As a consequence, some key events do not reach the text component because they are handled by an input method, and some text input reaches the text component as committed text within an \u003ca href\u003d\"../../../java/awt/event/InputMethodEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInputMethodEvent\u003c/code\u003e\u003c/a\u003e instead of as a key event. The complete text input is the combination of the characters in \u003ccode\u003ekeyTyped\u003c/code\u003e key events and committed text in input method events. \u003c/p\u003e\n  \u003cp\u003e The AWT listener model lets applications attach event listeners to components in order to bind events to actions. Swing encourages the use of keymaps instead of listeners, but maintains compatibility with listeners by giving the listeners a chance to steal an event by consuming it. \u003c/p\u003e\n  \u003cp\u003e Keyboard event and input method events are handled in the following stages, with each stage capable of consuming the event: \u003c/p\u003e\n  \u003ctable class\u003d\"striped\"\u003e \n   \u003ccaption\u003e\n    Stages of keyboard and input method event handling\n   \u003c/caption\u003e \n   \u003cthead\u003e \n    \u003ctr\u003e \n     \u003cth scope\u003d\"col\"\u003eStage \u003c/th\u003e\n     \u003cth scope\u003d\"col\"\u003eKeyEvent \u003c/th\u003e\n     \u003cth scope\u003d\"col\"\u003eInputMethodEvent \u003c/th\u003e\n    \u003c/tr\u003e\n   \u003c/thead\u003e \n   \u003ctbody\u003e \n    \u003ctr\u003e \n     \u003cth scope\u003d\"row\"\u003e1. \u003c/th\u003e\n     \u003ctd\u003einput methods \u003c/td\u003e\n     \u003ctd\u003e(generated here) \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e \n     \u003cth scope\u003d\"row\"\u003e2. \u003c/th\u003e\n     \u003ctd\u003efocus manager \u003c/td\u003e\n     \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e \n    \u003ctr\u003e \n     \u003cth scope\u003d\"row\"\u003e3. \u003c/th\u003e\n     \u003ctd\u003eregistered key listeners \u003c/td\u003e\n     \u003ctd\u003eregistered input method listeners \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e \n     \u003cth scope\u003d\"row\"\u003e4. \u003c/th\u003e\n     \u003ctd\u003e \u003c/td\u003e\n     \u003ctd\u003einput method handling in JTextComponent \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e \n     \u003cth scope\u003d\"row\"\u003e5. \u003c/th\u003e\n     \u003ctd colspan\u003d\"2\"\u003ekeymap handling using the current keymap \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e \n     \u003cth scope\u003d\"row\"\u003e6. \u003c/th\u003e\n     \u003ctd\u003ekeyboard handling in JComponent (e.g. accelerators, component navigation, etc.) \u003c/td\u003e\n     \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n   \u003c/tbody\u003e \n  \u003c/table\u003e \n  \u003cp\u003e\u003c/p\u003e\n  \u003cp\u003e To maintain compatibility with applications that listen to key events but are not aware of input method events, the input method handling in stage 4 provides a compatibility mode for components that do not process input method events. For these components, the committed text is converted to keyTyped key events and processed in the key event pipeline starting at stage 3 instead of in the input method event pipeline. \u003c/p\u003e\n  \u003cp\u003e By default the component will create a keymap (named \u003cb\u003eDEFAULT_KEYMAP\u003c/b\u003e) that is shared by all JTextComponent instances as the default keymap. Typically a look-and-feel implementation will install a different keymap that resolves to the default keymap for those bindings not found in the different keymap. The minimal bindings include: \u003c/p\u003e\n  \u003cul\u003e \n   \u003cli\u003einserting content into the editor for the printable keys. \u003c/li\u003e\n   \u003cli\u003eremoving content with the backspace and del keys. \u003c/li\u003e\n   \u003cli\u003ecaret movement forward and backward \u003c/li\u003e\n  \u003c/ul\u003e \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eModel/View Split\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   The text components have a model-view split. A text component pulls together the objects used to represent the model, view, and controller. The text document model may be shared by other views which act as observers of the model (e.g. a document may be shared by multiple components). \n  \u003cp style\u003d\"text-align:center\"\u003e\u003cimg src\u003d\"doc-files/editor.gif\" alt\u003d\"Diagram showing interaction between Controller, Document, events, and ViewFactory\" height\u003d\"358\" width\u003d\"587\"\u003e\u003c/p\u003e \n  \u003cp\u003e The model is defined by the \u003ca href\u003d\"Document.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/a\u003e interface. This is intended to provide a flexible text storage mechanism that tracks change during edits and can be extended to more sophisticated models. The model interfaces are meant to capture the capabilities of expression given by SGML, a system used to express a wide variety of content. Each modification to the document causes notification of the details of the change to be sent to all observers in the form of a \u003ca href\u003d\"../event/DocumentEvent.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eDocumentEvent\u003c/code\u003e\u003c/a\u003e which allows the views to stay up to date with the model. This event is sent to observers that have implemented the \u003ca href\u003d\"../event/DocumentListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eDocumentListener\u003c/code\u003e\u003c/a\u003e interface and registered interest with the model being observed. \u003c/p\u003e\n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eLocation Information\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   The capability of determining the location of text in the view is provided. There are two methods, \n  \u003ca href\u003d\"#modelToView(int)\"\u003e\u003ccode\u003emodelToView(int)\u003c/code\u003e\u003c/a\u003e and \n  \u003ca href\u003d\"#viewToModel(java.awt.Point)\"\u003e\u003ccode\u003eviewToModel(java.awt.Point)\u003c/code\u003e\u003c/a\u003e for determining this information. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eUndo/Redo support\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   Support for an edit history mechanism is provided to allow undo/redo operations. The text component does not itself provide the history buffer by default, but does provide the \n  \u003ccode\u003eUndoableEdit\u003c/code\u003e records that can be used in conjunction with a history buffer to provide the undo/redo support. The support is provided by the Document model, which allows one to attach UndoableEditListener implementations. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eThread Safety\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   The swing text components provide some support of thread safe operations. Because of the high level of configurability of the text components, it is possible to circumvent the protection provided. The protection primarily comes from the model, so the documentation of \n  \u003ccode\u003eAbstractDocument\u003c/code\u003e describes the assumptions of the protection provided. The methods that are safe to call asynchronously are marked with comments. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eNewlines\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   For a discussion on how newlines are handled, see \n  \u003ca href\u003d\"DefaultEditorKit.html\"\u003eDefaultEditorKit\u003c/a\u003e. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003ePrinting support\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n   Several \n  \u003ca href\u003d\"#print()\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e methods are provided for basic document printing. If more advanced printing is needed, use the \n  \u003ca href\u003d\"#getPrintable(java.text.MessageFormat,java.text.MessageFormat)\"\u003e\u003ccode\u003egetPrintable(java.text.MessageFormat, java.text.MessageFormat)\u003c/code\u003e\u003c/a\u003e method. \n \u003c/dd\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/dl\u003e \n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/DocumentEvent.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eDocumentEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/DocumentListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eDocumentListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Caret.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eCaret\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CaretEvent.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eCaretEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/CaretListener.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eCaretListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/TextUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eTextUI\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eView\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ViewFactory.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eViewFactory\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}