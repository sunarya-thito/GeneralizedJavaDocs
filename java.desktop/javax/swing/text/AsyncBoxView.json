{
  "packageName": "javax.swing.text",
  "simpleName": "AsyncBoxView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.View",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.swing.text.AsyncBoxView$ChildLocator",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "locator",
      "comment": "Object that manages the offsets of the children. All locking for management of child locations is on this object.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMajorAxis",
      "comment": "Fetch the major axis (the axis the children are tiled along). This will have a value of either X_AXIS or Y_AXIS.",
      "tagMap": {
        "return": [
          "the major axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinorAxis",
      "comment": "Fetch the minor axis (the axis orthogonal to the tiled axis). This will have a value of either X_AXIS or Y_AXIS.",
      "tagMap": {
        "return": [
          "the minor axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTopInset",
      "comment": "Get the top part of the margin around the view.",
      "tagMap": {
        "return": [
          "the top part of the margin around the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTopInset",
      "comment": "Set the top part of the margin around the view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value of the inset"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBottomInset",
      "comment": "Get the bottom part of the margin around the view.",
      "tagMap": {
        "return": [
          "the bottom part of the margin around the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBottomInset",
      "comment": "Set the bottom part of the margin around the view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value of the inset"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeftInset",
      "comment": "Get the left part of the margin around the view.",
      "tagMap": {
        "return": [
          "the left part of the margin around the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLeftInset",
      "comment": "Set the left part of the margin around the view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value of the inset"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRightInset",
      "comment": "Get the right part of the margin around the view.",
      "tagMap": {
        "return": [
          "the right part of the margin around the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRightInset",
      "comment": "Set the right part of the margin around the view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value of the inset"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getInsetSpan",
      "comment": "Fetch the span along an axis that is taken up by the insets.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis to determine the total insets along, either X_AXIS or Y_AXIS."
        ],
        "return": [
          "the span along an axis that is taken up by the insets"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isEstimated"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setEstimatedMajorSpan",
      "comment": "Set the estimatedMajorSpan property that determines if the major span should be treated as being estimated. If this property is true, the value of setSize along the major axis will change the requirements along the major axis and incremental changes will be ignored until all of the children have been updated (which will cause the property to automatically be set to false). If the property is false the value of the majorSpan will be considered to be accurate and incremental changes will be added into the total as they are calculated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eisEstimated\u003c/code\u003e - new value for the estimatedMajorSpan property"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getEstimatedMajorSpan",
      "comment": "Is the major span currently estimated?",
      "tagMap": {
        "return": [
          "whether or not the major span currently estimated"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AsyncBoxView$ChildState",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getChildState",
      "comment": "Fetch the object representing the layout state of of the child at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the child index. This should be a value \u0026gt;\u003d 0 and \u0026lt; getViewCount()."
        ],
        "return": [
          "the object representing the layout state of of the child at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.LayoutQueue",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLayoutQueue",
      "comment": "Fetch the queue to use for layout.",
      "tagMap": {
        "return": [
          "the queue to use for layout"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AsyncBoxView$ChildState",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createChildState",
      "comment": "New ChildState records are created through this method to allow subclasses the extend the ChildState records to do/hold more.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the view"
        ],
        "return": [
          "new child state"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AsyncBoxView$ChildState",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "delta"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "majorRequirementChange",
      "comment": "Requirements changed along the major axis. This is called by the thread doing layout for the given ChildState object when it has completed fetching the child views new preferences. Typically this would be the layout thread, but might be the event thread if it is trying to update something immediately (such as to perform a model/view translation). This is implemented to mark the major axis as having changed so that a future check to see if the requirements need to be published to the parent view will consider the major axis. If the span along the major axis is not estimated, it is updated by the given delta to reflect the incremental change. The delta is ignored if the major span is estimated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs\u003c/code\u003e - the child state",
          "\u003ccode\u003edelta\u003c/code\u003e - the delta"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AsyncBoxView$ChildState",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "minorRequirementChange",
      "comment": "Requirements changed along the minor axis. This is called by the thread doing layout for the given ChildState object when it has completed fetching the child views new preferences. Typically this would be the layout thread, but might be the GUI thread if it is trying to update something immediately (such as to perform a model/view translation).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs\u003c/code\u003e - the child state"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "flushRequirementChanges",
      "comment": "Publish the changes in preferences upward to the parent view. This is normally called by the layout thread.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "views"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Calls the superclass to update the child views, and updates the status records for the children. This is expected to be called while a write lock is held on the model so that interaction with the layout thread will not happen (i.e. the layout thread acquires a read lock before doing anything).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#replace(int,int,javax.swing.text.View%5B%5D)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting offset into the child views \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the number of existing views to replace \u0026gt;\u003d 0",
          "\u003ccode\u003eviews\u003c/code\u003e - the child views to insert"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "loadChildren",
      "comment": "Loads all of the children to initialize the view. This is called by the setParent method. Subclasses can reimplement this to initialize their child views in a different manner. The default implementation creates a child view for each child element. Normally a write-lock is held on the Document while the children are being changed, which keeps the rendering and layout threads safe. The exception to this is when the view is initialized to represent an existing element (via this method), so it is synchronized to exclude preferenceChanged while we are initializing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AsyncBoxView.html#setParent(javax.swing.text.View)\"\u003e\u003ccode\u003esetParent(javax.swing.text.View)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the view factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getViewIndexAtPosition",
      "comment": "Fetches the child view index representing the given position in the model. This is implemented to fetch the view in the case where there is a child view for each child element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position \u0026gt;\u003d 0",
          "\u003ccode\u003eb\u003c/code\u003e - the position bias"
        ],
        "return": [
          "index of the view representing the given position, or -1 if no view represents that position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent$ElementChange",
            "type": "Class"
          },
          "field": {
            "name": "ec"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateLayout",
      "comment": "Update the layout in response to receiving notification of change from the model. This is implemented to note the change on the ChildLocator so that offsets of the children will be correctly computed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#updateLayout(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape)\"\u003eupdateLayout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eec\u003c/code\u003e - changes to the element this view is responsible for (may be null if there were no changes).",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParent",
      "comment": "Sets the parent of the view. This is reimplemented to provide the superclass behavior as well as calling the loadChildren method if this view does not already have children. The children should not be loaded in the constructor because the act of setting the parent may cause them to try to search up the hierarchy (to get the hosting Container for example). If this view has children (the view is being moved from one place in the view hierarchy to another), the loadChildren method will not be called.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#setParent(javax.swing.text.View)\"\u003esetParent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the parent of the view, null if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "child"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferenceChanged",
      "comment": "Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout. This is reimplemented to queue new work on the layout thread. This method gets messaged from multiple threads via the children.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#revalidate()\"\u003e\u003ccode\u003eJComponent.revalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#preferenceChanged(javax.swing.text.View,boolean,boolean)\"\u003epreferenceChanged\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echild\u003c/code\u003e - the child view",
          "\u003ccode\u003ewidth\u003c/code\u003e - true if the width preference has changed",
          "\u003ccode\u003eheight\u003c/code\u003e - true if the height preference has changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSize",
      "comment": "Sets the size of the view. This should cause layout of the view if the view caches any layout information. Since the major axis is updated asynchronously and should be the sum of the tiled children the call is ignored for the major axis. Since the minor axis is flexible, work is queued to resize the children if the minor span changes.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#setSize(float,float)\"\u003esetSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width \u0026gt;\u003d 0",
          "\u003ccode\u003eheight\u003c/code\u003e - the height \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "alloc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Render the view using the given allocation and rendering surface. This is implemented to determine whether or not the desired region to be rendered (i.e. the unclipped area) is up to date or not. If up-to-date the children are rendered. If not up-to-date, a task to build the desired area is placed on the layout queue as a high priority task. This keeps by event thread moving by rendering if ready, and postponing until a later time if not ready (since paint requests can be rescheduled).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003e\u003ccode\u003eView.paint(java.awt.Graphics, java.awt.Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the rendering surface to use",
          "\u003ccode\u003ealloc\u003c/code\u003e - the allocated region to render into"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSpan",
      "comment": "Determines the preferred span for this view along an axis.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003egetPreferredSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either View.X_AXIS or View.Y_AXIS"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis type"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSpan",
      "comment": "Determines the minimum span for this view along an axis.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003eView.getPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getMinimumSpan(int)\"\u003egetMinimumSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either View.X_AXIS or View.Y_AXIS"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis type"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSpan",
      "comment": "Determines the maximum span for this view along an axis.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003eView.getPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getMaximumSpan(int)\"\u003egetMaximumSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either View.X_AXIS or View.Y_AXIS"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid axis type"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewCount",
      "comment": "Returns the number of views in this view. Since the default is to not be a composite view this returns 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getViewCount()\"\u003e\u003ccode\u003eView.getViewCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getViewCount()\"\u003egetViewCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the number of views \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getView",
      "comment": "Gets the nth child view. Since there are no children by default, this returns null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getView(int)\"\u003egetView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the number of the view to get, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026lt; getViewCount()"
        ],
        "return": [
          "the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildAllocation",
      "comment": "Fetches the allocation for the given child view. This enables finding out where various views are located, without assuming the views store their location. This returns null since the default is to not have any child views.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getChildAllocation(int,java.awt.Shape)\"\u003egetChildAllocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the child, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026lt; getViewCount()",
          "\u003ccode\u003ea\u003c/code\u003e - the allocation to this view."
        ],
        "return": [
          "the allocation to the child"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewIndex",
      "comment": "Returns the child view index representing the given position in the model. By default a view has no children so this is implemented to return -1 to indicate there is no valid child index for any position.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getViewIndex(int,javax.swing.text.Position.Bias)\"\u003egetViewIndex\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position \u0026gt;\u003d 0",
          "\u003ccode\u003eb\u003c/code\u003e - the bias"
        ],
        "return": [
          "index of the view representing the given position, or -1 if no view represents that position"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eView.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003emodelToView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003eb\u003c/code\u003e - the bias toward the previous character or the next character represented by the offset, in case the position is a boundary of two views."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid bias argument"
        ],
        "return": [
          "the bounding box of the given position is returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Provides a mapping from the view coordinate space to the logical coordinate space of the model. The biasReturn argument will be filled in to indicate that the point given is closer to the next character in the model or the previous character in the model. This is expected to be called by the GUI thread, holding a read-lock on the associated model. It is implemented to locate the child view and determine it\u0027s allocation with a lock on the ChildLocator object, and to call viewToModel on the child view with a lock on the ChildState object to avoid interaction with the layout thread.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003eviewToModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003ebiasReturn\u003c/code\u003e - the returned bias"
        ],
        "return": [
          "the location within the model that best represents the given point in the view \u0026gt;\u003d 0. The biasReturn argument will be filled in to indicate that the point given is closer to the next character in the model or the previous character in the model."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasRet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextVisualPositionFrom",
      "comment": "Provides a way to determine the next visually represented model location that one might place a caret. Some views may not be visible, they might not be in the same order found in the model, or they just might not allow access to some of the locations in the model. This method enables specifying a position to convert within the range of \u003e\u003d0. If the value is -1, a position will be calculated automatically. If the value \u003c -1, the BadLocationException will be thrown.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getNextVisualPositionFrom(int,javax.swing.text.Position.Bias,java.awt.Shape,int,javax.swing.text.Position.Bias%5B%5D)\"\u003egetNextVisualPositionFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003edirection\u003c/code\u003e - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard; this may be one of the following: \n\u003cul style\u003d\"list-style-type:none\"\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.WEST\u003c/code\u003e\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.EAST\u003c/code\u003e\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.NORTH\u003c/code\u003e\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eSwingConstants.SOUTH\u003c/code\u003e\u003c/li\u003e \n\u003c/ul\u003e",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - an array contain the bias that was checked",
          "\u003ccode\u003eb\u003c/code\u003e - the bias"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given position is not a valid position within the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edirection\u003c/code\u003e is invalid"
        ],
        "return": [
          "the location within the model that best represents the next location visual position"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a box view that does asynchronous layout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element of the model to represent",
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis to tile along. This can be either X_AXIS or Y_AXIS."
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.text.AsyncBoxView$ChildLocator",
    "javax.swing.text.AsyncBoxView$ChildState"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.AsyncBoxView",
  "comment": "A box that does layout asynchronously. This is useful to keep the GUI event thread moving by not doing any layout on it. The layout is done on a granularity of operations on the child views. After each child view is accessed for some part of layout (a potentially time consuming operation) the remaining tasks can be abandoned or a new higher priority task (i.e. to service a synchronous request or a visible area) can be taken on. \n\u003cp\u003e While the child view is being accessed a read lock is acquired on the associated document so that the model is stable while being accessed.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}