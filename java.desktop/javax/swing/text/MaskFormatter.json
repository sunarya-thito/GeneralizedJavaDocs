{
  "packageName": "javax.swing.text",
  "simpleName": "MaskFormatter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.DefaultFormatter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "mask",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMask",
      "comment": "Sets the mask dictating the legal characters. This will throw a ParseException if mask is not valid.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emask\u003c/code\u003e - the mask"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if mask does not contain valid mask characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMask",
      "comment": "Returns the formatting mask.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Mask dictating legal character values."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "validCharacters",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValidCharacters",
      "comment": "Allows for further restricting of the characters that can be input. Only characters specified in the mask, not in the invalidCharacters, and in validCharacters will be allowed to be input. Passing in null (the default) implies the valid characters are only bound by the mask and the invalid characters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalidCharacters\u003c/code\u003e - If non-null, specifies legal characters."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValidCharacters",
      "comment": "Returns the valid characters that can be input.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Legal characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "invalidCharacters",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInvalidCharacters",
      "comment": "Allows for further restricting of the characters that can be input. Only characters specified in the mask, not in the invalidCharacters, and in validCharacters will be allowed to be input. Passing in null (the default) implies the valid characters are only bound by the mask and the valid characters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einvalidCharacters\u003c/code\u003e - If non-null, specifies illegal characters."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInvalidCharacters",
      "comment": "Returns the characters that are not valid for input.",
      "annotations": [],
      "tagMap": {
        "return": [
          "illegal characters."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "placeholder",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPlaceholder",
      "comment": "Sets the string to use if the value does not completely fill in the mask. A null value implies the placeholder char should be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplaceholder\u003c/code\u003e - String used when formatting if the value does not completely fill the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPlaceholder",
      "comment": "Returns the String to use if the value does not completely fill in the mask.",
      "annotations": [],
      "tagMap": {
        "return": [
          "String used when formatting if the value does not completely fill the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "placeholder",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPlaceholderCharacter",
      "comment": "Sets the character to use in place of characters that are not present in the value, ie the user must fill them in. The default value is a space. This is only applicable if the placeholder string has not been specified, or does not completely fill in the mask.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplaceholder\u003c/code\u003e - Character used when formatting if the value does not completely fill the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPlaceholderCharacter",
      "comment": "Returns the character to use in place of characters that are not present in the value, ie the user must fill them in.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Character used when formatting if the value does not completely fill the mask"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "containsLiteralChars",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setValueContainsLiteralCharacters",
      "comment": "If true, the returned value and set value will also contain the literal characters in mask. For example, if the mask is \u0027(###) ###-####\u0027, the current value is \u0027(415) 555-1212\u0027, and valueContainsLiteralCharacters is true stringToValue will return \u0027(415) 555-1212\u0027. On the other hand, if valueContainsLiteralCharacters is false, stringToValue will return \u00274155551212\u0027.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econtainsLiteralChars\u003c/code\u003e - Used to indicate if literal characters in mask should be returned in stringToValue"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValueContainsLiteralCharacters",
      "comment": "Returns true if stringToValue should return literal characters in the mask.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if literal characters in mask should be returned in stringToValue"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stringToValue",
      "comment": "Parses the text, returning the appropriate Object representation of the String value. This strips the literal characters as necessary and invokes supers stringToValue, so that if you have specified a value class (setValueClass) an instance of it will be created. This will throw a ParseException if the value does not match the current mask. Refer to setValueContainsLiteralCharacters(boolean) for details on how literals are treated.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MaskFormatter.html#setValueContainsLiteralCharacters(boolean)\"\u003e\u003ccode\u003esetValueContainsLiteralCharacters(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#stringToValue(java.lang.String)\"\u003estringToValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - String to convert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if there is an error in the conversion"
        ],
        "return": [
          "Object representation of text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "valueToString",
      "comment": "Returns a String representation of the Object value based on the mask. Refer to setValueContainsLiteralCharacters(boolean) for details on how literals are treated.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/MaskFormatter.html#setValueContainsLiteralCharacters(boolean)\"\u003e\u003ccode\u003esetValueContainsLiteralCharacters(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#valueToString(java.lang.Object)\"\u003evalueToString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Value to convert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if there is an error in the conversion"
        ],
        "return": [
          "String representation of value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField",
            "type": "Class"
          },
          "name": "ftf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "install",
      "comment": "Installs the DefaultFormatter onto a particular JFormattedTextField. This will invoke valueToString to convert the current value from the JFormattedTextField to a String. This will then install the Actions from getActions, the DocumentFilter returned from getDocumentFilter and the NavigationFilter returned from getNavigationFilter onto the JFormattedTextField. Subclasses will typically only need to override this if they wish to install additional listeners on the JFormattedTextField. If there is a ParseException in converting the current value to a String, this will set the text to an empty String, and mark the JFormattedTextField as being in an invalid state. While this is a public method, this is typically only useful for subclassers of JFormattedTextField. JFormattedTextField will invoke this method at the appropriate times when the value changes, or its internal state changes.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#install(javax.swing.JFormattedTextField)\"\u003einstall\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eftf\u003c/code\u003e - JFormattedTextField to format for, may be null indicating uninstall from current JFormattedTextField."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a MaskFormatter with no mask.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "mask",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a MaskFormatter with the specified mask. A ParseException will be thrown if mask is an invalid mask.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emask\u003c/code\u003e - the mask"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if mask does not contain valid mask characters"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.MaskFormatter",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}