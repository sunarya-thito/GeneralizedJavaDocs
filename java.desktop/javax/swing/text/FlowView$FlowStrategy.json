{
  "packageName": "javax.swing.text",
  "simpleName": "FlowStrategy",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "alloc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertUpdate",
      "comment": "Gives notification that something was inserted into the document in a location that the given flow view is responsible for. The strategy should update the appropriate changed region (which depends upon the strategy used for repair).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the flow view",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ealloc\u003c/code\u003e - the current allocation of the view inside of the insets. This value will be null if the view has not yet been displayed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "alloc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeUpdate",
      "comment": "Gives notification that something was removed from the document in a location that the given flow view is responsible for.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the flow view",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ealloc\u003c/code\u003e - the current allocation of the view inside of the insets."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "alloc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "changedUpdate",
      "comment": "Gives notification from the document that attributes were changed in a location that this view is responsible for.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the \n\u003ccode\u003eFlowView\u003c/code\u003e containing the changes",
          "\u003ccode\u003ee\u003c/code\u003e - the \n\u003ccode\u003eDocumentEvent\u003c/code\u003e describing the changes done to the Document",
          "\u003ccode\u003ealloc\u003c/code\u003e - Bounds of the View"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLogicalView",
      "comment": "This method gives flow strategies access to the logical view of the FlowView.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the FlowView"
        ],
        "return": [
          "the logical view of the FlowView"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layout",
      "comment": "Update the flow on the given FlowView. By default, this causes all of the rows (child views) to be rebuilt to match the given constraints for each row. This is called by a FlowView.layout to update the child views in the flow.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the view to reflow"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "layoutRow",
      "comment": "Creates a row of views that will fit within the layout span of the row. This is called by the layout method. This is implemented to fill the row by repeatedly calling the createView method until the available span has been exhausted, a forced break was encountered, or the createView method returned null. If the remaining span was exhausted, the adjustRow method will be called to perform adjustments to the row to try and make it fit into the given span.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the flow view",
          "\u003ccode\u003erowIndex\u003c/code\u003e - the index of the row to fill in with views. The row is assumed to be empty on entry.",
          "\u003ccode\u003epos\u003c/code\u003e - The current position in the children of this views element from which to start."
        ],
        "return": [
          "the position to start the next row"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "desiredSpan"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "adjustRow",
      "comment": "Adjusts the given row if possible to fit within the layout span. By default this will try to find the highest break weight possible nearest the end of the row. If a forced break is encountered, the break will be positioned there.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the flow view",
          "\u003ccode\u003erowIndex\u003c/code\u003e - the row to adjust to the current layout span.",
          "\u003ccode\u003edesiredSpan\u003c/code\u003e - the current layout span \u0026gt;\u003d 0",
          "\u003ccode\u003ex\u003c/code\u003e - the location r starts at."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.FlowView",
            "type": "Class"
          },
          "field": {
            "name": "fv"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "startOffset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "spanLeft"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rowIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createView",
      "comment": "Creates a view that can be used to represent the current piece of the flow. This can be either an entire view from the logical view, or a fragment of the logical view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efv\u003c/code\u003e - the view holding the flow",
          "\u003ccode\u003estartOffset\u003c/code\u003e - the start location for the view being created",
          "\u003ccode\u003espanLeft\u003c/code\u003e - the about of span left to fill in the row",
          "\u003ccode\u003erowIndex\u003c/code\u003e - the row the view will be placed into"
        ],
        "return": [
          "a view that can be used to represent the current piece of the flow"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a FlowStrategy.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "javax.swing.text.FlowView$FlowStrategy",
  "comment": "Strategy for maintaining the physical form of the flow. The default implementation is completely stateless, and recalculates the entire flow if the layout is invalid on the given FlowView. Alternative strategies can be implemented by subclassing, and might perform incremental repair to the layout or alternative breaking behavior.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}