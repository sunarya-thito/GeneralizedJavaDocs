{
  "packageName": "javax.swing.text",
  "simpleName": "DefaultFormatterFactory",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.JFormattedTextField$AbstractFormatterFactory",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "atf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultFormatter",
      "comment": "Sets the JFormattedTextField.AbstractFormatter to use as a last resort, eg in case a display, edit or null JFormattedTextField.AbstractFormatter has not been specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eatf\u003c/code\u003e - JFormattedTextField.AbstractFormatter used if a more specific is not specified"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JFormattedTextField$AbstractFormatter",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultFormatter",
      "comment": "Returns the JFormattedTextField.AbstractFormatter to use as a last resort, eg in case a display, edit or null JFormattedTextField.AbstractFormatter has not been specified.",
      "annotations": [],
      "tagMap": {
        "return": [
          "JFormattedTextField.AbstractFormatter used if a more specific one is not specified."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "atf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisplayFormatter",
      "comment": "Sets the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is not being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eatf\u003c/code\u003e - JFormattedTextField.AbstractFormatter to use when the JFormattedTextField does not have focus"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JFormattedTextField$AbstractFormatter",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayFormatter",
      "comment": "Returns the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is not being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.",
      "annotations": [],
      "tagMap": {
        "return": [
          "JFormattedTextField.AbstractFormatter to use when the JFormattedTextField does not have focus"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "atf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEditFormatter",
      "comment": "Sets the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eatf\u003c/code\u003e - JFormattedTextField.AbstractFormatter to use when the component has focus"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JFormattedTextField$AbstractFormatter",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEditFormatter",
      "comment": "Returns the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.",
      "annotations": [],
      "tagMap": {
        "return": [
          "JFormattedTextField.AbstractFormatter to use when the component has focus"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "atf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNullFormatter",
      "comment": "Sets the formatter to use if the value of the JFormattedTextField is null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eatf\u003c/code\u003e - JFormattedTextField.AbstractFormatter to use when the value of the JFormattedTextField is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JFormattedTextField$AbstractFormatter",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNullFormatter",
      "comment": "Returns the formatter to use if the value is null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "JFormattedTextField.AbstractFormatter to use when the value is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JFormattedTextField$AbstractFormatter",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFormatter",
      "comment": "Returns either the default formatter, display formatter, editor formatter or null formatter based on the state of the JFormattedTextField.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatterFactory.html#getFormatter(javax.swing.JFormattedTextField)\"\u003egetFormatter\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatterFactory.html\" title\u003d\"class in javax.swing\"\u003eJFormattedTextField.AbstractFormatterFactory\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - JFormattedTextField requesting JFormattedTextField.AbstractFormatter"
        ],
        "return": [
          "JFormattedTextField.AbstractFormatter to handle formatting duties."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DefaultFormatterFactory.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "defaultFormat",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DefaultFormatterFactory with the specified JFormattedTextField.AbstractFormatter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edefaultFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used if a more specific JFormattedTextField.AbstractFormatter can not be found."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "defaultFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "displayFormat",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DefaultFormatterFactory with the specified JFormattedTextField.AbstractFormatters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edefaultFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used if a more specific JFormattedTextField.AbstractFormatter can not be found.",
          "\u003ccode\u003edisplayFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used when the JFormattedTextField does not have focus."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "defaultFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "displayFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "editFormat",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DefaultFormatterFactory with the specified JFormattedTextField.AbstractFormatters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edefaultFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used if a more specific JFormattedTextField.AbstractFormatter can not be found.",
          "\u003ccode\u003edisplayFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used when the JFormattedTextField does not have focus.",
          "\u003ccode\u003eeditFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used when the JFormattedTextField has focus."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "defaultFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "displayFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "editFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField$AbstractFormatter",
            "type": "Class"
          },
          "name": "nullFormat",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a DefaultFormatterFactory with the specified JFormattedTextField.AbstractFormatters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edefaultFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used if a more specific JFormattedTextField.AbstractFormatter can not be found.",
          "\u003ccode\u003edisplayFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used when the JFormattedTextField does not have focus.",
          "\u003ccode\u003eeditFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used when the JFormattedTextField has focus.",
          "\u003ccode\u003enullFormat\u003c/code\u003e - JFormattedTextField.AbstractFormatter to be used when the JFormattedTextField has a null value."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.DefaultFormatterFactory",
  "comment": "An implementation of \n\u003ccode\u003eJFormattedTextField.AbstractFormatterFactory\u003c/code\u003e. \n\u003ccode\u003eDefaultFormatterFactory\u003c/code\u003e allows specifying a number of different \n\u003ccode\u003eJFormattedTextField.AbstractFormatter\u003c/code\u003es that are to be used. The most important one is the default one (\n\u003ccode\u003esetDefaultFormatter\u003c/code\u003e). The default formatter will be used if a more specific formatter could not be found. The following process is used to determine the appropriate formatter to use. \n\u003col\u003e \n \u003cli\u003eIs the passed in value null? Use the null formatter. \u003c/li\u003e\n \u003cli\u003eDoes the \u003ccode\u003eJFormattedTextField\u003c/code\u003e have focus? Use the edit formatter. \u003c/li\u003e\n \u003cli\u003eOtherwise, use the display formatter. \u003c/li\u003e\n \u003cli\u003eIf a non-null \u003ccode\u003eAbstractFormatter\u003c/code\u003e has not been found, use the default formatter. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e The following code shows how to configure a \u003ccode\u003eJFormattedTextField\u003c/code\u003e with two \u003ccode\u003eJFormattedTextField.AbstractFormatter\u003c/code\u003es, one for display and one for editing. \u003c/p\u003e\n\u003cpre\u003e JFormattedTextField.AbstractFormatter editFormatter \u003d ...;\n JFormattedTextField.AbstractFormatter displayFormatter \u003d ...;\n DefaultFormatterFactory factory \u003d new DefaultFormatterFactory(\n                 displayFormatter, displayFormatter, editFormatter);\n JFormattedTextField tf \u003d new JFormattedTextField(factory);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFormattedTextField.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJFormattedTextField\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}