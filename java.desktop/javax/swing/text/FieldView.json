{
  "packageName": "javax.swing.text",
  "simpleName": "FieldView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.PlainView",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.FontMetrics",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getFontMetrics",
      "comment": "Fetches the font metrics associated with the component hosting this view.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the metrics"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "adjustAllocation",
      "comment": "Adjusts the allocation given to the view to be a suitable allocation for a text field. If the view has been allocated more than the preferred span vertically, the allocation is changed to be centered vertically. Horizontally the view is adjusted according to the horizontal alignment property set on the associated JTextField (if that is the type of the hosting component).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the allocation given to the view, which may need to be adjusted."
        ],
        "return": [
          "the allocation that the superclass should use."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Renders using the given rendering surface and area on that surface. The view may need to do layout and create child views to enable itself to render into the given allocation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003e\u003ccode\u003eView.paint(java.awt.Graphics, java.awt.Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html#paint(java.awt.Graphics,java.awt.Shape)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html\" title\u003d\"class in javax.swing.text\"\u003ePlainView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the rendering surface to use",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSpan",
      "comment": "Determines the preferred span for this view along an axis.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html#getPreferredSpan(int)\"\u003egetPreferredSpan\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html\" title\u003d\"class in javax.swing.text\"\u003ePlainView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either View.X_AXIS or View.Y_AXIS"
        ],
        "return": [
          "the span the view would like to be rendered into \u0026gt;\u003d 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResizeWeight",
      "comment": "Determines the resizability of the view along the given axis. A value of 0 or less is not resizable.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getResizeWeight(int)\"\u003egetResizeWeight\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003eView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - View.X_AXIS or View.Y_AXIS"
        ],
        "return": [
          "the weight -\u0026gt; 1 for View.X_AXIS, else 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003e\u003ccode\u003eView.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003emodelToView\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html\" title\u003d\"class in javax.swing.text\"\u003ePlainView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003eb\u003c/code\u003e - the bias toward the previous character or the next character represented by the offset, in case the position is a boundary of two views; \n\u003ccode\u003eb\u003c/code\u003e will have one of these values: \n\u003cul\u003e \n \u003cli\u003e \u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the bounding box of the given position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Provides a mapping from the view coordinate space to the logical coordinate space of the model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eView.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003eviewToModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html\" title\u003d\"class in javax.swing.text\"\u003ePlainView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efx\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0.0f",
          "\u003ccode\u003efy\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0.0f",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003ebias\u003c/code\u003e - the returned bias"
        ],
        "return": [
          "the location within the model that best represents the given point in the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertUpdate",
      "comment": "Gives notification that something was inserted into the document in a location that this view is responsible for.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003einsertUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html\" title\u003d\"class in javax.swing.text\"\u003ePlainView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echanges\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeUpdate",
      "comment": "Gives notification that something was removed from the document in a location that this view is responsible for.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eView.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003eremoveUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/PlainView.html\" title\u003d\"class in javax.swing.text\"\u003ePlainView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echanges\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "name": "elem",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new FieldView wrapped on an element.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.FieldView",
  "comment": "Extends the multi-line plain text view to be suitable for a single-line editor view. If the view is allocated extra space, the field must adjust for it. If the hosting component is a JTextField, this view will manage the ranges of the associated BoundedRangeModel and will adjust the horizontal allocation to match the current visibility settings of the JTextField.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eView\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}