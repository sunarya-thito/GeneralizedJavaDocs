{
  "packageName": "javax.swing.text",
  "simpleName": "GapContent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "allocateArray",
      "comment": "Allocate an array to store items of the type appropriate (which is determined by the subclass).",
      "tagMap": {
        "param": [
          "\u003ccode\u003elen\u003c/code\u003e - the length of the array"
        ],
        "return": [
          "the java array of some type"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getArrayLength",
      "comment": "Get the length of the allocated array.",
      "tagMap": {
        "return": [
          "the length of the array"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Returns the length of the content.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#length()\"\u003e\u003ccode\u003eAbstractDocument.Content.length()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#length()\"\u003elength\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.Content\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the length \u0026gt;\u003d 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.undo.UndoableEdit",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "where"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertString",
      "comment": "Inserts a string into the content.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#insertString(int,java.lang.String)\"\u003e\u003ccode\u003eAbstractDocument.Content.insertString(int, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#insertString(int,java.lang.String)\"\u003einsertString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.Content\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewhere\u003c/code\u003e - the starting position \u0026gt;\u003d 0, \u0026lt; length()",
          "\u003ccode\u003estr\u003c/code\u003e - the non-null string to insert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the specified position is invalid"
        ],
        "return": [
          "an UndoableEdit object for undoing"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.undo.UndoableEdit",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "where"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nitems"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes part of the content.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#remove(int,int)\"\u003e\u003ccode\u003eAbstractDocument.Content.remove(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#remove(int,int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.Content\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewhere\u003c/code\u003e - the starting position \u0026gt;\u003d 0, where + nitems \u0026lt; length()",
          "\u003ccode\u003enitems\u003c/code\u003e - the number of characters to remove \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the specified position is invalid"
        ],
        "return": [
          "an UndoableEdit object for undoing"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "where"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getString",
      "comment": "Retrieves a portion of the content.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#getString(int,int)\"\u003e\u003ccode\u003eAbstractDocument.Content.getString(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#getString(int,int)\"\u003egetString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.Content\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewhere\u003c/code\u003e - the starting position \u0026gt;\u003d 0",
          "\u003ccode\u003elen\u003c/code\u003e - the length to retrieve \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the specified position is invalid"
        ],
        "return": [
          "a string representing the content"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "where"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Segment",
            "type": "Class"
          },
          "field": {
            "name": "chars"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChars",
      "comment": "Retrieves a portion of the content. If the desired content spans the gap, we copy the content. If the desired content does not span the gap, the actual store is returned to avoid the copy since it is contiguous.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#getChars(int,int,javax.swing.text.Segment)\"\u003e\u003ccode\u003eAbstractDocument.Content.getChars(int, int, javax.swing.text.Segment)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#getChars(int,int,javax.swing.text.Segment)\"\u003egetChars\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.Content\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewhere\u003c/code\u003e - the starting position \u0026gt;\u003d 0, where + len \u0026lt;\u003d length()",
          "\u003ccode\u003elen\u003c/code\u003e - the number of characters to retrieve \u0026gt;\u003d 0",
          "\u003ccode\u003echars\u003c/code\u003e - the Segment object to return the characters in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the specified position is invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Position",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createPosition",
      "comment": "Creates a position within the content that will track change as the content is mutated.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html#createPosition(int)\"\u003ecreatePosition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.Content.html\" title\u003d\"interface in javax.swing.text\"\u003eAbstractDocument.Content\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to track \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the specified position is invalid"
        ],
        "return": [
          "the position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shiftEnd",
      "comment": "Make the gap bigger, moving any necessary data and updating the appropriate marks",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewSize\u003c/code\u003e - the new capacity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newGapStart"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shiftGap",
      "comment": "Move the start of the gap to a new location, without changing the size of the gap. This moves the data in the array and updates the marks accordingly.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewGapStart\u003c/code\u003e - the new start of the gap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "resetMarksAtZero",
      "comment": "Resets all the marks that have an offset of 0 to have an index of zero as well.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newGapStart"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shiftGapStartDown",
      "comment": "Adjust the gap end downward. This doesn\u0027t move any data, but it does update any marks affected by the boundary change. All marks from the old gap start down to the new gap start are squeezed to the end of the gap (their location has been removed).",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewGapStart\u003c/code\u003e - the new start of the gap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newGapEnd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "shiftGapEndUp",
      "comment": "Adjust the gap end upward. This doesn\u0027t move any data, but it does update any marks affected by the boundary change. All marks from the old gap end up to the new gap end are squeezed to the end of the gap (their location has been removed).",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewGapEnd\u003c/code\u003e - the new end of the gap"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getPositionsInRange",
      "comment": "Returns a Vector containing instances of UndoPosRef for the Positions in the range offset to offset + length. If v is not null the matching Positions are placed in there. The vector with the resulting Positions are returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the Vector to use, with a new one created on null",
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003elength\u003c/code\u003e - the length \u0026gt;\u003d 0"
        ],
        "return": [
          "the set of instances"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Vector",
            "type": "Class"
          },
          "field": {
            "name": "positions"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateUndoPositions",
      "comment": "Resets the location for all the UndoPosRef instances in positions. This is meant for internal usage, and is generally not of interest to subclasses.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epositions\u003c/code\u003e - the UndoPosRef instances to reset",
          "\u003ccode\u003eoffset\u003c/code\u003e - where the string was inserted",
          "\u003ccode\u003elength\u003c/code\u003e - length of inserted string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getArray",
      "comment": "Access to the array. The actual type of the array is known only by the subclass.",
      "tagMap": {
        "return": [
          "the java array of some type"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getGapStart",
      "comment": "Access to the start of the gap.",
      "tagMap": {
        "return": [
          "the start of the gap"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getGapEnd",
      "comment": "Access to the end of the gap.",
      "tagMap": {
        "return": [
          "the end of the gap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rmSize"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "addItems"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "addSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "replace",
      "comment": "Replace the given logical position in the storage with the given new items. This will move the gap to the area being changed if the gap is not currently located at the change location.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - the location to make the replacement. This is not the location in the underlying storage array, but the location in the contiguous space being modeled.",
          "\u003ccode\u003ermSize\u003c/code\u003e - the number of items to remove",
          "\u003ccode\u003eaddItems\u003c/code\u003e - the new items to place in storage.",
          "\u003ccode\u003eaddSize\u003c/code\u003e - the number of items to add"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new GapContent object. Initial size defaults to 10.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialLength"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new GapContent object, with the initial size specified. The initial size will not be allowed to go below 2, to give room for the implied break and the gap.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialLength\u003c/code\u003e - the initial size"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.GapContent",
  "comment": "An implementation of the AbstractDocument.Content interface implemented using a gapped buffer similar to that used by emacs. The underlying storage is an array of Unicode characters with a gap somewhere. The gap is moved to the location of changes to take advantage of common behavior where most changes are in the same location. Changes that occur at a gap boundary are generally cheap and moving the gap is generally cheaper than moving the array contents directly to accommodate the change. \n\u003cp\u003e The positions tracking change are also generally cheap to maintain. The Position implementations (marks) store the array index and can easily calculate the sequential position from the current gap location. Changes only require updating the marks between the old and new gap boundaries when the gap is moved, so generally updating the marks is pretty cheap. The marks are stored sorted so they can be located quickly with a binary search. This increases the cost of adding a mark, and decreases the cost of keeping the mark updated.\u003c/p\u003e",
  "tagMap": {}
}