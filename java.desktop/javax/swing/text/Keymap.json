{
  "packageName": "javax.swing.text",
  "simpleName": "Keymap",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Fetches the name of the set of key-bindings.",
      "tagMap": {
        "return": [
          "the name"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultAction",
      "comment": "Fetches the default action to fire if a key is typed (i.e. a KEY_TYPED KeyEvent is received) and there is no binding for it. Typically this would be some action that inserts text so that the keymap doesn\u0027t require an action for each possible key.",
      "tagMap": {
        "return": [
          "the default action"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDefaultAction",
      "comment": "Set the default action to fire if a key is typed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the action"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAction",
      "comment": "Fetches the action appropriate for the given symbolic event sequence. This is used by JTextController to determine how to interpret key sequences. If the binding is not resolved locally, an attempt is made to resolve through the parent keymap, if one is set.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key sequence"
        ],
        "return": [
          "the action associated with the key sequence if one is defined, otherwise \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoundKeyStrokes",
      "comment": "Fetches all of the keystrokes in this map that are bound to some action.",
      "tagMap": {
        "return": [
          "the list of keystrokes"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoundActions",
      "comment": "Fetches all of the actions defined in this keymap.",
      "tagMap": {
        "return": [
          "the list of actions"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.KeyStroke",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKeyStrokesForAction",
      "comment": "Fetches the keystrokes that will result in the given action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the action"
        ],
        "return": [
          "the list of keystrokes"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLocallyDefined",
      "comment": "Determines if the given key sequence is locally defined.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key sequence"
        ],
        "return": [
          "true if the key sequence is locally defined else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addActionForKeyStroke",
      "comment": "Adds a binding to the keymap.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key sequence",
          "\u003ccode\u003ea\u003c/code\u003e - the action"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.KeyStroke",
            "type": "Class"
          },
          "field": {
            "name": "keys"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeKeyStrokeBinding",
      "comment": "Removes a binding from the keymap.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeys\u003c/code\u003e - the key sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeBindings",
      "comment": "Removes all bindings from the keymap.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.text.Keymap",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResolveParent",
      "comment": "Fetches the parent keymap used to resolve key-bindings.",
      "tagMap": {
        "return": [
          "the keymap"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Keymap",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResolveParent",
      "comment": "Sets the parent keymap, which will be used to resolve key-bindings. The behavior is unspecified if a Keymap has itself as one of its resolve parents.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the parent keymap"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.text.Keymap",
  "comment": "A collection of bindings of KeyStrokes to actions. The bindings are basically name-value pairs that potentially resolve in a hierarchy.",
  "tagMap": {}
}