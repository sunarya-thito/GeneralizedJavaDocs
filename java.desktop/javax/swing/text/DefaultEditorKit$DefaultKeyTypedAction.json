{
  "packageName": "javax.swing.text",
  "simpleName": "DefaultKeyTypedAction",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.TextAction",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "actionPerformed",
      "comment": "The operation to perform when this action is triggered.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the action event"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates this object with the appropriate identifier.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "javax.swing.text.DefaultEditorKit$DefaultKeyTypedAction",
  "comment": "The action that is executed by default if a \n\u003cem\u003ekey typed event\u003c/em\u003e is received and there is no keymap entry. There is a variation across different VM\u0027s in what gets sent as a \n\u003cem\u003ekey typed\u003c/em\u003e event, and this action tries to filter out the undesired events. This filters the control characters and those with the ALT modifier. It allows Control-Alt sequences through as these form legitimate unicode characters on some PC keyboards. \n\u003cp\u003e If the event doesn\u0027t get filtered, it will try to insert content into the text editor. The content is fetched from the command string of the ActionEvent. The text entry is done through the \u003ccode\u003ereplaceSelection\u003c/code\u003e method on the target text component. This is the action that will be fired for most text entry tasks. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html#defaultKeyTypedAction\"\u003e\u003ccode\u003eDefaultEditorKit.defaultKeyTypedAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultEditorKit.html#getActions()\"\u003e\u003ccode\u003eDefaultEditorKit.getActions()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Keymap.html#setDefaultAction(javax.swing.Action)\"\u003e\u003ccode\u003eKeymap.setDefaultAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Keymap.html#getDefaultAction()\"\u003e\u003ccode\u003eKeymap.getDefaultAction()\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}