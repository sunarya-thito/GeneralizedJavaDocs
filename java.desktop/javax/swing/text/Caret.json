{
  "packageName": "javax.swing.text",
  "simpleName": "Caret",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "install",
      "comment": "Called when the UI is being installed into the interface of a JTextComponent. This can be used to gain access to the model that is being navigated by the implementation of this interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JTextComponent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "deinstall",
      "comment": "Called when the UI is being removed from the interface of a JTextComponent. This is used to unregister any listeners that were attached.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the JTextComponent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "paint",
      "comment": "Renders the caret. This method is called by UI classes.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.ChangeListener",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addChangeListener",
      "comment": "Adds a listener to track whenever the caret position has been changed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the change listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.ChangeListener",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeChangeListener",
      "comment": "Removes a listener that was tracking caret position changes.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the change listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isVisible",
      "comment": "Determines if the caret is currently visible.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the caret is visible else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setVisible",
      "comment": "Sets the visibility of the caret.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - true if the caret should be shown, and false if the caret should be hidden"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSelectionVisible",
      "comment": "Determines if the selection is currently visible.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the caret is visible else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSelectionVisible",
      "comment": "Sets the visibility of the selection",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - true if the caret should be shown, and false if the caret should be hidden"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMagicCaretPosition",
      "comment": "Set the current caret visual location. This can be used when moving between lines that have uneven end positions (such as when caret up or down actions occur). If text flows left-to-right or right-to-left the x-coordinate will indicate the desired navigation location for vertical movement. If the text flow is top-to-bottom, the y-coordinate will indicate the desired navigation location for horizontal movement.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the Point to use for the saved position. This can be null to indicate there is no visual location."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMagicCaretPosition",
      "comment": "Gets the current caret visual location.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Caret.html#setMagicCaretPosition(java.awt.Point)\"\u003e\u003ccode\u003esetMagicCaretPosition(java.awt.Point)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the visual position."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rate",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlinkRate",
      "comment": "Sets the blink rate of the caret. This determines if and how fast the caret blinks, commonly used as one way to attract attention to the caret.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erate\u003c/code\u003e - the delay in milliseconds \u0026gt;\u003d0. If this is zero the caret will not blink."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlinkRate",
      "comment": "Gets the blink rate of the caret. This determines if and how fast the caret blinks, commonly used as one way to attract attention to the caret.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the delay in milliseconds \u0026gt;\u003d0. If this is zero the caret will not blink."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDot",
      "comment": "Fetches the current position of the caret.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the position \u0026gt;\u003d0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMark",
      "comment": "Fetches the current position of the mark. If there is a selection, the mark will not be the same as the dot.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the position \u0026gt;\u003d0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dot",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDot",
      "comment": "Sets the caret position to some position. This causes the mark to become the same as the dot, effectively setting the selection range to zero. If the parameter is negative or beyond the length of the document, the caret is placed at the beginning or at the end, respectively.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edot\u003c/code\u003e - the new position to set the caret to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dot",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "moveDot",
      "comment": "Moves the caret position (dot) to some other position, leaving behind the mark. This is useful for making selections.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edot\u003c/code\u003e - the new position to move the caret to \u0026gt;\u003d0"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.text.Caret",
  "annotations": [],
  "tagMap": {}
}