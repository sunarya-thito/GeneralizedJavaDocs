{
  "packageName": "javax.swing.text",
  "simpleName": "TableView",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.BoxView",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.text.TableView$TableRow",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTableRow",
      "comment": "Creates a new table row.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element"
        ],
        "return": [
          "the row"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.TableView$TableCell",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createTableCell",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - an element"
        ],
        "return": [
          "the cell"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "views"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Change the child views. This is implemented to provide the superclass behavior and invalidate the grid so that rows and columns will be recalculated.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html#replace(int,int,javax.swing.text.View%5B%5D)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html\" title\u003d\"class in javax.swing.text\"\u003eBoxView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting index into the child views to insert the new views; this should be a value \u0026gt;\u003d 0 and \u0026lt;\u003d getViewCount",
          "\u003ccode\u003elength\u003c/code\u003e - the number of existing child views to remove; This should be a value \u0026gt;\u003d 0 and \u0026lt;\u003d (getViewCount() - offset)",
          "\u003ccode\u003eviews\u003c/code\u003e - the child views to add; this value can be \n\u003ccode\u003enull\u003c/code\u003eto indicate no children are being added (useful to remove)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSpan"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "offsets"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "spans"
          }
        },
        {
          "type": {
            "name": "javax.swing.SizeRequirements",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "reqs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "layoutColumns",
      "comment": "Lays out the columns to fit within the given target span. Returns the results through offsets and spans.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etargetSpan\u003c/code\u003e - the given span for total of all the table columns",
          "\u003ccode\u003ereqs\u003c/code\u003e - the requirements desired for each column. This is the column maximum of the cells minimum, preferred, and maximum requested span",
          "\u003ccode\u003espans\u003c/code\u003e - the return value of how much to allocated to each column",
          "\u003ccode\u003eoffsets\u003c/code\u003e - the return value of the offset from the origin for each column"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSpan"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "offsets"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "spans"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "layoutMinorAxis",
      "comment": "Perform layout for the minor axis of the box (i.e. the axis orthogonal to the axis that it represents). The results of the layout should be placed in the given arrays which represent the allocations to the children along the minor axis. This is called by the superclass whenever the layout needs to be updated along the minor axis. This is implemented to call the layoutColumns method, and then forward to the superclass to actually carry out the layout of the tables rows.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html#layoutMinorAxis(int,int,int%5B%5D,int%5B%5D)\"\u003elayoutMinorAxis\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html\" title\u003d\"class in javax.swing.text\"\u003eBoxView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etargetSpan\u003c/code\u003e - the total span given to the view, which would be used to layout the children.",
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being layed out.",
          "\u003ccode\u003eoffsets\u003c/code\u003e - the offsets from the origin of the view for each of the child views. This is a return value and is filled in by the implementation of this method.",
          "\u003ccode\u003espans\u003c/code\u003e - the span of each child view. This is a return value and is filled in by the implementation of this method."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.SizeRequirements",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "javax.swing.SizeRequirements",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "calculateMinorAxisRequirements",
      "comment": "Calculate the requirements for the minor axis. This is called by the superclass whenever the requirements need to be updated (i.e. a preferenceChanged was messaged through this view). This is implemented to calculate the requirements as the sum of the requirements of the columns.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/SizeRequirements.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eSizeRequirements\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html#calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)\"\u003ecalculateMinorAxisRequirements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BoxView.html\" title\u003d\"class in javax.swing.text\"\u003eBoxView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - the axis being studied",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object; if \n\u003ccode\u003enull\u003c/code\u003e one will be created"
        ],
        "return": [
          "the newly initialized \n\u003ccode\u003eSizeRequirements\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getViewAtPosition",
      "comment": "Fetches the child view that represents the given position in the model. This is implemented to walk through the children looking for a range that contains the given position. In this view the children do not necessarily have a one to one mapping with the child elements.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html#getViewAtPosition(int,java.awt.Rectangle)\"\u003egetViewAtPosition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/CompositeView.html\" title\u003d\"class in javax.swing.text\"\u003eCompositeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the search position \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocation to the table on entry, and the allocation of the view containing the position on exit"
        ],
        "return": [
          "the view representing the given position, or \n\u003ccode\u003enull\u003c/code\u003e if there isn\u0027t one"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a TableView for the given element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the element that this view is responsible for"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.text.TableView$TableCell",
    "javax.swing.text.TableView$TableRow"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.text.TableView",
  "comment": "\u003cp\u003e Implements View interface for a table, that is composed of an element structure where the child elements of the element this view is responsible for represent rows and the child elements of the row elements are cells. The cell elements can have an arbitrary element structure under them, which will be built with the ViewFactory returned by the getViewFactory method. \u003c/p\u003e\n\u003cpre\u003e\n \u0026nbsp;  TABLE\n \u0026nbsp;    ROW\n \u0026nbsp;      CELL\n \u0026nbsp;      CELL\n \u0026nbsp;    ROW\n \u0026nbsp;      CELL\n \u0026nbsp;      CELL\n\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e This is implemented as a hierarchy of boxes, the table itself is a vertical box, the rows are horizontal boxes, and the cells are vertical boxes. The cells are allowed to span multiple columns and rows. By default, the table can be thought of as being formed over a grid (i.e. somewhat like one would find in gridbag layout), where table cells can request to span more than one grid cell. The default horizontal span of table cells will be based upon this grid, but can be changed by reimplementing the requested span of the cell (i.e. table cells can have independent spans if desired).\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eView\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}