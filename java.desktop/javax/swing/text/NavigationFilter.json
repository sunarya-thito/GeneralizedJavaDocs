{
  "packageName": "javax.swing.text",
  "simpleName": "NavigationFilter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.NavigationFilter$FilterBypass",
            "type": "Class"
          },
          "field": {
            "name": "fb"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dot"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "bias"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDot",
      "comment": "Invoked prior to the Caret setting the dot. The default implementation calls directly into the FilterBypass with the passed in arguments. Subclasses may wish to conditionally call super with a different location, or invoke the necessary method on the FilterBypass",
      "tagMap": {
        "param": [
          "\u003ccode\u003efb\u003c/code\u003e - FilterBypass that can be used to mutate caret position",
          "\u003ccode\u003edot\u003c/code\u003e - the position \u0026gt;\u003d 0",
          "\u003ccode\u003ebias\u003c/code\u003e - Bias to place the dot at"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.NavigationFilter$FilterBypass",
            "type": "Class"
          },
          "field": {
            "name": "fb"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dot"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "bias"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "moveDot",
      "comment": "Invoked prior to the Caret moving the dot. The default implementation calls directly into the FilterBypass with the passed in arguments. Subclasses may wish to conditionally call super with a different location, or invoke the necessary methods on the FilterBypass.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efb\u003c/code\u003e - FilterBypass that can be used to mutate caret position",
          "\u003ccode\u003edot\u003c/code\u003e - the position \u0026gt;\u003d 0",
          "\u003ccode\u003ebias\u003c/code\u003e - Bias for new location"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.JTextComponent",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "bias"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasRet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextVisualPositionFrom",
      "comment": "Returns the next visual position to place the caret at from an existing position. The default implementation simply forwards the method to the root View. Subclasses may wish to further restrict the location based on additional criteria.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - JTextComponent containing text",
          "\u003ccode\u003epos\u003c/code\u003e - Position used in determining next position",
          "\u003ccode\u003ebias\u003c/code\u003e - Bias used in determining next position",
          "\u003ccode\u003edirection\u003c/code\u003e - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This will be one of the following values: \n\u003cul\u003e \n \u003cli\u003eSwingConstants.WEST \u003c/li\u003e\n \u003cli\u003eSwingConstants.EAST \u003c/li\u003e\n \u003cli\u003eSwingConstants.NORTH \u003c/li\u003e\n \u003cli\u003eSwingConstants.SOUTH \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - Used to return resulting Bias of next position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - for a bad location within a document model",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edirection\u003c/code\u003e doesn\u0027t have one of the legal values above"
        ],
        "return": [
          "the location within the model that best represents the next location visual position"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a NavigationFilter.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "javax.swing.text.NavigationFilter$FilterBypass"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.NavigationFilter",
  "comment": "\u003ccode\u003eNavigationFilter\u003c/code\u003e can be used to restrict where the cursor can be positioned. When the default cursor positioning actions attempt to reposition the cursor they will call into the \n\u003ccode\u003eNavigationFilter\u003c/code\u003e, assuming the \n\u003ccode\u003eJTextComponent\u003c/code\u003e has a non-null \n\u003ccode\u003eNavigationFilter\u003c/code\u003e set. In this manner the \n\u003ccode\u003eNavigationFilter\u003c/code\u003e can effectively restrict where the cursor can be positioned. Similarly \n\u003ccode\u003eDefaultCaret\u003c/code\u003e will call into the \n\u003ccode\u003eNavigationFilter\u003c/code\u003e when the user is changing the selection to further restrict where the cursor can be positioned. \n\u003cp\u003e Subclasses can conditionally call into supers implementation to restrict where the cursor can be placed, or call directly into the \u003ccode\u003eFilterBypass\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Caret.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eCaret\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultCaret.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eDefaultCaret\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eView\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}