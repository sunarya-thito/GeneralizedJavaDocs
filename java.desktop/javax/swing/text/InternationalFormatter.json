{
  "packageName": "javax.swing.text",
  "simpleName": "InternationalFormatter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.DefaultFormatter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.Format",
            "type": "Class"
          },
          "name": "format",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFormat",
      "comment": "Sets the format that dictates the legal values that can be edited and displayed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - \n\u003ccode\u003eFormat\u003c/code\u003e instance used for converting from/to Strings"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.Format",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFormat",
      "comment": "Returns the format that dictates the legal values that can be edited and displayed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Format instance used for converting from/to Strings"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "minimum",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimum",
      "comment": "Sets the minimum permissible value. If the valueClass has not been specified, and minimum is non null, the valueClass will be set to that of the class of minimum.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#setValueClass(java.lang.Class)\"\u003e\u003ccode\u003eDefaultFormatter.setValueClass(java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eminimum\u003c/code\u003e - Minimum legal value that can be input"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimum",
      "comment": "Returns the minimum permissible value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Minimum legal value that can be input"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Comparable",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "max",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximum",
      "comment": "Sets the maximum permissible value. If the valueClass has not been specified, and max is non null, the valueClass will be set to that of the class of max.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#setValueClass(java.lang.Class)\"\u003e\u003ccode\u003eDefaultFormatter.setValueClass(java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - Maximum legal value that can be input"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximum",
      "comment": "Returns the maximum permissible value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Maximum legal value that can be input"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JFormattedTextField",
            "type": "Class"
          },
          "name": "ftf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "install",
      "comment": "Installs the DefaultFormatter onto a particular JFormattedTextField. This will invoke valueToString to convert the current value from the JFormattedTextField to a String. This will then install the Actions from getActions, the DocumentFilter returned from getDocumentFilter and the NavigationFilter returned from getNavigationFilter onto the JFormattedTextField. Subclasses will typically only need to override this if they wish to install additional listeners on the JFormattedTextField. If there is a ParseException in converting the current value to a String, this will set the text to an empty String, and mark the JFormattedTextField as being in an invalid state. While this is a public method, this is typically only useful for subclassers of JFormattedTextField. JFormattedTextField will invoke this method at the appropriate times when the value changes, or its internal state changes.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#install(javax.swing.JFormattedTextField)\"\u003einstall\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eftf\u003c/code\u003e - JFormattedTextField to format for, may be null indicating uninstall from current JFormattedTextField."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "valueToString",
      "comment": "Returns a String representation of the Object value. This invokes format on the current Format.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#valueToString(java.lang.Object)\"\u003evalueToString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Value to convert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if there is an error in the conversion"
        ],
        "return": [
          "String representation of value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.text.ParseException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stringToValue",
      "comment": "Returns the Object representation of the String text.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#stringToValue(java.lang.String)\"\u003estringToValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - \n\u003ccode\u003eString\u003c/code\u003e to convert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/ParseException.html\" title\u003d\"class in java.text\"\u003eParseException\u003c/a\u003e\u003c/code\u003e - if there is an error in the conversion"
        ],
        "return": [
          "\u003ccode\u003eObject\u003c/code\u003e representation of text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.Format$Field",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFields",
      "comment": "Returns the Format.Field constants associated with the text at offset. If offset is not a valid location into the current text, this will return an empty array.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - offset into text to be examined"
        ],
        "return": [
          "Format.Field constants associated with the text at the given position."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.CloneNotSupportedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of the DefaultFormatter.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/DefaultFormatter.html\" title\u003d\"class in javax.swing.text\"\u003eDefaultFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CloneNotSupportedException.html\" title\u003d\"class in java.lang\"\u003eCloneNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the object\u0027s class does not support the \n\u003ccode\u003eCloneable\u003c/code\u003e interface. Subclasses that override the \n\u003ccode\u003eclone\u003c/code\u003e method can also throw this exception to indicate that an instance cannot be cloned."
        ],
        "return": [
          "copy of the DefaultFormatter"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getActions",
      "comment": "If getSupportsIncrement returns true, this returns two Actions suitable for incrementing/decrementing the value.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatter.html#getActions()\"\u003egetActions\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JFormattedTextField.AbstractFormatter.html\" title\u003d\"class in javax.swing\"\u003eJFormattedTextField.AbstractFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Array of Actions to install on JFormattedTextField"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an InternationalFormatter with no Format specified.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.Format",
            "type": "Class"
          },
          "name": "format",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an InternationalFormatter with the specified Format instance.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - Format instance used for converting from/to Strings"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.InternationalFormatter",
  "comment": "\u003ccode\u003eInternationalFormatter\u003c/code\u003e extends \n\u003ccode\u003eDefaultFormatter\u003c/code\u003e, using an instance of \n\u003ccode\u003ejava.text.Format\u003c/code\u003e to handle the conversion to a String, and the conversion from a String. \n\u003cp\u003e If \u003ccode\u003egetAllowsInvalid()\u003c/code\u003e is false, this will ask the \u003ccode\u003eFormat\u003c/code\u003e to format the current text on every edit. \u003c/p\u003e\n\u003cp\u003e You can specify a minimum and maximum value by way of the \u003ccode\u003esetMinimum\u003c/code\u003e and \u003ccode\u003esetMaximum\u003c/code\u003e methods. In order for this to work the values returned from \u003ccode\u003estringToValue\u003c/code\u003e must be comparable to the min/max values by way of the \u003ccode\u003eComparable\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003e Be careful how you configure the \u003ccode\u003eFormat\u003c/code\u003e and the \u003ccode\u003eInternationalFormatter\u003c/code\u003e, as it is possible to create a situation where certain values can not be input. Consider the date format \u0027M/d/yy\u0027, an \u003ccode\u003eInternationalFormatter\u003c/code\u003e that is always valid (\u003ccode\u003esetAllowsInvalid(false)\u003c/code\u003e), is in overwrite mode (\u003ccode\u003esetOverwriteMode(true)\u003c/code\u003e) and the date 7/1/99. In this case the user will not be able to enter a two digit month or day of month. To avoid this, the format should be \u0027MM/dd/yy\u0027. \u003c/p\u003e\n\u003cp\u003e If \u003ccode\u003eInternationalFormatter\u003c/code\u003e is configured to only allow valid values (\u003ccode\u003esetAllowsInvalid(false)\u003c/code\u003e), every valid edit will result in the text of the \u003ccode\u003eJFormattedTextField\u003c/code\u003e being completely reset from the \u003ccode\u003eFormat\u003c/code\u003e. The cursor position will also be adjusted as literal characters are added/removed from the resulting String. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eInternationalFormatter\u003c/code\u003e\u0027s behavior of \u003ccode\u003estringToValue\u003c/code\u003e is slightly different than that of \u003ccode\u003eDefaultTextFormatter\u003c/code\u003e, it does the following: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e\u003ccode\u003eparseObject\u003c/code\u003e is invoked on the \u003ccode\u003eFormat\u003c/code\u003e specified by \u003ccode\u003esetFormat\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eIf a Class has been set for the values (\u003ccode\u003esetValueClass\u003c/code\u003e), supers implementation is invoked to convert the value returned from \u003ccode\u003eparseObject\u003c/code\u003e to the appropriate class. \u003c/li\u003e\n \u003cli\u003eIf a \u003ccode\u003eParseException\u003c/code\u003e has not been thrown, and the value is outside the min/max a \u003ccode\u003eParseException\u003c/code\u003e is thrown. \u003c/li\u003e\n \u003cli\u003eThe value is returned. \u003c/li\u003e\n\u003c/ol\u003e \n\u003ccode\u003eInternationalFormatter\u003c/code\u003e implements \n\u003ccode\u003estringToValue\u003c/code\u003e in this manner so that you can specify an alternate Class than \n\u003ccode\u003eFormat\u003c/code\u003e may return. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}