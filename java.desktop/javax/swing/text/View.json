{
  "packageName": "javax.swing.text",
  "simpleName": "View",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BadBreakWeight",
      "comment": "The weight to indicate a view is a bad break opportunity for the purpose of formatting. This value indicates that no attempt should be made to break the view into fragments as the view has not been written to support fragmenting.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getBreakWeight(int,float,float)\"\u003e\u003ccode\u003egetBreakWeight(int, float, float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#GoodBreakWeight\"\u003e\u003ccode\u003eGoodBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ExcellentBreakWeight\"\u003e\u003ccode\u003eExcellentBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ForcedBreakWeight\"\u003e\u003ccode\u003eForcedBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.View.BadBreakWeight\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GoodBreakWeight",
      "comment": "The weight to indicate a view supports breaking, but better opportunities probably exist.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getBreakWeight(int,float,float)\"\u003e\u003ccode\u003egetBreakWeight(int, float, float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#BadBreakWeight\"\u003e\u003ccode\u003eBadBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ExcellentBreakWeight\"\u003e\u003ccode\u003eExcellentBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ForcedBreakWeight\"\u003e\u003ccode\u003eForcedBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.View.GoodBreakWeight\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ExcellentBreakWeight",
      "comment": "The weight to indicate a view supports breaking, and this represents a very attractive place to break.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getBreakWeight(int,float,float)\"\u003e\u003ccode\u003egetBreakWeight(int, float, float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#BadBreakWeight\"\u003e\u003ccode\u003eBadBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#GoodBreakWeight\"\u003e\u003ccode\u003eGoodBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ForcedBreakWeight\"\u003e\u003ccode\u003eForcedBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.View.ExcellentBreakWeight\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ForcedBreakWeight",
      "comment": "The weight to indicate a view supports breaking, and must be broken to be represented properly when placed in a view that formats its children by breaking them.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getBreakWeight(int,float,float)\"\u003e\u003ccode\u003egetBreakWeight(int, float, float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#BadBreakWeight\"\u003e\u003ccode\u003eBadBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#GoodBreakWeight\"\u003e\u003ccode\u003eGoodBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ExcellentBreakWeight\"\u003e\u003ccode\u003eExcellentBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.View.ForcedBreakWeight\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "X_AXIS",
      "comment": "Axis for format/break operations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.View.X_AXIS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "Y_AXIS",
      "comment": "Axis for format/break operations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.View.Y_AXIS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParent",
      "comment": "Returns the parent of the view.",
      "tagMap": {
        "return": [
          "the parent, or \n\u003ccode\u003enull\u003c/code\u003e if none exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isVisible",
      "comment": "Returns a boolean that indicates whether the view is visible or not. By default all views are visible.",
      "tagMap": {
        "return": [
          "always returns true"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPreferredSpan",
      "comment": "Determines the preferred span for this view along an axis.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "the span the view would like to be rendered into. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose to resize or break the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimumSpan",
      "comment": "Determines the minimum span for this view along an axis.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003egetPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "the minimum span the view can be rendered into"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumSpan",
      "comment": "Determines the maximum span for this view along an axis.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getPreferredSpan(int)\"\u003e\u003ccode\u003egetPreferredSpan(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "the maximum span the view can be rendered into"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "child"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferenceChanged",
      "comment": "Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout. By default this just propagates upward to the next parent. The root view will call revalidate on the associated text component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#revalidate()\"\u003e\u003ccode\u003eJComponent.revalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003echild\u003c/code\u003e - the child view",
          "\u003ccode\u003ewidth\u003c/code\u003e - true if the width preference has changed",
          "\u003ccode\u003eheight\u003c/code\u003e - true if the height preference has changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlignment",
      "comment": "Determines the desired alignment for this view along an axis. The desired alignment is returned. This should be a value \u003e\u003d 0.0 and \u003c\u003d 1.0, where 0 indicates alignment at the origin and 1.0 indicates alignment to the full span away from the origin. An alignment of 0.5 would be the center of the view.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "the value 0.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "allocation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "paint",
      "comment": "Renders using the given rendering surface and area on that surface. The view may need to do layout and create child views to enable itself to render into the given allocation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the rendering surface to use",
          "\u003ccode\u003eallocation\u003c/code\u003e - the allocated region to render into"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParent",
      "comment": "Establishes the parent view for this view. This is guaranteed to be called before any other methods if the parent view is functioning properly. This is also the last method called, since it is called to indicate the view has been removed from the hierarchy as well. When this method is called to set the parent to null, this method does the same for each of its children, propagating the notification that they have been disconnected from the view tree. If this is reimplemented, super.setParent() should be called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the new parent, or \n\u003ccode\u003enull\u003c/code\u003e if the view is being removed from a parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewCount",
      "comment": "Returns the number of views in this view. Since the default is to not be a composite view this returns 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getViewCount()\"\u003e\u003ccode\u003egetViewCount()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of views \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getView",
      "comment": "Gets the nth child view. Since there are no children by default, this returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the number of the view to get, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026lt; getViewCount()"
        ],
        "return": [
          "the view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAll",
      "comment": "Removes all of the children. This is a convenience call to replace.",
      "tagMap": {
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes one of the children at the given position. This is a convenience call to replace.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the position"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts a single child view. This is a convenience call to replace.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#replace(int,int,javax.swing.text.View%5B%5D)\"\u003e\u003ccode\u003ereplace(int, int, javax.swing.text.View[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffs\u003c/code\u003e - the offset of the view to insert before \u0026gt;\u003d 0",
          "\u003ccode\u003ev\u003c/code\u003e - the view"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends a single child view. This is a convenience call to replace.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#replace(int,int,javax.swing.text.View%5B%5D)\"\u003e\u003ccode\u003ereplace(int, int, javax.swing.text.View[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the view"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "views"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Replaces child views. If there are no views to remove this acts as an insert. If there are no views to add this acts as a remove. Views being removed will have the parent set to null, and the internal reference to them removed so that they can be garbage collected. This is implemented to do nothing, because by default a view has no children.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the starting index into the child views to insert the new views. This should be a value \u0026gt;\u003d 0 and \u0026lt;\u003d getViewCount",
          "\u003ccode\u003elength\u003c/code\u003e - the number of existing child views to remove This should be a value \u0026gt;\u003d 0 and \u0026lt;\u003d (getViewCount() - offset).",
          "\u003ccode\u003eviews\u003c/code\u003e - the child views to add. This value can be \n\u003ccode\u003enull\u003c/code\u003e to indicate no children are being added (useful to remove)."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewIndex",
      "comment": "Returns the child view index representing the given position in the model. By default a view has no children so this is implemented to return -1 to indicate there is no valid child index for any position.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position \u0026gt;\u003d 0",
          "\u003ccode\u003eb\u003c/code\u003e - the bias"
        ],
        "return": [
          "index of the view representing the given position, or -1 if no view represents that position"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChildAllocation",
      "comment": "Fetches the allocation for the given child view. This enables finding out where various views are located, without assuming how the views store their location. This returns null since the default is to not have any child views.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the child, \u0026gt;\u003d 0 \u0026amp;\u0026amp; \u0026lt; \n\u003ccode\u003egetViewCount()\u003c/code\u003e",
          "\u003ccode\u003ea\u003c/code\u003e - the allocation to this view"
        ],
        "return": [
          "the allocation to the child"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasRet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextVisualPositionFrom",
      "comment": "Provides a way to determine the next visually represented model location at which one might place a caret. Some views may not be visible, they might not be in the same order found in the model, or they just might not allow access to some of the locations in the model. This method enables specifying a position to convert within the range of \u003e\u003d0. If the value is -1, a position will be calculated automatically. If the value \u003c -1, the BadLocationException will be thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert",
          "\u003ccode\u003eb\u003c/code\u003e - the bias",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region in which to render",
          "\u003ccode\u003edirection\u003c/code\u003e - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This will be one of the following values: \n\u003cul\u003e \n \u003cli\u003eSwingConstants.WEST \u003c/li\u003e\n \u003cli\u003eSwingConstants.EAST \u003c/li\u003e\n \u003cli\u003eSwingConstants.NORTH \u003c/li\u003e\n \u003cli\u003eSwingConstants.SOUTH \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - the returned bias"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given position is not a valid position within the document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edirection\u003c/code\u003e doesn\u0027t have one of the legal values above"
        ],
        "return": [
          "the location within the model that best represents the next location visual position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "modelToView",
      "comment": "Provides a mapping, for a given character, from the document model coordinate space to the view coordinate space.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eviewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position of the desired character (\u0026gt;\u003d0)",
          "\u003ccode\u003ea\u003c/code\u003e - the area of the view, which encompasses the requested character",
          "\u003ccode\u003eb\u003c/code\u003e - the bias toward the previous character or the next character represented by the offset, in case the position is a boundary of two views; \n\u003ccode\u003eb\u003c/code\u003e will have one of these values: \n\u003cul\u003e \n \u003cli\u003e \u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the specified position does not represent a valid location in the associated document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is not one of the legal \n\u003ccode\u003ePosition.Bias\u003c/code\u003e values listed above"
        ],
        "return": [
          "the bounding box, in view coordinate space, of the character at the specified position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p0"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p1"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class"
          },
          "field": {
            "name": "b1"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Provides a mapping, for a given region, from the document model coordinate space to the view coordinate space. The specified region is created as a union of the first and last character positions.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eviewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep0\u003c/code\u003e - the position of the first character (\u0026gt;\u003d0)",
          "\u003ccode\u003eb0\u003c/code\u003e - the bias of the first character position, toward the previous character or the next character represented by the offset, in case the position is a boundary of two views; \n\u003ccode\u003eb0\u003c/code\u003e will have one of these values: \n\u003cul style\u003d\"list-style-type:none\"\u003e \n \u003cli\u003e \u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003ep1\u003c/code\u003e - the position of the last character (\u0026gt;\u003d0)",
          "\u003ccode\u003eb1\u003c/code\u003e - the bias for the second character position, defined one of the legal values shown above",
          "\u003ccode\u003ea\u003c/code\u003e - the area of the view, which encompasses the requested region"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb0\u003c/code\u003e or \n\u003ccode\u003eb1\u003c/code\u003e are not one of the legal \n\u003ccode\u003ePosition.Bias\u003c/code\u003e values listed above"
        ],
        "return": [
          "the bounding box which is a union of the region specified by the first and last character positions"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.Position$Bias",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "biasReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "viewToModel",
      "comment": "Provides a mapping from the view coordinate space to the logical coordinate space of the model. The biasReturn argument will be filled in to indicate that the point given is closer to the next character in the model or the previous character in the model.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region in which to render",
          "\u003ccode\u003ebiasReturn\u003c/code\u003e - the returned bias"
        ],
        "return": [
          "the location within the model that best represents the given point in the view \u0026gt;\u003d 0. The \n\u003ccode\u003ebiasReturn\u003c/code\u003e argument will be filled in to indicate that the point given is closer to the next character in the model or the previous character in the model."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertUpdate",
      "comment": "Gives notification that something was inserted into the document in a location that this view is responsible for. To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: updateChildren is called if there were any changes to the element this view is responsible for. If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model. forwardUpdate is called to forward the DocumentEvent to the appropriate child views. updateLayout is called to give the view a chance to either repair its layout, to reschedule layout, or do nothing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003einsertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeUpdate",
      "comment": "Gives notification that something was removed from the document in a location that this view is responsible for. To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: updateChildren is called if there were any changes to the element this view is responsible for. If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model. forwardUpdate is called to forward the DocumentEvent to the appropriate child views. updateLayout is called to give the view a chance to either repair its layout, to reschedule layout, or do nothing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eremoveUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "changedUpdate",
      "comment": "Gives notification from the document that attributes were changed in a location that this view is responsible for. To reduce the burden to subclasses, this functionality is spread out into the following calls that subclasses can reimplement: updateChildren is called if there were any changes to the element this view is responsible for. If this view has child views that are represent the child elements, then this method should do whatever is necessary to make sure the child views correctly represent the model. forwardUpdate is called to forward the DocumentEvent to the appropriate child views. updateLayout is called to give the view a chance to either repair its layout, to reschedule layout, or do nothing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003echangedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Document",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDocument",
      "comment": "Fetches the model associated with the view.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getDocument()\"\u003e\u003ccode\u003egetDocument()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the view model, \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStartOffset",
      "comment": "Fetches the portion of the model for which this view is responsible.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getStartOffset()\"\u003e\u003ccode\u003egetStartOffset()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the starting offset into the model \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEndOffset",
      "comment": "Fetches the portion of the model for which this view is responsible.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getEndOffset()\"\u003e\u003ccode\u003egetEndOffset()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the ending offset into the model \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getElement",
      "comment": "Fetches the structural portion of the subject that this view is mapped to. The view may not be responsible for the entire portion of the element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#getElement()\"\u003e\u003ccode\u003egetElement()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the subject"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGraphics",
      "comment": "Fetch a Graphics for rendering. This can be used to determine font characteristics, and will be different for a print view than a component view.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eGraphics\u003c/code\u003e object for rendering"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AttributeSet",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAttributes",
      "comment": "Fetches the attributes to use when rendering. By default this simply returns the attributes of the associated element. This method should be used rather than using the element directly to obtain access to the attributes to allow view-specific attributes to be mixed in or to allow the view to have view-specific conversion of attributes by subclasses. Each view should document what attributes it recognizes for the purpose of rendering or layout, and should always access them through the AttributeSet returned by this method.",
      "tagMap": {
        "return": [
          "the attributes to use when rendering"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "breakView",
      "comment": "Tries to break this view on the given axis. This is called by views that try to do formatting of their children. For example, a view of a paragraph will typically try to place its children into row and views representing chunks of text can sometimes be broken down into smaller pieces. This is implemented to return the view itself, which represents the default behavior on not being breakable. If the view does support breaking, the starting offset of the view returned should be the given offset, and the end offset should be less than or equal to the end offset of the view being broken.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ParagraphView.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eParagraphView\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e",
          "\u003ccode\u003eoffset\u003c/code\u003e - the location in the document model that a broken fragment would occupy \u0026gt;\u003d 0. This would be the starting offset of the fragment returned",
          "\u003ccode\u003epos\u003c/code\u003e - the position along the axis that the broken view would occupy \u0026gt;\u003d 0. This may be useful for things like tab calculations",
          "\u003ccode\u003elen\u003c/code\u003e - specifies the distance along the axis where a potential break is desired \u0026gt;\u003d 0"
        ],
        "return": [
          "the fragment of the view that represents the given span, if the view can be broken. If the view doesn\u0027t support breaking behavior, the view itself is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.View",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p0"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "p1"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createFragment",
      "comment": "Creates a view that represents a portion of the element. This is potentially useful during formatting operations for taking measurements of fragments of the view. If the view doesn\u0027t support fragmenting (the default), it should return itself.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/LabelView.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eLabelView\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep0\u003c/code\u003e - the starting offset \u0026gt;\u003d 0. This should be a value greater or equal to the element starting offset and less than the element ending offset.",
          "\u003ccode\u003ep1\u003c/code\u003e - the ending offset \u0026gt; p0. This should be a value less than or equal to the elements end offset and greater than the elements starting offset."
        ],
        "return": [
          "the view fragment, or itself if the view doesn\u0027t support breaking into fragments"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBreakWeight",
      "comment": "Determines how attractive a break opportunity in this view is. This can be used for determining which view is the most attractive to call breakView on in the process of formatting. A view that represents text that has whitespace in it might be more attractive than a view that has no whitespace, for example. The higher the weight, the more attractive the break. A value equal to or lower than BadBreakWeight should not be considered for a break. A value greater than or equal to ForcedBreakWeight should be broken. This is implemented to provide the default behavior of returning BadBreakWeight unless the length is greater than the length of the view in which case the entire view represents the fragment. Unless a view has been written to support breaking behavior, it is not attractive to try and break the view. An example of a view that does support breaking is LabelView. An example of a view that uses break weight is ParagraphView.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/LabelView.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eLabelView\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/ParagraphView.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eParagraphView\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#BadBreakWeight\"\u003e\u003ccode\u003eBadBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#GoodBreakWeight\"\u003e\u003ccode\u003eGoodBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ExcellentBreakWeight\"\u003e\u003ccode\u003eExcellentBreakWeight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#ForcedBreakWeight\"\u003e\u003ccode\u003eForcedBreakWeight\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e",
          "\u003ccode\u003epos\u003c/code\u003e - the potential location of the start of the broken view \u0026gt;\u003d 0. This may be useful for calculating tab positions",
          "\u003ccode\u003elen\u003c/code\u003e - specifies the relative length from \n\u003cem\u003epos\u003c/em\u003e where a potential break is desired \u0026gt;\u003d 0"
        ],
        "return": [
          "the weight, which should be a value between ForcedBreakWeight and BadBreakWeight"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "axis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResizeWeight",
      "comment": "Determines the resizability of the view along the given axis. A value of 0 or less is not resizable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaxis\u003c/code\u003e - may be either \n\u003ccode\u003eView.X_AXIS\u003c/code\u003e or \n\u003ccode\u003eView.Y_AXIS\u003c/code\u003e"
        ],
        "return": [
          "the weight"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSize",
      "comment": "Sets the size of the view. This should cause layout of the view along the given axis, if it has any layout duties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width \u0026gt;\u003d 0",
          "\u003ccode\u003eheight\u003c/code\u003e - the height \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContainer",
      "comment": "Fetches the container hosting the view. This is useful for things like scheduling a repaint, finding out the host components font, etc. The default implementation of this is to forward the query to the parent view.",
      "tagMap": {
        "return": [
          "the container, \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.ViewFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewFactory",
      "comment": "Fetches the ViewFactory implementation that is feeding the view hierarchy. Normally the views are given this as an argument to updates from the model when they are most likely to need the factory, but this method serves to provide it at other times.",
      "tagMap": {
        "return": [
          "the factory, \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "allocation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolTipText",
      "comment": "Returns the tooltip text at the specified location. The default implementation returns the value from the child View identified by the passed in location.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getToolTipText(java.awt.event.MouseEvent)\"\u003e\u003ccode\u003eJTextComponent.getToolTipText(java.awt.event.MouseEvent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate",
          "\u003ccode\u003eallocation\u003c/code\u003e - current allocation of the View."
        ],
        "return": [
          "the tooltip text at the specified location"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "allocation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getViewIndex",
      "comment": "Returns the child view index representing the given position in the view. This iterates over all the children returning the first with a bounds that contains x, y.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate",
          "\u003ccode\u003eallocation\u003c/code\u003e - current allocation of the View."
        ],
        "return": [
          "index of the view representing the given location, or -1 if no view represents that position"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent$ElementChange",
            "type": "Class"
          },
          "field": {
            "name": "ec"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateChildren",
      "comment": "Updates the child views in response to receiving notification that the model changed, and there is change record for the element this view is responsible for. This is implemented to assume the child views are directly responsible for the child elements of the element this view represents. The ViewFactory is used to create child views for each element specified as added in the ElementChange, starting at the index specified in the given ElementChange. The number of child views representing the removed elements specified are removed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003einsertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eremoveUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003echangedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eec\u003c/code\u003e - the change information for the element this view is responsible for. This should not be \n\u003ccode\u003enull\u003c/code\u003e if this method gets called",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to build child views"
        ],
        "return": [
          "whether or not the child views represent the child elements of the element this view is responsible for. Some views create children that represent a portion of the element they are responsible for, and should return false. This information is used to determine if views in the range of the added elements should be forwarded to or not"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent$ElementChange",
            "type": "Class"
          },
          "field": {
            "name": "ec"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "forwardUpdate",
      "comment": "Forwards the given DocumentEvent to the child views that need to be notified of the change to the model. If there were changes to the element this view is responsible for, that should be considered when forwarding (i.e. new child views should not get notified).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003einsertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eremoveUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003echangedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eec\u003c/code\u003e - changes to the element this view is responsible for (may be \n\u003ccode\u003enull\u003c/code\u003e if there were no changes).",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.View",
            "type": "Class"
          },
          "field": {
            "name": "v"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.ViewFactory",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "forwardUpdateToView",
      "comment": "Forwards the DocumentEvent to the give child view. This simply messages the view with a call to insertUpdate, removeUpdate, or changedUpdate depending upon the type of the event. This is called by forwardUpdate to forward the event to children that need it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#forwardUpdate(javax.swing.event.DocumentEvent.ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eforwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the child view to forward the event to",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ef\u003c/code\u003e - the factory to use to rebuild if the view has children"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent$ElementChange",
            "type": "Class"
          },
          "field": {
            "name": "ec"
          }
        },
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "updateLayout",
      "comment": "Updates the layout in response to receiving notification of change from the model. This is implemented to call preferenceChanged to reschedule a new layout if the ElementChange record is not null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003einsertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eremoveUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003echangedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eec\u003c/code\u003e - changes to the element this view is responsible for (may be \n\u003ccode\u003enull\u003c/code\u003e if there were no changes)",
          "\u003ccode\u003ee\u003c/code\u003e - the change information from the associated document",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modelToView",
      "comment": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it. This is implemented to default the bias to Position.Bias.Forward which was previously implied.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003e\u003ccode\u003emodelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region in which to render"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the bounding box of the given position is returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "viewToModel",
      "comment": "Provides a mapping from the view coordinate space to the logical coordinate space of the model.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eviewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate \u0026gt;\u003d 0",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region in which to render"
        ],
        "return": [
          "the location within the model that best represents the given point in the view \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Element",
            "type": "Class"
          },
          "field": {
            "name": "elem"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new View object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelem\u003c/code\u003e - the \n\u003ccode\u003eElement\u003c/code\u003e to represent"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.text.View",
  "comment": "\u003cp\u003e A very important part of the text package is the \u003ccode\u003eView\u003c/code\u003e class. As the name suggests it represents a view of the text model, or a piece of the text model. It is this class that is responsible for the look of the text component. The view is not intended to be some completely new thing that one must learn, but rather is much like a lightweight component. \u003c/p\u003e\n\u003cp\u003e By default, a view is very light. It contains a reference to the parent view from which it can fetch many things without holding state, and it contains a reference to a portion of the model (\u003ccode\u003eElement\u003c/code\u003e). A view does not have to exactly represent an element in the model, that is simply a typical and therefore convenient mapping. A view can alternatively maintain a couple of Position objects to maintain its location in the model (i.e. represent a fragment of an element). This is typically the result of formatting where views have been broken down into pieces. The convenience of a substantial relationship to the element makes it easier to build factories to produce the views, and makes it easier to keep track of the view pieces as the model is changed and the view must be changed to reflect the model. Simple views therefore represent an Element directly and complex views do not. \u003c/p\u003e\n\u003cp\u003e A view has the following responsibilities: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  \u003cb\u003eParticipate in layout.\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e \n  \u003cp\u003eThe view has a \u003ccode\u003esetSize\u003c/code\u003e method which is like \u003ccode\u003edoLayout\u003c/code\u003e and \u003ccode\u003esetSize\u003c/code\u003e in \u003ccode\u003eComponent\u003c/code\u003e combined. The view has a \u003ccode\u003epreferenceChanged\u003c/code\u003e method which is like \u003ccode\u003einvalidate\u003c/code\u003e in \u003ccode\u003eComponent\u003c/code\u003e except that one can invalidate just one axis and the child requesting the change is identified. \u003c/p\u003e\n  \u003cp\u003eA View expresses the size that it would like to be in terms of three values, a minimum, a preferred, and a maximum span. Layout in a view is can be done independently upon each axis. For a properly functioning View implementation, the minimum span will be \u0026lt;\u003d the preferred span which in turn will be \u0026lt;\u003d the maximum span. \u003c/p\u003e \n  \u003cp style\u003d\"text-align:center\"\u003e\u003cimg src\u003d\"doc-files/View-flexibility.jpg\" alt\u003d\"The above text describes this graphic.\"\u003e \u003c/p\u003e\n  \u003cp\u003eThe minimum set of methods for layout are: \u003c/p\u003e\n  \u003cul\u003e \n   \u003cli\u003e\u003ca href\u003d\"#getMinimumSpan(int)\"\u003e\u003ccode\u003egetMinimumSpan\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getPreferredSpan(int)\"\u003e\u003ccode\u003egetPreferredSpan\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getMaximumSpan(int)\"\u003e\u003ccode\u003egetMaximumSpan\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getAlignment(int)\"\u003e\u003ccode\u003egetAlignment\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#preferenceChanged(javax.swing.text.View,boolean,boolean)\"\u003e\u003ccode\u003epreferenceChanged\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#setSize(float,float)\"\u003e\u003ccode\u003esetSize\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003c/ul\u003e \n  \u003cp\u003e\u003c/p\u003e\n  \u003cp\u003eThe \u003ccode\u003esetSize\u003c/code\u003e method should be prepared to be called a number of times (i.e. It may be called even if the size didn\u0027t change). The \u003ccode\u003esetSize\u003c/code\u003e method is generally called to make sure the View layout is complete prior to trying to perform an operation on it that requires an up-to-date layout. A view\u0027s size should \u003cem\u003ealways\u003c/em\u003e be set to a value within the minimum and maximum span specified by that view. Additionally, the view must always call the \u003ccode\u003epreferenceChanged\u003c/code\u003e method on the parent if it has changed the values for the layout it would like, and expects the parent to honor. The parent View is not required to recognize a change until the \u003ccode\u003epreferenceChanged\u003c/code\u003e has been sent. This allows parent View implementations to cache the child requirements if desired. The calling sequence looks something like the following: \u003c/p\u003e \n  \u003cp style\u003d\"text-align:center\"\u003e \u003cimg src\u003d\"doc-files/View-layout.jpg\" alt\u003d\"Sample calling sequence between parent view and child view:\n       setSize, getMinimum, getPreferred, getMaximum, getAlignment, setSize\"\u003e \u003c/p\u003e\n  \u003cp\u003eThe exact calling sequence is up to the layout functionality of the parent view (if the view has any children). The view may collect the preferences of the children prior to determining what it will give each child, or it might iteratively update the children one at a time. \u003c/p\u003e \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eRender a portion of the model.\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e \n  \u003cp\u003eThis is done in the paint method, which is pretty much like a component paint method. Views are expected to potentially populate a fairly large tree. A \u003ccode\u003eView\u003c/code\u003e has the following semantics for rendering: \u003c/p\u003e \n  \u003cul\u003e \n   \u003cli\u003eThe view gets its allocation from the parent at paint time, so it must be prepared to redo layout if the allocated area is different from what it is prepared to deal with. \u003c/li\u003e\n   \u003cli\u003eThe coordinate system is the same as the hosting \u003ccode\u003eComponent\u003c/code\u003e (i.e. the \u003ccode\u003eComponent\u003c/code\u003e returned by the \u003ca href\u003d\"#getContainer()\"\u003e\u003ccode\u003egetContainer\u003c/code\u003e\u003c/a\u003e method). This means a child view lives in the same coordinate system as the parent view unless the parent has explicitly changed the coordinate system. To schedule itself to be repainted a view can call repaint on the hosting \u003ccode\u003eComponent\u003c/code\u003e. \u003c/li\u003e\n   \u003cli\u003eThe default is to \u003cem\u003enot clip\u003c/em\u003e the children. It is more efficient to allow a view to clip only if it really feels it needs clipping. \u003c/li\u003e\n   \u003cli\u003eThe \u003ccode\u003eGraphics\u003c/code\u003e object given is not initialized in any way. A view should set any settings needed. \u003c/li\u003e\n   \u003cli\u003eA \u003ccode\u003eView\u003c/code\u003e is inherently transparent. While a view may render into its entire allocation, typically a view does not. Rendering is performed by traversing down the tree of \u003ccode\u003eView\u003c/code\u003e implementations. Each \u003ccode\u003eView\u003c/code\u003e is responsible for rendering its children. This behavior is depended upon for thread safety. While view implementations do not necessarily have to be implemented with thread safety in mind, other view implementations that do make use of concurrency can depend upon a tree traversal to guarantee thread safety. \u003c/li\u003e\n   \u003cli\u003eThe order of views relative to the model is up to the implementation. Although child views will typically be arranged in the same order that they occur in the model, they may be visually arranged in an entirely different order. View implementations may have Z-Order associated with them if the children are overlapping. \u003c/li\u003e\n  \u003c/ul\u003e \n  \u003cp\u003eThe methods for rendering are: \u003c/p\u003e\n  \u003cul\u003e \n   \u003cli\u003e\u003ca href\u003d\"#paint(java.awt.Graphics,java.awt.Shape)\"\u003e\u003ccode\u003epaint\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003c/ul\u003e \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eTranslate between the model and view coordinate systems.\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e \n  \u003cp\u003eBecause the view objects are produced from a factory and therefore cannot necessarily be counted upon to be in a particular pattern, one must be able to perform translation to properly locate spatial representation of the model. The methods for doing this are: \u003c/p\u003e\n  \u003cul\u003e \n   \u003cli\u003e\u003ca href\u003d\"#modelToView(int,javax.swing.text.Position.Bias,int,javax.swing.text.Position.Bias,java.awt.Shape)\"\u003e\u003ccode\u003emodelToView\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eviewToModel\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getDocument()\"\u003e\u003ccode\u003egetDocument\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getElement()\"\u003e\u003ccode\u003egetElement\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getStartOffset()\"\u003e\u003ccode\u003egetStartOffset\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#getEndOffset()\"\u003e\u003ccode\u003egetEndOffset\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003c/ul\u003e \n  \u003cp\u003e\u003c/p\u003e\n  \u003cp\u003eThe layout must be valid prior to attempting to make the translation. The translation is not valid, and must not be attempted while changes are being broadcasted from the model via a \u003ccode\u003eDocumentEvent\u003c/code\u003e. \u003c/p\u003e \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003cb\u003eRespond to changes from the model.\u003c/b\u003e \n \u003c/dt\u003e\n \u003cdd\u003e \n  \u003cp\u003eIf the overall view is represented by many pieces (which is the best situation if one want to be able to change the view and write the least amount of new code), it would be impractical to have a huge number of \u003ccode\u003eDocumentListener\u003c/code\u003es. If each view listened to the model, only a few would actually be interested in the changes broadcasted at any given time. Since the model has no knowledge of views, it has no way to filter the broadcast of change information. The view hierarchy itself is instead responsible for propagating the change information. At any level in the view hierarchy, that view knows enough about its children to best distribute the change information further. Changes are therefore broadcasted starting from the root of the view hierarchy. The methods for doing this are: \u003c/p\u003e\n  \u003cul\u003e \n   \u003cli\u003e\u003ca href\u003d\"#insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003einsertUpdate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003eremoveUpdate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003e\u003ca href\u003d\"#changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)\"\u003e\u003ccode\u003echangedUpdate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003c/ul\u003e \n  \u003cp\u003e\u003c/p\u003e\n \u003c/dd\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/dl\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}