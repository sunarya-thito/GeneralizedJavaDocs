{
  "packageName": "javax.swing.text",
  "simpleName": "PlainDocument",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.AbstractDocument",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "tabSizeAttribute",
      "comment": "Name of the attribute that specifies the tab size for tabs contained in the content. The type for the value is Integer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.PlainDocument.tabSizeAttribute\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "lineLimitAttribute",
      "comment": "Name of the attribute that specifies the maximum length of a line, if there is a maximum length. The type for the value is Integer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.text.PlainDocument.lineLimitAttribute\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.swing.text.BadLocationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offs"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertString",
      "comment": "Inserts some content into the document. Inserting content causes a write lock to be held while the actual changes are taking place, followed by notification to the observers on the thread that grabbed the write lock. This method is thread safe, although most Swing methods are not. Please see Concurrency in Swing for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#insertString(int,java.lang.String,javax.swing.text.AttributeSet)\"\u003e\u003ccode\u003eDocument.insertString(int, java.lang.String, javax.swing.text.AttributeSet)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#insertString(int,java.lang.String,javax.swing.text.AttributeSet)\"\u003einsertString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#insertString(int,java.lang.String,javax.swing.text.AttributeSet)\"\u003einsertString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoffs\u003c/code\u003e - the starting offset \u0026gt;\u003d 0",
          "\u003ccode\u003estr\u003c/code\u003e - the string to insert; does nothing with null/empty strings",
          "\u003ccode\u003ea\u003c/code\u003e - the attributes for the inserted content"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - the given insert position is not a valid position within the document"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultRootElement",
      "comment": "Gets the default root element for the document model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getDefaultRootElement()\"\u003e\u003ccode\u003eDocument.getDefaultRootElement()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html#getDefaultRootElement()\"\u003egetDefaultRootElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003eDocument\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getDefaultRootElement()\"\u003egetDefaultRootElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the root"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.AbstractDocument$AbstractElement",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultRoot",
      "comment": "Creates the root element to be used to represent the default document structure.",
      "tagMap": {
        "return": [
          "the element base"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Element",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParagraphElement",
      "comment": "Get the paragraph element containing the given position. Since this document only models lines, it returns the line instead.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#getParagraphElement(int)\"\u003egetParagraphElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - the starting offset \u0026gt;\u003d 0"
        ],
        "return": [
          "the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "chng"
          }
        },
        {
          "type": {
            "name": "javax.swing.text.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "insertUpdate",
      "comment": "Updates document structure as a result of text insertion. This will happen within a write lock. Since this document simply maps out lines, we refresh the line map.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent,javax.swing.text.AttributeSet)\"\u003einsertUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echng\u003c/code\u003e - the change event describing the dit",
          "\u003ccode\u003eattr\u003c/code\u003e - the set of attributes for the inserted text"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$DefaultDocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "chng"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "removeUpdate",
      "comment": "Updates any document structure as a result of text removal. This will happen within a write lock. Since the structure represents a line map, this just checks to see if the removal spans lines. If it does, the two lines outside of the removal area are joined together.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html#removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent)\"\u003eremoveUpdate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003eAbstractDocument\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003echng\u003c/code\u003e - the change event describing the edit"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a plain text document. A default model using GapContent is constructed and set.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.AbstractDocument$Content",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a plain text document. A default root element is created, and the tab size set to 8.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the container for the content"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.text.PlainDocument",
  "comment": "A plain document that maintains no character attributes. The default element structure for this document is a map of the lines in the text. The Element returned by getDefaultRootElement is a map of the lines, and each child element represents a line. This model does not maintain any character level attributes, but each line can be tagged with an arbitrary set of attributes. Line to offset, and offset to line translations can be quickly performed using the default root element. The structure information of the DocumentEvent\u0027s fired by edits will indicate the line structure changes. \n\u003cp\u003e The default content storage management is performed by a gapped buffer implementation (GapContent). It supports editing reasonably large documents with good efficiency when the edits are contiguous or clustered, as is typical. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/AbstractDocument.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eAbstractDocument\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}