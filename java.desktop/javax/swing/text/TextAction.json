{
  "packageName": "javax.swing.text",
  "simpleName": "TextAction",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.AbstractAction",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.swing.text.JTextComponent",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getTextComponent",
      "comment": "Determines the component to use for the action. This if fetched from the source of the ActionEvent if it\u0027s not null and can be narrowed. Otherwise, the last focused component is used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the ActionEvent"
        ],
        "return": [
          "the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "list1"
          }
        },
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "list2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "augmentList",
      "comment": "Takes one list of commands and augments it with another list of commands. The second list takes precedence over the first list; that is, when both lists contain a command with the same name, the command from the second list is used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elist1\u003c/code\u003e - the first list, may be empty but not \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003elist2\u003c/code\u003e - the second list, may be empty but not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the augmented list"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.JTextComponent",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getFocusedComponent",
      "comment": "Fetches the text component that currently has focus. This allows actions to be shared across text components which is useful for key-bindings where a large set of actions are defined, but generally used the same way across many different components.",
      "tagMap": {
        "return": [
          "the component"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JTextAction object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the action"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.text.TextAction",
  "comment": "An Action implementation useful for key bindings that are shared across a number of different text components. Because the action is shared, it must have a way of getting it\u0027s target to act upon. This class provides support to try and find a text component to operate on. The preferred way of getting the component to act upon is through the ActionEvent that is received. If the Object returned by getSource can be narrowed to a text component, it will be used. If the action event is null or can\u0027t be narrowed, the last focused text component is tried. This is determined by being used in conjunction with a JTextController which arranges to share that information with a TextAction. \n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}