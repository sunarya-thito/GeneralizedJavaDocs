{
  "packageName": "javax.swing.text",
  "simpleName": "GlyphPainter",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSpan",
      "comment": "Determine the span the glyphs given a start location (for tab expansion).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e",
          "\u003ccode\u003ep0\u003c/code\u003e - the beginning position",
          "\u003ccode\u003ep1\u003c/code\u003e - the ending position",
          "\u003ccode\u003ee\u003c/code\u003e - how to expand the tabs when encountered",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate"
        ],
        "return": [
          "the span the glyphs given a start location"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getHeight",
      "comment": "Returns of the height.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e"
        ],
        "return": [
          "of the height"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAscent",
      "comment": "Returns of the ascent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e"
        ],
        "return": [
          "of the ascent"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDescent",
      "comment": "Returns of the descent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e"
        ],
        "return": [
          "of the descent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "paint",
      "comment": "Paint the glyphs representing the given range.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e",
          "\u003ccode\u003eg\u003c/code\u003e - the graphics context",
          "\u003ccode\u003ea\u003c/code\u003e - the current allocation of the view",
          "\u003ccode\u003ep0\u003c/code\u003e - the beginning position",
          "\u003ccode\u003ep1\u003c/code\u003e - the ending position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "modelToView",
      "comment": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it. This is shared by the broken views.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#modelToView(int,java.awt.Shape,javax.swing.text.Position.Bias)\"\u003e\u003ccode\u003eView.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e containing the destination coordinate space",
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert",
          "\u003ccode\u003ebias\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e",
          "\u003ccode\u003ea\u003c/code\u003e - Bounds of the View"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - if the given position does not represent a valid location in the associated document"
        ],
        "return": [
          "the bounding box of the given position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "viewToModel",
      "comment": "Provides a mapping from the view coordinate space to the logical coordinate space of the model.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#viewToModel(float,float,java.awt.Shape,javax.swing.text.Position.Bias%5B%5D)\"\u003e\u003ccode\u003eView.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e to provide a mapping for",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003ebiasReturn\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e is returned as the zero-th element of this array"
        ],
        "return": [
          "the location within the model that best represents the given point of view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBoundedPosition",
      "comment": "Determines the model location that represents the maximum advance that fits within the given span. This could be used to break the given view. The result should be a location just shy of the given advance. This differs from viewToModel which returns the closest position which might be proud of the maximum advance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/View.html#breakView(int,int,float,float)\"\u003e\u003ccode\u003eView.breakView(int, int, float, float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the view to find the model location to break at.",
          "\u003ccode\u003ep0\u003c/code\u003e - the location in the model where the fragment should start it\u0027s representation \u0026gt;\u003d 0.",
          "\u003ccode\u003ex\u003c/code\u003e - the graphic location along the axis that the broken view would occupy \u0026gt;\u003d 0. This may be useful for things like tab calculations.",
          "\u003ccode\u003elen\u003c/code\u003e - specifies the distance into the view where a potential break is desired \u0026gt;\u003d 0."
        ],
        "return": [
          "the maximum model location possible for a break."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.GlyphView$GlyphPainter",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPainter",
      "comment": "Create a painter to use for the given GlyphView. If the painter carries state it can create another painter to represent a new GlyphView that is being created. If the painter doesn\u0027t hold any significant state, it can return itself. The default behavior is to return itself.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eGlyphView\u003c/code\u003e to provide a painter for",
          "\u003ccode\u003ep0\u003c/code\u003e - the starting document offset \u0026gt;\u003d 0",
          "\u003ccode\u003ep1\u003c/code\u003e - the ending document offset \u0026gt;\u003d p0"
        ],
        "return": [
          "a painter to use for the given GlyphView"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextVisualPositionFrom",
      "comment": "Provides a way to determine the next visually represented model location that one might place a caret. Some views may not be visible, they might not be in the same order found in the model, or they just might not allow access to some of the locations in the model.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the view to use",
          "\u003ccode\u003epos\u003c/code\u003e - the position to convert \u0026gt;\u003d 0",
          "\u003ccode\u003eb\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e",
          "\u003ccode\u003ea\u003c/code\u003e - the allocated region to render into",
          "\u003ccode\u003edirection\u003c/code\u003e - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This may be SwingConstants.WEST, SwingConstants.EAST, SwingConstants.NORTH, or SwingConstants.SOUTH.",
          "\u003ccode\u003ebiasRet\u003c/code\u003e - either \n\u003ccode\u003ePosition.Bias.Forward\u003c/code\u003e or \n\u003ccode\u003ePosition.Bias.Backward\u003c/code\u003e is returned as the zero-th element of this array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/BadLocationException.html\" title\u003d\"class in javax.swing.text\"\u003eBadLocationException\u003c/a\u003e\u003c/code\u003e - for a bad location within a document model",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - for an invalid direction"
        ],
        "return": [
          "the location within the model that best represents the next location visual position."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1033,
  "name": "javax.swing.text.GlyphView$GlyphPainter",
  "comment": "A class to perform rendering of the glyphs. This can be implemented to be stateless, or to hold some information as a cache to facilitate faster rendering and model/view translation. At a minimum, the GlyphPainter allows a View implementation to perform its duties independent of a particular version of JVM and selection of capabilities (i.e. shaping for i18n, etc).",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}