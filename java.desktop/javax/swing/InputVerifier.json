{
  "packageName": "javax.swing",
  "simpleName": "InputVerifier",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "input",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "verify",
      "comment": "Checks whether the JComponent\u0027s input is valid. This method should have no side effects. It returns a boolean indicating the status of the argument\u0027s input.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setInputVerifier(javax.swing.InputVerifier)\"\u003e\u003ccode\u003eJComponent.setInputVerifier(javax.swing.InputVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputVerifier()\"\u003e\u003ccode\u003eJComponent.getInputVerifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the JComponent to verify"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e when valid, \n\u003ccode\u003efalse\u003c/code\u003e when invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "input",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldYieldFocus",
      "comment": "Calls verify(input) to ensure that the input is valid. This method can have side effects. In particular, this method is called when the user attempts to advance focus out of the argument component into another Swing component in this window. If this method returns true, then the focus is transferred normally; if it returns false, then the focus remains in the argument component.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setInputVerifier(javax.swing.InputVerifier)\"\u003e\u003ccode\u003eJComponent.setInputVerifier(javax.swing.InputVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputVerifier()\"\u003e\u003ccode\u003eJComponent.getInputVerifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the JComponent to verify"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e when valid, \n\u003ccode\u003efalse\u003c/code\u003e when invalid"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "verifyTarget",
      "comment": "Checks whether the target JComponent that will be receiving the focus is ready to accept it. This method should be over-ridden only if it is necessary to validate the target of the focus transfer. This method should have no side effects. It returns a boolean indicating the status of the argument\u0027s input.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "By default this method returns \n\u003ccode\u003etrue\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setInputVerifier(javax.swing.InputVerifier)\"\u003e\u003ccode\u003eJComponent.setInputVerifier(javax.swing.InputVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputVerifier()\"\u003e\u003ccode\u003eJComponent.getInputVerifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the target JComponent to verify"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e when valid, \n\u003ccode\u003efalse\u003c/code\u003e when invalid"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shouldYieldFocus",
      "comment": "Is called by Swing if this InputVerifier is assigned to the source Swing component to check whether the requested focus transfer from the source to target is allowed. This method can have side effects. If this method returns true, then the focus is transferred normally; if it returns false, then the focus remains in the first argument component.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The basic implementation of this method returns the conjunction of results obtained from \n\u003ccode\u003everify(input)\u003c/code\u003e and \n\u003ccode\u003everifyTarget(input)\u003c/code\u003e to ensure that both the source and the target components are in valid state."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setInputVerifier(javax.swing.InputVerifier)\"\u003e\u003ccode\u003eJComponent.setInputVerifier(javax.swing.InputVerifier)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getInputVerifier()\"\u003e\u003ccode\u003eJComponent.getInputVerifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the source JComponent of the focus transfer",
          "\u003ccode\u003etarget\u003c/code\u003e - the target JComponent of the focus transfer"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e when valid, \n\u003ccode\u003efalse\u003c/code\u003e when invalid"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.swing.InputVerifier",
  "comment": "This class provides the validation mechanism for Swing components. GUIs often need to ensure that the components are in a valid state before allowing the user to navigate the input focus. To do this, clients create a subclass of \n\u003ccode\u003eInputVerifier\u003c/code\u003e and, using \n\u003ccode\u003eJComponent\u003c/code\u003e\u0027s \n\u003ccode\u003esetInputVerifier\u003c/code\u003e method, attach an instance of their subclass to the \n\u003ccode\u003eJComponent\u003c/code\u003e which is the source of the focus transfer operation. The \n\u003ccode\u003eInputVerifier\u003c/code\u003e also provides the possibility to validate against the target of the focus transfer which may reject the focus. Before focus is transferred from the source Swing component to the target Swing component, the input verifier\u0027s \n\u003ccode\u003eshouldYieldFocus(source, target)\u003c/code\u003e method is called. Focus is transferred only if that method returns \n\u003ccode\u003etrue\u003c/code\u003e. \n\u003cp\u003e The following example has two text fields, with the first one expecting the string \"pass\" to be entered by the user. If either that string is entered in the first text field or the second text field contains \"accept\" string, then the user can advance focus to the second text field by clicking in it or by pressing TAB. However, if another string is entered in the first text field and the second text field does not contain \"accept\", then the user will be unable to transfer focus to the second text field. \u003c/p\u003e\n\u003cpre\u003e import java.awt.*;\n import javax.swing.*;\n\n // This program demonstrates the use of the Swing InputVerifier class.\n // It creates two text fields; the first of the text fields expects the\n // string \"pass\" as input, and will allow focus to advance to the second text\n // field if either that string is typed in by the user or the second\n // field contains \"accept\" string.\n\n public class VerifierTest extends JFrame {\n\n     public VerifierTest() {\n         JTextField field1 \u003d new JTextField(\"Type \\\"pass\\\" here\");\n         JTextField field2 \u003d new JTextField(\"or \\\"accept\\\" here\");\n         getContentPane().add(field1, BorderLayout.NORTH);\n         getContentPane().add(field2, BorderLayout.SOUTH);\n\n         field1.setInputVerifier(new InputVerifier() {\n             public boolean verify(JComponent input) {\n                return \"pass\".equals(((JTextField) input).getText());\n             }\n\n             public boolean verifyTarget(JComponent input) {\n                 return \"accept\".equals(((JTextField) input).getText());\n             }\n\n             public boolean shouldYieldFocus(JComponent source,\n                                                          JComponent target) {\n                 return verify(source) || verifyTarget(target);\n             }\n         });\n\n         pack();\n         setVisible(true);\n     }\n\n     public static void main(String[] args) {\n         SwingUtilities.invokeLater(VerifierTest::new);\n     }\n }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}