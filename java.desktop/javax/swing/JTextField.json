{
  "packageName": "javax.swing",
  "simpleName": "JTextField",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.swing.text.JTextComponent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "notifyAction",
      "comment": "Name of the action to send notification that the contents of the field have been accepted. Typically this is bound to a carriage-return.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.JTextField.notifyAction\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUIClassID",
      "comment": "Gets the class ID for a UI.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003e\u003ccode\u003eJComponent.getUIClassID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/UIDefaults.html#getUI(javax.swing.JComponent)\"\u003e\u003ccode\u003eUIDefaults.getUI(javax.swing.JComponent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getUIClassID()\"\u003egetUIClassID\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string \"TextFieldUI\""
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Document",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDocument",
      "comment": "Associates the editor with a text document. The currently registered factory is used to build a view for the document, which gets displayed by the editor after revalidation. A PropertyChange event (\"document\") is propagated to each listener.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "expert",
              "value": true
            },
            {
              "name": "escription",
              "value": "the text document model"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getDocument()\"\u003e\u003ccode\u003eJTextComponent.getDocument()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#setDocument(javax.swing.text.Document)\"\u003esetDocument\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the document to display/edit"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isValidateRoot",
      "comment": "Calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a JViewport, in which case this returns false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#revalidate()\"\u003e\u003ccode\u003eJComponent.revalidate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isValidateRoot()\"\u003e\u003ccode\u003eJComponent.isValidateRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isValidateRoot()\"\u003e\u003ccode\u003eContainer.isValidateRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#isValidateRoot()\"\u003eisValidateRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "if the parent of this textfield is a \n\u003ccode\u003eJViewPort\u003c/code\u003e return false, otherwise return true"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHorizontalAlignment",
      "comment": "Returns the horizontal alignment of the text. Valid keys are: JTextField.LEFT JTextField.CENTER JTextField.RIGHT JTextField.LEADING JTextField.TRAILING",
      "tagMap": {
        "return": [
          "the horizontal alignment"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "alignment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setHorizontalAlignment",
      "comment": "Sets the horizontal alignment of the text. Valid keys are: JTextField.LEFT JTextField.CENTER JTextField.RIGHT JTextField.LEADING JTextField.TRAILING invalidate and repaint are called when the alignment is set, and a PropertyChange event (\"horizontalAlignment\") is fired.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "preferred",
              "value": true
            },
            {
              "name": "enumerationValues",
              "value": [
                "JTextField.LEFT",
                "JTextField.CENTER",
                "JTextField.RIGHT",
                "JTextField.LEADING",
                "JTextField.TRAILING"
              ]
            },
            {
              "name": "escription",
              "value": "Set the field alignment to LEFT, CENTER, RIGHT, LEADING (the default) or TRAILING"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealignment\u003c/code\u003e - the alignment"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealignment\u003c/code\u003e is not a valid key"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.text.Document",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createDefaultModel",
      "comment": "Creates the default implementation of the model to be used at construction if one isn\u0027t explicitly given. An instance of PlainDocument is returned.",
      "tagMap": {
        "return": [
          "the default model implementation"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColumns",
      "comment": "Returns the number of columns in this TextField.",
      "tagMap": {
        "return": [
          "the number of columns \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "columns"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setColumns",
      "comment": "Sets the number of columns in this TextField, and then invalidate the layout.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            },
            {
              "name": "escription",
              "value": "the number of columns preferred for display"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumns\u003c/code\u003e - the number of columns \u0026gt;\u003d 0"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumns\u003c/code\u003e is less than 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getColumnWidth",
      "comment": "Returns the column width. The meaning of what a column is can be considered a fairly weak notion for some fonts. This method is used to define the width of a column. By default this is defined to be the width of the character m for the font used. This method can be redefined to be some alternative amount",
      "tagMap": {
        "return": [
          "the column width \u0026gt;\u003d 1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreferredSize",
      "comment": "Returns the preferred size Dimensions needed for this TextField. If a non-zero number of columns has been set, the width is set to the columns multiplied by the column width.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setPreferredSize(java.awt.Dimension)\"\u003e\u003ccode\u003eJComponent.setPreferredSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/ComponentUI.html\" title\u003d\"class in javax.swing.plaf\"\u003e\u003ccode\u003eComponentUI\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#getPreferredSize()\"\u003egetPreferredSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the dimension of this textfield"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFont",
      "comment": "Sets the current font. This removes cached row height and column width so the new font will be reflected. revalidate is called after setting the font.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFont()\"\u003e\u003ccode\u003eComponent.getFont()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#setFont(java.awt.Font)\"\u003esetFont\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the new font"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addActionListener",
      "comment": "Adds the specified action listener to receive action events from this textfield.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the action listener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.ActionListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeActionListener",
      "comment": "Removes the specified action listener so that it no longer receives action events from this textfield.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the action listener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.ActionListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActionListeners",
      "comment": "Returns an array of all the ActionListeners added to this JTextField with addActionListener().",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "all of the \n\u003ccode\u003eActionListener\u003c/code\u003es added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireActionPerformed",
      "comment": "Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created. The listener list is processed in last to first order.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/EventListenerList.html\" title\u003d\"class in javax.swing.event\"\u003e\u003ccode\u003eEventListenerList\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setActionCommand",
      "comment": "Sets the command string used for action events.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the command string"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAction",
      "comment": "Sets the Action for the ActionEvent source. The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener. If the Action is already a registered ActionListener for the ActionEvent source, it is not re-registered. Setting the Action results in immediately changing all the properties described in Swing Components Supporting Action. Subsequently, the textfield\u0027s properties are automatically updated as the Action\u0027s properties change. This method uses three other methods to set and help track the Action\u0027s property values. It uses the configurePropertiesFromAction method to immediately change the textfield\u0027s properties. To track changes in the Action\u0027s property values, this method registers the PropertyChangeListener returned by createActionPropertyChangeListener. The default PropertyChangeListener invokes the actionPropertyChanged method when a property in the Action changes.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "visualUpdate",
              "value": true
            },
            {
              "name": "escription",
              "value": "the Action instance connected with this ActionEvent source"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#getAction()\"\u003e\u003ccode\u003egetAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#configurePropertiesFromAction(javax.swing.Action)\"\u003e\u003ccode\u003econfigurePropertiesFromAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#createActionPropertyChangeListener(javax.swing.Action)\"\u003e\u003ccode\u003ecreateActionPropertyChangeListener(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#actionPropertyChanged(javax.swing.Action,java.lang.String)\"\u003e\u003ccode\u003eactionPropertyChanged(javax.swing.Action, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e for the \n\u003ccode\u003eJTextField\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAction",
      "comment": "Returns the currently set Action for this ActionEvent source, or null if no Action is set.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#setAction(javax.swing.Action)\"\u003e\u003ccode\u003esetAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eAction\u003c/code\u003e for this \n\u003ccode\u003eActionEvent\u003c/code\u003e source, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "configurePropertiesFromAction",
      "comment": "Sets the properties on this textfield to match those in the specified Action. Refer to Swing Components Supporting Action for more details as to which properties this sets.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#setAction(javax.swing.Action)\"\u003e\u003ccode\u003esetAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e from which to get the properties, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "actionPropertyChanged",
      "comment": "Updates the textfield\u0027s state in response to property changes in associated action. This method is invoked from the PropertyChangeListener returned from createActionPropertyChangeListener. Subclasses do not normally need to invoke this. Subclasses that support additional Action properties should override this and configurePropertiesFromAction. Refer to the table at Swing Components Supporting Action for a list of the properties this method sets.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#configurePropertiesFromAction(javax.swing.Action)\"\u003e\u003ccode\u003econfigurePropertiesFromAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the \n\u003ccode\u003eAction\u003c/code\u003e associated with this textfield",
          "\u003ccode\u003epropertyName\u003c/code\u003e - the name of the property that changed"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.Action",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "createActionPropertyChangeListener",
      "comment": "Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties. Warning: If you subclass this do not create an anonymous inner class. If you do the lifetime of the textfield will be tied to that of the Action.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Action.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eAction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#setAction(javax.swing.Action)\"\u003e\u003ccode\u003esetAction(javax.swing.Action)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the textfield\u0027s action"
        ],
        "return": [
          "a \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e that is responsible for listening for changes from the specified \n\u003ccode\u003eAction\u003c/code\u003e and updating the appropriate properties"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.Action",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActions",
      "comment": "Fetches the command list for the editor. This is the list of commands supported by the plugged-in UI augmented by the collection of commands that the editor itself supports. These are useful for binding to events, such as in a keymap.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getActions()\"\u003egetActions\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the command list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postActionEvent",
      "comment": "Processes action events occurring on this textfield by dispatching them to any registered ActionListener objects. This is normally called by the controller registered with textfield.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.swing.BoundedRangeModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHorizontalVisibility",
      "comment": "Gets the visibility of the text field. This can be adjusted to change the location of the visible area if the size of the field is greater than the area that was allocated to the field. The fields look-and-feel implementation manages the values of the minimum, maximum, and extent properties on the BoundedRangeModel.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/BoundedRangeModel.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eBoundedRangeModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the visibility"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollOffset",
      "comment": "Gets the scroll offset, in pixels.",
      "tagMap": {
        "return": [
          "the offset \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setScrollOffset",
      "comment": "Sets the scroll offset, in pixels.",
      "tagMap": {
        "param": [
          "\u003ccode\u003escrollOffset\u003c/code\u003e - the offset \u0026gt;\u003d 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scrollRectToVisible",
      "comment": "Scrolls the field left or right.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JViewport.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJViewport\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html#scrollRectToVisible(java.awt.Rectangle)\"\u003escrollRectToVisible\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JComponent.html\" title\u003d\"class in javax.swing\"\u003eJComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the region to scroll"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "paramString",
      "comment": "Returns a string representation of this JTextField. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eJTextField\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this JTextField. For JTextFields, the AccessibleContext takes the form of an AccessibleJTextField. A new AccessibleJTextField instance is created if necessary.",
      "annotations": [
        {
          "type": "BeanProperty",
          "values": [
            {
              "name": "bound",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003eJTextComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAccessibleJTextField\u003c/code\u003e that serves as the \n\u003ccode\u003eAccessibleContext\u003c/code\u003e of this \n\u003ccode\u003eJTextField\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new TextField. A default model is created, the initial string is null, and the number of columns is set to 0.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new TextField initialized with the specified text. A default model is created and the number of columns is 0.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to be displayed, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "columns"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new empty TextField with the specified number of columns. A default model is created and the initial string is set to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolumns\u003c/code\u003e - the number of columns to use to calculate the preferred width; if columns is set to zero, the preferred width will be whatever naturally results from the component implementation"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "columns"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new TextField initialized with the specified text and columns. A default model is created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to be displayed, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ecolumns\u003c/code\u003e - the number of columns to use to calculate the preferred width; if columns is set to zero, the preferred width will be whatever naturally results from the component implementation"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.swing.text.Document",
            "type": "Class"
          },
          "field": {
            "name": "doc"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "columns"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new JTextField that uses the given text storage model and the given number of columns. This is the constructor through which the other constructors feed. If the document is null, a default model is created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edoc\u003c/code\u003e - the text storage to use; if this is \n\u003ccode\u003enull\u003c/code\u003e, a default will be provided by calling the \n\u003ccode\u003ecreateDefaultModel\u003c/code\u003e method",
          "\u003ccode\u003etext\u003c/code\u003e - the initial string to display, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ecolumns\u003c/code\u003e - the number of columns to use to calculate the preferred width \u0026gt;\u003d 0; if \n\u003ccode\u003ecolumns\u003c/code\u003e is set to zero, the preferred width will be whatever naturally results from the component implementation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolumns\u003c/code\u003e \u0026lt; 0"
        ]
      }
    }
  ],
  "innerClasses": [
    "javax.swing.JTextField$AccessibleJTextField"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.JTextField",
  "comment": "\u003ccode\u003eJTextField\u003c/code\u003e is a lightweight component that allows the editing of a single line of text. For information on and examples of using text fields, see \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/components/textfield.html\"\u003eHow to Use Text Fields\u003c/a\u003e in \n\u003cem\u003eThe Java Tutorial.\u003c/em\u003e \n\u003cp\u003e \u003ccode\u003eJTextField\u003c/code\u003e is intended to be source-compatible with \u003ccode\u003ejava.awt.TextField\u003c/code\u003e where it is reasonable to do so. This component has capabilities not found in the \u003ccode\u003ejava.awt.TextField\u003c/code\u003e class. The superclass should be consulted for additional capabilities. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eJTextField\u003c/code\u003e has a method to establish the string used as the command string for the action event that gets fired. The \u003ccode\u003ejava.awt.TextField\u003c/code\u003e used the text of the field as the command string for the \u003ccode\u003eActionEvent\u003c/code\u003e. \u003ccode\u003eJTextField\u003c/code\u003e will use the command string set with the \u003ccode\u003esetActionCommand\u003c/code\u003e method if not \u003ccode\u003enull\u003c/code\u003e, otherwise it will use the text of the field as a compatibility with \u003ccode\u003ejava.awt.TextField\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The method \u003ccode\u003esetEchoChar\u003c/code\u003e and \u003ccode\u003egetEchoChar\u003c/code\u003e are not provided directly to avoid a new implementation of a pluggable look-and-feel inadvertently exposing password characters. To provide password-like services a separate class \u003ccode\u003eJPasswordField\u003c/code\u003e extends \u003ccode\u003eJTextField\u003c/code\u003e to provide this service with an independently pluggable look-and-feel. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003ejava.awt.TextField\u003c/code\u003e could be monitored for changes by adding a \u003ccode\u003eTextListener\u003c/code\u003e for \u003ccode\u003eTextEvent\u003c/code\u003e\u0027s. In the \u003ccode\u003eJTextComponent\u003c/code\u003e based components, changes are broadcasted from the model via a \u003ccode\u003eDocumentEvent\u003c/code\u003e to \u003ccode\u003eDocumentListeners\u003c/code\u003e. The \u003ccode\u003eDocumentEvent\u003c/code\u003e gives the location of the change and the kind of change if desired. The code fragment might look something like: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n \u0026nbsp;   DocumentListener myListener \u003d ??;\n \u0026nbsp;   JTextField myArea \u003d ??;\n \u0026nbsp;   myArea.getDocument().addDocumentListener(myListener);\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The horizontal alignment of \u003ccode\u003eJTextField\u003c/code\u003e can be set to be left justified, leading justified, centered, right justified or trailing justified. Right/trailing justification is useful if the required size of the field text is smaller than the size allocated to it. This is determined by the \u003ccode\u003esetHorizontalAlignment\u003c/code\u003e and \u003ccode\u003egetHorizontalAlignment\u003c/code\u003e methods. The default is to be leading justified. \u003c/p\u003e\n\u003cp\u003e How the text field consumes VK_ENTER events depends on whether the text field has any action listeners. If so, then VK_ENTER results in the listeners getting an ActionEvent, and the VK_ENTER event is consumed. This is compatible with how AWT text fields handle VK_ENTER events. If the text field has no action listeners, then as of v 1.3 the VK_ENTER event is not consumed. Instead, the bindings of ancestor components are processed, which enables the default button feature of JFC/Swing to work. \u003c/p\u003e\n\u003cp\u003e Customized fields can easily be created by extending the model and changing the default model provided. For example, the following piece of code will create a field that holds only upper case characters. It will work even if text is pasted into from the clipboard or it is altered via programmatic changes. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\n\u0026nbsp;public class UpperCaseField extends JTextField {\n\u0026nbsp;\n\u0026nbsp;    public UpperCaseField(int cols) {\n\u0026nbsp;        super(cols);\n\u0026nbsp;    }\n\u0026nbsp;\n\u0026nbsp;    protected Document createDefaultModel() {\n\u0026nbsp;        return new UpperCaseDocument();\n\u0026nbsp;    }\n\u0026nbsp;\n\u0026nbsp;    static class UpperCaseDocument extends PlainDocument {\n\u0026nbsp;\n\u0026nbsp;        public void insertString(int offs, String str, AttributeSet a)\n\u0026nbsp;            throws BadLocationException {\n\u0026nbsp;\n\u0026nbsp;            if (str \u003d\u003d null) {\n\u0026nbsp;                return;\n\u0026nbsp;            }\n\u0026nbsp;            char[] upper \u003d str.toCharArray();\n\u0026nbsp;            for (int i \u003d 0; i \u0026lt; upper.length; i++) {\n\u0026nbsp;                upper[i] \u003d Character.toUpperCase(upper[i]);\n\u0026nbsp;            }\n\u0026nbsp;            super.insertString(offs, new String(upper), a);\n\u0026nbsp;        }\n\u0026nbsp;    }\n\u0026nbsp;}\n\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Swing is not thread safe. For more information see \u003ca href\u003d\"package-summary.html#threading\"\u003eSwing\u0027s Threading Policy\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#setActionCommand(java.lang.String)\"\u003e\u003ccode\u003esetActionCommand(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JPasswordField.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJPasswordField\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JTextField.html#addActionListener(java.awt.event.ActionListener)\"\u003e\u003ccode\u003eaddActionListener(java.awt.event.ActionListener)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}