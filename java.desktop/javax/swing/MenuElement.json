{
  "packageName": "javax.swing",
  "simpleName": "MenuElement",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        },
        {
          "type": {
            "name": "javax.swing.MenuElement",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "javax.swing.MenuSelectionManager",
            "type": "Class"
          },
          "field": {
            "name": "manager"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "processMouseEvent",
      "comment": "Processes a mouse event. event is a MouseEvent with source being the receiving element\u0027s component. path is the path of the receiving element in the menu hierarchy including the receiving element itself. manager is the MenuSelectionManager for the menu hierarchy. This method should process the MouseEvent and change the menu selection if necessary by using MenuSelectionManager\u0027s API Note: you do not have to forward the event to sub-components. This is done automatically by the MenuSelectionManager.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - a \n\u003ccode\u003eMouseEvent\u003c/code\u003e to be processed",
          "\u003ccode\u003epath\u003c/code\u003e - the path of the receiving element in the menu hierarchy",
          "\u003ccode\u003emanager\u003c/code\u003e - the \n\u003ccode\u003eMenuSelectionManager\u003c/code\u003e for the menu hierarchy"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        },
        {
          "type": {
            "name": "javax.swing.MenuElement",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "javax.swing.MenuSelectionManager",
            "type": "Class"
          },
          "field": {
            "name": "manager"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "processKeyEvent",
      "comment": "Process a key event.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - a \n\u003ccode\u003eKeyEvent\u003c/code\u003e to be processed",
          "\u003ccode\u003epath\u003c/code\u003e - the path of the receiving element in the menu hierarchy",
          "\u003ccode\u003emanager\u003c/code\u003e - the \n\u003ccode\u003eMenuSelectionManager\u003c/code\u003e for the menu hierarchy"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isIncluded"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "menuSelectionChanged",
      "comment": "Call by the MenuSelectionManager when the MenuElement is added or removed from the menu selection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eisIncluded\u003c/code\u003e - can be used to indicate if this \n\u003ccode\u003eMenuElement\u003c/code\u003e is active (if it is a menu) or is on the part of the menu path that changed (if it is a menu item)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.MenuElement",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSubElements",
      "comment": "This method should return an array containing the sub-elements for the receiving menu element.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eMenuElement\u003c/code\u003es"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getComponent",
      "comment": "This method should return the java.awt.Component used to paint the receiving element. The returned component will be used to convert events and detect if an event is inside a MenuElement\u0027s component.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eComponent\u003c/code\u003e value"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.MenuElement",
  "comment": "Any component that can be placed into a menu should implement this interface. This interface is used by \n\u003ccode\u003eMenuSelectionManager\u003c/code\u003e to handle selection and navigation in menu hierarchies.",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}