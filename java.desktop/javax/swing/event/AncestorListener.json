{
  "packageName": "javax.swing.event",
  "simpleName": "AncestorListener",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.EventListener",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.AncestorEvent",
            "type": "Class"
          },
          "name": "event",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ancestorAdded",
      "comment": "Called when the source or one of its ancestors is made visible either by setVisible(true) being called or by its being added to the component hierarchy. The method is only called if the source has actually become visible. For this to be true all its parents must be visible and it must be in a hierarchy rooted at a Window",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - an \n\u003ccode\u003eAncestorEvent\u003c/code\u003e signifying a change in an ancestor-component\u0027s display-status"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.AncestorEvent",
            "type": "Class"
          },
          "name": "event",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ancestorRemoved",
      "comment": "Called when the source or one of its ancestors is made invisible either by setVisible(false) being called or by its being removed from the component hierarchy. The method is only called if the source has actually become invisible. For this to be true at least one of its parents must by invisible or it is not in a hierarchy rooted at a Window",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - an \n\u003ccode\u003eAncestorEvent\u003c/code\u003e signifying a change in an ancestor-component\u0027s display-status"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.event.AncestorEvent",
            "type": "Class"
          },
          "name": "event",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ancestorMoved",
      "comment": "Called when either the source or one of its ancestors is moved.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - an \n\u003ccode\u003eAncestorEvent\u003c/code\u003e signifying a change in an ancestor-component\u0027s display-status"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.event.AncestorListener",
  "annotations": [],
  "tagMap": {}
}