{
  "packageName": "javax.swing.event",
  "simpleName": "AncestorEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.AWTEvent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ANCESTOR_ADDED",
      "comment": "An ancestor-component was added to the hierarchy of visible objects (made visible), and is currently being displayed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.event.AncestorEvent.ANCESTOR_ADDED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ANCESTOR_REMOVED",
      "comment": "An ancestor-component was removed from the hierarchy of visible objects (hidden) and is no longer being displayed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.event.AncestorEvent.ANCESTOR_REMOVED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ANCESTOR_MOVED",
      "comment": "An ancestor-component changed its position on the screen.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.swing.event.AncestorEvent.ANCESTOR_MOVED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAncestor",
      "comment": "Returns the ancestor that the event actually occurred on.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eContainer\u003c/code\u003e object specifying the ancestor component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAncestorParent",
      "comment": "Returns the parent of the ancestor the event actually occurred on. This is most interesting in an ANCESTOR_REMOVED event, as the ancestor may no longer be in the component hierarchy.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eContainer\u003c/code\u003e object specifying the ancestor\u0027s parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.swing.JComponent",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponent",
      "comment": "Returns the component that the listener was added to.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eJComponent\u003c/code\u003e on which the event occurred"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.swing.JComponent",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "ancestor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "ancestorParent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an AncestorEvent object to identify a change in an ancestor-component\u0027s display-status.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the JComponent that originated the event (typically \n\u003ccode\u003ethis\u003c/code\u003e)",
          "\u003ccode\u003eid\u003c/code\u003e - an int specifying \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/AncestorEvent.html#ANCESTOR_ADDED\"\u003e\u003ccode\u003eANCESTOR_ADDED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/AncestorEvent.html#ANCESTOR_REMOVED\"\u003e\u003ccode\u003eANCESTOR_REMOVED\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/AncestorEvent.html#ANCESTOR_MOVED\"\u003e\u003ccode\u003eANCESTOR_MOVED\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003eancestor\u003c/code\u003e - a Container object specifying the ancestor-component whose display-status changed",
          "\u003ccode\u003eancestorParent\u003c/code\u003e - a Container object specifying the ancestor\u0027s parent"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.swing.event.AncestorEvent",
  "comment": "An event reported to a child component that originated from an ancestor in the component hierarchy. \n\u003cp\u003e \u003cstrong\u003eWarning:\u003c/strong\u003e Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the \u003ccode\u003ejava.beans\u003c/code\u003e package. Please see \u003ca href\u003d\"../../../java/beans/XMLEncoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLEncoder\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}