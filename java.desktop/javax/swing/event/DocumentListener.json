{
  "packageName": "javax.swing.event",
  "simpleName": "DocumentListener",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.EventListener",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "insertUpdate",
      "comment": "Gives notification that there was an insert into the document. The range given by the DocumentEvent bounds the freshly inserted region.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the document event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeUpdate",
      "comment": "Gives notification that a portion of the document has been removed. The range is given in terms of what the view last saw (that is, before updating sticky positions).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the document event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.swing.event.DocumentEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "changedUpdate",
      "comment": "Gives notification that an attribute or set of attributes changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the document event"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.swing.event.DocumentListener",
  "comment": "Interface for an observer to register to receive notifications of changes to a text document. \n\u003cp\u003e The default implementation of the Document interface (AbstractDocument) supports asynchronous mutations. If this feature is used (i.e. mutations are made from a thread other than the Swing event thread), the listeners will be notified via the mutating thread. \u003cem\u003eThis means that if asynchronous updates are made, the implementation of this interface must be threadsafe\u003c/em\u003e! \u003c/p\u003e\n\u003cp\u003e The DocumentEvent notification is based upon the JavaBeans event model. There is no guarantee about the order of delivery to listeners, and all listeners must be notified prior to making further mutations to the Document. \u003cem\u003eThis means implementations of the DocumentListener may not mutate the source of the event (i.e. the associated Document)\u003c/em\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/Document.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/StyledDocument.html\" title\u003d\"interface in javax.swing.text\"\u003e\u003ccode\u003eStyledDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/event/DocumentEvent.html\" title\u003d\"interface in javax.swing.event\"\u003e\u003ccode\u003eDocumentEvent\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}