{
  "packageName": "javax.imageio",
  "simpleName": "ImageTranscoder",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.imageio.metadata.IIOMetadata",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.metadata.IIOMetadata",
            "type": "Class"
          },
          "name": "inData",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageWriteParam",
            "type": "Class"
          },
          "name": "param",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "convertStreamMetadata",
      "comment": "Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding. An optional ImageWriteParam may be supplied for cases where it may affect the structure of the stream metadata. If the supplied ImageWriteParam contains optional setting values not understood by this writer or transcoder, they will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object representing stream metadata, used to initialize the state of the returned object.",
          "\u003ccode\u003eparam\u003c/code\u003e - an \n\u003ccode\u003eImageWriteParam\u003c/code\u003e that will be used to encode the image, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the plug-in does not provide metadata encoding capabilities."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.metadata.IIOMetadata",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.metadata.IIOMetadata",
            "type": "Class"
          },
          "name": "inData",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageTypeSpecifier",
            "type": "Class"
          },
          "name": "imageType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageWriteParam",
            "type": "Class"
          },
          "name": "param",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "convertImageMetadata",
      "comment": "Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding. An optional ImageWriteParam may be supplied for cases where it may affect the structure of the image metadata. If the supplied ImageWriteParam contains optional setting values not understood by this writer or transcoder, they will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object representing image metadata, used to initialize the state of the returned object.",
          "\u003ccode\u003eimageType\u003c/code\u003e - an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e indicating the layout and color information of the image with which the metadata will be associated.",
          "\u003ccode\u003eparam\u003c/code\u003e - an \n\u003ccode\u003eImageWriteParam\u003c/code\u003e that will be used to encode the image, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either of \n\u003ccode\u003einData\u003c/code\u003e or \n\u003ccode\u003eimageType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the plug-in does not provide metadata encoding capabilities."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.imageio.ImageTranscoder",
  "comment": "An interface providing metadata transcoding capability. \n\u003cp\u003e Any image may be transcoded (written to a different format than the one it was originally stored in) simply by performing a read operation followed by a write operation. However, loss of data may occur in this process due to format differences. \u003c/p\u003e\n\u003cp\u003e In general, the best results will be achieved when format-specific metadata objects can be created to encapsulate as much information about the image and its associated metadata as possible, in terms that are understood by the specific \u003ccode\u003eImageWriter\u003c/code\u003e used to perform the encoding. \u003c/p\u003e\n\u003cp\u003e An \u003ccode\u003eImageTranscoder\u003c/code\u003e may be used to convert the \u003ccode\u003eIIOMetadata\u003c/code\u003e objects supplied by the \u003ccode\u003eImageReader\u003c/code\u003e (representing per-stream and per-image metadata) into corresponding objects suitable for encoding by a particular \u003ccode\u003eImageWriter\u003c/code\u003e. In the case where the methods of this interface are being called directly on an \u003ccode\u003eImageWriter\u003c/code\u003e, the output will be suitable for that writer. \u003c/p\u003e\n\u003cp\u003e The internal details of converting an \u003ccode\u003eIIOMetadata\u003c/code\u003e object into a writer-specific format will vary according to the context of the operation. Typically, an \u003ccode\u003eImageWriter\u003c/code\u003e will inspect the incoming object to see if it implements additional interfaces with which the writer is familiar. This might be the case, for example, if the object was obtained by means of a read operation on a reader plug-in written by the same vendor as the writer. In this case, the writer may access the incoming object by means of its plug-in specific interfaces. In this case, the re-encoding may be close to lossless if the image file format is kept constant. If the format is changing, the writer may still attempt to preserve as much information as possible. \u003c/p\u003e\n\u003cp\u003e If the incoming object does not implement any additional interfaces known to the writer, the writer has no choice but to access it via the standard \u003ccode\u003eIIOMetadata\u003c/code\u003e interfaces such as the tree view provided by \u003ccode\u003eIIOMetadata.getAsTree\u003c/code\u003e. In this case, there is likely to be significant loss of information. \u003c/p\u003e\n\u003cp\u003e An independent \u003ccode\u003eImageTranscoder\u003c/code\u003e essentially takes on the same role as the writer plug-in in the above examples. It must be familiar with the private interfaces used by both the reader and writer plug-ins, and manually instantiate an object that will be usable by the writer. The resulting metadata objects may be used by the writer directly. \u003c/p\u003e\n\u003cp\u003e No independent implementations of \u003ccode\u003eImageTranscoder\u003c/code\u003e are provided as part of the standard API. Instead, the intention of this interface is to provide a way for implementations to be created and discovered by applications as the need arises.\u003c/p\u003e",
  "tagMap": {}
}