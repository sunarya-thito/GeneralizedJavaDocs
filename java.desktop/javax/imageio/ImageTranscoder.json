{
  "packageName": "javax.imageio",
  "simpleName": "ImageTranscoder",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.imageio.metadata.IIOMetadata",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.metadata.IIOMetadata",
            "type": "Class"
          },
          "name": "inData",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageWriteParam",
            "type": "Class"
          },
          "name": "param",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "convertStreamMetadata",
      "comment": "Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding. An optional ImageWriteParam may be supplied for cases where it may affect the structure of the stream metadata. If the supplied ImageWriteParam contains optional setting values not understood by this writer or transcoder, they will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object representing stream metadata, used to initialize the state of the returned object.",
          "\u003ccode\u003eparam\u003c/code\u003e - an \n\u003ccode\u003eImageWriteParam\u003c/code\u003e that will be used to encode the image, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the plug-in does not provide metadata encoding capabilities."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.metadata.IIOMetadata",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.metadata.IIOMetadata",
            "type": "Class"
          },
          "name": "inData",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageTypeSpecifier",
            "type": "Class"
          },
          "name": "imageType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageWriteParam",
            "type": "Class"
          },
          "name": "param",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "convertImageMetadata",
      "comment": "Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding. An optional ImageWriteParam may be supplied for cases where it may affect the structure of the image metadata. If the supplied ImageWriteParam contains optional setting values not understood by this writer or transcoder, they will be ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object representing image metadata, used to initialize the state of the returned object.",
          "\u003ccode\u003eimageType\u003c/code\u003e - an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e indicating the layout and color information of the image with which the metadata will be associated.",
          "\u003ccode\u003eparam\u003c/code\u003e - an \n\u003ccode\u003eImageWriteParam\u003c/code\u003e that will be used to encode the image, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either of \n\u003ccode\u003einData\u003c/code\u003e or \n\u003ccode\u003eimageType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eIIOMetadata\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the plug-in does not provide metadata encoding capabilities."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.imageio.ImageTranscoder",
  "annotations": [],
  "tagMap": {}
}