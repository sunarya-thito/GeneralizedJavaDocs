{
  "packageName": "javax.imageio.spi",
  "simpleName": "IIORegistry",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.spi.ServiceRegistry",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.imageio.spi.IIORegistry",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultInstance",
      "comment": "Returns the default IIORegistry instance used by the Image I/O API. This instance should be used for all registry functions. Each ThreadGroup will receive its own instance; this allows different Applets in the same browser (for example) to each have their own registry.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default registry for the current \n\u003ccode\u003eThreadGroup\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "registerApplicationClasspathSpis",
      "comment": "Registers all available service providers found on the application class path, using the default ClassLoader. This method is typically invoked by the ImageIO.scanForPlugins method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageIO.html#scanForPlugins()\"\u003e\u003ccode\u003eImageIO.scanForPlugins()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getResources(java.lang.String)\"\u003e\u003ccode\u003eClassLoader.getResources(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "javax.imageio.spi.IIORegistry",
  "annotations": [],
  "tagMap": {}
}