{
  "packageName": "javax.imageio.spi",
  "simpleName": "ImageWriterSpi",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.spi.ImageReaderWriterSpi",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "STANDARD_OUTPUT_TYPE",
      "comment": "A single-element array, initially containing ImageOutputStream.class, to be returned from getOutputTypes.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "outputTypes",
      "comment": "An array of Class objects to be returned from getOutputTypes, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "readerSpiNames",
      "comment": "An array of strings to be returned from getImageReaderSpiNames, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFormatLossless",
      "comment": "Returns true if the format that this writer outputs preserves pixel data bit-accurately. The default implementation returns true.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the format preserves full pixel accuracy."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOutputTypes",
      "comment": "Returns an array of Class objects indicating what types of objects may be used as arguments to the writer\u0027s setOutput method. For most writers, which only output to an ImageOutputStream, a single-element array containing ImageOutputStream.class should be returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a non-\n\u003ccode\u003enull\u003c/code\u003e array of \n\u003ccode\u003eClass\u003c/code\u003e objects of length at least 1."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageTypeSpecifier",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "canEncodeImage",
      "comment": "Returns true if the ImageWriter implementation associated with this service provider is able to encode an image with the given layout. The layout (i.e., the image\u0027s SampleModel and ColorModel) is described by an ImageTypeSpecifier object. A return value of true is not an absolute guarantee of successful encoding; the encoding process may still produce errors due to factors such as I/O errors, inconsistent or malformed data structures, etc. The intent is that a reasonable inspection of the basic structure of the image be performed in order to determine if it is within the scope of the encoding format. For example, a service provider for a format that can only encode greyscale would return false if handed an RGB BufferedImage. Similarly, a service provider for a format that can encode 8-bit RGB imagery might refuse to encode an image with an associated alpha channel. Different ImageWriters, and thus service providers, may choose to be more or less strict. For example, they might accept an image with premultiplied alpha even though it will have to be divided out of each pixel, at some loss of precision, in order to be stored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e specifying the layout of the image to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this writer is likely to be able to encode images with the given layout."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.RenderedImage",
            "type": "Class"
          },
          "name": "im",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canEncodeImage",
      "comment": "Returns true if the ImageWriter implementation associated with this service provider is able to encode the given RenderedImage instance. Note that this includes instances of java.awt.image.BufferedImage. See the discussion for canEncodeImage(ImageTypeSpecifier) for information on the semantics of this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eim\u003c/code\u003e - an instance of \n\u003ccode\u003eRenderedImage\u003c/code\u003e to be encoded."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eim\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this writer is likely to be able to encode this image."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageWriter",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createWriterInstance",
      "comment": "Returns an instance of the ImageWriter implementation associated with this service provider. The returned object will initially be in an initial state as if its reset method had been called. The default implementation simply returns createWriterInstance(null).",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an error occurs during loading, or initialization of the writer class, or during instantiation or initialization of the writer object."
        ],
        "return": [
          "an \n\u003ccode\u003eImageWriter\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageWriter",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "extension",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createWriterInstance",
      "comment": "Returns an instance of the ImageWriter implementation associated with this service provider. The returned object will initially be in an initial state as if its reset method had been called. An Object may be supplied to the plug-in at construction time. The nature of the object is entirely plug-in specific. Typically, a plug-in will implement this method using code such as return new MyImageWriter(this).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eextension\u003c/code\u003e - a plug-in specific extension object, which may be \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the attempt to instantiate the writer fails.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eImageWriter\u003c/code\u003e\u0027s constructor throws an \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e to indicate that the extension object is unsuitable."
        ],
        "return": [
          "an \n\u003ccode\u003eImageWriter\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.ImageWriter",
            "type": "Class"
          },
          "name": "writer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOwnWriter",
      "comment": "Returns true if the ImageWriter object passed in is an instance of the ImageWriter associated with this service provider.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewriter\u003c/code\u003e - an \n\u003ccode\u003eImageWriter\u003c/code\u003e instance."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ewriter\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003ewriter\u003c/code\u003e is recognized"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImageReaderSpiNames",
      "comment": "Returns an array of Strings containing all the fully qualified names of all the ImageReaderSpi classes that can understand the internal metadata representation used by the ImageWriter associated with this service provider, or null if there are no such ImageReaders specified. If a non-null value is returned, it must have non-zero length. The first item in the array must be the name of the service provider for the \"preferred\" reader, as it will be used to instantiate the ImageReader returned by ImageIO.getImageReader(ImageWriter). This mechanism may be used to obtain ImageReaders that will generated non-pixel meta-data (see IIOExtraDataInfo) in a structure understood by an ImageWriter. By reading the image and obtaining this data from one of the ImageReaders obtained with this method and passing it on to the ImageWriter, a client program can read an image, modify it in some way, and write it back out preserving all meta-data, without having to understand anything about the internal structure of the meta-data, or even about the image format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageIO.html#getImageReader(javax.imageio.ImageWriter)\"\u003e\u003ccode\u003eImageIO.getImageReader(ImageWriter)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderSpi.html#getImageWriterSpiNames()\"\u003e\u003ccode\u003eImageReaderSpi.getImageWriterSpiNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es of length at least 1 containing names of \n\u003ccode\u003eImageReaderSpi\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a blank ImageWriterSpi. It is up to the subclass to initialize instance variables and/or override method implementations in order to provide working versions of all methods.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "vendorName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "version",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "names",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "suffixes",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "MIMETypes",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "writerClassName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "outputTypes",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "readerSpiNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "supportsStandardStreamMetadataFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeStreamMetadataFormatName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeStreamMetadataFormatClassName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraStreamMetadataFormatNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraStreamMetadataFormatClassNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "supportsStandardImageMetadataFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeImageMetadataFormatName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeImageMetadataFormatClassName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraImageMetadataFormatNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraImageMetadataFormatClassNames",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ImageWriterSpi with a given set of values.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evendorName\u003c/code\u003e - the vendor name, as a non-\n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eString\u003c/code\u003e.",
          "\u003ccode\u003eversion\u003c/code\u003e - a version identifier, as a non-\n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eString\u003c/code\u003e.",
          "\u003ccode\u003enames\u003c/code\u003e - a non-\n\u003ccode\u003enull\u003c/code\u003e array of \n\u003ccode\u003eString\u003c/code\u003es indicating the format names. At least one entry must be present.",
          "\u003ccode\u003esuffixes\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es indicating the common file suffixes. If no suffixes are defined, \n\u003ccode\u003enull\u003c/code\u003e should be supplied. An array of length 0 will be normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eMIMETypes\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es indicating the format\u0027s MIME types. If no suffixes are defined, \n\u003ccode\u003enull\u003c/code\u003e should be supplied. An array of length 0 will be normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003ewriterClassName\u003c/code\u003e - the fully-qualified name of the associated \n\u003ccode\u003eImageWriterSpi\u003c/code\u003e class, as a non-\n\u003ccode\u003enull String\u003c/code\u003e.",
          "\u003ccode\u003eoutputTypes\u003c/code\u003e - an array of \n\u003ccode\u003eClass\u003c/code\u003e objects of length at least 1 indicating the legal output types.",
          "\u003ccode\u003ereaderSpiNames\u003c/code\u003e - an array \n\u003ccode\u003eString\u003c/code\u003es of length at least 1 naming the classes of all associated \n\u003ccode\u003eImageReader\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003esupportsStandardStreamMetadataFormat\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e that indicates whether a stream metadata object can use trees described by the standard metadata format.",
          "\u003ccode\u003enativeStreamMetadataFormatName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be returned from \n\u003ccode\u003egetNativeStreamMetadataFormatName\u003c/code\u003e.",
          "\u003ccode\u003enativeStreamMetadataFormatClassName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetNativeStreamMetadataFormat\u003c/code\u003e.",
          "\u003ccode\u003eextraStreamMetadataFormatNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e, to be returned from \n\u003ccode\u003egetExtraStreamMetadataFormatNames\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eextraStreamMetadataFormatClassNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetStreamMetadataFormat\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003esupportsStandardImageMetadataFormat\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e that indicates whether an image metadata object can use trees described by the standard metadata format.",
          "\u003ccode\u003enativeImageMetadataFormatName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be returned from \n\u003ccode\u003egetNativeImageMetadataFormatName\u003c/code\u003e.",
          "\u003ccode\u003enativeImageMetadataFormatClassName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetNativeImageMetadataFormat\u003c/code\u003e.",
          "\u003ccode\u003eextraImageMetadataFormatNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es to be returned from \n\u003ccode\u003egetExtraImageMetadataFormatNames\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eextraImageMetadataFormatClassNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetImageMetadataFormat\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evendorName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eversion\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enames\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or has length 0.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ewriterClassName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoutputTypes\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or has length 0."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.imageio.spi.ImageWriterSpi",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/IIORegistry.html\" title\u003d\"class in javax.imageio.spi\"\u003e\u003ccode\u003eIIORegistry\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageTypeSpecifier.html\" title\u003d\"class in javax.imageio\"\u003e\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriter.html\" title\u003d\"class in javax.imageio\"\u003e\u003ccode\u003eImageWriter\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}