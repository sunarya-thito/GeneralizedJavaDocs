{
  "packageName": "javax.imageio.spi",
  "simpleName": "ImageReaderWriterSpi",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.spi.IIOServiceProvider",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "names",
      "comment": "An array of strings to be returned from getFormatNames, initially null. Constructors should set this to a non-null value.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "suffixes",
      "comment": "An array of strings to be returned from getFileSuffixes, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "MIMETypes",
      "comment": "An array of strings to be returned from getMIMETypes, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "pluginClassName",
      "comment": "A String containing the name of the associated plug-in class, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "supportsStandardStreamMetadataFormat",
      "comment": "A boolean indicating whether this plug-in supports the standard metadata format for stream metadata, initially false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "nativeStreamMetadataFormatName",
      "comment": "A String containing the name of the native stream metadata format supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "nativeStreamMetadataFormatClassName",
      "comment": "A String containing the class name of the native stream metadata format supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "extraStreamMetadataFormatNames",
      "comment": "An array of Strings containing the names of any additional stream metadata formats supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "extraStreamMetadataFormatClassNames",
      "comment": "An array of Strings containing the class names of any additional stream metadata formats supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "supportsStandardImageMetadataFormat",
      "comment": "A boolean indicating whether this plug-in supports the standard metadata format for image metadata, initially false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "nativeImageMetadataFormatName",
      "comment": "A String containing the name of the native stream metadata format supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "nativeImageMetadataFormatClassName",
      "comment": "A String containing the class name of the native stream metadata format supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "extraImageMetadataFormatNames",
      "comment": "An array of Strings containing the names of any additional image metadata formats supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "extraImageMetadataFormatClassNames",
      "comment": "An array of Strings containing the class names of any additional image metadata formats supported by this plug-in, initially null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFormatNames",
      "comment": "Returns an array of Strings containing human-readable names for the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider. For example, a single ImageReader might be able to process both PBM and PNM files.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a non-\n\u003ccode\u003enull\u003c/code\u003e array of \n\u003ccode\u003eString\u003c/code\u003es or length at least 1 containing informal format names associated with this reader or writer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFileSuffixes",
      "comment": "Returns an array of Strings containing a list of file suffixes associated with the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider. For example, a single ImageReader might be able to process files with \u0027.pbm\u0027 and \u0027.pnm\u0027 suffixes, or both \u0027.jpg\u0027 and \u0027.jpeg\u0027 suffixes. If there are no known file suffixes, null will be returned. Returning a particular suffix does not guarantee that files with that suffix can be processed; it merely indicates that it may be worthwhile attempting to decode or encode such files using this service provider.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es or length at least 1 containing common file suffixes associated with this reader or writer, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMIMETypes",
      "comment": "Returns an array of Strings containing a list of MIME types associated with the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider. Ideally, only a single MIME type would be required in order to describe a particular format. However, for several reasons it is necessary to associate a list of types with each service provider. First, many common image file formats do not have standard MIME types, so a list of commonly used unofficial names will be required, such as image/x-pbm and image/x-portable-bitmap. Some file formats have official MIME types but may sometimes be referred to using their previous unofficial designations, such as image/x-png instead of the official image/png. Finally, a single service provider may be capable of parsing multiple distinct types from the MIME point of view, for example image/x-xbitmap and image/x-xpixmap. Returning a particular MIME type does not guarantee that files claiming to be of that type can be processed; it merely indicates that it may be worthwhile attempting to decode or encode such files using this service provider.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es or length at least 1 containing MIME types associated with this reader or writer, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPluginClassName",
      "comment": "Returns the fully-qualified class name of the ImageReader or ImageWriter plug-in associated with this service provider.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the class name, as a non-\n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eString\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isStandardStreamMetadataFormatSupported",
      "comment": "Returns true if the standard metadata format is among the document formats recognized by the getAsTree and setFromTree methods on the stream metadata objects produced or consumed by this plug-in.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the standard format is supported for stream metadata."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNativeStreamMetadataFormatName",
      "comment": "Returns the name of the \"native\" stream metadata format for this plug-in, which typically allows for lossless encoding and transmission of the stream metadata stored in the format handled by this plug-in. If no such format is supported, null will be returned. The default implementation returns the nativeStreamMetadataFormatName instance variable, which is typically set by the constructor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the name of the native stream metadata format, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtraStreamMetadataFormatNames",
      "comment": "Returns an array of Strings containing the names of additional document formats, other than the native and standard formats, recognized by the getAsTree and setFromTree methods on the stream metadata objects produced or consumed by this plug-in. If the plug-in does not handle metadata, null should be returned. The set of formats may differ according to the particular images being read or written; this method should indicate all the additional formats supported by the plug-in under any circumstances. The default implementation returns a clone of the extraStreamMetadataFormatNames instance variable, which is typically set by the constructor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/metadata/IIOMetadata.html#getMetadataFormatNames()\"\u003e\u003ccode\u003eIIOMetadata.getMetadataFormatNames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderWriterSpi.html#getExtraImageMetadataFormatNames()\"\u003e\u003ccode\u003egetExtraImageMetadataFormatNames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderWriterSpi.html#getNativeStreamMetadataFormatName()\"\u003e\u003ccode\u003egetNativeStreamMetadataFormatName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isStandardImageMetadataFormatSupported",
      "comment": "Returns true if the standard metadata format is among the document formats recognized by the getAsTree and setFromTree methods on the image metadata objects produced or consumed by this plug-in.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the standard format is supported for image metadata."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNativeImageMetadataFormatName",
      "comment": "Returns the name of the \"native\" image metadata format for this plug-in, which typically allows for lossless encoding and transmission of the image metadata stored in the format handled by this plug-in. If no such format is supported, null will be returned. The default implementation returns the nativeImageMetadataFormatName instance variable, which is typically set by the constructor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderWriterSpi.html#getExtraImageMetadataFormatNames()\"\u003e\u003ccode\u003egetExtraImageMetadataFormatNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the name of the native image metadata format, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtraImageMetadataFormatNames",
      "comment": "Returns an array of Strings containing the names of additional document formats, other than the native and standard formats, recognized by the getAsTree and setFromTree methods on the image metadata objects produced or consumed by this plug-in. If the plug-in does not handle image metadata, null should be returned. The set of formats may differ according to the particular images being read or written; this method should indicate all the additional formats supported by the plug-in under any circumstances. The default implementation returns a clone of the extraImageMetadataFormatNames instance variable, which is typically set by the constructor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/metadata/IIOMetadata.html#getMetadataFormatNames()\"\u003e\u003ccode\u003eIIOMetadata.getMetadataFormatNames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderWriterSpi.html#getExtraStreamMetadataFormatNames()\"\u003e\u003ccode\u003egetExtraStreamMetadataFormatNames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderWriterSpi.html#getNativeImageMetadataFormatName()\"\u003e\u003ccode\u003egetNativeImageMetadataFormatName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.metadata.IIOMetadataFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "formatName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStreamMetadataFormat",
      "comment": "Returns an IIOMetadataFormat object describing the given stream metadata format, or null if no description is available. The supplied name must be the native stream metadata format name, the standard metadata format name, or one of those returned by getExtraStreamMetadataFormatNames.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatName\u003c/code\u003e - the desired stream metadata format."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformatName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a supported name."
        ],
        "return": [
          "an \n\u003ccode\u003eIIOMetadataFormat\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.metadata.IIOMetadataFormat",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "formatName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImageMetadataFormat",
      "comment": "Returns an IIOMetadataFormat object describing the given image metadata format, or null if no description is available. The supplied name must be the native image metadata format name, the standard metadata format name, or one of those returned by getExtraImageMetadataFormatNames.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatName\u003c/code\u003e - the desired image metadata format."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformatName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a supported name."
        ],
        "return": [
          "an \n\u003ccode\u003eIIOMetadataFormat\u003c/code\u003e object."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "vendorName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "version",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "names",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "suffixes",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "MIMETypes",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pluginClassName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "supportsStandardStreamMetadataFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeStreamMetadataFormatName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeStreamMetadataFormatClassName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraStreamMetadataFormatNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraStreamMetadataFormatClassNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "supportsStandardImageMetadataFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeImageMetadataFormatName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nativeImageMetadataFormatClassName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraImageMetadataFormatNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "extraImageMetadataFormatClassNames",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ImageReaderWriterSpi with a given set of values.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evendorName\u003c/code\u003e - the vendor name, as a non-\n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eString\u003c/code\u003e.",
          "\u003ccode\u003eversion\u003c/code\u003e - a version identifier, as a non-\n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eString\u003c/code\u003e.",
          "\u003ccode\u003enames\u003c/code\u003e - a non-\n\u003ccode\u003enull\u003c/code\u003e array of \n\u003ccode\u003eString\u003c/code\u003es indicating the format names. At least one entry must be present.",
          "\u003ccode\u003esuffixes\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es indicating the common file suffixes. If no suffixes are defined, \n\u003ccode\u003enull\u003c/code\u003e should be supplied. An array of length 0 will be normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eMIMETypes\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es indicating the format\u0027s MIME types. If no MIME types are defined, \n\u003ccode\u003enull\u003c/code\u003e should be supplied. An array of length 0 will be normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003epluginClassName\u003c/code\u003e - the fully-qualified name of the associated \n\u003ccode\u003eImageReader\u003c/code\u003e or \n\u003ccode\u003eImageWriter\u003c/code\u003e class, as a non-\n\u003ccode\u003enull String\u003c/code\u003e.",
          "\u003ccode\u003esupportsStandardStreamMetadataFormat\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e that indicates whether a stream metadata object can use trees described by the standard metadata format.",
          "\u003ccode\u003enativeStreamMetadataFormatName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be returned from \n\u003ccode\u003egetNativeStreamMetadataFormatName\u003c/code\u003e.",
          "\u003ccode\u003enativeStreamMetadataFormatClassName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetNativeStreamMetadataFormat\u003c/code\u003e.",
          "\u003ccode\u003eextraStreamMetadataFormatNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e, to be returned from \n\u003ccode\u003egetExtraStreamMetadataFormatNames\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eextraStreamMetadataFormatClassNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetStreamMetadataFormat\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003esupportsStandardImageMetadataFormat\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e that indicates whether an image metadata object can use trees described by the standard metadata format.",
          "\u003ccode\u003enativeImageMetadataFormatName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be returned from \n\u003ccode\u003egetNativeImageMetadataFormatName\u003c/code\u003e.",
          "\u003ccode\u003enativeImageMetadataFormatClassName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetNativeImageMetadataFormat\u003c/code\u003e.",
          "\u003ccode\u003eextraImageMetadataFormatNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es to be returned from \n\u003ccode\u003egetExtraImageMetadataFormatNames\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003eextraImageMetadataFormatClassNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003es, or \n\u003ccode\u003enull\u003c/code\u003e, to be used to instantiate a metadata format object to be returned from \n\u003ccode\u003egetImageMetadataFormat\u003c/code\u003e. An array of length 0 is normalized to \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evendorName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eversion\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enames\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or has length 0.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epluginClassName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a blank ImageReaderWriterSpi. It is up to the subclass to initialize instance variables and/or override method implementations in order to provide working versions of all methods.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.imageio.spi.ImageReaderWriterSpi",
  "comment": "A superclass containing instance variables and methods common to \n\u003ccode\u003eImageReaderSpi\u003c/code\u003e and \n\u003ccode\u003eImageWriterSpi\u003c/code\u003e.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/IIORegistry.html\" title\u003d\"class in javax.imageio.spi\"\u003e\u003ccode\u003eIIORegistry\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageReaderSpi.html\" title\u003d\"class in javax.imageio.spi\"\u003e\u003ccode\u003eImageReaderSpi\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/spi/ImageWriterSpi.html\" title\u003d\"class in javax.imageio.spi\"\u003e\u003ccode\u003eImageWriterSpi\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}