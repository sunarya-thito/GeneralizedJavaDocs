{
  "packageName": "javax.imageio",
  "simpleName": "ImageTypeSpecifier",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "colorModel",
      "comment": "The ColorModel to be used as a prototype.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sampleModel",
      "comment": "A SampleModel to be used as a prototype.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.color.ColorSpace",
            "type": "Class"
          },
          "name": "colorSpace",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "redMask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "greenMask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "blueMask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "alphaMask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "transferType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isAlphaPremultiplied",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createPacked",
      "comment": "Returns a specifier for a packed image format that will use a DirectColorModel and a packed SampleModel to store each pixel packed into in a single byte, short, or int.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolorSpace\u003c/code\u003e - the desired \n\u003ccode\u003eColorSpace\u003c/code\u003e.",
          "\u003ccode\u003eredMask\u003c/code\u003e - a contiguous mask indicated the position of the red channel.",
          "\u003ccode\u003egreenMask\u003c/code\u003e - a contiguous mask indicated the position of the green channel.",
          "\u003ccode\u003eblueMask\u003c/code\u003e - a contiguous mask indicated the position of the blue channel.",
          "\u003ccode\u003ealphaMask\u003c/code\u003e - a contiguous mask indicated the position of the alpha channel.",
          "\u003ccode\u003etransferType\u003c/code\u003e - the desired \n\u003ccode\u003eSampleModel\u003c/code\u003e transfer type.",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the color channels will be premultipled by the alpha channel."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolorSpace\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolorSpace\u003c/code\u003e is not of type \n\u003ccode\u003eTYPE_RGB\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no mask has at least 1 bit set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etransferType\u003c/code\u003e if not one of \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e, or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.color.ColorSpace",
            "type": "Class"
          },
          "name": "colorSpace",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "bandOffsets",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dataType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "hasAlpha",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isAlphaPremultiplied",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createInterleaved",
      "comment": "Returns a specifier for an interleaved image format that will use a ComponentColorModel and a PixelInterleavedSampleModel to store each pixel component in a separate byte, short, or int.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolorSpace\u003c/code\u003e - the desired \n\u003ccode\u003eColorSpace\u003c/code\u003e.",
          "\u003ccode\u003ebandOffsets\u003c/code\u003e - an array of \n\u003ccode\u003eint\u003c/code\u003es indicating the offsets for each band.",
          "\u003ccode\u003edataType\u003c/code\u003e - the desired data type, as one of the enumerations from the \n\u003ccode\u003eDataBuffer\u003c/code\u003e class.",
          "\u003ccode\u003ehasAlpha\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if an alpha channel is desired.",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the color channels will be premultipled by the alpha channel."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolorSpace\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebandOffsets\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the legal \n\u003ccode\u003eDataBuffer.TYPE_*\u003c/code\u003e constants.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebandOffsets.length\u003c/code\u003e does not equal the number of color space components, plus 1 if \n\u003ccode\u003ehasAlpha\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.color.ColorSpace",
            "type": "Class"
          },
          "name": "colorSpace",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "bankIndices",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "bandOffsets",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dataType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "hasAlpha",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isAlphaPremultiplied",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createBanded",
      "comment": "Returns a specifier for a banded image format that will use a ComponentColorModel and a BandedSampleModel to store each channel in a separate array.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolorSpace\u003c/code\u003e - the desired \n\u003ccode\u003eColorSpace\u003c/code\u003e.",
          "\u003ccode\u003ebankIndices\u003c/code\u003e - an array of \n\u003ccode\u003eint\u003c/code\u003es indicating the bank in which each band will be stored.",
          "\u003ccode\u003ebandOffsets\u003c/code\u003e - an array of \n\u003ccode\u003eint\u003c/code\u003es indicating the starting offset of each band within its bank.",
          "\u003ccode\u003edataType\u003c/code\u003e - the desired data type, as one of the enumerations from the \n\u003ccode\u003eDataBuffer\u003c/code\u003e class.",
          "\u003ccode\u003ehasAlpha\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if an alpha channel is desired.",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the color channels will be premultipled by the alpha channel."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecolorSpace\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebankIndices\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebandOffsets\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the lengths of \n\u003ccode\u003ebankIndices\u003c/code\u003e and \n\u003ccode\u003ebandOffsets\u003c/code\u003e differ.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebandOffsets.length\u003c/code\u003e does not equal the number of color space components, plus 1 if \n\u003ccode\u003ehasAlpha\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the legal \n\u003ccode\u003eDataBuffer.TYPE_*\u003c/code\u003e constants."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dataType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isSigned",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createGrayscale",
      "comment": "Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits per gray value (1, 2, 4, 8, or 16).",
          "\u003ccode\u003edataType\u003c/code\u003e - the desired data type, as one of the enumerations from the \n\u003ccode\u003eDataBuffer\u003c/code\u003e class.",
          "\u003ccode\u003eisSigned\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if negative values are to be represented."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is not one of 1, 2, 4, 8, or 16.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_SHORT\u003c/code\u003e, or \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is larger than the bit size of the given \n\u003ccode\u003edataType\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dataType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isSigned",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isAlphaPremultiplied",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createGrayscale",
      "comment": "Returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits per gray value (1, 2, 4, 8, or 16).",
          "\u003ccode\u003edataType\u003c/code\u003e - the desired data type, as one of the enumerations from the \n\u003ccode\u003eDataBuffer\u003c/code\u003e class.",
          "\u003ccode\u003eisSigned\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if negative values are to be represented.",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the luminance channel will be premultipled by the alpha channel."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is not one of 1, 2, 4, 8, or 16.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_SHORT\u003c/code\u003e, or \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is larger than the bit size of the given \n\u003ccode\u003edataType\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "redLUT",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "greenLUT",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "blueLUT",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "alphaLUT",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dataType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createIndexed",
      "comment": "Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eredLUT\u003c/code\u003e - an array of \n\u003ccode\u003ebyte\u003c/code\u003es containing the red values for each index.",
          "\u003ccode\u003egreenLUT\u003c/code\u003e - an array of \n\u003ccode\u003ebyte\u003c/code\u003es containing * the green values for each index.",
          "\u003ccode\u003eblueLUT\u003c/code\u003e - an array of \n\u003ccode\u003ebyte\u003c/code\u003es containing the blue values for each index.",
          "\u003ccode\u003ealphaLUT\u003c/code\u003e - an array of \n\u003ccode\u003ebyte\u003c/code\u003es containing the alpha values for each index, or \n\u003ccode\u003enull\u003c/code\u003e to create a fully opaque LUT.",
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits in each index.",
          "\u003ccode\u003edataType\u003c/code\u003e - the desired output type, as one of the enumerations from the \n\u003ccode\u003eDataBuffer\u003c/code\u003e class."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eredLUT\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003egreenLUT\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eblueLUT\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is not one of 1, 2, 4, 8, or 16.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the non-\n\u003ccode\u003enull\u003c/code\u003e LUT parameters do not have lengths of exactly \n\u003ccode\u003e1 \u0026lt;\u0026lt; bits\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_SHORT\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e, or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is larger than the bit size of the given \n\u003ccode\u003edataType\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bufferedImageType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFromBufferedImageType",
      "comment": "Returns an ImageTypeSpecifier that encodes one of the standard BufferedImage types (other than TYPE_CUSTOM).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_RGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_RGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_ARGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_ARGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_ARGB_PRE\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_ARGB_PRE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_BGR\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_BGR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_3BYTE_BGR\"\u003e\u003ccode\u003eBufferedImage.TYPE_3BYTE_BGR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_4BYTE_ABGR\"\u003e\u003ccode\u003eBufferedImage.TYPE_4BYTE_ABGR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_4BYTE_ABGR_PRE\"\u003e\u003ccode\u003eBufferedImage.TYPE_4BYTE_ABGR_PRE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_USHORT_565_RGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_USHORT_565_RGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_USHORT_555_RGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_USHORT_555_RGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_BYTE_GRAY\"\u003e\u003ccode\u003eBufferedImage.TYPE_BYTE_GRAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_USHORT_GRAY\"\u003e\u003ccode\u003eBufferedImage.TYPE_USHORT_GRAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_BYTE_BINARY\"\u003e\u003ccode\u003eBufferedImage.TYPE_BYTE_BINARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_BYTE_INDEXED\"\u003e\u003ccode\u003eBufferedImage.TYPE_BYTE_INDEXED\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebufferedImageType\u003c/code\u003e - an int representing one of the standard \n\u003ccode\u003eBufferedImage\u003c/code\u003e types."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebufferedImageType\u003c/code\u003e is not one of the standard types, or is equal to \n\u003ccode\u003eTYPE_CUSTOM\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.ImageTypeSpecifier",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.RenderedImage",
            "type": "Class"
          },
          "name": "image",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFromRenderedImage",
      "comment": "Returns an ImageTypeSpecifier that encodes the layout of a RenderedImage (which may be a BufferedImage).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - a \n\u003ccode\u003eRenderedImage\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eimage\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e with the desired characteristics."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBufferedImageType",
      "comment": "Returns an int containing one of the enumerated constant values describing image formats from BufferedImage.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_CUSTOM\"\u003e\u003ccode\u003eBufferedImage.TYPE_CUSTOM\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_RGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_RGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_ARGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_ARGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_ARGB_PRE\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_ARGB_PRE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_INT_BGR\"\u003e\u003ccode\u003eBufferedImage.TYPE_INT_BGR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_3BYTE_BGR\"\u003e\u003ccode\u003eBufferedImage.TYPE_3BYTE_BGR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_4BYTE_ABGR\"\u003e\u003ccode\u003eBufferedImage.TYPE_4BYTE_ABGR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_4BYTE_ABGR_PRE\"\u003e\u003ccode\u003eBufferedImage.TYPE_4BYTE_ABGR_PRE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_USHORT_565_RGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_USHORT_565_RGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_USHORT_555_RGB\"\u003e\u003ccode\u003eBufferedImage.TYPE_USHORT_555_RGB\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_BYTE_GRAY\"\u003e\u003ccode\u003eBufferedImage.TYPE_BYTE_GRAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_USHORT_GRAY\"\u003e\u003ccode\u003eBufferedImage.TYPE_USHORT_GRAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_BYTE_BINARY\"\u003e\u003ccode\u003eBufferedImage.TYPE_BYTE_BINARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html#TYPE_BYTE_INDEXED\"\u003e\u003ccode\u003eBufferedImage.TYPE_BYTE_INDEXED\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e representing a \n\u003ccode\u003eBufferedImage\u003c/code\u003e type."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNumComponents",
      "comment": "Return the number of color components specified by this object. This is the same value as returned by ColorModel.getNumComponents",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of components in the image."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNumBands",
      "comment": "Return the number of bands specified by this object. This is the same value as returned by SampleModel.getNumBands",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of bands in the image."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "band",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBitsPerBand",
      "comment": "Return the number of bits used to represent samples of the given band.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eband\u003c/code\u003e - the index of the band to be queried, as an int."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eband\u003c/code\u003e is negative or greater than the largest band index."
        ],
        "return": [
          "an int specifying a number of bits."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleModel",
      "comment": "Returns a SampleModel based on the settings encapsulated within this object. The width and height of the SampleModel will be set to arbitrary values.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eSampleModel\u003c/code\u003e with arbitrary dimensions."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleModel",
      "comment": "Returns a SampleModel based on the settings encapsulated within this object. The width and height of the SampleModel will be set to the supplied values.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the desired width of the returned \n\u003ccode\u003eSampleModel\u003c/code\u003e.",
          "\u003ccode\u003eheight\u003c/code\u003e - the desired height of the returned \n\u003ccode\u003eSampleModel\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003ewidth\u003c/code\u003e or \n\u003ccode\u003eheight\u003c/code\u003e are negative or zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the product of \n\u003ccode\u003ewidth\u003c/code\u003e and \n\u003ccode\u003eheight\u003c/code\u003e is greater than \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSampleModel\u003c/code\u003e with the given dimensions."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getColorModel",
      "comment": "Returns the ColorModel specified by this object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eColorModel\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBufferedImage",
      "comment": "Creates a BufferedImage with a given width and height according to the specification embodied in this object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the desired width of the returned \n\u003ccode\u003eBufferedImage\u003c/code\u003e.",
          "\u003ccode\u003eheight\u003c/code\u003e - the desired height of the returned \n\u003ccode\u003eBufferedImage\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003ewidth\u003c/code\u003e or \n\u003ccode\u003eheight\u003c/code\u003e are negative or zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the product of \n\u003ccode\u003ewidth\u003c/code\u003e and \n\u003ccode\u003eheight\u003c/code\u003e is greater than \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e, or if the number of array elements needed to store the image is greater than \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e."
        ],
        "return": [
          "a new \n\u003ccode\u003eBufferedImage\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if the given Object is an ImageTypeSpecifier and has a SampleModel and ColorModel that are equal to those of this object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to be compared for equality."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given object is an equivalent \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code for this ImageTypeSpecifier.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code for this ImageTypeSpecifier"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ColorModel",
            "type": "Class"
          },
          "name": "colorModel",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "name": "sampleModel",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ImageTypeSpecifier directly from a ColorModel and a SampleModel. It is the caller\u0027s responsibility to supply compatible parameters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecolorModel\u003c/code\u003e - a \n\u003ccode\u003eColorModel\u003c/code\u003e.",
          "\u003ccode\u003esampleModel\u003c/code\u003e - a \n\u003ccode\u003eSampleModel\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esampleModel\u003c/code\u003e is not compatible with \n\u003ccode\u003ecolorModel\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.RenderedImage",
            "type": "Class"
          },
          "name": "image",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ImageTypeSpecifier from a RenderedImage. If a BufferedImage is being used, one of the factory methods createFromRenderedImage or createFromBufferedImageType should be used instead in order to get a more accurate result.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - a \n\u003ccode\u003eRenderedImage\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the argument is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.ImageTypeSpecifier",
  "comment": "A class that allows the format of an image (in particular, its \n\u003ccode\u003eSampleModel\u003c/code\u003e and \n\u003ccode\u003eColorModel\u003c/code\u003e) to be specified in a convenient manner.",
  "tagMap": {}
}