{
  "packageName": "javax.imageio",
  "simpleName": "ImageReadParam",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.IIOParam",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "canSetSourceRenderSize",
      "comment": "true if this ImageReadParam allows the source rendering dimensions to be set. By default, the value is false. Subclasses must set this value manually. ImageReaders that do not support setting of the source render size should set this value to false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sourceRenderSize",
      "comment": "The desired rendering width and height of the source, if canSetSourceRenderSize is true, or null. ImageReaders that do not support setting of the source render size may ignore this value.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "destination",
      "comment": "The current destination BufferedImage, or null if none has been set. By default, the value is null.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "destinationBands",
      "comment": "The set of destination bands to be used, as an array of ints. By default, the value is null, indicating all destination bands should be written in order.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "minProgressivePass",
      "comment": "The minimum index of a progressive pass to read from the source. By default, the value is set to 0, which indicates that passes starting with the first available pass should be decoded. Subclasses should ensure that this value is non-negative.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "numProgressivePasses",
      "comment": "The maximum number of progressive passes to read from the source. By default, the value is set to Integer.MAX_VALUE, which indicates that passes up to and including the last available pass should be decoded. Subclasses should ensure that this value is positive. Additionally, if the value is not Integer.MAX_VALUE, then minProgressivePass + numProgressivePasses - 1 should not exceed Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDestination",
      "comment": "Supplies a BufferedImage to be used as the destination for decoded pixel data. The currently set image will be written to by the read, readAll, and readRaster methods, and a reference to it will be returned by those methods. Pixel data from the aforementioned methods will be written starting at the offset specified by getDestinationOffset. If destination is null, a newly-created BufferedImage will be returned by those methods. At the time of reading, the image is checked to verify that its ColorModel and SampleModel correspond to one of the ImageTypeSpecifiers returned from the ImageReader\u0027s getImageTypes method. If it does not, the reader will throw an IIOException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getDestination()\"\u003e\u003ccode\u003egetDestination()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edestination\u003c/code\u003e - the BufferedImage to be written to, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDestination",
      "comment": "Returns the BufferedImage currently set by the setDestination method, or null if none is set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#setDestination(java.awt.image.BufferedImage)\"\u003e\u003ccode\u003esetDestination(java.awt.image.BufferedImage)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the BufferedImage to be written to."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDestinationBands",
      "comment": "Sets the indices of the destination bands where data will be placed. Duplicate indices are not allowed. A null value indicates that all destination bands will be used. Choosing a destination band subset will not affect the number of bands in the output image of a read if no destination image is specified; the created destination image will still have the same number of bands as if this method had never been called. If a different number of bands in the destination image is desired, an image must be supplied using the ImageReadParam.setDestination method. At the time of reading or writing, an IllegalArgumentException will be thrown by the reader or writer if a value larger than the largest destination band index has been specified, or if the number of source bands and destination bands to be used differ. The ImageReader.checkReadParamBandSettings method may be used to automate this test.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getDestinationBands()\"\u003e\u003ccode\u003egetDestinationBands()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/IIOParam.html#getSourceBands()\"\u003e\u003ccode\u003eIIOParam.getSourceBands()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReader.html#checkReadParamBandSettings(javax.imageio.ImageReadParam,int,int)\"\u003e\u003ccode\u003eImageReader.checkReadParamBandSettings(javax.imageio.ImageReadParam, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edestinationBands\u003c/code\u003e - an array of integer band indices to be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edestinationBands\u003c/code\u003e contains a negative or duplicate value."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDestinationBands",
      "comment": "Returns the set of band indices where data will be placed. If no value has been set, null is returned to indicate that all destination bands will be used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#setDestinationBands(int%5B%5D)\"\u003e\u003ccode\u003esetDestinationBands(int[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the indices of the destination bands to be used, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canSetSourceRenderSize",
      "comment": "Returns true if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the setSourceRenderSize method. If this method returns false, calls to setSourceRenderSize will throw an UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#setSourceRenderSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetSourceRenderSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if setting source rendering size is supported."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSourceRenderSize",
      "comment": "If the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values. Note that the values returned from the getWidth and getHeight methods on ImageReader are not affected by this method; they will continue to return the default size for the image. Similarly, if the image is also tiled the tile width and height are given in terms of the default size. Typically, the width and height should be chosen such that the ratio of width to height closely approximates the aspect ratio of the image, as returned from ImageReader.getAspectRatio. If this plug-in does not allow the rendering size to be set, an UnsupportedOperationException will be thrown. To remove the render size setting, pass in a value of null for size.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getSourceRenderSize()\"\u003e\u003ccode\u003egetSourceRenderSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReader.html#getWidth(int)\"\u003e\u003ccode\u003eImageReader.getWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReader.html#getHeight(int)\"\u003e\u003ccode\u003eImageReader.getHeight(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReader.html#getAspectRatio(int)\"\u003e\u003ccode\u003eImageReader.getAspectRatio(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - a \n\u003ccode\u003eDimension\u003c/code\u003e indicating the desired width and height."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either the width or the height is negative or 0.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if image resizing is not supported by this plug-in."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceRenderSize",
      "comment": "Returns the width and height of the source image as it will be rendered during decoding, if they have been set via the setSourceRenderSize method. A null value indicates that no setting has been made.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#setSourceRenderSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetSourceRenderSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the rendered width and height of the source image as a \n\u003ccode\u003eDimension\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSourceProgressivePasses",
      "comment": "Sets the range of progressive passes that will be decoded. Passes outside of this range will be ignored. A progressive pass is a re-encoding of the entire image, generally at progressively higher effective resolutions, but requiring greater transmission bandwidth. The most common use of progressive encoding is found in the JPEG format, where successive passes include more detailed representations of the high-frequency image content. The actual number of passes to be decoded is determined during decoding, based on the number of actual passes available in the stream. Thus if minPass + numPasses - 1 is larger than the index of the last available passes, decoding will end with that pass. A value of numPasses of Integer.MAX_VALUE indicates that all passes from minPass forward should be read. Otherwise, the index of the last pass (i.e., minPass + numPasses - 1) must not exceed Integer.MAX_VALUE. There is no unsetSourceProgressivePasses method; the same effect may be obtained by calling setSourceProgressivePasses(0, Integer.MAX_VALUE).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getSourceMinProgressivePass()\"\u003e\u003ccode\u003egetSourceMinProgressivePass()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getSourceMaxProgressivePass()\"\u003e\u003ccode\u003egetSourceMaxProgressivePass()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eminPass\u003c/code\u003e - the index of the first pass to be decoded.",
          "\u003ccode\u003enumPasses\u003c/code\u003e - the maximum number of passes to be decoded."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eminPass\u003c/code\u003e is negative, \n\u003ccode\u003enumPasses\u003c/code\u003e is negative or 0, or \n\u003ccode\u003enumPasses\u003c/code\u003e is smaller than \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e but \n\u003ccode\u003eminPass + numPasses - 1\u003c/code\u003e is greater than \n\u003ccode\u003eINTEGER.MAX_VALUE\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceMinProgressivePass",
      "comment": "Returns the index of the first progressive pass that will be decoded. If no value has been set, 0 will be returned (which is the correct value).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#setSourceProgressivePasses(int,int)\"\u003e\u003ccode\u003esetSourceProgressivePasses(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getSourceNumProgressivePasses()\"\u003e\u003ccode\u003egetSourceNumProgressivePasses()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the index of the first pass that will be decoded."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceMaxProgressivePass",
      "comment": "If getSourceNumProgressivePasses is equal to Integer.MAX_VALUE, returns Integer.MAX_VALUE. Otherwise, returns getSourceMinProgressivePass() + getSourceNumProgressivePasses() - 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the index of the last pass to be read, or \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceNumProgressivePasses",
      "comment": "Returns the number of the progressive passes that will be decoded. If no value has been set, Integer.MAX_VALUE will be returned (which is the correct value).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#setSourceProgressivePasses(int,int)\"\u003e\u003ccode\u003esetSourceProgressivePasses(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReadParam.html#getSourceMinProgressivePass()\"\u003e\u003ccode\u003egetSourceMinProgressivePass()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of the passes that will be decoded."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ImageReadParam.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.ImageReadParam",
  "comment": "A class describing how a stream is to be decoded. Instances of this class or its subclasses are used to supply prescriptive \"how-to\" information to instances of \n\u003ccode\u003eImageReader\u003c/code\u003e. \n\u003cp\u003e An image encoded as part of a file or stream may be thought of extending out in multiple dimensions: the spatial dimensions of width and height, a number of bands, and a number of progressive decoding passes. This class allows a contiguous (hyper)rectangular subarea of the image in all of these dimensions to be selected for decoding. Additionally, the spatial dimensions may be subsampled discontinuously. Finally, color and format conversions may be specified by controlling the \u003ccode\u003eColorModel\u003c/code\u003e and \u003ccode\u003eSampleModel\u003c/code\u003e of the destination image, either by providing a \u003ccode\u003eBufferedImage\u003c/code\u003e or by using an \u003ccode\u003eImageTypeSpecifier\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e An \u003ccode\u003eImageReadParam\u003c/code\u003e object is used to specify how an image, or a set of images, will be converted on input from a stream in the context of the Java Image I/O framework. A plug-in for a specific image format will return instances of \u003ccode\u003eImageReadParam\u003c/code\u003e from the \u003ccode\u003egetDefaultReadParam\u003c/code\u003e method of its \u003ccode\u003eImageReader\u003c/code\u003e implementation. \u003c/p\u003e\n\u003cp\u003e The state maintained by an instance of \u003ccode\u003eImageReadParam\u003c/code\u003e is independent of any particular image being decoded. When actual decoding takes place, the values set in the read param are combined with the actual properties of the image being decoded from the stream and the destination \u003ccode\u003eBufferedImage\u003c/code\u003e that will receive the decoded pixel data. For example, the source region set using \u003ccode\u003esetSourceRegion\u003c/code\u003e will first be intersected with the actual valid source area. The result will be translated by the value returned by \u003ccode\u003egetDestinationOffset\u003c/code\u003e, and the resulting rectangle intersected with the actual valid destination area to yield the destination area that will be written. \u003c/p\u003e\n\u003cp\u003e The parameters specified by an \u003ccode\u003eImageReadParam\u003c/code\u003e are applied to an image as follows. First, if a rendering size has been set by \u003ccode\u003esetSourceRenderSize\u003c/code\u003e, the entire decoded image is rendered at the size given by \u003ccode\u003egetSourceRenderSize\u003c/code\u003e. Otherwise, the image has its natural size given by \u003ccode\u003eImageReader.getWidth\u003c/code\u003e and \u003ccode\u003eImageReader.getHeight\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Next, the image is clipped against the source region specified by \u003ccode\u003egetSourceXOffset\u003c/code\u003e, \u003ccode\u003egetSourceYOffset\u003c/code\u003e, \u003ccode\u003egetSourceWidth\u003c/code\u003e, and \u003ccode\u003egetSourceHeight\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The resulting region is then subsampled according to the factors given in \u003ca href\u003d\"IIOParam.html#setSourceSubsampling(int,int,int,int)\"\u003e\u003ccode\u003eIIOParam.setSourceSubsampling\u003c/code\u003e\u003c/a\u003e. The first pixel, the number of pixels per row, and the number of rows all depend on the subsampling settings. Call the minimum X and Y coordinates of the resulting rectangle (\u003ccode\u003eminX\u003c/code\u003e, \u003ccode\u003eminY\u003c/code\u003e), its width \u003ccode\u003ew\u003c/code\u003e and its height \u003ccode\u003eh\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e This rectangle is offset by (\u003ccode\u003egetDestinationOffset().x\u003c/code\u003e, \u003ccode\u003egetDestinationOffset().y\u003c/code\u003e) and clipped against the destination bounds. If no destination image has been set, the destination is defined to have a width of \u003ccode\u003egetDestinationOffset().x\u003c/code\u003e + \u003ccode\u003ew\u003c/code\u003e, and a height of \u003ccode\u003egetDestinationOffset().y\u003c/code\u003e + \u003ccode\u003eh\u003c/code\u003e so that all pixels of the source region may be written to the destination. \u003c/p\u003e\n\u003cp\u003e Pixels that land, after subsampling, within the destination image, and that are written in one of the progressive passes specified by \u003ccode\u003egetSourceMinProgressivePass\u003c/code\u003e and \u003ccode\u003egetSourceNumProgressivePasses\u003c/code\u003e are passed along to the next step. \u003c/p\u003e\n\u003cp\u003e Finally, the source samples of each pixel are mapped into destination bands according to the algorithm described in the comment for \u003ccode\u003esetDestinationBands\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Plug-in writers may extend the functionality of \u003ccode\u003eImageReadParam\u003c/code\u003e by providing a subclass that implements additional, plug-in specific interfaces. It is up to the plug-in to document what interfaces are available and how they are to be used. Readers will silently ignore any extended features of an \u003ccode\u003eImageReadParam\u003c/code\u003e subclass of which they are not aware. Also, they may ignore any optional features that they normally disable when creating their own \u003ccode\u003eImageReadParam\u003c/code\u003e instances via \u003ccode\u003egetDefaultReadParam\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Note that unless a query method exists for a capability, it must be supported by all \u003ccode\u003eImageReader\u003c/code\u003e implementations (\u003ci\u003ee.g.\u003c/i\u003e source render size is optional, but subsampling must be supported).\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageReader.html\" title\u003d\"class in javax.imageio\"\u003e\u003ccode\u003eImageReader\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriter.html\" title\u003d\"class in javax.imageio\"\u003e\u003ccode\u003eImageWriter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html\" title\u003d\"class in javax.imageio\"\u003e\u003ccode\u003eImageWriteParam\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}