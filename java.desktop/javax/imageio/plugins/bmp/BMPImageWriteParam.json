{
  "packageName": "javax.imageio.plugins.bmp",
  "simpleName": "BMPImageWriteParam",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.ImageWriteParam",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTopDown",
      "comment": "If set, the data will be written out in a top-down manner, the first scanline being written first.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etopDown\u003c/code\u003e - whether the data are written in top-down order."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTopDown",
      "comment": "Returns the value of the topDown parameter. The default is false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "whether the data are written in top-down order."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BMPImageWriteParam set to use a given Locale and with default values for all parameters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - a \n\u003ccode\u003eLocale\u003c/code\u003e to be used to localize compression type names and quality descriptions, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an BMPImageWriteParam object with default values for all parameters and a null Locale.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.plugins.bmp.BMPImageWriteParam",
  "comment": "A subclass of \n\u003ccode\u003eImageWriteParam\u003c/code\u003e for encoding images in the BMP format. \n\u003cp\u003e This class allows for the specification of various parameters while writing a BMP format image file. By default, the data layout is bottom-up, such that the pixels are stored in bottom-up order, the first scanline being stored last. \u003c/p\u003e\n\u003cp\u003eThe particular compression scheme to be used can be specified by using the \u003ccode\u003esetCompressionType()\u003c/code\u003e method with the appropriate type string. The compression scheme specified will be honored if and only if it is compatible with the type of image being written. If the specified compression scheme is not compatible with the type of image being written then the \u003ccode\u003eIOException\u003c/code\u003e will be thrown by the BMP image writer. If the compression type is not set explicitly then \u003ccode\u003egetCompressionType()\u003c/code\u003e will return \u003ccode\u003enull\u003c/code\u003e. In this case the BMP image writer will select a compression type that supports encoding of the given image without loss of the color resolution. \u003c/p\u003e\n\u003cp\u003eThe compression type strings and the image type(s) each supports are listed in the following table: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Compression Types\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eType String \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eDescription \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eImage Types \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eBI_RGB \u003c/th\u003e\n   \u003ctd\u003eUncompressed RLE \u003c/td\u003e\n   \u003ctd\u003e\u0026lt;\u003d 8-bits/sample \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eBI_RLE8 \u003c/th\u003e\n   \u003ctd\u003e8-bit Run Length Encoding \u003c/td\u003e\n   \u003ctd\u003e\u0026lt;\u003d 8-bits/sample \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eBI_RLE4 \u003c/th\u003e\n   \u003ctd\u003e4-bit Run Length Encoding \u003c/td\u003e\n   \u003ctd\u003e\u0026lt;\u003d 4-bits/sample \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eBI_BITFIELDS \u003c/th\u003e\n   \u003ctd\u003ePacked data \u003c/td\u003e\n   \u003ctd\u003e16 or 32 bits/sample \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}