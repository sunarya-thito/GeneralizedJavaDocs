{
  "packageName": "javax.imageio.plugins.jpeg",
  "simpleName": "JPEGImageReadParam",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.ImageReadParam",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "areTablesSet",
      "comment": "Returns true if tables are currently set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if tables are present."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGQTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "qTables",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "DCHuffmanTables",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "ACHuffmanTables",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDecodeTables",
      "comment": "Sets the quantization and Huffman tables to use in decoding abbreviated streams. There may be a maximum of 4 tables of each type. These tables are ignored once tables are encountered in the stream. All arguments must be non-null. The two arrays of Huffman tables must have the same number of elements. The table specifiers in the frame and scan headers in the stream are assumed to be equivalent to indices into these arrays. The argument arrays are copied by this method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#unsetDecodeTables()\"\u003e\u003ccode\u003eunsetDecodeTables()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eqTables\u003c/code\u003e - an array of quantization table objects.",
          "\u003ccode\u003eDCHuffmanTables\u003c/code\u003e - an array of Huffman table objects.",
          "\u003ccode\u003eACHuffmanTables\u003c/code\u003e - an array of Huffman table objects."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the arguments is \n\u003ccode\u003enull\u003c/code\u003e, has more than 4 elements, or if the numbers of DC and AC tables differ."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unsetDecodeTables",
      "comment": "Removes any quantization and Huffman tables that are currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQTables",
      "comment": "Returns a copy of the array of quantization tables set on the most recent call to setDecodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGQTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDCHuffmanTables",
      "comment": "Returns a copy of the array of DC Huffman tables set on the most recent call to setDecodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getACHuffmanTables",
      "comment": "Returns a copy of the array of AC Huffman tables set on the most recent call to setDecodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JPEGImageReadParam.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.plugins.jpeg.JPEGImageReadParam",
  "annotations": [],
  "tagMap": {}
}