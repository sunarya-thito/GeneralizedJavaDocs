{
  "packageName": "javax.imageio.plugins.jpeg",
  "simpleName": "JPEGImageReadParam",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.ImageReadParam",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "areTablesSet",
      "comment": "Returns true if tables are currently set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if tables are present."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGQTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "qTables",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "DCHuffmanTables",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "ACHuffmanTables",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDecodeTables",
      "comment": "Sets the quantization and Huffman tables to use in decoding abbreviated streams. There may be a maximum of 4 tables of each type. These tables are ignored once tables are encountered in the stream. All arguments must be non-null. The two arrays of Huffman tables must have the same number of elements. The table specifiers in the frame and scan headers in the stream are assumed to be equivalent to indices into these arrays. The argument arrays are copied by this method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#unsetDecodeTables()\"\u003e\u003ccode\u003eunsetDecodeTables()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eqTables\u003c/code\u003e - an array of quantization table objects.",
          "\u003ccode\u003eDCHuffmanTables\u003c/code\u003e - an array of Huffman table objects.",
          "\u003ccode\u003eACHuffmanTables\u003c/code\u003e - an array of Huffman table objects."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the arguments is \n\u003ccode\u003enull\u003c/code\u003e, has more than 4 elements, or if the numbers of DC and AC tables differ."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unsetDecodeTables",
      "comment": "Removes any quantization and Huffman tables that are currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQTables",
      "comment": "Returns a copy of the array of quantization tables set on the most recent call to setDecodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGQTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDCHuffmanTables",
      "comment": "Returns a copy of the array of DC Huffman tables set on the most recent call to setDecodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getACHuffmanTables",
      "comment": "Returns a copy of the array of AC Huffman tables set on the most recent call to setDecodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageReadParam.html#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JPEGImageReadParam.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.plugins.jpeg.JPEGImageReadParam",
  "comment": "This class adds the ability to set JPEG quantization and Huffman tables when using the built-in JPEG reader plug-in. An instance of this class will be returned from the \n\u003ccode\u003egetDefaultImageReadParam\u003c/code\u003e methods of the built-in JPEG \n\u003ccode\u003eImageReader\u003c/code\u003e. \n\u003cp\u003e The sole purpose of these additions is to allow the specification of tables for use in decoding abbreviated streams. The built-in JPEG reader will also accept an ordinary \u003ccode\u003eImageReadParam\u003c/code\u003e, which is sufficient for decoding non-abbreviated streams. \u003c/p\u003e\n\u003cp\u003e While tables for abbreviated streams are often obtained by first reading another abbreviated stream containing only the tables, in some applications the tables are fixed ahead of time. This class allows the tables to be specified directly from client code. If no tables are specified either in the stream or in a \u003ccode\u003eJPEGImageReadParam\u003c/code\u003e, then the stream is presumed to use the \"standard\" visually lossless tables. See \u003ca href\u003d\"JPEGQTable.html\" title\u003d\"class in javax.imageio.plugins.jpeg\"\u003e\u003ccode\u003eJPEGQTable\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"JPEGHuffmanTable.html\" title\u003d\"class in javax.imageio.plugins.jpeg\"\u003e\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e\u003c/a\u003e for more information on the default tables. \u003c/p\u003e\n\u003cp\u003e The default \u003ccode\u003eJPEGImageReadParam\u003c/code\u003e returned by the \u003ccode\u003egetDefaultReadParam\u003c/code\u003e method of the builtin JPEG reader contains no tables. Default tables may be obtained from the table classes \u003ca href\u003d\"JPEGQTable.html\" title\u003d\"class in javax.imageio.plugins.jpeg\"\u003e\u003ccode\u003eJPEGQTable\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"JPEGHuffmanTable.html\" title\u003d\"class in javax.imageio.plugins.jpeg\"\u003e\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e If a stream does contain tables, the tables given in a \u003ccode\u003eJPEGImageReadParam\u003c/code\u003e are ignored. Furthermore, if the first image in a stream does contain tables and subsequent ones do not, then the tables given in the first image are used for all the abbreviated images. Once tables have been read from a stream, they can be overridden only by tables subsequently read from the same stream. In order to specify new tables, the \u003ca href\u003d\"../../ImageReader.html#setInput(java.lang.Object,boolean,boolean)\"\u003e\u003ccode\u003esetInput\u003c/code\u003e\u003c/a\u003e method of the reader must be called to change the stream. \u003c/p\u003e\n\u003cp\u003e Note that this class does not provide a means for obtaining the tables found in a stream. These may be extracted from a stream by consulting the IIOMetadata object returned by the reader. \u003c/p\u003e\n\u003cp\u003e For more information about the operation of the built-in JPEG plug-ins, see the \u003ca href\u003d\"../../metadata/doc-files/jpeg_metadata.html\"\u003eJPEG metadata format specification and usage notes\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}