{
  "packageName": "javax.imageio.plugins.jpeg",
  "simpleName": "JPEGQTable",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "K1Luminance",
      "comment": "The sample luminance quantization table given in the JPEG specification, table K.1. According to the specification, these values produce \"good\" quality output.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGQTable.html#K1Div2Luminance\"\u003e\u003ccode\u003eK1Div2Luminance\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "K1Div2Luminance",
      "comment": "The sample luminance quantization table given in the JPEG specification, table K.1, with all elements divided by 2. According to the specification, these values produce \"very good\" quality output. This is the table usually used for \"visually lossless\" encoding, and is the default luminance table used if the default tables and quality settings are used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGQTable.html#K1Luminance\"\u003e\u003ccode\u003eK1Luminance\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "K2Chrominance",
      "comment": "The sample chrominance quantization table given in the JPEG specification, table K.2. According to the specification, these values produce \"good\" quality output.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGQTable.html#K2Div2Chrominance\"\u003e\u003ccode\u003eK2Div2Chrominance\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "K2Div2Chrominance",
      "comment": "The sample chrominance quantization table given in the JPEG specification, table K.1, with all elements divided by 2. According to the specification, these values produce \"very good\" quality output. This is the table usually used for \"visually lossless\" encoding, and is the default chrominance table used if the default tables and quality settings are used.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGQTable.html#K2Chrominance\"\u003e\u003ccode\u003eK2Chrominance\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTable",
      "comment": "Returns a copy of the current quantization table as an array of ints in natural (not zig-zag) order.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A copy of the current quantization table."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScaledInstance",
      "comment": "Returns a new quantization table where the values are multiplied by scaleFactor and then clamped to the range 1..32767 (or to 1..255 if forceBaseline is true). Values of scaleFactor less than 1 tend to improve the quality level of the table, and values greater than 1.0 degrade the quality level of the table.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003escaleFactor\u003c/code\u003e - multiplication factor for the table.",
          "\u003ccode\u003eforceBaseline\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, the values will be clamped to the range 1..255"
        ],
        "return": [
          "a new quantization table that is a linear multiple of the current table."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String representing this quantization table.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing this quantization table."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "table",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a quantization table from the argument, which must contain 64 elements in natural order (not zig-zag order). A copy is made of the input array.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etable\u003c/code\u003e - the quantization table, as an \n\u003ccode\u003eint\u003c/code\u003e array."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etable\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or \n\u003ccode\u003etable.length\u003c/code\u003e is not equal to 64."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.plugins.jpeg.JPEGQTable",
  "comment": "A class encapsulating a single JPEG quantization table. The elements appear in natural order (as opposed to zig-zag order). Static variables are provided for the \"standard\" tables taken from Annex K of the JPEG specification, as well as the default tables conventionally used for visually lossless encoding. \n\u003cp\u003e For more information about the operation of the standard JPEG plug-in, see the \u003ca href\u003d\"../../metadata/doc-files/jpeg_metadata.html\"\u003eJPEG metadata format specification and usage notes\u003c/a\u003e\u003c/p\u003e",
  "tagMap": {}
}