{
  "packageName": "javax.imageio.plugins.jpeg",
  "simpleName": "JPEGImageWriteParam",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.imageio.ImageWriteParam",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unsetCompression",
      "comment": "Removes any previous compression quality setting. The default implementation resets the compression quality to 0.75F.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html#setCompressionType(java.lang.String)\"\u003e\u003ccode\u003eImageWriteParam.setCompressionType(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html#setCompressionQuality(float)\"\u003e\u003ccode\u003eImageWriteParam.setCompressionQuality(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html#unsetCompression()\"\u003eunsetCompression\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html\" title\u003d\"class in javax.imageio\"\u003eImageWriteParam\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the compression mode is not \n\u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCompressionLossless",
      "comment": "Returns false since the JPEG plug-in only supports lossy compression.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html#isCompressionLossless()\"\u003eisCompressionLossless\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/ImageWriteParam.html\" title\u003d\"class in javax.imageio\"\u003eImageWriteParam\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the compression mode is not \n\u003ccode\u003eMODE_EXPLICIT\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "areTablesSet",
      "comment": "Returns true if tables are currently set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if tables are present."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGQTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "qTables",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "DCHuffmanTables",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "ACHuffmanTables",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEncodeTables",
      "comment": "Sets the quantization and Huffman tables to use in encoding abbreviated streams. There may be a maximum of 4 tables of each type. These tables are ignored if tables are specified in the metadata. All arguments must be non-null. The two arrays of Huffman tables must have the same number of elements. The table specifiers in the frame and scan headers in the metadata are assumed to be equivalent to indices into these arrays. The argument arrays are copied by this method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#unsetEncodeTables()\"\u003e\u003ccode\u003eunsetEncodeTables()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eqTables\u003c/code\u003e - An array of quantization table objects.",
          "\u003ccode\u003eDCHuffmanTables\u003c/code\u003e - An array of Huffman table objects.",
          "\u003ccode\u003eACHuffmanTables\u003c/code\u003e - An array of Huffman table objects."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the arguments is \n\u003ccode\u003enull\u003c/code\u003e or has more than 4 elements, or if the numbers of DC and AC tables differ."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unsetEncodeTables",
      "comment": "Removes any quantization and Huffman tables that are currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGQTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQTables",
      "comment": "Returns a copy of the array of quantization tables set on the most recent call to setEncodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGQTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDCHuffmanTables",
      "comment": "Returns a copy of the array of DC Huffman tables set on the most recent call to setEncodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getACHuffmanTables",
      "comment": "Returns a copy of the array of AC Huffman tables set on the most recent call to setEncodeTables, or null if tables are not currently set.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D,javax.imageio.plugins.jpeg.JPEGHuffmanTable%5B%5D)\"\u003e\u003ccode\u003esetEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eJPEGHuffmanTable\u003c/code\u003e objects, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "optimize",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOptimizeHuffmanTables",
      "comment": "Tells the writer to generate optimized Huffman tables for the image as part of the writing process. The default is false. If this flag is set to true, it overrides any tables specified in the metadata. Note that this means that any image written with this flag set to true will always contain Huffman tables.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#getOptimizeHuffmanTables()\"\u003e\u003ccode\u003egetOptimizeHuffmanTables()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoptimize\u003c/code\u003e - A boolean indicating whether to generate optimized Huffman tables when writing."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOptimizeHuffmanTables",
      "comment": "Returns the value passed into the most recent call to setOptimizeHuffmanTables, or false if setOptimizeHuffmanTables has never been called.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/plugins/jpeg/JPEGImageWriteParam.html#setOptimizeHuffmanTables(boolean)\"\u003e\u003ccode\u003esetOptimizeHuffmanTables(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the writer will generate optimized Huffman tables."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JPEGImageWriteParam. Tiling is not supported. Progressive encoding is supported. The default progressive mode is MODE_DISABLED. A single form of compression, named \"JPEG\", is supported. The default compression quality is 0.75.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - a \n\u003ccode\u003eLocale\u003c/code\u003e to be used by the superclass to localize compression type names and quality descriptions, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.imageio.plugins.jpeg.JPEGImageWriteParam",
  "annotations": [],
  "tagMap": {}
}