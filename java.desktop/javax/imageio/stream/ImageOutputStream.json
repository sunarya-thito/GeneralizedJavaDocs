{
  "packageName": "javax.imageio.stream",
  "simpleName": "ImageOutputStream",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "javax.imageio.stream.ImageInputStream",
      "type": "Class"
    },
    {
      "name": "java.io.DataOutput",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "write",
      "comment": "Writes a single byte to the stream at the current position. The 24 high-order bits of b are ignored. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write. Implementers can use the flushBits method of ImageOutputStreamImpl to guarantee this.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#write(int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e whose lower 8 bits are to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "write",
      "comment": "Writes a sequence of bytes to the stream at the current position. If b.length is 0, nothing is written. The byte b[0] is written first, then the byte b[1], and so on. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#write(byte%5B%5D)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - an array of \n\u003ccode\u003ebyte\u003c/code\u003es to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "write",
      "comment": "Writes a sequence of bytes to the stream at the current position. If len is 0, nothing is written. The byte b[off] is written first, then the byte b[off + 1], and so on. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write. Implementers can use the flushBits method of ImageOutputStreamImpl to guarantee this.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#write(byte%5B%5D,int,int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - an array of \n\u003ccode\u003ebyte\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003ebyte\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003eb.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eb\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeBoolean",
      "comment": "Writes a boolean value to the stream. If v is true, the value (byte)1 is written; if v is false, the value (byte)0 is written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeBoolean(boolean)\"\u003ewriteBoolean\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the \n\u003ccode\u003eboolean\u003c/code\u003e to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeByte",
      "comment": "Writes the 8 low-order bits of v to the stream. The 24 high-order bits of v are ignored. (This means that writeByte does exactly the same thing as write for an integer argument.) If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeByte(int)\"\u003ewriteByte\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e containing the byte value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeShort",
      "comment": "Writes the 16 low-order bits of v to the stream. The 16 high-order bits of v are ignored. If the stream uses network byte order, the bytes written, in order, will be:  (byte)((v \u003e\u003e 8) \u0026 0xff)\n (byte)(v \u0026 0xff)\n Otherwise, the bytes written will be:  (byte)(v \u0026 0xff)\n (byte)((v \u003e\u003e 8) \u0026 0xff)\n If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeShort(int)\"\u003ewriteShort\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e containing the short value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeChar",
      "comment": "This method is a synonym for writeShort.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/stream/ImageOutputStream.html#writeShort(int)\"\u003e\u003ccode\u003ewriteShort(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeChar(int)\"\u003ewriteChar\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e containing the char (unsigned short) value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeInt",
      "comment": "Writes the 32 bits of v to the stream. If the stream uses network byte order, the bytes written, in order, will be:  (byte)((v \u003e\u003e 24) \u0026 0xff)\n (byte)((v \u003e\u003e 16) \u0026 0xff)\n (byte)((v \u003e\u003e 8) \u0026 0xff)\n (byte)(v \u0026 0xff)\n Otheriwse, the bytes written will be:  (byte)(v \u0026 0xff)\n (byte)((v \u003e\u003e 8) \u0026 0xff)\n (byte)((v \u003e\u003e 16) \u0026 0xff)\n (byte)((v \u003e\u003e 24) \u0026 0xff)\n If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeInt(int)\"\u003ewriteInt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeLong",
      "comment": "Writes the 64 bits of v to the stream. If the stream uses network byte order, the bytes written, in order, will be:  (byte)((v \u003e\u003e 56) \u0026 0xff)\n (byte)((v \u003e\u003e 48) \u0026 0xff)\n (byte)((v \u003e\u003e 40) \u0026 0xff)\n (byte)((v \u003e\u003e 32) \u0026 0xff)\n (byte)((v \u003e\u003e 24) \u0026 0xff)\n (byte)((v \u003e\u003e 16) \u0026 0xff)\n (byte)((v \u003e\u003e 8) \u0026 0xff)\n (byte)(v \u0026 0xff)\n Otherwise, the bytes written will be:  (byte)(v \u0026 0xff)\n (byte)((v \u003e\u003e 8) \u0026 0xff)\n (byte)((v \u003e\u003e 16) \u0026 0xff)\n (byte)((v \u003e\u003e 24) \u0026 0xff)\n (byte)((v \u003e\u003e 32) \u0026 0xff)\n (byte)((v \u003e\u003e 40) \u0026 0xff)\n (byte)((v \u003e\u003e 48) \u0026 0xff)\n (byte)((v \u003e\u003e 56) \u0026 0xff)\n If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeLong(long)\"\u003ewriteLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeFloat",
      "comment": "Writes a float value, which is comprised of four bytes, to the output stream. It does this as if it first converts this float value to an int in exactly the manner of the Float.floatToIntBits method and then writes the int value in exactly the manner of the writeInt method. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeFloat(float)\"\u003ewriteFloat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a \n\u003ccode\u003efloat\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeDouble",
      "comment": "Writes a double value, which is comprised of four bytes, to the output stream. It does this as if it first converts this double value to a long in exactly the manner of the Double.doubleToLongBits method and then writes the long value in exactly the manner of the writeLong method. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeDouble(double)\"\u003ewriteDouble\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - a \n\u003ccode\u003edouble\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeBytes",
      "comment": "Writes a string to the output stream. For every character in the string s, taken in order, one byte is written to the output stream. If s is null, a NullPointerException is thrown. If s.length is zero, then no bytes are written. Otherwise, the character s[0] is written first, then s[1], and so on; the last character written is s[s.length-1]. For each character, one byte is written, the low-order byte, in exactly the manner of the writeByte method. The high-order eight bits of each character in the string are ignored. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeBytes(java.lang.String)\"\u003ewriteBytes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeChars",
      "comment": "Writes a string to the output stream. For every character in the string s, taken in order, two bytes are written to the output stream, ordered according to the current byte order setting. If network byte order is being used, the high-order byte is written first; the order is reversed otherwise. If s is null, a NullPointerException is thrown. If s.length is zero, then no bytes are written. Otherwise, the character s[0] is written first, then s[1], and so on; the last character written is s[s.length-1]. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeChars(java.lang.String)\"\u003ewriteChars\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeUTF",
      "comment": "Writes two bytes of length information to the output stream in network byte order, followed by the modified UTF-8 representation of every character in the string s. If s is null, a NullPointerException is thrown. Each character in the string s is converted to a group of one, two, or three bytes, depending on the value of the character. If a character c is in the range \\u0001 through \\u007f, it is represented by one byte:  (byte)c\n If a character c is \\u0000 or is in the range \\u0080 through \\u07ff, then it is represented by two bytes, to be written in the order shown: \n (byte)(0xc0 | (0x1f \u0026 (c \u003e\u003e 6)))\n (byte)(0x80 | (0x3f \u0026 c))\n If a character c is in the range \\u0800 through uffff, then it is represented by three bytes, to be written in the order shown: \n (byte)(0xe0 | (0x0f \u0026 (c \u003e\u003e 12)))\n (byte)(0x80 | (0x3f \u0026 (c \u003e\u003e 6)))\n (byte)(0x80 | (0x3f \u0026 c))\n First, the total number of bytes needed to represent all the characters of s is calculated. If this number is larger than 65535, then a UTFDataFormatException is thrown. Otherwise, this length is written to the output stream in exactly the manner of the writeShort method; after this, the one-, two-, or three-byte representation of each character in the string s is written. The current byte order setting is ignored. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write. Note: This method should not be used in the implementation of image formats that use standard UTF-8, because the modified UTF-8 used here is incompatible with standard UTF-8.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html#writeUTF(java.lang.String)\"\u003ewriteUTF\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/DataOutput.html\" title\u003d\"interface in java.io\"\u003eDataOutput\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the value to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UTFDataFormatException.html\" title\u003d\"class in java.io\"\u003eUTFDataFormatException\u003c/a\u003e\u003c/code\u003e - if the modified UTF-8 representation of \n\u003ccode\u003es\u003c/code\u003e requires more than 65536 bytes.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeShorts",
      "comment": "Writes a sequence of shorts to the stream at the current position. If len is 0, nothing is written. The short s[off] is written first, then the short s[off + 1], and so on. The byte order of the stream is used to determine the order in which the individual bytes are written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - an array of \n\u003ccode\u003eshort\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003eshort\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003es.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeChars",
      "comment": "Writes a sequence of chars to the stream at the current position. If len is 0, nothing is written. The char c[off] is written first, then the char c[off + 1], and so on. The byte order of the stream is used to determine the order in which the individual bytes are written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - an array of \n\u003ccode\u003echar\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003echar\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003ec.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeInts",
      "comment": "Writes a sequence of ints to the stream at the current position. If len is 0, nothing is written. The int i[off] is written first, then the int i[off + 1], and so on. The byte order of the stream is used to determine the order in which the individual bytes are written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - an array of \n\u003ccode\u003eint\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003eint\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003ei.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ei\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeLongs",
      "comment": "Writes a sequence of longs to the stream at the current position. If len is 0, nothing is written. The long l[off] is written first, then the long l[off + 1], and so on. The byte order of the stream is used to determine the order in which the individual bytes are written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - an array of \n\u003ccode\u003elong\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003elong\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003el.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeFloats",
      "comment": "Writes a sequence of floats to the stream at the current position. If len is 0, nothing is written. The float f[off] is written first, then the float f[off + 1], and so on. The byte order of the stream is used to determine the order in which the individual bytes are written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - an array of \n\u003ccode\u003efloat\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003efloat\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003ef.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ef\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeDoubles",
      "comment": "Writes a sequence of doubles to the stream at the current position. If len is 0, nothing is written. The double d[off] is written first, then the double d[off + 1], and so on. The byte order of the stream is used to determine the order in which the individual bytes are written. If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first. The bit offset will be 0 after the write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - an array of \n\u003ccode\u003edoubles\u003c/code\u003es to be written.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003edouble\u003c/code\u003es to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoff\u003c/code\u003e is negative, \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003eoff + len\u003c/code\u003e is greater than \n\u003ccode\u003ed.length\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ed\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeBit",
      "comment": "Writes a single bit, given by the least significant bit of the argument, to the stream at the current bit offset within the current byte position. The upper 31 bits of the argument are ignored. The given bit replaces the previous bit at that position. The bit offset is advanced by one and reduced modulo 8. If any bits of a particular byte have never been set at the time the byte is flushed to the destination, those bits will be set to 0 automatically.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebit\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e whose least significant bit is to be written to the stream."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeBits",
      "comment": "Writes a sequence of bits, given by the numBits least significant bits of the bits argument in left-to-right order, to the stream at the current bit offset within the current byte position. The upper 64 - numBits bits of the argument are ignored. The bit offset is advanced by numBits and reduced modulo 8. Note that a bit offset of 0 always indicates the most-significant bit of the byte, and bytes of bits are written out in sequence as they are encountered. Thus bit writes are always effectively in network byte order. The actual stream byte order setting is ignored. Bit data may be accumulated in memory indefinitely, until flushBefore is called. At that time, all bit data prior to the flushed position will be written. If any bits of a particular byte have never been set at the time the byte is flushed to the destination, those bits will be set to 0 automatically.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e containing the bits to be written, starting with the bit in position \n\u003ccode\u003enumBits - 1\u003c/code\u003e down to the least significant bit.",
          "\u003ccode\u003enumBits\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e between 0 and 64, inclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumBits\u003c/code\u003e is not between 0 and 64, inclusive.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "flushBefore",
      "comment": "Flushes all data prior to the given position to the underlying destination, such as an OutputStream or File. Attempting to seek to the flushed portion of the stream will result in an IndexOutOfBoundsException.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/stream/ImageInputStream.html#flushBefore(long)\"\u003eflushBefore\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/stream/ImageInputStream.html\" title\u003d\"interface in javax.imageio.stream\"\u003eImageInputStream\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epos\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e containing the length of the stream prefix that may be flushed to the destination."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epos\u003c/code\u003e lies in the flushed portion of the stream or past the current stream position.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.imageio.stream.ImageOutputStream",
  "comment": "A seekable output stream interface for use by \n\u003ccode\u003eImageWriter\u003c/code\u003es. Various output destinations, such as \n\u003ccode\u003eOutputStream\u003c/code\u003es and \n\u003ccode\u003eFile\u003c/code\u003es, as well as future fast I/O destinations may be \"wrapped\" by a suitable implementation of this interface for use by the Image I/O API. \n\u003cp\u003e Unlike a standard \u003ccode\u003eOutputStream\u003c/code\u003e, ImageOutputStream extends its counterpart, \u003ccode\u003eImageInputStream\u003c/code\u003e. Thus it is possible to read from the stream as it is being written. The same seek and flush positions apply to both reading and writing, although the semantics for dealing with a non-zero bit offset before a byte-aligned write are necessarily different from the semantics for dealing with a non-zero bit offset before a byte-aligned read. When reading bytes, any bit offset is set to 0 before the read; when writing bytes, a non-zero bit offset causes the remaining bits in the byte to be written as 0s. The byte-aligned write then starts at the next byte position.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/stream/ImageInputStream.html\" title\u003d\"interface in javax.imageio.stream\"\u003e\u003ccode\u003eImageInputStream\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}