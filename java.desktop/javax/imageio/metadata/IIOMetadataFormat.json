{
  "packageName": "javax.imageio.metadata",
  "simpleName": "IIOMetadataFormat",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_EMPTY",
      "comment": "A constant returned by getChildPolicy to indicate that an element may not have any children. In other words, it is required to be a leaf node.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_EMPTY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_ALL",
      "comment": "A constant returned by getChildPolicy to indicate that an element must have a single instance of each of its legal child elements, in order. In DTD terms, the contents of the element are defined by a sequence a,b,c,d,....",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_ALL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_SOME",
      "comment": "A constant returned by getChildPolicy to indicate that an element must have zero or one instance of each of its legal child elements, in order. In DTD terms, the contents of the element are defined by a sequence a?,b?,c?,d?,....",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_SOME\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_CHOICE",
      "comment": "A constant returned by getChildPolicy to indicate that an element must have zero or one children, selected from among its legal child elements. In DTD terms, the contents of the element are defined by a selection a|b|c|d|....",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_CHOICE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_SEQUENCE",
      "comment": "A constant returned by getChildPolicy to indicate that an element must have a sequence of instances of any of its legal child elements. In DTD terms, the contents of the element are defined by a sequence (a|b|c|d|...)*.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_SEQUENCE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_REPEAT",
      "comment": "A constant returned by getChildPolicy to indicate that an element must have zero or more instances of its unique legal child element. In DTD terms, the contents of the element are defined by a starred expression a*.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_REPEAT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CHILD_POLICY_MAX",
      "comment": "The largest valid CHILD_POLICY_* constant, to be used for range checks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.CHILD_POLICY_MAX\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_NONE",
      "comment": "A constant returned by getObjectValueType to indicate the absence of a user object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_NONE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_ARBITRARY",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set a single, arbitrary value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_ARBITRARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_RANGE",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set a range of values. Both the minimum and maximum values of the range are exclusive. It is recommended that ranges of integers be inclusive on both ends, and that exclusive ranges be used only for floating-point data.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/imageio/metadata/IIOMetadataFormat.html#VALUE_RANGE_MIN_MAX_INCLUSIVE\"\u003e\u003ccode\u003eVALUE_RANGE_MIN_MAX_INCLUSIVE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_RANGE_MIN_INCLUSIVE_MASK",
      "comment": "A value that may be or\u0027ed with VALUE_RANGE to obtain VALUE_RANGE_MIN_INCLUSIVE, and with VALUE_RANGE_MAX_INCLUSIVE to obtain VALUE_RANGE_MIN_MAX_INCLUSIVE. Similarly, the value may be and\u0027ed with the value of getAttributeValueType or getObjectValueType to determine if the minimum value of the range is inclusive.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MIN_INCLUSIVE_MASK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_RANGE_MAX_INCLUSIVE_MASK",
      "comment": "A value that may be or\u0027ed with VALUE_RANGE to obtain VALUE_RANGE_MAX_INCLUSIVE, and with VALUE_RANGE_MIN_INCLUSIVE to obtain VALUE_RANGE_MIN_MAX_INCLUSIVE. Similarly, the value may be and\u0027ed with the value of getAttributeValueType or getObjectValueType to determine if the maximum value of the range is inclusive.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MAX_INCLUSIVE_MASK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_RANGE_MIN_INCLUSIVE",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set to a range of values. The minimum (but not the maximum) value of the range is inclusive.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MIN_INCLUSIVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_RANGE_MAX_INCLUSIVE",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set to a range of values. The maximum (but not the minimum) value of the range is inclusive.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MAX_INCLUSIVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_RANGE_MIN_MAX_INCLUSIVE",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set a range of values. Both the minimum and maximum values of the range are inclusive. It is recommended that ranges of integers be inclusive on both ends, and that exclusive ranges be used only for floating-point data.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_RANGE_MIN_MAX_INCLUSIVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_ENUMERATION",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set one of a number of enumerated values. In the case of attributes, these values are Strings; for objects, they are Objects implementing a given class or interface. Attribute values of type DATATYPE_BOOLEAN should be marked as enumerations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_ENUMERATION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "VALUE_LIST",
      "comment": "A constant returned by getAttributeValueType and getObjectValueType to indicate that the attribute or user object may be set to a list or array of values. In the case of attributes, the list will consist of whitespace-separated values within a String; for objects, an array will be used.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.VALUE_LIST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DATATYPE_STRING",
      "comment": "A constant returned by getAttributeDataType indicating that the value of an attribute is a general Unicode string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.DATATYPE_STRING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DATATYPE_BOOLEAN",
      "comment": "A constant returned by getAttributeDataType indicating that the value of an attribute is one of the boolean values \u0027true\u0027 or \u0027false\u0027. Attribute values of type DATATYPE_BOOLEAN should be marked as enumerations, and the permitted values should be the string literal values \"TRUE\" or \"FALSE\", although a plugin may also recognise lower or mixed case equivalents.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.DATATYPE_BOOLEAN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DATATYPE_INTEGER",
      "comment": "A constant returned by getAttributeDataType indicating that the value of an attribute is a string representation of an integer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.DATATYPE_INTEGER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DATATYPE_FLOAT",
      "comment": "A constant returned by getAttributeDataType indicating that the value of an attribute is a string representation of a decimal floating-point number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.DATATYPE_FLOAT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DATATYPE_DOUBLE",
      "comment": "A constant returned by getAttributeDataType indicating that the value of an attribute is a string representation of a double-precision decimal floating-point number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.imageio.metadata.IIOMetadataFormat.DATATYPE_DOUBLE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRootName",
      "comment": "Returns the name of the root element of the format.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "javax.imageio.ImageTypeSpecifier",
            "type": "Class"
          },
          "field": {
            "name": "imageType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "canNodeAppear",
      "comment": "Returns true if the element (and the subtree below it) is allowed to appear in a metadata document for an image of the given type, defined by an ImageTypeSpecifier. For example, a metadata document format might contain an element that describes the primary colors of the image, which would not be allowed when writing a grayscale image.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eimageType\u003c/code\u003e - an \n\u003ccode\u003eImageTypeSpecifier\u003c/code\u003e indicating the type of the image that will be associated with the metadata."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the node is meaningful for images of the given type."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementMinChildren",
      "comment": "Returns the minimum number of children of the named element with child policy CHILD_POLICY_REPEAT. For example, an element representing color primary information might be required to have at least 3 children, one for each primary.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element does not have a child policy of \n\u003ccode\u003eCHILD_POLICY_REPEAT\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementMaxChildren",
      "comment": "Returns the maximum number of children of the named element with child policy CHILD_POLICY_REPEAT. For example, an element representing an entry in an 8-bit color palette might be allowed to repeat up to 256 times. A value of Integer.MAX_VALUE may be used to specify that there is no upper bound.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element does not have a child policy of \n\u003ccode\u003eCHILD_POLICY_REPEAT\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementDescription",
      "comment": "Returns a String containing a description of the named element, or null. The description will be localized for the supplied Locale if possible. If locale is null, the current default Locale returned by Locale.getLocale will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element.",
          "\u003ccode\u003elocale\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which localization will be attempted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or is not a legal element name for this format."
        ],
        "return": [
          "the element description."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChildPolicy",
      "comment": "Returns one of the constants starting with CHILD_POLICY_, indicating the legal pattern of children for the named element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format."
        ],
        "return": [
          "one of the \n\u003ccode\u003eCHILD_POLICY_*\u003c/code\u003e constants."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChildNames",
      "comment": "Returns an array of Strings indicating the names of the element which are allowed to be children of the named element, in the order in which they should appear. If the element cannot have children, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format."
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeNames",
      "comment": "Returns an array of Strings listing the names of the attributes that may be associated with the named element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format."
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeValueType",
      "comment": "Returns one of the constants starting with VALUE_, indicating whether the values of the given attribute within the named element are arbitrary, constrained to lie within a specified range, constrained to be one of a set of enumerated values, or are a whitespace-separated list of arbitrary values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element."
        ],
        "return": [
          "one of the \n\u003ccode\u003eVALUE_*\u003c/code\u003e constants."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeDataType",
      "comment": "Returns one of the constants starting with DATATYPE_, indicating the format and interpretation of the value of the given attribute within the named element. If getAttributeValueType returns VALUE_LIST, then the legal value is a whitespace-spearated list of values of the returned datatype.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element."
        ],
        "return": [
          "one of the \n\u003ccode\u003eDATATYPE_*\u003c/code\u003e constants."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAttributeRequired",
      "comment": "Returns true if the named attribute must be present within the named element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the attribute must be present."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeDefaultValue",
      "comment": "Returns the default value of the named attribute, if it is not explicitly present within the named element, as a String, or null if no default value is available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the default value, or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeEnumerations",
      "comment": "Returns an array of Strings containing the legal enumerated values for the given attribute within the named element. This method should only be called if getAttributeValueType returns VALUE_ENUMERATION.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given attribute is not defined as an enumeration."
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003es."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeMinValue",
      "comment": "Returns the minimum legal value for the attribute. Whether this value is inclusive or exclusive may be determined by the value of getAttributeValueType. The value is returned as a String; its interpretation is dependent on the value of getAttributeDataType. This method should only be called if getAttributeValueType returns VALUE_RANGE_*.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given attribute is not defined as a range."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the smallest legal value for the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeMaxValue",
      "comment": "Returns the maximum legal value for the attribute. Whether this value is inclusive or exclusive may be determined by the value of getAttributeValueType. The value is returned as a String; its interpretation is dependent on the value of getAttributeDataType. This method should only be called if getAttributeValueType returns VALUE_RANGE_*.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried, as a \n\u003ccode\u003eString\u003c/code\u003e.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given attribute is not defined as a range."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the largest legal value for the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeListMinLength",
      "comment": "Returns the minimum number of list items that may be used to define this attribute. The attribute itself is defined as a String containing multiple whitespace-separated items. This method should only be called if getAttributeValueType returns VALUE_LIST.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given attribute is not defined as a list."
        ],
        "return": [
          "the smallest legal number of list items for the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeListMaxLength",
      "comment": "Returns the maximum number of list items that may be used to define this attribute. A value of Integer.MAX_VALUE may be used to specify that there is no upper bound. The attribute itself is defined as a String containing multiple whitespace-separated items. This method should only be called if getAttributeValueType returns VALUE_LIST.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given attribute is not defined as a list."
        ],
        "return": [
          "the largest legal number of list items for the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeDescription",
      "comment": "Returns a String containing a description of the named attribute, or null. The description will be localized for the supplied Locale if possible. If locale is null, the current default Locale returned by Locale.getLocale will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element.",
          "\u003ccode\u003eattrName\u003c/code\u003e - the name of the attribute.",
          "\u003ccode\u003elocale\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which localization will be attempted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattrName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal attribute name for this element."
        ],
        "return": [
          "the attribute description."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectValueType",
      "comment": "Returns one of the enumerated values starting with VALUE_, indicating the type of values (enumeration, range, or array) that are allowed for the Object reference. If no object value can be stored within the given element, the result of this method will be VALUE_NONE. Object references whose legal values are defined as a range must implement the Comparable interface.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format."
        ],
        "return": [
          "one of the \n\u003ccode\u003eVALUE_*\u003c/code\u003e constants."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectClass",
      "comment": "Returns the Class type of the Object reference stored within the element. If this element may not contain an Object reference, an IllegalArgumentException will be thrown. If the class type is an array, this field indicates the underlying class type (e.g, for an array of ints, this method would return int.class). Object references whose legal values are defined as a range must implement the Comparable interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e)."
        ],
        "return": [
          "a \n\u003ccode\u003eClass\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectDefaultValue",
      "comment": "Returns an Objects containing the default value for the Object reference within the named element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e)."
        ],
        "return": [
          "an \n\u003ccode\u003eObject\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectEnumerations",
      "comment": "Returns an array of Objects containing the legal enumerated values for the Object reference within the named element. This method should only be called if getObjectValueType returns VALUE_ENUMERATION. The Object associated with a node that accepts enumerated values must be equal to one of the values returned by this method, as defined by the \u003d\u003d operator (as opposed to the Object.equals method).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eObject\u003c/code\u003e is not defined as an enumeration."
        ],
        "return": [
          "an array of \n\u003ccode\u003eObject\u003c/code\u003es."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectMinValue",
      "comment": "Returns the minimum legal value for the Object reference within the named element. Whether this value is inclusive or exclusive may be determined by the value of getObjectValueType. This method should only be called if getObjectValueType returns one of the constants starting with VALUE_RANGE.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eObject\u003c/code\u003e is not defined as a range."
        ],
        "return": [
          "the smallest legal value for the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Comparable",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectMaxValue",
      "comment": "Returns the maximum legal value for the Object reference within the named element. Whether this value is inclusive or exclusive may be determined by the value of getObjectValueType. This method should only be called if getObjectValueType returns one of the constants starting with VALUE_RANGE.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eObject\u003c/code\u003e is not defined as a range."
        ],
        "return": [
          "the smallest legal value for the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectArrayMinLength",
      "comment": "Returns the minimum number of array elements that may be used to define the Object reference within the named element. This method should only be called if getObjectValueType returns VALUE_LIST.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eObject\u003c/code\u003e is not an array."
        ],
        "return": [
          "the smallest valid array length for the \n\u003ccode\u003eObject\u003c/code\u003e reference."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObjectArrayMaxLength",
      "comment": "Returns the maximum number of array elements that may be used to define the Object reference within the named element. A value of Integer.MAX_VALUE may be used to specify that there is no upper bound. This method should only be called if getObjectValueType returns VALUE_LIST.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - the name of the element being queried."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal element name for this format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the named element cannot contain an object value (\n\u003ci\u003ei.e.\u003c/i\u003e, if \n\u003ccode\u003egetObjectValueType(elementName) \u003d\u003d VALUE_NONE\u003c/code\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eObject\u003c/code\u003e is not an array."
        ],
        "return": [
          "the largest valid array length for the \n\u003ccode\u003eObject\u003c/code\u003e reference."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.imageio.metadata.IIOMetadataFormat",
  "comment": "An object describing the structure of metadata documents returned from \n\u003ccode\u003eIIOMetadata.getAsTree\u003c/code\u003e and passed to \n\u003ccode\u003eIIOMetadata.setFromTree\u003c/code\u003e and \n\u003ccode\u003emergeTree\u003c/code\u003e. Document structures are described by a set of constraints on the type and number of child elements that may belong to a given parent element type, the names, types, and values of attributes that may belong to an element, and the type and values of \n\u003ccode\u003eObject\u003c/code\u003e reference that may be stored at a node. \n\u003cp\u003e N.B: classes that implement this interface should contain a method declared as \u003ccode\u003epublic static getInstance()\u003c/code\u003e which returns an instance of the class. Commonly, an implementation will construct only a single instance and cache it for future invocations of \u003ccode\u003egetInstance\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e In the event that the plugin is provided as part of a named module, that module must export the package containing the implementation class to the \u003c/p\u003e\n\u003cpre\u003ejava.desktop\u003c/pre\u003e module via a qualified export. An unqualified export is not recommended unless also needed for some other reason. Failing to export the package will result in access failure at runtime. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The structures that may be described by this class are a subset of those expressible using XML document type definitions (DTDs), with the addition of some basic information on the datatypes of attributes and the ability to store an \u003ccode\u003eObject\u003c/code\u003e reference within a node. In the future, XML Schemas could be used to represent these structures, and many others. \u003c/p\u003e\n\u003cp\u003e The differences between \u003ccode\u003eIIOMetadataFormat\u003c/code\u003e-described structures and DTDs are as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e Elements may not contain text or mix text with embedded tags. \u003c/li\u003e\n \u003cli\u003e The children of an element must conform to one of a few simple patterns, described in the documentation for the \u003ccode\u003eCHILD_*\u003c/code\u003e constants; \u003c/li\u003e\n \u003cli\u003e The in-memory representation of an elements may contain a reference to an \u003ccode\u003eObject\u003c/code\u003e. There is no provision for representing such objects textually. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {}
}