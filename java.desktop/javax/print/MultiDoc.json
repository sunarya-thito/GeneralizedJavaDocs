{
  "packageName": "javax.print",
  "simpleName": "MultiDoc",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.print.Doc",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDoc",
      "comment": "Obtain the current doc object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an error occurred when reading the document"
        ],
        "return": [
          "current doc object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.MultiDoc",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "next",
      "comment": "Go to the multidoc object that contains the next doc object in the sequence of doc objects.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an error occurred locating the next document"
        ],
        "return": [
          "multidoc object containing the next doc object, or \n\u003ccode\u003enull\u003c/code\u003e if there are no further doc objects"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.print.MultiDoc",
  "comment": "Interface \n\u003ccode\u003eMultiDoc\u003c/code\u003e specifies the interface for an object that supplies more than one piece of print data for a Print Job. \"Doc\" is a short, easy-to-pronounce term that means \"a piece of print data,\" and a \"multidoc\" is a group of several docs. The client passes to the Print Job an object that implements interface \n\u003ccode\u003eMultiDoc\u003c/code\u003e, and the Print Job calls methods on that object to obtain the print data. \n\u003cp\u003e Interface \u003ccode\u003eMultiDoc\u003c/code\u003e provides an abstraction similar to a \"linked list\" of docs. A multidoc object is like a node in the linked list, containing the current doc in the list and a pointer to the next node (multidoc) in the list. The Print Job can call the multidoc\u0027s \u003ca href\u003d\"#getDoc()\"\u003e\u003ccode\u003egetDoc()\u003c/code\u003e\u003c/a\u003e method to get the current doc. When it\u0027s ready to go on to the next doc, the Print Job can call the multidoc\u0027s \u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e method to get the next multidoc, which contains the next doc. So Print Job code for accessing a multidoc might look like this: \u003c/p\u003e\n\u003cpre\u003e      void processMultiDoc(MultiDoc theMultiDoc) {\n\n          MultiDoc current \u003d theMultiDoc;\n\n          while (current !\u003d null) {\n              processDoc (current.getDoc());\n              current \u003d current.next();\n          }\n      }\n \u003c/pre\u003e Of course, interface \n\u003ccode\u003eMultiDoc\u003c/code\u003e can be implemented in any way that fulfills the contract; it doesn\u0027t have to use a linked list in the implementation. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e To get all the print data for a multidoc print job, a Print Service proxy could use either of two patterns: \u003c/p\u003e\n\u003col type\u003d\"1\"\u003e \n \u003cli\u003eThe \u003cb\u003einterleaved\u003c/b\u003e pattern: Get the doc from the current multidoc. Get the print data representation object from the current doc. Get all the print data from the print data representation object. Get the next multidoc from the current multidoc, and repeat until there are no more. (The code example above uses the interleaved pattern.) \u003c/li\u003e\n \u003cli\u003eThe \u003cb\u003eall-at-once\u003c/b\u003e pattern: Get the doc from the current multidoc, and save the doc in a list. Get the next multidoc from the current multidoc, and repeat until there are no more. Then iterate over the list of saved docs. Get the print data representation object from the current doc. Get all the print data from the print data representation object. Go to the next doc in the list, and repeat until there are no more. \u003c/li\u003e\n\u003c/ol\u003e Now, consider a printing client that is generating print data on the fly and does not have the resources to store more than one piece of print data at a time. If the print service proxy used the all-at-once pattern to get the print data, it would pose a problem for such a client; the client would have to keep all the docs\u0027 print data around until the print service proxy comes back and asks for them, which the client is not able to do. To work with such a client, the print service proxy must use the interleaved pattern. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e To address this problem, and to simplify the design of clients providing multiple docs to a Print Job, every Print Service proxy that supports multidoc print jobs is required to access a \u003ccode\u003eMultiDoc\u003c/code\u003e object using the interleaved pattern. That is, given a \u003ccode\u003eMultiDoc\u003c/code\u003e object, the print service proxy will call \u003ca href\u003d\"#getDoc()\"\u003e\u003ccode\u003egetDoc()\u003c/code\u003e\u003c/a\u003e one or more times until it successfully obtains the current \u003ccode\u003eDoc\u003c/code\u003e object. The print service proxy will then obtain the current doc\u0027s print data, not proceeding until all the print data is obtained or an unrecoverable error occurs. If it is able to continue, the print service proxy will then call \u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e one or more times until it successfully obtains either the next \u003ccode\u003eMultiDoc\u003c/code\u003e object or an indication that there are no more. An implementation of interface \u003ccode\u003eMultiDoc\u003c/code\u003e can assume the print service proxy will follow this interleaved pattern; for any other pattern of usage, the \u003ccode\u003eMultiDoc\u003c/code\u003e implementation\u0027s behavior is unspecified. \u003c/p\u003e\n\u003cp\u003e There is no restriction on the number of client threads that may be simultaneously accessing the same multidoc. Therefore, all implementations of interface MultiDoc must be designed to be multiple thread safe. In fact, a client thread could be adding docs to the end of the (conceptual) list while a Print Job thread is simultaneously obtaining docs from the beginning of the list; provided the multidoc object synchronizes the threads properly, the two threads will not interfere with each other.\u003c/p\u003e",
  "tagMap": {}
}