{
  "packageName": "javax.print.attribute.standard",
  "simpleName": "Sides",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "javax.print.attribute.EnumSyntax",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.print.attribute.standard.Sides",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ONE_SIDED",
      "comment": "Imposes each consecutive print-stream page upon the same side of consecutive media sheets.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.print.attribute.standard.Sides",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TWO_SIDED_LONG_EDGE",
      "comment": "Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the long edge. This imposition is also known as \"duplex\" (see DUPLEX).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.print.attribute.standard.Sides",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TWO_SIDED_SHORT_EDGE",
      "comment": "Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the short edge. This imposition is also known as \"tumble\" (see TUMBLE).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.print.attribute.standard.Sides",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DUPLEX",
      "comment": "An alias for \"two sided long edge\" (see TWO_SIDED_LONG_EDGE).",
      "tagMap": {}
    },
    {
      "type": {
        "name": "javax.print.attribute.standard.Sides",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TUMBLE",
      "comment": "An alias for \"two sided short edge\" (see TWO_SIDED_SHORT_EDGE).",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getStringTable",
      "comment": "Returns the string table for class Sides.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html#getStringTable()\"\u003egetStringTable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html\" title\u003d\"class in javax.print.attribute\"\u003eEnumSyntax\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string table"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.attribute.EnumSyntax",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getEnumValueTable",
      "comment": "Returns the enumeration value table for class Sides.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html#getEnumValueTable()\"\u003egetEnumValueTable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html\" title\u003d\"class in javax.print.attribute\"\u003eEnumSyntax\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the value table"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "javax.print.attribute.Attribute",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCategory",
      "comment": "Get the printing attribute class which is to be used as the \"category\" for this printing attribute value. For class Sides, the category is class Sides itself.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/Attribute.html#getCategory()\"\u003egetCategory\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/Attribute.html\" title\u003d\"interface in javax.print.attribute\"\u003eAttribute\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "printing attribute class (category), an instance of class \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003ejava.lang.Class\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getName",
      "comment": "Get the name of the category of which this attribute value is an instance. For class Sides, the category name is \"sides\".",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/Attribute.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/Attribute.html\" title\u003d\"interface in javax.print.attribute\"\u003eAttribute\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "attribute category name"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new sides enumeration value with the given integer value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Integer value"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "javax.print.attribute.standard.Sides",
  "comment": "Class \n\u003ccode\u003eSides\u003c/code\u003e is a printing attribute class, an enumeration, that specifies how print-stream pages are to be imposed upon the sides of an instance of a selected medium, i.e., an impression. \n\u003cp\u003e The effect of a \u003ccode\u003eSides\u003c/code\u003e attribute on a multidoc print job (a job with multiple documents) depends on whether all the docs have the same sides values specified or whether different docs have different sides values specified, and on the (perhaps defaulted) value of the \u003ca href\u003d\"MultipleDocumentHandling.html\" title\u003d\"class in javax.print.attribute.standard\"\u003e\u003ccode\u003eMultipleDocumentHandling\u003c/code\u003e\u003c/a\u003e attribute. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eIf all the docs have the same sides value \u003ci\u003en\u003c/i\u003e specified, then any value of \u003ca href\u003d\"MultipleDocumentHandling.html\" title\u003d\"class in javax.print.attribute.standard\"\u003e\u003ccode\u003eMultipleDocumentHandling\u003c/code\u003e\u003c/a\u003e makes sense, and the printer\u0027s processing depends on the \u003ca href\u003d\"MultipleDocumentHandling.html\" title\u003d\"class in javax.print.attribute.standard\"\u003e\u003ccode\u003eMultipleDocumentHandling\u003c/code\u003e\u003c/a\u003e value: \n  \u003cul\u003e \n   \u003cli\u003e\u003ccode\u003eSINGLE_DOCUMENT\u003c/code\u003e -- All the input docs will be combined together into one output document. Each media sheet will consist of \u003ci\u003en\u003c/i\u003e impressions from the output document. \u003c/li\u003e\n   \u003cli\u003e\u003ccode\u003eSINGLE_DOCUMENT_NEW_SHEET\u003c/code\u003e -- All the input docs will be combined together into one output document. Each media sheet will consist of \u003ci\u003en\u003c/i\u003e impressions from the output document. However, the first impression of each input doc will always start on a new media sheet; this means the last media sheet of an input doc may have only one impression on it. \u003c/li\u003e\n   \u003cli\u003e\u003ccode\u003eSEPARATE_DOCUMENTS_UNCOLLATED_COPIES\u003c/code\u003e -- The input docs will remain separate. Each media sheet will consist of \u003ci\u003en\u003c/i\u003e impressions from the input doc. Since the input docs are separate, the first impression of each input doc will always start on a new media sheet; this means the last media sheet of an input doc may have only one impression on it. \u003c/li\u003e\n   \u003cli\u003e\u003ccode\u003eSEPARATE_DOCUMENTS_COLLATED_COPIES\u003c/code\u003e -- The input docs will remain separate. Each media sheet will consist of \u003ci\u003en\u003c/i\u003e impressions from the input doc. Since the input docs are separate, the first impression of each input doc will always start on a new media sheet; this means the last media sheet of an input doc may have only one impression on it. \u003c/li\u003e\n  \u003c/ul\u003e \n  \u003cul\u003e \n   \u003cli\u003e\u003ccode\u003eSINGLE_DOCUMENT\u003c/code\u003e -- All the input docs will be combined together into one output document. Each media sheet will consist of \u003ci\u003en\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e impressions from the output document, where \u003ci\u003ei\u003c/i\u003e is the number of the input doc corresponding to that point in the output document. When the next input doc has a different sides value from the previous input doc, the first print-stream page of the next input doc goes at the start of the next media sheet, possibly leaving only one impression on the previous media sheet. \u003c/li\u003e\n   \u003cli\u003e\u003ccode\u003eSINGLE_DOCUMENT_NEW_SHEET\u003c/code\u003e -- All the input docs will be combined together into one output document. Each media sheet will consist of \u003ci\u003en\u003c/i\u003e impressions from the output document. However, the first impression of each input doc will always start on a new media sheet; this means the last impression of an input doc may have only one impression on it. \u003c/li\u003e\n   \u003cli\u003e\u003ccode\u003eSEPARATE_DOCUMENTS_UNCOLLATED_COPIES\u003c/code\u003e -- The input docs will remain separate. For input doc \u003ci\u003ei,\u003c/i\u003e each media sheet will consist of \u003ci\u003en\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e impressions from the input doc. Since the input docs are separate, the first impression of each input doc will always start on a new media sheet; this means the last media sheet of an input doc may have only one impression on it. \u003c/li\u003e\n   \u003cli\u003e\u003ccode\u003eSEPARATE_DOCUMENTS_COLLATED_COPIES\u003c/code\u003e -- The input docs will remain separate. For input doc \u003ci\u003ei,\u003c/i\u003e each media sheet will consist of \u003ci\u003en\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e impressions from the input doc. Since the input docs are separate, the first impression of each input doc will always start on a new media sheet; this means the last media sheet of an input doc may have only one impression on it. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cb\u003eIPP Compatibility:\u003c/b\u003e The category name returned by \u003ccode\u003egetName()\u003c/code\u003e is the IPP attribute name. The enumeration\u0027s integer value is the IPP enum value. The \u003ccode\u003etoString()\u003c/code\u003e method returns the IPP string representation of the attribute value.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.print.attribute.standard.Sides\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}