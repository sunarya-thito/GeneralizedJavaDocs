{
  "packageName": "javax.print.attribute",
  "simpleName": "SetOfIntegerSyntax",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {},
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMembers",
      "comment": "Obtain this set-of-integer attribute\u0027s members in canonical array form. The returned array is \"safe;\" the client may alter it without affecting this set-of-integer attribute.",
      "tagMap": {
        "return": [
          "this set-of-integer attribute\u0027s members in canonical array form"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Determine if this set-of-integer attribute contains the given value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the Integer value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this set-of-integer attribute contains the value \n\u003ccode\u003ex\u003c/code\u003e, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.attribute.IntegerSyntax",
            "type": "Class"
          },
          "field": {
            "name": "attribute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Determine if this set-of-integer attribute contains the given integer attribute\u0027s value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - the Integer attribute"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this set-of-integer attribute contains \n\u003ccode\u003eattribute\u003c/code\u003e\u0027s value, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "next",
      "comment": "Determine the smallest integer in this set-of-integer attribute that is greater than the given value. If there are no integers in this set-of-integer attribute greater than the given value, -1 is returned. (Since a set-of-integer attribute can only contain nonnegative values, -1 will never appear in the set.) You can use the next() method to iterate through the integer values in a set-of-integer attribute in ascending order, like this:      SetOfIntegerSyntax attribute \u003d . . .;\n     int i \u003d -1;\n     while ((i \u003d attribute.next (i)) !\u003d -1)\n         {\n         foo (i);\n         }",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the Integer value"
        ],
        "return": [
          "the smallest integer in this set-of-integer attribute that is greater than \n\u003ccode\u003ex\u003c/code\u003e, or \n\u003ccode\u003e-1\u003c/code\u003e if no integer in this set-of-integer attribute is greater than \n\u003ccode\u003ex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "object"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns whether this set-of-integer attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: object is not null. object is an instance of class SetOfIntegerSyntax. This set-of-integer attribute\u0027s members and object\u0027s members are the same.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobject\u003c/code\u003e - \n\u003ccode\u003eObject\u003c/code\u003e to compare to"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eobject\u003c/code\u003e is equivalent to this set-of-integer attribute, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code value for this set-of-integer attribute. The hash code is the sum of the lower and upper bounds of the ranges in the canonical array form, or 0 for an empty set.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string value corresponding to this set-of-integer attribute. The string value is a zero-length string if this set is empty. Otherwise, the string value is a comma-separated list of the ranges in the canonical array form, where each range is represented as \"i\" if the lower bound equals the upper bound or \"i-j\" otherwise.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "members"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new set-of-integer attribute with the given members in string form.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emembers\u003c/code\u003e - set members in string form. If \n\u003ccode\u003enull\u003c/code\u003e, an empty set is constructed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emembers\u003c/code\u003e does not obey the proper syntax"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {},
              {}
            ]
          },
          "field": {
            "name": "members"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new set-of-integer attribute with the given members in array form.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emembers\u003c/code\u003e - set members in array form. If \n\u003ccode\u003enull\u003c/code\u003e, an empty set is constructed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003emembers\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003emembers\u003c/code\u003e is not a length-one or length-two array or if any \n\u003ccode\u003enon-null\u003c/code\u003e range in \n\u003ccode\u003emembers\u003c/code\u003e has a lower bound less than zero"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "member"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new set-of-integer attribute containing a single integer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emember\u003c/code\u003e - set member"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emember\u003c/code\u003e is negative"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lowerBound"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "upperBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new set-of-integer attribute containing a single range of integers. If the lower bound is greater than the upper bound (a null range), an empty set is constructed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elowerBound\u003c/code\u003e - Lower bound of the range",
          "\u003ccode\u003eupperBound\u003c/code\u003e - Upper bound of the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the range is \n\u003ccode\u003enon-null\u003c/code\u003e and \n\u003ccode\u003elowerBound\u003c/code\u003e is less than zero"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.print.attribute.SetOfIntegerSyntax",
  "comment": "Class \n\u003ccode\u003eSetOfIntegerSyntax\u003c/code\u003e is an abstract base class providing the common implementation of all attributes whose value is a set of nonnegative integers. This includes attributes whose value is a single range of integers and attributes whose value is a set of ranges of integers. \n\u003cp\u003e You can construct an instance of \u003ccode\u003eSetOfIntegerSyntax\u003c/code\u003e by giving it in \"string form.\" The string consists of zero or more comma-separated integer groups. Each integer group consists of either one integer, two integers separated by a hyphen (\u003ccode\u003e-\u003c/code\u003e), or two integers separated by a colon (\u003ccode\u003e:\u003c/code\u003e). Each integer consists of one or more decimal digits (\u003ccode\u003e0\u003c/code\u003e through \u003ccode\u003e9\u003c/code\u003e). Whitespace characters cannot appear within an integer but are otherwise ignored. For example: \u003ccode\u003e\"\"\u003c/code\u003e, \u003ccode\u003e\"1\"\u003c/code\u003e, \u003ccode\u003e\"5-10\"\u003c/code\u003e, \u003ccode\u003e\"1:2, 4\"\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e You can also construct an instance of \u003ccode\u003eSetOfIntegerSyntax\u003c/code\u003e by giving it in \"array form.\" Array form consists of an array of zero or more integer groups where each integer group is a length-1 or length-2 array of \u003ccode\u003eint\u003c/code\u003es; for example, \u003ccode\u003eint[0][]\u003c/code\u003e, \u003ccode\u003eint[][]{{1}}\u003c/code\u003e, \u003ccode\u003eint[][]{{5,10}}\u003c/code\u003e, \u003ccode\u003eint[][]{{1,2},{4}}\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e In both string form and array form, each successive integer group gives a range of integers to be included in the set. The first integer in each group gives the lower bound of the range; the second integer in each group gives the upper bound of the range; if there is only one integer in the group, the upper bound is the same as the lower bound. If the upper bound is less than the lower bound, it denotes a \u003ccode\u003enull\u003c/code\u003e range (no values). If the upper bound is equal to the lower bound, it denotes a range consisting of a single value. If the upper bound is greater than the lower bound, it denotes a range consisting of more than one value. The ranges may appear in any order and are allowed to overlap. The union of all the ranges gives the set\u0027s contents. Once a \u003ccode\u003eSetOfIntegerSyntax\u003c/code\u003e instance is constructed, its value is immutable. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eSetOfIntegerSyntax\u003c/code\u003e object\u0027s value is actually stored in \"\u003ci\u003ecanonical\u003c/i\u003e array form.\" This is the same as array form, except there are no \u003ccode\u003enull\u003c/code\u003e ranges; the members of the set are represented in as few ranges as possible (i.e., overlapping ranges are coalesced); the ranges appear in ascending order; and each range is always represented as a length-two array of \u003ccode\u003eint\u003c/code\u003es in the form {lower bound, upper bound}. An empty set is represented as a zero-length array. \u003c/p\u003e\n\u003cp\u003e Class \u003ccode\u003eSetOfIntegerSyntax\u003c/code\u003e has operations to return the set\u0027s members in canonical array form, to test whether a given integer is a member of the set, and to iterate through the members of the set.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.print.attribute.SetOfIntegerSyntax\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}