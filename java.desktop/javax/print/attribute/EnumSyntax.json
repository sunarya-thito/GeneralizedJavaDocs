{
  "packageName": "javax.print.attribute",
  "simpleName": "EnumSyntax",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Returns this enumeration value\u0027s integer value.",
      "tagMap": {
        "return": [
          "the value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns a clone of this enumeration value, which to preserve the semantics of enumeration values is the same object as this enumeration value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code value for this enumeration value. The hash code is just this enumeration value\u0027s integer value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string value corresponding to this enumeration value.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.ObjectStreamException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "readResolve",
      "comment": "During object input, convert this deserialized enumeration instance to the proper enumeration value defined in the enumeration attribute class.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/ObjectStreamException.html\" title\u003d\"class in java.io\"\u003eObjectStreamException\u003c/a\u003e\u003c/code\u003e - if the stream can\u0027t be deserialised",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InvalidObjectException.html\" title\u003d\"class in java.io\"\u003eInvalidObjectException\u003c/a\u003e\u003c/code\u003e - if the enumeration value table is \n\u003ccode\u003enull\u003c/code\u003e, this enumeration value\u0027s integer value does not correspond to an element in the enumeration value table, or the corresponding element in the enumeration value table is \n\u003ccode\u003enull\u003c/code\u003e. (Note: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InvalidObjectException.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInvalidObjectException\u003c/code\u003e\u003c/a\u003e is a subclass of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/ObjectStreamException.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eObjectStreamException\u003c/code\u003e\u003c/a\u003e, which \n\u003ccode\u003ereadResolve()\u003c/code\u003e is declared to throw.)"
        ],
        "return": [
          "The enumeration singleton value stored at index \n\u003ci\u003ei\u003c/i\u003e-\n\u003ci\u003eL\u003c/i\u003e in the enumeration value table returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html#getEnumValueTable()\"\u003e\u003ccode\u003egetEnumValueTable()\u003c/code\u003e\u003c/a\u003e, where \n\u003ci\u003ei\u003c/i\u003e is this enumeration value\u0027s integer value and \n\u003ci\u003eL\u003c/i\u003e is the value returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/attribute/EnumSyntax.html#getOffset()\"\u003e\u003ccode\u003egetOffset()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getStringTable",
      "comment": "Returns the string table for this enumeration value\u0027s enumeration class. The enumeration class\u0027s integer values are assumed to lie in the range L..L+N-1, where L is the value returned by getOffset() and N is the length of the string table. The element in the string table at index i-L is the value returned by toString() for the enumeration value whose integer value is i. If an integer within the above range is not used by any enumeration value, leave the corresponding table element null. The default implementation returns null. If the enumeration class (a subclass of class EnumSyntax) does not override this method to return a non-null string table, and the subclass does not override the toString() method, the base class toString() method will return just a string representation of this enumeration value\u0027s integer value.",
      "tagMap": {
        "return": [
          "the string table"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.attribute.EnumSyntax",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getEnumValueTable",
      "comment": "Returns the enumeration value table for this enumeration value\u0027s enumeration class. The enumeration class\u0027s integer values are assumed to lie in the range L..L+N-1, where L is the value returned by getOffset() and N is the length of the enumeration value table. The element in the enumeration value table at index i-L is the enumeration value object whose integer value is i; the readResolve() method needs this to preserve singleton semantics during deserialization of an enumeration instance. If an integer within the above range is not used by any enumeration value, leave the corresponding table element null. The default implementation returns null. If the enumeration class (a subclass of class EnumSyntax) does not override this method to return a non-null enumeration value table, and the subclass does not override the readResolve() method, the base class readResolve() method will throw an exception whenever an enumeration instance is deserialized from an object input stream.",
      "tagMap": {
        "return": [
          "the value table"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getOffset",
      "comment": "Returns the lowest integer value used by this enumeration value\u0027s enumeration class. The default implementation returns 0. If the enumeration class (a subclass of class EnumSyntax) uses integer values starting at other than 0, override this method in the subclass.",
      "tagMap": {
        "return": [
          "the offset of the lowest enumeration value"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new enumeration value with the given integer value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Integer value"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.print.attribute.EnumSyntax",
  "comment": "Class \n\u003ccode\u003eEnumSyntax\u003c/code\u003e is an abstract base class providing the common implementation of all \"type safe enumeration\" objects. An enumeration class (which extends class \n\u003ccode\u003eEnumSyntax\u003c/code\u003e) provides a group of enumeration values (objects) that are singleton instances of the enumeration class; for example: \n\u003cpre\u003e     public class Bach extends EnumSyntax {\n         public static final Bach JOHANN_SEBASTIAN     \u003d new Bach(0);\n         public static final Bach WILHELM_FRIEDEMANN   \u003d new Bach(1);\n         public static final Bach CARL_PHILIP_EMMANUEL \u003d new Bach(2);\n         public static final Bach JOHANN_CHRISTIAN     \u003d new Bach(3);\n         public static final Bach P_D_Q                \u003d new Bach(4);\n\n         private static final String[] stringTable \u003d {\n             \"Johann Sebastian Bach\",\n              \"Wilhelm Friedemann Bach\",\n              \"Carl Philip Emmanuel Bach\",\n              \"Johann Christian Bach\",\n              \"P.D.Q. Bach\"\n         };\n\n         protected String[] getStringTable() {\n             return stringTable;\n         }\n\n         private static final Bach[] enumValueTable \u003d {\n             JOHANN_SEBASTIAN,\n              WILHELM_FRIEDEMANN,\n              CARL_PHILIP_EMMANUEL,\n              JOHANN_CHRISTIAN,\n              P_D_Q\n         };\n\n         protected EnumSyntax[] getEnumValueTable() {\n             return enumValueTable;\n         }\n     }\n \u003c/pre\u003e You can then write code that uses the \n\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \n\u003ccode\u003e!\u003d\u003c/code\u003e operators to test enumeration values; for example: \n\u003cpre\u003e     Bach theComposer;\n     . . .\n     if (theComposer \u003d\u003d Bach.JOHANN_SEBASTIAN) {\n         System.out.println (\"The greatest composer of all time!\");\n     }\n \u003c/pre\u003e The \n\u003ccode\u003eequals()\u003c/code\u003e method for an enumeration class just does a test for identical objects (\n\u003ccode\u003e\u003d\u003d\u003c/code\u003e). \n\u003cp\u003e You can convert an enumeration value to a string by calling \u003ca href\u003d\"#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e. The string is obtained from a table supplied by the enumeration class. \u003c/p\u003e\n\u003cp\u003e Under the hood, an enumeration value is just an integer, a different integer for each enumeration value within an enumeration class. You can get an enumeration value\u0027s integer value by calling \u003ca href\u003d\"#getValue()\"\u003e\u003ccode\u003egetValue()\u003c/code\u003e\u003c/a\u003e. An enumeration value\u0027s integer value is established when it is constructed (see \u003ca href\u003d\"#%3Cinit%3E(int)\"\u003e\u003ccode\u003eEnumSyntax(int)\u003c/code\u003e\u003c/a\u003e). Since the constructor is protected, the only possible enumeration values are the singleton objects declared in the enumeration class; additional enumeration values cannot be created at run time. \u003c/p\u003e\n\u003cp\u003e You can define a subclass of an enumeration class that extends it with additional enumeration values. The subclass\u0027s enumeration values\u0027 integer values need not be distinct from the superclass\u0027s enumeration values\u0027 integer values; the \u003ccode\u003e\u003d\u003d\u003c/code\u003e, \u003ccode\u003e!\u003d\u003c/code\u003e, \u003ccode\u003eequals()\u003c/code\u003e, and \u003ccode\u003etoString()\u003c/code\u003e methods will still work properly even if the subclass uses some of the same integer values as the superclass. However, the application in which the enumeration class and subclass are used may need to have distinct integer values in the superclass and subclass.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.print.attribute.EnumSyntax\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}