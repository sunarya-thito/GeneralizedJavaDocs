{
  "packageName": "javax.print",
  "simpleName": "ServiceUI",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.print.PrintService",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.awt.GraphicsConfiguration",
            "type": "Class"
          },
          "field": {
            "name": "gc"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "javax.print.PrintService",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "services"
          }
        },
        {
          "type": {
            "name": "javax.print.PrintService",
            "type": "Class"
          },
          "field": {
            "name": "defaultService"
          }
        },
        {
          "type": {
            "name": "javax.print.DocFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flavor"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.PrintRequestAttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "printDialog",
      "comment": "Presents a dialog to the user for selecting a print service (printer). It is displayed at the location specified by the application and is modal. If the specification is invalid or would make the dialog not visible it will be displayed at a location determined by the implementation. The dialog blocks its calling thread and is application modal. The dialog may include a tab panel with custom UI lazily obtained from the PrintService\u0027s ServiceUIFactory when the PrintService is browsed. The dialog will attempt to locate a MAIN_UIROLE first as a JComponent, then as a Panel. If there is no ServiceUIFactory or no matching role the custom tab will be empty or not visible. The dialog returns the print service selected by the user if the user OK\u0027s the dialog and null if the user cancels the dialog. An application must pass in an array of print services to browse. The array must be non-null and non-empty. Typically an application will pass in only PrintServices capable of printing a particular document flavor. An application may pass in a PrintService to be initially displayed. A non-null parameter must be included in the array of browsable services. If this parameter is null a service is chosen by the implementation. An application may optionally pass in the flavor to be printed. If this is non-null choices presented to the user can be better validated against those supported by the services. An application must pass in a PrintRequestAttributeSet for returning user choices. On calling the PrintRequestAttributeSet may be empty, or may contain application-specified values. These are used to set the initial settings for the initially displayed print service. Values which are not supported by the print service are ignored. As the user browses print services, attributes and values are copied to the new display. If a user browses a print service which does not support a particular attribute-value, the default for that service is used as the new value to be copied. If the user cancels the dialog, the returned attributes will not reflect any changes made by the user. A typical basic usage of this method may be: \n PrintService[] services \u003d PrintServiceLookup.lookupPrintServices(\n                            DocFlavor.INPUT_STREAM.JPEG, null);\n PrintRequestAttributeSet attributes \u003d new HashPrintRequestAttributeSet();\n if (services.length \u003e 0) {\n    PrintService service \u003d  ServiceUI.printDialog(null, 50, 50,\n                                               services, services[0],\n                                               null,\n                                               attributes);\n    if (service !\u003d null) {\n     ... print ...\n    }\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003egc\u003c/code\u003e - used to select screen, \n\u003ccode\u003enull\u003c/code\u003e means primary or default screen",
          "\u003ccode\u003ex\u003c/code\u003e - location of dialog including border in screen coordinates relative to the origin of \n\u003ccode\u003egc\u003c/code\u003e",
          "\u003ccode\u003ey\u003c/code\u003e - location of dialog including border in screen coordinates relative to the origin of \n\u003ccode\u003egc\u003c/code\u003e",
          "\u003ccode\u003eservices\u003c/code\u003e - to be browsable, must be \n\u003ccode\u003enon-null\u003c/code\u003e",
          "\u003ccode\u003edefaultService\u003c/code\u003e - initial \n\u003ccode\u003ePrintService\u003c/code\u003e to display",
          "\u003ccode\u003eflavor\u003c/code\u003e - the flavor to be printed, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eattributes\u003c/code\u003e - on input is the initial application supplied preferences. This cannot be \n\u003ccode\u003enull\u003c/code\u003e but may be empty. On output the attributes reflect changes made by the user."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if services is \n\u003ccode\u003enull\u003c/code\u003e or empty, or attributes is \n\u003ccode\u003enull\u003c/code\u003e, or the initial \n\u003ccode\u003ePrintService\u003c/code\u003e is not in the list of browsable services"
        ],
        "return": [
          "print service selected by the user, or \n\u003ccode\u003enull\u003c/code\u003e if the user cancelled the dialog"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a ServiceUI.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.print.ServiceUI",
  "comment": "This class is a collection of UI convenience methods which provide a graphical user dialog for browsing print services looked up through the Java Print Service API. \n\u003cp\u003e The dialogs follow a standard pattern of acting as a continue/cancel option for a user as well as allowing the user to select the print service to use and specify choices such as paper size and number of copies. \u003c/p\u003e\n\u003cp\u003e The dialogs are designed to work with pluggable print services though the public APIs of those print services. \u003c/p\u003e\n\u003cp\u003e If a print service provides any vendor extensions these may be made accessible to the user through a vendor supplied tab panel \u003ccode\u003eComponent\u003c/code\u003e. Such a vendor extension is encouraged to use Swing! and to support its accessibility APIs. The vendor extensions should return the settings as part of the \u003ccode\u003eAttributeSet\u003c/code\u003e. Applications which want to preserve the user settings should use those settings to specify the print job. Note that this class is not referenced by any other part of the Java Print Service and may not be included in profiles which cannot depend on the presence of the AWT packages.\u003c/p\u003e",
  "tagMap": {}
}