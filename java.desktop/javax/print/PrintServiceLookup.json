{
  "packageName": "javax.print",
  "simpleName": "PrintServiceLookup",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.print.PrintService",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.DocFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flavor"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "lookupPrintServices",
      "comment": "Locates print services capable of printing the specified DocFlavor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflavor\u003c/code\u003e - the flavor to print. If \n\u003ccode\u003enull\u003c/code\u003e, this constraint is not used.",
          "\u003ccode\u003eattributes\u003c/code\u003e - attributes that the print service must support. If \n\u003ccode\u003enull\u003c/code\u003e this constraint is not used."
        ],
        "return": [
          "array of matching \n\u003ccode\u003ePrintService\u003c/code\u003e objects representing print services that support the specified flavor attributes. If no services match, the array is zero-length."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.MultiDocPrintService",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.DocFlavor",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "flavors"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "lookupMultiDocPrintServices",
      "comment": "Locates MultiDoc print Services capable of printing MultiDocs containing all the specified doc flavors. This method is useful to help locate a service that can print a MultiDoc in which the elements may be different flavors. An application could perform this itself by multiple lookups on each DocFlavor in turn and collating the results, but the lookup service may be able to do this more efficiently.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflavors\u003c/code\u003e - the flavors to print. If \n\u003ccode\u003enull\u003c/code\u003e or empty this constraint is not used. Otherwise return only multidoc print services that can print all specified doc flavors.",
          "\u003ccode\u003eattributes\u003c/code\u003e - attributes that the print service must support. If \n\u003ccode\u003enull\u003c/code\u003e this constraint is not used."
        ],
        "return": [
          "array of matching \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/print/MultiDocPrintService.html\" title\u003d\"interface in javax.print\"\u003e\u003ccode\u003eMultiDocPrintService\u003c/code\u003e\u003c/a\u003e objects. If no services match, the array is zero-length."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.PrintService",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "lookupDefaultPrintService",
      "comment": "Locates the default print service for this environment. This may return null. If multiple lookup services each specify a default, the chosen service is not precisely defined, but a platform native service, rather than an installed service, is usually returned as the default. If there is no clearly identifiable platform native default print service, the default is the first to be located in an implementation-dependent manner. This may include making use of any preferences API that is available as part of the Java or native platform. This algorithm may be overridden by a user setting the property javax.print.defaultPrinter. A service specified must be discovered to be valid and currently available to be returned as the default.",
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003ePrintService\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.PrintServiceLookup",
            "type": "Class"
          },
          "field": {
            "name": "sp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "registerServiceProvider",
      "comment": "Allows an application to explicitly register a class that implements lookup services. The registration will not persist across VM invocations. This is useful if an application needs to make a new service available that is not part of the installation. If the lookup service is already registered, or cannot be registered, the method returns false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esp\u003c/code\u003e - an implementation of a lookup service"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the new lookup service is newly registered; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.PrintService",
            "type": "Class"
          },
          "field": {
            "name": "service"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "registerService",
      "comment": "Allows an application to directly register an instance of a class which implements a print service. The lookup operations for this service will be performed by the PrintServiceLookup class using the attribute values and classes reported by the service. This may be less efficient than a lookup service tuned for that service. Therefore registering a PrintServiceLookup instance instead is recommended. The method returns true if this service is not previously registered and is now successfully registered. This method should not be called with StreamPrintService instances. They will always fail to register and the method will return false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eservice\u003c/code\u003e - an implementation of a print service"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the service is newly registered; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.PrintService",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.DocFlavor",
            "type": "Class"
          },
          "field": {
            "name": "flavor"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPrintServices",
      "comment": "Locates services that can be positively confirmed to support the combination of attributes and DocFlavors specified. This method is not called directly by applications. Implemented by a service provider, used by the static methods of this class. The results should be the same as obtaining all the PrintServices and querying each one individually on its support for the specified attributes and flavors, but the process can be more efficient by taking advantage of the capabilities of lookup services for the print services.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflavor\u003c/code\u003e - of document required. If \n\u003ccode\u003enull\u003c/code\u003e it is ignored.",
          "\u003ccode\u003eattributes\u003c/code\u003e - required to be supported. If \n\u003ccode\u003enull\u003c/code\u003e this constraint is not used."
        ],
        "return": [
          "array of matching \n\u003ccode\u003ePrintServices\u003c/code\u003e. If no services match, the array is zero-length."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.PrintService",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPrintServices",
      "comment": "Not called directly by applications. Implemented by a service provider, used by the static methods of this class.",
      "tagMap": {
        "return": [
          "array of all \n\u003ccode\u003ePrintServices\u003c/code\u003e known to this lookup service class. If none are found, the array is zero-length."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.MultiDocPrintService",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.print.DocFlavor",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "flavors"
          }
        },
        {
          "type": {
            "name": "javax.print.attribute.AttributeSet",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMultiDocPrintServices",
      "comment": "Not called directly by applications. Implemented by a service provider, used by the static methods of this class. Locates MultiDoc print services which can be positively confirmed to support the combination of attributes and DocFlavors specified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eflavors\u003c/code\u003e - of documents required. If \n\u003ccode\u003enull\u003c/code\u003e or empty it is ignored.",
          "\u003ccode\u003eattributes\u003c/code\u003e - required to be supported. If \n\u003ccode\u003enull\u003c/code\u003e this constraint is not used."
        ],
        "return": [
          "array of matching \n\u003ccode\u003ePrintServices\u003c/code\u003e. If no services match, the array is zero-length."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.print.PrintService",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDefaultPrintService",
      "comment": "Not called directly by applications. Implemented by a service provider, and called by the print lookup service.",
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003ePrintService\u003c/code\u003e for this lookup service. If there is no default, returns \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.print.PrintServiceLookup",
  "comment": "Implementations of this class provide lookup services for print services (typically equivalent to printers) of a particular type. \n\u003cp\u003e Multiple implementations may be installed concurrently. All implementations must be able to describe the located printers as instances of a \u003ccode\u003ePrintService\u003c/code\u003e. Typically implementations of this service class are located automatically in JAR files (see the SPI JAR file specification). These classes must be instantiable using a default constructor. Alternatively applications may explicitly register instances at runtime. \u003c/p\u003e\n\u003cp\u003e Applications use only the static methods of this abstract class. The instance methods are implemented by a service provider in a subclass and the unification of the results from all installed lookup classes are reported by the static methods of this class when called by the application. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003ePrintServiceLookup\u003c/code\u003e implementor is recommended to check for the \u003ccode\u003eSecurityManager.checkPrintJobAccess()\u003c/code\u003e to deny access to untrusted code. Following this recommended policy means that untrusted code may not be able to locate any print services. Downloaded applets are the most common example of untrusted code. \u003c/p\u003e\n\u003cp\u003e This check is made on a per lookup service basis to allow flexibility in the policy to reflect the needs of different lookup services. \u003c/p\u003e\n\u003cp\u003e Services which are registered by \u003ca href\u003d\"#registerService(javax.print.PrintService)\"\u003e\u003ccode\u003eregisterService(PrintService)\u003c/code\u003e\u003c/a\u003e will not be included in lookup results if a security manager is installed and its \u003ccode\u003echeckPrintJobAccess()\u003c/code\u003e method denies access.\u003c/p\u003e",
  "tagMap": {}
}