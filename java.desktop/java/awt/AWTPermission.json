{
  "packageName": "java.awt",
  "simpleName": "AWTPermission",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.BasicPermission",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new AWTPermission with the specified name. The name is the symbolic name of the AWTPermission, such as \"topLevelWindow\", \"systemClipboard\", etc. An asterisk may be used to indicate all AWT permissions.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the AWTPermission"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new AWTPermission object with the specified name. The name is the symbolic name of the AWTPermission, and the actions string is currently unused and should be null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the \n\u003ccode\u003eAWTPermission\u003c/code\u003e",
          "\u003ccode\u003eactions\u003c/code\u003e - should be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.AWTPermission",
  "comment": "This class is for AWT permissions. An \n\u003ccode\u003eAWTPermission\u003c/code\u003e contains a target name but no actions list; you either have the named permission or you don\u0027t. \n\u003cp\u003e The target name is the name of the AWT permission (see below). The naming convention follows the hierarchical property naming convention. Also, an asterisk could be used to represent all AWT permissions. \u003c/p\u003e\n\u003cp\u003e The following table lists all the possible \u003ccode\u003eAWTPermission\u003c/code\u003e target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  AWTPermission target names, descriptions, and associated risks \n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003ePermission Target Name \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eWhat the Permission Allows \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eRisks of Allowing this Permission \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessClipboard \u003c/th\u003e\n   \u003ctd\u003ePosting and retrieval of information to and from the AWT clipboard \u003c/td\u003e\n   \u003ctd\u003eThis would allow malfeasant code to share potentially sensitive or confidential information. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessEventQueue \u003c/th\u003e\n   \u003ctd\u003eAccess to the AWT event queue \u003c/td\u003e\n   \u003ctd\u003eAfter retrieving the AWT event queue, malicious code may peek at and even remove existing events from its event queue, as well as post bogus events which may purposefully cause the application or applet to misbehave in an insecure manner. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessSystemTray \u003c/th\u003e\n   \u003ctd\u003eAccess to the AWT SystemTray instance \u003c/td\u003e\n   \u003ctd\u003eThis would allow malicious code to add tray icons to the system tray. First, such an icon may look like the icon of some known application (such as a firewall or anti-virus) and order a user to do something unsafe (with help of balloon messages). Second, the system tray may be glutted with tray icons so that no one could add a tray icon anymore. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ecreateRobot \u003c/th\u003e\n   \u003ctd\u003eCreate java.awt.Robot objects \u003c/td\u003e\n   \u003ctd\u003eThe java.awt.Robot object allows code to generate native-level mouse and keyboard events as well as read the screen. It could allow malicious code to control the system, run other programs, read the display, and deny mouse and keyboard access to the user. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003efullScreenExclusive \u003c/th\u003e\n   \u003ctd\u003eEnter full-screen exclusive mode \u003c/td\u003e\n   \u003ctd\u003eEntering full-screen exclusive mode allows direct access to low-level graphics card memory. This could be used to spoof the system, since the program is in direct control of rendering. Depending on the implementation, the security warning may not be shown for the windows used to enter the full-screen exclusive mode (assuming that the \u003ccode\u003efullScreenExclusive\u003c/code\u003e permission has been granted to this application). Note that this behavior does not mean that the \u003ccode\u003eshowWindowWithoutWarningBanner\u003c/code\u003e permission will be automatically granted to the application which has the \u003ccode\u003efullScreenExclusive\u003c/code\u003e permission: non-full-screen windows will continue to be shown with the security warning. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003elistenToAllAWTEvents \u003c/th\u003e\n   \u003ctd\u003eListen to all AWT events, system-wide \u003c/td\u003e\n   \u003ctd\u003eAfter adding an AWT event listener, malicious code may scan all AWT events dispatched in the system, allowing it to read all user input (such as passwords). Each AWT event listener is called from within the context of that event queue\u0027s EventDispatchThread, so if the accessEventQueue permission is also enabled, malicious code could modify the contents of AWT event queues system-wide, causing the application or applet to misbehave in an insecure manner. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ereadDisplayPixels \u003c/th\u003e\n   \u003ctd\u003eReadback of pixels from the display screen \u003c/td\u003e\n   \u003ctd\u003eInterfaces such as the java.awt.Composite interface or the java.awt.Robot class allow arbitrary code to examine pixels on the display enable malicious code to snoop on the activities of the user. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ereplaceKeyboardFocusManager \u003c/th\u003e\n   \u003ctd\u003eSets the \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e for a particular thread. \u003c/td\u003e\n   \u003ctd\u003eWhen \u003ccode\u003eSecurityManager\u003c/code\u003e is installed, the invoking thread must be granted this permission in order to replace the current \u003ccode\u003eKeyboardFocusManager\u003c/code\u003e. If permission is not granted, a \u003ccode\u003eSecurityException\u003c/code\u003e will be thrown. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetAppletStub \u003c/th\u003e\n   \u003ctd\u003eSetting the stub which implements Applet container services \u003c/td\u003e\n   \u003ctd\u003eMalicious code could set an applet\u0027s stub and result in unexpected behavior or denial of service to an applet. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetWindowAlwaysOnTop \u003c/th\u003e\n   \u003ctd\u003eSetting always-on-top property of the window: \u003ca href\u003d\"Window.html#setAlwaysOnTop(boolean)\"\u003e\u003ccode\u003eWindow.setAlwaysOnTop(boolean)\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003eThe malicious window might make itself look and behave like a real full desktop, so that information entered by the unsuspecting user is captured and subsequently misused \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eshowWindowWithoutWarningBanner \u003c/th\u003e\n   \u003ctd\u003eDisplay of a window without also displaying a banner warning that the window was created by an applet \u003c/td\u003e\n   \u003ctd\u003eWithout this warning, an applet may pop up windows without the user knowing that they belong to an applet. Since users may make security-sensitive decisions based on whether or not the window belongs to an applet (entering a username and password into a dialog box, for example), disabling this warning banner may allow applets to trick the user into entering such information. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003etoolkitModality \u003c/th\u003e\n   \u003ctd\u003eCreating \u003ca href\u003d\"Dialog.ModalityType.html#TOOLKIT_MODAL\"\u003e\u003ccode\u003eTOOLKIT_MODAL\u003c/code\u003e\u003c/a\u003e dialogs and setting the \u003ca href\u003d\"Dialog.ModalExclusionType.html#TOOLKIT_EXCLUDE\"\u003e\u003ccode\u003eTOOLKIT_EXCLUDE\u003c/code\u003e\u003c/a\u003e window property. \u003c/td\u003e\n   \u003ctd\u003eWhen a toolkit-modal dialog is shown from an applet, it blocks all other applets in the browser. When launching applications from Java Web Start, its windows (such as the security dialog) may also be blocked by toolkit-modal dialogs, shown from these applications. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ewatchMousePointer \u003c/th\u003e\n   \u003ctd\u003eGetting the information about the mouse pointer position at any time \u003c/td\u003e\n   \u003ctd\u003eConstantly watching the mouse pointer, an applet can make guesses about what the user is doing, i.e. moving the mouse to the lower left corner of the screen most likely means that the user is about to launch an application. If a virtual keypad is used so that keyboard is emulated using the mouse, an applet may guess what is being typed. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/BasicPermission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eBasicPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissionCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.AWTPermission\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}