{
  "packageName": "java.awt",
  "simpleName": "EventQueue",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.AWTEvent",
            "type": "Class"
          },
          "name": "theEvent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postEvent",
      "comment": "Posts a 1.1-style event to the EventQueue. If there is an existing event on the queue with the same ID and event source, the source Component\u0027s coalesceEvents method will be called.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etheEvent\u003c/code\u003e - an instance of \n\u003ccode\u003ejava.awt.AWTEvent\u003c/code\u003e, or a subclass of it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etheEvent\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AWTEvent",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextEvent",
      "comment": "Removes an event from the EventQueue and returns it. This method will block until an event has been posted by another thread.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted this thread"
        ],
        "return": [
          "the next \n\u003ccode\u003eAWTEvent\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AWTEvent",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "peekEvent",
      "comment": "Returns the first event on the EventQueue without removing it.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the first event"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AWTEvent",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "peekEvent",
      "comment": "Returns the first event with the specified id, if any.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - the id of the type of event desired"
        ],
        "return": [
          "the first event of the specified id or \n\u003ccode\u003enull\u003c/code\u003e if there is no such event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.AWTEvent",
            "type": "Class"
          },
          "name": "event",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "dispatchEvent",
      "comment": "Dispatches an event. The manner in which the event is dispatched depends upon the type of the event and the type of the event\u0027s source object: Event types, source types, and dispatch methods Event Type Source Type Dispatched To ActiveEvent Any event.dispatch() Other Component source.dispatchEvent(AWTEvent) Other MenuComponent source.dispatchEvent(AWTEvent) Other Other No action (ignored)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - an instance of \n\u003ccode\u003ejava.awt.AWTEvent\u003c/code\u003e, or a subclass of it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eevent\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMostRecentEventTime",
      "comment": "Returns the timestamp of the most recent event that had a timestamp, and that was dispatched from the EventQueue associated with the calling thread. If an event with a timestamp is currently being dispatched, its timestamp will be returned. If no events have yet been dispatched, the EventQueue\u0027s initialization time will be returned instead.In the current version of the JDK, only InputEvents, ActionEvents, and InvocationEvents have timestamps; however, future versions of the JDK may add timestamps to additional event types. Note that this method should only be invoked from an application\u0027s event dispatching thread. If this method is invoked from another thread, the current system time (as reported by System.currentTimeMillis()) will be returned instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getWhen()\"\u003e\u003ccode\u003eInputEvent.getWhen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ActionEvent.html#getWhen()\"\u003e\u003ccode\u003eActionEvent.getWhen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#getWhen()\"\u003e\u003ccode\u003eInvocationEvent.getWhen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#isDispatchThread()\"\u003e\u003ccode\u003eisDispatchThread()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the timestamp of the last \n\u003ccode\u003eInputEvent\u003c/code\u003e, \n\u003ccode\u003eActionEvent\u003c/code\u003e, or \n\u003ccode\u003eInvocationEvent\u003c/code\u003e to be dispatched, or \n\u003ccode\u003eSystem.currentTimeMillis()\u003c/code\u003e if this method is invoked on a thread other than an event dispatching thread"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AWTEvent",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCurrentEvent",
      "comment": "Returns the event currently being dispatched by the EventQueue associated with the calling thread. This is useful if a method needs access to the event, but was not designed to receive a reference to it as an argument. Note that this method should only be invoked from an application\u0027s event dispatching thread. If this method is invoked from another thread, null will be returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the event currently being dispatched, or null if this method is invoked on a thread other than an event dispatching thread"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.EventQueue",
            "type": "Class"
          },
          "name": "newEventQueue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "push",
      "comment": "Replaces the existing EventQueue with the specified one. Any pending events are transferred to the new EventQueue for processing by it.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#pop()\"\u003e\u003ccode\u003epop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewEventQueue\u003c/code\u003e - an \n\u003ccode\u003eEventQueue\u003c/code\u003e (or subclass thereof) instance to be use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewEventQueue\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.EmptyStackException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "pop",
      "comment": "Stops dispatching events using this EventQueue. Any pending events are transferred to the previous EventQueue for processing. Warning: To avoid deadlock, do not declare this method synchronized in a subclass.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#push(java.awt.EventQueue)\"\u003e\u003ccode\u003epush(java.awt.EventQueue)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EmptyStackException.html\" title\u003d\"class in java.util\"\u003eEmptyStackException\u003c/a\u003e\u003c/code\u003e - if no previous push was made on this \n\u003ccode\u003eEventQueue\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.SecondaryLoop",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createSecondaryLoop",
      "comment": "Creates a new secondary loop associated with this event queue. Use the SecondaryLoop.enter() and SecondaryLoop.exit() methods to start and stop the event loop and dispatch the events from this queue.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/SecondaryLoop.html#enter()\"\u003e\u003ccode\u003eSecondaryLoop.enter()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/SecondaryLoop.html#exit()\"\u003e\u003ccode\u003eSecondaryLoop.exit()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "secondaryLoop A new secondary loop object, which can be used to launch a new nested event loop and dispatch events from this queue"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDispatchThread",
      "comment": "Returns true if the calling thread is the current AWT EventQueue\u0027s dispatch thread. Use this method to ensure that a particular task is being executed (or not being) there. Note: use the invokeLater(java.lang.Runnable) or invokeAndWait(java.lang.Runnable) methods to execute a task in the current AWT EventQueue\u0027s dispatch thread.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#invokeLater(java.lang.Runnable)\"\u003e\u003ccode\u003einvokeLater(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#invokeAndWait(java.lang.Runnable)\"\u003e\u003ccode\u003einvokeAndWait(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemEventQueue()\"\u003e\u003ccode\u003eToolkit.getSystemEventQueue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if running in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemEventQueue()\"\u003e\u003ccode\u003ethe current AWT EventQueue\u003c/code\u003e\u003c/a\u003e\u0027s dispatch thread"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeLater",
      "comment": "Causes runnable to have its run method called in the dispatch thread of the system EventQueue. This will happen after all pending events are processed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#invokeAndWait(java.lang.Runnable)\"\u003e\u003ccode\u003einvokeAndWait(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemEventQueue()\"\u003e\u003ccode\u003eToolkit.getSystemEventQueue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#isDispatchThread()\"\u003e\u003ccode\u003eisDispatchThread()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erunnable\u003c/code\u003e - the \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun\u003c/code\u003e method should be executed asynchronously in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#isDispatchThread()\"\u003e\u003ccode\u003eevent dispatch thread\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemEventQueue()\"\u003e\u003ccode\u003ethe system EventQueue\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.lang.reflect.InvocationTargetException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeAndWait",
      "comment": "Causes runnable to have its run method called in the dispatch thread of the system EventQueue. This will happen after all pending events are processed. The call blocks until this has happened. This method will throw an Error if called from the event dispatcher thread.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#invokeLater(java.lang.Runnable)\"\u003e\u003ccode\u003einvokeLater(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemEventQueue()\"\u003e\u003ccode\u003eToolkit.getSystemEventQueue()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#isDispatchThread()\"\u003e\u003ccode\u003eisDispatchThread()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erunnable\u003c/code\u003e - the \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun\u003c/code\u003e method should be executed synchronously in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#isDispatchThread()\"\u003e\u003ccode\u003eevent dispatch thread\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getSystemEventQueue()\"\u003e\u003ccode\u003ethe system EventQueue\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted this thread",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationTargetException.html\" title\u003d\"class in java.lang.reflect\"\u003eInvocationTargetException\u003c/a\u003e\u003c/code\u003e - if an throwable is thrown when running \n\u003ccode\u003erunnable\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initializes a new instance of EventQueue.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.EventQueue",
  "comment": "\u003ccode\u003eEventQueue\u003c/code\u003e is a platform-independent class that queues events, both from the underlying peer classes and from trusted application classes. \n\u003cp\u003e It encapsulates asynchronous event dispatch machinery which extracts events from the queue and dispatches them by calling \u003ca href\u003d\"#dispatchEvent(java.awt.AWTEvent)\"\u003e\u003ccode\u003edispatchEvent(AWTEvent)\u003c/code\u003e\u003c/a\u003e method on this \u003ccode\u003eEventQueue\u003c/code\u003e with the event to be dispatched as an argument. The particular behavior of this machinery is implementation-dependent. The only requirements are that events which were actually enqueued to this queue (note that events being posted to the \u003ccode\u003eEventQueue\u003c/code\u003e can be coalesced) are dispatched: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n   Sequentially. \n \u003c/dt\u003e\n \u003cdd\u003e\n   That is, it is not permitted that several events from this queue are dispatched simultaneously. \n \u003c/dd\u003e\n \u003cdt\u003e\n   In the same order as they are enqueued. \n \u003c/dt\u003e\n \u003cdd\u003e\n   That is, if \n  \u003ccode\u003eAWTEvent\u003c/code\u003e\u0026nbsp;A is enqueued to the \n  \u003ccode\u003eEventQueue\u003c/code\u003e before \n  \u003ccode\u003eAWTEvent\u003c/code\u003e\u0026nbsp;B then event B will not be dispatched before event A. \n \u003c/dd\u003e\n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Some browsers partition applets in different code bases into separate contexts, and establish walls between these contexts. In such a scenario, there will be one \u003ccode\u003eEventQueue\u003c/code\u003e per context. Other browsers place all applets into the same context, implying that there will be only a single, global \u003ccode\u003eEventQueue\u003c/code\u003e for all applets. This behavior is implementation-dependent. Consult your browser\u0027s documentation for more information. \u003c/p\u003e\n\u003cp\u003e For information on the threading issues of the event dispatch machinery, see \u003ca href\u003d\"doc-files/AWTThreadIssues.html#Autoshutdown\"\u003eAWT Threading Issues\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}