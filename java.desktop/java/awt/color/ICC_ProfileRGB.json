{
  "packageName": "java.awt.color",
  "simpleName": "ICC_ProfileRGB",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.color.ICC_Profile",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "REDCOMPONENT",
      "comment": "Used to get a gamma value or TRC for the red component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.color.ICC_ProfileRGB.REDCOMPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GREENCOMPONENT",
      "comment": "Used to get a gamma value or TRC for the green component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.color.ICC_ProfileRGB.GREENCOMPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BLUECOMPONENT",
      "comment": "Used to get a gamma value or TRC for the blue component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.color.ICC_ProfileRGB.BLUECOMPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMediaWhitePoint",
      "comment": "Returns an array that contains the components of the profile\u0027s mediaWhitePointTag.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a 3-element \n\u003ccode\u003efloat\u003c/code\u003e array containing the x, y, and z components of the profile\u0027s \n\u003ccode\u003emediaWhitePointTag\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": 2
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMatrix",
      "comment": "Returns a 3x3 float matrix constructed from the X, Y, and Z components of the profile\u0027s redColorantTag, greenColorantTag, and blueColorantTag. This matrix can be used for color transforms in the forward direction of the profile--from the profile color space to the CIEXYZ PCS.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a 3x3 \n\u003ccode\u003efloat\u003c/code\u003e array that contains the x, y, and z components of the profile\u0027s \n\u003ccode\u003eredColorantTag\u003c/code\u003e, \n\u003ccode\u003egreenColorantTag\u003c/code\u003e, and \n\u003ccode\u003eblueColorantTag\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGamma",
      "comment": "Returns a gamma value representing the tone reproduction curve (TRC) for a particular component. The component parameter must be one of REDCOMPONENT, GREENCOMPONENT, or BLUECOMPONENT. If the profile represents the TRC for the corresponding component as a table rather than a single gamma value, an exception is thrown. In this case the actual table can be obtained through the getTRC(int) method. When using a gamma value, the linear component (R, G, or B) is computed as follows: \n                                           gamma\n          linearComponent \u003d deviceComponent",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eICC_ProfileRGB\u003c/code\u003e constant that represents the component whose TRC you want to retrieve"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the component is not \n\u003ccode\u003eREDCOMPONENT\u003c/code\u003e, \n\u003ccode\u003eGREENCOMPONENT\u003c/code\u003e, or \n\u003ccode\u003eBLUECOMPONENT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/color/ProfileDataException.html\" title\u003d\"class in java.awt.color\"\u003eProfileDataException\u003c/a\u003e\u003c/code\u003e - if the profile does not specify the corresponding TRC as a single gamma value"
        ],
        "return": [
          "the gamma value as a float"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTRC",
      "comment": "Returns the TRC for a particular component as an array. Component must be REDCOMPONENT, GREENCOMPONENT, or BLUECOMPONENT. Otherwise the returned array represents a lookup table where the input component value is conceptually in the range [0.0, 1.0]. Value 0.0 maps to array index 0 and value 1.0 maps to array index length-1. Interpolation might be used to generate output values for input values that do not map exactly to an index in the array. Output values also map linearly to the range [0.0, 1.0]. Value 0.0 is represented by an array value of 0x0000 and value 1.0 by 0xFFFF. In other words, the values are really unsigned short values even though they are returned in a short array. If the profile has specified the corresponding TRC as linear (gamma \u003d 1.0) or as a simple gamma value, this method throws an exception. In this case, the getGamma(int) method should be used to get the gamma value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomponent\u003c/code\u003e - the \n\u003ccode\u003eICC_ProfileRGB\u003c/code\u003e constant that represents the component whose TRC you want to retrieve: \n\u003ccode\u003eREDCOMPONENT\u003c/code\u003e, \n\u003ccode\u003eGREENCOMPONENT\u003c/code\u003e, or \n\u003ccode\u003eBLUECOMPONENT\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the component is not \n\u003ccode\u003eREDCOMPONENT\u003c/code\u003e, \n\u003ccode\u003eGREENCOMPONENT\u003c/code\u003e, or \n\u003ccode\u003eBLUECOMPONENT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/color/ProfileDataException.html\" title\u003d\"class in java.awt.color\"\u003eProfileDataException\u003c/a\u003e\u003c/code\u003e - if the profile does not specify the corresponding TRC as a table"
        ],
        "return": [
          "a short array representing the TRC"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.color.ICC_ProfileRGB",
  "comment": "The \n\u003ccode\u003eICC_ProfileRGB\u003c/code\u003e class is a subclass of the \n\u003ccode\u003eICC_Profile\u003c/code\u003e class that represents profiles which meet the following criteria: the profile\u0027s color space type is RGB, and the profile includes the \n\u003ccode\u003eredColorantTag\u003c/code\u003e, \n\u003ccode\u003egreenColorantTag\u003c/code\u003e, \n\u003ccode\u003eblueColorantTag\u003c/code\u003e, \n\u003ccode\u003eredTRCTag\u003c/code\u003e, \n\u003ccode\u003egreenTRCTag\u003c/code\u003e, \n\u003ccode\u003eblueTRCTag\u003c/code\u003e, \n\u003ccode\u003emediaWhitePointTag\u003c/code\u003e tags. The \n\u003ccode\u003egetInstance\u003c/code\u003e methods in the \n\u003ccode\u003eICC_Profile\u003c/code\u003e class will return an \n\u003ccode\u003eICC_ProfileRGB\u003c/code\u003e object when the above conditions are met. Three-component, matrix-based input profiles and RGB display profiles are examples of this type of profile. \n\u003cp\u003e The advantage of this class is that it provides color transform matrices and lookup tables that Java or native methods can use directly to optimize color conversion in some cases. \u003c/p\u003e\n\u003cp\u003e To transform from a device profile color space to the CIEXYZ Profile Connection Space, each device color component is first linearized by a lookup through the corresponding tone reproduction curve (TRC). The resulting linear RGB components are converted to the CIEXYZ PCS using a a 3x3 matrix constructed from the RGB colorants. \u003c/p\u003e\n\u003cpre\u003e\n \u0026nbsp;               linearR \u003d redTRC[deviceR]\n\n \u0026nbsp;               linearG \u003d greenTRC[deviceG]\n\n \u0026nbsp;               linearB \u003d blueTRC[deviceB]\n\n \u0026nbsp; _      _       _                                             _   _         _\n \u0026nbsp;[  PCSX  ]     [  redColorantX  greenColorantX  blueColorantX  ] [  linearR  ]\n \u0026nbsp;[        ]     [                                               ] [           ]\n \u0026nbsp;[  PCSY  ]  \u003d  [  redColorantY  greenColorantY  blueColorantY  ] [  linearG  ]\n \u0026nbsp;[        ]     [                                               ] [           ]\n \u0026nbsp;[_ PCSZ _]     [_ redColorantZ  greenColorantZ  blueColorantZ _] [_ linearB _]\n\n \u003c/pre\u003e The inverse transform is performed by converting PCS XYZ components to linear RGB components through the inverse of the above 3x3 matrix, and then converting linear RGB to device RGB through inverses of the TRCs.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.color.ICC_ProfileRGB\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}