{
  "packageName": "java.awt",
  "simpleName": "FontMetrics",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "font",
      "comment": "The actual Font from which the font metrics are created. This cannot be null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getFont()\"\u003e\u003ccode\u003egetFont()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFont",
      "comment": "Gets the Font described by this FontMetrics object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eFont\u003c/code\u003e described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.FontRenderContext",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFontRenderContext",
      "comment": "Gets the FontRenderContext used by this FontMetrics object to measure text. Note that methods in this class which take a Graphics parameter measure text using the FontRenderContext of that Graphics object, and not this FontRenderContext",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eFontRenderContext\u003c/code\u003e used by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLeading",
      "comment": "Determines the standard leading of the Font described by this FontMetrics object. The standard leading, or interline spacing, is the logical amount of space to be reserved between the descent of one line of text and the ascent of the next line. The height metric is calculated to include this extra space.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getHeight()\"\u003e\u003ccode\u003egetHeight()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getAscent()\"\u003e\u003ccode\u003egetAscent()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getDescent()\"\u003e\u003ccode\u003egetDescent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the standard leading of the \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAscent",
      "comment": "Determines the font ascent of the Font described by this FontMetrics object. The font ascent is the distance from the font\u0027s baseline to the top of most alphanumeric characters. Some characters in the Font might extend above the font ascent line.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getMaxAscent()\"\u003e\u003ccode\u003egetMaxAscent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the font ascent of the \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDescent",
      "comment": "Determines the font descent of the Font described by this FontMetrics object. The font descent is the distance from the font\u0027s baseline to the bottom of most alphanumeric characters with descenders. Some characters in the Font might extend below the font descent line.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getMaxDescent()\"\u003e\u003ccode\u003egetMaxDescent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the font descent of the \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHeight",
      "comment": "Gets the standard height of a line of text in this font. This is the distance between the baseline of adjacent lines of text. It is the sum of the leading + ascent + descent. Due to rounding this may not be the same as getAscent() + getDescent() + getLeading(). There is no guarantee that lines of text spaced at this distance are disjoint; such lines may overlap if some characters overshoot either the standard ascent or the standard descent metric.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getLeading()\"\u003e\u003ccode\u003egetLeading()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getAscent()\"\u003e\u003ccode\u003egetAscent()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getDescent()\"\u003e\u003ccode\u003egetDescent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the standard height of the font."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxAscent",
      "comment": "Determines the maximum ascent of the Font described by this FontMetrics object. No character extends further above the font\u0027s baseline than this height.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getAscent()\"\u003e\u003ccode\u003egetAscent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the maximum ascent of any character in the \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxDescent",
      "comment": "Determines the maximum descent of the Font described by this FontMetrics object. No character extends further below the font\u0027s baseline than this height.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getDescent()\"\u003e\u003ccode\u003egetDescent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the maximum descent of any character in the \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxDecent",
      "comment": "For backward compatibility only.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getMaxDescent()\"\u003e\u003ccode\u003egetMaxDescent()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the maximum descent of any character in the \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxAdvance",
      "comment": "Returns an estimate of the maximum advance width of any character in the Font described by this FontMetrics object, with important caveats, enumerated below. The advance is the distance from the leftmost point used to position the character to the rightmost point along the baseline. This is not the same thing as the visible width of the glyph image representing the character. The advance of a String is not necessarily the sum of the advances of its characters. It may differ substantially if complex text layout is required for proper rendering. Some of the caveats of the reported value include The returned value is relying upon information from some underlying system font, and the correctness of that information is outside of AWT\u0027s control. When specific characters are mapped into glyphs in some rendering context, instructions in the font itself together with the rasterization process may cause some glyph to have a wider advance than reported. When a font is requested in some style, eg Font.BOLD, for which no exact match is available, then techniques to satisfy the requested rendering may similarly result in glyphs that are wider than the reported maximum. Depending on the implementation, an AWT logical font or physical font may need to locate some characters from one or more \"fall back\" fonts, when the primary underlying physical font does not support the character. These fonts may not all be known or considered in the calculation of the reported maximum advance. It is common for the design center of such fall back fonts to be for a different script than the design center of the primary font, so their advances can be quite different. This can also lead to the unexpected result that a font such as Font.MONOSPACED can render glyphs that are not all the same width. None of these caveats are exposed as they are all implementation details, and there is no practical way to determine when these are in effect. An application which needs a better estimate of the maximum advance, and knows the subset of characters it expects to display can query the advance of each such character to find the widest, however, as discussed above, since the displayed width of a String is not necessarily the sum of the advances the value still needs to be used with caution. In summary, this method makes no absolute guarantee, nor can it even make a guarantee to be correct within some margin of error. So it should be used at most only for estimating the total space sufficient to display some number of as yet unknown characters from the font. And that might be either an overestimate, or an underestimate depending on the specific text and rendering conext.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an estimate of the maximum advance width of any character in the \n\u003ccode\u003eFont\u003c/code\u003e, or \n\u003ccode\u003e-1\u003c/code\u003e if the maximum advance width is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "charWidth",
      "comment": "Returns the advance width of the specified character in this Font. The advance is the distance from the leftmost point to the rightmost point on the character\u0027s baseline. Note that the advance of a String is not necessarily the sum of the advances of its characters. This method doesn\u0027t validate the specified character to be a valid Unicode code point. The caller must validate the character value using Character.isValidCodePoint if necessary.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#charsWidth(char%5B%5D,int,int)\"\u003e\u003ccode\u003echarsWidth(char[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#stringWidth(java.lang.String)\"\u003e\u003ccode\u003estringWidth(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be measured"
        ],
        "return": [
          "the advance width of the specified character in the \n\u003ccode\u003eFont\u003c/code\u003e described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "charWidth",
      "comment": "Returns the advance width of the specified character in this Font. The advance is the distance from the leftmost point to the rightmost point on the character\u0027s baseline. Note that the advance of a String is not necessarily the sum of the advances of its characters. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the charWidth(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#charsWidth(char%5B%5D,int,int)\"\u003e\u003ccode\u003echarsWidth(char[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#stringWidth(java.lang.String)\"\u003e\u003ccode\u003estringWidth(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be measured"
        ],
        "return": [
          "the advance width of the specified character in the \n\u003ccode\u003eFont\u003c/code\u003e described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stringWidth",
      "comment": "Returns the total advance width for showing the specified String in this Font. The advance is the distance from the leftmost point to the rightmost point on the string\u0027s baseline. Note that the advance of a String is not necessarily the sum of the advances of its characters.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#bytesWidth(byte%5B%5D,int,int)\"\u003e\u003ccode\u003ebytesWidth(byte[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#charsWidth(char%5B%5D,int,int)\"\u003e\u003ccode\u003echarsWidth(char[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#getStringBounds(java.lang.String,java.awt.Graphics)\"\u003e\u003ccode\u003egetStringBounds(String, Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be measured"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if str is null."
        ],
        "return": [
          "the advance width of the specified \n\u003ccode\u003eString\u003c/code\u003e in the \n\u003ccode\u003eFont\u003c/code\u003e described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "charsWidth",
      "comment": "Returns the total advance width for showing the specified array of characters in this Font. The advance is the distance from the leftmost point to the rightmost point on the string\u0027s baseline. The advance of a String is not necessarily the sum of the advances of its characters. This is equivalent to measuring a String of the characters in the specified range.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#charWidth(int)\"\u003e\u003ccode\u003echarWidth(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#charWidth(char)\"\u003e\u003ccode\u003echarWidth(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#bytesWidth(byte%5B%5D,int,int)\"\u003e\u003ccode\u003ebytesWidth(byte[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#stringWidth(java.lang.String)\"\u003e\u003ccode\u003estringWidth(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the array of characters to be measured",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the characters in the array",
          "\u003ccode\u003elen\u003c/code\u003e - the number of characters to be measured from the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edata\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eoff\u003c/code\u003e and \n\u003ccode\u003elen\u003c/code\u003e arguments index characters outside the bounds of the \n\u003ccode\u003edata\u003c/code\u003e array."
        ],
        "return": [
          "the advance width of the subarray of the specified \n\u003ccode\u003echar\u003c/code\u003e array in the font described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bytesWidth",
      "comment": "Returns the total advance width for showing the specified array of bytes in this Font. The advance is the distance from the leftmost point to the rightmost point on the string\u0027s baseline. The advance of a String is not necessarily the sum of the advances of its characters. This is equivalent to measuring a String of the characters in the specified range.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#charsWidth(char%5B%5D,int,int)\"\u003e\u003ccode\u003echarsWidth(char[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html#stringWidth(java.lang.String)\"\u003e\u003ccode\u003estringWidth(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the array of bytes to be measured",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the bytes in the array",
          "\u003ccode\u003elen\u003c/code\u003e - the number of bytes to be measured from the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edata\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eoff\u003c/code\u003e and \n\u003ccode\u003elen\u003c/code\u003e arguments index bytes outside the bounds of the \n\u003ccode\u003edata\u003c/code\u003e array."
        ],
        "return": [
          "the advance width of the subarray of the specified \n\u003ccode\u003ebyte\u003c/code\u003e array in the \n\u003ccode\u003eFont\u003c/code\u003e described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWidths",
      "comment": "Gets the advance widths of the first 256 characters in the Font. The advance is the distance from the leftmost point to the rightmost point on the character\u0027s baseline. Note that the advance of a String is not necessarily the sum of the advances of its characters.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array storing the advance widths of the characters in the \n\u003ccode\u003eFont\u003c/code\u003e described by this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasUniformLineMetrics",
      "comment": "Checks to see if the Font has uniform line metrics. A composite font may consist of several different fonts to cover various character sets. In such cases, the FontLineMetrics objects are not uniform. Different fonts may have a different ascent, descent, metrics and so on. This information is sometimes necessary for line measuring and line breaking.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#hasUniformLineMetrics()\"\u003e\u003ccode\u003eFont.hasUniformLineMetrics()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the font has uniform line metrics; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns the LineMetrics object for the specified String in the specified Graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getLineMetrics(String, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified \n\u003ccode\u003eString\u003c/code\u003e and \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns the LineMetrics object for the specified String in the specified Graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getLineMetrics(java.lang.String,int,int,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getLineMetrics(String, int, int, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified \n\u003ccode\u003eString\u003c/code\u003e and \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chars",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns the LineMetrics object for the specified character array in the specified Graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getLineMetrics(char%5B%5D,int,int,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getLineMetrics(char[], int, int, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003echars\u003c/code\u003e - the specified character array",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset of \n\u003ccode\u003echars\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003echars\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified character array and \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "ci",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns the LineMetrics object for the specified CharacterIterator in the specified Graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getLineMetrics(CharacterIterator, int, int, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eci\u003c/code\u003e - the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset in \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end index of \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified arguments."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the bounds of the specified String in the specified Graphics context. The bounds is used to layout the String. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStringBounds(java.lang.String,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getStringBounds(String, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Rectangle2D.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eRectangle2D\u003c/code\u003e\u003c/a\u003e that is the bounding box of the specified \n\u003ccode\u003eString\u003c/code\u003e in the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the bounds of the specified String in the specified Graphics context. The bounds is used to layout the String. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStringBounds(java.lang.String,int,int,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getStringBounds(String, int, int, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the offset of the beginning of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the specified \n\u003ccode\u003eString\u003c/code\u003e in the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chars",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the bounds of the specified array of characters in the specified Graphics context. The bounds is used to layout the String created with the specified array of characters, beginIndex and limit. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStringBounds(char%5B%5D,int,int,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getStringBounds(char[], int, int, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003echars\u003c/code\u003e - an array of characters",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset of the array of characters",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of the array of characters",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the specified character array in the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "ci",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the bounds of the characters indexed in the specified CharacterIterator in the specified Graphics context. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStringBounds(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getStringBounds(CharacterIterator, int, int, FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eci\u003c/code\u003e - the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset in \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end index of \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the characters indexed in the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e in the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "name": "context",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxCharBounds",
      "comment": "Returns the bounds for the character with the maximum bounds in the specified Graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getMaxCharBounds(java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getMaxCharBounds(FontRenderContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econtext\u003c/code\u003e - the specified \n\u003ccode\u003eGraphics\u003c/code\u003e context"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box for the character with the maximum bounds."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a representation of this FontMetrics object\u0027s values as a String.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representation of this \n\u003ccode\u003eFontMetrics\u003c/code\u003e object."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "name": "font",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new FontMetrics object for finding out height and width information about the specified Font and specific character glyphs in that Font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - the \n\u003ccode\u003eFont\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.FontMetrics",
  "comment": "The \n\u003ccode\u003eFontMetrics\u003c/code\u003e class defines a font metrics object, which encapsulates information about the rendering of a particular font on a particular screen. \n\u003cp\u003e \u003cb\u003eNote to subclassers\u003c/b\u003e: Since many of these methods form closed, mutually recursive loops, you must take care that you implement at least one of the methods in each such loop to prevent infinite recursion when your subclass is used. In particular, the following is the minimal suggested set of methods to override in order to ensure correctness and prevent infinite recursion (though other subsets are equally feasible): \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"#getAscent()\"\u003e\u003ccode\u003egetAscent()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getLeading()\"\u003e\u003ccode\u003egetLeading()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#getMaxAdvance()\"\u003e\u003ccode\u003egetMaxAdvance()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#charWidth(char)\"\u003e\u003ccode\u003echarWidth(char)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#charsWidth(char%5B%5D,int,int)\"\u003e\u003ccode\u003echarsWidth(char[], int, int)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cimg src\u003d\"doc-files/FontMetrics-1.gif\" alt\u003d\"The letter \u0027p\u0027 showing its \u0027reference point\u0027\" style\u003d\"border:15px; float:right; margin: 7px 10px;\"\u003e Note that the implementations of these methods are inefficient, so they are usually overridden with more efficient toolkit-specific implementations. \u003c/p\u003e\n\u003cp\u003e When an application asks to place a character at the position (\u003ci\u003ex\u003c/i\u003e,\u0026nbsp;\u003ci\u003ey\u003c/i\u003e), the character is placed so that its reference point (shown as the dot in the accompanying image) is put at that position. The reference point specifies a horizontal line called the \u003ci\u003ebaseline\u003c/i\u003e of the character. In normal printing, the baselines of characters should align. \u003c/p\u003e\n\u003cp\u003e In addition, every character in a font has an \u003ci\u003eascent\u003c/i\u003e, a \u003ci\u003edescent\u003c/i\u003e, and an \u003ci\u003eadvance width\u003c/i\u003e. The ascent is the amount by which the character ascends above the baseline. The descent is the amount by which the character descends below the baseline. The advance width indicates the position at which AWT should place the next character. \u003c/p\u003e\n\u003cp\u003e An array of characters or a string can also have an ascent, a descent, and an advance width. The ascent of the array is the maximum ascent of any character in the array. The descent is the maximum descent of any character in the array. The advance width is the sum of the advance widths of each of the characters in the character array. The advance of a \u003ccode\u003eString\u003c/code\u003e is the distance along the baseline of the \u003ccode\u003eString\u003c/code\u003e. This distance is the width that should be used for centering or right-aligning the \u003ccode\u003eString\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eNote that the advance of a \u003ccode\u003eString\u003c/code\u003e is not necessarily the sum of the advances of its characters measured in isolation because the width of a character can vary depending on its context. For example, in Arabic text, the shape of a character can change in order to connect to other characters. Also, in some scripts, certain character sequences can be represented by a single shape, called a \u003cem\u003eligature\u003c/em\u003e. Measuring characters individually does not account for these transformations. \u003c/p\u003e\n\u003cp\u003eFont metrics are baseline-relative, meaning that they are generally independent of the rotation applied to the font (modulo possible grid hinting effects). See \u003ca href\u003d\"Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.FontMetrics\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}