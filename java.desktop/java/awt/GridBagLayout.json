{
  "packageName": "java.awt",
  "simpleName": "GridBagLayout",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "MAXGRIDSIZE",
      "comment": "This field is no longer used to reserve arrays and kept for backward compatibility. Previously, this was the maximum number of grid positions (both horizontal and vertical) that could be laid out by the grid bag layout. Current implementation doesn\u0027t impose any limits on the size of a grid.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.GridBagLayout.MAXGRIDSIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "MINSIZE",
      "comment": "The smallest grid that can be laid out by the grid bag layout.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.GridBagLayout.MINSIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 28,
      "name": "PREFERREDSIZE",
      "comment": "The preferred grid size that can be laid out by the grid bag layout.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.GridBagLayout.PREFERREDSIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.awt.Component",
            "type": "Class"
          },
          {
            "name": "java.awt.GridBagConstraints",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "comptable",
      "comment": "This hashtable maintains the association between a component and its gridbag constraints. The Keys in comptable are the components and the values are the instances of GridBagConstraints.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagConstraints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGridBagConstraints\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.GridBagConstraints",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "defaultConstraints",
      "comment": "This field holds a gridbag constraints instance containing the default values, so if a component does not have gridbag constraints associated with it, then the component will be assigned a copy of the defaultConstraints.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#getConstraints(java.awt.Component)\"\u003e\u003ccode\u003egetConstraints(Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#setConstraints(java.awt.Component,java.awt.GridBagConstraints)\"\u003e\u003ccode\u003esetConstraints(Component, GridBagConstraints)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#lookupConstraints(java.awt.Component)\"\u003e\u003ccode\u003elookupConstraints(Component)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.GridBagLayoutInfo",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "layoutInfo",
      "comment": "This field holds the layout information for the gridbag. The information in this field is based on the most recent validation of the gridbag. If layoutInfo is null this indicates that there are no components in the gridbag or if there are components, they have not yet been validated.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#getLayoutInfo(java.awt.Container,int)\"\u003e\u003ccode\u003egetLayoutInfo(Container, int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "memberType": "JavaField",
      "modifiers": 1,
      "name": "columnWidths",
      "comment": "This field holds the overrides to the column minimum width. If this field is non-null the values are applied to the gridbag after all of the minimum columns widths have been calculated. If columnWidths has more elements than the number of columns, columns are added to the gridbag to match the number of elements in columnWidth.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#getLayoutDimensions()\"\u003e\u003ccode\u003egetLayoutDimensions()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "memberType": "JavaField",
      "modifiers": 1,
      "name": "rowHeights",
      "comment": "This field holds the overrides to the row minimum heights. If this field is non-null the values are applied to the gridbag after all of the minimum row heights have been calculated. If rowHeights has more elements than the number of rows, rows are added to the gridbag to match the number of elements in rowHeights.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#getLayoutDimensions()\"\u003e\u003ccode\u003egetLayoutDimensions()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "memberType": "JavaField",
      "modifiers": 1,
      "name": "columnWeights",
      "comment": "This field holds the overrides to the column weights. If this field is non-null the values are applied to the gridbag after all of the columns weights have been calculated. If columnWeights[i] \u003e weight for column i, then column i is assigned the weight in columnWeights[i]. If columnWeights has more elements than the number of columns, the excess elements are ignored - they do not cause more columns to be created.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "memberType": "JavaField",
      "modifiers": 1,
      "name": "rowWeights",
      "comment": "This field holds the overrides to the row weights. If this field is non-null the values are applied to the gridbag after all of the rows weights have been calculated. If rowWeights[i] \u003e weight for row i, then row i is assigned the weight in rowWeights[i]. If rowWeights has more elements than the number of rows, the excess elements are ignored - they do not cause more rows to be created.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.awt.GridBagConstraints",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setConstraints",
      "comment": "Sets the constraints for the specified component in this layout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be modified",
          "\u003ccode\u003econstraints\u003c/code\u003e - the constraints to be applied"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GridBagConstraints",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConstraints",
      "comment": "Gets the constraints for the specified component. A copy of the actual GridBagConstraints object is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be queried"
        ],
        "return": [
          "the constraint for the specified component in this grid bag layout; a copy of the actual constraint object is returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GridBagConstraints",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "lookupConstraints",
      "comment": "Retrieves the constraints for the specified component. The return value is not a copy, but is the actual GridBagConstraints object used by the layout mechanism. If comp is not in the GridBagLayout, a set of default GridBagConstraints are returned. A comp value of null is invalid and returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be queried"
        ],
        "return": [
          "the constraints for the specified component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutOrigin",
      "comment": "Determines the origin of the layout area, in the graphics coordinate space of the target container. This value represents the pixel coordinates of the top-left corner of the layout area regardless of the ComponentOrientation value of the container. This is distinct from the grid origin given by the cell coordinates (0,0). Most applications do not call this method directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ComponentOrientation.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponentOrientation\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the graphics origin of the cell in the top-left corner of the layout grid"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {},
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutDimensions",
      "comment": "Determines column widths and row heights for the layout grid. Most applications do not call this method directly.",
      "tagMap": {
        "return": [
          "an array of two arrays, containing the widths of the layout columns and the heights of the layout rows"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {},
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutWeights",
      "comment": "Determines the weights of the layout grid\u0027s columns and rows. Weights are used to calculate how much a given column or row stretches beyond its preferred size, if the layout has extra room to fill. Most applications do not call this method directly.",
      "tagMap": {
        "return": [
          "an array of two arrays, representing the horizontal weights of the layout columns and the vertical weights of the layout rows"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "location",
      "comment": "Determines which cell in the layout grid contains the point specified by (x, y). Each cell is identified by its column index (ranging from 0 to the number of columns minus 1) and its row index (ranging from 0 to the number of rows minus 1). If the (x, y) point lies outside the grid, the following rules are used. The column index is returned as zero if x lies to the left of the layout for a left-to-right container or to the right of the layout for a right-to-left container. The column index is returned as the number of columns if x lies to the right of the layout in a left-to-right container or to the left in a right-to-left container. The row index is returned as zero if y lies above the layout, and as the number of rows if y lies below the layout. The orientation of a container is determined by its ComponentOrientation property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ComponentOrientation.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponentOrientation\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of a point",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of a point"
        ],
        "return": [
          "an ordered pair of indexes that indicate which cell in the layout grid contains the point (\n\u003ci\u003ex\u003c/i\u003e,\u0026nbsp;\n\u003ci\u003ey\u003c/i\u003e)."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addLayoutComponent",
      "comment": "Has no effect, since this layout manager does not use a per-component string.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#addLayoutComponent(java.lang.String,java.awt.Component)\"\u003eaddLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the string to be associated with the component",
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addLayoutComponent",
      "comment": "Adds the specified component to the layout, using the specified constraints object. Note that constraints are mutable and are, therefore, cloned when cached.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#addLayoutComponent(java.awt.Component,java.lang.Object)\"\u003eaddLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be added",
          "\u003ccode\u003econstraints\u003c/code\u003e - an object that determines how the component is added to the layout"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econstraints\u003c/code\u003e is not a \n\u003ccode\u003eGridBagConstraint\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeLayoutComponent",
      "comment": "Removes the specified component from this layout. Most applications do not call this method directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#remove(java.awt.Component)\"\u003e\u003ccode\u003eContainer.remove(java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#removeAll()\"\u003e\u003ccode\u003eContainer.removeAll()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#removeLayoutComponent(java.awt.Component)\"\u003eremoveLayoutComponent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the component to be removed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferredLayoutSize",
      "comment": "Determines the preferred size of the parent container using this grid bag layout. Most applications do not call this method directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getPreferredSize()\"\u003e\u003ccode\u003eContainer.getPreferredSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)\"\u003epreferredLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container in which to do the layout"
        ],
        "return": [
          "the preferred size of the \n\u003ccode\u003eparent\u003c/code\u003e container"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minimumLayoutSize",
      "comment": "Determines the minimum size of the parent container using this grid bag layout. Most applications do not call this method directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#doLayout()\"\u003e\u003ccode\u003eContainer.doLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)\"\u003eminimumLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container in which to do the layout"
        ],
        "return": [
          "the minimum size of the \n\u003ccode\u003eparent\u003c/code\u003e container"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "maximumLayoutSize",
      "comment": "Returns the maximum dimensions for this layout given the components in the specified target container.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eContainer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#minimumLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003eminimumLayoutSize(Container)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayout.html#preferredLayoutSize(java.awt.Container)\"\u003e\u003ccode\u003epreferredLayoutSize(Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#maximumLayoutSize(java.awt.Container)\"\u003emaximumLayoutSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the container which needs to be laid out"
        ],
        "return": [
          "the maximum dimensions for this layout"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutAlignmentX",
      "comment": "Returns the alignment along the x axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#getLayoutAlignmentX(java.awt.Container)\"\u003egetLayoutAlignmentX\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the target container"
        ],
        "return": [
          "the value \n\u003ccode\u003e0.5f\u003c/code\u003e to indicate centered"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutAlignmentY",
      "comment": "Returns the alignment along the y axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#getLayoutAlignmentY(java.awt.Container)\"\u003egetLayoutAlignmentY\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the target container"
        ],
        "return": [
          "the value \n\u003ccode\u003e0.5f\u003c/code\u003e to indicate centered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invalidateLayout",
      "comment": "Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html#invalidateLayout(java.awt.Container)\"\u003einvalidateLayout\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager2.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager2\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the target container"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layoutContainer",
      "comment": "Lays out the specified container using this grid bag layout. This method reshapes components in the specified container in order to satisfy the constraints of this GridBagLayout object. Most applications do not call this method directly.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eContainer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#doLayout()\"\u003e\u003ccode\u003eContainer.doLayout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html#layoutContainer(java.awt.Container)\"\u003elayoutContainer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/LayoutManager.html\" title\u003d\"interface in java.awt\"\u003eLayoutManager\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the container in which to do the layout"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this grid bag layout\u0027s values.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this grid bag layout."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GridBagLayoutInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sizeflag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getLayoutInfo",
      "comment": "Fills in an instance of GridBagLayoutInfo for the current set of managed children. This requires three passes through the set of children: Figure out the dimensions of the layout grid. Determine which cells the components occupy. Distribute the weights and min sizes among the rows/columns. This also caches the minsizes for all the children when they are first encountered (so subsequent loops don\u0027t need to ask again). This method should only be used internally by GridBagLayout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the layout container",
          "\u003ccode\u003esizeflag\u003c/code\u003e - either \n\u003ccode\u003ePREFERREDSIZE\u003c/code\u003e or \n\u003ccode\u003eMINSIZE\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eGridBagLayoutInfo\u003c/code\u003e for the set of children"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GridBagLayoutInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sizeflag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "GetLayoutInfo",
      "comment": "This method is obsolete and supplied for backwards compatibility only; new code should call getLayoutInfo instead. Fills in an instance of GridBagLayoutInfo for the current set of managed children. This method is the same as getLayoutInfo; refer to getLayoutInfo description for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the layout container",
          "\u003ccode\u003esizeflag\u003c/code\u003e - either \n\u003ccode\u003ePREFERREDSIZE\u003c/code\u003e or \n\u003ccode\u003eMINSIZE\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eGridBagLayoutInfo\u003c/code\u003e for the set of children"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.GridBagConstraints",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "adjustForGravity",
      "comment": "Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads. This method should only be used internally by GridBagLayout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econstraints\u003c/code\u003e - the constraints to be applied",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eRectangle\u003c/code\u003e to be adjusted"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.GridBagConstraints",
            "type": "Class"
          },
          "field": {
            "name": "constraints"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "AdjustForGravity",
      "comment": "Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads. This method is obsolete and supplied for backwards compatibility only; new code should call adjustForGravity instead. This method is the same as adjustForGravity",
      "tagMap": {
        "param": [
          "\u003ccode\u003econstraints\u003c/code\u003e - the constraints to be applied",
          "\u003ccode\u003er\u003c/code\u003e - the \n\u003ccode\u003eRectangle\u003c/code\u003e to be adjusted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "java.awt.GridBagLayoutInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getMinSize",
      "comment": "Figures out the minimum size of the master based on the information from getLayoutInfo. This method should only be used internally by GridBagLayout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the layout container",
          "\u003ccode\u003einfo\u003c/code\u003e - the layout info for this parent"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object containing the minimum size"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "java.awt.GridBagLayoutInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "GetMinSize",
      "comment": "This method is obsolete and supplied for backwards compatibility only; new code should call getMinSize instead. This method is the same as getMinSize",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the layout container",
          "\u003ccode\u003einfo\u003c/code\u003e - the layout info for this parent"
        ],
        "return": [
          "a \n\u003ccode\u003eDimension\u003c/code\u003e object containing the minimum size"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "arrangeGrid",
      "comment": "Lays out the grid. This method should only be used internally by GridBagLayout.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the layout container"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "ArrangeGrid",
      "comment": "This method is obsolete and supplied for backwards compatibility only; new code should call arrangeGrid instead. This method is the same as arrangeGrid",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the layout container"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a grid bag layout manager.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.GridBagLayout",
  "comment": "The \n\u003ccode\u003eGridBagLayout\u003c/code\u003e class is a flexible layout manager that aligns components vertically, horizontally or along their baseline without requiring that the components be of the same size. Each \n\u003ccode\u003eGridBagLayout\u003c/code\u003e object maintains a dynamic, rectangular grid of cells, with each component occupying one or more cells, called its \n\u003cem\u003edisplay area\u003c/em\u003e. \n\u003cp\u003e Each component managed by a \u003ccode\u003eGridBagLayout\u003c/code\u003e is associated with an instance of \u003ca href\u003d\"GridBagConstraints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGridBagConstraints\u003c/code\u003e\u003c/a\u003e. The constraints object specifies where a component\u0027s display area should be located on the grid and how the component should be positioned within its display area. In addition to its constraints object, the \u003ccode\u003eGridBagLayout\u003c/code\u003e also considers each component\u0027s minimum and preferred sizes in order to determine a component\u0027s size. \u003c/p\u003e\n\u003cp\u003e The overall orientation of the grid depends on the container\u0027s \u003ca href\u003d\"ComponentOrientation.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponentOrientation\u003c/code\u003e\u003c/a\u003e property. For horizontal left-to-right orientations, grid coordinate (0,0) is in the upper left corner of the container with x increasing to the right and y increasing downward. For horizontal right-to-left orientations, grid coordinate (0,0) is in the upper right corner of the container with x increasing to the left and y increasing downward. \u003c/p\u003e\n\u003cp\u003e To use a grid bag layout effectively, you must customize one or more of the \u003ccode\u003eGridBagConstraints\u003c/code\u003e objects that are associated with its components. You customize a \u003ccode\u003eGridBagConstraints\u003c/code\u003e object by setting one or more of its instance variables: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#gridx\"\u003e\u003ccode\u003eGridBagConstraints.gridx\u003c/code\u003e\u003c/a\u003e, \n  \u003ca href\u003d\"GridBagConstraints.html#gridy\"\u003e\u003ccode\u003eGridBagConstraints.gridy\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Specifies the cell containing the leading corner of the component\u0027s display area, where the cell at the origin of the grid has address \n  \u003ccode\u003egridx\u0026nbsp;\u003d\u0026nbsp;0\u003c/code\u003e, \n  \u003ccode\u003egridy\u0026nbsp;\u003d\u0026nbsp;0\u003c/code\u003e. For horizontal left-to-right layout, a component\u0027s leading corner is its upper left. For horizontal right-to-left layout, a component\u0027s leading corner is its upper right. Use \n  \u003ccode\u003eGridBagConstraints.RELATIVE\u003c/code\u003e (the default value) to specify that the component be placed immediately following (along the x axis for \n  \u003ccode\u003egridx\u003c/code\u003e or the y axis for \n  \u003ccode\u003egridy\u003c/code\u003e) the component that was added to the container just before this component was added. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#gridwidth\"\u003e\u003ccode\u003eGridBagConstraints.gridwidth\u003c/code\u003e\u003c/a\u003e, \n  \u003ca href\u003d\"GridBagConstraints.html#gridheight\"\u003e\u003ccode\u003eGridBagConstraints.gridheight\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Specifies the number of cells in a row (for \n  \u003ccode\u003egridwidth\u003c/code\u003e) or column (for \n  \u003ccode\u003egridheight\u003c/code\u003e) in the component\u0027s display area. The default value is 1. Use \n  \u003ccode\u003eGridBagConstraints.REMAINDER\u003c/code\u003e to specify that the component\u0027s display area will be from \n  \u003ccode\u003egridx\u003c/code\u003e to the last cell in the row (for \n  \u003ccode\u003egridwidth\u003c/code\u003e) or from \n  \u003ccode\u003egridy\u003c/code\u003e to the last cell in the column (for \n  \u003ccode\u003egridheight\u003c/code\u003e). Use \n  \u003ccode\u003eGridBagConstraints.RELATIVE\u003c/code\u003e to specify that the component\u0027s display area will be from \n  \u003ccode\u003egridx\u003c/code\u003e to the next to the last cell in its row (for \n  \u003ccode\u003egridwidth\u003c/code\u003e) or from \n  \u003ccode\u003egridy\u003c/code\u003e to the next to the last cell in its column (for \n  \u003ccode\u003egridheight\u003c/code\u003e). \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#fill\"\u003e\u003ccode\u003eGridBagConstraints.fill\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Used when the component\u0027s display area is larger than the component\u0027s requested size to determine whether (and how) to resize the component. Possible values are \n  \u003ccode\u003eGridBagConstraints.NONE\u003c/code\u003e (the default), \n  \u003ccode\u003eGridBagConstraints.HORIZONTAL\u003c/code\u003e (make the component wide enough to fill its display area horizontally, but don\u0027t change its height), \n  \u003ccode\u003eGridBagConstraints.VERTICAL\u003c/code\u003e (make the component tall enough to fill its display area vertically, but don\u0027t change its width), and \n  \u003ccode\u003eGridBagConstraints.BOTH\u003c/code\u003e (make the component fill its display area entirely). \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#ipadx\"\u003e\u003ccode\u003eGridBagConstraints.ipadx\u003c/code\u003e\u003c/a\u003e, \n  \u003ca href\u003d\"GridBagConstraints.html#ipady\"\u003e\u003ccode\u003eGridBagConstraints.ipady\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Specifies the component\u0027s internal padding within the layout, how much to add to the minimum size of the component. The width of the component will be at least its minimum width plus \n  \u003ccode\u003eipadx\u003c/code\u003e pixels. Similarly, the height of the component will be at least the minimum height plus \n  \u003ccode\u003eipady\u003c/code\u003e pixels. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#insets\"\u003e\u003ccode\u003eGridBagConstraints.insets\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Specifies the component\u0027s external padding, the minimum amount of space between the component and the edges of its display area. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#anchor\"\u003e\u003ccode\u003eGridBagConstraints.anchor\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Specifies where the component should be positioned in its display area. There are three kinds of possible values: absolute, orientation-relative, and baseline-relative. Orientation relative values are interpreted relative to the container\u0027s \n  \u003ccode\u003eComponentOrientation\u003c/code\u003e property while absolute values are not. Baseline relative values are calculated relative to the baseline. Valid values are: \n  \u003cul\u003e \n   \u003cli\u003eAbsolute Values: \n    \u003cul\u003e \n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.NORTH\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.SOUTH\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.WEST\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.EAST\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.NORTHWEST\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.NORTHEAST\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.SOUTHWEST\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.SOUTHEAST\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.CENTER\u003c/code\u003e (the default) \u003c/li\u003e\n    \u003c/ul\u003e \u003c/li\u003e\n   \u003cli\u003eOrientation Relative Values: \n    \u003cul\u003e \n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.PAGE_START\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.PAGE_END\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.LINE_START\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.LINE_END\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.FIRST_LINE_START\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.FIRST_LINE_END\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.LAST_LINE_START\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.LAST_LINE_END\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e \u003c/li\u003e\n   \u003cli\u003eBaseline Relative Values: \n    \u003cul\u003e \n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.BASELINE\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.BASELINE_LEADING\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.BASELINE_TRAILING\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.ABOVE_BASELINE\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.ABOVE_BASELINE_LEADING\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.ABOVE_BASELINE_TRAILING\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.BELOW_BASELINE\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.BELOW_BASELINE_LEADING\u003c/code\u003e \u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eGridBagConstraints.BELOW_BASELINE_TRAILING\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e \u003c/li\u003e\n  \u003c/ul\u003e \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ca href\u003d\"GridBagConstraints.html#weightx\"\u003e\u003ccode\u003eGridBagConstraints.weightx\u003c/code\u003e\u003c/a\u003e, \n  \u003ca href\u003d\"GridBagConstraints.html#weighty\"\u003e\u003ccode\u003eGridBagConstraints.weighty\u003c/code\u003e\u003c/a\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  Used to determine how to distribute space, which is important for specifying resizing behavior. Unless you specify a weight for at least one component in a row (\n  \u003ccode\u003eweightx\u003c/code\u003e) and column (\n  \u003ccode\u003eweighty\u003c/code\u003e), all the components clump together in the center of their container. This is because when the weight is zero (the default), the \n  \u003ccode\u003eGridBagLayout\u003c/code\u003e object puts any extra space between its grid of cells and the edges of the container. \n \u003c/dd\u003e\n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Each row may have a baseline; the baseline is determined by the components in that row that have a valid baseline and are aligned along the baseline (the component\u0027s anchor value is one of \u003ccode\u003e BASELINE\u003c/code\u003e, \u003ccode\u003eBASELINE_LEADING\u003c/code\u003e or \u003ccode\u003eBASELINE_TRAILING\u003c/code\u003e). If none of the components in the row has a valid baseline, the row does not have a baseline. \u003c/p\u003e\n\u003cp\u003e If a component spans rows it is aligned either to the baseline of the start row (if the baseline-resize behavior is \u003ccode\u003e CONSTANT_ASCENT\u003c/code\u003e) or the end row (if the baseline-resize behavior is \u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e). The row that the component is aligned to is called the \u003cem\u003eprevailing row\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e The following figure shows a baseline layout and includes a component that spans rows: \u003c/p\u003e\n\u003cp style\u003d\"text-align: center\"\u003e \u003cimg src\u003d\"doc-files/GridBagLayout-baseline.png\" alt\u003d\"The following text describes this graphic (Figure 1).\"\u003e \u003c/p\u003e This layout consists of three components: \n\u003cul\u003e\n \u003cli\u003eA panel that starts in row 0 and ends in row 1. The panel has a baseline-resize behavior of \u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e and has an anchor of \u003ccode\u003eBASELINE\u003c/code\u003e. As the baseline-resize behavior is \u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e the prevailing row for the panel is row 1. \u003c/li\u003e\n \u003cli\u003eTwo buttons, each with a baseline-resize behavior of \u003ccode\u003eCENTER_OFFSET\u003c/code\u003e and an anchor of \u003ccode\u003eBASELINE\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e Because the second button and the panel share the same prevailing row, they are both aligned along their baseline. \n\u003cp\u003e Components positioned using one of the baseline-relative values resize differently than when positioned using an absolute or orientation-relative value. How components change is dictated by how the baseline of the prevailing row changes. The baseline is anchored to the bottom of the display area if any components with the same prevailing row have a baseline-resize behavior of \u003ccode\u003eCONSTANT_DESCENT\u003c/code\u003e, otherwise the baseline is anchored to the top of the display area. The following rules dictate the resize behavior: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eResizable components positioned above the baseline can only grow as tall as the baseline. For example, if the baseline is at 100 and anchored at the top, a resizable component positioned above the baseline can never grow more than 100 units. \u003c/li\u003e\n \u003cli\u003eSimilarly, resizable components positioned below the baseline can only grow as high as the difference between the display height and the baseline. \u003c/li\u003e\n \u003cli\u003eResizable components positioned on the baseline with a baseline-resize behavior of \u003ccode\u003eOTHER\u003c/code\u003e are only resized if the baseline at the resized size fits within the display area. If the baseline is such that it does not fit within the display area the component is not resized. \u003c/li\u003e\n \u003cli\u003eComponents positioned on the baseline that do not have a baseline-resize behavior of \u003ccode\u003eOTHER\u003c/code\u003e can only grow as tall as \u003ccode\u003edisplay height - baseline + baseline of component\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e If you position a component along the baseline, but the component does not have a valid baseline, it will be vertically centered in its space. Similarly if you have positioned a component relative to the baseline and none of the components in the row have a valid baseline the component is vertically centered. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following figures show ten components (all buttons) managed by a grid bag layout. Figure 2 shows the layout for a horizontal, left-to-right container and Figure 3 shows the layout for a horizontal, right-to-left container. \u003c/p\u003e\n\u003cdiv style\u003d\"margin:0 auto;width:680px;text-align:center;font-weight:bold\"\u003e \n \u003cdiv style\u003d\"float:left\"\u003e \n  \u003cp\u003e\u003cimg src\u003d\"doc-files/GridBagLayout-1.gif\" alt\u003d\"The preceding text describes this graphic (Figure 2).\" style\u003d\"margin: 7px 10px;\"\u003e \u003c/p\u003e\n  \u003cp\u003eFigure 2: Horizontal, Left-to-Right \u003c/p\u003e\n \u003c/div\u003e \n \u003cdiv style\u003d\"float:right\"\u003e \n  \u003cp\u003e\u003cimg src\u003d\"doc-files/GridBagLayout-2.gif\" alt\u003d\"The preceding text describes this graphic (Figure 3).\" style\u003d\"margin: 7px 10px;\"\u003e \u003c/p\u003e\n  \u003cp\u003eFigure 3: Horizontal, Right-to-Left \u003c/p\u003e\n \u003c/div\u003e \n \u003cbr style\u003d\"clear:both;\"\u003e \n\u003c/div\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Each of the ten components has the \u003ccode\u003efill\u003c/code\u003e field of its associated \u003ccode\u003eGridBagConstraints\u003c/code\u003e object set to \u003ccode\u003eGridBagConstraints.BOTH\u003c/code\u003e. In addition, the components have the following non-default constraints: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eButton1, Button2, Button3: \u003ccode\u003eweightx\u0026nbsp;\u003d\u0026nbsp;1.0\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eButton4: \u003ccode\u003eweightx\u0026nbsp;\u003d\u0026nbsp;1.0\u003c/code\u003e, \u003ccode\u003egridwidth\u0026nbsp;\u003d\u0026nbsp;GridBagConstraints.REMAINDER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eButton5: \u003ccode\u003egridwidth\u0026nbsp;\u003d\u0026nbsp;GridBagConstraints.REMAINDER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eButton6: \u003ccode\u003egridwidth\u0026nbsp;\u003d\u0026nbsp;GridBagConstraints.RELATIVE\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eButton7: \u003ccode\u003egridwidth\u0026nbsp;\u003d\u0026nbsp;GridBagConstraints.REMAINDER\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eButton8: \u003ccode\u003egridheight\u0026nbsp;\u003d\u0026nbsp;2\u003c/code\u003e, \u003ccode\u003eweighty\u0026nbsp;\u003d\u0026nbsp;1.0\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003eButton9, Button 10: \u003ccode\u003egridwidth\u0026nbsp;\u003d\u0026nbsp;GridBagConstraints.REMAINDER\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Here is the code that implements the example shown above: \u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e import java.awt.*;\n import java.util.*;\n import java.applet.Applet;\n\n public class GridBagEx1 extends Applet {\n\n     protected void makebutton(String name,\n                               GridBagLayout gridbag,\n                               GridBagConstraints c) {\n         Button button \u003d new Button(name);\n         gridbag.setConstraints(button, c);\n         add(button);\n     }\n\n     public void init() {\n         GridBagLayout gridbag \u003d new GridBagLayout();\n         GridBagConstraints c \u003d new GridBagConstraints();\n\n         setFont(new Font(\"SansSerif\", Font.PLAIN, 14));\n         setLayout(gridbag);\n\n         c.fill \u003d GridBagConstraints.BOTH;\n         c.weightx \u003d 1.0;\n         makebutton(\"Button1\", gridbag, c);\n         makebutton(\"Button2\", gridbag, c);\n         makebutton(\"Button3\", gridbag, c);\n\n         c.gridwidth \u003d GridBagConstraints.REMAINDER; //end row\n         makebutton(\"Button4\", gridbag, c);\n\n         c.weightx \u003d 0.0;                //reset to the default\n         makebutton(\"Button5\", gridbag, c); //another row\n\n         c.gridwidth \u003d GridBagConstraints.RELATIVE; //next-to-last in row\n         makebutton(\"Button6\", gridbag, c);\n\n         c.gridwidth \u003d GridBagConstraints.REMAINDER; //end row\n         makebutton(\"Button7\", gridbag, c);\n\n         c.gridwidth \u003d 1;                //reset to the default\n         c.gridheight \u003d 2;\n         c.weighty \u003d 1.0;\n         makebutton(\"Button8\", gridbag, c);\n\n         c.weighty \u003d 0.0;                //reset to the default\n         c.gridwidth \u003d GridBagConstraints.REMAINDER; //end row\n         c.gridheight \u003d 1;               //reset to the default\n         makebutton(\"Button9\", gridbag, c);\n         makebutton(\"Button10\", gridbag, c);\n\n         setSize(300, 100);\n     }\n\n     public static void main(String args[]) {\n         Frame f \u003d new Frame(\"GridBag Layout Example\");\n         GridBagEx1 ex1 \u003d new GridBagEx1();\n\n         ex1.init();\n\n         f.add(\"Center\", ex1);\n         f.pack();\n         f.setSize(f.getPreferredSize());\n         f.show();\n     }\n }\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagConstraints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGridBagConstraints\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GridBagLayoutInfo.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGridBagLayoutInfo\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ComponentOrientation.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponentOrientation\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.GridBagLayout\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}