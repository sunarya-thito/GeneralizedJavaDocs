{
  "packageName": "java.awt",
  "simpleName": "Graphics2D",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.Graphics",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "raised"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "draw3DRect",
      "comment": "Draws a 3-D highlighted outline of the specified rectangle. The edges of the rectangle are highlighted so that they appear to be beveled and lit from the upper left corner. The colors used for the highlighting effect are determined based on the current color. The resulting rectangle covers an area that is width + 1 pixels wide by height + 1 pixels tall. This method uses the current Color exclusively and ignores the current Paint.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fill3DRect(int,int,int,int,boolean)\"\u003e\u003ccode\u003eGraphics.fill3DRect(int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#draw3DRect(int,int,int,int,boolean)\"\u003edraw3DRect\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be drawn.",
          "\u003ccode\u003eraised\u003c/code\u003e - a boolean that determines whether the rectangle appears to be raised above the surface or sunk into the surface."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "raised"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fill3DRect",
      "comment": "Paints a 3-D highlighted rectangle filled with the current color. The edges of the rectangle are highlighted so that it appears as if the edges were beveled and lit from the upper left corner. The colors used for the highlighting effect and for filling are determined from the current Color. This method uses the current Color exclusively and ignores the current Paint.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#draw3DRect(int,int,int,int,boolean)\"\u003e\u003ccode\u003eGraphics.draw3DRect(int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fill3DRect(int,int,int,int,boolean)\"\u003efill3DRect\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the rectangle to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the rectangle to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be filled.",
          "\u003ccode\u003eraised\u003c/code\u003e - a boolean value that determines whether the rectangle appears to be raised above the surface or etched into the surface."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "draw",
      "comment": "Strokes the outline of a Shape using the settings of the current Graphics2D context. The rendering attributes applied include the Clip, Transform, Paint, Composite and Stroke attributes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)\"\u003e\u003ccode\u003esetStroke(java.awt.Stroke)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to be rendered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "xform"
          }
        },
        {
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "field": {
            "name": "obs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Renders an image, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003exform\u003c/code\u003e - the transformation from image space into user space",
          "\u003ccode\u003eobs\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e to be notified as more of the \n\u003ccode\u003eImage\u003c/code\u003e is converted"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eImage\u003c/code\u003e is fully loaded and completely rendered, or if it\u0027s null; \n\u003ccode\u003efalse\u003c/code\u003e if the \n\u003ccode\u003eImage\u003c/code\u003e is still being loaded."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.BufferedImage",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        },
        {
          "type": {
            "name": "java.awt.image.BufferedImageOp",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Renders a BufferedImage that is filtered with a BufferedImageOp. The rendering attributes applied include the Clip, Transform and Composite attributes. This is equivalent to:  img1 \u003d op.filter(img, null);\n drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the filter to be applied to the image before rendering",
          "\u003ccode\u003eimg\u003c/code\u003e - the specified \n\u003ccode\u003eBufferedImage\u003c/code\u003e to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the location in user space where the upper left corner of the image is rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the location in user space where the upper left corner of the image is rendered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.RenderedImage",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "xform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawRenderedImage",
      "comment": "Renders a RenderedImage, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the image to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003exform\u003c/code\u003e - the transformation from image space into user space"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.renderable.RenderableImage",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "xform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawRenderableImage",
      "comment": "Renders a RenderableImage, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible. Rendering hints set on the Graphics2D object might be used in rendering the RenderableImage. If explicit control is required over specific hints recognized by a specific RenderableImage, or if knowledge of which hints are used is required, then a RenderedImage should be obtained directly from the RenderableImage and rendered using drawRenderedImage.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003edrawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the image to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003exform\u003c/code\u003e - the transformation from image space into user space"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified String, using the current text attribute state in the Graphics2D context. The baseline of the first character is at position (x, y) in the User Space. The rendering attributes applied include the Clip, Transform, Paint, Font and Composite attributes. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawBytes(byte%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003eGraphics.drawBytes(byte[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawChars(char%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003eGraphics.drawChars(char[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.lang.String,int,int)\"\u003edrawString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the string to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text specified by the specified String, using the current text attribute state in the Graphics2D context. The baseline of the first character is at position (x, y) in the User Space. The rendering attributes applied include the Clip, Transform, Paint, Font and Composite attributes. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003eGraphics.setFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class. The baseline of the first character is at position (x, y) in User Space. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.text.AttributedCharacterIterator,int,int)\"\u003edrawString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - the iterator whose text is to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate where the iterator\u0027s text is to be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate where the iterator\u0027s text is to be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eiterator\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class. The baseline of the first character is at position (x, y) in User Space. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - the iterator whose text is to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate where the iterator\u0027s text is to be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate where the iterator\u0027s text is to be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eiterator\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.font.GlyphVector",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawGlyphVector",
      "comment": "Renders the text of the specified GlyphVector using the Graphics2D context\u0027s rendering attributes. The rendering attributes applied include the Clip, Transform, Paint, and Composite attributes. The GlyphVector specifies individual glyphs from a Font. The GlyphVector can also contain the glyph positions. This is the fastest way to render a set of characters to the screen.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003eFont.createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphVector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGlyphVector\u003c/code\u003e to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x position in User Space where the glyphs should be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y position in User Space where the glyphs should be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eg\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fill",
      "comment": "Fills the interior of a Shape using the settings of the Graphics2D context. The rendering attributes applied include the Clip, Transform, Paint, and Composite.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to be filled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "rect"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "onStroke"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "hit",
      "comment": "Checks whether or not the specified Shape intersects the specified Rectangle, which is in device space. If onStroke is false, this method checks whether or not the interior of the specified Shape intersects the specified Rectangle. If onStroke is true, this method checks whether or not the Stroke of the specified Shape outline intersects the specified Rectangle. The rendering attributes taken into account include the Clip, Transform, and Stroke attributes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)\"\u003e\u003ccode\u003esetStroke(java.awt.Stroke)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#fill(java.awt.Shape)\"\u003e\u003ccode\u003efill(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#draw(java.awt.Shape)\"\u003e\u003ccode\u003edraw(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erect\u003c/code\u003e - the area in device space to check for a hit",
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to check for a hit",
          "\u003ccode\u003eonStroke\u003c/code\u003e - flag used to choose between testing the stroked or the filled shape. If the flag is \n\u003ccode\u003etrue\u003c/code\u003e, the \n\u003ccode\u003eStroke\u003c/code\u003e outline is tested. If the flag is \n\u003ccode\u003efalse\u003c/code\u003e, the filled \n\u003ccode\u003eShape\u003c/code\u003e is tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there is a hit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsConfiguration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDeviceConfiguration",
      "comment": "Returns the device configuration associated with this Graphics2D.",
      "tagMap": {
        "return": [
          "the device configuration of this \n\u003ccode\u003eGraphics2D\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Composite",
            "type": "Class"
          },
          "field": {
            "name": "comp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setComposite",
      "comment": "Sets the Composite for the Graphics2D context. The Composite is used in all drawing methods such as drawImage, drawString, draw, and fill. It specifies how new pixels are to be combined with the existing pixels on the graphics device during the rendering process. If this Graphics2D context is drawing to a Component on the display screen and the Composite is a custom object rather than an instance of the AlphaComposite class, and if there is a security manager, its checkPermission method is called with an AWTPermission(\"readDisplayPixels\") permission.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setXORMode(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setXORMode(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setPaintMode()\"\u003e\u003ccode\u003eGraphics.setPaintMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getComposite()\"\u003e\u003ccode\u003egetComposite()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAlphaComposite\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the \n\u003ccode\u003eComposite\u003c/code\u003e object to be used for rendering"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a custom \n\u003ccode\u003eComposite\u003c/code\u003e object is being used to render to the screen and a security manager is set and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method does not allow the operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Paint",
            "type": "Class"
          },
          "field": {
            "name": "paint"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setPaint",
      "comment": "Sets the Paint attribute for the Graphics2D context. Calling this method with a null Paint object does not have any effect on the current Paint attribute of this Graphics2D.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getPaint()\"\u003e\u003ccode\u003egetPaint()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GradientPaint.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGradientPaint\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/TexturePaint.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eTexturePaint\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epaint\u003c/code\u003e - the \n\u003ccode\u003ePaint\u003c/code\u003e object to be used to generate color during the rendering process, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Stroke",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setStroke",
      "comment": "Sets the Stroke for the Graphics2D context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/BasicStroke.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eBasicStroke\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getStroke()\"\u003e\u003ccode\u003egetStroke()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eStroke\u003c/code\u003e object to be used to stroke a \n\u003ccode\u003eShape\u003c/code\u003e during the rendering process"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.RenderingHints$Key",
            "type": "Class"
          },
          "field": {
            "name": "hintKey"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "hintValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setRenderingHint",
      "comment": "Sets the value of a single preference for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getRenderingHint(java.awt.RenderingHints.Key)\"\u003e\u003ccode\u003egetRenderingHint(RenderingHints.Key)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehintKey\u003c/code\u003e - the key of the hint to be set.",
          "\u003ccode\u003ehintValue\u003c/code\u003e - the value indicating preferences for the specified hint category."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.RenderingHints$Key",
            "type": "Class"
          },
          "field": {
            "name": "hintKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRenderingHint",
      "comment": "Returns the value of a single preference for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)\"\u003e\u003ccode\u003esetRenderingHint(RenderingHints.Key, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehintKey\u003c/code\u003e - the key corresponding to the hint to get."
        ],
        "return": [
          "an object representing the value for the specified hint key. Some of the keys and their associated values are defined in the \n\u003ccode\u003eRenderingHints\u003c/code\u003e class."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "hints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setRenderingHints",
      "comment": "Replaces the values of all preferences for the rendering algorithms with the specified hints. The existing values for all rendering hints are discarded and the new set of known hints and values are initialized from the specified Map object. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getRenderingHints()\"\u003e\u003ccode\u003egetRenderingHints()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehints\u003c/code\u003e - the rendering hints to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "hints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "addRenderingHints",
      "comment": "Sets the values of an arbitrary number of preferences for the rendering algorithms. Only values for the rendering hints that are present in the specified Map object are modified. All other preferences not present in the specified object are left unmodified. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehints\u003c/code\u003e - the rendering hints to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.RenderingHints",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRenderingHints",
      "comment": "Gets the preferences for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Returns all of the hint key/value pairs that were ever specified in one operation. Refer to the RenderingHints class for definitions of some common keys and values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setRenderingHints(java.util.Map)\"\u003e\u003ccode\u003esetRenderingHints(Map)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to an instance of \n\u003ccode\u003eRenderingHints\u003c/code\u003e that contains the current preferences."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "translate",
      "comment": "Translates the origin of the Graphics2D context to the point (x, y) in the current coordinate system. Modifies the Graphics2D context so that its new origin corresponds to the point (x, y) in the Graphics2D context\u0027s former coordinate system. All coordinates used in subsequent rendering operations on this graphics context are relative to this new origin.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#translate(int,int)\"\u003etranslate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified x coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the specified y coordinate"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "tx"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ty"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "translate",
      "comment": "Concatenates the current Graphics2D Transform with a translation transform. Subsequent rendering is translated by the specified distance relative to the previous position. This is equivalent to calling transform(T), where T is an AffineTransform represented by the following matrix:           [   1    0    tx  ]\n          [   0    1    ty  ]\n          [   0    0    1   ]",
      "tagMap": {
        "param": [
          "\u003ccode\u003etx\u003c/code\u003e - the distance to translate along the x-axis",
          "\u003ccode\u003ety\u003c/code\u003e - the distance to translate along the y-axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "theta"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rotate",
      "comment": "Concatenates the current Graphics2D Transform with a rotation transform. Subsequent rendering is rotated by the specified radians relative to the previous origin. This is equivalent to calling transform(R), where R is an AffineTransform represented by the following matrix:           [   cos(theta)    -sin(theta)    0   ]\n          [   sin(theta)     cos(theta)    0   ]\n          [       0              0         1   ]\n Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etheta\u003c/code\u003e - the angle of rotation in radians"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "theta"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rotate",
      "comment": "Concatenates the current Graphics2D Transform with a translated rotation transform. Subsequent rendering is transformed by a transform which is constructed by translating to the specified location, rotating by the specified radians, and translating back by the same amount as the original translation. This is equivalent to the following sequence of calls:           translate(x, y);\n          rotate(theta);\n          translate(-x, -y);\n Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etheta\u003c/code\u003e - the angle of rotation in radians",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the origin of the rotation",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the origin of the rotation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "sx"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "sy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "scale",
      "comment": "Concatenates the current Graphics2D Transform with a scaling transformation Subsequent rendering is resized according to the specified scaling factors relative to the previous scaling. This is equivalent to calling transform(S), where S is an AffineTransform represented by the following matrix:           [   sx   0    0   ]\n          [   0    sy   0   ]\n          [   0    0    1   ]",
      "tagMap": {
        "param": [
          "\u003ccode\u003esx\u003c/code\u003e - the amount by which X coordinates in subsequent rendering operations are multiplied relative to previous rendering operations.",
          "\u003ccode\u003esy\u003c/code\u003e - the amount by which Y coordinates in subsequent rendering operations are multiplied relative to previous rendering operations."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "shx"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "shy"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "shear",
      "comment": "Concatenates the current Graphics2D Transform with a shearing transform. Subsequent renderings are sheared by the specified multiplier relative to the previous position. This is equivalent to calling transform(SH), where SH is an AffineTransform represented by the following matrix:           [   1   shx   0   ]\n          [  shy   1    0   ]\n          [   0    0    1   ]",
      "tagMap": {
        "param": [
          "\u003ccode\u003eshx\u003c/code\u003e - the multiplier by which coordinates are shifted in the positive X axis direction as a function of their Y coordinate",
          "\u003ccode\u003eshy\u003c/code\u003e - the multiplier by which coordinates are shifted in the positive Y axis direction as a function of their X coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "Tx"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "transform",
      "comment": "Composes an AffineTransform object with the Transform in this Graphics2D according to the rule last-specified-first-applied. If the current Transform is Cx, the result of composition with Tx is a new Transform Cx\u0027. Cx\u0027 becomes the current Transform for this Graphics2D. Transforming a point p by the updated Transform Cx\u0027 is equivalent to first transforming p by Tx and then transforming the result by the original Transform Cx. In other words, Cx\u0027(p) \u003d Cx(Tx(p)). A copy of the Tx is made, if necessary, so further modifications to Tx do not affect rendering.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eTx\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e object to be composed with the current \n\u003ccode\u003eTransform\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "Tx"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setTransform",
      "comment": "Overwrites the Transform in the Graphics2D context. WARNING: This method should never be used to apply a new coordinate transform on top of an existing transform because the Graphics2D might already have a transform that is needed for other purposes, such as rendering Swing components or applying a scaling transformation to adjust for the resolution of a printer. To add a coordinate transform, use the transform, rotate, scale, or shear methods. The setTransform method is intended only for restoring the original Graphics2D transform after rendering, as shown in this example:  // Get the current transform\n AffineTransform saveAT \u003d g2.getTransform();\n // Perform transformation\n g2d.transform(...);\n // Render\n g2d.draw(...);\n // Restore original transform\n g2d.setTransform(saveAT);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getTransform()\"\u003e\u003ccode\u003egetTransform()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eTx\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e that was retrieved from the \n\u003ccode\u003egetTransform\u003c/code\u003e method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTransform",
      "comment": "Returns a copy of the current Transform in the Graphics2D context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eAffineTransform\u003c/code\u003e in the \n\u003ccode\u003eGraphics2D\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Paint",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPaint",
      "comment": "Returns the current Paint of the Graphics2D context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Paint\u003c/code\u003e, which defines a color or pattern."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Composite",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getComposite",
      "comment": "Returns the current Composite in the Graphics2D context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Composite\u003c/code\u003e, which defines a compositing style."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "color"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setBackground",
      "comment": "Sets the background color for the Graphics2D context. The background color is used for clearing a region. When a Graphics2D is constructed for a Component, the background color is inherited from the Component. Setting the background color in the Graphics2D context only affects the subsequent clearRect calls and not the background color of the Component. To change the background of the Component, use appropriate methods of the Component.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getBackground()\"\u003e\u003ccode\u003egetBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clearRect(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.clearRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolor\u003c/code\u003e - the background color that is used in subsequent calls to \n\u003ccode\u003eclearRect\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBackground",
      "comment": "Returns the background color used for clearing a region.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003esetBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Color\u003c/code\u003e, which defines the background color."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Stroke",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getStroke",
      "comment": "Returns the current Stroke in the Graphics2D context.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)\"\u003e\u003ccode\u003esetStroke(java.awt.Stroke)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Stroke\u003c/code\u003e, which defines the line style."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "clip",
      "comment": "Intersects the current Clip with the interior of the specified Shape and sets the Clip to the resulting intersection. The specified Shape is transformed with the current Graphics2D Transform before being intersected with the current Clip. This method is used to make the current Clip smaller. To make the Clip larger, use setClip. The user clip modified by this method is independent of the clipping associated with device bounds and visibility. If no clip has previously been set, or if the clip has been cleared using setClip with a null argument, the specified Shape becomes the new user clip.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to be intersected with the current \n\u003ccode\u003eClip\u003c/code\u003e. If \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, this method clears the current \n\u003ccode\u003eClip\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.FontRenderContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFontRenderContext",
      "comment": "Get the rendering context of the Font within this Graphics2D context. The FontRenderContext encapsulates application hints such as anti-aliasing and fractional metrics, as well as target device specific information such as dots-per-inch. This information should be provided by the application when using objects that perform typographical formatting, such as Font and TextLayout. This information should also be provided by applications that perform their own layout and need accurate measurements of various characteristics of glyphs such as advance and line height when various rendering hints have been applied to the text rendering.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003eFont.createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to an instance of FontRenderContext."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new Graphics2D object. Since Graphics2D is an abstract class, and since it must be customized by subclasses for different output devices, Graphics2D objects cannot be created directly. Instead, Graphics2D objects must be obtained from another Graphics2D object, created by a Component, or obtained from images such as BufferedImage objects.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getGraphics()\"\u003e\u003ccode\u003eComponent.getGraphics()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#create()\"\u003e\u003ccode\u003eGraphics.create()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.Graphics2D",
  "comment": "This \n\u003ccode\u003eGraphics2D\u003c/code\u003e class extends the \n\u003ca href\u003d\"Graphics.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphics\u003c/code\u003e\u003c/a\u003e class to provide more sophisticated control over geometry, coordinate transformations, color management, and text layout. This is the fundamental class for rendering 2-dimensional shapes, text and images on the Java(tm) platform. \n\u003ch2\u003eCoordinate Spaces\u003c/h2\u003e All coordinates passed to a \n\u003ccode\u003eGraphics2D\u003c/code\u003e object are specified in a device-independent coordinate system called User Space, which is used by applications. The \n\u003ccode\u003eGraphics2D\u003c/code\u003e object contains an \n\u003ca href\u003d\"geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e object as part of its rendering state that defines how to convert coordinates from user space to device-dependent coordinates in Device Space. \n\u003cp\u003e Coordinates in device space usually refer to individual device pixels and are aligned on the infinitely thin gaps between these pixels. Some \u003ccode\u003eGraphics2D\u003c/code\u003e objects can be used to capture rendering operations for storage into a graphics metafile for playback on a concrete device of unknown physical resolution at a later time. Since the resolution might not be known when the rendering operations are captured, the \u003ccode\u003eGraphics2D Transform\u003c/code\u003e is set up to transform user coordinates to a virtual device space that approximates the expected resolution of the target device. Further transformations might need to be applied at playback time if the estimate is incorrect. \u003c/p\u003e\n\u003cp\u003e Some of the operations performed by the rendering attribute objects occur in the device space, but all \u003ccode\u003eGraphics2D\u003c/code\u003e methods take user space coordinates. \u003c/p\u003e\n\u003cp\u003e Every \u003ccode\u003eGraphics2D\u003c/code\u003e object is associated with a target that defines where rendering takes place. A \u003ca href\u003d\"GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e object defines the characteristics of the rendering target, such as pixel format and resolution. The same rendering target is used throughout the life of a \u003ccode\u003eGraphics2D\u003c/code\u003e object. \u003c/p\u003e\n\u003cp\u003e When creating a \u003ccode\u003eGraphics2D\u003c/code\u003e object, the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e specifies the \u003ca id\u003d\"deftransform\"\u003edefault transform\u003c/a\u003e for the target of the \u003ccode\u003eGraphics2D\u003c/code\u003e (a \u003ca href\u003d\"Component.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponent\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e). This default transform maps the user space coordinate system to screen and printer device coordinates such that the origin maps to the upper left hand corner of the target region of the device with increasing X coordinates extending to the right and increasing Y coordinates extending downward. The scaling of the default transform is set to identity for those devices that are close to 72 dpi, such as screen devices. The scaling of the default transform is set to approximately 72 user space coordinates per square inch for high resolution devices, such as printers. For image buffers, the default transform is the \u003ccode\u003eIdentity\u003c/code\u003e transform. \u003c/p\u003e\n\u003ch2\u003eRendering Process\u003c/h2\u003e The Rendering Process can be broken down into four phases that are controlled by the \n\u003ccode\u003eGraphics2D\u003c/code\u003e rendering attributes. The renderer can optimize many of these steps, either by caching the results for future calls, by collapsing multiple virtual steps into a single operation, or by recognizing various attributes as common simple cases that can be eliminated by modifying other parts of the operation. \n\u003cp\u003e The steps in the rendering process are: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e Determine what to render. \u003c/li\u003e\n \u003cli\u003e Constrain the rendering operation to the current \u003ccode\u003eClip\u003c/code\u003e. The \u003ccode\u003eClip\u003c/code\u003e is specified by a \u003ca href\u003d\"Shape.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eShape\u003c/code\u003e\u003c/a\u003e in user space and is controlled by the program using the various clip manipulation methods of \u003ccode\u003eGraphics\u003c/code\u003e and \u003ccode\u003eGraphics2D\u003c/code\u003e. This \u003ci\u003euser clip\u003c/i\u003e is transformed into device space by the current \u003ccode\u003eTransform\u003c/code\u003e and combined with the \u003ci\u003edevice clip\u003c/i\u003e, which is defined by the visibility of windows and device extents. The combination of the user clip and device clip defines the \u003ci\u003ecomposite clip\u003c/i\u003e, which determines the final clipping region. The user clip is not modified by the rendering system to reflect the resulting composite clip. \u003c/li\u003e\n \u003cli\u003e Determine what colors to render. \u003c/li\u003e\n \u003cli\u003e Apply the colors to the destination drawing surface using the current \u003ca href\u003d\"Composite.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eComposite\u003c/code\u003e\u003c/a\u003e attribute in the \u003ccode\u003eGraphics2D\u003c/code\u003e context. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cbr\u003e The three types of rendering operations, along with details of each of their particular rendering processes are: \n\u003col\u003e \n \u003cli\u003e \u003cb\u003e\u003ca id\u003d\"rendershape\"\u003e\u003ccode\u003eShape\u003c/code\u003e operations\u003c/a\u003e\u003c/b\u003e \n  \u003col\u003e \n   \u003cli\u003e If the operation is a \u003ccode\u003edraw(Shape)\u003c/code\u003e operation, then the \u003ca href\u003d\"Stroke.html#createStrokedShape(java.awt.Shape)\"\u003e\u003ccode\u003ecreateStrokedShape\u003c/code\u003e\u003c/a\u003e method on the current \u003ca href\u003d\"Stroke.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eStroke\u003c/code\u003e\u003c/a\u003e attribute in the \u003ccode\u003eGraphics2D\u003c/code\u003e context is used to construct a new \u003ccode\u003eShape\u003c/code\u003e object that contains the outline of the specified \u003ccode\u003eShape\u003c/code\u003e. \u003c/li\u003e\n   \u003cli\u003e The \u003ccode\u003eShape\u003c/code\u003e is transformed from user space to device space using the current \u003ccode\u003eTransform\u003c/code\u003e in the \u003ccode\u003eGraphics2D\u003c/code\u003e context. \u003c/li\u003e\n   \u003cli\u003e The outline of the \u003ccode\u003eShape\u003c/code\u003e is extracted using the \u003ca href\u003d\"Shape.html#getPathIterator(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003egetPathIterator\u003c/code\u003e\u003c/a\u003e method of \u003ccode\u003eShape\u003c/code\u003e, which returns a \u003ca href\u003d\"geom/PathIterator.html\" title\u003d\"interface in java.awt.geom\"\u003e\u003ccode\u003ePathIterator\u003c/code\u003e\u003c/a\u003e object that iterates along the boundary of the \u003ccode\u003eShape\u003c/code\u003e. \u003c/li\u003e\n   \u003cli\u003e If the \u003ccode\u003eGraphics2D\u003c/code\u003e object cannot handle the curved segments that the \u003ccode\u003ePathIterator\u003c/code\u003e object returns then it can call the alternate \u003ca href\u003d\"Shape.html#getPathIterator(java.awt.geom.AffineTransform,double)\"\u003e\u003ccode\u003egetPathIterator\u003c/code\u003e\u003c/a\u003e method of \u003ccode\u003eShape\u003c/code\u003e, which flattens the \u003ccode\u003eShape\u003c/code\u003e. \u003c/li\u003e\n   \u003cli\u003e The current \u003ca href\u003d\"Paint.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003ePaint\u003c/code\u003e\u003c/a\u003e in the \u003ccode\u003eGraphics2D\u003c/code\u003e context is queried for a \u003ca href\u003d\"PaintContext.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003ePaintContext\u003c/code\u003e\u003c/a\u003e, which specifies the colors to render in device space. \u003c/li\u003e\n  \u003c/ol\u003e \u003c/li\u003e\n \u003cli\u003e \u003cb\u003e\u003ca id\u003d\"rendertext\"\u003eText operations\u003c/a\u003e\u003c/b\u003e \n  \u003col\u003e \n   \u003cli\u003e The following steps are used to determine the set of glyphs required to render the indicated \u003ccode\u003eString\u003c/code\u003e: \n    \u003col\u003e \n     \u003cli\u003e If the argument is a \u003ccode\u003eString\u003c/code\u003e, then the current \u003ccode\u003eFont\u003c/code\u003e in the \u003ccode\u003eGraphics2D\u003c/code\u003e context is asked to convert the Unicode characters in the \u003ccode\u003eString\u003c/code\u003e into a set of glyphs for presentation with whatever basic layout and shaping algorithms the font implements. \u003c/li\u003e\n     \u003cli\u003e If the argument is an \u003ca href\u003d\"../../../java.base/java/text/AttributedCharacterIterator.html\" title\u003d\"interface in java.text\"\u003e\u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e\u003c/a\u003e, the iterator is asked to convert itself to a \u003ca href\u003d\"font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e using its embedded font attributes. The \u003ccode\u003eTextLayout\u003c/code\u003e implements more sophisticated glyph layout algorithms that perform Unicode bi-directional layout adjustments automatically for multiple fonts of differing writing directions. \u003c/li\u003e\n     \u003cli\u003e If the argument is a \u003ca href\u003d\"font/GlyphVector.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphVector\u003c/code\u003e\u003c/a\u003e, then the \u003ccode\u003eGlyphVector\u003c/code\u003e object already contains the appropriate font-specific glyph codes with explicit coordinates for the position of each glyph. \u003c/li\u003e\n    \u003c/ol\u003e \u003c/li\u003e\n   \u003cli\u003e The current \u003ccode\u003eFont\u003c/code\u003e is queried to obtain outlines for the indicated glyphs. These outlines are treated as shapes in user space relative to the position of each glyph that was determined in step 1. \u003c/li\u003e\n   \u003cli\u003e The character outlines are filled as indicated above under \u003ca href\u003d\"#rendershape\"\u003e\u003ccode\u003eShape\u003c/code\u003e operations\u003c/a\u003e. \u003c/li\u003e\n   \u003cli\u003e The current \u003ccode\u003ePaint\u003c/code\u003e is queried for a \u003ccode\u003ePaintContext\u003c/code\u003e, which specifies the colors to render in device space. \u003c/li\u003e\n  \u003c/ol\u003e \u003c/li\u003e\n \u003cli\u003e \u003cb\u003e\u003ca id\u003d\"renderingimage\"\u003e\u003ccode\u003eImage\u003c/code\u003e Operations\u003c/a\u003e\u003c/b\u003e \n  \u003col\u003e \n   \u003cli\u003e The region of interest is defined by the bounding box of the source \u003ccode\u003eImage\u003c/code\u003e. This bounding box is specified in Image Space, which is the \u003ccode\u003eImage\u003c/code\u003e object\u0027s local coordinate system. \u003c/li\u003e\n   \u003cli\u003e If an \u003ccode\u003eAffineTransform\u003c/code\u003e is passed to \u003ca href\u003d\"#drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003edrawImage(Image, AffineTransform, ImageObserver)\u003c/code\u003e\u003c/a\u003e, the \u003ccode\u003eAffineTransform\u003c/code\u003e is used to transform the bounding box from image space to user space. If no \u003ccode\u003eAffineTransform\u003c/code\u003e is supplied, the bounding box is treated as if it is already in user space. \u003c/li\u003e\n   \u003cli\u003e The bounding box of the source \u003ccode\u003eImage\u003c/code\u003e is transformed from user space into device space using the current \u003ccode\u003eTransform\u003c/code\u003e. Note that the result of transforming the bounding box does not necessarily result in a rectangular region in device space. \u003c/li\u003e\n   \u003cli\u003e The \u003ccode\u003eImage\u003c/code\u003e object determines what colors to render, sampled according to the source to destination coordinate mapping specified by the current \u003ccode\u003eTransform\u003c/code\u003e and the optional image transform. \u003c/li\u003e\n  \u003c/ol\u003e \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eDefault Rendering Attributes\u003c/h2\u003e The default values for the \n\u003ccode\u003eGraphics2D\u003c/code\u003e rendering attributes are: \n\u003cdl\u003e \n \u003cdt\u003e\n  \u003ci\u003e\u003ccode\u003ePaint\u003c/code\u003e\u003c/i\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  The color of the \n  \u003ccode\u003eComponent\u003c/code\u003e. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ci\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/i\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  The \n  \u003ccode\u003eFont\u003c/code\u003e of the \n  \u003ccode\u003eComponent\u003c/code\u003e. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ci\u003e\u003ccode\u003eStroke\u003c/code\u003e\u003c/i\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  A square pen with a linewidth of 1, no dashing, miter segment joins and square end caps. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ci\u003e\u003ccode\u003eTransform\u003c/code\u003e\u003c/i\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  The \n  \u003ca href\u003d\"GraphicsConfiguration.html#getDefaultTransform()\"\u003e\u003ccode\u003egetDefaultTransform\u003c/code\u003e\u003c/a\u003e for the \n  \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e of the \n  \u003ccode\u003eComponent\u003c/code\u003e. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ci\u003e\u003ccode\u003eComposite\u003c/code\u003e\u003c/i\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  The \n  \u003ca href\u003d\"AlphaComposite.html#SRC_OVER\"\u003e\u003ccode\u003eAlphaComposite.SRC_OVER\u003c/code\u003e\u003c/a\u003e rule. \n \u003c/dd\u003e\n \u003cdt\u003e\n  \u003ci\u003e\u003ccode\u003eClip\u003c/code\u003e\u003c/i\u003e \n \u003c/dt\u003e\n \u003cdd\u003e\n  No rendering \n  \u003ccode\u003eClip\u003c/code\u003e, the output is clipped to the \n  \u003ccode\u003eComponent\u003c/code\u003e. \n \u003c/dd\u003e\n\u003c/dl\u003e \n\u003ch2\u003eRendering Compatibility Issues\u003c/h2\u003e The JDK(tm) 1.1 rendering model is based on a pixelization model that specifies that coordinates are infinitely thin, lying between the pixels. Drawing operations are performed using a one-pixel wide pen that fills the pixel below and to the right of the anchor point on the path. The JDK 1.1 rendering model is consistent with the capabilities of most of the existing class of platform renderers that need to resolve integer coordinates to a discrete pen that must fall completely on a specified number of pixels. \n\u003cp\u003e The Java 2D(tm) (Java(tm) 2 platform) API supports antialiasing renderers. A pen with a width of one pixel does not need to fall completely on pixel N as opposed to pixel N+1. The pen can fall partially on both pixels. It is not necessary to choose a bias direction for a wide pen since the blending that occurs along the pen traversal edges makes the sub-pixel position of the pen visible to the user. On the other hand, when antialiasing is turned off by setting the \u003ca href\u003d\"RenderingHints.html#KEY_ANTIALIASING\"\u003e\u003ccode\u003eKEY_ANTIALIASING\u003c/code\u003e\u003c/a\u003e hint key to the \u003ca href\u003d\"RenderingHints.html#VALUE_ANTIALIAS_OFF\"\u003e\u003ccode\u003eVALUE_ANTIALIAS_OFF\u003c/code\u003e\u003c/a\u003e hint value, the renderer might need to apply a bias to determine which pixel to modify when the pen is straddling a pixel boundary, such as when it is drawn along an integer coordinate in device space. While the capabilities of an antialiasing renderer make it no longer necessary for the rendering model to specify a bias for the pen, it is desirable for the antialiasing and non-antialiasing renderers to perform similarly for the common cases of drawing one-pixel wide horizontal and vertical lines on the screen. To ensure that turning on antialiasing by setting the \u003ca href\u003d\"RenderingHints.html#KEY_ANTIALIASING\"\u003e\u003ccode\u003eKEY_ANTIALIASING\u003c/code\u003e\u003c/a\u003e hint key to \u003ca href\u003d\"RenderingHints.html#VALUE_ANTIALIAS_ON\"\u003e\u003ccode\u003eVALUE_ANTIALIAS_ON\u003c/code\u003e\u003c/a\u003e does not cause such lines to suddenly become twice as wide and half as opaque, it is desirable to have the model specify a path for such lines so that they completely cover a particular set of pixels to help increase their crispness. \u003c/p\u003e\n\u003cp\u003e Java 2D API maintains compatibility with JDK 1.1 rendering behavior, such that legacy operations and existing renderer behavior is unchanged under Java 2D API. Legacy methods that map onto general \u003ccode\u003edraw\u003c/code\u003e and \u003ccode\u003efill\u003c/code\u003e methods are defined, which clearly indicates how \u003ccode\u003eGraphics2D\u003c/code\u003e extends \u003ccode\u003eGraphics\u003c/code\u003e based on settings of \u003ccode\u003eStroke\u003c/code\u003e and \u003ccode\u003eTransform\u003c/code\u003e attributes and rendering hints. The definition performs identically under default attribute settings. For example, the default \u003ccode\u003eStroke\u003c/code\u003e is a \u003ccode\u003eBasicStroke\u003c/code\u003e with a width of 1 and no dashing and the default Transform for screen drawing is an Identity transform. \u003c/p\u003e\n\u003cp\u003e The following two rules provide predictable rendering behavior whether aliasing or antialiasing is being used. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e Device coordinates are defined to be between device pixels which avoids any inconsistent results between aliased and antialiased rendering. If coordinates were defined to be at a pixel\u0027s center, some of the pixels covered by a shape, such as a rectangle, would only be half covered. With aliased rendering, the half covered pixels would either be rendered inside the shape or outside the shape. With anti-aliased rendering, the pixels on the entire edge of the shape would be half covered. On the other hand, since coordinates are defined to be between pixels, a shape like a rectangle would have no half covered pixels, whether or not it is rendered using antialiasing. \u003c/li\u003e\n \u003cli\u003e Lines and paths stroked using the \u003ccode\u003eBasicStroke\u003c/code\u003e object may be \"normalized\" to provide consistent rendering of the outlines when positioned at various points on the drawable and whether drawn with aliased or antialiased rendering. This normalization process is controlled by the \u003ca href\u003d\"RenderingHints.html#KEY_STROKE_CONTROL\"\u003e\u003ccode\u003eKEY_STROKE_CONTROL\u003c/code\u003e\u003c/a\u003e hint. The exact normalization algorithm is not specified, but the goals of this normalization are to ensure that lines are rendered with consistent visual appearance regardless of how they fall on the pixel grid and to promote more solid horizontal and vertical lines in antialiased mode so that they resemble their non-antialiased counterparts more closely. A typical normalization step might promote antialiased line endpoints to pixel centers to reduce the amount of blending or adjust the subpixel positioning of non-antialiased lines so that the floating point line widths round to even or odd pixel counts with equal likelihood. This process can move endpoints by up to half a pixel (usually towards positive infinity along both axes) to promote these consistent results. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following definitions of general legacy methods perform identically to previously specified behavior under default attribute settings: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e For \u003ccode\u003efill\u003c/code\u003e operations, including \u003ccode\u003efillRect\u003c/code\u003e, \u003ccode\u003efillRoundRect\u003c/code\u003e, \u003ccode\u003efillOval\u003c/code\u003e, \u003ccode\u003efillArc\u003c/code\u003e, \u003ccode\u003efillPolygon\u003c/code\u003e, and \u003ccode\u003eclearRect\u003c/code\u003e, \u003ca href\u003d\"#fill(java.awt.Shape)\"\u003e\u003ccode\u003efill\u003c/code\u003e\u003c/a\u003e can now be called with the desired \u003ccode\u003eShape\u003c/code\u003e. For example, when filling a rectangle: \u003cpre\u003e fill(new Rectangle(x, y, w, h));\n \u003c/pre\u003e is called. \u003c/li\u003e\n \u003cli\u003e Similarly, for draw operations, including \u003ccode\u003edrawLine\u003c/code\u003e, \u003ccode\u003edrawRect\u003c/code\u003e, \u003ccode\u003edrawRoundRect\u003c/code\u003e, \u003ccode\u003edrawOval\u003c/code\u003e, \u003ccode\u003edrawArc\u003c/code\u003e, \u003ccode\u003edrawPolyline\u003c/code\u003e, and \u003ccode\u003edrawPolygon\u003c/code\u003e, \u003ca href\u003d\"#draw(java.awt.Shape)\"\u003e\u003ccode\u003edraw\u003c/code\u003e\u003c/a\u003e can now be called with the desired \u003ccode\u003eShape\u003c/code\u003e. For example, when drawing a rectangle: \u003cpre\u003e draw(new Rectangle(x, y, w, h));\n \u003c/pre\u003e is called. \u003c/li\u003e\n \u003cli\u003e The \u003ccode\u003edraw3DRect\u003c/code\u003e and \u003ccode\u003efill3DRect\u003c/code\u003e methods were implemented in terms of the \u003ccode\u003edrawLine\u003c/code\u003e and \u003ccode\u003efillRect\u003c/code\u003e methods in the \u003ccode\u003eGraphics\u003c/code\u003e class which would predicate their behavior upon the current \u003ccode\u003eStroke\u003c/code\u003e and \u003ccode\u003ePaint\u003c/code\u003e objects in a \u003ccode\u003eGraphics2D\u003c/code\u003e context. This class overrides those implementations with versions that use the current \u003ccode\u003eColor\u003c/code\u003e exclusively, overriding the current \u003ccode\u003ePaint\u003c/code\u003e and which uses \u003ccode\u003efillRect\u003c/code\u003e to describe the exact same behavior as the preexisting methods regardless of the setting of the current \u003ccode\u003eStroke\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e The \n\u003ccode\u003eGraphics\u003c/code\u003e class defines only the \n\u003ccode\u003esetColor\u003c/code\u003e method to control the color to be painted. Since the Java 2D API extends the \n\u003ccode\u003eColor\u003c/code\u003e object to implement the new \n\u003ccode\u003ePaint\u003c/code\u003e interface, the existing \n\u003ccode\u003esetColor\u003c/code\u003e method is now a convenience method for setting the current \n\u003ccode\u003ePaint\u003c/code\u003e attribute to a \n\u003ccode\u003eColor\u003c/code\u003e object. \n\u003ccode\u003esetColor(c)\u003c/code\u003e is equivalent to \n\u003ccode\u003esetPaint(c)\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eGraphics\u003c/code\u003e class defines two methods for controlling how colors are applied to the destination. \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e The \u003ccode\u003esetPaintMode\u003c/code\u003e method is implemented as a convenience method to set the default \u003ccode\u003eComposite\u003c/code\u003e, equivalent to \u003ccode\u003esetComposite(new AlphaComposite.SrcOver)\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e The \u003ccode\u003esetXORMode(Color xorcolor)\u003c/code\u003e method is implemented as a convenience method to set a special \u003ccode\u003eComposite\u003c/code\u003e object that ignores the \u003ccode\u003eAlpha\u003c/code\u003e components of source colors and sets the destination color to the value: \u003cpre\u003e dstpixel \u003d (PixelOf(srccolor) ^ PixelOf(xorcolor) ^ dstpixel);\n \u003c/pre\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}