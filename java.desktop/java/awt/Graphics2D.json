{
  "packageName": "java.awt",
  "simpleName": "Graphics2D",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.Graphics",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "raised",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "draw3DRect",
      "comment": "Draws a 3-D highlighted outline of the specified rectangle. The edges of the rectangle are highlighted so that they appear to be beveled and lit from the upper left corner. The colors used for the highlighting effect are determined based on the current color. The resulting rectangle covers an area that is width + 1 pixels wide by height + 1 pixels tall. This method uses the current Color exclusively and ignores the current Paint.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fill3DRect(int,int,int,int,boolean)\"\u003e\u003ccode\u003eGraphics.fill3DRect(int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#draw3DRect(int,int,int,int,boolean)\"\u003edraw3DRect\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be drawn.",
          "\u003ccode\u003eraised\u003c/code\u003e - a boolean that determines whether the rectangle appears to be raised above the surface or sunk into the surface."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "raised",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fill3DRect",
      "comment": "Paints a 3-D highlighted rectangle filled with the current color. The edges of the rectangle are highlighted so that it appears as if the edges were beveled and lit from the upper left corner. The colors used for the highlighting effect and for filling are determined from the current Color. This method uses the current Color exclusively and ignores the current Paint.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#draw3DRect(int,int,int,int,boolean)\"\u003e\u003ccode\u003eGraphics.draw3DRect(int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fill3DRect(int,int,int,int,boolean)\"\u003efill3DRect\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the rectangle to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the rectangle to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be filled.",
          "\u003ccode\u003eraised\u003c/code\u003e - a boolean value that determines whether the rectangle appears to be raised above the surface or etched into the surface."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "draw",
      "comment": "Strokes the outline of a Shape using the settings of the current Graphics2D context. The rendering attributes applied include the Clip, Transform, Paint, Composite and Stroke attributes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)\"\u003e\u003ccode\u003esetStroke(java.awt.Stroke)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to be rendered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "xform",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "obs",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Renders an image, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003exform\u003c/code\u003e - the transformation from image space into user space",
          "\u003ccode\u003eobs\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e to be notified as more of the \n\u003ccode\u003eImage\u003c/code\u003e is converted"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eImage\u003c/code\u003e is fully loaded and completely rendered, or if it\u0027s null; \n\u003ccode\u003efalse\u003c/code\u003e if the \n\u003ccode\u003eImage\u003c/code\u003e is still being loaded."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.BufferedImage",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.BufferedImageOp",
            "type": "Class"
          },
          "name": "op",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Renders a BufferedImage that is filtered with a BufferedImageOp. The rendering attributes applied include the Clip, Transform and Composite attributes. This is equivalent to:  img1 \u003d op.filter(img, null);\n drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - the filter to be applied to the image before rendering",
          "\u003ccode\u003eimg\u003c/code\u003e - the specified \n\u003ccode\u003eBufferedImage\u003c/code\u003e to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the location in user space where the upper left corner of the image is rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the location in user space where the upper left corner of the image is rendered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.RenderedImage",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "xform",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawRenderedImage",
      "comment": "Renders a RenderedImage, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the image to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003exform\u003c/code\u003e - the transformation from image space into user space"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.renderable.RenderableImage",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "xform",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawRenderableImage",
      "comment": "Renders a RenderableImage, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible. Rendering hints set on the Graphics2D object might be used in rendering the RenderableImage. If explicit control is required over specific hints recognized by a specific RenderableImage, or if knowledge of which hints are used is required, then a RenderedImage should be obtained directly from the RenderableImage and rendered using drawRenderedImage.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003edrawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the image to be rendered. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003exform\u003c/code\u003e - the transformation from image space into user space"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified String, using the current text attribute state in the Graphics2D context. The baseline of the first character is at position (x, y) in the User Space. The rendering attributes applied include the Clip, Transform, Paint, Font and Composite attributes. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawBytes(byte%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003eGraphics.drawBytes(byte[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawChars(char%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003eGraphics.drawChars(char[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.lang.String,int,int)\"\u003edrawString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the string to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text specified by the specified String, using the current text attribute state in the Graphics2D context. The baseline of the first character is at position (x, y) in the User Space. The rendering attributes applied include the Clip, Transform, Paint, Font and Composite attributes. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003eGraphics.setFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the location where the \n\u003ccode\u003eString\u003c/code\u003e should be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "iterator",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class. The baseline of the first character is at position (x, y) in User Space. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.text.AttributedCharacterIterator,int,int)\"\u003edrawString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - the iterator whose text is to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate where the iterator\u0027s text is to be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate where the iterator\u0027s text is to be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eiterator\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "iterator",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class. The baseline of the first character is at position (x, y) in User Space. For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, in which case the coordinate supplied is the location of the leftmost character on the baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - the iterator whose text is to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate where the iterator\u0027s text is to be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate where the iterator\u0027s text is to be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eiterator\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.GlyphVector",
            "type": "Class"
          },
          "name": "g",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawGlyphVector",
      "comment": "Renders the text of the specified GlyphVector using the Graphics2D context\u0027s rendering attributes. The rendering attributes applied include the Clip, Transform, Paint, and Composite attributes. The GlyphVector specifies individual glyphs from a Font. The GlyphVector can also contain the glyph positions. This is the fastest way to render a set of characters to the screen.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003eFont.createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphVector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the \n\u003ccode\u003eGlyphVector\u003c/code\u003e to be rendered",
          "\u003ccode\u003ex\u003c/code\u003e - the x position in User Space where the glyphs should be rendered",
          "\u003ccode\u003ey\u003c/code\u003e - the y position in User Space where the glyphs should be rendered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eg\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fill",
      "comment": "Fills the interior of a Shape using the settings of the Graphics2D context. The rendering attributes applied include the Clip, Transform, Paint, and Composite.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to be filled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "rect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "onStroke",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "hit",
      "comment": "Checks whether or not the specified Shape intersects the specified Rectangle, which is in device space. If onStroke is false, this method checks whether or not the interior of the specified Shape intersects the specified Rectangle. If onStroke is true, this method checks whether or not the Stroke of the specified Shape outline intersects the specified Rectangle. The rendering attributes taken into account include the Clip, Transform, and Stroke attributes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)\"\u003e\u003ccode\u003esetStroke(java.awt.Stroke)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#fill(java.awt.Shape)\"\u003e\u003ccode\u003efill(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#draw(java.awt.Shape)\"\u003e\u003ccode\u003edraw(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#clip(java.awt.Shape)\"\u003e\u003ccode\u003eclip(java.awt.Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.setClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erect\u003c/code\u003e - the area in device space to check for a hit",
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to check for a hit",
          "\u003ccode\u003eonStroke\u003c/code\u003e - flag used to choose between testing the stroked or the filled shape. If the flag is \n\u003ccode\u003etrue\u003c/code\u003e, the \n\u003ccode\u003eStroke\u003c/code\u003e outline is tested. If the flag is \n\u003ccode\u003efalse\u003c/code\u003e, the filled \n\u003ccode\u003eShape\u003c/code\u003e is tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there is a hit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsConfiguration",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDeviceConfiguration",
      "comment": "Returns the device configuration associated with this Graphics2D.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the device configuration of this \n\u003ccode\u003eGraphics2D\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Composite",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setComposite",
      "comment": "Sets the Composite for the Graphics2D context. The Composite is used in all drawing methods such as drawImage, drawString, draw, and fill. It specifies how new pixels are to be combined with the existing pixels on the graphics device during the rendering process. If this Graphics2D context is drawing to a Component on the display screen and the Composite is a custom object rather than an instance of the AlphaComposite class, and if there is a security manager, its checkPermission method is called with an AWTPermission(\"readDisplayPixels\") permission.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setXORMode(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setXORMode(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setPaintMode()\"\u003e\u003ccode\u003eGraphics.setPaintMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getComposite()\"\u003e\u003ccode\u003egetComposite()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAlphaComposite\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the \n\u003ccode\u003eComposite\u003c/code\u003e object to be used for rendering"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a custom \n\u003ccode\u003eComposite\u003c/code\u003e object is being used to render to the screen and a security manager is set and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method does not allow the operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Paint",
            "type": "Class"
          },
          "name": "paint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setPaint",
      "comment": "Sets the Paint attribute for the Graphics2D context. Calling this method with a null Paint object does not have any effect on the current Paint attribute of this Graphics2D.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getPaint()\"\u003e\u003ccode\u003egetPaint()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GradientPaint.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGradientPaint\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/TexturePaint.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eTexturePaint\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epaint\u003c/code\u003e - the \n\u003ccode\u003ePaint\u003c/code\u003e object to be used to generate color during the rendering process, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Stroke",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setStroke",
      "comment": "Sets the Stroke for the Graphics2D context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/BasicStroke.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eBasicStroke\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getStroke()\"\u003e\u003ccode\u003egetStroke()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eStroke\u003c/code\u003e object to be used to stroke a \n\u003ccode\u003eShape\u003c/code\u003e during the rendering process"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.RenderingHints$Key",
            "type": "Class"
          },
          "name": "hintKey",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "hintValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setRenderingHint",
      "comment": "Sets the value of a single preference for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getRenderingHint(java.awt.RenderingHints.Key)\"\u003e\u003ccode\u003egetRenderingHint(RenderingHints.Key)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehintKey\u003c/code\u003e - the key of the hint to be set.",
          "\u003ccode\u003ehintValue\u003c/code\u003e - the value indicating preferences for the specified hint category."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.RenderingHints$Key",
            "type": "Class"
          },
          "name": "hintKey",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRenderingHint",
      "comment": "Returns the value of a single preference for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)\"\u003e\u003ccode\u003esetRenderingHint(RenderingHints.Key, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehintKey\u003c/code\u003e - the key corresponding to the hint to get."
        ],
        "return": [
          "an object representing the value for the specified hint key. Some of the keys and their associated values are defined in the \n\u003ccode\u003eRenderingHints\u003c/code\u003e class."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "hints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setRenderingHints",
      "comment": "Replaces the values of all preferences for the rendering algorithms with the specified hints. The existing values for all rendering hints are discarded and the new set of known hints and values are initialized from the specified Map object. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getRenderingHints()\"\u003e\u003ccode\u003egetRenderingHints()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehints\u003c/code\u003e - the rendering hints to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "hints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "addRenderingHints",
      "comment": "Sets the values of an arbitrary number of preferences for the rendering algorithms. Only values for the rendering hints that are present in the specified Map object are modified. All other preferences not present in the specified object are left unmodified. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for definitions of some common keys and values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehints\u003c/code\u003e - the rendering hints to be set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.RenderingHints",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRenderingHints",
      "comment": "Gets the preferences for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Returns all of the hint key/value pairs that were ever specified in one operation. Refer to the RenderingHints class for definitions of some common keys and values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setRenderingHints(java.util.Map)\"\u003e\u003ccode\u003esetRenderingHints(Map)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to an instance of \n\u003ccode\u003eRenderingHints\u003c/code\u003e that contains the current preferences."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "translate",
      "comment": "Translates the origin of the Graphics2D context to the point (x, y) in the current coordinate system. Modifies the Graphics2D context so that its new origin corresponds to the point (x, y) in the Graphics2D context\u0027s former coordinate system. All coordinates used in subsequent rendering operations on this graphics context are relative to this new origin.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#translate(int,int)\"\u003etranslate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003eGraphics\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified x coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the specified y coordinate"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "tx",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "ty",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "translate",
      "comment": "Concatenates the current Graphics2D Transform with a translation transform. Subsequent rendering is translated by the specified distance relative to the previous position. This is equivalent to calling transform(T), where T is an AffineTransform represented by the following matrix:           [   1    0    tx  ]\n          [   0    1    ty  ]\n          [   0    0    1   ]",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etx\u003c/code\u003e - the distance to translate along the x-axis",
          "\u003ccode\u003ety\u003c/code\u003e - the distance to translate along the y-axis"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "theta",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rotate",
      "comment": "Concatenates the current Graphics2D Transform with a rotation transform. Subsequent rendering is rotated by the specified radians relative to the previous origin. This is equivalent to calling transform(R), where R is an AffineTransform represented by the following matrix:           [   cos(theta)    -sin(theta)    0   ]\n          [   sin(theta)     cos(theta)    0   ]\n          [       0              0         1   ]\n Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etheta\u003c/code\u003e - the angle of rotation in radians"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "theta",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "rotate",
      "comment": "Concatenates the current Graphics2D Transform with a translated rotation transform. Subsequent rendering is transformed by a transform which is constructed by translating to the specified location, rotating by the specified radians, and translating back by the same amount as the original translation. This is equivalent to the following sequence of calls:           translate(x, y);\n          rotate(theta);\n          translate(-x, -y);\n Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etheta\u003c/code\u003e - the angle of rotation in radians",
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the origin of the rotation",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the origin of the rotation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "sx",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "sy",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "scale",
      "comment": "Concatenates the current Graphics2D Transform with a scaling transformation Subsequent rendering is resized according to the specified scaling factors relative to the previous scaling. This is equivalent to calling transform(S), where S is an AffineTransform represented by the following matrix:           [   sx   0    0   ]\n          [   0    sy   0   ]\n          [   0    0    1   ]",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esx\u003c/code\u003e - the amount by which X coordinates in subsequent rendering operations are multiplied relative to previous rendering operations.",
          "\u003ccode\u003esy\u003c/code\u003e - the amount by which Y coordinates in subsequent rendering operations are multiplied relative to previous rendering operations."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "shx",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "shy",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "shear",
      "comment": "Concatenates the current Graphics2D Transform with a shearing transform. Subsequent renderings are sheared by the specified multiplier relative to the previous position. This is equivalent to calling transform(SH), where SH is an AffineTransform represented by the following matrix:           [   1   shx   0   ]\n          [  shy   1    0   ]\n          [   0    0    1   ]",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eshx\u003c/code\u003e - the multiplier by which coordinates are shifted in the positive X axis direction as a function of their Y coordinate",
          "\u003ccode\u003eshy\u003c/code\u003e - the multiplier by which coordinates are shifted in the positive Y axis direction as a function of their X coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "Tx",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "transform",
      "comment": "Composes an AffineTransform object with the Transform in this Graphics2D according to the rule last-specified-first-applied. If the current Transform is Cx, the result of composition with Tx is a new Transform Cx\u0027. Cx\u0027 becomes the current Transform for this Graphics2D. Transforming a point p by the updated Transform Cx\u0027 is equivalent to first transforming p by Tx and then transforming the result by the original Transform Cx. In other words, Cx\u0027(p) \u003d Cx(Tx(p)). A copy of the Tx is made, if necessary, so further modifications to Tx do not affect rendering.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eTx\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e object to be composed with the current \n\u003ccode\u003eTransform\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "Tx",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setTransform",
      "comment": "Overwrites the Transform in the Graphics2D context. WARNING: This method should never be used to apply a new coordinate transform on top of an existing transform because the Graphics2D might already have a transform that is needed for other purposes, such as rendering Swing components or applying a scaling transformation to adjust for the resolution of a printer. To add a coordinate transform, use the transform, rotate, scale, or shear methods. The setTransform method is intended only for restoring the original Graphics2D transform after rendering, as shown in this example:  // Get the current transform\n AffineTransform saveAT \u003d g2.getTransform();\n // Perform transformation\n g2d.transform(...);\n // Render\n g2d.draw(...);\n // Restore original transform\n g2d.setTransform(saveAT);",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getTransform()\"\u003e\u003ccode\u003egetTransform()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eTx\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e that was retrieved from the \n\u003ccode\u003egetTransform\u003c/code\u003e method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTransform",
      "comment": "Returns a copy of the current Transform in the Graphics2D context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003etransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eAffineTransform\u003c/code\u003e in the \n\u003ccode\u003eGraphics2D\u003c/code\u003e context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Paint",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPaint",
      "comment": "Returns the current Paint of the Graphics2D context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setPaint(java.awt.Paint)\"\u003e\u003ccode\u003esetPaint(java.awt.Paint)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003eGraphics.setColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Paint\u003c/code\u003e, which defines a color or pattern."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Composite",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getComposite",
      "comment": "Returns the current Composite in the Graphics2D context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setComposite(java.awt.Composite)\"\u003e\u003ccode\u003esetComposite(java.awt.Composite)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Composite\u003c/code\u003e, which defines a compositing style."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "color",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setBackground",
      "comment": "Sets the background color for the Graphics2D context. The background color is used for clearing a region. When a Graphics2D is constructed for a Component, the background color is inherited from the Component. Setting the background color in the Graphics2D context only affects the subsequent clearRect calls and not the background color of the Component. To change the background of the Component, use appropriate methods of the Component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getBackground()\"\u003e\u003ccode\u003egetBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clearRect(int,int,int,int)\"\u003e\u003ccode\u003eGraphics.clearRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolor\u003c/code\u003e - the background color that is used in subsequent calls to \n\u003ccode\u003eclearRect\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBackground",
      "comment": "Returns the background color used for clearing a region.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003esetBackground(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Color\u003c/code\u003e, which defines the background color."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Stroke",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getStroke",
      "comment": "Returns the current Stroke in the Graphics2D context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)\"\u003e\u003ccode\u003esetStroke(java.awt.Stroke)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current \n\u003ccode\u003eGraphics2D Stroke\u003c/code\u003e, which defines the line style."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "clip",
      "comment": "Intersects the current Clip with the interior of the specified Shape and sets the Clip to the resulting intersection. The specified Shape is transformed with the current Graphics2D Transform before being intersected with the current Clip. This method is used to make the current Clip smaller. To make the Clip larger, use setClip. The user clip modified by this method is independent of the clipping associated with device bounds and visibility. If no clip has previously been set, or if the clip has been cleared using setClip with a null argument, the specified Shape becomes the new user clip.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to be intersected with the current \n\u003ccode\u003eClip\u003c/code\u003e. If \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, this method clears the current \n\u003ccode\u003eClip\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.FontRenderContext",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFontRenderContext",
      "comment": "Get the rendering context of the Font within this Graphics2D context. The FontRenderContext encapsulates application hints such as anti-aliasing and fractional metrics, as well as target device specific information such as dots-per-inch. This information should be provided by the application when using objects that perform typographical formatting, such as Font and TextLayout. This information should also be provided by applications that perform their own layout and need accurate measurements of various characteristics of glyphs such as advance and line height when various rendering hints have been applied to the text rendering.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003eFont.createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to an instance of FontRenderContext."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new Graphics2D object. Since Graphics2D is an abstract class, and since it must be customized by subclasses for different output devices, Graphics2D objects cannot be created directly. Instead, Graphics2D objects must be obtained from another Graphics2D object, created by a Component, or obtained from images such as BufferedImage objects.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getGraphics()\"\u003e\u003ccode\u003eComponent.getGraphics()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#create()\"\u003e\u003ccode\u003eGraphics.create()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.Graphics2D",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/RenderingHints.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eRenderingHints\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}