{
  "packageName": "java.awt",
  "simpleName": "GraphicsDevice",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE_RASTER_SCREEN",
      "comment": "Device is a raster screen.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.GraphicsDevice.TYPE_RASTER_SCREEN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE_PRINTER",
      "comment": "Device is a printer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.GraphicsDevice.TYPE_PRINTER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE_IMAGE_BUFFER",
      "comment": "Device is an image buffer. This buffer can reside in device or system memory but it is not physically viewable by the user.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.GraphicsDevice.TYPE_IMAGE_BUFFER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getType",
      "comment": "Returns the type of this GraphicsDevice.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#TYPE_RASTER_SCREEN\"\u003e\u003ccode\u003eTYPE_RASTER_SCREEN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#TYPE_PRINTER\"\u003e\u003ccode\u003eTYPE_PRINTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#TYPE_IMAGE_BUFFER\"\u003e\u003ccode\u003eTYPE_IMAGE_BUFFER\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the type of this \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e, which can either be TYPE_RASTER_SCREEN, TYPE_PRINTER or TYPE_IMAGE_BUFFER."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getIDstring",
      "comment": "Returns the identification string associated with this GraphicsDevice. A particular program might use more than one GraphicsDevice in a GraphicsEnvironment. This method returns a String identifying a particular GraphicsDevice in the local GraphicsEnvironment. Although there is no public method to set this String, a programmer can use the String for debugging purposes. Vendors of the Java Runtime Environment can format the return value of the String. To determine how to interpret the value of the String, contact the vendor of your Java Runtime. To find out who the vendor is, from your program, call the getProperty method of the System class with \"java.vendor\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e that is the identification of this \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsConfiguration",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getConfigurations",
      "comment": "Returns all of the GraphicsConfiguration objects associated with this GraphicsDevice.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e objects that are associated with this \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsConfiguration",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDefaultConfiguration",
      "comment": "Returns the default GraphicsConfiguration associated with this GraphicsDevice.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e of this \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsConfiguration",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.GraphicsConfigTemplate",
            "type": "Class"
          },
          "name": "gct",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBestConfiguration",
      "comment": "Returns the \"best\" configuration possible that passes the criteria defined in the GraphicsConfigTemplate.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfigTemplate.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfigTemplate\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003egct\u003c/code\u003e - the \n\u003ccode\u003eGraphicsConfigTemplate\u003c/code\u003e object used to obtain a valid \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e that passes the criteria defined in the specified \n\u003ccode\u003eGraphicsConfigTemplate\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFullScreenSupported",
      "comment": "Returns true if this GraphicsDevice supports full-screen exclusive mode. If a SecurityManager is installed, its checkPermission method will be called with AWTPermission(\"fullScreenExclusive\"). isFullScreenSupported returns true only if that permission is granted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether full-screen exclusive mode is available for this graphics device"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Window",
            "type": "Class"
          },
          "name": "w",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFullScreenWindow",
      "comment": "Enter full-screen mode, or return to windowed mode. The entered full-screen mode may be either exclusive or simulated. Exclusive mode is only available if isFullScreenSupported returns true. Exclusive mode implies: Windows cannot overlap the full-screen window. All other application windows will always appear beneath the full-screen window in the Z-order. There can be only one full-screen window on a device at any time, so calling this method while there is an existing full-screen Window will cause the existing full-screen window to return to windowed mode. Input method windows are disabled. It is advisable to call Component.enableInputMethods(false) to make a component a non-client of the input method framework. The simulated full-screen mode places and resizes the window to the maximum possible visible area of the screen. However, the native windowing system may modify the requested geometry-related data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings. When entering full-screen mode, if the window to be used as a full-screen window is not visible, this method will make it visible. It will remain visible when returning to windowed mode. When entering full-screen mode, all the translucency effects are reset for the window. Its shape is set to null, the opacity value is set to 1.0f, and the background color alpha is set to 255 (completely opaque). These values are not restored when returning to windowed mode. It is unspecified and platform-dependent how decorated windows operate in full-screen mode. For this reason, it is recommended to turn off the decorations in a Frame or Dialog object by using the setUndecorated method. When returning to windowed mode from an exclusive full-screen window, any display changes made by calling setDisplayMode are automatically restored to their original state.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#isFullScreenSupported()\"\u003e\u003ccode\u003eisFullScreenSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getFullScreenWindow()\"\u003e\u003ccode\u003egetFullScreenWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#setDisplayMode(java.awt.DisplayMode)\"\u003e\u003ccode\u003esetDisplayMode(java.awt.DisplayMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#enableInputMethods(boolean)\"\u003e\u003ccode\u003eComponent.enableInputMethods(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setVisible(boolean)\"\u003e\u003ccode\u003eComponent.setVisible(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html#setUndecorated(boolean)\"\u003e\u003ccode\u003eFrame.setUndecorated(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html#setUndecorated(boolean)\"\u003e\u003ccode\u003eDialog.setUndecorated(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - a window to use as the full-screen window; \n\u003ccode\u003enull\u003c/code\u003e if returning to windowed mode. Some platforms expect the fullscreen window to be a top-level component (i.e., a \n\u003ccode\u003eFrame\u003c/code\u003e); therefore it is preferable to use a \n\u003ccode\u003eFrame\u003c/code\u003e here rather than a \n\u003ccode\u003eWindow\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFullScreenWindow",
      "comment": "Returns the Window object representing the full-screen window if the device is in full-screen mode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#setFullScreenWindow(java.awt.Window)\"\u003e\u003ccode\u003esetFullScreenWindow(Window)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the full-screen window, or \n\u003ccode\u003enull\u003c/code\u003e if the device is not in full-screen mode."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDisplayChangeSupported",
      "comment": "Returns true if this GraphicsDevice supports low-level display changes. On some platforms low-level display changes may only be allowed in full-screen exclusive mode (i.e., if isFullScreenSupported() returns true and the application has already entered full-screen mode using setFullScreenWindow(java.awt.Window)).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#isFullScreenSupported()\"\u003e\u003ccode\u003eisFullScreenSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#setDisplayMode(java.awt.DisplayMode)\"\u003e\u003ccode\u003esetDisplayMode(java.awt.DisplayMode)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#setFullScreenWindow(java.awt.Window)\"\u003e\u003ccode\u003esetFullScreenWindow(java.awt.Window)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether low-level display changes are supported for this graphics device."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.DisplayMode",
            "type": "Class"
          },
          "name": "dm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDisplayMode",
      "comment": "Sets the display mode of this graphics device. This is only allowed if isDisplayChangeSupported() returns true and may require first entering full-screen exclusive mode using setFullScreenWindow(java.awt.Window) providing that full-screen exclusive mode is supported (i.e., isFullScreenSupported() returns true). The display mode must be one of the display modes returned by getDisplayModes(), with one exception: passing a display mode with DisplayMode.REFRESH_RATE_UNKNOWN refresh rate will result in selecting a display mode from the list of available display modes with matching width, height and bit depth. However, passing a display mode with DisplayMode.BIT_DEPTH_MULTI for bit depth is only allowed if such mode exists in the list returned by getDisplayModes(). Example code: \n Frame frame;\n DisplayMode newDisplayMode;\n GraphicsDevice gd;\n // create a Frame, select desired DisplayMode from the list of modes\n // returned by gd.getDisplayModes() ...\n\n if (gd.isFullScreenSupported()) {\n     gd.setFullScreenWindow(frame);\n } else {\n    // proceed in non-full-screen mode\n    frame.setSize(...);\n    frame.setLocation(...);\n    frame.setVisible(true);\n }\n\n if (gd.isDisplayChangeSupported()) {\n     gd.setDisplayMode(newDisplayMode);\n }",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getDisplayMode()\"\u003e\u003ccode\u003egetDisplayMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getDisplayModes()\"\u003e\u003ccode\u003egetDisplayModes()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#isDisplayChangeSupported()\"\u003e\u003ccode\u003eisDisplayChangeSupported()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edm\u003c/code\u003e - The new display mode of this graphics device."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eDisplayMode\u003c/code\u003e supplied is \n\u003ccode\u003enull\u003c/code\u003e, or is not available in the array returned by \n\u003ccode\u003egetDisplayModes\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eisDisplayChangeSupported\u003c/code\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.DisplayMode",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayMode",
      "comment": "Returns the current display mode of this GraphicsDevice. The returned display mode is allowed to have a refresh rate DisplayMode.REFRESH_RATE_UNKNOWN if it is indeterminate. Likewise, the returned display mode is allowed to have a bit depth DisplayMode.BIT_DEPTH_MULTI if it is indeterminate or if multiple bit depths are supported.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#setDisplayMode(java.awt.DisplayMode)\"\u003e\u003ccode\u003esetDisplayMode(DisplayMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current display mode of this graphics device."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.DisplayMode",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayModes",
      "comment": "Returns all display modes available for this GraphicsDevice. The returned display modes are allowed to have a refresh rate DisplayMode.REFRESH_RATE_UNKNOWN if it is indeterminate. Likewise, the returned display modes are allowed to have a bit depth DisplayMode.BIT_DEPTH_MULTI if it is indeterminate or if multiple bit depths are supported.",
      "annotations": [],
      "tagMap": {
        "return": [
          "all of the display modes available for this graphics device."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAvailableAcceleratedMemory",
      "comment": "This method returns the number of bytes available in accelerated memory on this device. Some images are created or cached in accelerated memory on a first-come, first-served basis. On some operating systems, this memory is a finite resource. Calling this method and scheduling the creation and flushing of images carefully may enable applications to make the most efficient use of that finite resource. Note that the number returned is a snapshot of how much memory is available; some images may still have problems being allocated into that memory. For example, depending on operating system, driver, memory configuration, and thread situations, the full extent of the size reported may not be available for a given image. There are further inquiry methods on the ImageCapabilities object associated with a VolatileImage that can be used to determine whether a particular VolatileImage has been created in accelerated memory.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html#flush()\"\u003e\u003ccode\u003eImage.flush()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ImageCapabilities.html#isAccelerated()\"\u003e\u003ccode\u003eImageCapabilities.isAccelerated()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "number of bytes available in accelerated memory. A negative return value indicates that the amount of accelerated memory on this GraphicsDevice is indeterminate."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.GraphicsDevice$WindowTranslucency",
            "type": "Class"
          },
          "name": "translucencyKind",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWindowTranslucencySupported",
      "comment": "Returns whether the given level of translucency is supported by this graphics device.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etranslucencyKind\u003c/code\u003e - a kind of translucency support"
        ],
        "return": [
          "whether the given translucency kind is supported"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "This is an abstract class that cannot be instantiated directly. Instances must be obtained from a suitable factory or query method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getScreenDevices()\"\u003e\u003ccode\u003eGraphicsEnvironment.getScreenDevices()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getDefaultScreenDevice()\"\u003e\u003ccode\u003eGraphicsEnvironment.getDefaultScreenDevice()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#getDevice()\"\u003e\u003ccode\u003eGraphicsConfiguration.getDevice()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.awt.GraphicsDevice$WindowTranslucency"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.GraphicsDevice",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}