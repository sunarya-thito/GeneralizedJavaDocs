{
  "packageName": "java.awt",
  "simpleName": "Graphics",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Graphics",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "create",
      "comment": "Creates a new Graphics object that is a copy of this Graphics object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a new graphics context that is a copy of this graphics context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "create",
      "comment": "Creates a new Graphics object based on this Graphics object, but with a new translation and clip area. The new Graphics object has its origin translated to the specified point (x, y). Its clip area is determined by the intersection of the original clip area with the specified rectangle. The arguments are all interpreted in the coordinate system of the original Graphics object. The new graphics context is identical to the original, except in two respects: The new graphics context is translated by (x, y). That is to say, the point (0, 0) in the new graphics context is the same as (x, y) in the original graphics context. The new graphics context has an additional clipping rectangle, in addition to whatever (translated) clipping rectangle it inherited from the original graphics context. The origin of the new clipping rectangle is at (0, 0), and its size is specified by the width and height arguments.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#translate(int,int)\"\u003e\u003ccode\u003etranslate(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clipRect(int,int,int,int)\"\u003e\u003ccode\u003eclipRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the clipping rectangle.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the clipping rectangle."
        ],
        "return": [
          "a new graphics context."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "translate",
      "comment": "Translates the origin of the graphics context to the point (x, y) in the current coordinate system. Modifies this graphics context so that its new origin corresponds to the point (x, y) in this graphics context\u0027s original coordinate system. All coordinates used in subsequent rendering operations on this graphics context will be relative to this new origin.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getColor",
      "comment": "Gets this graphics context\u0027s current color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Color.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eColor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003esetColor(Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this graphics context\u0027s current color."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setColor",
      "comment": "Sets this graphics context\u0027s current color to the specified color. All subsequent graphics operations using this graphics context use this specified color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Color.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eColor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getColor()\"\u003e\u003ccode\u003egetColor()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the new rendering color."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setPaintMode",
      "comment": "Sets the paint mode of this graphics context to overwrite the destination with this graphics context\u0027s current color. This sets the logical pixel operation function to the paint or overwrite mode. All subsequent rendering operations will overwrite the destination with the current color.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "c1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setXORMode",
      "comment": "Sets the paint mode of this graphics context to alternate between this graphics context\u0027s current color and the new specified color. This specifies that logical pixel operations are performed in the XOR mode, which alternates pixels between the current color and a specified XOR color. When drawing operations are performed, pixels which are the current color are changed to the specified color, and vice versa. Pixels that are of colors other than those two colors are changed in an unpredictable but reversible manner; if the same figure is drawn twice, then all pixels are restored to their original values.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec1\u003c/code\u003e - the XOR alternation color"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFont",
      "comment": "Gets the current font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003esetFont(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this graphics context\u0027s current font."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "name": "font",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setFont",
      "comment": "Sets this graphics context\u0027s font to the specified font. All subsequent text operations using this graphics context use this font. A null argument is silently ignored.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getFont()\"\u003e\u003ccode\u003egetFont()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.lang.String,int,int)\"\u003e\u003ccode\u003edrawString(java.lang.String, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawBytes(byte%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawBytes(byte[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawChars(char%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawChars(char[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - the font."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.FontMetrics",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFontMetrics",
      "comment": "Gets the font metrics of the current font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getFont()\"\u003e\u003ccode\u003egetFont()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFontMetrics\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getFontMetrics(java.awt.Font)\"\u003e\u003ccode\u003egetFontMetrics(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the font metrics of this graphics context\u0027s current font."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.FontMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "name": "f",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFontMetrics",
      "comment": "Gets the font metrics for the specified font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getFont()\"\u003e\u003ccode\u003egetFont()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontMetrics.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFontMetrics\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getFontMetrics()\"\u003e\u003ccode\u003egetFontMetrics()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the specified font"
        ],
        "return": [
          "the font metrics for the specified font."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getClipBounds",
      "comment": "Returns the bounding rectangle of the current clipping area. This method refers to the user clip, which is independent of the clipping associated with device bounds and window visibility. If no clip has previously been set, or if the clip has been cleared using setClip(null), this method returns null. The coordinates in the rectangle are relative to the coordinate system origin of this graphics context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getClip()\"\u003e\u003ccode\u003egetClip()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clipRect(int,int,int,int)\"\u003e\u003ccode\u003eclipRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003esetClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(java.awt.Shape)\"\u003e\u003ccode\u003esetClip(Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the bounding rectangle of the current clipping area, or \n\u003ccode\u003enull\u003c/code\u003e if no clip is set."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "clipRect",
      "comment": "Intersects the current clip with the specified rectangle. The resulting clipping area is the intersection of the current clipping area and the specified rectangle. If there is no current clipping area, either because the clip has never been set, or the clip has been cleared using setClip(null), the specified rectangle becomes the new clip. This method sets the user clip, which is independent of the clipping associated with device bounds and window visibility. This method can only be used to make the current clip smaller. To set the current clip larger, use any of the setClip methods. Rendering operations have no effect outside of the clipping area.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003esetClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(java.awt.Shape)\"\u003e\u003ccode\u003esetClip(Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the rectangle to intersect the clip with",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the rectangle to intersect the clip with",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to intersect the clip with",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to intersect the clip with"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setClip",
      "comment": "Sets the current clip to the rectangle specified by the given coordinates. This method sets the user clip, which is independent of the clipping associated with device bounds and window visibility. Rendering operations have no effect outside of the clipping area.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clipRect(int,int,int,int)\"\u003e\u003ccode\u003eclipRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(java.awt.Shape)\"\u003e\u003ccode\u003esetClip(Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getClip()\"\u003e\u003ccode\u003egetClip()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the new clip rectangle.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the new clip rectangle.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the new clip rectangle.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the new clip rectangle."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getClip",
      "comment": "Gets the current clipping area. This method returns the user clip, which is independent of the clipping associated with device bounds and window visibility. If no clip has previously been set, or if the clip has been cleared using setClip(null), this method returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getClipBounds()\"\u003e\u003ccode\u003egetClipBounds()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clipRect(int,int,int,int)\"\u003e\u003ccode\u003eclipRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003esetClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(java.awt.Shape)\"\u003e\u003ccode\u003esetClip(Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e object representing the current clipping area, or \n\u003ccode\u003enull\u003c/code\u003e if no clip is set."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "clip",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setClip",
      "comment": "Sets the current clipping area to an arbitrary clip shape. Not all objects that implement the Shape interface can be used to set the clip. The only Shape objects that are guaranteed to be supported are Shape objects that are obtained via the getClip method and via Rectangle objects. This method sets the user clip, which is independent of the clipping associated with device bounds and window visibility.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#getClip()\"\u003e\u003ccode\u003egetClip()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clipRect(int,int,int,int)\"\u003e\u003ccode\u003eclipRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setClip(int,int,int,int)\"\u003e\u003ccode\u003esetClip(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eclip\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e to use to set the clip"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dx",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dy",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "copyArea",
      "comment": "Copies an area of the component by a distance specified by dx and dy. From the point specified by x and y, this method copies downwards and to the right. To copy an area of the component to the left or upwards, specify a negative value for dx or dy. If a portion of the source rectangle lies outside the bounds of the component, or is obscured by another window or component, copyArea will be unable to copy the associated pixels. The area that is omitted can be refreshed by calling the component\u0027s paint method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the source rectangle.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the source rectangle.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the source rectangle.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the source rectangle.",
          "\u003ccode\u003edx\u003c/code\u003e - the horizontal distance to copy the pixels.",
          "\u003ccode\u003edy\u003c/code\u003e - the vertical distance to copy the pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y2",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawLine",
      "comment": "Draws a line, using the current color, between the points (x1, y1) and (x2, y2) in this graphics context\u0027s coordinate system.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the first point\u0027s \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey1\u003c/code\u003e - the first point\u0027s \n\u003ci\u003ey\u003c/i\u003e coordinate.",
          "\u003ccode\u003ex2\u003c/code\u003e - the second point\u0027s \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey2\u003c/code\u003e - the second point\u0027s \n\u003ci\u003ey\u003c/i\u003e coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fillRect",
      "comment": "Fills the specified rectangle. The left and right edges of the rectangle are at x and x + width - 1. The top and bottom edges are at y and y + height - 1. The resulting rectangle covers an area width pixels wide by height pixels tall. The rectangle is filled using the graphics context\u0027s current color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clearRect(int,int,int,int)\"\u003e\u003ccode\u003eclearRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawRect(int,int,int,int)\"\u003e\u003ccode\u003edrawRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be filled."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drawRect",
      "comment": "Draws the outline of the specified rectangle. The left and right edges of the rectangle are at x and x + width. The top and bottom edges are at y and y + height. The rectangle is drawn using the graphics context\u0027s current color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillRect(int,int,int,int)\"\u003e\u003ccode\u003efillRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clearRect(int,int,int,int)\"\u003e\u003ccode\u003eclearRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be drawn."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "clearRect",
      "comment": "Clears the specified rectangle by filling it with the background color of the current drawing surface. This operation does not use the current paint mode. Beginning with Java 1.1, the background color of offscreen images may be system dependent. Applications should use setColor followed by fillRect to ensure that an offscreen image is cleared to a specific color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillRect(int,int,int,int)\"\u003e\u003ccode\u003efillRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawRect(int,int,int,int)\"\u003e\u003ccode\u003edrawRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003esetColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setPaintMode()\"\u003e\u003ccode\u003esetPaintMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setXORMode(java.awt.Color)\"\u003e\u003ccode\u003esetXORMode(java.awt.Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to clear.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to clear.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to clear.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to clear."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arcWidth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arcHeight",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawRoundRect",
      "comment": "Draws an outlined round-cornered rectangle using this graphics context\u0027s current color. The left and right edges of the rectangle are at x and x + width, respectively. The top and bottom edges of the rectangle are at y and y + height.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillRoundRect(int,int,int,int,int,int)\"\u003e\u003ccode\u003efillRoundRect(int, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be drawn.",
          "\u003ccode\u003earcWidth\u003c/code\u003e - the horizontal diameter of the arc at the four corners.",
          "\u003ccode\u003earcHeight\u003c/code\u003e - the vertical diameter of the arc at the four corners."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arcWidth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arcHeight",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fillRoundRect",
      "comment": "Fills the specified rounded corner rectangle with the current color. The left and right edges of the rectangle are at x and x + width - 1, respectively. The top and bottom edges of the rectangle are at y and y + height - 1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawRoundRect(int,int,int,int,int,int)\"\u003e\u003ccode\u003edrawRoundRect(int, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be filled.",
          "\u003ccode\u003earcWidth\u003c/code\u003e - the horizontal diameter of the arc at the four corners.",
          "\u003ccode\u003earcHeight\u003c/code\u003e - the vertical diameter of the arc at the four corners."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "raised",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "draw3DRect",
      "comment": "Draws a 3-D highlighted outline of the specified rectangle. The edges of the rectangle are highlighted so that they appear to be beveled and lit from the upper left corner. The colors used for the highlighting effect are determined based on the current color. The resulting rectangle covers an area that is width + 1 pixels wide by height + 1 pixels tall.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fill3DRect(int,int,int,int,boolean)\"\u003e\u003ccode\u003efill3DRect(int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be drawn.",
          "\u003ccode\u003eraised\u003c/code\u003e - a boolean that determines whether the rectangle appears to be raised above the surface or sunk into the surface."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "raised",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fill3DRect",
      "comment": "Paints a 3-D highlighted rectangle filled with the current color. The edges of the rectangle will be highlighted so that it appears as if the edges were beveled and lit from the upper left corner. The colors used for the highlighting effect will be determined from the current color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#draw3DRect(int,int,int,int,boolean)\"\u003e\u003ccode\u003edraw3DRect(int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the rectangle to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the rectangle to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to be filled.",
          "\u003ccode\u003eraised\u003c/code\u003e - a boolean value that determines whether the rectangle appears to be raised above the surface or etched into the surface."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawOval",
      "comment": "Draws the outline of an oval. The result is a circle or ellipse that fits within the rectangle specified by the x, y, width, and height arguments. The oval covers an area that is width + 1 pixels wide and height + 1 pixels tall.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillOval(int,int,int,int)\"\u003e\u003ccode\u003efillOval(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the upper left corner of the oval to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the upper left corner of the oval to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the oval to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the oval to be drawn."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fillOval",
      "comment": "Fills an oval bounded by the specified rectangle with the current color.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawOval(int,int,int,int)\"\u003e\u003ccode\u003edrawOval(int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the upper left corner of the oval to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the upper left corner of the oval to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the oval to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the oval to be filled."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "startAngle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arcAngle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawArc",
      "comment": "Draws the outline of a circular or elliptical arc covering the specified rectangle. The resulting arc begins at startAngle and extends for arcAngle degrees, using the current color. Angles are interpreted such that 0 degrees is at the 3 o\u0027clock position. A positive value indicates a counter-clockwise rotation while a negative value indicates a clockwise rotation. The center of the arc is the center of the rectangle whose origin is (x, y) and whose size is specified by the width and height arguments. The resulting arc covers an area width + 1 pixels wide by height + 1 pixels tall. The angles are specified relative to the non-square extents of the bounding rectangle such that 45 degrees always falls on the line from the center of the ellipse to the upper right corner of the bounding rectangle. As a result, if the bounding rectangle is noticeably longer in one axis than the other, the angles to the start and end of the arc segment will be skewed farther along the longer axis of the bounds.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillArc(int,int,int,int,int,int)\"\u003e\u003ccode\u003efillArc(int, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the upper-left corner of the arc to be drawn.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the upper-left corner of the arc to be drawn.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the arc to be drawn.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the arc to be drawn.",
          "\u003ccode\u003estartAngle\u003c/code\u003e - the beginning angle.",
          "\u003ccode\u003earcAngle\u003c/code\u003e - the angular extent of the arc, relative to the start angle."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "startAngle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arcAngle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fillArc",
      "comment": "Fills a circular or elliptical arc covering the specified rectangle. The resulting arc begins at startAngle and extends for arcAngle degrees. Angles are interpreted such that 0 degrees is at the 3 o\u0027clock position. A positive value indicates a counter-clockwise rotation while a negative value indicates a clockwise rotation. The center of the arc is the center of the rectangle whose origin is (x, y) and whose size is specified by the width and height arguments. The resulting arc covers an area width + 1 pixels wide by height + 1 pixels tall. The angles are specified relative to the non-square extents of the bounding rectangle such that 45 degrees always falls on the line from the center of the ellipse to the upper right corner of the bounding rectangle. As a result, if the bounding rectangle is noticeably longer in one axis than the other, the angles to the start and end of the arc segment will be skewed farther along the longer axis of the bounds.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawArc(int,int,int,int,int,int)\"\u003e\u003ccode\u003edrawArc(int, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the upper-left corner of the arc to be filled.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the upper-left corner of the arc to be filled.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the arc to be filled.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the arc to be filled.",
          "\u003ccode\u003estartAngle\u003c/code\u003e - the beginning angle.",
          "\u003ccode\u003earcAngle\u003c/code\u003e - the angular extent of the arc, relative to the start angle."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "xPoints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "yPoints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "nPoints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawPolyline",
      "comment": "Draws a sequence of connected lines defined by arrays of x and y coordinates. Each pair of (x, y) coordinates defines a point. The figure is not closed if the first point differs from the last point.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawPolygon(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003edrawPolygon(int[], int[], int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003exPoints\u003c/code\u003e - an array of \n\u003ci\u003ex\u003c/i\u003e points",
          "\u003ccode\u003eyPoints\u003c/code\u003e - an array of \n\u003ci\u003ey\u003c/i\u003e points",
          "\u003ccode\u003enPoints\u003c/code\u003e - the total number of points"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "xPoints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "yPoints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "nPoints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawPolygon",
      "comment": "Draws a closed polygon defined by arrays of x and y coordinates. Each pair of (x, y) coordinates defines a point. This method draws the polygon defined by nPoint line segments, where the first nPoint - 1 line segments are line segments from (xPoints[i - 1], yPoints[i - 1]) to (xPoints[i], yPoints[i]), for 1 ≤ i ≤ nPoints. The figure is automatically closed by drawing a line connecting the final point to the first point, if those points are different.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillPolygon(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003efillPolygon(int[], int[], int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawPolyline(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003edrawPolyline(int[], int[], int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003exPoints\u003c/code\u003e - a an array of \n\u003ccode\u003ex\u003c/code\u003e coordinates.",
          "\u003ccode\u003eyPoints\u003c/code\u003e - a an array of \n\u003ccode\u003ey\u003c/code\u003e coordinates.",
          "\u003ccode\u003enPoints\u003c/code\u003e - a the total number of points."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Polygon",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drawPolygon",
      "comment": "Draws the outline of a polygon defined by the specified Polygon object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#fillPolygon(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003efillPolygon(int[], int[], int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawPolyline(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003edrawPolyline(int[], int[], int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the polygon to draw."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "xPoints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "yPoints",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "nPoints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "fillPolygon",
      "comment": "Fills a closed polygon defined by arrays of x and y coordinates. This method draws the polygon defined by nPoint line segments, where the first nPoint - 1 line segments are line segments from (xPoints[i - 1], yPoints[i - 1]) to (xPoints[i], yPoints[i]), for 1 ≤ i ≤ nPoints. The figure is automatically closed by drawing a line connecting the final point to the first point, if those points are different. The area inside the polygon is defined using an even-odd fill rule, also known as the alternating rule.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawPolygon(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003edrawPolygon(int[], int[], int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003exPoints\u003c/code\u003e - a an array of \n\u003ccode\u003ex\u003c/code\u003e coordinates.",
          "\u003ccode\u003eyPoints\u003c/code\u003e - a an array of \n\u003ccode\u003ey\u003c/code\u003e coordinates.",
          "\u003ccode\u003enPoints\u003c/code\u003e - a the total number of points."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Polygon",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fillPolygon",
      "comment": "Fills the polygon defined by the specified Polygon object with the graphics context\u0027s current color. The area inside the polygon is defined using an even-odd fill rule, also known as the alternating rule.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawPolygon(int%5B%5D,int%5B%5D,int)\"\u003e\u003ccode\u003edrawPolygon(int[], int[], int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the polygon to fill."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Draws the text given by the specified string, using this graphics context\u0027s current font and color. The baseline of the leftmost character is at position (x, y) in this graphics context\u0027s coordinate system.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawBytes(byte%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawBytes(byte[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawChars(char%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawChars(char[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the string to be drawn.",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "iterator",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawString",
      "comment": "Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class. The baseline of the leftmost character is at position (x, y) in this graphics context\u0027s coordinate system.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawBytes(byte%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawBytes(byte[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawChars(char%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawChars(char[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - the iterator whose text is to be drawn",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eiterator\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drawChars",
      "comment": "Draws the text given by the specified character array, using this graphics context\u0027s current font and color. The baseline of the first character is at position (x, y) in this graphics context\u0027s coordinate system.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawBytes(byte%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawBytes(byte[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.lang.String,int,int)\"\u003e\u003ccode\u003edrawString(java.lang.String, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the array of characters to be drawn",
          "\u003ccode\u003eoffset\u003c/code\u003e - the start offset in the data",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to be drawn",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the baseline of the text",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the baseline of the text"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edata\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e or \n\u003ccode\u003elength\u003c/code\u003e is less than zero, or \n\u003ccode\u003eoffset+length\u003c/code\u003e is greater than the length of the \n\u003ccode\u003edata\u003c/code\u003e array."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drawBytes",
      "comment": "Draws the text given by the specified byte array, using this graphics context\u0027s current font and color. The baseline of the first character is at position (x, y) in this graphics context\u0027s coordinate system. Use of this method is not recommended as each byte is interpreted as a Unicode code point in the range 0 to 255, and so can only be used to draw Latin characters in that range.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawChars(char%5B%5D,int,int,int,int)\"\u003e\u003ccode\u003edrawChars(char[], int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.lang.String,int,int)\"\u003e\u003ccode\u003edrawString(java.lang.String, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the data to be drawn",
          "\u003ccode\u003eoffset\u003c/code\u003e - the start offset in the data",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes that are drawn",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the baseline of the text",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the baseline of the text"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edata\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e or \n\u003ccode\u003elength\u003c/code\u003e is less than zero, or \n\u003ccode\u003eoffset+length\u003c/code\u003e is greater than the length of the \n\u003ccode\u003edata\u003c/code\u003e array."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "observer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Draws as much of the specified image as is currently available. The image is drawn with its top-left corner at (x, y) in this graphics context\u0027s coordinate space. Transparent pixels in the image do not affect whatever pixels are already there. This method returns immediately in all cases, even if the complete image has not yet been loaded, and it has not been dithered and converted for the current output device. If the image has completely loaded and its pixels are no longer being changed, then drawImage returns true. Otherwise, drawImage returns false and as more of the image becomes available or it is time to draw another frame of animation, the process that loads the image notifies the specified image observer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be drawn. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate.",
          "\u003ccode\u003eobserver\u003c/code\u003e - object to be notified as more of the image is converted."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "observer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Draws as much of the specified image as has already been scaled to fit inside the specified rectangle. The image is drawn inside the specified rectangle of this graphics context\u0027s coordinate space, and is scaled if necessary. Transparent pixels do not affect whatever pixels are already there. This method returns immediately in all cases, even if the entire image has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete, then drawImage returns false. As more of the image becomes available, the process that loads the image notifies the image observer by calling its imageUpdate method. A scaled version of an image will not necessarily be available immediately just because an unscaled version of the image has been constructed for this output device. Each size of the image may be cached separately and generated from the original data in a separate image production sequence.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be drawn. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle.",
          "\u003ccode\u003eobserver\u003c/code\u003e - object to be notified as more of the image is converted."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "bgcolor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "observer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Draws as much of the specified image as is currently available. The image is drawn with its top-left corner at (x, y) in this graphics context\u0027s coordinate space. Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient. This method returns immediately in all cases, even if the complete image has not yet been loaded, and it has not been dithered and converted for the current output device. If the image has completely loaded and its pixels are no longer being changed, then drawImage returns true. Otherwise, drawImage returns false and as more of the image becomes available or it is time to draw another frame of animation, the process that loads the image notifies the specified image observer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be drawn. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate.",
          "\u003ccode\u003ebgcolor\u003c/code\u003e - the background color to paint under the non-opaque portions of the image.",
          "\u003ccode\u003eobserver\u003c/code\u003e - object to be notified as more of the image is converted."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "bgcolor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "observer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Draws as much of the specified image as has already been scaled to fit inside the specified rectangle. The image is drawn inside the specified rectangle of this graphics context\u0027s coordinate space, and is scaled if necessary. Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient. This method returns immediately in all cases, even if the entire image has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then drawImage returns false. As more of the image becomes available, the process that loads the image notifies the specified image observer. A scaled version of an image will not necessarily be available immediately just because an unscaled version of the image has been constructed for this output device. Each size of the image may be cached separately and generated from the original data in a separate image production sequence.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be drawn. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate.",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle.",
          "\u003ccode\u003ebgcolor\u003c/code\u003e - the background color to paint under the non-opaque portions of the image.",
          "\u003ccode\u003eobserver\u003c/code\u003e - object to be notified as more of the image is converted."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dx1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dy1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dx2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dy2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sx1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sy1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sx2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sy2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "observer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface. Transparent pixels do not affect whatever pixels are already there. This method returns immediately in all cases, even if the image area to be drawn has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then drawImage returns false. As more of the image becomes available, the process that loads the image notifies the specified image observer. This method always uses the unscaled version of the image to render the scaled rectangle and performs the required scaling on the fly. It does not use a cached, scaled version of the image for this operation. Scaling of the image from source to destination is performed such that the first coordinate of the source rectangle is mapped to the first coordinate of the destination rectangle, and the second source coordinate is mapped to the second destination coordinate. The subimage is scaled and flipped as needed to preserve those mappings.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be drawn. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003edx1\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the first corner of the destination rectangle.",
          "\u003ccode\u003edy1\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the first corner of the destination rectangle.",
          "\u003ccode\u003edx2\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the second corner of the destination rectangle.",
          "\u003ccode\u003edy2\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the second corner of the destination rectangle.",
          "\u003ccode\u003esx1\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the first corner of the source rectangle.",
          "\u003ccode\u003esy1\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the first corner of the source rectangle.",
          "\u003ccode\u003esx2\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the second corner of the source rectangle.",
          "\u003ccode\u003esy2\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the second corner of the source rectangle.",
          "\u003ccode\u003eobserver\u003c/code\u003e - object to be notified as more of the image is scaled and converted."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "name": "img",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dx1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dy1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dx2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dy2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sx1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sy1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sx2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sy2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "name": "bgcolor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "name": "observer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "drawImage",
      "comment": "Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface. Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient. This method returns immediately in all cases, even if the image area to be drawn has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then drawImage returns false. As more of the image becomes available, the process that loads the image notifies the specified image observer. This method always uses the unscaled version of the image to render the scaled rectangle and performs the required scaling on the fly. It does not use a cached, scaled version of the image for this operation. Scaling of the image from source to destination is performed such that the first coordinate of the source rectangle is mapped to the first coordinate of the destination rectangle, and the second source coordinate is mapped to the second destination coordinate. The subimage is scaled and flipped as needed to preserve those mappings.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image,int,int,int,int,int)\"\u003e\u003ccode\u003eImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified image to be drawn. This method does nothing if \n\u003ccode\u003eimg\u003c/code\u003e is null.",
          "\u003ccode\u003edx1\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the first corner of the destination rectangle.",
          "\u003ccode\u003edy1\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the first corner of the destination rectangle.",
          "\u003ccode\u003edx2\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the second corner of the destination rectangle.",
          "\u003ccode\u003edy2\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the second corner of the destination rectangle.",
          "\u003ccode\u003esx1\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the first corner of the source rectangle.",
          "\u003ccode\u003esy1\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the first corner of the source rectangle.",
          "\u003ccode\u003esx2\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the second corner of the source rectangle.",
          "\u003ccode\u003esy2\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the second corner of the source rectangle.",
          "\u003ccode\u003ebgcolor\u003c/code\u003e - the background color to paint under the non-opaque portions of the image.",
          "\u003ccode\u003eobserver\u003c/code\u003e - object to be notified as more of the image is scaled and converted."
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the image pixels are still changing; \n\u003ccode\u003etrue\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "dispose",
      "comment": "Disposes of this graphics context and releases any system resources that it is using. A Graphics object cannot be used after dispose has been called. When a Java program runs, a large number of Graphics objects can be created within a short time frame. Although the finalization process of the garbage collector also disposes of the same system resources, it is preferable to manually free the associated resources by calling this method rather than to rely on a finalization process which may not run to completion for a long period of time. Graphics objects which are provided as arguments to the paint and update methods of components are automatically released by the system when those methods return. For efficiency, programmers should call dispose when finished using a Graphics object only if it was created directly from a component or another Graphics object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#finalize()\"\u003e\u003ccode\u003efinalize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#paint(java.awt.Graphics)\"\u003e\u003ccode\u003eComponent.paint(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#update(java.awt.Graphics)\"\u003e\u003ccode\u003eComponent.update(java.awt.Graphics)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getGraphics()\"\u003e\u003ccode\u003eComponent.getGraphics()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#create()\"\u003e\u003ccode\u003ecreate()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "finalize",
      "comment": "Disposes of this graphics context once it is no longer referenced.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#dispose()\"\u003e\u003ccode\u003edispose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#finalize()\"\u003efinalize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String object representing this Graphics object\u0027s value.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this graphics context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClipRect",
      "comment": "Returns the bounding rectangle of the current clipping area.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the bounding rectangle of the current clipping area or \n\u003ccode\u003enull\u003c/code\u003e if no clip is set."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "height",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hitClip",
      "comment": "Returns true if the specified rectangular area might intersect the current clipping area. The coordinates of the specified rectangular area are in the user coordinate space and are relative to the coordinate system origin of this graphics context. This method may use an algorithm that calculates a result quickly but which sometimes might return true even if the specified rectangular area does not intersect the clipping area. The specific algorithm employed may thus trade off accuracy for speed, but it will never return false unless it can guarantee that the specified rectangular area does not intersect the current clipping area. The clipping area used by this method can represent the intersection of the user clip as specified through the clip methods of this graphics context as well as the clipping associated with the device or image bounds and window visibility.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the x coordinate of the rectangle to test against the clip",
          "\u003ccode\u003ey\u003c/code\u003e - the y coordinate of the rectangle to test against the clip",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle to test against the clip",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle to test against the clip"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified rectangle intersects the bounds of the current clip; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "name": "r",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClipBounds",
      "comment": "Returns the bounding rectangle of the current clipping area. The coordinates in the rectangle are relative to the coordinate system origin of this graphics context. This method differs from getClipBounds in that an existing rectangle is used instead of allocating a new one. This method refers to the user clip, which is independent of the clipping associated with device bounds and window visibility. If no clip has previously been set, or if the clip has been cleared using setClip(null), this method returns the specified Rectangle.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the rectangle where the current clipping area is copied to. Any current values in this rectangle are overwritten."
        ],
        "return": [
          "the bounding rectangle of the current clipping area."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new Graphics object. This constructor is the default constructor for a graphics context. Since Graphics is an abstract class, applications cannot call this constructor directly. Graphics contexts are obtained from other graphics contexts or are created by calling getGraphics on a component.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#create()\"\u003e\u003ccode\u003ecreate()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getGraphics()\"\u003e\u003ccode\u003eComponent.getGraphics()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.Graphics",
  "comment": "The \n\u003ccode\u003eGraphics\u003c/code\u003e class is the abstract base class for all graphics contexts that allow an application to draw onto components that are realized on various devices, as well as onto off-screen images. \n\u003cp\u003e A \u003ccode\u003eGraphics\u003c/code\u003e object encapsulates state information needed for the basic rendering operations that Java supports. This state information includes the following properties: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe \u003ccode\u003eComponent\u003c/code\u003e object on which to draw. \u003c/li\u003e\n \u003cli\u003eA translation origin for rendering and clipping coordinates. \u003c/li\u003e\n \u003cli\u003eThe current clip. \u003c/li\u003e\n \u003cli\u003eThe current color. \u003c/li\u003e\n \u003cli\u003eThe current font. \u003c/li\u003e\n \u003cli\u003eThe current logical pixel operation function (XOR or Paint). \u003c/li\u003e\n \u003cli\u003eThe current XOR alternation color (see \u003ca href\u003d\"#setXORMode(java.awt.Color)\"\u003e\u003ccode\u003esetXORMode(java.awt.Color)\u003c/code\u003e\u003c/a\u003e). \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Coordinates are infinitely thin and lie between the pixels of the output device. Operations that draw the outline of a figure operate by traversing an infinitely thin path between pixels with a pixel-sized pen that hangs down and to the right of the anchor point on the path. Operations that fill a figure operate by filling the interior of that infinitely thin path. Operations that render horizontal text render the ascending portion of character glyphs entirely above the baseline coordinate. \u003c/p\u003e\n\u003cp\u003e The graphics pen hangs down and to the right from the path it traverses. This has the following implications: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eIf you draw a figure that covers a given rectangle, that figure occupies one extra row of pixels on the right and bottom edges as compared to filling a figure that is bounded by that same rectangle. \u003c/li\u003e\n \u003cli\u003eIf you draw a horizontal line along the same \u003ci\u003ey\u003c/i\u003e coordinate as the baseline of a line of text, that line is drawn entirely below the text, except for any descenders. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e All coordinates that appear as arguments to the methods of this \u003ccode\u003eGraphics\u003c/code\u003e object are considered relative to the translation origin of this \u003ccode\u003eGraphics\u003c/code\u003e object prior to the invocation of the method. \u003c/p\u003e\n\u003cp\u003e All rendering operations modify only pixels which lie within the area bounded by the current clip, which is specified by a \u003ca href\u003d\"Shape.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eShape\u003c/code\u003e\u003c/a\u003e in user space and is controlled by the program using the \u003ccode\u003eGraphics\u003c/code\u003e object. This \u003ci\u003euser clip\u003c/i\u003e is transformed into device space and combined with the \u003ci\u003edevice clip\u003c/i\u003e, which is defined by the visibility of windows and device extents. The combination of the user clip and device clip defines the \u003ci\u003ecomposite clip\u003c/i\u003e, which determines the final clipping region. The user clip cannot be modified by the rendering system to reflect the resulting composite clip. The user clip can only be changed through the \u003ccode\u003esetClip\u003c/code\u003e or \u003ccode\u003eclipRect\u003c/code\u003e methods. All drawing or writing is done in the current color, using the current paint mode, and in the current font.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#clipRect(int,int,int,int)\"\u003e\u003ccode\u003eclipRect(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setColor(java.awt.Color)\"\u003e\u003ccode\u003esetColor(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setPaintMode()\"\u003e\u003ccode\u003esetPaintMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setXORMode(java.awt.Color)\"\u003e\u003ccode\u003esetXORMode(java.awt.Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html#setFont(java.awt.Font)\"\u003e\u003ccode\u003esetFont(java.awt.Font)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}