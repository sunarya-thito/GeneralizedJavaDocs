{
  "packageName": "java.awt.font",
  "simpleName": "GlyphMetrics",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "STANDARD",
      "comment": "Indicates a glyph that represents a single standard character.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.STANDARD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LIGATURE",
      "comment": "Indicates a glyph that represents multiple characters as a ligature, for example \u0027fi\u0027 or \u0027ffi\u0027. It is followed by filler glyphs for the remaining characters. Filler and combining glyphs can be intermixed to control positioning of accent marks on the logically preceding ligature.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.LIGATURE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COMBINING",
      "comment": "Indicates a glyph that represents a combining character, such as an umlaut. There is no caret position between this glyph and the preceding glyph.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.COMBINING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COMPONENT",
      "comment": "Indicates a glyph with no corresponding character in the backing store. The glyph is associated with the character represented by the logically preceding non-component glyph. This is used for kashida justification or other visual modifications to existing glyphs. There is no caret position between this glyph and the preceding glyph.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.COMPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHITESPACE",
      "comment": "Indicates a glyph with no visual representation. It can be added to the other code values to indicate an invisible glyph.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.WHITESPACE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvance",
      "comment": "Returns the advance of the glyph along the baseline (either horizontal or vertical).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the advance of the glyph"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvanceX",
      "comment": "Returns the x-component of the advance of the glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the x-component of the advance of the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvanceY",
      "comment": "Returns the y-component of the advance of the glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the y-component of the advance of the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds2D",
      "comment": "Returns the bounds of the glyph. This is the bounding box of the glyph outline. Because of rasterization and pixel alignment effects, it does not necessarily enclose the pixels that are affected when rendering the glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Rectangle2D.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eRectangle2D\u003c/code\u003e\u003c/a\u003e that is the bounds of the glyph."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLSB",
      "comment": "Returns the left (top) side bearing of the glyph. This is the distance from 0, 0 to the left (top) of the glyph bounds. If the bounds of the glyph is to the left of (above) the origin, the LSB is negative.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the left side bearing of the glyph."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRSB",
      "comment": "Returns the right (bottom) side bearing of the glyph. This is the distance from the right (bottom) of the glyph bounds to the advance. If the bounds of the glyph is to the right of (below) the advance, the RSB is negative.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the right side bearing of the glyph."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Returns the raw glyph type code.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the raw glyph type code."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isStandard",
      "comment": "Returns true if this is a standard glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a standard glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLigature",
      "comment": "Returns true if this is a ligature glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a ligature glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCombining",
      "comment": "Returns true if this is a combining glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a combining glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isComponent",
      "comment": "Returns true if this is a component glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a component glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWhitespace",
      "comment": "Returns true if this is a whitespace glyph.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a whitespace glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "advance",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "name": "bounds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "name": "glyphType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a GlyphMetrics object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eadvance\u003c/code\u003e - the advance width of the glyph",
          "\u003ccode\u003ebounds\u003c/code\u003e - the black box bounds of the glyph",
          "\u003ccode\u003eglyphType\u003c/code\u003e - the type of the glyph"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "horizontal",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "advanceX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "advanceY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "name": "bounds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "name": "glyphType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a GlyphMetrics object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehorizontal\u003c/code\u003e - if true, metrics are for a horizontal baseline, otherwise they are for a vertical baseline",
          "\u003ccode\u003eadvanceX\u003c/code\u003e - the X-component of the glyph\u0027s advance",
          "\u003ccode\u003eadvanceY\u003c/code\u003e - the Y-component of the glyph\u0027s advance",
          "\u003ccode\u003ebounds\u003c/code\u003e - the visual bounds of the glyph",
          "\u003ccode\u003eglyphType\u003c/code\u003e - the type of the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.GlyphMetrics",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphVector\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}