{
  "packageName": "java.awt.font",
  "simpleName": "GlyphMetrics",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "STANDARD",
      "comment": "Indicates a glyph that represents a single standard character.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.STANDARD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LIGATURE",
      "comment": "Indicates a glyph that represents multiple characters as a ligature, for example \u0027fi\u0027 or \u0027ffi\u0027. It is followed by filler glyphs for the remaining characters. Filler and combining glyphs can be intermixed to control positioning of accent marks on the logically preceding ligature.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.LIGATURE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COMBINING",
      "comment": "Indicates a glyph that represents a combining character, such as an umlaut. There is no caret position between this glyph and the preceding glyph.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.COMBINING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COMPONENT",
      "comment": "Indicates a glyph with no corresponding character in the backing store. The glyph is associated with the character represented by the logically preceding non-component glyph. This is used for kashida justification or other visual modifications to existing glyphs. There is no caret position between this glyph and the preceding glyph.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.COMPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHITESPACE",
      "comment": "Indicates a glyph with no visual representation. It can be added to the other code values to indicate an invisible glyph.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphMetrics.WHITESPACE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvance",
      "comment": "Returns the advance of the glyph along the baseline (either horizontal or vertical).",
      "tagMap": {
        "return": [
          "the advance of the glyph"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvanceX",
      "comment": "Returns the x-component of the advance of the glyph.",
      "tagMap": {
        "return": [
          "the x-component of the advance of the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvanceY",
      "comment": "Returns the y-component of the advance of the glyph.",
      "tagMap": {
        "return": [
          "the y-component of the advance of the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds2D",
      "comment": "Returns the bounds of the glyph. This is the bounding box of the glyph outline. Because of rasterization and pixel alignment effects, it does not necessarily enclose the pixels that are affected when rendering the glyph.",
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Rectangle2D.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eRectangle2D\u003c/code\u003e\u003c/a\u003e that is the bounds of the glyph."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLSB",
      "comment": "Returns the left (top) side bearing of the glyph. This is the distance from 0, 0 to the left (top) of the glyph bounds. If the bounds of the glyph is to the left of (above) the origin, the LSB is negative.",
      "tagMap": {
        "return": [
          "the left side bearing of the glyph."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRSB",
      "comment": "Returns the right (bottom) side bearing of the glyph. This is the distance from the right (bottom) of the glyph bounds to the advance. If the bounds of the glyph is to the right of (below) the advance, the RSB is negative.",
      "tagMap": {
        "return": [
          "the right side bearing of the glyph."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Returns the raw glyph type code.",
      "tagMap": {
        "return": [
          "the raw glyph type code."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isStandard",
      "comment": "Returns true if this is a standard glyph.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a standard glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLigature",
      "comment": "Returns true if this is a ligature glyph.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a ligature glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCombining",
      "comment": "Returns true if this is a combining glyph.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a combining glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isComponent",
      "comment": "Returns true if this is a component glyph.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a component glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWhitespace",
      "comment": "Returns true if this is a whitespace glyph.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is a whitespace glyph; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "advance"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "glyphType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a GlyphMetrics object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eadvance\u003c/code\u003e - the advance width of the glyph",
          "\u003ccode\u003ebounds\u003c/code\u003e - the black box bounds of the glyph",
          "\u003ccode\u003eglyphType\u003c/code\u003e - the type of the glyph"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "horizontal"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "advanceX"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "advanceY"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "field": {
            "name": "bounds"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "glyphType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a GlyphMetrics object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehorizontal\u003c/code\u003e - if true, metrics are for a horizontal baseline, otherwise they are for a vertical baseline",
          "\u003ccode\u003eadvanceX\u003c/code\u003e - the X-component of the glyph\u0027s advance",
          "\u003ccode\u003eadvanceY\u003c/code\u003e - the Y-component of the glyph\u0027s advance",
          "\u003ccode\u003ebounds\u003c/code\u003e - the visual bounds of the glyph",
          "\u003ccode\u003eglyphType\u003c/code\u003e - the type of the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.GlyphMetrics",
  "comment": "The \n\u003ccode\u003eGlyphMetrics\u003c/code\u003e class represents information for a single glyph. A glyph is the visual representation of one or more characters. Many different glyphs can be used to represent a single character or combination of characters. \n\u003ccode\u003eGlyphMetrics\u003c/code\u003e instances are produced by \n\u003ca href\u003d\"../Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e and are applicable to a specific glyph in a particular \n\u003ccode\u003eFont\u003c/code\u003e. \n\u003cp\u003e Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eSTANDARD glyphs are commonly used to represent single characters. \u003c/li\u003e\n \u003cli\u003eLIGATURE glyphs are used to represent sequences of characters. \u003c/li\u003e\n \u003cli\u003eCOMPONENT glyphs in a \u003ca href\u003d\"GlyphVector.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphVector\u003c/code\u003e\u003c/a\u003e do not correspond to a particular character in a text model. Instead, COMPONENT glyphs are added for typographical reasons, such as Arabic justification. \u003c/li\u003e\n \u003cli\u003eCOMBINING glyphs embellish STANDARD or LIGATURE glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Other metrics available through \u003ccode\u003eGlyphMetrics\u003c/code\u003e are the components of the advance, the visual bounds, and the left and right side bearings. \u003c/p\u003e\n\u003cp\u003e Glyphs for a rotated font, or obtained from a \u003ccode\u003eGlyphVector\u003c/code\u003e which has applied a rotation to the glyph, can have advances that contain both X and Y components. Usually the advance only has one component. \u003c/p\u003e\n\u003cp\u003e The advance of a glyph is the distance from the glyph\u0027s origin to the origin of the next glyph along the baseline, which is either vertical or horizontal. Note that, in a \u003ccode\u003eGlyphVector\u003c/code\u003e, the distance from a glyph to its following glyph might not be the glyph\u0027s advance, because of kerning or other positioning adjustments. \u003c/p\u003e\n\u003cp\u003e The bounds is the smallest rectangle that completely contains the outline of the glyph. The bounds rectangle is relative to the glyph\u0027s origin. The left-side bearing is the distance from the glyph origin to the left of its bounds rectangle. If the left-side bearing is negative, part of the glyph is drawn to the left of its origin. The right-side bearing is the distance from the right side of the bounds rectangle to the next glyph origin (the origin plus the advance). If negative, part of the glyph is drawn to the right of the next glyph\u0027s origin. Note that the bounds does not necessarily enclose all the pixels affected when rendering the glyph, because of rasterization and pixel adjustment effects. \u003c/p\u003e\n\u003cp\u003e Although instances of \u003ccode\u003eGlyphMetrics\u003c/code\u003e can be directly constructed, they are almost always obtained from a \u003ccode\u003eGlyphVector\u003c/code\u003e. Once constructed, \u003ccode\u003eGlyphMetrics\u003c/code\u003e objects are immutable. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eExample\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003e Querying a \u003ccode\u003eFont\u003c/code\u003e for glyph information \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e Font font \u003d ...;\n int glyphIndex \u003d ...;\n GlyphMetrics metrics \u003d GlyphVector.getGlyphMetrics(glyphIndex);\n int isStandard \u003d metrics.isStandard();\n float glyphAdvance \u003d metrics.getAdvance();\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphVector\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}