{
  "packageName": "java.awt.font",
  "simpleName": "TextAttribute",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.text.AttributedCharacterIterator$Attribute",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FAMILY",
      "comment": "Attribute key for the font name. Values are instances of String. The default value is \"Default\", which causes the platform default font family to be used. The Font class defines constants for the logical font names DIALOG, DIALOG_INPUT, SANS_SERIF, SERIF, and MONOSPACED. This defines the value passed as name to the Font constructor. Both logical and physical font names are allowed. If a font with the requested name is not found, the default font is used. Note: This attribute is unfortunately misnamed, as it specifies the face name and not just the family. Thus values such as \"Lucida Sans Bold\" will select that face if it exists. Note, though, that if the requested face does not exist, the default will be used with regular weight. The \"Bold\" in the name is part of the face name, not a separate request that the font\u0027s weight be bold.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT",
      "comment": "Attribute key for the weight of a font. Values are instances of Number. The default value is WEIGHT_REGULAR. Several constant values are provided, see WEIGHT_EXTRA_LIGHT, WEIGHT_LIGHT, WEIGHT_DEMILIGHT, WEIGHT_REGULAR, WEIGHT_SEMIBOLD, WEIGHT_MEDIUM, WEIGHT_DEMIBOLD, WEIGHT_BOLD, WEIGHT_HEAVY, WEIGHT_EXTRABOLD, and WEIGHT_ULTRABOLD. The value WEIGHT_BOLD corresponds to the style value Font.BOLD as passed to the Font constructor. The value is roughly the ratio of the stem width to that of the regular weight. The system can interpolate the provided value.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_EXTRA_LIGHT",
      "comment": "The lightest predefined weight.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_LIGHT",
      "comment": "The standard light weight.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_DEMILIGHT",
      "comment": "An intermediate weight between WEIGHT_LIGHT and WEIGHT_STANDARD.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_REGULAR",
      "comment": "The standard weight. This is the default value for WEIGHT.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_SEMIBOLD",
      "comment": "A moderately heavier weight than WEIGHT_REGULAR.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_MEDIUM",
      "comment": "An intermediate weight between WEIGHT_REGULAR and WEIGHT_BOLD.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_DEMIBOLD",
      "comment": "A moderately lighter weight than WEIGHT_BOLD.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_BOLD",
      "comment": "The standard bold weight.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_HEAVY",
      "comment": "A moderately heavier weight than WEIGHT_BOLD.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_EXTRABOLD",
      "comment": "An extra heavy weight.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEIGHT_ULTRABOLD",
      "comment": "The heaviest predefined weight.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WIDTH",
      "comment": "Attribute key for the width of a font. Values are instances of Number. The default value is WIDTH_REGULAR. Several constant values are provided, see WIDTH_CONDENSED, WIDTH_SEMI_CONDENSED, WIDTH_REGULAR, WIDTH_SEMI_EXTENDED, WIDTH_EXTENDED. The value is roughly the ratio of the advance width to that of the regular width. The system can interpolate the provided value.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WIDTH_CONDENSED",
      "comment": "The most condensed predefined width.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH\"\u003e\u003ccode\u003eWIDTH\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WIDTH_SEMI_CONDENSED",
      "comment": "A moderately condensed width.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH\"\u003e\u003ccode\u003eWIDTH\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WIDTH_REGULAR",
      "comment": "The standard width. This is the default value for WIDTH.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH\"\u003e\u003ccode\u003eWIDTH\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WIDTH_SEMI_EXTENDED",
      "comment": "A moderately extended width.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH\"\u003e\u003ccode\u003eWIDTH\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WIDTH_EXTENDED",
      "comment": "The most extended predefined width.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#WIDTH\"\u003e\u003ccode\u003eWIDTH\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "POSTURE",
      "comment": "Attribute key for the posture of a font. Values are instances of Number. The default value is POSTURE_REGULAR. Two constant values are provided, POSTURE_REGULAR and POSTURE_OBLIQUE. The value POSTURE_OBLIQUE corresponds to the style value Font.ITALIC as passed to the Font constructor. The value is roughly the slope of the stems of the font, expressed as the run over the rise. Positive values lean right. The system can interpolate the provided value. This will affect the font\u0027s italic angle as returned by Font.getItalicAngle.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getItalicAngle()\"\u003e\u003ccode\u003eFont.getItalicAngle()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "POSTURE_REGULAR",
      "comment": "The standard posture, upright. This is the default value for POSTURE.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#POSTURE\"\u003e\u003ccode\u003ePOSTURE\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "POSTURE_OBLIQUE",
      "comment": "The standard italic posture.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#POSTURE\"\u003e\u003ccode\u003ePOSTURE\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIZE",
      "comment": "Attribute key for the font size. Values are instances of Number. The default value is 12pt. This corresponds to the size parameter to the Font constructor. Very large or small sizes will impact rendering performance, and the rendering system might not render text at these sizes. Negative sizes are illegal and result in the default size. Note that the appearance and metrics of a 12pt font with a 2x transform might be different than that of a 24 point font with no transform.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TRANSFORM",
      "comment": "Attribute key for the transform of a font. Values are instances of TransformAttribute. The default value is TransformAttribute.IDENTITY. The TransformAttribute class defines the constant IDENTITY. This corresponds to the transform passed to Font.deriveFont(AffineTransform). Since that transform is mutable and TextAttribute values must not be, the TransformAttribute wrapper class is used. The primary intent is to support scaling and skewing, though other effects are possible. Some transforms will cause the baseline to be rotated and/or shifted. The text and the baseline are transformed together so that the text follows the new baseline. For example, with text on a horizontal baseline, the new baseline follows the direction of the unit x vector passed through the transform. Text metrics are measured against this new baseline. So, for example, with other things being equal, text rendered with a rotated TRANSFORM and an unrotated TRANSFORM will measure as having the same ascent, descent, and advance. In styled text, the baselines for each such run are aligned one after the other to potentially create a non-linear baseline for the entire run of text. For more information, see TextLayout.getLayoutPath().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TransformAttribute.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTransformAttribute\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SUPERSCRIPT",
      "comment": "Attribute key for superscripting and subscripting. Values are instances of Integer. The default value is 0, which means that no superscript or subscript is used. Two constant values are provided, see SUPERSCRIPT_SUPER and SUPERSCRIPT_SUB. These have the values 1 and -1 respectively. Values of greater magnitude define greater levels of superscript or subscripting, for example, 2 corresponds to super-superscript, 3 to super-super-superscript, and similarly for negative values and subscript, up to a level of 7 (or -7). Values beyond this range are reserved; behavior is platform-dependent. SUPERSCRIPT can impact the ascent and descent of a font. The ascent and descent can never become negative, however.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SUPERSCRIPT_SUPER",
      "comment": "Standard superscript.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#SUPERSCRIPT\"\u003e\u003ccode\u003eSUPERSCRIPT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SUPERSCRIPT_SUB",
      "comment": "Standard subscript.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#SUPERSCRIPT\"\u003e\u003ccode\u003eSUPERSCRIPT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FONT",
      "comment": "Attribute key used to provide the font to use to render text. Values are instances of Font. The default value is null, indicating that normal resolution of a Font from attributes should be performed. TextLayout and AttributedCharacterIterator work in terms of Maps of TextAttributes. Normally, all the attributes are examined and used to select and configure a Font instance. If a FONT attribute is present, though, its associated Font will be used. This provides a way for users to override the resolution of font attributes into a Font, or force use of a particular Font instance. This also allows users to specify subclasses of Font in cases where a Font can be subclassed. FONT is used for special situations where clients already have a Font instance but still need to use Map-based APIs. Typically, there will be no other attributes in the Map except the FONT attribute. With Map-based APIs the common case is to specify all attributes individually, so FONT is not needed or desirable. However, if both FONT and other attributes are present in the Map, the rendering system will merge the attributes defined in the Font with the additional attributes. This merging process classifies TextAttributes into two groups. One group, the \u0027primary\u0027 group, is considered fundamental to the selection and metric behavior of a font. These attributes are FAMILY, WEIGHT, WIDTH, POSTURE, SIZE, TRANSFORM, SUPERSCRIPT, and TRACKING. The other group, the \u0027secondary\u0027 group, consists of all other defined attributes, with the exception of FONT itself. To generate the new Map, first the Font is obtained from the FONT attribute, and all of its attributes extracted into a new Map. Then only the secondary attributes from the original Map are added to those in the new Map. Thus the values of primary attributes come solely from the Font, and the values of secondary attributes originate with the Font but can be overridden by other values in the Map. Note:Font\u0027s Map-based constructor and deriveFont methods do not process the FONT attribute, as these are used to create new Font objects. Instead, Font.getFont(Map) should be used to handle the FONT attribute.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CHAR_REPLACEMENT",
      "comment": "Attribute key for a user-defined glyph to display in lieu of the font\u0027s standard glyph for a character. Values are instances of GraphicAttribute. The default value is null, indicating that the standard glyphs provided by the font should be used. This attribute is used to reserve space for a graphic or other component embedded in a line of text. It is required for correct positioning of \u0027inline\u0027 components within a line when bidirectional reordering (see Bidi) is performed. Each character (Unicode code point) will be rendered using the provided GraphicAttribute. Typically, the characters to which this attribute is applied should be \\uFFFC. The GraphicAttribute determines the logical and visual bounds of the text; the actual Font values are ignored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GraphicAttribute.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGraphicAttribute\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FOREGROUND",
      "comment": "Attribute key for the paint used to render the text. Values are instances of Paint. The default value is null, indicating that the Paint set on the Graphics2D at the time of rendering is used. Glyphs will be rendered using this Paint regardless of the Paint value set on the Graphics (but see SWAP_COLORS).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Paint.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003ePaint\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#SWAP_COLORS\"\u003e\u003ccode\u003eSWAP_COLORS\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BACKGROUND",
      "comment": "Attribute key for the paint used to render the background of the text. Values are instances of Paint. The default value is null, indicating that the background should not be rendered. The logical bounds of the text will be filled using this Paint, and then the text will be rendered on top of it (but see SWAP_COLORS). The visual bounds of the text is extended to include the logical bounds, if necessary. The outline is not affected.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Paint.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003ePaint\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#SWAP_COLORS\"\u003e\u003ccode\u003eSWAP_COLORS\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE",
      "comment": "Attribute key for underline. Values are instances of Integer. The default value is -1, which means no underline. The constant value UNDERLINE_ON is provided. The underline affects both the visual bounds and the outline of the text.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE_ON",
      "comment": "Standard underline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#UNDERLINE\"\u003e\u003ccode\u003eUNDERLINE\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "STRIKETHROUGH",
      "comment": "Attribute key for strikethrough. Values are instances of Boolean. The default value is false, which means no strikethrough. The constant value STRIKETHROUGH_ON is provided. The strikethrough affects both the visual bounds and the outline of the text.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "STRIKETHROUGH_ON",
      "comment": "A single strikethrough.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#STRIKETHROUGH\"\u003e\u003ccode\u003eSTRIKETHROUGH\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "RUN_DIRECTION",
      "comment": "Attribute key for the run direction of the line. Values are instances of Boolean. The default value is null, which indicates that the standard Bidi algorithm for determining run direction should be used with the value Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT. The constants RUN_DIRECTION_RTL and RUN_DIRECTION_LTR are provided. This determines the value passed to the Bidi constructor to select the primary direction of the text in the paragraph. Note: This attribute should have the same value for all the text in a paragraph, otherwise the behavior is undetermined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Bidi.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eBidi\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "RUN_DIRECTION_LTR",
      "comment": "Left-to-right run direction.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#RUN_DIRECTION\"\u003e\u003ccode\u003eRUN_DIRECTION\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "RUN_DIRECTION_RTL",
      "comment": "Right-to-left run direction.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#RUN_DIRECTION\"\u003e\u003ccode\u003eRUN_DIRECTION\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BIDI_EMBEDDING",
      "comment": "Attribute key for the embedding level of the text. Values are instances of Integer. The default value is null, indicating that the Bidirectional algorithm should run without explicit embeddings. Positive values 1 through 61 are embedding levels, negative values -1 through -61 are override levels. The value 0 means that the base line direction is used. These levels are passed in the embedding levels array to the Bidi constructor. Note: When this attribute is present anywhere in a paragraph, then any Unicode bidi control characters (RLO, LRO, RLE, LRE, and PDF) in the paragraph are disregarded, and runs of text where this attribute is not present are treated as though it were present and had the value 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Bidi.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eBidi\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JUSTIFICATION",
      "comment": "Attribute key for the justification of a paragraph. Values are instances of Number. The default value is 1, indicating that justification should use the full width provided. Values are pinned to the range [0..1]. The constants JUSTIFICATION_FULL and JUSTIFICATION_NONE are provided. Specifies the fraction of the extra space to use when justification is requested on a TextLayout. For example, if the line is 50 points wide and it is requested to justify to 70 points, a value of 0.75 will pad to use three-quarters of the remaining space, or 15 points, so that the resulting line will be 65 points in length. Note: This should have the same value for all the text in a paragraph, otherwise the behavior is undetermined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html#getJustifiedLayout(float)\"\u003e\u003ccode\u003eTextLayout.getJustifiedLayout(float)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JUSTIFICATION_FULL",
      "comment": "Justify the line to the full requested width. This is the default value for JUSTIFICATION.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#JUSTIFICATION\"\u003e\u003ccode\u003eJUSTIFICATION\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JUSTIFICATION_NONE",
      "comment": "Do not allow the line to be justified.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#JUSTIFICATION\"\u003e\u003ccode\u003eJUSTIFICATION\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INPUT_METHOD_HIGHLIGHT",
      "comment": "Attribute key for input method highlight styles. Values are instances of InputMethodHighlight or Annotation. The default value is null, which means that input method styles should not be applied before rendering. If adjacent runs of text with the same InputMethodHighlight need to be rendered separately, the InputMethodHighlights should be wrapped in Annotation instances. Input method highlights are used while text is being composed by an input method. Text editing components should retain them even if they generally only deal with unstyled text, and make them available to the drawing routines.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/im/InputMethodHighlight.html\" title\u003d\"class in java.awt.im\"\u003e\u003ccode\u003eInputMethodHighlight\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Annotation.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eAnnotation\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INPUT_METHOD_UNDERLINE",
      "comment": "Attribute key for input method underlines. Values are instances of Integer. The default value is -1, which means no underline. Several constant values are provided, see UNDERLINE_LOW_ONE_PIXEL, UNDERLINE_LOW_TWO_PIXEL, UNDERLINE_LOW_DOTTED, UNDERLINE_LOW_GRAY, and UNDERLINE_LOW_DASHED. This may be used in conjunction with UNDERLINE if desired. The primary purpose is for use by input methods. Other use of these underlines for simple ornamentation might confuse users. The input method underline affects both the visual bounds and the outline of the text.",
      "tagMap": {
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE_LOW_ONE_PIXEL",
      "comment": "Single pixel solid low underline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_UNDERLINE\"\u003e\u003ccode\u003eINPUT_METHOD_UNDERLINE\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE_LOW_TWO_PIXEL",
      "comment": "Double pixel solid low underline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_UNDERLINE\"\u003e\u003ccode\u003eINPUT_METHOD_UNDERLINE\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE_LOW_DOTTED",
      "comment": "Single pixel dotted low underline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_UNDERLINE\"\u003e\u003ccode\u003eINPUT_METHOD_UNDERLINE\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE_LOW_GRAY",
      "comment": "Double pixel gray low underline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_UNDERLINE\"\u003e\u003ccode\u003eINPUT_METHOD_UNDERLINE\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDERLINE_LOW_DASHED",
      "comment": "Single pixel dashed low underline.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#INPUT_METHOD_UNDERLINE\"\u003e\u003ccode\u003eINPUT_METHOD_UNDERLINE\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SWAP_COLORS",
      "comment": "Attribute key for swapping foreground and background Paints. Values are instances of Boolean. The default value is false, which means do not swap colors. The constant value SWAP_COLORS_ON is defined. If the FOREGROUND attribute is set, its Paint will be used as the background, otherwise the Paint currently on the Graphics will be used. If the BACKGROUND attribute is set, its Paint will be used as the foreground, otherwise the system will find a contrasting color to the (resolved) background so that the text will be visible.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#FOREGROUND\"\u003e\u003ccode\u003eFOREGROUND\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#BACKGROUND\"\u003e\u003ccode\u003eBACKGROUND\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SWAP_COLORS_ON",
      "comment": "Swap foreground and background.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#SWAP_COLORS\"\u003e\u003ccode\u003eSWAP_COLORS\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NUMERIC_SHAPING",
      "comment": "Attribute key for converting ASCII decimal digits to other decimal ranges. Values are instances of NumericShaper. The default is null, which means do not perform numeric shaping. When a numeric shaper is defined, the text is first processed by the shaper before any other analysis of the text is performed. Note: This should have the same value for all the text in the paragraph, otherwise the behavior is undetermined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/NumericShaper.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eNumericShaper\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "KERNING",
      "comment": "Attribute key to request kerning. Values are instances of Integer. The default value is 0, which does not request kerning. The constant value KERNING_ON is provided. The default advances of single characters are not appropriate for some character sequences, for example \"To\" or \"AWAY\". Without kerning the adjacent characters appear to be separated by too much space. Kerning causes selected sequences of characters to be spaced differently for a more pleasing visual appearance.",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "KERNING_ON",
      "comment": "Request standard kerning.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#KERNING\"\u003e\u003ccode\u003eKERNING\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LIGATURES",
      "comment": "Attribute key for enabling optional ligatures. Values are instances of Integer. The default value is 0, which means do not use optional ligatures. The constant value LIGATURES_ON is defined. Ligatures required by the writing system are always enabled.",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LIGATURES_ON",
      "comment": "Request standard optional ligatures.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#LIGATURES\"\u003e\u003ccode\u003eLIGATURES\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.font.TextAttribute",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TRACKING",
      "comment": "Attribute key to control tracking. Values are instances of Number. The default value is 0, which means no additional tracking. The constant values TRACKING_TIGHT and TRACKING_LOOSE are provided. The tracking value is multiplied by the font point size and passed through the font transform to determine an additional amount to add to the advance of each glyph cluster. Positive tracking values will inhibit formation of optional ligatures. Tracking values are typically between -0.1 and 0.3; values outside this range are generally not desirable.",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TRACKING_TIGHT",
      "comment": "Perform tight tracking.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#TRACKING\"\u003e\u003ccode\u003eTRACKING\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TRACKING_LOOSE",
      "comment": "Perform loose tracking.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#TRACKING\"\u003e\u003ccode\u003eTRACKING\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.InvalidObjectException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "readResolve",
      "comment": "Resolves instances being deserialized to the predefined constants.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/AttributedCharacterIterator.Attribute.html#readResolve()\"\u003ereadResolve\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/AttributedCharacterIterator.Attribute.html\" title\u003d\"class in java.text\"\u003eAttributedCharacterIterator.Attribute\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InvalidObjectException.html\" title\u003d\"class in java.io\"\u003eInvalidObjectException\u003c/a\u003e\u003c/code\u003e - if the object to resolve is not an instance of \n\u003ccode\u003eAttribute\u003c/code\u003e"
        ],
        "return": [
          "the resolved \n\u003ccode\u003eAttribute\u003c/code\u003e object"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a TextAttribute with the specified name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the attribute name to assign to this \n\u003ccode\u003eTextAttribute\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.TextAttribute",
  "comment": "The \n\u003ccode\u003eTextAttribute\u003c/code\u003e class defines attribute keys and attribute values used for text rendering. \n\u003cp\u003e \u003ccode\u003eTextAttribute\u003c/code\u003e instances are used as attribute keys to identify attributes in \u003ca href\u003d\"../Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"../../../../java.base/java/text/AttributedCharacterIterator.html\" title\u003d\"interface in java.text\"\u003e\u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e\u003c/a\u003e, and other classes handling text attributes. Other constants defined in this class can be used as attribute values. \u003c/p\u003e\n\u003cp\u003e For each text attribute, the documentation provides: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003ethe type of its value, \u003c/li\u003e\n \u003cli\u003ethe relevant predefined constants, if any \u003c/li\u003e\n \u003cli\u003ethe default effect if the attribute is absent \u003c/li\u003e\n \u003cli\u003ethe valid values if there are limitations \u003c/li\u003e\n \u003cli\u003ea description of the effect. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eValues\u003c/h2\u003e \n\u003cul\u003e \n \u003cli\u003eThe values of attributes must always be immutable. \u003c/li\u003e\n \u003cli\u003eWhere value limitations are given, any value outside of that set is reserved for future use; the value will be treated as the default. \u003c/li\u003e\n \u003cli\u003eThe value \u003ccode\u003enull\u003c/code\u003e is treated the same as the default value and results in the default behavior. \u003c/li\u003e\n \u003cli\u003eIf the value is not of the proper type, the attribute will be ignored. \u003c/li\u003e\n \u003cli\u003eThe identity of the value does not matter, only the actual value. For example, \u003ccode\u003eTextAttribute.WEIGHT_BOLD\u003c/code\u003e and \u003ccode\u003eFloat.valueOf(2.0f)\u003c/code\u003e indicate the same \u003ccode\u003eWEIGHT\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eAttribute values of type \u003ccode\u003eNumber\u003c/code\u003e (used for \u003ccode\u003eWEIGHT\u003c/code\u003e, \u003ccode\u003eWIDTH\u003c/code\u003e, \u003ccode\u003ePOSTURE\u003c/code\u003e, \u003ccode\u003eSIZE\u003c/code\u003e, \u003ccode\u003eJUSTIFICATION\u003c/code\u003e, and \u003ccode\u003eTRACKING\u003c/code\u003e) can vary along their natural range and are not restricted to the predefined constants. \u003ccode\u003eNumber.floatValue()\u003c/code\u003e is used to get the actual value from the \u003ccode\u003eNumber\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eThe values for \u003ccode\u003eWEIGHT\u003c/code\u003e, \u003ccode\u003eWIDTH\u003c/code\u003e, and \u003ccode\u003ePOSTURE\u003c/code\u003e are interpolated by the system, which can select the \u0027nearest available\u0027 font or use other techniques to approximate the user\u0027s request. \u003c/li\u003e\n\u003c/ul\u003e \n\u003ch3\u003eSummary of attributes\u003c/h3\u003e \n\u003ctable style\u003d\"width:95%;margin: 0px auto\" class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Key, value type, principal constants, and default value behavior of all TextAttributes\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eKey \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eValue Type \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003ePrincipal Constants \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eDefault Value \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#FAMILY\"\u003e\u003ccode\u003eFAMILY\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eString \u003c/td\u003e\n   \u003ctd\u003eSee Font \u003ca href\u003d\"../Font.html#DIALOG\"\u003e\u003ccode\u003eDIALOG\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"../Font.html#DIALOG_INPUT\"\u003e\u003ccode\u003eDIALOG_INPUT\u003c/code\u003e\u003c/a\u003e, \u003cbr\u003e \u003ca href\u003d\"../Font.html#SERIF\"\u003e\u003ccode\u003eSERIF\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"../Font.html#SANS_SERIF\"\u003e\u003ccode\u003eSANS_SERIF\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"../Font.html#MONOSPACED\"\u003e\u003ccode\u003eMONOSPACED\u003c/code\u003e\u003c/a\u003e. \u003c/td\u003e\n   \u003ctd\u003e\"Default\" (use platform default) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#WEIGHT\"\u003e\u003ccode\u003eWEIGHT\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eNumber \u003c/td\u003e\n   \u003ctd\u003eWEIGHT_REGULAR, WEIGHT_BOLD \u003c/td\u003e\n   \u003ctd\u003eWEIGHT_REGULAR \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#WIDTH\"\u003e\u003ccode\u003eWIDTH\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eNumber \u003c/td\u003e\n   \u003ctd\u003eWIDTH_CONDENSED, WIDTH_REGULAR,\u003cbr\u003eWIDTH_EXTENDED \u003c/td\u003e\n   \u003ctd\u003eWIDTH_REGULAR \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#POSTURE\"\u003e\u003ccode\u003ePOSTURE\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eNumber \u003c/td\u003e\n   \u003ctd\u003ePOSTURE_REGULAR, POSTURE_OBLIQUE \u003c/td\u003e\n   \u003ctd\u003ePOSTURE_REGULAR \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#SIZE\"\u003e\u003ccode\u003eSIZE\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eNumber \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003e12.0 \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#TRANSFORM\"\u003e\u003ccode\u003eTRANSFORM\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"TransformAttribute.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTransformAttribute\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003eSee TransformAttribute \u003ca href\u003d\"TransformAttribute.html#IDENTITY\"\u003e\u003ccode\u003eIDENTITY\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003eTransformAttribute.IDENTITY \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#SUPERSCRIPT\"\u003e\u003ccode\u003eSUPERSCRIPT\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eInteger \u003c/td\u003e\n   \u003ctd\u003eSUPERSCRIPT_SUPER, SUPERSCRIPT_SUB \u003c/td\u003e\n   \u003ctd\u003e0 (use the standard glyphs and metrics) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#FONT\"\u003e\u003ccode\u003eFONT\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"../Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003enull (do not override font resolution) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#CHAR_REPLACEMENT\"\u003e\u003ccode\u003eCHAR_REPLACEMENT\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"GraphicAttribute.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGraphicAttribute\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003enull (draw text using font glyphs) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#FOREGROUND\"\u003e\u003ccode\u003eFOREGROUND\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"../Paint.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003ePaint\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003enull (use current graphics paint) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#BACKGROUND\"\u003e\u003ccode\u003eBACKGROUND\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"../Paint.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003ePaint\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003enull (do not render background) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#UNDERLINE\"\u003e\u003ccode\u003eUNDERLINE\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eInteger \u003c/td\u003e\n   \u003ctd\u003eUNDERLINE_ON \u003c/td\u003e\n   \u003ctd\u003e-1 (do not render underline) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#STRIKETHROUGH\"\u003e\u003ccode\u003eSTRIKETHROUGH\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eBoolean \u003c/td\u003e\n   \u003ctd\u003eSTRIKETHROUGH_ON \u003c/td\u003e\n   \u003ctd\u003efalse (do not render strikethrough) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#RUN_DIRECTION\"\u003e\u003ccode\u003eRUN_DIRECTION\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eBoolean \u003c/td\u003e\n   \u003ctd\u003eRUN_DIRECTION_LTR\u003cbr\u003eRUN_DIRECTION_RTL \u003c/td\u003e\n   \u003ctd\u003enull (use \u003ca href\u003d\"../../../../java.base/java/text/Bidi.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eBidi\u003c/code\u003e\u003c/a\u003e standard default) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#BIDI_EMBEDDING\"\u003e\u003ccode\u003eBIDI_EMBEDDING\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eInteger \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003e0 (use base line direction) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#JUSTIFICATION\"\u003e\u003ccode\u003eJUSTIFICATION\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eNumber \u003c/td\u003e\n   \u003ctd\u003eJUSTIFICATION_FULL \u003c/td\u003e\n   \u003ctd\u003eJUSTIFICATION_FULL \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#INPUT_METHOD_HIGHLIGHT\"\u003e\u003ccode\u003eINPUT_METHOD_HIGHLIGHT\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"../im/InputMethodHighlight.html\" title\u003d\"class in java.awt.im\"\u003e\u003ccode\u003eInputMethodHighlight\u003c/code\u003e\u003c/a\u003e, \u003cbr\u003e \u003ca href\u003d\"../../../../java.base/java/text/Annotation.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eAnnotation\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003e(see class) \u003c/td\u003e\n   \u003ctd\u003enull (do not apply input highlighting) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#INPUT_METHOD_UNDERLINE\"\u003e\u003ccode\u003eINPUT_METHOD_UNDERLINE\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eInteger \u003c/td\u003e\n   \u003ctd\u003eUNDERLINE_LOW_ONE_PIXEL,\u003cbr\u003eUNDERLINE_LOW_TWO_PIXEL \u003c/td\u003e\n   \u003ctd\u003e-1 (do not render underline) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#SWAP_COLORS\"\u003e\u003ccode\u003eSWAP_COLORS\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eBoolean \u003c/td\u003e\n   \u003ctd\u003eSWAP_COLORS_ON \u003c/td\u003e\n   \u003ctd\u003efalse (do not swap colors) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#NUMERIC_SHAPING\"\u003e\u003ccode\u003eNUMERIC_SHAPING\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"NumericShaper.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eNumericShaper\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003enone \u003c/td\u003e\n   \u003ctd\u003enull (do not shape digits) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#KERNING\"\u003e\u003ccode\u003eKERNING\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eInteger \u003c/td\u003e\n   \u003ctd\u003eKERNING_ON \u003c/td\u003e\n   \u003ctd\u003e0 (do not request kerning) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#LIGATURES\"\u003e\u003ccode\u003eLIGATURES\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eInteger \u003c/td\u003e\n   \u003ctd\u003eLIGATURES_ON \u003c/td\u003e\n   \u003ctd\u003e0 (do not form optional ligatures) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ca href\u003d\"#TRACKING\"\u003e\u003ccode\u003eTRACKING\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003eNumber \u003c/td\u003e\n   \u003ctd\u003eTRACKING_LOOSE, TRACKING_TIGHT \u003c/td\u003e\n   \u003ctd\u003e0 (do not add tracking) \u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/AttributedCharacterIterator.html\" title\u003d\"interface in java.text\"\u003e\u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.font.TextAttribute\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}