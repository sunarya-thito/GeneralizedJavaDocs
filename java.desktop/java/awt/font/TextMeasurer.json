{
  "packageName": "java.awt.font",
  "simpleName": "TextMeasurer",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "clone",
      "comment": "Description copied from class: Object",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "maxAdvance"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineBreakIndex",
      "comment": "Returns the index of the first character which will not fit on on a line beginning at start and possible measuring up to maxAdvance in graphical width.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the character index at which to start measuring. \n\u003ccode\u003estart\u003c/code\u003e is an absolute index, not relative to the start of the paragraph",
          "\u003ccode\u003emaxAdvance\u003c/code\u003e - the graphical width in which the line must fit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is less than the beginning of the paragraph."
        ],
        "return": [
          "the index after the last character that will fit on a line beginning at \n\u003ccode\u003estart\u003c/code\u003e, which is not longer than \n\u003ccode\u003emaxAdvance\u003c/code\u003e in graphical width"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdvanceBetween",
      "comment": "Returns the graphical width of a line beginning at start and including characters up to limit. start and limit are absolute indices, not relative to the start of the paragraph.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the character index at which to start measuring",
          "\u003ccode\u003elimit\u003c/code\u003e - the character index at which to stop measuring"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elimit\u003c/code\u003e is less than \n\u003ccode\u003estart\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003elimit\u003c/code\u003e is not between the beginning of the paragraph and the end of the paragraph."
        ],
        "return": [
          "the graphical width of a line beginning at \n\u003ccode\u003estart\u003c/code\u003e and including characters up to \n\u003ccode\u003elimit\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayout",
      "comment": "Returns a TextLayout on the given character range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the index of the first character",
          "\u003ccode\u003elimit\u003c/code\u003e - the index after the last character. Must be greater than \n\u003ccode\u003estart\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elimit\u003c/code\u003e is less than \n\u003ccode\u003estart\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003elimit\u003c/code\u003e is not between the beginning of the paragraph and the end of the paragraph."
        ],
        "return": [
          "a \n\u003ccode\u003eTextLayout\u003c/code\u003e for the characters beginning at \n\u003ccode\u003estart\u003c/code\u003e up to (but not including) \n\u003ccode\u003elimit\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "newParagraph"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "insertPos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertChar",
      "comment": "Updates the TextMeasurer after a single character has been inserted into the paragraph currently represented by this TextMeasurer. After this call, this TextMeasurer is equivalent to a new TextMeasurer created from the text; however, it will usually be more efficient to update an existing TextMeasurer than to create a new one from scratch.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewParagraph\u003c/code\u003e - the text of the paragraph after performing the insertion. Cannot be null.",
          "\u003ccode\u003einsertPos\u003c/code\u003e - the position in the text where the character was inserted. Must not be less than the start of \n\u003ccode\u003enewParagraph\u003c/code\u003e, and must be less than the end of \n\u003ccode\u003enewParagraph\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einsertPos\u003c/code\u003e is less than the start of \n\u003ccode\u003enewParagraph\u003c/code\u003e or greater than or equal to the end of \n\u003ccode\u003enewParagraph\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewParagraph\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "newParagraph"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "deletePos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deleteChar",
      "comment": "Updates the TextMeasurer after a single character has been deleted from the paragraph currently represented by this TextMeasurer. After this call, this TextMeasurer is equivalent to a new TextMeasurer created from the text; however, it will usually be more efficient to update an existing TextMeasurer than to create a new one from scratch.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewParagraph\u003c/code\u003e - the text of the paragraph after performing the deletion. Cannot be null.",
          "\u003ccode\u003edeletePos\u003c/code\u003e - the position in the text where the character was removed. Must not be less than the start of \n\u003ccode\u003enewParagraph\u003c/code\u003e, and must not be greater than the end of \n\u003ccode\u003enewParagraph\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edeletePos\u003c/code\u003e is less than the start of \n\u003ccode\u003enewParagraph\u003c/code\u003e or greater than the end of \n\u003ccode\u003enewParagraph\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewParagraph\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "field": {
            "name": "frc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a TextMeasurer from the source text. The source text should be a single entire paragraph.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the source paragraph. Cannot be null.",
          "\u003ccode\u003efrc\u003c/code\u003e - the information about a graphics device which is needed to measure the text correctly. Cannot be null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.TextMeasurer",
  "comment": "The \n\u003ccode\u003eTextMeasurer\u003c/code\u003e class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a \n\u003ccode\u003eTextLayout\u003c/code\u003e for a range of characters. It also provides methods for incremental editing of paragraphs. \n\u003cp\u003e A \u003ccode\u003eTextMeasurer\u003c/code\u003e object is constructed with an \u003ca href\u003d\"../../../../java.base/java/text/AttributedCharacterIterator.html\" title\u003d\"interface in java.text\"\u003e\u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e\u003c/a\u003e representing a single paragraph of text. The value returned by the \u003ca href\u003d\"../../../../java.base/java/text/CharacterIterator.html#getBeginIndex()\"\u003e\u003ccode\u003egetBeginIndex\u003c/code\u003e\u003c/a\u003e method of \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e defines the absolute index of the first character. The value returned by the \u003ca href\u003d\"../../../../java.base/java/text/CharacterIterator.html#getEndIndex()\"\u003e\u003ccode\u003egetEndIndex\u003c/code\u003e\u003c/a\u003e method of \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e defines the index past the last character. These values define the range of indexes to use in calls to the \u003ccode\u003eTextMeasurer\u003c/code\u003e. For example, calls to get the advance of a range of text or the line break of a range of text must use indexes between the beginning and end index values. Calls to \u003ca href\u003d\"#insertChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003einsertChar\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#deleteChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003edeleteChar\u003c/code\u003e\u003c/a\u003e reset the \u003ccode\u003eTextMeasurer\u003c/code\u003e to use the beginning index and end index of the \u003ccode\u003eAttributedCharacterIterator\u003c/code\u003e passed in those calls. \u003c/p\u003e\n\u003cp\u003e Most clients will use the more convenient \u003ccode\u003eLineBreakMeasurer\u003c/code\u003e, which implements the standard line break policy (placing as many words as will fit on each line).\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}