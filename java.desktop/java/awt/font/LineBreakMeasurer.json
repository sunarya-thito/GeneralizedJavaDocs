{
  "packageName": "java.awt.font",
  "simpleName": "LineBreakMeasurer",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "wrappingWidth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextOffset",
      "comment": "Returns the position at the end of the next layout. Does NOT update the current position of this LineBreakMeasurer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewrappingWidth\u003c/code\u003e - the maximum visible advance permitted for the text in the next layout"
        ],
        "return": [
          "an offset in the text representing the limit of the next \n\u003ccode\u003eTextLayout\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "wrappingWidth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offsetLimit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "requireNextWord",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextOffset",
      "comment": "Returns the position at the end of the next layout. Does NOT update the current position of this LineBreakMeasurer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewrappingWidth\u003c/code\u003e - the maximum visible advance permitted for the text in the next layout",
          "\u003ccode\u003eoffsetLimit\u003c/code\u003e - the first character that can not be included in the next layout, even if the text after the limit would fit within the wrapping width; \n\u003ccode\u003eoffsetLimit\u003c/code\u003e must be greater than the current position",
          "\u003ccode\u003erequireNextWord\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, the current position that is returned if the entire next word does not fit within \n\u003ccode\u003ewrappingWidth\u003c/code\u003e; if \n\u003ccode\u003efalse\u003c/code\u003e, the offset returned is at least one greater than the current position"
        ],
        "return": [
          "an offset in the text representing the limit of the next \n\u003ccode\u003eTextLayout\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "wrappingWidth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLayout",
      "comment": "Returns the next layout, and updates the current position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewrappingWidth\u003c/code\u003e - the maximum visible advance permitted for the text in the next layout"
        ],
        "return": [
          "a \n\u003ccode\u003eTextLayout\u003c/code\u003e, beginning at the current position, which represents the next line fitting within \n\u003ccode\u003ewrappingWidth\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "wrappingWidth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offsetLimit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "requireNextWord",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLayout",
      "comment": "Returns the next layout, and updates the current position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewrappingWidth\u003c/code\u003e - the maximum visible advance permitted for the text in the next layout",
          "\u003ccode\u003eoffsetLimit\u003c/code\u003e - the first character that can not be included in the next layout, even if the text after the limit would fit within the wrapping width; \n\u003ccode\u003eoffsetLimit\u003c/code\u003e must be greater than the current position",
          "\u003ccode\u003erequireNextWord\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, and if the entire word at the current position does not fit within the wrapping width, \n\u003ccode\u003enull\u003c/code\u003e is returned. If \n\u003ccode\u003efalse\u003c/code\u003e, a valid layout is returned that includes at least the character at the current position"
        ],
        "return": [
          "a \n\u003ccode\u003eTextLayout\u003c/code\u003e, beginning at the current position, that represents the next line fitting within \n\u003ccode\u003ewrappingWidth\u003c/code\u003e. If the current position is at the end of the text used by this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e, \n\u003ccode\u003enull\u003c/code\u003e is returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPosition",
      "comment": "Returns the current position of this LineBreakMeasurer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#setPosition(int)\"\u003e\u003ccode\u003esetPosition(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current position of this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPosition",
      "comment": "Sets the current position of this LineBreakMeasurer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#getPosition()\"\u003e\u003ccode\u003egetPosition()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewPosition\u003c/code\u003e - the current position of this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e; the position should be within the text used to construct this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e (or in the text most recently passed to \n\u003ccode\u003einsertChar\u003c/code\u003e or \n\u003ccode\u003edeleteChar\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "newParagraph",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "insertPos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertChar",
      "comment": "Updates this LineBreakMeasurer after a single character is inserted into the text, and sets the current position to the beginning of the paragraph.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#deleteChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003edeleteChar(java.text.AttributedCharacterIterator, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewParagraph\u003c/code\u003e - the text after the insertion",
          "\u003ccode\u003einsertPos\u003c/code\u003e - the position in the text at which the character is inserted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einsertPos\u003c/code\u003e is less than the start of \n\u003ccode\u003enewParagraph\u003c/code\u003e or greater than or equal to the end of \n\u003ccode\u003enewParagraph\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewParagraph\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "newParagraph",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "deletePos",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deleteChar",
      "comment": "Updates this LineBreakMeasurer after a single character is deleted from the text, and sets the current position to the beginning of the paragraph.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#insertChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003einsertChar(java.text.AttributedCharacterIterator, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewParagraph\u003c/code\u003e - the text after the deletion",
          "\u003ccode\u003edeletePos\u003c/code\u003e - the position in the text at which the character is deleted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edeletePos\u003c/code\u003e is less than the start of \n\u003ccode\u003enewParagraph\u003c/code\u003e or greater than the end of \n\u003ccode\u003enewParagraph\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewParagraph\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a LineBreakMeasurer for the specified text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#insertChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003einsertChar(java.text.AttributedCharacterIterator, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#deleteChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003edeleteChar(java.text.AttributedCharacterIterator, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text for which this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e produces \n\u003ccode\u003eTextLayout\u003c/code\u003e objects; the text must contain at least one character; if the text available through \n\u003ccode\u003eiter\u003c/code\u003e changes, further calls to this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e instance are undefined (except, in some cases, when \n\u003ccode\u003einsertChar\u003c/code\u003e or \n\u003ccode\u003edeleteChar\u003c/code\u003e are invoked afterward - see below)",
          "\u003ccode\u003efrc\u003c/code\u003e - contains information about a graphics device which is needed to measure the text correctly; text measurements can vary slightly depending on the device resolution, and attributes such as antialiasing; this parameter does not specify a translation between the \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e and user space"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.BreakIterator",
            "type": "Class"
          },
          "name": "breakIter",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a LineBreakMeasurer for the specified text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#insertChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003einsertChar(java.text.AttributedCharacterIterator, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html#deleteChar(java.text.AttributedCharacterIterator,int)\"\u003e\u003ccode\u003edeleteChar(java.text.AttributedCharacterIterator, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text for which this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e produces \n\u003ccode\u003eTextLayout\u003c/code\u003e objects; the text must contain at least one character; if the text available through \n\u003ccode\u003eiter\u003c/code\u003e changes, further calls to this \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e instance are undefined (except, in some cases, when \n\u003ccode\u003einsertChar\u003c/code\u003e or \n\u003ccode\u003edeleteChar\u003c/code\u003e are invoked afterward - see below)",
          "\u003ccode\u003ebreakIter\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/BreakIterator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eBreakIterator\u003c/code\u003e\u003c/a\u003e which defines line breaks",
          "\u003ccode\u003efrc\u003c/code\u003e - contains information about a graphics device which is needed to measure the text correctly; text measurements can vary slightly depending on the device resolution, and attributes such as antialiasing; this parameter does not specify a translation between the \n\u003ccode\u003eLineBreakMeasurer\u003c/code\u003e and user space"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the text has less than one character"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.LineBreakMeasurer",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}