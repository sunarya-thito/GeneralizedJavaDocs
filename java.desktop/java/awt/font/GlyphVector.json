{
  "packageName": "java.awt.font",
  "simpleName": "GlyphVector",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FLAG_HAS_TRANSFORMS",
      "comment": "A flag used with getLayoutFlags that indicates that this GlyphVector has per-glyph transforms.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphVector.FLAG_HAS_TRANSFORMS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FLAG_HAS_POSITION_ADJUSTMENTS",
      "comment": "A flag used with getLayoutFlags that indicates that this GlyphVector has position adjustments. When this is true, the glyph positions don\u0027t match the accumulated default advances of the glyphs (for example, if kerning has been done).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphVector.FLAG_HAS_POSITION_ADJUSTMENTS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FLAG_RUN_RTL",
      "comment": "A flag used with getLayoutFlags that indicates that this GlyphVector has a right-to-left run direction. This refers to the glyph-to-char mapping and does not imply that the visual locations of the glyphs are necessarily in this order, although generally they will be.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphVector.FLAG_RUN_RTL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FLAG_COMPLEX_GLYPHS",
      "comment": "A flag used with getLayoutFlags that indicates that this GlyphVector has a complex glyph-to-char mapping (one that does not map glyphs to chars one-to-one in strictly ascending or descending order matching the run direction).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphVector.FLAG_COMPLEX_GLYPHS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FLAG_MASK",
      "comment": "A mask for supported flags from getLayoutFlags. Only bits covered by the mask should be tested.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.GlyphVector.FLAG_MASK\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFont",
      "comment": "Returns the Font associated with this GlyphVector.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003eFont\u003c/code\u003e used to create this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.FontRenderContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFontRenderContext",
      "comment": "Returns the FontRenderContext associated with this GlyphVector.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003eFontRenderContext\u003c/code\u003e used to create this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "performDefaultLayout",
      "comment": "Assigns default positions to each glyph in this GlyphVector. This can destroy information generated during initial layout of this GlyphVector.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNumGlyphs",
      "comment": "Returns the number of glyphs in this GlyphVector.",
      "tagMap": {
        "return": [
          "number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphCode",
      "comment": "Returns the glyphcode of the specified glyph. This return value is meaningless to anything other than the Font object that created this GlyphVector.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e that corresponds to the glyph from which to retrieve the glyphcode."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "the glyphcode of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginGlyphIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numEntries"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "codeReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphCodes",
      "comment": "Returns an array of glyphcodes for the specified glyphs. The contents of this return value are meaningless to anything other than the Font used to create this GlyphVector. This method is used for convenience and performance when processing glyphcodes. If no array is passed in, a new array is created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e at which to start retrieving glyphcodes",
          "\u003ccode\u003enumEntries\u003c/code\u003e - the number of glyphcodes to retrieve",
          "\u003ccode\u003ecodeReturn\u003c/code\u003e - the array that receives the glyphcodes and is then returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumEntries\u003c/code\u003e is less than 0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e is less than 0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the sum of \n\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e and \n\u003ccode\u003enumEntries\u003c/code\u003e is greater than the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "an array of glyphcodes for the specified glyphs."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGlyphCharIndex",
      "comment": "Returns the character index of the specified glyph. The character index is the index of the first logical character represented by the glyph. The default implementation assumes a one-to-one, left-to-right mapping of glyphs to characters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index of the glyph"
        ],
        "return": [
          "the index of the first character represented by the glyph"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginGlyphIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numEntries"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "codeReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGlyphCharIndices",
      "comment": "Returns the character indices of the specified glyphs. The character index is the index of the first logical character represented by the glyph. Indices are returned in glyph order. The default implementation invokes getGlyphCharIndex for each glyph, and subclassers will probably want to override this implementation for performance reasons. Use this method for convenience and performance in processing of glyphcodes. If no array is passed in, a new array is created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e - the index of the first glyph",
          "\u003ccode\u003enumEntries\u003c/code\u003e - the number of glyph indices",
          "\u003ccode\u003ecodeReturn\u003c/code\u003e - the array into which to return the character indices"
        ],
        "return": [
          "an array of character indices, one per glyph."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLogicalBounds",
      "comment": "Returns the logical bounds of this GlyphVector. This method is used when positioning this GlyphVector in relation to visually adjacent GlyphVector objects.",
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Rectangle2D.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eRectangle2D\u003c/code\u003e\u003c/a\u003e that is the logical bounds of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVisualBounds",
      "comment": "Returns the visual bounds of this GlyphVector The visual bounds is the bounding box of the outline of this GlyphVector. Because of rasterization and alignment of pixels, it is possible that this box does not enclose all pixels affected by rendering this GlyphVector.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "field": {
            "name": "renderFRC"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixelBounds",
      "comment": "Returns the pixel bounds of this GlyphVector when rendered in a graphics with the given FontRenderContext at the given location. The renderFRC need not be the same as the FontRenderContext of this GlyphVector, and can be null. If it is null, the FontRenderContext of this GlyphVector is used. The default implementation returns the visual bounds, offset to x, y and rounded out to the next integer value (i.e. returns an integer rectangle which encloses the visual bounds) and ignores the FRC. Subclassers should override this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erenderFRC\u003c/code\u003e - the \n\u003ccode\u003eFontRenderContext\u003c/code\u003e of the \n\u003ccode\u003eGraphics\u003c/code\u003e.",
          "\u003ccode\u003ex\u003c/code\u003e - the x-coordinate at which to render this \n\u003ccode\u003eGlyphVector\u003c/code\u003e.",
          "\u003ccode\u003ey\u003c/code\u003e - the y-coordinate at which to render this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle\u003c/code\u003e bounding the pixels that would be affected."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getOutline",
      "comment": "Returns a Shape whose interior corresponds to the visual representation of this GlyphVector.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e that is the outline of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getOutline",
      "comment": "Returns a Shape whose interior corresponds to the visual representation of this GlyphVector when rendered at x, y.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e.",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e that is the outline of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e when rendered at the specified coordinates."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphOutline",
      "comment": "Returns a Shape whose interior corresponds to the visual representation of the specified glyph within this GlyphVector. The outline returned by this method is positioned around the origin of each individual glyph.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e that is the outline of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGlyphOutline",
      "comment": "Returns a Shape whose interior corresponds to the visual representation of the specified glyph within this GlyphVector, offset to x, y. The outline returned by this method is positioned around the origin of each individual glyph.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e",
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the location of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the location of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e that is the outline of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e of this \n\u003ccode\u003eGlyphVector\u003c/code\u003e when rendered at the specified coordinates."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphPosition",
      "comment": "Returns the position of the specified glyph relative to the origin of this GlyphVector. If glyphIndex equals the number of glyphs in this GlyphVector, this method returns the position after the last glyph. This position is used to define the advance of the entire GlyphVector.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#setGlyphPosition(int,java.awt.geom.Point2D)\"\u003e\u003ccode\u003esetGlyphPosition(int, java.awt.geom.Point2D)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Point2D.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003ePoint2D\u003c/code\u003e\u003c/a\u003e object that is the position of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "newPos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setGlyphPosition",
      "comment": "Sets the position of the specified glyph within this GlyphVector. If glyphIndex equals the number of glyphs in this GlyphVector, this method sets the position after the last glyph. This position is used to define the advance of the entire GlyphVector.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#getGlyphPosition(int)\"\u003e\u003ccode\u003egetGlyphPosition(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e",
          "\u003ccode\u003enewPos\u003c/code\u003e - the \n\u003ccode\u003ePoint2D\u003c/code\u003e at which to position the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphTransform",
      "comment": "Returns the transform of the specified glyph within this GlyphVector. The transform is relative to the glyph position. If no special transform has been applied, null can be returned. A null return indicates an identity transform.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#setGlyphTransform(int,java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetGlyphTransform(int, java.awt.geom.AffineTransform)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e that is the transform of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "newTX"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setGlyphTransform",
      "comment": "Sets the transform of the specified glyph within this GlyphVector. The transform is relative to the glyph position. A null argument for newTX indicates that no special transform is applied for the specified glyph. This method can be used to rotate, mirror, translate and scale the glyph. Adding a transform can result in significant performance changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#getGlyphTransform(int)\"\u003e\u003ccode\u003egetGlyphTransform(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e",
          "\u003ccode\u003enewTX\u003c/code\u003e - the new transform of the glyph at \n\u003ccode\u003eglyphIndex\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLayoutFlags",
      "comment": "Returns flags describing the global state of the GlyphVector. Flags not described below are reserved. The default implementation returns 0 (meaning false) for the position adjustments, transforms, rtl, and complex flags. Subclassers should override this method, and make sure it correctly describes the GlyphVector and corresponds to the results of related calls.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#FLAG_HAS_POSITION_ADJUSTMENTS\"\u003e\u003ccode\u003eFLAG_HAS_POSITION_ADJUSTMENTS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#FLAG_HAS_TRANSFORMS\"\u003e\u003ccode\u003eFLAG_HAS_TRANSFORMS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#FLAG_RUN_RTL\"\u003e\u003ccode\u003eFLAG_RUN_RTL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#FLAG_COMPLEX_GLYPHS\"\u003e\u003ccode\u003eFLAG_COMPLEX_GLYPHS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#FLAG_MASK\"\u003e\u003ccode\u003eFLAG_MASK\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an int containing the flags describing the state"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginGlyphIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numEntries"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "positionReturn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphPositions",
      "comment": "Returns an array of glyph positions for the specified glyphs. This method is used for convenience and performance when processing glyph positions. If no array is passed in, a new array is created. Even numbered array entries beginning with position zero are the X coordinates of the glyph numbered beginGlyphIndex + position/2. Odd numbered array entries beginning with position one are the Y coordinates of the glyph numbered beginGlyphIndex + (position-1)/2. If beginGlyphIndex equals the number of glyphs in this GlyphVector, this method gets the position after the last glyph and this position is used to define the advance of the entire GlyphVector.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e - the index at which to begin retrieving glyph positions",
          "\u003ccode\u003enumEntries\u003c/code\u003e - the number of glyphs to retrieve",
          "\u003ccode\u003epositionReturn\u003c/code\u003e - the array that receives the glyph positions and is then returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumEntries\u003c/code\u003e is less than 0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e is less than 0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the sum of \n\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e and \n\u003ccode\u003enumEntries\u003c/code\u003e is greater than the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e plus one"
        ],
        "return": [
          "an array of glyph positions specified by \n\u003ccode\u003ebeginGlyphIndex\u003c/code\u003e and \n\u003ccode\u003enumEntries\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphLogicalBounds",
      "comment": "Returns the logical bounds of the specified glyph within this GlyphVector. These logical bounds have a total of four edges, with two edges parallel to the baseline under the glyph\u0027s transform and the other two edges are shared with adjacent glyphs if they are present. This method is useful for hit-testing of the specified glyph, positioning of a caret at the leading or trailing edge of a glyph, and for drawing a highlight region around the specified glyph.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#getGlyphVisualBounds(int)\"\u003e\u003ccode\u003egetGlyphVisualBounds(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e that corresponds to the glyph from which to retrieve its logical bounds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e that is the logical bounds of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphVisualBounds",
      "comment": "Returns the visual bounds of the specified glyph within the GlyphVector. The bounds returned by this method is positioned around the origin of each individual glyph.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphVector.html#getGlyphLogicalBounds(int)\"\u003e\u003ccode\u003egetGlyphLogicalBounds(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e that corresponds to the glyph from which to retrieve its visual bounds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eShape\u003c/code\u003e that is the visual bounds of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "field": {
            "name": "renderFRC"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGlyphPixelBounds",
      "comment": "Returns the pixel bounds of the glyph at index when this GlyphVector is rendered in a Graphics with the given FontRenderContext at the given location. The renderFRC need not be the same as the FontRenderContext of this GlyphVector, and can be null. If it is null, the FontRenderContext of this GlyphVector is used. The default implementation returns the visual bounds of the glyph, offset to x, y and rounded out to the next integer value, and ignores the FRC. Subclassers should override this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the glyph.",
          "\u003ccode\u003erenderFRC\u003c/code\u003e - the \n\u003ccode\u003eFontRenderContext\u003c/code\u003e of the \n\u003ccode\u003eGraphics\u003c/code\u003e.",
          "\u003ccode\u003ex\u003c/code\u003e - the X position at which to render this \n\u003ccode\u003eGlyphVector\u003c/code\u003e.",
          "\u003ccode\u003ey\u003c/code\u003e - the Y position at which to render this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle\u003c/code\u003e bounding the pixels that would be affected."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphMetrics",
      "comment": "Returns the metrics of the glyph at the specified index into this GlyphVector.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e that corresponds to the glyph from which to retrieve its metrics"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphMetrics.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphMetrics\u003c/code\u003e\u003c/a\u003e object that represents the metrics of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphJustificationInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "glyphIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGlyphJustificationInfo",
      "comment": "Returns the justification information for the glyph at the specified index into this GlyphVector.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eglyphIndex\u003c/code\u003e - the index into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e that corresponds to the glyph from which to retrieve its justification properties"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eglyphIndex\u003c/code\u003e is less than 0 or greater than or equal to the number of glyphs in this \n\u003ccode\u003eGlyphVector\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphJustificationInfo.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphJustificationInfo\u003c/code\u003e\u003c/a\u003e object that represents the justification properties of the glyph at the specified \n\u003ccode\u003eglyphIndex\u003c/code\u003e into this \n\u003ccode\u003eGlyphVector\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.font.GlyphVector",
            "type": "Class"
          },
          "field": {
            "name": "set"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "equals",
      "comment": "Tests if the specified GlyphVector exactly equals this GlyphVector.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eset\u003c/code\u003e - the specified \n\u003ccode\u003eGlyphVector\u003c/code\u003e to test"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003eGlyphVector\u003c/code\u003e equals this \n\u003ccode\u003eGlyphVector\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.font.GlyphVector",
  "comment": "A \n\u003ccode\u003eGlyphVector\u003c/code\u003e object is a collection of glyphs containing geometric information for the placement of each glyph in a transformed coordinate space which corresponds to the device on which the \n\u003ccode\u003eGlyphVector\u003c/code\u003e is ultimately displayed. \n\u003cp\u003e The \u003ccode\u003eGlyphVector\u003c/code\u003e does not attempt any interpretation of the sequence of glyphs it contains. Relationships between adjacent glyphs in sequence are solely used to determine the placement of the glyphs in the visual coordinate space. \u003c/p\u003e\n\u003cp\u003e Instances of \u003ccode\u003eGlyphVector\u003c/code\u003e are created by a \u003ca href\u003d\"../Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e In a text processing application that can cache intermediate representations of text, creation and subsequent caching of a \u003ccode\u003eGlyphVector\u003c/code\u003e for use during rendering is the fastest method to present the visual representation of characters to a user. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eGlyphVector\u003c/code\u003e is associated with exactly one \u003ccode\u003eFont\u003c/code\u003e, and can provide data useful only in relation to this \u003ccode\u003eFont\u003c/code\u003e. In addition, metrics obtained from a \u003ccode\u003eGlyphVector\u003c/code\u003e are not generally geometrically scalable since the pixelization and spacing are dependent on grid-fitting algorithms within a \u003ccode\u003eFont\u003c/code\u003e. To facilitate accurate measurement of a \u003ccode\u003eGlyphVector\u003c/code\u003e and its component glyphs, you must specify a scaling transform, anti-alias mode, and fractional metrics mode when creating the \u003ccode\u003eGlyphVector\u003c/code\u003e. These characteristics can be derived from the destination device. \u003c/p\u003e\n\u003cp\u003e For each glyph in the \u003ccode\u003eGlyphVector\u003c/code\u003e, you can obtain: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003ethe position of the glyph \u003c/li\u003e\n \u003cli\u003ethe transform associated with the glyph \u003c/li\u003e\n \u003cli\u003ethe metrics of the glyph in the context of the \u003ccode\u003eGlyphVector\u003c/code\u003e. The metrics of the glyph may be different under different transforms, application specified rendering hints, and the specific instance of the glyph within the \u003ccode\u003eGlyphVector\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Altering the data used to create the \u003ccode\u003eGlyphVector\u003c/code\u003e does not alter the state of the \u003ccode\u003eGlyphVector\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Methods are provided to adjust the positions of the glyphs within the \u003ccode\u003eGlyphVector\u003c/code\u003e. These methods are most appropriate for applications that are performing justification operations for the presentation of the glyphs. \u003c/p\u003e\n\u003cp\u003e Methods are provided to transform individual glyphs within the \u003ccode\u003eGlyphVector\u003c/code\u003e. These methods are primarily useful for special effects. \u003c/p\u003e\n\u003cp\u003e Methods are provided to return both the visual, logical, and pixel bounds of the entire \u003ccode\u003eGlyphVector\u003c/code\u003e or of individual glyphs within the \u003ccode\u003eGlyphVector\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Methods are provided to return a \u003ca href\u003d\"../Shape.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eShape\u003c/code\u003e\u003c/a\u003e for the \u003ccode\u003eGlyphVector\u003c/code\u003e, and for individual glyphs within the \u003ccode\u003eGlyphVector\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/GlyphMetrics.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eGlyphMetrics\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}