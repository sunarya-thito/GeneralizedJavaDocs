{
  "packageName": "java.awt.font",
  "simpleName": "NumericShaper",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EUROPEAN",
      "comment": "Identifies the Latin-1 (European) and extended range, and Latin-1 (European) decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.EUROPEAN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ARABIC",
      "comment": "Identifies the ARABIC range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.ARABIC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EASTERN_ARABIC",
      "comment": "Identifies the ARABIC range and ARABIC_EXTENDED decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.EASTERN_ARABIC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEVANAGARI",
      "comment": "Identifies the DEVANAGARI range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.DEVANAGARI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BENGALI",
      "comment": "Identifies the BENGALI range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.BENGALI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GURMUKHI",
      "comment": "Identifies the GURMUKHI range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.GURMUKHI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GUJARATI",
      "comment": "Identifies the GUJARATI range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.GUJARATI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ORIYA",
      "comment": "Identifies the ORIYA range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.ORIYA\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TAMIL",
      "comment": "Identifies the TAMIL range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.TAMIL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TELUGU",
      "comment": "Identifies the TELUGU range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.TELUGU\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "KANNADA",
      "comment": "Identifies the KANNADA range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.KANNADA\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MALAYALAM",
      "comment": "Identifies the MALAYALAM range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.MALAYALAM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "THAI",
      "comment": "Identifies the THAI range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.THAI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LAO",
      "comment": "Identifies the LAO range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.LAO\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TIBETAN",
      "comment": "Identifies the TIBETAN range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.TIBETAN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MYANMAR",
      "comment": "Identifies the MYANMAR range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.MYANMAR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ETHIOPIC",
      "comment": "Identifies the ETHIOPIC range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.ETHIOPIC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "KHMER",
      "comment": "Identifies the KHMER range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.KHMER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MONGOLIAN",
      "comment": "Identifies the MONGOLIAN range and decimal base.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.MONGOLIAN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ALL_RANGES",
      "comment": "Identifies all ranges, for full contextual shaping. This constant specifies all of the bit mask-based ranges. Use EnumSet.allOf(NumericShaper.Range.class) to specify all of the enum-based ranges.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.font.NumericShaper.ALL_RANGES\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.NumericShaper",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "singleRange"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShaper",
      "comment": "Returns a shaper for the provided unicode range. All Latin-1 (EUROPEAN) digits are converted to the corresponding decimal unicode digits.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esingleRange\u003c/code\u003e - the specified Unicode range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the range is not a single range"
        ],
        "return": [
          "a non-contextual numeric shaper"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.NumericShaper",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.font.NumericShaper$Range",
            "type": "Class"
          },
          "field": {
            "name": "singleRange"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShaper",
      "comment": "Returns a shaper for the provided Unicode range. All Latin-1 (EUROPEAN) digits are converted to the corresponding decimal digits of the specified Unicode range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esingleRange\u003c/code\u003e - the Unicode range given by a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/NumericShaper.Range.html\" title\u003d\"enum class in java.awt.font\"\u003e\u003ccode\u003eNumericShaper.Range\u003c/code\u003e\u003c/a\u003e constant."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esingleRange\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a non-contextual \n\u003ccode\u003eNumericShaper\u003c/code\u003e."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.NumericShaper",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ranges"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getContextualShaper",
      "comment": "Returns a contextual shaper for the provided unicode range(s). Latin-1 (EUROPEAN) digits are converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. Multiple ranges are represented by or-ing the values together, such as, NumericShaper.ARABIC | NumericShaper.THAI. The shaper assumes EUROPEAN as the starting context, that is, if EUROPEAN digits are encountered before any strong directional text in the string, the context is presumed to be EUROPEAN, and so the digits will not shape.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eranges\u003c/code\u003e - the specified Unicode ranges"
        ],
        "return": [
          "a shaper for the specified ranges"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.NumericShaper",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.awt.font.NumericShaper$Range",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ranges"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getContextualShaper",
      "comment": "Returns a contextual shaper for the provided Unicode range(s). The Latin-1 (EUROPEAN) digits are converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. The shaper assumes EUROPEAN as the starting context, that is, if EUROPEAN digits are encountered before any strong directional text in the string, the context is presumed to be EUROPEAN, and so the digits will not shape.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eranges\u003c/code\u003e - the specified Unicode ranges"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eranges\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "a contextual shaper for the specified ranges"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.NumericShaper",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ranges"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "defaultContext"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getContextualShaper",
      "comment": "Returns a contextual shaper for the provided unicode range(s). Latin-1 (EUROPEAN) digits will be converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. Multiple ranges are represented by or-ing the values together, for example, NumericShaper.ARABIC | NumericShaper.THAI. The shaper uses defaultContext as the starting context.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eranges\u003c/code\u003e - the specified Unicode ranges",
          "\u003ccode\u003edefaultContext\u003c/code\u003e - the starting context, such as \n\u003ccode\u003eNumericShaper.EUROPEAN\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003edefaultContext\u003c/code\u003e is not a single valid range."
        ],
        "return": [
          "a shaper for the specified Unicode ranges."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.NumericShaper",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.awt.font.NumericShaper$Range",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ranges"
          }
        },
        {
          "type": {
            "name": "java.awt.font.NumericShaper$Range",
            "type": "Class"
          },
          "field": {
            "name": "defaultContext"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getContextualShaper",
      "comment": "Returns a contextual shaper for the provided Unicode range(s). The Latin-1 (EUROPEAN) digits will be converted to the decimal digits corresponding to the range of the preceding text, if the range is one of the provided ranges. The shaper uses defaultContext as the starting context.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eranges\u003c/code\u003e - the specified Unicode ranges",
          "\u003ccode\u003edefaultContext\u003c/code\u003e - the starting context, such as \n\u003ccode\u003eNumericShaper.Range.EUROPEAN\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eranges\u003c/code\u003e or \n\u003ccode\u003edefaultContext\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a contextual shaper for the specified Unicode ranges."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shape",
      "comment": "Converts the digits in the text that occur between start and start + count.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - an array of characters to convert",
          "\u003ccode\u003estart\u003c/code\u003e - the index into \n\u003ccode\u003etext\u003c/code\u003e to start converting",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of characters in \n\u003ccode\u003etext\u003c/code\u003e to convert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if start or start + count is out of bounds",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if text is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shape",
      "comment": "Converts the digits in the text that occur between start and start + count, using the provided context. Context is ignored if the shaper is not a contextual shaper.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - an array of characters",
          "\u003ccode\u003estart\u003c/code\u003e - the index into \n\u003ccode\u003etext\u003c/code\u003e to start converting",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of characters in \n\u003ccode\u003etext\u003c/code\u003e to convert",
          "\u003ccode\u003econtext\u003c/code\u003e - the context to which to convert the characters, such as \n\u003ccode\u003eNumericShaper.EUROPEAN\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if start or start + count is out of bounds",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if text is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this is a contextual shaper and the specified \n\u003ccode\u003econtext\u003c/code\u003e is not a single valid range."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        },
        {
          "type": {
            "name": "java.awt.font.NumericShaper$Range",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shape",
      "comment": "Converts the digits in the text that occur between start and start + count, using the provided context. Context is ignored if the shaper is not a contextual shaper.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - a \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003estart\u003c/code\u003e - the index into \n\u003ccode\u003etext\u003c/code\u003e to start converting",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of \n\u003ccode\u003echar\u003c/code\u003es in \n\u003ccode\u003etext\u003c/code\u003e to convert",
          "\u003ccode\u003econtext\u003c/code\u003e - the context to which to convert the characters, such as \n\u003ccode\u003eNumericShaper.Range.EUROPEAN\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003estart + count\u003c/code\u003e is out of bounds",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etext\u003c/code\u003e or \n\u003ccode\u003econtext\u003c/code\u003e is null"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isContextual",
      "comment": "Returns a boolean indicating whether or not this shaper shapes contextually.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this shaper is contextual; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRanges",
      "comment": "Returns an int that ORs together the values for all the ranges that will be shaped. For example, to check if a shaper shapes to Arabic, you would use the following: if ((shaper.getRanges() \u0026 shaper.ARABIC) !\u003d 0) \u0026#123; ... Note that this method supports only the bit mask-based ranges. Call getRangeSet() for the enum-based ranges.",
      "tagMap": {
        "return": [
          "the values for all the ranges to be shaped."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.awt.font.NumericShaper$Range",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRangeSet",
      "comment": "Returns a Set representing all the Unicode ranges in this NumericShaper that will be shaped.",
      "tagMap": {
        "return": [
          "all the Unicode ranges to be shaped."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this shaper.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this shaper\u0027s hash code."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if the specified object is an instance of NumericShaper and shapes identically to this one, regardless of the range representations, the bit mask or the enum. For example, the following code produces \"true\".  NumericShaper ns1 \u003d NumericShaper.getShaper(NumericShaper.ARABIC);\n NumericShaper ns2 \u003d NumericShaper.getShaper(NumericShaper.Range.ARABIC);\n System.out.println(ns1.equals(ns2));",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the specified object to compare to this \n\u003ccode\u003eNumericShaper\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eo\u003c/code\u003e is an instance of \n\u003ccode\u003eNumericShaper\u003c/code\u003e and shapes in the same way; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String that describes this shaper. This method is used for debugging purposes only.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e describing this shaper."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.awt.font.NumericShaper$Range"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.NumericShaper",
  "comment": "The \n\u003ccode\u003eNumericShaper\u003c/code\u003e class is used to convert Latin-1 (European) digits to other Unicode decimal digits. Users of this class will primarily be people who wish to present data using national digit shapes, but find it more convenient to represent the data internally using Latin-1 (European) digits. This does not interpret the deprecated numeric shape selector character (U+206E). \n\u003cp\u003e Instances of \u003ccode\u003eNumericShaper\u003c/code\u003e are typically applied as attributes to text with the \u003ca href\u003d\"TextAttribute.html#NUMERIC_SHAPING\"\u003e\u003ccode\u003eNUMERIC_SHAPING\u003c/code\u003e\u003c/a\u003e attribute of the \u003ccode\u003eTextAttribute\u003c/code\u003e class. For example, this code snippet causes a \u003ccode\u003eTextLayout\u003c/code\u003e to shape European digits to Arabic in an Arabic context:\u003cbr\u003e \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e Map map \u003d new HashMap();\n map.put(TextAttribute.NUMERIC_SHAPING,\n     NumericShaper.getContextualShaper(NumericShaper.ARABIC));\n FontRenderContext frc \u003d ...;\n TextLayout layout \u003d new TextLayout(text, map, frc);\n layout.draw(g2d, x, y);\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cbr\u003e It is also possible to perform numeric shaping explicitly using instances of \n\u003ccode\u003eNumericShaper\u003c/code\u003e, as this code snippet demonstrates:\n\u003cbr\u003e \n\u003cblockquote\u003e\n \u003cpre\u003e char[] text \u003d ...;\n // shape all EUROPEAN digits (except zero) to ARABIC digits\n NumericShaper shaper \u003d NumericShaper.getShaper(NumericShaper.ARABIC);\n shaper.shape(text, start, count);\n\n // shape European digits to ARABIC digits if preceding text is Arabic, or\n // shape European digits to TAMIL digits if preceding text is Tamil, or\n // leave European digits alone if there is no preceding text, or\n // preceding text is neither Arabic nor Tamil\n NumericShaper shaper \u003d\n     NumericShaper.getContextualShaper(NumericShaper.ARABIC |\n                                         NumericShaper.TAMIL,\n                                       NumericShaper.EUROPEAN);\n shaper.shape(text, start, count);\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eBit mask- and enum-based Unicode ranges\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eThis class supports two different programming interfaces to represent Unicode ranges for script-specific digits: bit mask-based ones, such as \u003ca href\u003d\"#ARABIC\"\u003e\u003ccode\u003eNumericShaper.ARABIC\u003c/code\u003e\u003c/a\u003e, and enum-based ones, such as \u003ca href\u003d\"NumericShaper.Range.html#ARABIC\"\u003e\u003ccode\u003eNumericShaper.Range.ARABIC\u003c/code\u003e\u003c/a\u003e. Multiple ranges can be specified by ORing bit mask-based constants, such as: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e NumericShaper.ARABIC | NumericShaper.TAMIL\n \u003c/pre\u003e\n\u003c/blockquote\u003e or creating a \n\u003ccode\u003eSet\u003c/code\u003e with the \n\u003ca href\u003d\"NumericShaper.Range.html\" title\u003d\"enum class in java.awt.font\"\u003e\u003ccode\u003eNumericShaper.Range\u003c/code\u003e\u003c/a\u003e constants, such as: \n\u003cblockquote\u003e\n \u003cpre\u003e EnumSet.of(NumericShaper.Range.ARABIC, NumericShaper.Range.TAMIL)\n \u003c/pre\u003e\n\u003c/blockquote\u003e The enum-based ranges are a super set of the bit mask-based ones. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf the two interfaces are mixed (including serialization), Unicode range values are mapped to their counterparts where such mapping is possible, such as \u003ccode\u003eNumericShaper.Range.ARABIC\u003c/code\u003e from/to \u003ccode\u003eNumericShaper.ARABIC\u003c/code\u003e. If any unmappable range values are specified, such as \u003ccode\u003eNumericShaper.Range.BALINESE\u003c/code\u003e, those ranges are ignored. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eDecimal Digits Precedence\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eA Unicode range may have more than one set of decimal digits. If multiple decimal digits sets are specified for the same Unicode range, one of the sets will take precedence as follows. \u003c/p\u003e\n\u003ctable class\u003d\"plain\"\u003e \n \u003ccaption\u003e\n  NumericShaper constants precedence\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eUnicode Range \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003e\u003ccode\u003eNumericShaper\u003c/code\u003e Constants \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003ePrecedence \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"rowgroup\" rowspan\u003d\"2\"\u003eArabic \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"#ARABIC\"\u003e\u003ccode\u003eNumericShaper.ARABIC\u003c/code\u003e\u003c/a\u003e \u003cbr\u003e \u003ca href\u003d\"#EASTERN_ARABIC\"\u003e\u003ccode\u003eNumericShaper.EASTERN_ARABIC\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003e\u003ca href\u003d\"#EASTERN_ARABIC\"\u003e\u003ccode\u003eNumericShaper.EASTERN_ARABIC\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003ctd\u003e\u003ca href\u003d\"NumericShaper.Range.html#ARABIC\"\u003e\u003ccode\u003eNumericShaper.Range.ARABIC\u003c/code\u003e\u003c/a\u003e \u003cbr\u003e \u003ca href\u003d\"NumericShaper.Range.html#EASTERN_ARABIC\"\u003e\u003ccode\u003eNumericShaper.Range.EASTERN_ARABIC\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003e\u003ca href\u003d\"NumericShaper.Range.html#EASTERN_ARABIC\"\u003e\u003ccode\u003eNumericShaper.Range.EASTERN_ARABIC\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eTai Tham \u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"NumericShaper.Range.html#TAI_THAM_HORA\"\u003e\u003ccode\u003eNumericShaper.Range.TAI_THAM_HORA\u003c/code\u003e\u003c/a\u003e \u003cbr\u003e \u003ca href\u003d\"NumericShaper.Range.html#TAI_THAM_THAM\"\u003e\u003ccode\u003eNumericShaper.Range.TAI_THAM_THAM\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n   \u003ctd\u003e\u003ca href\u003d\"NumericShaper.Range.html#TAI_THAM_THAM\"\u003e\u003ccode\u003eNumericShaper.Range.TAI_THAM_THAM\u003c/code\u003e\u003c/a\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.font.NumericShaper\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}