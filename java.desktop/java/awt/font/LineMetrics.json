{
  "packageName": "java.awt.font",
  "simpleName": "LineMetrics",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNumChars",
      "comment": "Returns the number of characters (char values) in the text whose metrics are encapsulated by this LineMetrics object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of characters (\n\u003ccode\u003echar\u003c/code\u003e values) in the text with which this \n\u003ccode\u003eLineMetrics\u003c/code\u003e was created."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAscent",
      "comment": "Returns the ascent of the text. The ascent is the distance from the baseline to the ascender line. The ascent usually represents the the height of the capital letters of the text. Some characters can extend above the ascender line.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the ascent of the text."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDescent",
      "comment": "Returns the descent of the text. The descent is the distance from the baseline to the descender line. The descent usually represents the distance to the bottom of lower case letters like \u0027p\u0027. Some characters can extend below the descender line.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the descent of the text."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLeading",
      "comment": "Returns the leading of the text. The leading is the recommended distance from the bottom of the descender line to the top of the next line.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the leading of the text."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getHeight",
      "comment": "Returns the height of the text. The height is equal to the sum of the ascent, the descent and the leading.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the height of the text."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBaselineIndex",
      "comment": "Returns the baseline index of the text. The index is one of ROMAN_BASELINE, CENTER_BASELINE, HANGING_BASELINE.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the baseline of the text."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBaselineOffsets",
      "comment": "Returns the baseline offsets of the text, relative to the baseline of the text. The offsets are indexed by baseline index. For example, if the baseline index is CENTER_BASELINE then offsets[HANGING_BASELINE] is usually negative, offsets[CENTER_BASELINE] is zero, and offsets[ROMAN_BASELINE] is usually positive.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the baseline offsets of the text."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getStrikethroughOffset",
      "comment": "Returns the position of the strike-through line relative to the baseline.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the position of the strike-through line."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getStrikethroughThickness",
      "comment": "Returns the thickness of the strike-through line.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the thickness of the strike-through line."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getUnderlineOffset",
      "comment": "Returns the position of the underline relative to the baseline.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the position of the underline."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getUnderlineThickness",
      "comment": "Returns the thickness of the underline.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the thickness of the underline."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.font.LineMetrics",
  "comment": "The \n\u003ccode\u003eLineMetrics\u003c/code\u003e class allows access to the metrics needed to layout characters along a line and to layout of a set of lines. A \n\u003ccode\u003eLineMetrics\u003c/code\u003e object encapsulates the measurement information associated with a run of text. \n\u003cp\u003e Fonts can have different metrics for different ranges of characters. The \u003ccode\u003egetLineMetrics\u003c/code\u003e methods of \u003ca href\u003d\"../Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e take some text as an argument and return a \u003ccode\u003eLineMetrics\u003c/code\u003e object describing the metrics of the initial number of characters in that text, as returned by \u003ca href\u003d\"#getNumChars()\"\u003e\u003ccode\u003egetNumChars()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}