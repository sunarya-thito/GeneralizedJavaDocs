{
  "packageName": "java.awt.font",
  "simpleName": "TextHitInfo",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCharIndex",
      "comment": "Returns the index of the character hit.",
      "tagMap": {
        "return": [
          "the index of the character hit."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeadingEdge",
      "comment": "Returns true if the leading edge of the character was hit.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the leading edge of the character was hit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInsertionIndex",
      "comment": "Returns the insertion index. This is the character index if the leading edge of the character was hit, and one greater than the character index if the trailing edge was hit.",
      "tagMap": {
        "return": [
          "the insertion index."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code of this \n\u003ccode\u003eTextHitInfo\u003c/code\u003e, which is also the \n\u003ccode\u003echarIndex\u003c/code\u003e of this \n\u003ccode\u003eTextHitInfo\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if the specified Object is a TextHitInfo and equals this TextHitInfo.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to test for equality"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003eObject\u003c/code\u003e equals this \n\u003ccode\u003eTextHitInfo\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "field": {
            "name": "hitInfo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if the specified TextHitInfo has the same charIndex and isLeadingEdge as this TextHitInfo. This is not the same as having the same insertion offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehitInfo\u003c/code\u003e - a specified \n\u003ccode\u003eTextHitInfo\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003eTextHitInfo\u003c/code\u003e has the same \n\u003ccode\u003echarIndex\u003c/code\u003e and \n\u003ccode\u003eisLeadingEdge\u003c/code\u003e as this \n\u003ccode\u003eTextHitInfo\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String representing the hit for debugging use only.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing this \n\u003ccode\u003eTextHitInfo\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "charIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "leading",
      "comment": "Creates a TextHitInfo on the leading edge of the character at the specified charIndex.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echarIndex\u003c/code\u003e - the index of the character hit"
        ],
        "return": [
          "a \n\u003ccode\u003eTextHitInfo\u003c/code\u003e on the leading edge of the character at the specified \n\u003ccode\u003echarIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "charIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "trailing",
      "comment": "Creates a hit on the trailing edge of the character at the specified charIndex.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echarIndex\u003c/code\u003e - the index of the character hit"
        ],
        "return": [
          "a \n\u003ccode\u003eTextHitInfo\u003c/code\u003e on the trailing edge of the character at the specified \n\u003ccode\u003echarIndex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "beforeOffset",
      "comment": "Creates a TextHitInfo at the specified offset, associated with the character before the offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset associated with the character before the offset"
        ],
        "return": [
          "a \n\u003ccode\u003eTextHitInfo\u003c/code\u003e at the specified offset."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "afterOffset",
      "comment": "Creates a TextHitInfo at the specified offset, associated with the character after the offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - an offset associated with the character after the offset"
        ],
        "return": [
          "a \n\u003ccode\u003eTextHitInfo\u003c/code\u003e at the specified offset."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOtherHit",
      "comment": "Creates a TextHitInfo on the other side of the insertion point. This TextHitInfo remains unchanged.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eTextHitInfo\u003c/code\u003e on the other side of the insertion point."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "delta"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffsetHit",
      "comment": "Creates a TextHitInfo whose character index is offset by delta from the charIndex of this TextHitInfo. This TextHitInfo remains unchanged.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edelta\u003c/code\u003e - the value to offset this \n\u003ccode\u003echarIndex\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eTextHitInfo\u003c/code\u003e whose \n\u003ccode\u003echarIndex\u003c/code\u003e is offset by \n\u003ccode\u003edelta\u003c/code\u003e from the \n\u003ccode\u003echarIndex\u003c/code\u003e of this \n\u003ccode\u003eTextHitInfo\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.font.TextHitInfo",
  "comment": "The \n\u003ccode\u003eTextHitInfo\u003c/code\u003e class represents a character position in a text model, and a \n\u003cb\u003ebias\u003c/b\u003e, or \"side,\" of the character. Biases are either \n\u003cem\u003eleading\u003c/em\u003e (the left edge, for a left-to-right character) or \n\u003cem\u003etrailing\u003c/em\u003e (the right edge, for a left-to-right character). Instances of \n\u003ccode\u003eTextHitInfo\u003c/code\u003e are used to specify caret and insertion positions within text. \n\u003cp\u003e For example, consider the text \"abc\". TextHitInfo.trailing(1) corresponds to the right side of the \u0027b\u0027 in the text. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eTextHitInfo\u003c/code\u003e is used primarily by \u003ca href\u003d\"TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e and clients of \u003ccode\u003eTextLayout\u003c/code\u003e. Clients of \u003ccode\u003eTextLayout\u003c/code\u003e query \u003ccode\u003eTextHitInfo\u003c/code\u003e instances for an insertion offset, where new text is inserted into the text model. The insertion offset is equal to the character position in the \u003ccode\u003eTextHitInfo\u003c/code\u003e if the bias is leading, and one character after if the bias is trailing. The insertion offset for TextHitInfo.trailing(1) is 2. \u003c/p\u003e\n\u003cp\u003e Sometimes it is convenient to construct a \u003ccode\u003eTextHitInfo\u003c/code\u003e with the same insertion offset as an existing one, but on the opposite character. The \u003ccode\u003egetOtherHit\u003c/code\u003e method constructs a new \u003ccode\u003eTextHitInfo\u003c/code\u003e with the same insertion offset as an existing one, with a hit on the character on the other side of the insertion offset. Calling \u003ccode\u003egetOtherHit\u003c/code\u003e on trailing(1) would return leading(2). In general, \u003ccode\u003egetOtherHit\u003c/code\u003e for trailing(n) returns leading(n+1) and \u003ccode\u003egetOtherHit\u003c/code\u003e for leading(n) returns trailing(n-1). \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eExample\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003e Converting a graphical point to an insertion point within a text model \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e TextLayout layout \u003d ...;\n Point2D.Float hitPoint \u003d ...;\n TextHitInfo hitInfo \u003d layout.hitTestChar(hitPoint.x, hitPoint.y);\n int insPoint \u003d hitInfo.getInsertionIndex();\n // insPoint is relative to layout;  may need to adjust for use\n // in a text model\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextLayout.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextLayout\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}