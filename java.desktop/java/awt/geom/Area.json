{
  "packageName": "java.awt.geom",
  "simpleName": "Area",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds the shape of the specified Area to the shape of this Area. The resulting shape of this Area will include the union of both shapes, or all areas that were contained in either this or the specified Area.      // Example:\n     Area a1 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 0,8]);\n     Area a2 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 8,8]);\n     a1.add(a2);\n\n        a1(before)     +         a2         \u003d     a1(after)\n\n     ################     ################     ################\n     ##############         ##############     ################\n     ############             ############     ################\n     ##########                 ##########     ################\n     ########                     ########     ################\n     ######                         ######     ######    ######\n     ####                             ####     ####        ####\n     ##                                 ##     ##            ##",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erhs\u003c/code\u003e - the \n\u003ccode\u003eArea\u003c/code\u003e to be added to the current shape"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erhs\u003c/code\u003e is null"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Subtracts the shape of the specified Area from the shape of this Area. The resulting shape of this Area will include areas that were contained only in this Area and not in the specified Area.      // Example:\n     Area a1 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 0,8]);\n     Area a2 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 8,8]);\n     a1.subtract(a2);\n\n        a1(before)     -         a2         \u003d     a1(after)\n\n     ################     ################\n     ##############         ##############     ##\n     ############             ############     ####\n     ##########                 ##########     ######\n     ########                     ########     ########\n     ######                         ######     ######\n     ####                             ####     ####\n     ##                                 ##     ##",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erhs\u003c/code\u003e - the \n\u003ccode\u003eArea\u003c/code\u003e to be subtracted from the current shape"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erhs\u003c/code\u003e is null"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersect",
      "comment": "Sets the shape of this Area to the intersection of its current shape and the shape of the specified Area. The resulting shape of this Area will include only areas that were contained in both this Area and also in the specified Area.      // Example:\n     Area a1 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 0,8]);\n     Area a2 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 8,8]);\n     a1.intersect(a2);\n\n      a1(before)   intersect     a2         \u003d     a1(after)\n\n     ################     ################     ################\n     ##############         ##############       ############\n     ############             ############         ########\n     ##########                 ##########           ####\n     ########                     ########\n     ######                         ######\n     ####                             ####\n     ##                                 ##",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erhs\u003c/code\u003e - the \n\u003ccode\u003eArea\u003c/code\u003e to be intersected with this \n\u003ccode\u003eArea\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erhs\u003c/code\u003e is null"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exclusiveOr",
      "comment": "Sets the shape of this Area to be the combined area of its current shape and the shape of the specified Area, minus their intersection. The resulting shape of this Area will include only areas that were contained in either this Area or in the specified Area, but not in both.      // Example:\n     Area a1 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 0,8]);\n     Area a2 \u003d new Area([triangle 0,0 \u003d\u003e 8,0 \u003d\u003e 8,8]);\n     a1.exclusiveOr(a2);\n\n        a1(before)    xor        a2         \u003d     a1(after)\n\n     ################     ################\n     ##############         ##############     ##            ##\n     ############             ############     ####        ####\n     ##########                 ##########     ######    ######\n     ########                     ########     ################\n     ######                         ######     ######    ######\n     ####                             ####     ####        ####\n     ##                                 ##     ##            ##",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erhs\u003c/code\u003e - the \n\u003ccode\u003eArea\u003c/code\u003e to be exclusive ORed with this \n\u003ccode\u003eArea\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erhs\u003c/code\u003e is null"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Removes all of the geometry from this Area and restores it to an empty area.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Tests whether this Area object encloses any area.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eArea\u003c/code\u003e object represents an empty area; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPolygonal",
      "comment": "Tests whether this Area consists entirely of straight edged polygonal geometry.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the geometry of this \n\u003ccode\u003eArea\u003c/code\u003e consists entirely of line segments; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRectangular",
      "comment": "Tests whether this Area is rectangular in shape.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the geometry of this \n\u003ccode\u003eArea\u003c/code\u003e is rectangular in shape; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSingular",
      "comment": "Tests whether this Area is comprised of a single closed subpath. This method returns true if the path contains 0 or 1 subpaths, or false if the path contains more than 1 subpath. The subpaths are counted by the number of SEG_MOVETO segments that appear in the path.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eArea\u003c/code\u003e is comprised of a single basic geometry; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds2D",
      "comment": "Returns a high precision bounding Rectangle2D that completely encloses this Area. The Area class will attempt to return the tightest bounding box possible for the Shape. The bounding box will not be padded to include the control points of curves in the outline of the Shape, but should tightly fit the actual geometry of the outline itself.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds()\"\u003e\u003ccode\u003eShape.getBounds()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds2D()\"\u003egetBounds2D\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the bounding \n\u003ccode\u003eRectangle2D\u003c/code\u003e for the \n\u003ccode\u003eArea\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds",
      "comment": "Returns a bounding Rectangle that completely encloses this Area. The Area class will attempt to return the tightest bounding box possible for the Shape. The bounding box will not be padded to include the control points of curves in the outline of the Shape, but should tightly fit the actual geometry of the outline itself. Since the returned object represents the bounding box with integers, the bounding box can only be as tight as the nearest integer coordinates that encompass the geometry of the Shape.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds2D()\"\u003e\u003ccode\u003eShape.getBounds2D()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds()\"\u003egetBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the bounding \n\u003ccode\u003eRectangle\u003c/code\u003e for the \n\u003ccode\u003eArea\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns an exact copy of this Area object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "Created clone object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tests whether the geometries of the two Area objects are equal. This method will return false if the argument is null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the \n\u003ccode\u003eArea\u003c/code\u003e to be compared to this \n\u003ccode\u003eArea\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the two geometries are equal; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "transform",
      "comment": "Transforms the geometry of this Area using the specified AffineTransform. The geometry is transformed in place, which permanently changes the enclosed area defined by this object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the transformation used to transform the area"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003et\u003c/code\u003e is null"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Area",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createTransformedArea",
      "comment": "Creates a new Area object that contains the same geometry as this Area transformed by the specified AffineTransform. This Area object is unchanged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the specified \n\u003ccode\u003eAffineTransform\u003c/code\u003e used to transform the new \n\u003ccode\u003eArea\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003et\u003c/code\u003e is null"
        ],
        "return": [
          "a new \n\u003ccode\u003eArea\u003c/code\u003e object representing the transformed geometry."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified X coordinate to be tested",
          "\u003ccode\u003ey\u003c/code\u003e - the specified Y coordinate to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified coordinates are inside the \n\u003ccode\u003eShape\u003c/code\u003e boundary; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(java.awt.geom.Point2D)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the specified \n\u003ccode\u003ePoint2D\u003c/code\u003e to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003ePoint2D\u003c/code\u003e is inside the boundary of the \n\u003ccode\u003eShape\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectangular area to be considered contained within the Shape. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Area.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eArea\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003e\u003ccode\u003eShape.intersects(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double,double,double)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the specified rectangular area",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the specified rectangular area"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e entirely contains the specified rectangular area; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or, if the \n\u003ccode\u003eShape\u003c/code\u003e contains the rectangular area and the \n\u003ccode\u003eintersects\u003c/code\u003e method returns \n\u003ccode\u003etrue\u003c/code\u003e and the containment calculations would be too expensive to perform."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the interior of the Shape entirely contains the specified Rectangle2D. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the Rectangle2D are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the Rectangle2D. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double,double,double)\"\u003e\u003ccode\u003eShape.contains(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(java.awt.geom.Rectangle2D)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - The specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e entirely contains the \n\u003ccode\u003eRectangle2D\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or, if the \n\u003ccode\u003eShape\u003c/code\u003e contains the \n\u003ccode\u003eRectangle2D\u003c/code\u003e and the \n\u003ccode\u003eintersects\u003c/code\u003e method returns \n\u003ccode\u003etrue\u003c/code\u003e and the containment calculations would be too expensive to perform."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersects",
      "comment": "Tests if the interior of the Shape intersects the interior of a specified rectangular area. The rectangular area is considered to intersect the Shape if any point is contained in both the interior of the Shape and the specified rectangular area. The Shape.intersects() method allows a Shape implementation to conservatively return true when: there is a high probability that the rectangular area and the Shape intersect, but the calculations to accurately determine this intersection are prohibitively expensive. This means that for some Shapes this method might return true even though the rectangular area does not intersect the Shape. The Area class performs more accurate computations of geometric intersection than most Shape objects and therefore can be used if a more precise answer is required.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Area.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eArea\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003eintersects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the specified rectangular area",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the specified rectangular area"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e and the interior of the rectangular area intersect, or are both highly likely to intersect and intersection calculations would be too expensive to perform; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersects",
      "comment": "Tests if the interior of the Shape intersects the interior of a specified Rectangle2D. The Shape.intersects() method allows a Shape implementation to conservatively return true when: there is a high probability that the Rectangle2D and the Shape intersect, but the calculations to accurately determine this intersection are prohibitively expensive. This means that for some Shapes this method might return true even though the Rectangle2D does not intersect the Shape. The Area class performs more accurate computations of geometric intersection than most Shape objects and therefore can be used if a more precise answer is required.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003e\u003ccode\u003eShape.intersects(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(java.awt.geom.Rectangle2D)\"\u003eintersects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e and the interior of the specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e intersect, or are both highly likely to intersect and intersection calculations would be too expensive to perform; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathIterator",
      "comment": "Creates a PathIterator for the outline of this Area object. This Area object is unchanged.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an optional \n\u003ccode\u003eAffineTransform\u003c/code\u003e to be applied to the coordinates as they are returned in the iteration, or \n\u003ccode\u003enull\u003c/code\u003e if untransformed coordinates are desired"
        ],
        "return": [
          "the \n\u003ccode\u003ePathIterator\u003c/code\u003e object that returns the geometry of the outline of this \n\u003ccode\u003eArea\u003c/code\u003e, one segment at a time."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathIterator",
      "comment": "Creates a PathIterator for the flattened outline of this Area object. Only uncurved path segments represented by the SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are returned by the iterator. This Area object is unchanged.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform,double)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an optional \n\u003ccode\u003eAffineTransform\u003c/code\u003e to be applied to the coordinates as they are returned in the iteration, or \n\u003ccode\u003enull\u003c/code\u003e if untransformed coordinates are desired",
          "\u003ccode\u003eflatness\u003c/code\u003e - the maximum amount that the control points for a given curve can vary from colinear before a subdivided curve is replaced by a straight line connecting the end points"
        ],
        "return": [
          "the \n\u003ccode\u003ePathIterator\u003c/code\u003e object that returns the geometry of the outline of this \n\u003ccode\u003eArea\u003c/code\u003e, one segment at a time."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Default constructor which creates an empty area.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "The Area class creates an area geometry from the specified Shape object. The geometry is explicitly closed, if the Shape is not already closed. The fill rule (even-odd or winding) specified by the geometry of the Shape is used to determine the resulting enclosed area.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eShape\u003c/code\u003e from which the area is constructed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is null"
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.geom.Area",
  "comment": "An \n\u003ccode\u003eArea\u003c/code\u003e object stores and manipulates a resolution-independent description of an enclosed area of 2-dimensional space. \n\u003ccode\u003eArea\u003c/code\u003e objects can be transformed and can perform various Constructive Area Geometry (CAG) operations when combined with other \n\u003ccode\u003eArea\u003c/code\u003e objects. The CAG operations include area \n\u003ca href\u003d\"#add(java.awt.geom.Area)\"\u003e\u003ccode\u003eaddition\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#subtract(java.awt.geom.Area)\"\u003e\u003ccode\u003esubtraction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#intersect(java.awt.geom.Area)\"\u003e\u003ccode\u003eintersection\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"#exclusiveOr(java.awt.geom.Area)\"\u003e\u003ccode\u003eexclusive or\u003c/code\u003e\u003c/a\u003e. See the linked method documentation for examples of the various operations. \n\u003cp\u003e The \u003ccode\u003eArea\u003c/code\u003e class implements the \u003ccode\u003eShape\u003c/code\u003e interface and provides full support for all of its hit-testing and path iteration facilities, but an \u003ccode\u003eArea\u003c/code\u003e is more specific than a generalized path in a number of ways: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eOnly closed paths and sub-paths are stored. \u003ccode\u003eArea\u003c/code\u003e objects constructed from unclosed paths are implicitly closed during construction as if those paths had been filled by the \u003ccode\u003eGraphics2D.fill\u003c/code\u003e method. \u003c/li\u003e\n \u003cli\u003eThe interiors of the individual stored sub-paths are all non-empty and non-overlapping. Paths are decomposed during construction into separate component non-overlapping parts, empty pieces of the path are discarded, and then these non-empty and non-overlapping properties are maintained through all subsequent CAG operations. Outlines of different component sub-paths may touch each other, as long as they do not cross so that their enclosed areas overlap. \u003c/li\u003e\n \u003cli\u003eThe geometry of the path describing the outline of the \u003ccode\u003eArea\u003c/code\u003e resembles the path from which it was constructed only in that it describes the same enclosed 2-dimensional area, but may use entirely different types and ordering of the path segments to do so. \u003c/li\u003e\n\u003c/ul\u003e Interesting issues which are not always obvious when using the \n\u003ccode\u003eArea\u003c/code\u003e include: \n\u003cul\u003e \n \u003cli\u003eCreating an \u003ccode\u003eArea\u003c/code\u003e from an unclosed (open) \u003ccode\u003eShape\u003c/code\u003e results in a closed outline in the \u003ccode\u003eArea\u003c/code\u003e object. \u003c/li\u003e\n \u003cli\u003eCreating an \u003ccode\u003eArea\u003c/code\u003e from a \u003ccode\u003eShape\u003c/code\u003e which encloses no area (even when \"closed\") produces an empty \u003ccode\u003eArea\u003c/code\u003e. A common example of this issue is that producing an \u003ccode\u003eArea\u003c/code\u003e from a line will be empty since the line encloses no area. An empty \u003ccode\u003eArea\u003c/code\u003e will iterate no geometry in its \u003ccode\u003ePathIterator\u003c/code\u003e objects. \u003c/li\u003e\n \u003cli\u003eA self-intersecting \u003ccode\u003eShape\u003c/code\u003e may be split into two (or more) sub-paths each enclosing one of the non-intersecting portions of the original path. \u003c/li\u003e\n \u003cli\u003eAn \u003ccode\u003eArea\u003c/code\u003e may take more path segments to describe the same geometry even when the original outline is simple and obvious. The analysis that the \u003ccode\u003eArea\u003c/code\u003e class must perform on the path may not reflect the same concepts of \"simple and obvious\" as a human being perceives. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}