{
  "packageName": "java.awt.geom",
  "simpleName": "Double",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.geom.Path2D",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "trimToSize",
      "comment": "Description copied from class: Path2D",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#trimToSize()\"\u003etrimToSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "moveTo",
      "comment": "Adds a point to the path by moving to the specified coordinates specified in double precision.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#moveTo(double,double)\"\u003emoveTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the specified Y coordinate"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lineTo",
      "comment": "Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#lineTo(double,double)\"\u003elineTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified X coordinate",
          "\u003ccode\u003ey\u003c/code\u003e - the specified Y coordinate"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "quadTo",
      "comment": "Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point. All coordinates are specified in double precision.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#quadTo(double,double,double,double)\"\u003equadTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate of the quadratic control point",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate of the quadratic control point",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate of the final end point",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate of the final end point"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x3"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y3"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "curveTo",
      "comment": "Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points. All coordinates are specified in double precision.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#curveTo(double,double,double,double,double,double)\"\u003ecurveTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate of the first Bézier control point",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate of the first Bézier control point",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate of the second Bézier control point",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate of the second Bézier control point",
          "\u003ccode\u003ex3\u003c/code\u003e - the X coordinate of the final end point",
          "\u003ccode\u003ey3\u003c/code\u003e - the Y coordinate of the final end point"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.PathIterator",
            "type": "Class"
          },
          "field": {
            "name": "pi"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "connect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "append",
      "comment": "Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment. If the connect parameter is true and the path is not empty then any initial moveTo in the geometry of the appended Shape is turned into a lineTo segment. If the destination coordinates of such a connecting lineTo segment match the ending coordinates of a currently open subpath then the segment is omitted as superfluous. The winding rule of the specified Shape is ignored and the appended geometry is governed by the winding rule specified for this path.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#append(java.awt.geom.PathIterator,boolean)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epi\u003c/code\u003e - the \n\u003ccode\u003ePathIterator\u003c/code\u003e whose geometry is appended to this path",
          "\u003ccode\u003econnect\u003c/code\u003e - a boolean to control whether or not to turn an initial \n\u003ccode\u003emoveTo\u003c/code\u003e segment into a \n\u003ccode\u003elineTo\u003c/code\u003e segment to connect the new geometry to the existing path"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "transform",
      "comment": "Transforms the geometry of this path using the specified AffineTransform. The geometry is transformed in place, which permanently changes the boundary defined by this object.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#transform(java.awt.geom.AffineTransform)\"\u003etransform\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e used to transform the area"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getBounds2D",
      "comment": "Returns a high precision and more accurate bounding box of the Shape than the getBounds method. Note that there is no guarantee that the returned Rectangle2D is the smallest bounding box that encloses the Shape, only that the Shape lies entirely within the indicated Rectangle2D. The bounding box returned by this method is usually tighter than that returned by the getBounds method and never fails due to overflow problems since the return value can be an instance of the Rectangle2D that uses double precision values to store the dimensions. Note that the definition of insideness can lead to situations where points on the defining outline of the shape may not be considered contained in the returned bounds object, but only in cases where those points are also not considered contained in the original shape. If a point is inside the shape according to the contains(point) method, then it must be inside the returned Rectangle2D bounds object according to the contains(point) method of the bounds. Specifically: shape.contains(p) requires bounds.contains(p) If a point is not inside the shape, then it might still be contained in the bounds object: bounds.contains(p) does not imply shape.contains(p)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds()\"\u003e\u003ccode\u003eShape.getBounds()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds2D()\"\u003egetBounds2D\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an instance of \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is a high-precision bounding box of the \n\u003ccode\u003eShape\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPathIterator",
      "comment": "Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline. If an optional AffineTransform is specified, the coordinates returned in the iteration are transformed accordingly. Each call to this method returns a fresh PathIterator object that traverses the geometry of the Shape object independently from any other PathIterator objects in use at the same time. It is recommended, but not guaranteed, that objects implementing the Shape interface isolate iterations that are in process from any changes that might occur to the original object\u0027s geometry during such iterations. The iterator for this class is not multi-threaded safe, which means that the Path2D class does not guarantee that modifications to the geometry of this Path2D object do not affect any iterations of that geometry that are already in process.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an \n\u003ccode\u003eAffineTransform\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003ePathIterator\u003c/code\u003e that iterates along the boundary of this \n\u003ccode\u003eShape\u003c/code\u003e and provides access to the geometry of this \n\u003ccode\u003eShape\u003c/code\u003e\u0027s outline"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "clone",
      "comment": "Creates a new object of the same class as this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html\" title\u003d\"class in java.awt.geom\"\u003ePath2D\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if there is not enough memory."
        ],
        "return": [
          "a clone of this instance."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new empty double precision Path2D object with a default winding rule of Path2D.WIND_NON_ZERO.",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rule"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new empty double precision Path2D object with the specified winding rule to control operations that require the interior of the path to be defined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#WIND_EVEN_ODD\"\u003e\u003ccode\u003ePath2D.WIND_EVEN_ODD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#WIND_NON_ZERO\"\u003e\u003ccode\u003ePath2D.WIND_NON_ZERO\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the winding rule"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rule"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialCapacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new empty double precision Path2D object with the specified winding rule and the specified initial capacity to store path segments. This number is an initial guess as to how many path segments are in the path, but the storage is expanded as needed to store whatever path segments are added to this path.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#WIND_EVEN_ODD\"\u003e\u003ccode\u003ePath2D.WIND_EVEN_ODD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Path2D.html#WIND_NON_ZERO\"\u003e\u003ccode\u003ePath2D.WIND_NON_ZERO\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the winding rule",
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the estimate for the number of path segments in the path"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new double precision Path2D object from an arbitrary Shape object. All of the initial geometry and the winding rule for this path are taken from the specified Shape object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the specified \n\u003ccode\u003eShape\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new double precision Path2D object from an arbitrary Shape object, transformed by an AffineTransform object. All of the initial geometry and the winding rule for this path are taken from the specified Shape object and transformed by the specified AffineTransform object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the specified \n\u003ccode\u003eShape\u003c/code\u003e object",
          "\u003ccode\u003eat\u003c/code\u003e - the specified \n\u003ccode\u003eAffineTransform\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "java.awt.geom.Path2D$Double",
  "comment": "The \n\u003ccode\u003eDouble\u003c/code\u003e class defines a geometric path with coordinates stored in double precision floating point.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.geom.Path2D.Double\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}