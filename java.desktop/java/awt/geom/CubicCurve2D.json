{
  "packageName": "java.awt.geom",
  "simpleName": "CubicCurve2D",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getX1",
      "comment": "Returns the X coordinate of the start point in double precision.",
      "tagMap": {
        "return": [
          "the X coordinate of the start point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getY1",
      "comment": "Returns the Y coordinate of the start point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the start point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getP1",
      "comment": "Returns the start point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint2D\u003c/code\u003e that is the start point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlX1",
      "comment": "Returns the X coordinate of the first control point in double precision.",
      "tagMap": {
        "return": [
          "the X coordinate of the first control point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlY1",
      "comment": "Returns the Y coordinate of the first control point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the first control point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlP1",
      "comment": "Returns the first control point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint2D\u003c/code\u003e that is the first control point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlX2",
      "comment": "Returns the X coordinate of the second control point in double precision.",
      "tagMap": {
        "return": [
          "the X coordinate of the second control point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlY2",
      "comment": "Returns the Y coordinate of the second control point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the second control point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlP2",
      "comment": "Returns the second control point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint2D\u003c/code\u003e that is the second control point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getX2",
      "comment": "Returns the X coordinate of the end point in double precision.",
      "tagMap": {
        "return": [
          "the X coordinate of the end point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getY2",
      "comment": "Returns the Y coordinate of the end point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the end point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getP2",
      "comment": "Returns the end point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint2D\u003c/code\u003e that is the end point of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this curve to the specified double coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate used to set the start point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate used to set the start point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrlx1\u003c/code\u003e - the X coordinate used to set the first control point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrly1\u003c/code\u003e - the Y coordinate used to set the first control point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrlx2\u003c/code\u003e - the X coordinate used to set the second control point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrly2\u003c/code\u003e - the Y coordinate used to set the second control point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate used to set the end point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate used to set the end point of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "coords"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this curve to the double coordinates at the specified offset in the specified array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecoords\u003c/code\u003e - a double array containing coordinates",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of \n\u003ccode\u003ecoords\u003c/code\u003e from which to begin setting the end points and control points of this curve to the coordinates contained in \n\u003ccode\u003ecoords\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "p1"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "cp1"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "cp2"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "p2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this curve to the specified Point2D coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep1\u003c/code\u003e - the first specified \n\u003ccode\u003ePoint2D\u003c/code\u003e used to set the start point of this curve",
          "\u003ccode\u003ecp1\u003c/code\u003e - the second specified \n\u003ccode\u003ePoint2D\u003c/code\u003e used to set the first control point of this curve",
          "\u003ccode\u003ecp2\u003c/code\u003e - the third specified \n\u003ccode\u003ePoint2D\u003c/code\u003e used to set the second control point of this curve",
          "\u003ccode\u003ep2\u003c/code\u003e - the fourth specified \n\u003ccode\u003ePoint2D\u003c/code\u003e used to set the end point of this curve"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "pts"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this curve to the coordinates of the Point2D objects at the specified offset in the specified array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epts\u003c/code\u003e - an array of \n\u003ccode\u003ePoint2D\u003c/code\u003e objects",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of \n\u003ccode\u003epts\u003c/code\u003e from which to begin setting the end points and control points of this curve to the points contained in \n\u003ccode\u003epts\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.CubicCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this curve to the same as those in the specified CubicCurve2D.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the specified \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatnessSq",
      "comment": "Returns the square of the flatness of the cubic curve specified by the indicated control points. The flatness is the maximum distance of a control point from the line connecting the end points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate that specifies the start point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate that specifies the start point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrlx1\u003c/code\u003e - the X coordinate that specifies the first control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrly1\u003c/code\u003e - the Y coordinate that specifies the first control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrlx2\u003c/code\u003e - the X coordinate that specifies the second control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrly2\u003c/code\u003e - the Y coordinate that specifies the second control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate that specifies the end point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate that specifies the end point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e"
        ],
        "return": [
          "the square of the flatness of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e represented by the specified coordinates."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatness",
      "comment": "Returns the flatness of the cubic curve specified by the indicated control points. The flatness is the maximum distance of a control point from the line connecting the end points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate that specifies the start point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate that specifies the start point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrlx1\u003c/code\u003e - the X coordinate that specifies the first control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrly1\u003c/code\u003e - the Y coordinate that specifies the first control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrlx2\u003c/code\u003e - the X coordinate that specifies the second control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ectrly2\u003c/code\u003e - the Y coordinate that specifies the second control point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate that specifies the end point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate that specifies the end point of a \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e"
        ],
        "return": [
          "the flatness of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e represented by the specified coordinates."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "coords"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatnessSq",
      "comment": "Returns the square of the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index. The flatness is the maximum distance of a control point from the line connecting the end points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecoords\u003c/code\u003e - an array containing coordinates",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of \n\u003ccode\u003ecoords\u003c/code\u003e from which to begin getting the end points and control points of the curve"
        ],
        "return": [
          "the square of the flatness of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e specified by the coordinates in \n\u003ccode\u003ecoords\u003c/code\u003e at the specified offset."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "coords"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatness",
      "comment": "Returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index. The flatness is the maximum distance of a control point from the line connecting the end points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecoords\u003c/code\u003e - an array containing coordinates",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of \n\u003ccode\u003ecoords\u003c/code\u003e from which to begin getting the end points and control points of the curve"
        ],
        "return": [
          "the flatness of the \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e specified by the coordinates in \n\u003ccode\u003ecoords\u003c/code\u003e at the specified offset."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlatnessSq",
      "comment": "Returns the square of the flatness of this curve. The flatness is the maximum distance of a control point from the line connecting the end points.",
      "tagMap": {
        "return": [
          "the square of the flatness of this curve."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlatness",
      "comment": "Returns the flatness of this curve. The flatness is the maximum distance of a control point from the line connecting the end points.",
      "tagMap": {
        "return": [
          "the flatness of this curve."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.CubicCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.CubicCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "right"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subdivide",
      "comment": "Subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters. Either or both of the left and right objects may be the same as this object or null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eleft\u003c/code\u003e - the cubic curve object for storing for the left or first half of the subdivided curve",
          "\u003ccode\u003eright\u003c/code\u003e - the cubic curve object for storing for the right or second half of the subdivided curve"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.CubicCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.CubicCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.CubicCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "right"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "subdivide",
      "comment": "Subdivides the cubic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters. Either or both of the left and right objects may be the same as the src object or null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the cubic curve to be subdivided",
          "\u003ccode\u003eleft\u003c/code\u003e - the cubic curve object for storing the left or first half of the subdivided curve",
          "\u003ccode\u003eright\u003c/code\u003e - the cubic curve object for storing the right or second half of the subdivided curve"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcoff"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "leftoff"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "right"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rightoff"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "subdivide",
      "comment": "Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff + 7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices. Either or both of the left and right arrays may be null or a reference to the same array as the src array. Note that the last point in the first subdivided curve is the same as the first point in the second subdivided curve. Thus, it is possible to pass the same array for left and right and to use offsets, such as rightoff equals (leftoff + 6), in order to avoid allocating extra storage for this common point.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the array holding the coordinates for the source curve",
          "\u003ccode\u003esrcoff\u003c/code\u003e - the offset into the array of the beginning of the the 6 source coordinates",
          "\u003ccode\u003eleft\u003c/code\u003e - the array for storing the coordinates for the first half of the subdivided curve",
          "\u003ccode\u003eleftoff\u003c/code\u003e - the offset into the array of the beginning of the the 6 left coordinates",
          "\u003ccode\u003eright\u003c/code\u003e - the array for storing the coordinates for the second half of the subdivided curve",
          "\u003ccode\u003erightoff\u003c/code\u003e - the offset into the array of the beginning of the the 6 right coordinates"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "eqn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "solveCubic",
      "comment": "Solves the cubic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots. The solved cubic is represented by the equation:      eqn \u003d {c, b, a, d}\n     dx^3 + ax^2 + bx + c \u003d 0\n A return value of -1 is used to distinguish a constant equation that might be always 0 or never 0 from an equation that has no zeroes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeqn\u003c/code\u003e - an array containing coefficients for a cubic"
        ],
        "return": [
          "the number of roots, or -1 if the equation is a constant."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "eqn"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "res"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "solveCubic",
      "comment": "Solve the cubic whose coefficients are in the eqn array and place the non-complex roots into the res array, returning the number of roots. The cubic solved is represented by the equation: eqn \u003d {c, b, a, d} dx^3 + ax^2 + bx + c \u003d 0 A return value of -1 is used to distinguish a constant equation, which may be always 0 or never 0, from an equation which has no zeroes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeqn\u003c/code\u003e - the specified array of coefficients to use to solve the cubic equation",
          "\u003ccode\u003eres\u003c/code\u003e - the array that contains the non-complex roots resulting from the solution of the cubic equation"
        ],
        "return": [
          "the number of roots, or -1 if the equation is a constant"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified X coordinate to be tested",
          "\u003ccode\u003ey\u003c/code\u003e - the specified Y coordinate to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified coordinates are inside the \n\u003ccode\u003eShape\u003c/code\u003e boundary; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(java.awt.geom.Point2D)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the specified \n\u003ccode\u003ePoint2D\u003c/code\u003e to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003ePoint2D\u003c/code\u003e is inside the boundary of the \n\u003ccode\u003eShape\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersects",
      "comment": "Tests if the interior of the Shape intersects the interior of a specified rectangular area. The rectangular area is considered to intersect the Shape if any point is contained in both the interior of the Shape and the specified rectangular area. The Shape.intersects() method allows a Shape implementation to conservatively return true when: there is a high probability that the rectangular area and the Shape intersect, but the calculations to accurately determine this intersection are prohibitively expensive. This means that for some Shapes this method might return true even though the rectangular area does not intersect the Shape. The Area class performs more accurate computations of geometric intersection than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Area.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eArea\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003eintersects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the specified rectangular area",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the specified rectangular area"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e and the interior of the rectangular area intersect, or are both highly likely to intersect and intersection calculations would be too expensive to perform; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersects",
      "comment": "Tests if the interior of the Shape intersects the interior of a specified Rectangle2D. The Shape.intersects() method allows a Shape implementation to conservatively return true when: there is a high probability that the Rectangle2D and the Shape intersect, but the calculations to accurately determine this intersection are prohibitively expensive. This means that for some Shapes this method might return true even though the Rectangle2D does not intersect the Shape. The Area class performs more accurate computations of geometric intersection than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003e\u003ccode\u003eShape.intersects(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(java.awt.geom.Rectangle2D)\"\u003eintersects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e and the interior of the specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e intersect, or are both highly likely to intersect and intersection calculations would be too expensive to perform; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectangular area to be considered contained within the Shape. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Area.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eArea\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003e\u003ccode\u003eShape.intersects(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double,double,double)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the specified rectangular area",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the specified rectangular area"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e entirely contains the specified rectangular area; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or, if the \n\u003ccode\u003eShape\u003c/code\u003e contains the rectangular area and the \n\u003ccode\u003eintersects\u003c/code\u003e method returns \n\u003ccode\u003etrue\u003c/code\u003e and the containment calculations would be too expensive to perform."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the interior of the Shape entirely contains the specified Rectangle2D. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the Rectangle2D are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the Rectangle2D. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double,double,double)\"\u003e\u003ccode\u003eShape.contains(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(java.awt.geom.Rectangle2D)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - The specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e entirely contains the \n\u003ccode\u003eRectangle2D\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or, if the \n\u003ccode\u003eShape\u003c/code\u003e contains the \n\u003ccode\u003eRectangle2D\u003c/code\u003e and the \n\u003ccode\u003eintersects\u003c/code\u003e method returns \n\u003ccode\u003etrue\u003c/code\u003e and the containment calculations would be too expensive to perform."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds",
      "comment": "Returns an integer Rectangle that completely encloses the Shape. Note that there is no guarantee that the returned Rectangle is the smallest bounding box that encloses the Shape, only that the Shape lies entirely within the indicated Rectangle. The returned Rectangle might also fail to completely enclose the Shape if the Shape overflows the limited range of the integer data type. The getBounds2D method generally returns a tighter bounding box due to its greater flexibility in representation. Note that the definition of insideness can lead to situations where points on the defining outline of the shape may not be considered contained in the returned bounds object, but only in cases where those points are also not considered contained in the original shape. If a point is inside the shape according to the contains(point) method, then it must be inside the returned Rectangle bounds object according to the contains(point) method of the bounds. Specifically: shape.contains(x,y) requires bounds.contains(x,y) If a point is not inside the shape, then it might still be contained in the bounds object: bounds.contains(x,y) does not imply shape.contains(x,y)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds2D()\"\u003e\u003ccode\u003eShape.getBounds2D()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds()\"\u003egetBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an integer \n\u003ccode\u003eRectangle\u003c/code\u003e that completely encloses the \n\u003ccode\u003eShape\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathIterator",
      "comment": "Returns an iteration object that defines the boundary of the shape. The iterator for this class is not multi-threaded safe, which means that this CubicCurve2D class does not guarantee that modifications to the geometry of this CubicCurve2D object do not affect any iterations of that geometry that are already in process.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an optional \n\u003ccode\u003eAffineTransform\u003c/code\u003e to be applied to the coordinates as they are returned in the iteration, or \n\u003ccode\u003enull\u003c/code\u003e if untransformed coordinates are desired"
        ],
        "return": [
          "the \n\u003ccode\u003ePathIterator\u003c/code\u003e object that returns the geometry of the outline of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e, one segment at a time."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "flatness"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathIterator",
      "comment": "Return an iteration object that defines the boundary of the flattened shape. The iterator for this class is not multi-threaded safe, which means that this CubicCurve2D class does not guarantee that modifications to the geometry of this CubicCurve2D object do not affect any iterations of that geometry that are already in process.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform,double)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an optional \n\u003ccode\u003eAffineTransform\u003c/code\u003e to be applied to the coordinates as they are returned in the iteration, or \n\u003ccode\u003enull\u003c/code\u003e if untransformed coordinates are desired",
          "\u003ccode\u003eflatness\u003c/code\u003e - the maximum amount that the control points for a given curve can vary from colinear before a subdivided curve is replaced by a straight line connecting the end points"
        ],
        "return": [
          "the \n\u003ccode\u003ePathIterator\u003c/code\u003e object that returns the geometry of the outline of this \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e, one segment at a time."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a new object of the same class as this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if there is not enough memory."
        ],
        "return": [
          "a clone of this instance."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for instantiation and provide a number of formats for storing the information necessary to satisfy the various accessor methods below.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/CubicCurve2D.Float.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eCubicCurve2D.Float\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/CubicCurve2D.Double.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eCubicCurve2D.Double\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.awt.geom.CubicCurve2D$Float",
    "java.awt.geom.CubicCurve2D$Double"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.geom.CubicCurve2D",
  "comment": "The \n\u003ccode\u003eCubicCurve2D\u003c/code\u003e class defines a cubic parametric curve segment in \n\u003ccode\u003e(x,y)\u003c/code\u003e coordinate space. \n\u003cp\u003e This class is only the abstract superclass for all objects which store a 2D cubic curve segment. The actual storage representation of the coordinates is left to the subclass.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}