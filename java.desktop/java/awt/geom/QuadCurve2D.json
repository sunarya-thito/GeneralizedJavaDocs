{
  "packageName": "java.awt.geom",
  "simpleName": "QuadCurve2D",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getX1",
      "comment": "Returns the X coordinate of the start point in double in precision.",
      "tagMap": {
        "return": [
          "the X coordinate of the start point."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getY1",
      "comment": "Returns the Y coordinate of the start point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the start point."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getP1",
      "comment": "Returns the start point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint2D\u003c/code\u003e that is the start point of this \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlX",
      "comment": "Returns the X coordinate of the control point in double precision.",
      "tagMap": {
        "return": [
          "X coordinate the control point"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlY",
      "comment": "Returns the Y coordinate of the control point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the control point."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCtrlPt",
      "comment": "Returns the control point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint2D\u003c/code\u003e that is the control point of this \n\u003ccode\u003ePoint2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getX2",
      "comment": "Returns the X coordinate of the end point in double precision.",
      "tagMap": {
        "return": [
          "the x coordinate of the end point."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getY2",
      "comment": "Returns the Y coordinate of the end point in double precision.",
      "tagMap": {
        "return": [
          "the Y coordinate of the end point."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getP2",
      "comment": "Returns the end point.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint\u003c/code\u003e object that is the end point of this \n\u003ccode\u003ePoint2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control point of this curve to the specified double coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate of the start point",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate of the start point",
          "\u003ccode\u003ectrlx\u003c/code\u003e - the X coordinate of the control point",
          "\u003ccode\u003ectrly\u003c/code\u003e - the Y coordinate of the control point",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate of the end point",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate of the end point"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "coords"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this QuadCurve2D to the double coordinates at the specified offset in the specified array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecoords\u003c/code\u003e - the array containing coordinate values",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index into the array from which to start getting the coordinate values and assigning them to this \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "p1"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "cp"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "p2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control point of this QuadCurve2D to the specified Point2D coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ep1\u003c/code\u003e - the start point",
          "\u003ccode\u003ecp\u003c/code\u003e - the control point",
          "\u003ccode\u003ep2\u003c/code\u003e - the end point"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "pts"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control points of this QuadCurve2D to the coordinates of the Point2D objects at the specified offset in the specified array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epts\u003c/code\u003e - an array containing \n\u003ccode\u003ePoint2D\u003c/code\u003e that define coordinate values",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index into \n\u003ccode\u003epts\u003c/code\u003e from which to start getting the coordinate values and assigning them to this \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.QuadCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCurve",
      "comment": "Sets the location of the end points and control point of this QuadCurve2D to the same as those in the specified QuadCurve2D.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the specified \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatnessSq",
      "comment": "Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate of the start point",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate of the start point",
          "\u003ccode\u003ectrlx\u003c/code\u003e - the X coordinate of the control point",
          "\u003ccode\u003ectrly\u003c/code\u003e - the Y coordinate of the control point",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate of the end point",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate of the end point"
        ],
        "return": [
          "the square of the flatness of the quadratic curve defined by the specified coordinates."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y1"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrlx"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "ctrly"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x2"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatness",
      "comment": "Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex1\u003c/code\u003e - the X coordinate of the start point",
          "\u003ccode\u003ey1\u003c/code\u003e - the Y coordinate of the start point",
          "\u003ccode\u003ectrlx\u003c/code\u003e - the X coordinate of the control point",
          "\u003ccode\u003ectrly\u003c/code\u003e - the Y coordinate of the control point",
          "\u003ccode\u003ex2\u003c/code\u003e - the X coordinate of the end point",
          "\u003ccode\u003ey2\u003c/code\u003e - the Y coordinate of the end point"
        ],
        "return": [
          "the flatness of the quadratic curve defined by the specified coordinates."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "coords"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatnessSq",
      "comment": "Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecoords\u003c/code\u003e - an array containing coordinate values",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index into \n\u003ccode\u003ecoords\u003c/code\u003e from which to to start getting the values from the array"
        ],
        "return": [
          "the flatness of the quadratic curve that is defined by the values in the specified array at the specified index."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "coords"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFlatness",
      "comment": "Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecoords\u003c/code\u003e - an array containing coordinate values",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index into \n\u003ccode\u003ecoords\u003c/code\u003e from which to start getting the coordinate values"
        ],
        "return": [
          "the flatness of a quadratic curve defined by the specified array at the specified offset."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlatnessSq",
      "comment": "Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D.",
      "tagMap": {
        "return": [
          "the square of the flatness of this \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFlatness",
      "comment": "Returns the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D.",
      "tagMap": {
        "return": [
          "the flatness of this \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.QuadCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.QuadCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "right"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subdivide",
      "comment": "Subdivides this QuadCurve2D and stores the resulting two subdivided curves into the left and right curve parameters. Either or both of the left and right objects can be the same as this QuadCurve2D or null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eleft\u003c/code\u003e - the \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e object for storing the left or first half of the subdivided curve",
          "\u003ccode\u003eright\u003c/code\u003e - the \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e object for storing the right or second half of the subdivided curve"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.QuadCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.QuadCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.QuadCurve2D",
            "type": "Class"
          },
          "field": {
            "name": "right"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "subdivide",
      "comment": "Subdivides the quadratic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters. Either or both of the left and right objects can be the same as the src object or null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the quadratic curve to be subdivided",
          "\u003ccode\u003eleft\u003c/code\u003e - the \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e object for storing the left or first half of the subdivided curve",
          "\u003ccode\u003eright\u003c/code\u003e - the \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e object for storing the right or second half of the subdivided curve"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcoff"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "left"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "leftoff"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "right"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rightoff"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "subdivide",
      "comment": "Subdivides the quadratic curve specified by the coordinates stored in the src array at indices srcoff through srcoff + 5 and stores the resulting two subdivided curves into the two result arrays at the corresponding indices. Either or both of the left and right arrays can be null or a reference to the same array and offset as the src array. Note that the last point in the first subdivided curve is the same as the first point in the second subdivided curve. Thus, it is possible to pass the same array for left and right and to use offsets such that rightoff equals leftoff + 4 in order to avoid allocating extra storage for this common point.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the array holding the coordinates for the source curve",
          "\u003ccode\u003esrcoff\u003c/code\u003e - the offset into the array of the beginning of the the 6 source coordinates",
          "\u003ccode\u003eleft\u003c/code\u003e - the array for storing the coordinates for the first half of the subdivided curve",
          "\u003ccode\u003eleftoff\u003c/code\u003e - the offset into the array of the beginning of the the 6 left coordinates",
          "\u003ccode\u003eright\u003c/code\u003e - the array for storing the coordinates for the second half of the subdivided curve",
          "\u003ccode\u003erightoff\u003c/code\u003e - the offset into the array of the beginning of the the 6 right coordinates"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "eqn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "solveQuadratic",
      "comment": "Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots. The quadratic solved is represented by the equation:      eqn \u003d {C, B, A};\n     ax^2 + bx + c \u003d 0\n A return value of -1 is used to distinguish a constant equation, which might be always 0 or never 0, from an equation that has no zeroes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeqn\u003c/code\u003e - the array that contains the quadratic coefficients"
        ],
        "return": [
          "the number of roots, or \n\u003ccode\u003e-1\u003c/code\u003e if the equation is a constant"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "eqn"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "res"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "solveQuadratic",
      "comment": "Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the number of roots. The quadratic solved is represented by the equation:      eqn \u003d {C, B, A};\n     ax^2 + bx + c \u003d 0\n A return value of -1 is used to distinguish a constant equation, which might be always 0 or never 0, from an equation that has no zeroes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eeqn\u003c/code\u003e - the specified array of coefficients to use to solve the quadratic equation",
          "\u003ccode\u003eres\u003c/code\u003e - the array that contains the non-complex roots resulting from the solution of the quadratic equation"
        ],
        "return": [
          "the number of roots, or \n\u003ccode\u003e-1\u003c/code\u003e if the equation is a constant."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the specified X coordinate to be tested",
          "\u003ccode\u003ey\u003c/code\u003e - the specified Y coordinate to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified coordinates are inside the \n\u003ccode\u003eShape\u003c/code\u003e boundary; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(java.awt.geom.Point2D)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the specified \n\u003ccode\u003ePoint2D\u003c/code\u003e to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003ePoint2D\u003c/code\u003e is inside the boundary of the \n\u003ccode\u003eShape\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersects",
      "comment": "Tests if the interior of the Shape intersects the interior of a specified rectangular area. The rectangular area is considered to intersect the Shape if any point is contained in both the interior of the Shape and the specified rectangular area. The Shape.intersects() method allows a Shape implementation to conservatively return true when: there is a high probability that the rectangular area and the Shape intersect, but the calculations to accurately determine this intersection are prohibitively expensive. This means that for some Shapes this method might return true even though the rectangular area does not intersect the Shape. The Area class performs more accurate computations of geometric intersection than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Area.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eArea\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003eintersects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the specified rectangular area",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the specified rectangular area"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e and the interior of the rectangular area intersect, or are both highly likely to intersect and intersection calculations would be too expensive to perform; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intersects",
      "comment": "Tests if the interior of the Shape intersects the interior of a specified Rectangle2D. The Shape.intersects() method allows a Shape implementation to conservatively return true when: there is a high probability that the Rectangle2D and the Shape intersect, but the calculations to accurately determine this intersection are prohibitively expensive. This means that for some Shapes this method might return true even though the Rectangle2D does not intersect the Shape. The Area class performs more accurate computations of geometric intersection than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003e\u003ccode\u003eShape.intersects(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(java.awt.geom.Rectangle2D)\"\u003eintersects\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e and the interior of the specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e intersect, or are both highly likely to intersect and intersection calculations would be too expensive to perform; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectangular area to be considered contained within the Shape. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Area.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eArea\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#intersects(double,double,double,double)\"\u003e\u003ccode\u003eShape.intersects(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double,double,double)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the specified rectangular area",
          "\u003ccode\u003ew\u003c/code\u003e - the width of the specified rectangular area",
          "\u003ccode\u003eh\u003c/code\u003e - the height of the specified rectangular area"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e entirely contains the specified rectangular area; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or, if the \n\u003ccode\u003eShape\u003c/code\u003e contains the rectangular area and the \n\u003ccode\u003eintersects\u003c/code\u003e method returns \n\u003ccode\u003etrue\u003c/code\u003e and the containment calculations would be too expensive to perform."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Rectangle2D",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if the interior of the Shape entirely contains the specified Rectangle2D. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the Rectangle2D are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the Rectangle2D. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(double,double,double,double)\"\u003e\u003ccode\u003eShape.contains(double, double, double, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#contains(java.awt.geom.Rectangle2D)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - The specified \n\u003ccode\u003eRectangle2D\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interior of the \n\u003ccode\u003eShape\u003c/code\u003e entirely contains the \n\u003ccode\u003eRectangle2D\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise or, if the \n\u003ccode\u003eShape\u003c/code\u003e contains the \n\u003ccode\u003eRectangle2D\u003c/code\u003e and the \n\u003ccode\u003eintersects\u003c/code\u003e method returns \n\u003ccode\u003etrue\u003c/code\u003e and the containment calculations would be too expensive to perform."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds",
      "comment": "Returns an integer Rectangle that completely encloses the Shape. Note that there is no guarantee that the returned Rectangle is the smallest bounding box that encloses the Shape, only that the Shape lies entirely within the indicated Rectangle. The returned Rectangle might also fail to completely enclose the Shape if the Shape overflows the limited range of the integer data type. The getBounds2D method generally returns a tighter bounding box due to its greater flexibility in representation. Note that the definition of insideness can lead to situations where points on the defining outline of the shape may not be considered contained in the returned bounds object, but only in cases where those points are also not considered contained in the original shape. If a point is inside the shape according to the contains(point) method, then it must be inside the returned Rectangle bounds object according to the contains(point) method of the bounds. Specifically: shape.contains(x,y) requires bounds.contains(x,y) If a point is not inside the shape, then it might still be contained in the bounds object: bounds.contains(x,y) does not imply shape.contains(x,y)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds2D()\"\u003e\u003ccode\u003eShape.getBounds2D()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getBounds()\"\u003egetBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an integer \n\u003ccode\u003eRectangle\u003c/code\u003e that completely encloses the \n\u003ccode\u003eShape\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathIterator",
      "comment": "Returns an iteration object that defines the boundary of the shape of this QuadCurve2D. The iterator for this class is not multi-threaded safe, which means that this QuadCurve2D class does not guarantee that modifications to the geometry of this QuadCurve2D object do not affect any iterations of that geometry that are already in process.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an optional \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e to apply to the shape boundary"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/PathIterator.html\" title\u003d\"interface in java.awt.geom\"\u003e\u003ccode\u003ePathIterator\u003c/code\u003e\u003c/a\u003e object that defines the boundary of the shape."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.PathIterator",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "at"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "flatness"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathIterator",
      "comment": "Returns an iteration object that defines the boundary of the flattened shape of this QuadCurve2D. The iterator for this class is not multi-threaded safe, which means that this QuadCurve2D class does not guarantee that modifications to the geometry of this QuadCurve2D object do not affect any iterations of that geometry that are already in process.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform,double)\"\u003egetPathIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Shape.html\" title\u003d\"interface in java.awt\"\u003eShape\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eat\u003c/code\u003e - an optional \n\u003ccode\u003eAffineTransform\u003c/code\u003e to apply to the boundary of the shape",
          "\u003ccode\u003eflatness\u003c/code\u003e - the maximum distance that the control points for a subdivided curve can be with respect to a line connecting the end points of this curve before this curve is replaced by a straight line connecting the end points."
        ],
        "return": [
          "a \n\u003ccode\u003ePathIterator\u003c/code\u003e object that defines the flattened boundary of the shape."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a new object of the same class and with the same contents as this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if there is not enough memory."
        ],
        "return": [
          "a clone of this instance."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for instantiation and provide a number of formats for storing the information necessary to satisfy the various accessor methods below.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/QuadCurve2D.Float.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eQuadCurve2D.Float\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/QuadCurve2D.Double.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eQuadCurve2D.Double\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.awt.geom.QuadCurve2D$Float",
    "java.awt.geom.QuadCurve2D$Double"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.geom.QuadCurve2D",
  "comment": "The \n\u003ccode\u003eQuadCurve2D\u003c/code\u003e class defines a quadratic parametric curve segment in \n\u003ccode\u003e(x,y)\u003c/code\u003e coordinate space. \n\u003cp\u003e This class is only the abstract superclass for all objects that store a 2D quadratic curve segment. The actual storage representation of the coordinates is left to the subclass.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}