{
  "packageName": "java.awt.dnd",
  "simpleName": "DropTargetDragEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.dnd.DropTargetEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocation",
      "comment": "This method returns a Point indicating the Cursor\u0027s current location within the Component\u0027s coordinates.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current cursor location in \n\u003ccode\u003eComponent\u003c/code\u003e\u0027s coords."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.DataFlavor",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrentDataFlavors",
      "comment": "This method returns the current DataFlavors from the DropTargetContext.",
      "annotations": [],
      "tagMap": {
        "return": [
          "current DataFlavors from the DropTargetContext"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrentDataFlavorsAsList",
      "comment": "This method returns the current DataFlavors as a java.util.List",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ejava.util.List\u003c/code\u003e of the Current \n\u003ccode\u003eDataFlavor\u003c/code\u003es"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.datatransfer.DataFlavor",
            "type": "Class"
          },
          "name": "df",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDataFlavorSupported",
      "comment": "This method returns a boolean indicating if the specified DataFlavor is supported.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edf\u003c/code\u003e - the \n\u003ccode\u003eDataFlavor\u003c/code\u003e to test"
        ],
        "return": [
          "if a particular DataFlavor is supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceActions",
      "comment": "This method returns the source drop actions.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the source drop actions"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDropAction",
      "comment": "This method returns the user drop action.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the user drop action"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.Transferable",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransferable",
      "comment": "This method returns the Transferable object that represents the data associated with the current drag operation.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/dnd/InvalidDnDOperationException.html\" title\u003d\"class in java.awt.dnd\"\u003eInvalidDnDOperationException\u003c/a\u003e\u003c/code\u003e - if the data associated with the drag operation is not available"
        ],
        "return": [
          "the Transferable associated with the drag operation"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dragOperation",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "acceptDrag",
      "comment": "Accepts the drag. This method should be called from a DropTargetListeners dragEnter, dragOver, and dropActionChanged methods if the implementation wishes to accept an operation from the srcActions other than the one selected by the user as represented by the dropAction.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edragOperation\u003c/code\u003e - the operation accepted by the target"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rejectDrag",
      "comment": "Rejects the drag as a result of examining either the dropAction or the available DataFlavor types.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DropTargetContext",
            "type": "Class"
          },
          "name": "dtc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "name": "cursorLocn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dropAction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "srcActions",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a DropTargetDragEvent given the DropTargetContext for this operation, the location of the \"Drag\" Cursor\u0027s hotspot in the Component\u0027s coordinates, the user drop action, and the source drop actions.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edtc\u003c/code\u003e - The DropTargetContext for this operation",
          "\u003ccode\u003ecursorLocn\u003c/code\u003e - The location of the \"Drag\" Cursor\u0027s hotspot in Component coordinates",
          "\u003ccode\u003edropAction\u003c/code\u003e - The user drop action",
          "\u003ccode\u003esrcActions\u003c/code\u003e - The source drop actions"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if cursorLocn is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dropAction is not one of \n\u003ccode\u003eDnDConstants\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if srcActions is not a bitwise mask of \n\u003ccode\u003eDnDConstants\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dtc is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.dnd.DropTargetDragEvent",
  "comment": "The \n\u003ccode\u003eDropTargetDragEvent\u003c/code\u003e is delivered to a \n\u003ccode\u003eDropTargetListener\u003c/code\u003e via its dragEnter() and dragOver() methods. \n\u003cp\u003e The \u003ccode\u003eDropTargetDragEvent\u003c/code\u003e reports the \u003ci\u003esource drop actions\u003c/i\u003e and the \u003ci\u003euser drop action\u003c/i\u003e that reflect the current state of the drag operation. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003eSource drop actions\u003c/i\u003e is a bitwise mask of \u003ccode\u003eDnDConstants\u003c/code\u003e that represents the set of drop actions supported by the drag source for this drag operation. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003eUser drop action\u003c/i\u003e depends on the drop actions supported by the drag source and the drop action selected by the user. The user can select a drop action by pressing modifier keys during the drag operation: \u003c/p\u003e\n\u003cpre\u003e   Ctrl + Shift -\u0026gt; ACTION_LINK\n   Ctrl         -\u0026gt; ACTION_COPY\n   Shift        -\u0026gt; ACTION_MOVE\n \u003c/pre\u003e If the user selects a drop action, the \n\u003ci\u003euser drop action\u003c/i\u003e is one of \n\u003ccode\u003eDnDConstants\u003c/code\u003e that represents the selected drop action if this drop action is supported by the drag source or \n\u003ccode\u003eDnDConstants.ACTION_NONE\u003c/code\u003e if this drop action is not supported by the drag source. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the user doesn\u0027t select a drop action, the set of \u003ccode\u003eDnDConstants\u003c/code\u003e that represents the set of drop actions supported by the drag source is searched for \u003ccode\u003eDnDConstants.ACTION_MOVE\u003c/code\u003e, then for \u003ccode\u003eDnDConstants.ACTION_COPY\u003c/code\u003e, then for \u003ccode\u003eDnDConstants.ACTION_LINK\u003c/code\u003e and the \u003ci\u003euser drop action\u003c/i\u003e is the first constant found. If no constant is found the \u003ci\u003euser drop action\u003c/i\u003e is \u003ccode\u003eDnDConstants.ACTION_NONE\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.dnd.DropTargetDragEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}