{
  "packageName": "java.awt.dnd",
  "simpleName": "DragSourceDragEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.dnd.DragSourceEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTargetActions",
      "comment": "This method returns the target drop action.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the target drop action."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGestureModifiers",
      "comment": "This method returns an int representing the current state of the input device modifiers associated with the user\u0027s gesture. Typically these would be mouse buttons or keyboard modifiers. If the modifiers passed to the constructor are invalid, this method returns them unchanged.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current state of the input device modifiers"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGestureModifiersEx",
      "comment": "This method returns an int representing the current state of the input device extended modifiers associated with the user\u0027s gesture. See InputEvent.getModifiersEx() If the modifiers passed to the constructor are invalid, this method returns them unchanged.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current state of the input device extended modifiers"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUserAction",
      "comment": "This method returns the user drop action.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the user drop action."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDropAction",
      "comment": "This method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the logical intersection of the target drop action and the set of drop actions supported by the drag source."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragSourceContext",
            "type": "Class"
          },
          "name": "dsc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dropAction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modifiers",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DragSourceDragEvent. This class is typically instantiated by the DragSourceContextPeer rather than directly by client code. The coordinates for this DragSourceDragEvent are not specified, so getLocation will return null for this event. The arguments dropAction and action should be one of DnDConstants that represents a single action. The argument modifiers should be either a bitwise mask of old java.awt.event.InputEvent.*_MASK constants or a bitwise mask of extended java.awt.event.InputEvent.*_DOWN_MASK constants. This constructor does not throw any exception for invalid dropAction, action and modifiers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInputEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/dnd/DragSourceEvent.html#getLocation()\"\u003e\u003ccode\u003eDragSourceEvent.getLocation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edsc\u003c/code\u003e - the \n\u003ccode\u003eDragSourceContext\u003c/code\u003e that is to manage notifications for this event.",
          "\u003ccode\u003edropAction\u003c/code\u003e - the user drop action.",
          "\u003ccode\u003eaction\u003c/code\u003e - the target drop action.",
          "\u003ccode\u003emodifiers\u003c/code\u003e - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edsc\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragSourceContext",
            "type": "Class"
          },
          "name": "dsc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dropAction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modifiers",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DragSourceDragEvent given the specified DragSourceContext, user drop action, target drop action, modifiers and coordinates. The arguments dropAction and action should be one of DnDConstants that represents a single action. The argument modifiers should be either a bitwise mask of old java.awt.event.InputEvent.*_MASK constants or a bitwise mask of extended java.awt.event.InputEvent.*_DOWN_MASK constants. This constructor does not throw any exception for invalid dropAction, action and modifiers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInputEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edsc\u003c/code\u003e - the \n\u003ccode\u003eDragSourceContext\u003c/code\u003e associated with this event.",
          "\u003ccode\u003edropAction\u003c/code\u003e - the user drop action.",
          "\u003ccode\u003eaction\u003c/code\u003e - the target drop action.",
          "\u003ccode\u003emodifiers\u003c/code\u003e - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.",
          "\u003ccode\u003ex\u003c/code\u003e - the horizontal coordinate for the cursor location",
          "\u003ccode\u003ey\u003c/code\u003e - the vertical coordinate for the cursor location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edsc\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.dnd.DragSourceDragEvent",
  "comment": "The \n\u003ccode\u003eDragSourceDragEvent\u003c/code\u003e is delivered from the \n\u003ccode\u003eDragSourceContextPeer\u003c/code\u003e, via the \n\u003ccode\u003eDragSourceContext\u003c/code\u003e, to the \n\u003ccode\u003eDragSourceListener\u003c/code\u003e registered with that \n\u003ccode\u003eDragSourceContext\u003c/code\u003e and with its associated \n\u003ccode\u003eDragSource\u003c/code\u003e. \n\u003cp\u003e The \u003ccode\u003eDragSourceDragEvent\u003c/code\u003e reports the \u003ci\u003etarget drop action\u003c/i\u003e and the \u003ci\u003euser drop action\u003c/i\u003e that reflect the current state of the drag operation. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003eTarget drop action\u003c/i\u003e is one of \u003ccode\u003eDnDConstants\u003c/code\u003e that represents the drop action selected by the current drop target if this drop action is supported by the drag source or \u003ccode\u003eDnDConstants.ACTION_NONE\u003c/code\u003e if this drop action is not supported by the drag source. \u003c/p\u003e\n\u003cp\u003e \u003ci\u003eUser drop action\u003c/i\u003e depends on the drop actions supported by the drag source and the drop action selected by the user. The user can select a drop action by pressing modifier keys during the drag operation: \u003c/p\u003e\n\u003cpre\u003e   Ctrl + Shift -\u0026gt; ACTION_LINK\n   Ctrl         -\u0026gt; ACTION_COPY\n   Shift        -\u0026gt; ACTION_MOVE\n \u003c/pre\u003e If the user selects a drop action, the \n\u003ci\u003euser drop action\u003c/i\u003e is one of \n\u003ccode\u003eDnDConstants\u003c/code\u003e that represents the selected drop action if this drop action is supported by the drag source or \n\u003ccode\u003eDnDConstants.ACTION_NONE\u003c/code\u003e if this drop action is not supported by the drag source. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the user doesn\u0027t select a drop action, the set of \u003ccode\u003eDnDConstants\u003c/code\u003e that represents the set of drop actions supported by the drag source is searched for \u003ccode\u003eDnDConstants.ACTION_MOVE\u003c/code\u003e, then for \u003ccode\u003eDnDConstants.ACTION_COPY\u003c/code\u003e, then for \u003ccode\u003eDnDConstants.ACTION_LINK\u003c/code\u003e and the \u003ci\u003euser drop action\u003c/i\u003e is the first constant found. If no constant is found the \u003ci\u003euser drop action\u003c/i\u003e is \u003ccode\u003eDnDConstants.ACTION_NONE\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.dnd.DragSourceDragEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}