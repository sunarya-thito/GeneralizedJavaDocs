{
  "packageName": "java.awt.dnd",
  "simpleName": "DragGestureRecognizer",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.dnd.DragSource",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dragSource",
      "comment": "The DragSource associated with this DragGestureRecognizer.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "component",
      "comment": "The Component associated with this DragGestureRecognizer.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.dnd.DragGestureListener",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "dragGestureListener",
      "comment": "The DragGestureListener associated with this DragGestureRecognizer.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sourceActions",
      "comment": "An int representing the type(s) of action(s) used in this Drag and Drop operation.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.ArrayList",
        "parameters": [
          {
            "name": "java.awt.event.InputEvent",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "events",
      "comment": "The list of events (in order) that the DragGestureRecognizer \"recognized\" as a \"gesture\" that triggers a drag.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "registerListeners",
      "comment": "register this DragGestureRecognizer\u0027s Listeners with the Component subclasses must override this method",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "unregisterListeners",
      "comment": "unregister this DragGestureRecognizer\u0027s Listeners with the Component subclasses must override this method",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.dnd.DragSource",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDragSource",
      "comment": "This method returns the DragSource this DragGestureRecognizer will use in order to process the Drag and Drop operation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the DragSource"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponent",
      "comment": "This method returns the Component that is to be \"observed\" by the DragGestureRecognizer for drag initiating gestures.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The Component this DragGestureRecognizer is associated with"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setComponent",
      "comment": "set the Component that the DragGestureRecognizer is associated with registerListeners() and unregisterListeners() are called as a side effect as appropriate.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The \n\u003ccode\u003eComponent\u003c/code\u003e or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceActions",
      "comment": "This method returns an int representing the type of action(s) this Drag and Drop operation will support.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the currently permitted source action(s)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "actions",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSourceActions",
      "comment": "This method sets the permitted source drag action(s) for this Drag and Drop operation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eactions\u003c/code\u003e - the permitted source drag action(s)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.InputEvent",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTriggerEvent",
      "comment": "This method returns the first event in the series of events that initiated the Drag and Drop operation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the initial event that triggered the drag gesture"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resetRecognizer",
      "comment": "Reset the Recognizer, if its currently recognizing a gesture, ignore it.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.TooManyListenersException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragGestureListener",
            "type": "Class"
          },
          "name": "dgl",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addDragGestureListener",
      "comment": "Register a new DragGestureListener.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edgl\u003c/code\u003e - the \n\u003ccode\u003eDragGestureListener\u003c/code\u003e to register with this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TooManyListenersException.html\" title\u003d\"class in java.util\"\u003eTooManyListenersException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eDragGestureListener\u003c/code\u003e has already been added."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragGestureListener",
            "type": "Class"
          },
          "name": "dgl",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeDragGestureListener",
      "comment": "unregister the current DragGestureListener",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edgl\u003c/code\u003e - the \n\u003ccode\u003eDragGestureListener\u003c/code\u003e to unregister from this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if dgl is not (equal to) the currently registered \n\u003ccode\u003eDragGestureListener\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dragAction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "name": "p",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireDragGestureRecognized",
      "comment": "Notify the DragGestureListener that a Drag and Drop initiating gesture has occurred. Then reset the state of the Recognizer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edragAction\u003c/code\u003e - The action initially selected by the users gesture",
          "\u003ccode\u003ep\u003c/code\u003e - The point (in Component coords) where the gesture originated"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.InputEvent",
            "type": "Class"
          },
          "name": "awtie",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "appendEvent",
      "comment": "Listeners registered on the Component by this Recognizer shall record all Events that are recognized as part of the series of Events that go to comprise a Drag and Drop initiating gesture via this API. This method is used by a DragGestureRecognizer implementation to add an InputEvent subclass (that it believes is one in a series of events that comprise a Drag and Drop operation) to the array of events that this DragGestureRecognizer maintains internally.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eawtie\u003c/code\u003e - the \n\u003ccode\u003eInputEvent\u003c/code\u003e to add to this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e\u0027s internal array of events. Note that \n\u003ccode\u003enull\u003c/code\u003e is not a valid value, and will be ignored."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragSource",
            "type": "Class"
          },
          "name": "ds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sa",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragGestureListener",
            "type": "Class"
          },
          "name": "dgl",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new DragGestureRecognizer given the DragSource to be used in this Drag and Drop operation, the Component this DragGestureRecognizer should \"observe\" for drag initiating gestures, the action(s) supported for this Drag and Drop operation, and the DragGestureListener to notify once a drag initiating gesture has been detected.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eds\u003c/code\u003e - the \n\u003ccode\u003eDragSource\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e will use to process the Drag and Drop operation",
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e should \"observe\" the event stream to, in order to detect a drag initiating gesture. If this value is \n\u003ccode\u003enull\u003c/code\u003e, the \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e is not associated with any \n\u003ccode\u003eComponent\u003c/code\u003e.",
          "\u003ccode\u003esa\u003c/code\u003e - the set (logical OR) of the \n\u003ccode\u003eDnDConstants\u003c/code\u003e that this Drag and Drop operation will support",
          "\u003ccode\u003edgl\u003c/code\u003e - the \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e to notify when a drag gesture is detected"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if ds is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragSource",
            "type": "Class"
          },
          "name": "ds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "sa",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new DragGestureRecognizer given the DragSource to be used in this Drag and Drop operation, the Component this DragGestureRecognizer should \"observe\" for drag initiating gestures, and the action(s) supported for this Drag and Drop operation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eds\u003c/code\u003e - the \n\u003ccode\u003eDragSource\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e will use to process the Drag and Drop operation",
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e should \"observe\" the event stream to, in order to detect a drag initiating gesture. If this value is \n\u003ccode\u003enull\u003c/code\u003e, the \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e is not associated with any \n\u003ccode\u003eComponent\u003c/code\u003e.",
          "\u003ccode\u003esa\u003c/code\u003e - the set (logical OR) of the \n\u003ccode\u003eDnDConstants\u003c/code\u003e that this Drag and Drop operation will support"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if ds is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragSource",
            "type": "Class"
          },
          "name": "ds",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new DragGestureRecognizer given the DragSource to be used in this Drag and Drop operation, and the Component this DragGestureRecognizer should \"observe\" for drag initiating gestures.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eds\u003c/code\u003e - the \n\u003ccode\u003eDragSource\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e will use to process the Drag and Drop operation",
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e should \"observe\" the event stream to, in order to detect a drag initiating gesture. If this value is \n\u003ccode\u003enull\u003c/code\u003e, the \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e is not associated with any \n\u003ccode\u003eComponent\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if ds is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.dnd.DragSource",
            "type": "Class"
          },
          "name": "ds",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Construct a new DragGestureRecognizer given the DragSource to be used in this Drag and Drop operation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eds\u003c/code\u003e - the \n\u003ccode\u003eDragSource\u003c/code\u003e this \n\u003ccode\u003eDragGestureRecognizer\u003c/code\u003e will use to process the Drag and Drop operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if ds is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.dnd.DragGestureRecognizer",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/dnd/DragGestureListener.html\" title\u003d\"interface in java.awt.dnd\"\u003e\u003ccode\u003eDragGestureListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/dnd/DragGestureEvent.html\" title\u003d\"class in java.awt.dnd\"\u003e\u003ccode\u003eDragGestureEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/dnd/DragSource.html\" title\u003d\"class in java.awt.dnd\"\u003e\u003ccode\u003eDragSource\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.dnd.DragGestureRecognizer\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}