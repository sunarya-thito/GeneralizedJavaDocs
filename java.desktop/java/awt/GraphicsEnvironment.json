{
  "packageName": "java.awt",
  "simpleName": "GraphicsEnvironment",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.GraphicsEnvironment",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLocalGraphicsEnvironment",
      "comment": "Returns the local GraphicsEnvironment.",
      "tagMap": {
        "return": [
          "the local \n\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isHeadless",
      "comment": "Tests whether or not a display, keyboard, and mouse can be supported in this environment. If this method returns true, a HeadlessException is thrown from areas of the Toolkit and GraphicsEnvironment that are dependent on a display, keyboard, or mouse.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eHeadlessException\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this environment cannot support a display, keyboard, and mouse; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHeadlessInstance",
      "comment": "Returns whether or not a display, keyboard, and mouse can be supported in this graphics environment. If this returns true, HeadlessException will be thrown from areas of the graphics environment that are dependent on a display, keyboard, or mouse.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eHeadlessException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eisHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a display, keyboard, and mouse can be supported in this environment; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsDevice",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getScreenDevices",
      "comment": "Returns an array of all of the screen GraphicsDevice objects.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eisHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if isHeadless() returns true"
        ],
        "return": [
          "an array containing all the \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e objects that represent screen devices"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.GraphicsDevice",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDefaultScreenDevice",
      "comment": "Returns the default screen GraphicsDevice.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eisHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if isHeadless() returns true"
        ],
        "return": [
          "the \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e that represents the default screen device"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics2D",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.BufferedImage",
            "type": "Class"
          },
          "field": {
            "name": "img"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createGraphics",
      "comment": "Returns a Graphics2D object for rendering into the specified BufferedImage.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eimg\u003c/code\u003e - the specified \n\u003ccode\u003eBufferedImage\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eimg\u003c/code\u003e is null"
        ],
        "return": [
          "a \n\u003ccode\u003eGraphics2D\u003c/code\u003e to be used for rendering into the specified \n\u003ccode\u003eBufferedImage\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAllFonts",
      "comment": "Returns an array containing a one-point size instance of all fonts available in this GraphicsEnvironment. Typical usage would be to allow a user to select a particular font. Then, the application can size the font and set various font attributes by calling the deriveFont method on the chosen instance. This method provides for the application the most precise control over which Font instance is used to render text. If a font in this GraphicsEnvironment has multiple programmable variations, only one instance of that Font is returned in the array, and other variations must be derived by the application. If a font in this environment has multiple programmable variations, such as Multiple-Master fonts, only one instance of that font is returned in the Font array. The other variations must be derived by the application.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getAvailableFontFamilyNames()\"\u003e\u003ccode\u003egetAvailableFontFamilyNames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#deriveFont(int,float)\"\u003e\u003ccode\u003eFont.deriveFont(int, float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFontName()\"\u003e\u003ccode\u003eFont.getFontName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eFont\u003c/code\u003e objects"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAvailableFontFamilyNames",
      "comment": "Returns an array containing the names of all font families in this GraphicsEnvironment localized for the default locale, as returned by Locale.getDefault(). Typical usage would be for presentation to a user for selection of a particular family name. An application can then specify this name when creating a font, in conjunction with a style, such as bold or italic, giving the font system flexibility in choosing its own best match among multiple fonts in the same font family.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getAllFonts()\"\u003e\u003ccode\u003egetAllFonts()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFamily()\"\u003e\u003ccode\u003eFont.getFamily()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003e containing font family names localized for the default locale, or a suitable alternative name if no name exists for this locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAvailableFontFamilyNames",
      "comment": "Returns an array containing the names of all font families in this GraphicsEnvironment localized for the specified locale. Typical usage would be for presentation to a user for selection of a particular family name. An application can then specify this name when creating a font, in conjunction with a style, such as bold or italic, giving the font system flexibility in choosing its own best match among multiple fonts in the same font family.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getAllFonts()\"\u003e\u003ccode\u003egetAllFonts()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFamily()\"\u003e\u003ccode\u003eFont.getFamily()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e object that represents a particular geographical, political, or cultural region. Specifying \n\u003ccode\u003enull\u003c/code\u003e is equivalent to specifying \n\u003ccode\u003eLocale.getDefault()\u003c/code\u003e."
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003e containing font family names localized for the specified \n\u003ccode\u003eLocale\u003c/code\u003e, or a suitable alternative name if no name exists for the specified locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "registerFont",
      "comment": "Registers a created Font in this GraphicsEnvironment. A created font is one that was returned from calling Font.createFont(int, java.io.InputStream), or derived from a created font by calling Font.deriveFont(int, float). After calling this method for such a font, it is available to be used in constructing new Fonts by name or family name, and is enumerated by getAvailableFontFamilyNames() and getAllFonts() within the execution context of this application or applet. This means applets cannot register fonts in a way that they are visible to other applets. Reasons that this method might not register the font and therefore return false are: The font is not a created Font. The font conflicts with a non-created Font already in this GraphicsEnvironment. For example if the name is that of a system font, or a logical font as described in the documentation of the Font class. It is implementation dependent whether a font may also conflict if it has the same family name as a system font. Notice that an application can supersede the registration of an earlier created font with a new one.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - the font to be registered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efont\u003c/code\u003e is null"
        ],
        "return": [
          "true if the \n\u003ccode\u003efont\u003c/code\u003e is successfully registered in this \n\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferLocaleFonts",
      "comment": "Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts. Calling this method indicates that font rendering should primarily use fonts specific to the primary writing system (the one indicated by the default encoding and the initial default locale). For example, if the primary writing system is Japanese, then characters should be rendered using a Japanese font if possible, and other fonts should only be used for characters for which the Japanese font doesn\u0027t have glyphs. The actual change in font rendering behavior resulting from a call to this method is implementation dependent; it may have no effect at all, or the requested behavior may already match the default behavior. The behavior may differ between font rendering in lightweight and peered components. Since calling this method requests a different font, clients should expect different metrics, and may need to recalculate window sizes and layout. Therefore this method should be called before user interface initialisation.",
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preferProportionalFonts",
      "comment": "Indicates a preference for proportional over non-proportional (e.g. dual-spaced CJK fonts) fonts in the mapping of logical fonts to physical fonts. If the default mapping contains fonts for which proportional and non-proportional variants exist, then calling this method indicates the mapping should use a proportional variant. The actual change in font rendering behavior resulting from a call to this method is implementation dependent; it may have no effect at all. The behavior may differ between font rendering in lightweight and peered components. Since calling this method requests a different font, clients should expect different metrics, and may need to recalculate window sizes and layout. Therefore this method should be called before user interface initialisation.",
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCenterPoint",
      "comment": "Returns the Point where Windows should be centered. It is recommended that centered Windows be checked to ensure they fit within the available display area using getMaximumWindowBounds().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getMaximumWindowBounds()\"\u003e\u003ccode\u003egetMaximumWindowBounds()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if isHeadless() returns true"
        ],
        "return": [
          "the point where Windows should be centered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumWindowBounds",
      "comment": "Returns the maximum bounds for centered Windows. These bounds account for objects in the native windowing system such as task bars and menu bars. The returned bounds will reside on a single display with one exception: on multi-screen systems where Windows should be centered across all displays, this method returns the bounds of the entire display area. To get the usable bounds of a single display, use GraphicsConfiguration.getBounds() and Toolkit.getScreenInsets().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getCenterPoint()\"\u003e\u003ccode\u003egetCenterPoint()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#getBounds()\"\u003e\u003ccode\u003eGraphicsConfiguration.getBounds()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getScreenInsets(java.awt.GraphicsConfiguration)\"\u003e\u003ccode\u003eToolkit.getScreenInsets(java.awt.GraphicsConfiguration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if isHeadless() returns true"
        ],
        "return": [
          "the maximum bounds for centered Windows"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "This is an abstract class and cannot be instantiated directly. Instances must be obtained from a suitable factory or query method.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.GraphicsEnvironment",
  "comment": "The \n\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e class describes the collection of \n\u003ca href\u003d\"GraphicsDevice.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice\u003c/code\u003e\u003c/a\u003e objects and \n\u003ca href\u003d\"Font.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFont\u003c/code\u003e\u003c/a\u003e objects available to a Java(tm) application on a particular platform. The resources in this \n\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e might be local or on a remote machine. \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e objects can be screens, printers or image buffers and are the destination of \n\u003ca href\u003d\"Graphics2D.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphics2D\u003c/code\u003e\u003c/a\u003e drawing methods. Each \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e has a number of \n\u003ca href\u003d\"GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e objects associated with it. These objects specify the different configurations in which the \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e can be used.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}