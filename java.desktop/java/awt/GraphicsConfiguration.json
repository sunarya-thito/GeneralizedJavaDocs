{
  "packageName": "java.awt",
  "simpleName": "GraphicsConfiguration",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.GraphicsDevice",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDevice",
      "comment": "Returns the GraphicsDevice associated with this GraphicsConfiguration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eGraphicsDevice\u003c/code\u003e object that is associated with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleImage",
      "comment": "Returns a BufferedImage with a data layout and color model compatible with this GraphicsConfiguration. This method has nothing to do with memory-mapping a device. The returned BufferedImage has a layout and color model that is closest to this native device configuration and can therefore be optimally blitted to this device.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the returned \n\u003ccode\u003eBufferedImage\u003c/code\u003e",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the returned \n\u003ccode\u003eBufferedImage\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eBufferedImage\u003c/code\u003e whose data layout and color model is compatible with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleImage",
      "comment": "Returns a BufferedImage that supports the specified transparency and has a data layout and color model compatible with this GraphicsConfiguration. This method has nothing to do with memory-mapping a device. The returned BufferedImage has a layout and color model that can be optimally blitted to a device with this GraphicsConfiguration.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#OPAQUE\"\u003e\u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#BITMASK\"\u003e\u003ccode\u003eTransparency.BITMASK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#TRANSLUCENT\"\u003e\u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the returned \n\u003ccode\u003eBufferedImage\u003c/code\u003e",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the returned \n\u003ccode\u003eBufferedImage\u003c/code\u003e",
          "\u003ccode\u003etransparency\u003c/code\u003e - the specified transparency mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the transparency is not a valid value"
        ],
        "return": [
          "a \n\u003ccode\u003eBufferedImage\u003c/code\u003e whose data layout and color model is compatible with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e and also supports the specified transparency."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.VolatileImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleVolatileImage",
      "comment": "Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration. The returned VolatileImage may have data that is stored optimally for the underlying graphics device and may therefore benefit from platform-specific rendering acceleration.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#createVolatileImage(int,int)\"\u003e\u003ccode\u003eComponent.createVolatileImage(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eVolatileImage\u003c/code\u003e whose data layout and color model is compatible with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.VolatileImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleVolatileImage",
      "comment": "Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration. The returned VolatileImage may have data that is stored optimally for the underlying graphics device and may therefore benefit from platform-specific rendering acceleration.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#OPAQUE\"\u003e\u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#BITMASK\"\u003e\u003ccode\u003eTransparency.BITMASK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#TRANSLUCENT\"\u003e\u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#createVolatileImage(int,int)\"\u003e\u003ccode\u003eComponent.createVolatileImage(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003etransparency\u003c/code\u003e - the specified transparency mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the transparency is not a valid value"
        ],
        "return": [
          "a \n\u003ccode\u003eVolatileImage\u003c/code\u003e whose data layout and color model is compatible with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.VolatileImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleVolatileImage",
      "comment": "Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration, using the specified image capabilities. If the caps parameter is null, it is effectively ignored and this method will create a VolatileImage without regard to ImageCapabilities constraints. The returned VolatileImage has a layout and color model that is closest to this native device configuration and can therefore be optimally blitted to this device.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003ecaps\u003c/code\u003e - the image capabilities"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTException.html\" title\u003d\"class in java.awt\"\u003eAWTException\u003c/a\u003e\u003c/code\u003e - if the supplied image capabilities could not be met by this graphics configuration"
        ],
        "return": [
          "a \n\u003ccode\u003eVolatileImage\u003c/code\u003e whose data layout and color model is compatible with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.VolatileImage",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleVolatileImage",
      "comment": "Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration, using the specified image capabilities and transparency value. If the caps parameter is null, it is effectively ignored and this method will create a VolatileImage without regard to ImageCapabilities constraints. The returned VolatileImage has a layout and color model that is closest to this native device configuration and can therefore be optimally blitted to this device.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#OPAQUE\"\u003e\u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#BITMASK\"\u003e\u003ccode\u003eTransparency.BITMASK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#TRANSLUCENT\"\u003e\u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#createVolatileImage(int,int)\"\u003e\u003ccode\u003eComponent.createVolatileImage(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the returned \n\u003ccode\u003eVolatileImage\u003c/code\u003e",
          "\u003ccode\u003ecaps\u003c/code\u003e - the image capabilities",
          "\u003ccode\u003etransparency\u003c/code\u003e - the specified transparency mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the transparency is not a valid value",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTException.html\" title\u003d\"class in java.awt\"\u003eAWTException\u003c/a\u003e\u003c/code\u003e - if the supplied image capabilities could not be met by this graphics configuration"
        ],
        "return": [
          "a \n\u003ccode\u003eVolatileImage\u003c/code\u003e whose data layout and color model is compatible with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getColorModel",
      "comment": "Returns the ColorModel associated with this GraphicsConfiguration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eColorModel\u003c/code\u003e object that is associated with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getColorModel",
      "comment": "Returns the ColorModel associated with this GraphicsConfiguration that supports the specified transparency.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#OPAQUE\"\u003e\u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#BITMASK\"\u003e\u003ccode\u003eTransparency.BITMASK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#TRANSLUCENT\"\u003e\u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etransparency\u003c/code\u003e - the specified transparency mode"
        ],
        "return": [
          "a \n\u003ccode\u003eColorModel\u003c/code\u003e object that is associated with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e and supports the specified transparency or null if the transparency is not a valid value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDefaultTransform",
      "comment": "Returns the default AffineTransform for this GraphicsConfiguration. This AffineTransform is typically the Identity transform for most normal screens. The default AffineTransform maps coordinates onto the device such that 72 user space coordinate units measure approximately 1 inch in device space. The normalizing transform can be used to make this mapping more exact. Coordinates in the coordinate space defined by the default AffineTransform for screen and printer devices have the origin in the upper left-hand corner of the target region of the device, with X coordinates increasing to the right and Y coordinates increasing downwards. For image buffers not associated with a device, such as those not created by createCompatibleImage, this AffineTransform is the Identity transform.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default \n\u003ccode\u003eAffineTransform\u003c/code\u003e for this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNormalizingTransform",
      "comment": "Returns an AffineTransform that can be concatenated with the default AffineTransform of a GraphicsConfiguration so that 72 units in user space equals 1 inch in device space. For a particular Graphics2D, g, one can reset the transformation to create such a mapping by using the following pseudocode:       GraphicsConfiguration gc \u003d g.getDeviceConfiguration();\n\n      g.setTransform(gc.getDefaultTransform());\n      g.transform(gc.getNormalizingTransform());\n Note that sometimes this AffineTransform is identity, such as for printers or metafile output, and that this AffineTransform is only as accurate as the information supplied by the underlying system. For image buffers not associated with a device, such as those not created by createCompatibleImage, this AffineTransform is the Identity transform since there is no valid distance measurement.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eAffineTransform\u003c/code\u003e to concatenate to the default \n\u003ccode\u003eAffineTransform\u003c/code\u003e so that 72 units in user space is mapped to 1 inch in device space."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBounds",
      "comment": "Returns the bounds of the GraphicsConfiguration in the device coordinates. In a multi-screen environment with a virtual device, the bounds can have negative X or Y origins.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the bounds of the area covered by this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.BufferCapabilities",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBufferCapabilities",
      "comment": "Returns the buffering capabilities of this GraphicsConfiguration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the buffering capabilities of this graphics configuration object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.ImageCapabilities",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImageCapabilities",
      "comment": "Returns the image capabilities of this GraphicsConfiguration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the image capabilities of this graphics configuration object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTranslucencyCapable",
      "comment": "Returns whether this GraphicsConfiguration supports the PERPIXEL_TRANSLUCENT kind of translucency.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003eWindow.setBackground(Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether the given GraphicsConfiguration supports the translucency effects."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "This is an abstract class that cannot be instantiated directly. Instances must be obtained from a suitable factory or query method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getConfigurations()\"\u003e\u003ccode\u003eGraphicsDevice.getConfigurations()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getDefaultConfiguration()\"\u003e\u003ccode\u003eGraphicsDevice.getDefaultConfiguration()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getBestConfiguration(java.awt.GraphicsConfigTemplate)\"\u003e\u003ccode\u003eGraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics2D.html#getDeviceConfiguration()\"\u003e\u003ccode\u003eGraphics2D.getDeviceConfiguration()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.GraphicsConfiguration",
  "comment": "The \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e class describes the characteristics of a graphics destination such as a printer or monitor. There can be many \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e objects associated with a single graphics device, representing different drawing modes or capabilities. The corresponding native structure will vary from platform to platform. For example, on X11 windowing systems, each visual is a different \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e. On Microsoft Windows, \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003es represent PixelFormats available in the current resolution and color depth. \n\u003cp\u003e In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, the bounds of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e objects are relative to the virtual coordinate system. When setting the location of a component, use \u003ca href\u003d\"#getBounds()\"\u003e\u003ccode\u003egetBounds\u003c/code\u003e\u003c/a\u003e to get the bounds of the desired \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e and offset the location with the coordinates of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e, as the following code sample illustrates: \u003c/p\u003e \n\u003cpre\u003e      Frame f \u003d new Frame(gc);  // where gc is a GraphicsConfiguration\n      Rectangle bounds \u003d gc.getBounds();\n      f.setLocation(10 + bounds.x, 10 + bounds.y); \u003c/pre\u003e \n\u003cp\u003e To determine if your environment is a virtual device environment, call \u003ccode\u003egetBounds\u003c/code\u003e on all of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e objects in your system. If any of the origins of the returned bounds is not (0,\u0026nbsp;0), your environment is a virtual device environment. \u003c/p\u003e\n\u003cp\u003e You can also use \u003ccode\u003egetBounds\u003c/code\u003e to determine the bounds of the virtual device. To do this, first call \u003ccode\u003egetBounds\u003c/code\u003e on all of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e objects in your system. Then calculate the union of all of the bounds returned from the calls to \u003ccode\u003egetBounds\u003c/code\u003e. The union is the bounds of the virtual device. The following code sample calculates the bounds of the virtual device. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n      Rectangle virtualBounds \u003d new Rectangle();\n      GraphicsEnvironment ge \u003d GraphicsEnvironment.\n              getLocalGraphicsEnvironment();\n      GraphicsDevice[] gs \u003d\n              ge.getScreenDevices();\n      for (int j \u003d 0; j \u0026lt; gs.length; j++) {\n          GraphicsDevice gd \u003d gs[j];\n          GraphicsConfiguration[] gc \u003d\n              gd.getConfigurations();\n          for (int i\u003d0; i \u0026lt; gc.length; i++) {\n              virtualBounds \u003d\n                  virtualBounds.union(gc[i].getBounds());\n          }\n      } \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eWindow\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}