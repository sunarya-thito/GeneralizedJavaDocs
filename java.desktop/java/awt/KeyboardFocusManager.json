{
  "packageName": "java.awt",
  "simpleName": "KeyboardFocusManager",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FORWARD_TRAVERSAL_KEYS",
      "comment": "The identifier for the Forward focus traversal keys.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setDefaultFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003esetDefaultFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getDefaultFocusTraversalKeys(int)\"\u003e\u003ccode\u003egetDefaultFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusTraversalKeys(int)\"\u003e\u003ccode\u003eComponent.getFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BACKWARD_TRAVERSAL_KEYS",
      "comment": "The identifier for the Backward focus traversal keys.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setDefaultFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003esetDefaultFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getDefaultFocusTraversalKeys(int)\"\u003e\u003ccode\u003egetDefaultFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusTraversalKeys(int)\"\u003e\u003ccode\u003eComponent.getFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UP_CYCLE_TRAVERSAL_KEYS",
      "comment": "The identifier for the Up Cycle focus traversal keys.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setDefaultFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003esetDefaultFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getDefaultFocusTraversalKeys(int)\"\u003e\u003ccode\u003egetDefaultFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusTraversalKeys(int)\"\u003e\u003ccode\u003eComponent.getFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DOWN_CYCLE_TRAVERSAL_KEYS",
      "comment": "The identifier for the Down Cycle focus traversal keys.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setDefaultFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003esetDefaultFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getDefaultFocusTraversalKeys(int)\"\u003e\u003ccode\u003egetDefaultFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusTraversalKeys(int)\"\u003e\u003ccode\u003eComponent.getFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.KeyboardFocusManager",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCurrentKeyboardFocusManager",
      "comment": "Returns the current KeyboardFocusManager instance for the calling thread\u0027s context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setCurrentKeyboardFocusManager(java.awt.KeyboardFocusManager)\"\u003e\u003ccode\u003esetCurrentKeyboardFocusManager(java.awt.KeyboardFocusManager)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this thread\u0027s context\u0027s KeyboardFocusManager"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.KeyboardFocusManager",
            "type": "Class"
          },
          "name": "newManager",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setCurrentKeyboardFocusManager",
      "comment": "Sets the current KeyboardFocusManager instance for the calling thread\u0027s context. If null is specified, then the current KeyboardFocusManager is replaced with a new instance of DefaultKeyboardFocusManager. If a SecurityManager is installed, the calling thread must be granted the AWTPermission \"replaceKeyboardFocusManager\" in order to replace the the current KeyboardFocusManager. If this permission is not granted, this method will throw a SecurityException, and the current KeyboardFocusManager will be unchanged.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getCurrentKeyboardFocusManager()\"\u003e\u003ccode\u003egetCurrentKeyboardFocusManager()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/DefaultKeyboardFocusManager.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eDefaultKeyboardFocusManager\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewManager\u003c/code\u003e - the new KeyboardFocusManager for this thread\u0027s context"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the calling thread does not have permission to replace the current KeyboardFocusManager"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFocusOwner",
      "comment": "Returns the focus owner, if the focus owner is in the same context as the calling thread. The focus owner is defined as the Component in an application that will typically receive all KeyEvents generated by the user. KeyEvents which map to the focus owner\u0027s focus traversal keys will not be delivered if focus traversal keys are enabled for the focus owner. In addition, KeyEventDispatchers may retarget or consume KeyEvents before they reach the focus owner.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalFocusOwner()\"\u003e\u003ccode\u003egetGlobalFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalFocusOwner(java.awt.Component)\"\u003e\u003ccode\u003esetGlobalFocusOwner(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the focus owner, or null if the focus owner is not a member of the calling thread\u0027s context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getGlobalFocusOwner",
      "comment": "Returns the focus owner, even if the calling thread is in a different context than the focus owner. The focus owner is defined as the Component in an application that will typically receive all KeyEvents generated by the user. KeyEvents which map to the focus owner\u0027s focus traversal keys will not be delivered if focus traversal keys are enabled for the focus owner. In addition, KeyEventDispatchers may retarget or consume KeyEvents before they reach the focus owner. This method will throw a SecurityException if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getFocusOwner()\"\u003e\u003ccode\u003egetFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalFocusOwner(java.awt.Component)\"\u003e\u003ccode\u003esetGlobalFocusOwner(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ],
        "return": [
          "the focus owner"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "focusOwner",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setGlobalFocusOwner",
      "comment": "Sets the focus owner. The operation will be cancelled if the Component is not focusable. The focus owner is defined as the Component in an application that will typically receive all KeyEvents generated by the user. KeyEvents which map to the focus owner\u0027s focus traversal keys will not be delivered if focus traversal keys are enabled for the focus owner. In addition, KeyEventDispatchers may retarget or consume KeyEvents before they reach the focus owner. This method does not actually set the focus to the specified Component. It merely stores the value to be subsequently returned by getFocusOwner(). Use Component.requestFocus() or Component.requestFocusInWindow() to change the focus owner, subject to platform limitations.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getFocusOwner()\"\u003e\u003ccode\u003egetFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalFocusOwner()\"\u003e\u003ccode\u003egetGlobalFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003e\u003ccode\u003eComponent.requestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isFocusable()\"\u003e\u003ccode\u003eComponent.isFocusable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efocusOwner\u003c/code\u003e - the focus owner"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearFocusOwner",
      "comment": "Clears the focus owner at both the Java and native levels if the focus owner exists and resides in the same context as the calling thread, otherwise the method returns silently. The focus owner component will receive a permanent FOCUS_LOST event. After this operation completes, the native windowing system will discard all user-generated KeyEvents until the user selects a new Component to receive focus, or a Component is given focus explicitly via a call to requestFocus(). This operation does not change the focused or active Windows.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003e\u003ccode\u003eComponent.requestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/FocusEvent.html#FOCUS_LOST\"\u003e\u003ccode\u003eFocusEvent.FOCUS_LOST\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearGlobalFocusOwner",
      "comment": "Clears the global focus owner at both the Java and native levels. If there exists a focus owner, that Component will receive a permanent FOCUS_LOST event. After this operation completes, the native windowing system will discard all user-generated KeyEvents until the user selects a new Component to receive focus, or a Component is given focus explicitly via a call to requestFocus(). This operation does not change the focused or active Windows. If a SecurityManager is installed, the calling thread must be granted the \"replaceKeyboardFocusManager\" AWTPermission. If this permission is not granted, this method will throw a SecurityException, and the current focus owner will not be cleared. This method is intended to be used only by KeyboardFocusManager set as current KeyboardFocusManager for the calling thread\u0027s context. It is not for general client use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#clearFocusOwner()\"\u003e\u003ccode\u003eclearFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003e\u003ccode\u003eComponent.requestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/FocusEvent.html#FOCUS_LOST\"\u003e\u003ccode\u003eFocusEvent.FOCUS_LOST\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPermanentFocusOwner",
      "comment": "Returns the permanent focus owner, if the permanent focus owner is in the same context as the calling thread. The permanent focus owner is defined as the last Component in an application to receive a permanent FOCUS_GAINED event. The focus owner and permanent focus owner are equivalent unless a temporary focus change is currently in effect. In such a situation, the permanent focus owner will again be the focus owner when the temporary focus change ends.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalPermanentFocusOwner()\"\u003e\u003ccode\u003egetGlobalPermanentFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalPermanentFocusOwner(java.awt.Component)\"\u003e\u003ccode\u003esetGlobalPermanentFocusOwner(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the permanent focus owner, or null if the permanent focus owner is not a member of the calling thread\u0027s context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getGlobalPermanentFocusOwner",
      "comment": "Returns the permanent focus owner, even if the calling thread is in a different context than the permanent focus owner. The permanent focus owner is defined as the last Component in an application to receive a permanent FOCUS_GAINED event. The focus owner and permanent focus owner are equivalent unless a temporary focus change is currently in effect. In such a situation, the permanent focus owner will again be the focus owner when the temporary focus change ends.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPermanentFocusOwner()\"\u003e\u003ccode\u003egetPermanentFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalPermanentFocusOwner(java.awt.Component)\"\u003e\u003ccode\u003esetGlobalPermanentFocusOwner(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ],
        "return": [
          "the permanent focus owner"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "permanentFocusOwner",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setGlobalPermanentFocusOwner",
      "comment": "Sets the permanent focus owner. The operation will be cancelled if the Component is not focusable. The permanent focus owner is defined as the last Component in an application to receive a permanent FOCUS_GAINED event. The focus owner and permanent focus owner are equivalent unless a temporary focus change is currently in effect. In such a situation, the permanent focus owner will again be the focus owner when the temporary focus change ends. This method does not actually set the focus to the specified Component. It merely stores the value to be subsequently returned by getPermanentFocusOwner(). Use Component.requestFocus() or Component.requestFocusInWindow() to change the focus owner, subject to platform limitations.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPermanentFocusOwner()\"\u003e\u003ccode\u003egetPermanentFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalPermanentFocusOwner()\"\u003e\u003ccode\u003egetGlobalPermanentFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003e\u003ccode\u003eComponent.requestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isFocusable()\"\u003e\u003ccode\u003eComponent.isFocusable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epermanentFocusOwner\u003c/code\u003e - the permanent focus owner"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFocusedWindow",
      "comment": "Returns the focused Window, if the focused Window is in the same context as the calling thread. The focused Window is the Window that is or contains the focus owner.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalFocusedWindow()\"\u003e\u003ccode\u003egetGlobalFocusedWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalFocusedWindow(java.awt.Window)\"\u003e\u003ccode\u003esetGlobalFocusedWindow(java.awt.Window)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the focused Window, or null if the focused Window is not a member of the calling thread\u0027s context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getGlobalFocusedWindow",
      "comment": "Returns the focused Window, even if the calling thread is in a different context than the focused Window. The focused Window is the Window that is or contains the focus owner.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getFocusedWindow()\"\u003e\u003ccode\u003egetFocusedWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalFocusedWindow(java.awt.Window)\"\u003e\u003ccode\u003esetGlobalFocusedWindow(java.awt.Window)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ],
        "return": [
          "the focused Window"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Window",
            "type": "Class"
          },
          "name": "focusedWindow",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setGlobalFocusedWindow",
      "comment": "Sets the focused Window. The focused Window is the Window that is or contains the focus owner. The operation will be cancelled if the specified Window to focus is not a focusable Window. This method does not actually change the focused Window as far as the native windowing system is concerned. It merely stores the value to be subsequently returned by getFocusedWindow(). Use Component.requestFocus() or Component.requestFocusInWindow() to change the focused Window, subject to platform limitations.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getFocusedWindow()\"\u003e\u003ccode\u003egetFocusedWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalFocusedWindow()\"\u003e\u003ccode\u003egetGlobalFocusedWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003e\u003ccode\u003eComponent.requestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eWindow.isFocusableWindow()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efocusedWindow\u003c/code\u003e - the focused Window"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActiveWindow",
      "comment": "Returns the active Window, if the active Window is in the same context as the calling thread. Only a Frame or a Dialog can be the active Window. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalActiveWindow()\"\u003e\u003ccode\u003egetGlobalActiveWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalActiveWindow(java.awt.Window)\"\u003e\u003ccode\u003esetGlobalActiveWindow(java.awt.Window)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the active Window, or null if the active Window is not a member of the calling thread\u0027s context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getGlobalActiveWindow",
      "comment": "Returns the active Window, even if the calling thread is in a different context than the active Window. Only a Frame or a Dialog can be the active Window. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getActiveWindow()\"\u003e\u003ccode\u003egetActiveWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalActiveWindow(java.awt.Window)\"\u003e\u003ccode\u003esetGlobalActiveWindow(java.awt.Window)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ],
        "return": [
          "the active Window"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Window",
            "type": "Class"
          },
          "name": "activeWindow",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setGlobalActiveWindow",
      "comment": "Sets the active Window. Only a Frame or a Dialog can be the active Window. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window. This method does not actually change the active Window as far as the native windowing system is concerned. It merely stores the value to be subsequently returned by getActiveWindow(). Use Component.requestFocus() or Component.requestFocusInWindow() to change the active Window, subject to platform limitations.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getActiveWindow()\"\u003e\u003ccode\u003egetActiveWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalActiveWindow()\"\u003e\u003ccode\u003egetGlobalActiveWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocus()\"\u003e\u003ccode\u003eComponent.requestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()\"\u003e\u003ccode\u003eComponent.requestFocusInWindow()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eactiveWindow\u003c/code\u003e - the active Window"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.FocusTraversalPolicy",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultFocusTraversalPolicy",
      "comment": "Returns the default FocusTraversalPolicy. Top-level components use this value on their creation to initialize their own focus traversal policy by explicit call to Container.setFocusTraversalPolicy.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\"\u003e\u003ccode\u003esetDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\"\u003e\u003ccode\u003eContainer.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getFocusTraversalPolicy()\"\u003e\u003ccode\u003eContainer.getFocusTraversalPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default FocusTraversalPolicy. null will never be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.FocusTraversalPolicy",
            "type": "Class"
          },
          "name": "defaultPolicy",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultFocusTraversalPolicy",
      "comment": "Sets the default FocusTraversalPolicy. Top-level components use this value on their creation to initialize their own focus traversal policy by explicit call to Container.setFocusTraversalPolicy. Note: this call doesn\u0027t affect already created components as they have their policy initialized. Only new components will use this policy as their default policy.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getDefaultFocusTraversalPolicy()\"\u003e\u003ccode\u003egetDefaultFocusTraversalPolicy()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\"\u003e\u003ccode\u003eContainer.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getFocusTraversalPolicy()\"\u003e\u003ccode\u003eContainer.getFocusTraversalPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edefaultPolicy\u003c/code\u003e - the new, default FocusTraversalPolicy"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if defaultPolicy is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.awt.AWTKeyStroke",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "keystrokes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDefaultFocusTraversalKeys",
      "comment": "Sets the default focus traversal keys for a given traversal operation. This traversal key Set will be in effect on all Windows that have no such Set of their own explicitly defined. This Set will also be inherited, recursively, by any child Component of those Windows that has no such Set of its own explicitly defined. The default values for the default focus traversal keys are implementation-dependent. Sun recommends that all implementations for a particular native platform use the same default values. The recommendations for Windows and Unix are listed below. These recommendations are used in the Sun AWT implementations. Recommended default values for focus traversal keys Identifier Meaning Default KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS Normal forward keyboard traversal TAB on KEY_PRESSED, CTRL-TAB on KEY_PRESSED KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS Normal reverse keyboard traversal SHIFT-TAB on KEY_PRESSED, CTRL-SHIFT-TAB on KEY_PRESSED KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS Go up one focus traversal cycle none KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS Go down one focus traversal cycle none To disable a traversal key, use an empty Set; Collections.EMPTY_SET is recommended. Using the AWTKeyStroke API, client code can specify on which of two specific KeyEvents, KEY_PRESSED or KEY_RELEASED, the focus traversal operation will occur. Regardless of which KeyEvent is specified, however, all KeyEvents related to the focus traversal key, including the associated KEY_TYPED event, will be consumed, and will not be dispatched to any Component. It is a runtime error to specify a KEY_TYPED event as mapping to a focus traversal operation, or to map the same event to multiple default focus traversal operations. This method may throw a ClassCastException if any Object in keystrokes is not an AWTKeyStroke.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getDefaultFocusTraversalKeys(int)\"\u003e\u003ccode\u003egetDefaultFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusTraversalKeys(int)\"\u003e\u003ccode\u003eComponent.getFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - one of \n\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e, \n\u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e, \n\u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e, or \n\u003ccode\u003eKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e",
          "\u003ccode\u003ekeystrokes\u003c/code\u003e - the Set of \n\u003ccode\u003eAWTKeyStroke\u003c/code\u003es for the specified operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if id is not one of \n\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e, \n\u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e, \n\u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e, or \n\u003ccode\u003eKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e, or if keystrokes is \n\u003ccode\u003enull\u003c/code\u003e, or if keystrokes contains \n\u003ccode\u003enull\u003c/code\u003e, or if any keystroke represents a \n\u003ccode\u003eKEY_TYPED\u003c/code\u003e event, or if any keystroke already maps to another default focus traversal operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.awt.AWTKeyStroke",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultFocusTraversalKeys",
      "comment": "Returns a Set of default focus traversal keys for a given traversal operation. This traversal key Set will be in effect on all Windows that have no such Set of their own explicitly defined. This Set will also be inherited, recursively, by any child Component of those Windows that has no such Set of its own explicitly defined. (See setDefaultFocusTraversalKeys for a full description of each operation.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setDefaultFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003esetDefaultFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eComponent.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusTraversalKeys(int)\"\u003e\u003ccode\u003eComponent.getFocusTraversalKeys(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if id is not one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS"
        ],
        "return": [
          "the \n\u003ccode\u003eSet\u003c/code\u003e of \n\u003ccode\u003eAWTKeyStroke\u003c/code\u003es for the specified operation; the \n\u003ccode\u003eSet\u003c/code\u003e will be unmodifiable, and may be empty; \n\u003ccode\u003enull\u003c/code\u003e will never be returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCurrentFocusCycleRoot",
      "comment": "Returns the current focus cycle root, if the current focus cycle root is in the same context as the calling thread. If the focus owner is itself a focus cycle root, then it may be ambiguous as to which Components represent the next and previous Components to focus during normal focus traversal. In that case, the current focus cycle root is used to differentiate among the possibilities. This method is intended to be used only by KeyboardFocusManagers and focus implementations. It is not for general client use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalCurrentFocusCycleRoot()\"\u003e\u003ccode\u003egetGlobalCurrentFocusCycleRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalCurrentFocusCycleRoot(java.awt.Container)\"\u003e\u003ccode\u003esetGlobalCurrentFocusCycleRoot(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current focus cycle root, or null if the current focus cycle root is not a member of the calling thread\u0027s context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getGlobalCurrentFocusCycleRoot",
      "comment": "Returns the current focus cycle root, even if the calling thread is in a different context than the current focus cycle root. If the focus owner is itself a focus cycle root, then it may be ambiguous as to which Components represent the next and previous Components to focus during normal focus traversal. In that case, the current focus cycle root is used to differentiate among the possibilities.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getCurrentFocusCycleRoot()\"\u003e\u003ccode\u003egetCurrentFocusCycleRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#setGlobalCurrentFocusCycleRoot(java.awt.Container)\"\u003e\u003ccode\u003esetGlobalCurrentFocusCycleRoot(java.awt.Container)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this KeyboardFocusManager is not the current KeyboardFocusManager for the calling thread\u0027s context and if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ],
        "return": [
          "the current focus cycle root, or null if the current focus cycle root is not a member of the calling thread\u0027s context"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "newFocusCycleRoot",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setGlobalCurrentFocusCycleRoot",
      "comment": "Sets the current focus cycle root. If the focus owner is itself a focus cycle root, then it may be ambiguous as to which Components represent the next and previous Components to focus during normal focus traversal. In that case, the current focus cycle root is used to differentiate among the possibilities. If a SecurityManager is installed, the calling thread must be granted the \"replaceKeyboardFocusManager\" AWTPermission. If this permission is not granted, this method will throw a SecurityException, and the current focus cycle root will not be changed. This method is intended to be used only by KeyboardFocusManagers and focus implementations. It is not for general client use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getCurrentFocusCycleRoot()\"\u003e\u003ccode\u003egetCurrentFocusCycleRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getGlobalCurrentFocusCycleRoot()\"\u003e\u003ccode\u003egetGlobalCurrentFocusCycleRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewFocusCycleRoot\u003c/code\u003e - the new focus cycle root"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the calling thread does not have \"replaceKeyboardFocusManager\" permission"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list. The listener is registered for all bound properties of this class, including the following: whether the KeyboardFocusManager is currently managing focus for this application or applet\u0027s browser context (\"managingFocus\") the focus owner (\"focusOwner\") the permanent focus owner (\"permanentFocusOwner\") the focused Window (\"focusedWindow\") the active Window (\"activeWindow\") the default focus traversal policy (\"defaultFocusTraversalPolicy\") the Set of default FORWARD_TRAVERSAL_KEYS (\"forwardDefaultFocusTraversalKeys\") the Set of default BACKWARD_TRAVERSAL_KEYS (\"backwardDefaultFocusTraversalKeys\") the Set of default UP_CYCLE_TRAVERSAL_KEYS (\"upCycleDefaultFocusTraversalKeys\") the Set of default DOWN_CYCLE_TRAVERSAL_KEYS (\"downCycleDefaultFocusTraversalKeys\") the current focus cycle root (\"currentFocusCycleRoot\") If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removePropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPropertyChangeListeners()\"\u003e\u003ccode\u003egetPropertyChangeListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removePropertyChangeListener",
      "comment": "Removes a PropertyChangeListener from the listener list. This method should be used to remove the PropertyChangeListeners that were registered for all bound properties of this class. If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPropertyChangeListeners()\"\u003e\u003ccode\u003egetPropertyChangeListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the property change listeners registered on this keyboard focus manager.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removePropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPropertyChangeListeners(java.lang.String)\"\u003e\u003ccode\u003egetPropertyChangeListeners(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this keyboard focus manager\u0027s \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003es or an empty array if no property change listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list for a specific property. The specified property may be user-defined, or one of the following: whether the KeyboardFocusManager is currently managing focus for this application or applet\u0027s browser context (\"managingFocus\") the focus owner (\"focusOwner\") the permanent focus owner (\"permanentFocusOwner\") the focused Window (\"focusedWindow\") the active Window (\"activeWindow\") the default focus traversal policy (\"defaultFocusTraversalPolicy\") the Set of default FORWARD_TRAVERSAL_KEYS (\"forwardDefaultFocusTraversalKeys\") the Set of default BACKWARD_TRAVERSAL_KEYS (\"backwardDefaultFocusTraversalKeys\") the Set of default UP_CYCLE_TRAVERSAL_KEYS (\"upCycleDefaultFocusTraversalKeys\") the Set of default DOWN_CYCLE_TRAVERSAL_KEYS (\"downCycleDefaultFocusTraversalKeys\") the current focus cycle root (\"currentFocusCycleRoot\") If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPropertyChangeListeners(java.lang.String)\"\u003e\u003ccode\u003egetPropertyChangeListeners(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - one of the property names listed above",
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removePropertyChangeListener",
      "comment": "Removes a PropertyChangeListener from the listener list for a specific property. This method should be used to remove PropertyChangeListeners that were registered for a specific bound property. If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getPropertyChangeListeners(java.lang.String)\"\u003e\u003ccode\u003egetPropertyChangeListeners(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removePropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - a valid property name",
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the PropertyChangeListeners associated with the named property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eremovePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the property name"
        ],
        "return": [
          "all of the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003es associated with the named property or an empty array if no such listeners have been added."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "oldValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "firePropertyChange",
      "comment": "Fires a PropertyChangeEvent in response to a change in a bound property. The event will be delivered to all registered PropertyChangeListeners. No event will be delivered if oldValue and newValue are the same.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the name of the property that has changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the property\u0027s previous value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the property\u0027s new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.VetoableChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addVetoableChangeListener",
      "comment": "Adds a VetoableChangeListener to the listener list. The listener is registered for all vetoable properties of this class, including the following: the focus owner (\"focusOwner\") the permanent focus owner (\"permanentFocusOwner\") the focused Window (\"focusedWindow\") the active Window (\"activeWindow\") If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getVetoableChangeListeners()\"\u003e\u003ccode\u003egetVetoableChangeListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the VetoableChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.beans.VetoableChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeVetoableChangeListener",
      "comment": "Removes a VetoableChangeListener from the listener list. This method should be used to remove the VetoableChangeListeners that were registered for all vetoable properties of this class. If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getVetoableChangeListeners()\"\u003e\u003ccode\u003egetVetoableChangeListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the VetoableChangeListener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.VetoableChangeListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVetoableChangeListeners",
      "comment": "Returns an array of all the vetoable change listeners registered on this keyboard focus manager.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getVetoableChangeListeners(java.lang.String)\"\u003e\u003ccode\u003egetVetoableChangeListeners(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this keyboard focus manager\u0027s \n\u003ccode\u003eVetoableChangeListener\u003c/code\u003es or an empty array if no vetoable change listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.VetoableChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addVetoableChangeListener",
      "comment": "Adds a VetoableChangeListener to the listener list for a specific property. The specified property may be user-defined, or one of the following: the focus owner (\"focusOwner\") the permanent focus owner (\"permanentFocusOwner\") the focused Window (\"focusedWindow\") the active Window (\"activeWindow\") If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getVetoableChangeListeners()\"\u003e\u003ccode\u003egetVetoableChangeListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - one of the property names listed above",
          "\u003ccode\u003elistener\u003c/code\u003e - the VetoableChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.VetoableChangeListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeVetoableChangeListener",
      "comment": "Removes a VetoableChangeListener from the listener list for a specific property. This method should be used to remove VetoableChangeListeners that were registered for a specific bound property. If listener is null, no exception is thrown and no action is performed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getVetoableChangeListeners()\"\u003e\u003ccode\u003egetVetoableChangeListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeVetoableChangeListener(java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - a valid property name",
          "\u003ccode\u003elistener\u003c/code\u003e - the VetoableChangeListener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.VetoableChangeListener",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVetoableChangeListeners",
      "comment": "Returns an array of all the VetoableChangeListeners associated with the named property.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eaddVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\"\u003e\u003ccode\u003eremoveVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#getVetoableChangeListeners()\"\u003e\u003ccode\u003egetVetoableChangeListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the property name"
        ],
        "return": [
          "all of the \n\u003ccode\u003eVetoableChangeListener\u003c/code\u003es associated with the named property or an empty array if no such listeners have been added."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.PropertyVetoException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "oldValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "fireVetoableChange",
      "comment": "Fires a PropertyChangeEvent in response to a change in a vetoable property. The event will be delivered to all registered VetoableChangeListeners. If a VetoableChangeListener throws a PropertyVetoException, a new event is fired reverting all VetoableChangeListeners to the old value and the exception is then rethrown. No event will be delivered if oldValue and newValue are the same.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the name of the property that has changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the property\u0027s previous value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the property\u0027s new value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyVetoException.html\" title\u003d\"class in java.beans\"\u003ePropertyVetoException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eVetoableChangeListener\u003c/code\u003e threw \n\u003ccode\u003ePropertyVetoException\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.KeyEventDispatcher",
            "type": "Class"
          },
          "name": "dispatcher",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addKeyEventDispatcher",
      "comment": "Adds a KeyEventDispatcher to this KeyboardFocusManager\u0027s dispatcher chain. This KeyboardFocusManager will request that each KeyEventDispatcher dispatch KeyEvents generated by the user before finally dispatching the KeyEvent itself. KeyEventDispatchers will be notified in the order in which they were added. Notifications will halt as soon as one KeyEventDispatcher returns true from its dispatchKeyEvent method. There is no limit to the total number of KeyEventDispatchers which can be added, nor to the number of times which a particular KeyEventDispatcher instance can be added. If a null dispatcher is specified, no action is taken and no exception is thrown. In a multithreaded application, KeyEventDispatcher behaves the same as other AWT listeners. See AWT Threading Issues for more details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeKeyEventDispatcher(java.awt.KeyEventDispatcher)\"\u003e\u003ccode\u003eremoveKeyEventDispatcher(java.awt.KeyEventDispatcher)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edispatcher\u003c/code\u003e - the KeyEventDispatcher to add to the dispatcher chain"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.KeyEventDispatcher",
            "type": "Class"
          },
          "name": "dispatcher",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeKeyEventDispatcher",
      "comment": "Removes a KeyEventDispatcher which was previously added to this KeyboardFocusManager\u0027s dispatcher chain. This KeyboardFocusManager cannot itself be removed, unless it was explicitly re-registered via a call to addKeyEventDispatcher. If a null dispatcher is specified, if the specified dispatcher is not in the dispatcher chain, or if this KeyboardFocusManager is specified without having been explicitly re-registered, no action is taken and no exception is thrown. In a multithreaded application, KeyEventDispatcher behaves the same as other AWT listeners. See AWT Threading Issues for more details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addKeyEventDispatcher(java.awt.KeyEventDispatcher)\"\u003e\u003ccode\u003eaddKeyEventDispatcher(java.awt.KeyEventDispatcher)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edispatcher\u003c/code\u003e - the KeyEventDispatcher to remove from the dispatcher chain"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.awt.KeyEventDispatcher",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getKeyEventDispatchers",
      "comment": "Returns this KeyboardFocusManager\u0027s KeyEventDispatcher chain as a List. The List will not include this KeyboardFocusManager unless it was explicitly re-registered via a call to addKeyEventDispatcher. If no other KeyEventDispatchers are registered, implementations are free to return null or a List of length 0. Client code should not assume one behavior over another, nor should it assume that the behavior, once established, will not change.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addKeyEventDispatcher(java.awt.KeyEventDispatcher)\"\u003e\u003ccode\u003eaddKeyEventDispatcher(java.awt.KeyEventDispatcher)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeKeyEventDispatcher(java.awt.KeyEventDispatcher)\"\u003e\u003ccode\u003eremoveKeyEventDispatcher(java.awt.KeyEventDispatcher)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a possibly null or empty List of KeyEventDispatchers"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.KeyEventPostProcessor",
            "type": "Class"
          },
          "name": "processor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addKeyEventPostProcessor",
      "comment": "Adds a KeyEventPostProcessor to this KeyboardFocusManager\u0027s post- processor chain. After a KeyEvent has been dispatched to and handled by its target, KeyboardFocusManager will request that each KeyEventPostProcessor perform any necessary post-processing as part of the KeyEvent\u0027s final resolution. KeyEventPostProcessors will be notified in the order in which they were added; the current KeyboardFocusManager will be notified last. Notifications will halt as soon as one KeyEventPostProcessor returns true from its postProcessKeyEvent method. There is no limit to the total number of KeyEventPostProcessors that can be added, nor to the number of times that a particular KeyEventPostProcessor instance can be added. If a null post-processor is specified, no action is taken and no exception is thrown. In a multithreaded application, KeyEventPostProcessor behaves the same as other AWT listeners. See AWT Threading Issues for more details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\"\u003e\u003ccode\u003eremoveKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprocessor\u003c/code\u003e - the KeyEventPostProcessor to add to the post-processor chain"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.KeyEventPostProcessor",
            "type": "Class"
          },
          "name": "processor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeKeyEventPostProcessor",
      "comment": "Removes a previously added KeyEventPostProcessor from this KeyboardFocusManager\u0027s post-processor chain. This KeyboardFocusManager cannot itself be entirely removed from the chain. Only additional references added via addKeyEventPostProcessor can be removed. If a null post-processor is specified, if the specified post-processor is not in the post-processor chain, or if this KeyboardFocusManager is specified without having been explicitly added, no action is taken and no exception is thrown. In a multithreaded application, KeyEventPostProcessor behaves the same as other AWT listeners. See AWT Threading Issues for more details.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\"\u003e\u003ccode\u003eaddKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprocessor\u003c/code\u003e - the KeyEventPostProcessor to remove from the post- processor chain"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.awt.KeyEventPostProcessor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getKeyEventPostProcessors",
      "comment": "Returns this KeyboardFocusManager\u0027s KeyEventPostProcessor chain as a List. The List will not include this KeyboardFocusManager unless it was explicitly added via a call to addKeyEventPostProcessor. If no KeyEventPostProcessors are registered, implementations are free to return null or a List of length 0. Client code should not assume one behavior over another, nor should it assume that the behavior, once established, will not change.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#addKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\"\u003e\u003ccode\u003eaddKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#removeKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\"\u003e\u003ccode\u003eremoveKeyEventPostProcessor(java.awt.KeyEventPostProcessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a possibly null or empty List of KeyEventPostProcessors"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.AWTEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "dispatchEvent",
      "comment": "This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf. It is expected that all KeyboardFocusManagers will dispatch all FocusEvents, all WindowEvents related to focus, and all KeyEvents. These events should be dispatched based on the KeyboardFocusManager\u0027s notion of the focus owner and the focused and active Windows, sometimes overriding the source of the specified AWTEvent. Dispatching must be done using redispatchEvent to prevent the AWT event dispatcher from recursively requesting that the KeyboardFocusManager dispatch the event again. If this method returns false, then the AWT event dispatcher will attempt to dispatch the event itself.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#redispatchEvent(java.awt.Component,java.awt.AWTEvent)\"\u003e\u003ccode\u003eredispatchEvent(java.awt.Component, java.awt.AWTEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#dispatchKeyEvent(java.awt.event.KeyEvent)\"\u003e\u003ccode\u003edispatchKeyEvent(java.awt.event.KeyEvent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the AWTEvent to be dispatched"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this method dispatched the event; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.AWTEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "redispatchEvent",
      "comment": "Redispatches an AWTEvent in such a way that the AWT event dispatcher will not recursively request that the KeyboardFocusManager, or any installed KeyEventDispatchers, dispatch the event again. Client implementations of dispatchEvent and client-defined KeyEventDispatchers must call redispatchEvent(target, e) instead of target.dispatchEvent(e) to dispatch an event. This method is intended to be used only by KeyboardFocusManagers and KeyEventDispatchers. It is not for general client use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#dispatchEvent(java.awt.AWTEvent)\"\u003e\u003ccode\u003edispatchEvent(java.awt.AWTEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyEventDispatcher.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eKeyEventDispatcher\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the Component to which the event should be dispatched",
          "\u003ccode\u003ee\u003c/code\u003e - the event to dispatch"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "dispatchKeyEvent",
      "comment": "Typically this method will be called by dispatchEvent if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered. If an implementation of this method returns false, dispatchEvent may try to dispatch the KeyEvent itself, or may simply return false. If true is returned, dispatchEvent should return true as well.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#dispatchEvent(java.awt.AWTEvent)\"\u003e\u003ccode\u003edispatchEvent(java.awt.AWTEvent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyEventDispatcher.html#dispatchKeyEvent(java.awt.event.KeyEvent)\"\u003edispatchKeyEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyEventDispatcher.html\" title\u003d\"interface in java.awt\"\u003eKeyEventDispatcher\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the KeyEvent which the current KeyboardFocusManager has requested that this KeyEventDispatcher dispatch"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the KeyEvent was dispatched; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "postProcessKeyEvent",
      "comment": "This method will be called by dispatchKeyEvent. By default, this method will handle any unconsumed KeyEvents that map to an AWT MenuShortcut by consuming the event and activating the shortcut.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#dispatchKeyEvent(java.awt.event.KeyEvent)\"\u003e\u003ccode\u003edispatchKeyEvent(java.awt.event.KeyEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuShortcut.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eMenuShortcut\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyEventPostProcessor.html#postProcessKeyEvent(java.awt.event.KeyEvent)\"\u003epostProcessKeyEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyEventPostProcessor.html\" title\u003d\"interface in java.awt\"\u003eKeyEventPostProcessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the KeyEvent to post-process"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e to indicate that no other KeyEventPostProcessor will be notified of the KeyEvent."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "focusedComponent",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.event.KeyEvent",
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "processKeyEvent",
      "comment": "This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent. It is expected that focusedComponent is the current focus owner, although this need not be the case. If it is not, focus traversal will nevertheless proceed as if focusedComponent were the current focus owner.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efocusedComponent\u003c/code\u003e - the Component that will be the basis for a focus traversal operation if the specified event represents a focus traversal key for the Component",
          "\u003ccode\u003ee\u003c/code\u003e - the event that may represent a focus traversal key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "after",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "untilFocused",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "enqueueKeyEvents",
      "comment": "Called by the AWT to notify the KeyboardFocusManager that it should delay dispatching of KeyEvents until the specified Component becomes the focus owner. If client code requests a focus change, and the AWT determines that this request might be granted by the native windowing system, then the AWT will call this method. It is the responsibility of the KeyboardFocusManager to delay dispatching of KeyEvents with timestamps later than the specified time stamp until the specified Component receives a FOCUS_GAINED event, or the AWT cancels the delay request by invoking dequeueKeyEvents or discardKeyEvents.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#dequeueKeyEvents(long,java.awt.Component)\"\u003e\u003ccode\u003edequeueKeyEvents(long, java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#discardKeyEvents(java.awt.Component)\"\u003e\u003ccode\u003ediscardKeyEvents(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eafter\u003c/code\u003e - timestamp of current event, or the current, system time if the current event has no timestamp, or the AWT cannot determine which event is currently being handled",
          "\u003ccode\u003euntilFocused\u003c/code\u003e - Component which should receive a FOCUS_GAINED event before any pending KeyEvents"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "after",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "untilFocused",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "dequeueKeyEvents",
      "comment": "Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents. All KeyEvents which were enqueued because of a call to enqueueKeyEvents with the same timestamp and Component should be released for normal dispatching to the current focus owner. If the given timestamp is less than zero, the outstanding enqueue request for the given Component with the oldest timestamp (if any) should be cancelled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#enqueueKeyEvents(long,java.awt.Component)\"\u003e\u003ccode\u003eenqueueKeyEvents(long, java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#discardKeyEvents(java.awt.Component)\"\u003e\u003ccode\u003ediscardKeyEvents(java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eafter\u003c/code\u003e - the timestamp specified in the call to \n\u003ccode\u003eenqueueKeyEvents\u003c/code\u003e, or any value \u0026lt; 0",
          "\u003ccode\u003euntilFocused\u003c/code\u003e - the Component specified in the call to \n\u003ccode\u003eenqueueKeyEvents\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "discardKeyEvents",
      "comment": "Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents. All KeyEvents which were enqueued because of one or more calls to enqueueKeyEvents with the same Component should be discarded.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#enqueueKeyEvents(long,java.awt.Component)\"\u003e\u003ccode\u003eenqueueKeyEvents(long, java.awt.Component)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#dequeueKeyEvents(long,java.awt.Component)\"\u003e\u003ccode\u003edequeueKeyEvents(long, java.awt.Component)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomp\u003c/code\u003e - the Component specified in one or more calls to \n\u003ccode\u003eenqueueKeyEvents\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "aComponent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "focusNextComponent",
      "comment": "Focuses the Component after aComponent, typically based on a FocusTraversalPolicy.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFocusTraversalPolicy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the Component that is the basis for the focus traversal operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "aComponent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "focusPreviousComponent",
      "comment": "Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFocusTraversalPolicy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the Component that is the basis for the focus traversal operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "aComponent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "upFocusCycle",
      "comment": "Moves the focus up one focus traversal cycle. Typically, the focus owner is set to aComponent\u0027s focus cycle root, and the current focus cycle root is set to the new focus owner\u0027s focus cycle root. If, however, aComponent\u0027s focus cycle root is a Window, then typically the focus owner is set to the Window\u0027s default Component to focus, and the current focus cycle root is unchanged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the Component that is the basis for the focus traversal operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Container",
            "type": "Class"
          },
          "name": "aContainer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "downFocusCycle",
      "comment": "Moves the focus down one focus traversal cycle. Typically, if aContainer is a focus cycle root, then the focus owner is set to aContainer\u0027s default Component to focus, and the current focus cycle root is set to aContainer. If aContainer is not a focus cycle root, then no focus traversal operation occurs.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaContainer\u003c/code\u003e - the Container that is the basis for the focus traversal operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "focusNextComponent",
      "comment": "Focuses the Component after the current focus owner.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "focusPreviousComponent",
      "comment": "Focuses the Component before the current focus owner.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "upFocusCycle",
      "comment": "Moves the focus up one focus traversal cycle from the current focus owner. Typically, the new focus owner is set to the current focus owner\u0027s focus cycle root, and the current focus cycle root is set to the new focus owner\u0027s focus cycle root. If, however, the current focus owner\u0027s focus cycle root is a Window, then typically the focus owner is set to the focus cycle root\u0027s default Component to focus, and the current focus cycle root is unchanged.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "downFocusCycle",
      "comment": "Moves the focus down one focus traversal cycle from the current focus owner, if and only if the current focus owner is a Container that is a focus cycle root. Typically, the focus owner is set to the current focus owner\u0027s default Component to focus, and the current focus cycle root is set to the current focus owner. If the current focus owner is not a Container that is a focus cycle root, then no focus traversal operation occurs.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initializes a KeyboardFocusManager.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.KeyboardFocusManager",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eWindow\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eFrame\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eDialog\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/FocusEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eFocusEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/WindowEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eWindowEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}